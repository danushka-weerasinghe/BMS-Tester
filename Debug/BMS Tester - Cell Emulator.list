
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f4  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b8  0800d2a4  0800d2a4  0000e2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e85c  0800e85c  00010a04  2**0
                  CONTENTS
  4 .ARM          00000008  0800e85c  0800e85c  0000f85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e864  0800e864  00010a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e864  0800e864  0000f864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e868  0800e868  0000f868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a04  20000000  0800e86c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a04  2**0
                  CONTENTS
 10 .bss          000013a4  20000a04  20000a04  00010a04  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001da8  20001da8  00010a04  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a04  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005ef12  00000000  00000000  00010a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000069c0  00000000  00000000  0006f946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004558  00000000  00000000  00076308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000034b2  00000000  00000000  0007a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a55c  00000000  00000000  0007dd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036551  00000000  00000000  000a826e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100e19  00000000  00000000  000de7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001df5d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00013140  00000000  00000000  001df61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001f275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a04 	.word	0x20000a04
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d28c 	.word	0x0800d28c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000a08 	.word	0x20000a08
 80001ec:	0800d28c 	.word	0x0800d28c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_frsub>:
 8000a7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a80:	e002      	b.n	8000a88 <__addsf3>
 8000a82:	bf00      	nop

08000a84 <__aeabi_fsub>:
 8000a84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a88 <__addsf3>:
 8000a88:	0042      	lsls	r2, r0, #1
 8000a8a:	bf1f      	itttt	ne
 8000a8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a90:	ea92 0f03 	teqne	r2, r3
 8000a94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9c:	d06a      	beq.n	8000b74 <__addsf3+0xec>
 8000a9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa6:	bfc1      	itttt	gt
 8000aa8:	18d2      	addgt	r2, r2, r3
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	4048      	eorgt	r0, r1
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	2b19      	cmp	r3, #25
 8000ab6:	bf88      	it	hi
 8000ab8:	4770      	bxhi	lr
 8000aba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000abe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ad2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4249      	negne	r1, r1
 8000ada:	ea92 0f03 	teq	r2, r3
 8000ade:	d03f      	beq.n	8000b60 <__addsf3+0xd8>
 8000ae0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae8:	eb10 000c 	adds.w	r0, r0, ip
 8000aec:	f1c3 0320 	rsb	r3, r3, #32
 8000af0:	fa01 f103 	lsl.w	r1, r1, r3
 8000af4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__addsf3+0x78>
 8000afa:	4249      	negs	r1, r1
 8000afc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b04:	d313      	bcc.n	8000b2e <__addsf3+0xa6>
 8000b06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b0a:	d306      	bcc.n	8000b1a <__addsf3+0x92>
 8000b0c:	0840      	lsrs	r0, r0, #1
 8000b0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b12:	f102 0201 	add.w	r2, r2, #1
 8000b16:	2afe      	cmp	r2, #254	@ 0xfe
 8000b18:	d251      	bcs.n	8000bbe <__addsf3+0x136>
 8000b1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b22:	bf08      	it	eq
 8000b24:	f020 0001 	biceq.w	r0, r0, #1
 8000b28:	ea40 0003 	orr.w	r0, r0, r3
 8000b2c:	4770      	bx	lr
 8000b2e:	0049      	lsls	r1, r1, #1
 8000b30:	eb40 0000 	adc.w	r0, r0, r0
 8000b34:	3a01      	subs	r2, #1
 8000b36:	bf28      	it	cs
 8000b38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b3c:	d2ed      	bcs.n	8000b1a <__addsf3+0x92>
 8000b3e:	fab0 fc80 	clz	ip, r0
 8000b42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b46:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4e:	bfaa      	itet	ge
 8000b50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b54:	4252      	neglt	r2, r2
 8000b56:	4318      	orrge	r0, r3
 8000b58:	bfbc      	itt	lt
 8000b5a:	40d0      	lsrlt	r0, r2
 8000b5c:	4318      	orrlt	r0, r3
 8000b5e:	4770      	bx	lr
 8000b60:	f092 0f00 	teq	r2, #0
 8000b64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b68:	bf06      	itte	eq
 8000b6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	3201      	addeq	r2, #1
 8000b70:	3b01      	subne	r3, #1
 8000b72:	e7b5      	b.n	8000ae0 <__addsf3+0x58>
 8000b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	bf18      	it	ne
 8000b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b82:	d021      	beq.n	8000bc8 <__addsf3+0x140>
 8000b84:	ea92 0f03 	teq	r2, r3
 8000b88:	d004      	beq.n	8000b94 <__addsf3+0x10c>
 8000b8a:	f092 0f00 	teq	r2, #0
 8000b8e:	bf08      	it	eq
 8000b90:	4608      	moveq	r0, r1
 8000b92:	4770      	bx	lr
 8000b94:	ea90 0f01 	teq	r0, r1
 8000b98:	bf1c      	itt	ne
 8000b9a:	2000      	movne	r0, #0
 8000b9c:	4770      	bxne	lr
 8000b9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ba2:	d104      	bne.n	8000bae <__addsf3+0x126>
 8000ba4:	0040      	lsls	r0, r0, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	4770      	bx	lr
 8000bae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bb2:	bf3c      	itt	cc
 8000bb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bxcc	lr
 8000bba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	4770      	bx	lr
 8000bc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bcc:	bf16      	itet	ne
 8000bce:	4608      	movne	r0, r1
 8000bd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd4:	4601      	movne	r1, r0
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	bf06      	itte	eq
 8000bda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bde:	ea90 0f01 	teqeq	r0, r1
 8000be2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ui2f>:
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e004      	b.n	8000bf8 <__aeabi_i2f+0x8>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_i2f>:
 8000bf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bf4:	bf48      	it	mi
 8000bf6:	4240      	negmi	r0, r0
 8000bf8:	ea5f 0c00 	movs.w	ip, r0
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c04:	4601      	mov	r1, r0
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	e01c      	b.n	8000c46 <__aeabi_l2f+0x2a>

08000c0c <__aeabi_ul2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e00a      	b.n	8000c30 <__aeabi_l2f+0x14>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_l2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__aeabi_l2f+0x14>
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	ea5f 0c01 	movs.w	ip, r1
 8000c34:	bf02      	ittt	eq
 8000c36:	4684      	moveq	ip, r0
 8000c38:	4601      	moveq	r1, r0
 8000c3a:	2000      	moveq	r0, #0
 8000c3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c40:	bf08      	it	eq
 8000c42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c4a:	fabc f28c 	clz	r2, ip
 8000c4e:	3a08      	subs	r2, #8
 8000c50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c54:	db10      	blt.n	8000c78 <__aeabi_l2f+0x5c>
 8000c56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c68:	fa20 f202 	lsr.w	r2, r0, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f102 0220 	add.w	r2, r2, #32
 8000c7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c88:	fa21 f202 	lsr.w	r2, r1, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e00f      	b.n	8000fb4 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4a33      	ldr	r2, [pc, #204]	@ (8001064 <LED_Init+0xdc>)
 8000f98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	4a31      	ldr	r2, [pc, #196]	@ (8001064 <LED_Init+0xdc>)
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	889b      	ldrh	r3, [r3, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f007 fff3 	bl	8008f94 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b09      	cmp	r3, #9
 8000fb8:	d9ec      	bls.n	8000f94 <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
 8000fbe:	e00f      	b.n	8000fe0 <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	4a29      	ldr	r2, [pc, #164]	@ (8001068 <LED_Init+0xe0>)
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <LED_Init+0xe0>)
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f007 ffdd 	bl	8008f94 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d9ec      	bls.n	8000fc0 <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	e00f      	b.n	800100c <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <LED_Init+0xe4>)
 8000ff0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <LED_Init+0xe4>)
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	f007 ffc7 	bl	8008f94 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	3301      	adds	r3, #1
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d9ec      	bls.n	8000fec <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	733b      	strb	r3, [r7, #12]
 8001016:	e01d      	b.n	8001054 <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8001018:	7b3b      	ldrb	r3, [r7, #12]
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <LED_Init+0xe8>)
 800101c:	2101      	movs	r1, #1
 800101e:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <LED_Init+0xec>)
 8001024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001028:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <LED_Init+0xec>)
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <LED_Init+0xec>)
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	88db      	ldrh	r3, [r3, #6]
 8001040:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 8001042:	88ba      	ldrh	r2, [r7, #4]
 8001044:	79f9      	ldrb	r1, [r7, #7]
 8001046:	2301      	movs	r3, #1
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f002 fd0d 	bl	8003a68 <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	733b      	strb	r3, [r7, #12]
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	2b17      	cmp	r3, #23
 8001058:	d9de      	bls.n	8001018 <LED_Init+0x90>
    }

}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000050 	.word	0x20000050
 800106c:	20000070 	.word	0x20000070
 8001070:	20000a28 	.word	0x20000a28
 8001074:	200000a0 	.word	0x200000a0

08001078 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b0a      	cmp	r3, #10
 8001086:	d80e      	bhi.n	80010a6 <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b01      	subs	r3, #1
 800108c:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <LED_Toggle+0x38>)
 800108e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	3b01      	subs	r3, #1
 8001096:	4906      	ldr	r1, [pc, #24]	@ (80010b0 <LED_Toggle+0x38>)
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f007 ff90 	bl	8008fc6 <HAL_GPIO_TogglePin>
    }
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000

080010b4 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80010be:	f007 f8b5 	bl	800822c <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <Push_ButtonHandler+0x64>)
 80010c6:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e01c      	b.n	8001108 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <Push_ButtonHandler+0x68>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d112      	bne.n	8001102 <Push_ButtonHandler+0x4e>
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <Push_ButtonHandler+0x64>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <Push_ButtonHandler+0x6c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b96      	cmp	r3, #150	@ 0x96
 80010e8:	d90b      	bls.n	8001102 <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffc0 	bl	8001078 <LED_Toggle>
            previousTime = currentTime;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <Push_ButtonHandler+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <Push_ButtonHandler+0x6c>)
 80010fe:	6013      	str	r3, [r2, #0]
            break;
 8001100:	e006      	b.n	8001110 <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b03      	cmp	r3, #3
 800110c:	dddf      	ble.n	80010ce <Push_ButtonHandler+0x1a>
        }
    }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000a20 	.word	0x20000a20
 800111c:	0800d320 	.word	0x0800d320
 8001120:	20000a24 	.word	0x20000a24

08001124 <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e00e      	b.n	8001152 <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	411a      	asrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1c3 030f 	rsb	r3, r3, #15
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	440b      	add	r3, r1
 8001146:	f002 0201 	and.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b09      	cmp	r3, #9
 8001156:	dded      	ble.n	8001134 <intToBinary+0x10>
		    }
		}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e02b      	b.n	80011dc <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b25a      	sxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3308      	adds	r3, #8
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	440b      	add	r3, r1
 80011bc:	6819      	ldr	r1, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1c3 0307 	rsb	r3, r3, #7
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	ddd0      	ble.n	8001184 <assignBytes+0x1e>
		    }
		}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	@ 0x58
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f95c 	bl	80004b8 <__aeabi_f2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b4c      	ldr	r3, [pc, #304]	@ (8001338 <cell12_Temp_01_Set+0x148>)
 8001206:	f7ff fad9 	bl	80007bc <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b49      	ldr	r3, [pc, #292]	@ (800133c <cell12_Temp_01_Set+0x14c>)
 8001218:	f7ff f9a6 	bl	8000568 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fbb2 	bl	800098c <__aeabi_d2iz>
 8001228:	4603      	mov	r3, r0
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2240      	movs	r2, #64	@ 0x40
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00b ff9b 	bl	800d170 <memset>
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4619      	mov	r1, r3
 8001244:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001246:	f7ff ff6d 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff86 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2101      	movs	r1, #1
 800125e:	4838      	ldr	r0, [pc, #224]	@ (8001340 <cell12_Temp_01_Set+0x150>)
 8001260:	f007 fe98 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f006 ffed 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4835      	ldr	r0, [pc, #212]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 8001270:	f007 fe90 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f006 ffe5 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4831      	ldr	r0, [pc, #196]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 8001280:	f007 fe88 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	2202      	movs	r2, #2
 800128a:	492f      	ldr	r1, [pc, #188]	@ (8001348 <cell12_Temp_01_Set+0x158>)
 800128c:	482f      	ldr	r0, [pc, #188]	@ (800134c <cell12_Temp_01_Set+0x15c>)
 800128e:	f009 fc9e 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2102      	movs	r1, #2
 8001296:	482b      	ldr	r0, [pc, #172]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 8001298:	f007 fe7c 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f006 ffd1 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	4827      	ldr	r0, [pc, #156]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 80012a8:	f007 fe74 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	2202      	movs	r2, #2
 80012b2:	4927      	ldr	r1, [pc, #156]	@ (8001350 <cell12_Temp_01_Set+0x160>)
 80012b4:	4825      	ldr	r0, [pc, #148]	@ (800134c <cell12_Temp_01_Set+0x15c>)
 80012b6:	f009 fc8a 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2102      	movs	r1, #2
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 80012c0:	f007 fe68 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f006 ffbd 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2102      	movs	r1, #2
 80012ce:	481d      	ldr	r0, [pc, #116]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 80012d0:	f007 fe60 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80012d4:	f107 0108 	add.w	r1, r7, #8
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2202      	movs	r2, #2
 80012de:	481b      	ldr	r0, [pc, #108]	@ (800134c <cell12_Temp_01_Set+0x15c>)
 80012e0:	f009 fc75 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2102      	movs	r1, #2
 80012e8:	4816      	ldr	r0, [pc, #88]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 80012ea:	f007 fe53 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f006 ffa8 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	4812      	ldr	r0, [pc, #72]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 80012fa:	f007 fe4b 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2302      	movs	r3, #2
 8001306:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <cell12_Temp_01_Set+0x164>)
 8001308:	4913      	ldr	r1, [pc, #76]	@ (8001358 <cell12_Temp_01_Set+0x168>)
 800130a:	4810      	ldr	r0, [pc, #64]	@ (800134c <cell12_Temp_01_Set+0x15c>)
 800130c:	f009 febc 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2102      	movs	r1, #2
 8001314:	480b      	ldr	r0, [pc, #44]	@ (8001344 <cell12_Temp_01_Set+0x154>)
 8001316:	f007 fe3d 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800131a:	200a      	movs	r0, #10
 800131c:	f006 ff92 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4806      	ldr	r0, [pc, #24]	@ (8001340 <cell12_Temp_01_Set+0x150>)
 8001326:	f007 fe35 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f006 ff8a 	bl	8008244 <HAL_Delay>

}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	@ 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40490000 	.word	0x40490000
 800133c:	40900000 	.word	0x40900000
 8001340:	40020000 	.word	0x40020000
 8001344:	40020800 	.word	0x40020800
 8001348:	20000a40 	.word	0x20000a40
 800134c:	20001978 	.word	0x20001978
 8001350:	20000160 	.word	0x20000160
 8001354:	20000a44 	.word	0x20000a44
 8001358:	20000164 	.word	0x20000164

0800135c <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 800135c:	b580      	push	{r7, lr}
 800135e:	b096      	sub	sp, #88	@ 0x58
 8001360:	af02      	add	r7, sp, #8
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f8a6 	bl	80004b8 <__aeabi_f2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <cell12_Temp_02_Set+0x15c>)
 8001372:	f7ff fa23 	bl	80007bc <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b4e      	ldr	r3, [pc, #312]	@ (80014bc <cell12_Temp_02_Set+0x160>)
 8001384:	f7ff f8f0 	bl	8000568 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fafc 	bl	800098c <__aeabi_d2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2240      	movs	r2, #64	@ 0x40
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00b fee5 	bl	800d170 <memset>
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013b2:	f7ff feb7 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 80013b6:	f107 0208 	add.w	r2, r7, #8
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fed0 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2101      	movs	r1, #1
 80013ca:	483d      	ldr	r0, [pc, #244]	@ (80014c0 <cell12_Temp_02_Set+0x164>)
 80013cc:	f007 fde2 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013d0:	200a      	movs	r0, #10
 80013d2:	f006 ff37 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013dc:	4839      	ldr	r0, [pc, #228]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 80013de:	f007 fdd9 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013e2:	200a      	movs	r0, #10
 80013e4:	f006 ff2e 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ee:	4835      	ldr	r0, [pc, #212]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 80013f0:	f007 fdd0 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	2202      	movs	r2, #2
 80013fa:	4933      	ldr	r1, [pc, #204]	@ (80014c8 <cell12_Temp_02_Set+0x16c>)
 80013fc:	4833      	ldr	r0, [pc, #204]	@ (80014cc <cell12_Temp_02_Set+0x170>)
 80013fe:	f009 fbe6 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001408:	482e      	ldr	r0, [pc, #184]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 800140a:	f007 fdc3 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800140e:	200a      	movs	r0, #10
 8001410:	f006 ff18 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800141a:	482a      	ldr	r0, [pc, #168]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 800141c:	f007 fdba 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2202      	movs	r2, #2
 8001426:	492a      	ldr	r1, [pc, #168]	@ (80014d0 <cell12_Temp_02_Set+0x174>)
 8001428:	4828      	ldr	r0, [pc, #160]	@ (80014cc <cell12_Temp_02_Set+0x170>)
 800142a:	f009 fbd0 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001434:	4823      	ldr	r0, [pc, #140]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 8001436:	f007 fdad 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800143a:	200a      	movs	r0, #10
 800143c:	f006 ff02 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001446:	481f      	ldr	r0, [pc, #124]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 8001448:	f007 fda4 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800144c:	f107 0108 	add.w	r1, r7, #8
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	2202      	movs	r2, #2
 8001456:	481d      	ldr	r0, [pc, #116]	@ (80014cc <cell12_Temp_02_Set+0x170>)
 8001458:	f009 fbb9 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001462:	4818      	ldr	r0, [pc, #96]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 8001464:	f007 fd96 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001468:	200a      	movs	r0, #10
 800146a:	f006 feeb 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001474:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 8001476:	f007 fd8d 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2302      	movs	r3, #2
 8001482:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <cell12_Temp_02_Set+0x178>)
 8001484:	4914      	ldr	r1, [pc, #80]	@ (80014d8 <cell12_Temp_02_Set+0x17c>)
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <cell12_Temp_02_Set+0x170>)
 8001488:	f009 fdfe 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <cell12_Temp_02_Set+0x168>)
 8001494:	f007 fd7e 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f006 fed3 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <cell12_Temp_02_Set+0x164>)
 80014a4:	f007 fd76 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f006 fecb 	bl	8008244 <HAL_Delay>

}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	@ 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40490000 	.word	0x40490000
 80014bc:	40900000 	.word	0x40900000
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40021400 	.word	0x40021400
 80014c8:	20000a40 	.word	0x20000a40
 80014cc:	20001978 	.word	0x20001978
 80014d0:	20000160 	.word	0x20000160
 80014d4:	20000a44 	.word	0x20000a44
 80014d8:	20000164 	.word	0x20000164

080014dc <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b096      	sub	sp, #88	@ 0x58
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7fe ffe6 	bl	80004b8 <__aeabi_f2d>
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <cell12_Temp_03_Set+0x14c>)
 80014f2:	f7ff f963 	bl	80007bc <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <cell12_Temp_03_Set+0x150>)
 8001504:	f7ff f830 	bl	8000568 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fa3c 	bl	800098c <__aeabi_d2iz>
 8001514:	4603      	mov	r3, r0
 8001516:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00b fe25 	bl	800d170 <memset>
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001532:	f7ff fdf7 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001536:	f107 0208 	add.w	r2, r7, #8
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe10 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154c:	4838      	ldr	r0, [pc, #224]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 800154e:	f007 fd21 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001552:	200a      	movs	r0, #10
 8001554:	f006 fe76 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	4834      	ldr	r0, [pc, #208]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 800155e:	f007 fd19 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f006 fe6e 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2140      	movs	r1, #64	@ 0x40
 800156c:	4830      	ldr	r0, [pc, #192]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 800156e:	f007 fd11 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2202      	movs	r2, #2
 8001578:	492e      	ldr	r1, [pc, #184]	@ (8001634 <cell12_Temp_03_Set+0x158>)
 800157a:	482f      	ldr	r0, [pc, #188]	@ (8001638 <cell12_Temp_03_Set+0x15c>)
 800157c:	f009 fb27 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2140      	movs	r1, #64	@ 0x40
 8001584:	482a      	ldr	r0, [pc, #168]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 8001586:	f007 fd05 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f006 fe5a 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	@ 0x40
 8001594:	4826      	ldr	r0, [pc, #152]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 8001596:	f007 fcfd 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	2202      	movs	r2, #2
 80015a0:	4926      	ldr	r1, [pc, #152]	@ (800163c <cell12_Temp_03_Set+0x160>)
 80015a2:	4825      	ldr	r0, [pc, #148]	@ (8001638 <cell12_Temp_03_Set+0x15c>)
 80015a4:	f009 fb13 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	4820      	ldr	r0, [pc, #128]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 80015ae:	f007 fcf1 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015b2:	200a      	movs	r0, #10
 80015b4:	f006 fe46 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2140      	movs	r1, #64	@ 0x40
 80015bc:	481c      	ldr	r0, [pc, #112]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 80015be:	f007 fce9 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80015c2:	f107 0108 	add.w	r1, r7, #8
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	2202      	movs	r2, #2
 80015cc:	481a      	ldr	r0, [pc, #104]	@ (8001638 <cell12_Temp_03_Set+0x15c>)
 80015ce:	f009 fafe 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2140      	movs	r1, #64	@ 0x40
 80015d6:	4816      	ldr	r0, [pc, #88]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 80015d8:	f007 fcdc 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f006 fe31 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2140      	movs	r1, #64	@ 0x40
 80015e6:	4812      	ldr	r0, [pc, #72]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 80015e8:	f007 fcd4 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2302      	movs	r3, #2
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <cell12_Temp_03_Set+0x164>)
 80015f6:	4913      	ldr	r1, [pc, #76]	@ (8001644 <cell12_Temp_03_Set+0x168>)
 80015f8:	480f      	ldr	r0, [pc, #60]	@ (8001638 <cell12_Temp_03_Set+0x15c>)
 80015fa:	f009 fd45 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	@ 0x40
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 8001604:	f007 fcc6 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f006 fe1b 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <cell12_Temp_03_Set+0x154>)
 8001616:	f007 fcbd 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800161a:	200a      	movs	r0, #10
 800161c:	f006 fe12 	bl	8008244 <HAL_Delay>

}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	@ 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40490000 	.word	0x40490000
 800162c:	40900000 	.word	0x40900000
 8001630:	40021400 	.word	0x40021400
 8001634:	20000a40 	.word	0x20000a40
 8001638:	20001978 	.word	0x20001978
 800163c:	20000160 	.word	0x20000160
 8001640:	20000a44 	.word	0x20000a44
 8001644:	20000164 	.word	0x20000164

08001648 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af02      	add	r7, sp, #8
 800164e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff30 	bl	80004b8 <__aeabi_f2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <cell11_Temp_01_Set+0x160>)
 800165e:	f7ff f8ad 	bl	80007bc <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <cell11_Temp_01_Set+0x164>)
 8001670:	f7fe ff7a 	bl	8000568 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff f986 	bl	800098c <__aeabi_d2iz>
 8001680:	4603      	mov	r3, r0
 8001682:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2240      	movs	r2, #64	@ 0x40
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f00b fd6f 	bl	800d170 <memset>
 8001692:	2301      	movs	r3, #1
 8001694:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800169e:	f7ff fd41 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fd5a 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016b8:	483d      	ldr	r0, [pc, #244]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 80016ba:	f007 fc6b 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016be:	200a      	movs	r0, #10
 80016c0:	f006 fdc0 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ca:	4839      	ldr	r0, [pc, #228]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 80016cc:	f007 fc62 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f006 fdb7 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016dc:	4834      	ldr	r0, [pc, #208]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 80016de:	f007 fc59 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	2202      	movs	r2, #2
 80016e8:	4932      	ldr	r1, [pc, #200]	@ (80017b4 <cell11_Temp_01_Set+0x16c>)
 80016ea:	4833      	ldr	r0, [pc, #204]	@ (80017b8 <cell11_Temp_01_Set+0x170>)
 80016ec:	f009 fa6f 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f6:	482e      	ldr	r0, [pc, #184]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 80016f8:	f007 fc4c 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f006 fda1 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001708:	4829      	ldr	r0, [pc, #164]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 800170a:	f007 fc43 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	2202      	movs	r2, #2
 8001714:	4929      	ldr	r1, [pc, #164]	@ (80017bc <cell11_Temp_01_Set+0x174>)
 8001716:	4828      	ldr	r0, [pc, #160]	@ (80017b8 <cell11_Temp_01_Set+0x170>)
 8001718:	f009 fa59 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001722:	4823      	ldr	r0, [pc, #140]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001724:	f007 fc36 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f006 fd8b 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001736:	f007 fc2d 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800173a:	f107 0108 	add.w	r1, r7, #8
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2202      	movs	r2, #2
 8001744:	481c      	ldr	r0, [pc, #112]	@ (80017b8 <cell11_Temp_01_Set+0x170>)
 8001746:	f009 fa42 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001750:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001752:	f007 fc1f 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f006 fd74 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001762:	4813      	ldr	r0, [pc, #76]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001764:	f007 fc16 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2302      	movs	r3, #2
 8001770:	4a13      	ldr	r2, [pc, #76]	@ (80017c0 <cell11_Temp_01_Set+0x178>)
 8001772:	4914      	ldr	r1, [pc, #80]	@ (80017c4 <cell11_Temp_01_Set+0x17c>)
 8001774:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <cell11_Temp_01_Set+0x170>)
 8001776:	f009 fc87 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001782:	f007 fc07 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001786:	200a      	movs	r0, #10
 8001788:	f006 fd5c 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <cell11_Temp_01_Set+0x168>)
 8001794:	f007 fbfe 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001798:	200a      	movs	r0, #10
 800179a:	f006 fd53 	bl	8008244 <HAL_Delay>

}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	@ 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40490000 	.word	0x40490000
 80017ac:	40900000 	.word	0x40900000
 80017b0:	40021c00 	.word	0x40021c00
 80017b4:	20000a40 	.word	0x20000a40
 80017b8:	200019d0 	.word	0x200019d0
 80017bc:	20000160 	.word	0x20000160
 80017c0:	20000a44 	.word	0x20000a44
 80017c4:	20000164 	.word	0x20000164

080017c8 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b096      	sub	sp, #88	@ 0x58
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fe70 	bl	80004b8 <__aeabi_f2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <cell11_Temp_02_Set+0x160>)
 80017de:	f7fe ffed 	bl	80007bc <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b4f      	ldr	r3, [pc, #316]	@ (800192c <cell11_Temp_02_Set+0x164>)
 80017f0:	f7fe feba 	bl	8000568 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f8c6 	bl	800098c <__aeabi_d2iz>
 8001800:	4603      	mov	r3, r0
 8001802:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2240      	movs	r2, #64	@ 0x40
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f00b fcaf 	bl	800d170 <memset>
 8001812:	2301      	movs	r3, #1
 8001814:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800181e:	f7ff fc81 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001822:	f107 0208 	add.w	r2, r7, #8
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc9a 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001838:	483d      	ldr	r0, [pc, #244]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 800183a:	f007 fbab 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800183e:	200a      	movs	r0, #10
 8001840:	f006 fd00 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800184a:	4839      	ldr	r0, [pc, #228]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 800184c:	f007 fba2 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001850:	200a      	movs	r0, #10
 8001852:	f006 fcf7 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800185c:	4834      	ldr	r0, [pc, #208]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 800185e:	f007 fb99 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2202      	movs	r2, #2
 8001868:	4932      	ldr	r1, [pc, #200]	@ (8001934 <cell11_Temp_02_Set+0x16c>)
 800186a:	4833      	ldr	r0, [pc, #204]	@ (8001938 <cell11_Temp_02_Set+0x170>)
 800186c:	f009 f9af 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001876:	482e      	ldr	r0, [pc, #184]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 8001878:	f007 fb8c 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800187c:	200a      	movs	r0, #10
 800187e:	f006 fce1 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001888:	4829      	ldr	r0, [pc, #164]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 800188a:	f007 fb83 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	2202      	movs	r2, #2
 8001894:	4929      	ldr	r1, [pc, #164]	@ (800193c <cell11_Temp_02_Set+0x174>)
 8001896:	4828      	ldr	r0, [pc, #160]	@ (8001938 <cell11_Temp_02_Set+0x170>)
 8001898:	f009 f999 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a2:	4823      	ldr	r0, [pc, #140]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 80018a4:	f007 fb76 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018a8:	200a      	movs	r0, #10
 80018aa:	f006 fccb 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b4:	481e      	ldr	r0, [pc, #120]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 80018b6:	f007 fb6d 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80018ba:	f107 0108 	add.w	r1, r7, #8
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	2202      	movs	r2, #2
 80018c4:	481c      	ldr	r0, [pc, #112]	@ (8001938 <cell11_Temp_02_Set+0x170>)
 80018c6:	f009 f982 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d0:	4817      	ldr	r0, [pc, #92]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 80018d2:	f007 fb5f 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018d6:	200a      	movs	r0, #10
 80018d8:	f006 fcb4 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e2:	4813      	ldr	r0, [pc, #76]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 80018e4:	f007 fb56 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <cell11_Temp_02_Set+0x178>)
 80018f2:	4914      	ldr	r1, [pc, #80]	@ (8001944 <cell11_Temp_02_Set+0x17c>)
 80018f4:	4810      	ldr	r0, [pc, #64]	@ (8001938 <cell11_Temp_02_Set+0x170>)
 80018f6:	f009 fbc7 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001900:	480b      	ldr	r0, [pc, #44]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 8001902:	f007 fb47 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001906:	200a      	movs	r0, #10
 8001908:	f006 fc9c 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <cell11_Temp_02_Set+0x168>)
 8001914:	f007 fb3e 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f006 fc93 	bl	8008244 <HAL_Delay>

}
 800191e:	bf00      	nop
 8001920:	3750      	adds	r7, #80	@ 0x50
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40490000 	.word	0x40490000
 800192c:	40900000 	.word	0x40900000
 8001930:	40021c00 	.word	0x40021c00
 8001934:	20000a40 	.word	0x20000a40
 8001938:	200019d0 	.word	0x200019d0
 800193c:	20000160 	.word	0x20000160
 8001940:	20000a44 	.word	0x20000a44
 8001944:	20000164 	.word	0x20000164

08001948 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8001948:	b580      	push	{r7, lr}
 800194a:	b096      	sub	sp, #88	@ 0x58
 800194c:	af02      	add	r7, sp, #8
 800194e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fdb0 	bl	80004b8 <__aeabi_f2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b51      	ldr	r3, [pc, #324]	@ (8001aa4 <cell11_Temp_03_Set+0x15c>)
 800195e:	f7fe ff2d 	bl	80007bc <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa8 <cell11_Temp_03_Set+0x160>)
 8001970:	f7fe fdfa 	bl	8000568 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f806 	bl	800098c <__aeabi_d2iz>
 8001980:	4603      	mov	r3, r0
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2240      	movs	r2, #64	@ 0x40
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00b fbef 	bl	800d170 <memset>
 8001992:	2301      	movs	r3, #1
 8001994:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800199e:	f7ff fbc1 	bl	8001124 <intToBinary>
	assignBytes(resArray, resByteArray);
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fbda 	bl	8001166 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2140      	movs	r1, #64	@ 0x40
 80019b6:	483d      	ldr	r0, [pc, #244]	@ (8001aac <cell11_Temp_03_Set+0x164>)
 80019b8:	f007 faec 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019bc:	200a      	movs	r0, #10
 80019be:	f006 fc41 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019c8:	4839      	ldr	r0, [pc, #228]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 80019ca:	f007 fae3 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019ce:	200a      	movs	r0, #10
 80019d0:	f006 fc38 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019da:	4835      	ldr	r0, [pc, #212]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 80019dc:	f007 fada 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	2202      	movs	r2, #2
 80019e6:	4933      	ldr	r1, [pc, #204]	@ (8001ab4 <cell11_Temp_03_Set+0x16c>)
 80019e8:	4833      	ldr	r0, [pc, #204]	@ (8001ab8 <cell11_Temp_03_Set+0x170>)
 80019ea:	f009 f8f0 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019f4:	482e      	ldr	r0, [pc, #184]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 80019f6:	f007 facd 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019fa:	200a      	movs	r0, #10
 80019fc:	f006 fc22 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a06:	482a      	ldr	r0, [pc, #168]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a08:	f007 fac4 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	2202      	movs	r2, #2
 8001a12:	492a      	ldr	r1, [pc, #168]	@ (8001abc <cell11_Temp_03_Set+0x174>)
 8001a14:	4828      	ldr	r0, [pc, #160]	@ (8001ab8 <cell11_Temp_03_Set+0x170>)
 8001a16:	f009 f8da 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a20:	4823      	ldr	r0, [pc, #140]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a22:	f007 fab7 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f006 fc0c 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a32:	481f      	ldr	r0, [pc, #124]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a34:	f007 faae 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001a38:	f107 0108 	add.w	r1, r7, #8
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	2202      	movs	r2, #2
 8001a42:	481d      	ldr	r0, [pc, #116]	@ (8001ab8 <cell11_Temp_03_Set+0x170>)
 8001a44:	f009 f8c3 	bl	800abce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a4e:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a50:	f007 faa0 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a54:	200a      	movs	r0, #10
 8001a56:	f006 fbf5 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a60:	4813      	ldr	r0, [pc, #76]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a62:	f007 fa97 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <cell11_Temp_03_Set+0x178>)
 8001a70:	4914      	ldr	r1, [pc, #80]	@ (8001ac4 <cell11_Temp_03_Set+0x17c>)
 8001a72:	4811      	ldr	r0, [pc, #68]	@ (8001ab8 <cell11_Temp_03_Set+0x170>)
 8001a74:	f009 fb08 	bl	800b088 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <cell11_Temp_03_Set+0x168>)
 8001a80:	f007 fa88 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f006 fbdd 	bl	8008244 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2140      	movs	r1, #64	@ 0x40
 8001a8e:	4807      	ldr	r0, [pc, #28]	@ (8001aac <cell11_Temp_03_Set+0x164>)
 8001a90:	f007 fa80 	bl	8008f94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a94:	200a      	movs	r0, #10
 8001a96:	f006 fbd5 	bl	8008244 <HAL_Delay>

}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	@ 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40490000 	.word	0x40490000
 8001aa8:	40900000 	.word	0x40900000
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	20000a40 	.word	0x20000a40
 8001ab8:	200019d0 	.word	0x200019d0
 8001abc:	20000160 	.word	0x20000160
 8001ac0:	20000a44 	.word	0x20000a44
 8001ac4:	20000164 	.word	0x20000164

08001ac8 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	72fb      	strb	r3, [r7, #11]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ade:	d01a      	beq.n	8001b16 <u8x8_stm32_gpio_and_delay+0x4e>
 8001ae0:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ae2:	dc1f      	bgt.n	8001b24 <u8x8_stm32_gpio_and_delay+0x5c>
 8001ae4:	2b4a      	cmp	r3, #74	@ 0x4a
 8001ae6:	d00f      	beq.n	8001b08 <u8x8_stm32_gpio_and_delay+0x40>
 8001ae8:	2b4a      	cmp	r3, #74	@ 0x4a
 8001aea:	dc1b      	bgt.n	8001b24 <u8x8_stm32_gpio_and_delay+0x5c>
 8001aec:	2b28      	cmp	r3, #40	@ 0x28
 8001aee:	d002      	beq.n	8001af6 <u8x8_stm32_gpio_and_delay+0x2e>
 8001af0:	2b29      	cmp	r3, #41	@ 0x29
 8001af2:	d004      	beq.n	8001afe <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8001af4:	e016      	b.n	8001b24 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8001af6:	2002      	movs	r0, #2
 8001af8:	f006 fba4 	bl	8008244 <HAL_Delay>
            break;
 8001afc:	e013      	b.n	8001b26 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8001afe:	7abb      	ldrb	r3, [r7, #10]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 fb9f 	bl	8008244 <HAL_Delay>
            break;
 8001b06:	e00e      	b.n	8001b26 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <u8x8_stm32_gpio_and_delay+0x68>)
 8001b10:	f007 fa40 	bl	8008f94 <HAL_GPIO_WritePin>
            break;
 8001b14:	e007      	b.n	8001b26 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001b16:	7abb      	ldrb	r3, [r7, #10]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <u8x8_stm32_gpio_and_delay+0x68>)
 8001b1e:	f007 fa39 	bl	8008f94 <HAL_GPIO_WritePin>
            break;
 8001b22:	e000      	b.n	8001b26 <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8001b24:	bf00      	nop
    }
    return 1U;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800

08001b34 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	72fb      	strb	r3, [r7, #11]
 8001b42:	4613      	mov	r3, r2
 8001b44:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	3b14      	subs	r3, #20
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d83e      	bhi.n	8001bd0 <u8x8_byte_4wire_hw_spi+0x9c>
 8001b52:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <u8x8_byte_4wire_hw_spi+0x24>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001bd7 	.word	0x08001bd7
 8001b5c:	08001bd1 	.word	0x08001bd1
 8001b60:	08001bd1 	.word	0x08001bd1
 8001b64:	08001b8d 	.word	0x08001b8d
 8001b68:	08001bad 	.word	0x08001bad
 8001b6c:	08001bbf 	.word	0x08001bbf
 8001b70:	08001bd1 	.word	0x08001bd1
 8001b74:	08001bd1 	.word	0x08001bd1
 8001b78:	08001bd1 	.word	0x08001bd1
 8001b7c:	08001bd1 	.word	0x08001bd1
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001bd1 	.word	0x08001bd1
 8001b88:	08001b9f 	.word	0x08001b9f
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001b8c:	7abb      	ldrb	r3, [r7, #10]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <u8x8_byte_4wire_hw_spi+0xb0>)
 8001b98:	f009 f819 	bl	800abce <HAL_SPI_Transmit>
            break;
 8001b9c:	e01c      	b.n	8001bd8 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001b9e:	7abb      	ldrb	r3, [r7, #10]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <u8x8_byte_4wire_hw_spi+0xb4>)
 8001ba6:	f007 f9f5 	bl	8008f94 <HAL_GPIO_WritePin>
            break;
 8001baa:	e015      	b.n	8001bd8 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <u8x8_byte_4wire_hw_spi+0xb8>)
 8001bb8:	f007 f9ec 	bl	8008f94 <HAL_GPIO_WritePin>
            break;
 8001bbc:	e00c      	b.n	8001bd8 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <u8x8_byte_4wire_hw_spi+0xb8>)
 8001bca:	f007 f9e3 	bl	8008f94 <HAL_GPIO_WritePin>
            break;
 8001bce:	e003      	b.n	8001bd8 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
            break;
 8001bd4:	e000      	b.n	8001bd8 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8001bd6:	bf00      	nop
    }
    return retVal;
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20001a28 	.word	0x20001a28
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40020c00 	.word	0x40020c00

08001bf0 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <Display_Init+0x3c>)
 8001bfa:	f007 f9cb 	bl	8008f94 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <Display_Init+0x40>)
 8001c00:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <Display_Init+0x44>)
 8001c02:	490d      	ldr	r1, [pc, #52]	@ (8001c38 <Display_Init+0x48>)
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <Display_Init+0x4c>)
 8001c06:	f000 fa17 	bl	8002038 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001c0a:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <Display_Init+0x4c>)
 8001c0c:	f001 fe22 	bl	8003854 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <Display_Init+0x4c>)
 8001c14:	f001 fe2d 	bl	8003872 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001c18:	4808      	ldr	r0, [pc, #32]	@ (8001c3c <Display_Init+0x4c>)
 8001c1a:	f000 f9e7 	bl	8001fec <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001c1e:	2178      	movs	r1, #120	@ 0x78
 8001c20:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <Display_Init+0x4c>)
 8001c22:	f001 fe37 	bl	8003894 <u8x8_SetContrast>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	08001ac9 	.word	0x08001ac9
 8001c34:	08001b35 	.word	0x08001b35
 8001c38:	0800df80 	.word	0x0800df80
 8001c3c:	20000a48 	.word	0x20000a48

08001c40 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001c46:	4824      	ldr	r0, [pc, #144]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c48:	f000 f98e 	bl	8001f68 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <Display_MainTitlePage+0x9c>)
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2340      	movs	r3, #64	@ 0x40
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	481f      	ldr	r0, [pc, #124]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c5c:	f000 f8b6 	bl	8001dcc <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8001c60:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c62:	f000 f995 	bl	8001f90 <u8g2_NextPage>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ef      	bne.n	8001c4c <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c70:	f006 fae8 	bl	8008244 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8001c74:	4818      	ldr	r0, [pc, #96]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c76:	f000 f8ec 	bl	8001e52 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001c7a:	4919      	ldr	r1, [pc, #100]	@ (8001ce0 <Display_MainTitlePage+0xa0>)
 8001c7c:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c7e:	f000 ff8b 	bl	8002b98 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <Display_MainTitlePage+0xa4>)
 8001c84:	2210      	movs	r2, #16
 8001c86:	212a      	movs	r1, #42	@ 0x2a
 8001c88:	4813      	ldr	r0, [pc, #76]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c8a:	f000 fee3 	bl	8002a54 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001c8e:	4914      	ldr	r1, [pc, #80]	@ (8001ce0 <Display_MainTitlePage+0xa0>)
 8001c90:	4811      	ldr	r0, [pc, #68]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c92:	f000 ff81 	bl	8002b98 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <Display_MainTitlePage+0xa8>)
 8001c98:	2221      	movs	r2, #33	@ 0x21
 8001c9a:	2106      	movs	r1, #6
 8001c9c:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001c9e:	f000 fed9 	bl	8002a54 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f006 face 	bl	8008244 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001caa:	f000 f8d2 	bl	8001e52 <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8001cae:	480a      	ldr	r0, [pc, #40]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001cb0:	f000 f96e 	bl	8001f90 <u8g2_NextPage>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1c5      	bne.n	8001c46 <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001cba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cbe:	f006 fac1 	bl	8008244 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <Display_MainTitlePage+0x98>)
 8001cc4:	f000 f8c5 	bl	8001e52 <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4807      	ldr	r0, [pc, #28]	@ (8001cec <Display_MainTitlePage+0xac>)
 8001cce:	f007 f961 	bl	8008f94 <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000a48 	.word	0x20000a48
 8001cdc:	20000168 	.word	0x20000168
 8001ce0:	0800d328 	.word	0x0800d328
 8001ce4:	0800d2a4 	.word	0x0800d2a4
 8001ce8:	0800d2ac 	.word	0x0800d2ac
 8001cec:	40021800 	.word	0x40021800

08001cf0 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	817b      	strh	r3, [r7, #10]
 8001d02:	460b      	mov	r3, r1
 8001d04:	813b      	strh	r3, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d10:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001d12:	7dbb      	ldrb	r3, [r7, #22]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001d20:	897a      	ldrh	r2, [r7, #10]
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	4413      	add	r3, r2
 8001d26:	b298      	uxth	r0, r3
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	893a      	ldrh	r2, [r7, #8]
 8001d30:	8979      	ldrh	r1, [r7, #10]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f001 f875 	bl	8002e26 <u8g2_IsIntersection>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001d46:	e035      	b.n	8001db4 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	7dba      	ldrb	r2, [r7, #22]
 8001d5a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001d5e:	893a      	ldrh	r2, [r7, #8]
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 ff9e 	bl	8002caa <u8g2_DrawHVLine>
 8001d6e:	e010      	b.n	8001d92 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	7d7a      	ldrb	r2, [r7, #21]
 8001d7e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001d82:	893a      	ldrh	r2, [r7, #8]
 8001d84:	8979      	ldrh	r1, [r7, #10]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 ff8c 	bl	8002caa <u8g2_DrawHVLine>
    }
    x++;
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	3301      	adds	r3, #1
 8001d96:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	75fb      	strb	r3, [r7, #23]
      b++;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3301      	adds	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1c6      	bne.n	8001d48 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	7dba      	ldrb	r2, [r7, #22]
 8001dbe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001dc2:	e000      	b.n	8001dc6 <u8g2_DrawHXBM+0xd6>
    return;
 8001dc4:	bf00      	nop
}
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	460b      	mov	r3, r1
 8001de0:	813b      	strh	r3, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001dea:	8afb      	ldrh	r3, [r7, #22]
 8001dec:	3307      	adds	r3, #7
 8001dee:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001df0:	8afb      	ldrh	r3, [r7, #22]
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001df6:	897a      	ldrh	r2, [r7, #10]
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b298      	uxth	r0, r3
 8001dfe:	893a      	ldrh	r2, [r7, #8]
 8001e00:	8c3b      	ldrh	r3, [r7, #32]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	893a      	ldrh	r2, [r7, #8]
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f001 f809 	bl	8002e26 <u8g2_IsIntersection>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d017      	beq.n	8001e4a <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001e1a:	e012      	b.n	8001e42 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001e1c:	88f8      	ldrh	r0, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	8979      	ldrh	r1, [r7, #10]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4603      	mov	r3, r0
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff ff61 	bl	8001cf0 <u8g2_DrawHXBM>
    bitmap += blen;
 8001e2e:	8afb      	ldrh	r3, [r7, #22]
 8001e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e32:	4413      	add	r3, r2
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001e36:	893b      	ldrh	r3, [r7, #8]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	813b      	strh	r3, [r7, #8]
    h--;
 8001e3c:	8c3b      	ldrh	r3, [r7, #32]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001e42:	8c3b      	ldrh	r3, [r7, #32]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e9      	bne.n	8001e1c <u8g2_DrawXBM+0x50>
 8001e48:	e000      	b.n	8001e4c <u8g2_DrawXBM+0x80>
    return;
 8001e4a:	bf00      	nop
  }
}
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	7c1b      	ldrb	r3, [r3, #16]
 8001e60:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00b f975 	bl	800d170 <memset>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af02      	add	r7, sp, #8
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	7c1b      	ldrb	r3, [r3, #16]
 8001ea4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eae:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	89ba      	ldrh	r2, [r7, #12]
 8001eb6:	fb12 f303 	smulbb	r3, r2, r3
 8001eba:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001ebc:	89bb      	ldrh	r3, [r7, #12]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001eca:	7bf9      	ldrb	r1, [r7, #15]
 8001ecc:	78ba      	ldrb	r2, [r7, #2]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f001 fc8b 	bl	80037f2 <u8x8_DrawTile>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ef6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001efe:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	7c5b      	ldrb	r3, [r3, #17]
 8001f06:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001f08:	7bba      	ldrb	r2, [r7, #14]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffbd 	bl	8001e8e <u8g2_send_tile_row>
    src_row++;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	7b7b      	ldrb	r3, [r7, #13]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d203      	bcs.n	8001f30 <u8g2_send_buffer+0x4c>
 8001f28:	7bba      	ldrb	r2, [r7, #14]
 8001f2a:	7b3b      	ldrb	r3, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3eb      	bcc.n	8001f08 <u8g2_send_buffer+0x24>
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff69 	bl	8001e52 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffd8 	bl	8001f38 <u8g2_SetBufferCurrTileRow>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffa3 	bl	8001ee4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fa4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	4413      	add	r3, r2
 8001fb0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	7c5b      	ldrb	r3, [r3, #17]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d304      	bcc.n	8001fc8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f001 fc79 	bl	80038b6 <u8x8_RefreshDisplay>
    return 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e00d      	b.n	8001fe4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff3d 	bl	8001e52 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffab 	bl	8001f38 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ffb7 	bl	8001f68 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffc8 	bl	8001f90 <u8g2_NextPage>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002006:	2100      	movs	r1, #0
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff95 	bl	8001f38 <u8g2_SetBufferCurrTileRow>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2208      	movs	r2, #8
 8002024:	701a      	strb	r2, [r3, #0]
  return buf;
 8002026:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20000adc 	.word	0x20000adc

08002038 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <u8g2_Setup_st7565_64128n_f+0x44>)
 800204e:	490c      	ldr	r1, [pc, #48]	@ (8002080 <u8g2_Setup_st7565_64128n_f+0x48>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f001 fc91 	bl	8003978 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002056:	f107 0313 	add.w	r3, r7, #19
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ffdc 	bl	8002018 <u8g2_m_16_8_f>
 8002060:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002062:	7cfa      	ldrb	r2, [r7, #19]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <u8g2_Setup_st7565_64128n_f+0x4c>)
 800206a:	6979      	ldr	r1, [r7, #20]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 ffc4 	bl	8002ffa <u8g2_SetupBuffer>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	0800350d 	.word	0x0800350d
 8002080:	080036ad 	.word	0x080036ad
 8002084:	08002e7d 	.word	0x08002e7d

08002088 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	781b      	ldrb	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	81fb      	strh	r3, [r7, #14]
    font++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3301      	adds	r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	4413      	add	r3, r2
 80020dc:	81fb      	strh	r3, [r7, #14]
    return pos;
 80020de:	89fb      	ldrh	r3, [r7, #14]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80020f6:	2100      	movs	r1, #0
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7ff ffc5 	bl	8002088 <u8g2_font_get_byte>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002106:	2101      	movs	r1, #1
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f7ff ffbd 	bl	8002088 <u8g2_font_get_byte>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002116:	2102      	movs	r1, #2
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7ff ffb5 	bl	8002088 <u8g2_font_get_byte>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002126:	2103      	movs	r1, #3
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f7ff ffad 	bl	8002088 <u8g2_font_get_byte>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002136:	2104      	movs	r1, #4
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f7ff ffa5 	bl	8002088 <u8g2_font_get_byte>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002146:	2105      	movs	r1, #5
 8002148:	6838      	ldr	r0, [r7, #0]
 800214a:	f7ff ff9d 	bl	8002088 <u8g2_font_get_byte>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002156:	2106      	movs	r1, #6
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f7ff ff95 	bl	8002088 <u8g2_font_get_byte>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002166:	2107      	movs	r1, #7
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7ff ff8d 	bl	8002088 <u8g2_font_get_byte>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002176:	2108      	movs	r1, #8
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7ff ff85 	bl	8002088 <u8g2_font_get_byte>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002186:	2109      	movs	r1, #9
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ff7d 	bl	8002088 <u8g2_font_get_byte>
 800218e:	4603      	mov	r3, r0
 8002190:	b25a      	sxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002196:	210a      	movs	r1, #10
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7ff ff75 	bl	8002088 <u8g2_font_get_byte>
 800219e:	4603      	mov	r3, r0
 80021a0:	b25a      	sxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80021a6:	210b      	movs	r1, #11
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f7ff ff6d 	bl	8002088 <u8g2_font_get_byte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b25a      	sxtb	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80021b6:	210c      	movs	r1, #12
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f7ff ff65 	bl	8002088 <u8g2_font_get_byte>
 80021be:	4603      	mov	r3, r0
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80021c6:	210d      	movs	r1, #13
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7ff ff5d 	bl	8002088 <u8g2_font_get_byte>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b25a      	sxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80021d6:	210e      	movs	r1, #14
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	f7ff ff55 	bl	8002088 <u8g2_font_get_byte>
 80021de:	4603      	mov	r3, r0
 80021e0:	b25a      	sxtb	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80021e6:	210f      	movs	r1, #15
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f7ff ff4d 	bl	8002088 <u8g2_font_get_byte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b25a      	sxtb	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80021f6:	2110      	movs	r1, #16
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f7ff ff45 	bl	8002088 <u8g2_font_get_byte>
 80021fe:	4603      	mov	r3, r0
 8002200:	b25a      	sxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002206:	2111      	movs	r1, #17
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f7ff ff4f 	bl	80020ac <u8g2_font_get_word>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002216:	2113      	movs	r1, #19
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7ff ff47 	bl	80020ac <u8g2_font_get_word>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002226:	2115      	movs	r1, #21
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7ff ff3f 	bl	80020ac <u8g2_font_get_word>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	82da      	strh	r2, [r3, #22]
#endif
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b1b      	ldrb	r3, [r3, #12]
 800224e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	fa42 f303 	asr.w	r3, r2, r3
 8002260:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002262:	7b7b      	ldrb	r3, [r7, #13]
 8002264:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002266:	7bba      	ldrb	r2, [r7, #14]
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	4413      	add	r3, r2
 800226c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	2b07      	cmp	r3, #7
 8002272:	d91a      	bls.n	80022aa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002274:	2308      	movs	r3, #8
 8002276:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002278:	7b3a      	ldrb	r2, [r7, #12]
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	b25a      	sxtb	r2, r3
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4313      	orrs	r3, r2
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	3b08      	subs	r3, #8
 80022a8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4013      	ands	r3, r2
 80022be:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7bba      	ldrb	r2, [r7, #14]
 80022c4:	731a      	strb	r2, [r3, #12]
  return val;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ffaa 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80022f8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	73fb      	strb	r3, [r7, #15]
  return v;
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800231a:	b490      	push	{r4, r7}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4604      	mov	r4, r0
 8002322:	4608      	mov	r0, r1
 8002324:	4611      	mov	r1, r2
 8002326:	461a      	mov	r2, r3
 8002328:	4623      	mov	r3, r4
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	4603      	mov	r3, r0
 800232e:	717b      	strb	r3, [r7, #5]
 8002330:	460b      	mov	r3, r1
 8002332:	713b      	strb	r3, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d014      	beq.n	8002368 <u8g2_add_vector_y+0x4e>
 800233e:	2b02      	cmp	r3, #2
 8002340:	dc19      	bgt.n	8002376 <u8g2_add_vector_y+0x5c>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <u8g2_add_vector_y+0x32>
 8002346:	2b01      	cmp	r3, #1
 8002348:	d007      	beq.n	800235a <u8g2_add_vector_y+0x40>
 800234a:	e014      	b.n	8002376 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800234c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002350:	b29a      	uxth	r2, r3
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4413      	add	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
      break;
 8002358:	e014      	b.n	8002384 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800235a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800235e:	b29a      	uxth	r2, r3
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4413      	add	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
      break;
 8002366:	e00d      	b.n	8002384 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002368:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800236c:	b29b      	uxth	r3, r3
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	80fb      	strh	r3, [r7, #6]
      break;
 8002374:	e006      	b.n	8002384 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8002376:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800237a:	b29b      	uxth	r3, r3
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	80fb      	strh	r3, [r7, #6]
      break;      
 8002382:	bf00      	nop
  }
  return dy;
 8002384:	88fb      	ldrh	r3, [r7, #6]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bc90      	pop	{r4, r7}
 800238e:	4770      	bx	lr

08002390 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002390:	b490      	push	{r4, r7}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	80fb      	strh	r3, [r7, #6]
 80023a2:	4603      	mov	r3, r0
 80023a4:	717b      	strb	r3, [r7, #5]
 80023a6:	460b      	mov	r3, r1
 80023a8:	713b      	strb	r3, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d014      	beq.n	80023de <u8g2_add_vector_x+0x4e>
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	dc19      	bgt.n	80023ec <u8g2_add_vector_x+0x5c>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <u8g2_add_vector_x+0x32>
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d007      	beq.n	80023d0 <u8g2_add_vector_x+0x40>
 80023c0:	e014      	b.n	80023ec <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80023c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	4413      	add	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
      break;
 80023ce:	e014      	b.n	80023fa <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80023d0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	80fb      	strh	r3, [r7, #6]
      break;
 80023dc:	e00d      	b.n	80023fa <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80023de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	80fb      	strh	r3, [r7, #6]
      break;
 80023ea:	e006      	b.n	80023fa <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80023ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4413      	add	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]
      break;      
 80023f8:	bf00      	nop
  }
  return dx;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bc90      	pop	{r4, r7}
 8002404:	4770      	bx	lr

08002406 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b088      	sub	sp, #32
 800240a:	af02      	add	r7, sp, #8
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	70fb      	strb	r3, [r7, #3]
 8002412:	4613      	mov	r3, r2
 8002414:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3360      	adds	r3, #96	@ 0x60
 800241a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002426:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800242e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002436:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	7d7b      	ldrb	r3, [r7, #21]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002444:	7dfa      	ldrb	r2, [r7, #23]
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	429a      	cmp	r2, r3
 800244a:	d201      	bcs.n	8002450 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	889b      	ldrh	r3, [r3, #4]
 8002454:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	88db      	ldrh	r3, [r3, #6]
 800245a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800245c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002460:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	7c1b      	ldrb	r3, [r3, #16]
 8002468:	89b8      	ldrh	r0, [r7, #12]
 800246a:	f7ff ff91 	bl	8002390 <u8g2_add_vector_x>
 800246e:	4603      	mov	r3, r0
 8002470:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002472:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002476:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	7c1b      	ldrb	r3, [r3, #16]
 800247e:	8978      	ldrh	r0, [r7, #10]
 8002480:	f7ff ff4b 	bl	800231a <u8g2_add_vector_y>
 8002484:	4603      	mov	r3, r0
 8002486:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002488:	78bb      	ldrb	r3, [r7, #2]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d010      	beq.n	80024b0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	7b9a      	ldrb	r2, [r3, #14]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002498:	7dbb      	ldrb	r3, [r7, #22]
 800249a:	b298      	uxth	r0, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	7c1b      	ldrb	r3, [r3, #16]
 80024a0:	897a      	ldrh	r2, [r7, #10]
 80024a2:	89b9      	ldrh	r1, [r7, #12]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4603      	mov	r3, r0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fbfe 	bl	8002caa <u8g2_DrawHVLine>
 80024ae:	e013      	b.n	80024d8 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	7b5b      	ldrb	r3, [r3, #13]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10f      	bne.n	80024d8 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	7bda      	ldrb	r2, [r3, #15]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	b298      	uxth	r0, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	7c1b      	ldrb	r3, [r3, #16]
 80024ca:	897a      	ldrh	r2, [r7, #10]
 80024cc:	89b9      	ldrh	r1, [r7, #12]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fbe9 	bl	8002caa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80024d8:	7dfa      	ldrb	r2, [r7, #23]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d309      	bcc.n	80024f4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80024e0:	7dfa      	ldrb	r2, [r7, #23]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	757b      	strb	r3, [r7, #21]
    ly++;
 80024ec:	7d3b      	ldrb	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80024f2:	e79d      	b.n	8002430 <u8g2_font_decode_len+0x2a>
      break;
 80024f4:	bf00      	nop
  }
  lx += cnt;
 80024f6:	7d7a      	ldrb	r2, [r7, #21]
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	4413      	add	r3, r2
 80024fc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80024fe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8002506:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	725a      	strb	r2, [r3, #9]
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3360      	adds	r3, #96	@ 0x60
 8002524:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002538:	4619      	mov	r1, r3
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fe7f 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 8002540:	4603      	mov	r3, r0
 8002542:	b25a      	sxtb	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800254e:	4619      	mov	r1, r3
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fe74 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 8002556:	4603      	mov	r3, r0
 8002558:	b25a      	sxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	7b9b      	ldrb	r3, [r3, #14]
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	73da      	strb	r2, [r3, #15]
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	@ 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3360      	adds	r3, #96	@ 0x60
 8002592:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffbd 	bl	8002516 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80025a2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80025aa:	4619      	mov	r1, r3
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7ff fe91 	bl	80022d4 <u8g2_font_decode_get_signed_bits>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80025bc:	4619      	mov	r1, r3
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff fe88 	bl	80022d4 <u8g2_font_decode_get_signed_bits>
 80025c4:	4603      	mov	r3, r0
 80025c6:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80025ce:	4619      	mov	r1, r3
 80025d0:	6978      	ldr	r0, [r7, #20]
 80025d2:	f7ff fe7f 	bl	80022d4 <u8g2_font_decode_get_signed_bits>
 80025d6:	4603      	mov	r3, r0
 80025d8:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f340 80d7 	ble.w	8002794 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	8898      	ldrh	r0, [r3, #4]
 80025ea:	7cfa      	ldrb	r2, [r7, #19]
 80025ec:	7c7b      	ldrb	r3, [r7, #17]
 80025ee:	4413      	add	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	425b      	negs	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	7c1b      	ldrb	r3, [r3, #16]
 80025fc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002600:	f7ff fec6 	bl	8002390 <u8g2_add_vector_x>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	88d8      	ldrh	r0, [r3, #6]
 8002610:	7cfa      	ldrb	r2, [r7, #19]
 8002612:	7c7b      	ldrb	r3, [r7, #17]
 8002614:	4413      	add	r3, r2
 8002616:	b2db      	uxtb	r3, r3
 8002618:	425b      	negs	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	b25a      	sxtb	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	7c1b      	ldrb	r3, [r3, #16]
 8002622:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002626:	f7ff fe78 	bl	800231a <u8g2_add_vector_y>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	88db      	ldrh	r3, [r3, #6]
 800263c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8002642:	8b7b      	ldrh	r3, [r7, #26]
 8002644:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	7c1b      	ldrb	r3, [r3, #16]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d85a      	bhi.n	8002704 <u8g2_font_decode_glyph+0x180>
 800264e:	a201      	add	r2, pc, #4	@ (adr r2, 8002654 <u8g2_font_decode_glyph+0xd0>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	08002681 	.word	0x08002681
 800265c:	080026a9 	.word	0x080026a9
 8002660:	080026dd 	.word	0x080026dd
      {
	case 0:
	    x1 += decode->glyph_width;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800266a:	b29a      	uxth	r2, r3
 800266c:	8bbb      	ldrh	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002676:	b29a      	uxth	r2, r3
 8002678:	8b3b      	ldrh	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	833b      	strh	r3, [r7, #24]
	    break;
 800267e:	e041      	b.n	8002704 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002684:	b29b      	uxth	r3, r3
 8002686:	8bfa      	ldrh	r2, [r7, #30]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800268c:	8bfb      	ldrh	r3, [r7, #30]
 800268e:	3301      	adds	r3, #1
 8002690:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002692:	8bbb      	ldrh	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	8b3b      	ldrh	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	833b      	strh	r3, [r7, #24]
	    break;
 80026a6:	e02d      	b.n	8002704 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8bfa      	ldrh	r2, [r7, #30]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80026b6:	8bfb      	ldrh	r3, [r7, #30]
 80026b8:	3301      	adds	r3, #1
 80026ba:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80026bc:	8bbb      	ldrh	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80026c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8b7a      	ldrh	r2, [r7, #26]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80026ce:	8b7b      	ldrh	r3, [r7, #26]
 80026d0:	3301      	adds	r3, #1
 80026d2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80026d4:	8b3b      	ldrh	r3, [r7, #24]
 80026d6:	3301      	adds	r3, #1
 80026d8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80026da:	e013      	b.n	8002704 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80026dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	8bbb      	ldrh	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8b7a      	ldrh	r2, [r7, #26]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80026f6:	8b7b      	ldrh	r3, [r7, #26]
 80026f8:	3301      	adds	r3, #1
 80026fa:	837b      	strh	r3, [r7, #26]
	    y1++;
 80026fc:	8b3b      	ldrh	r3, [r7, #24]
 80026fe:	3301      	adds	r3, #1
 8002700:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002702:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002704:	8bb8      	ldrh	r0, [r7, #28]
 8002706:	8b7a      	ldrh	r2, [r7, #26]
 8002708:	8bf9      	ldrh	r1, [r7, #30]
 800270a:	8b3b      	ldrh	r3, [r7, #24]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4603      	mov	r3, r0
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fb88 	bl	8002e26 <u8g2_IsIntersection>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <u8g2_font_decode_glyph+0x19e>
	return d;
 800271c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002720:	e03a      	b.n	8002798 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2200      	movs	r2, #0
 800272c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002734:	4619      	mov	r1, r3
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff fd81 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002746:	4619      	mov	r1, r3
 8002748:	6978      	ldr	r0, [r7, #20]
 800274a:	f7ff fd78 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 800274e:	4603      	mov	r3, r0
 8002750:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fe54 	bl	8002406 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800275e:	7bbb      	ldrb	r3, [r7, #14]
 8002760:	2201      	movs	r2, #1
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fe4e 	bl	8002406 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800276a:	2101      	movs	r1, #1
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f7ff fd66 	bl	800223e <u8g2_font_decode_get_unsigned_bits>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ec      	bne.n	8002752 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800277e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002782:	429a      	cmp	r2, r3
 8002784:	dd00      	ble.n	8002788 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002786:	e7d2      	b.n	800272e <u8g2_font_decode_glyph+0x1aa>
	break;
 8002788:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	7b9a      	ldrb	r2, [r3, #14]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002794:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3317      	adds	r3, #23
 80027b6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d82a      	bhi.n	8002814 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	2b60      	cmp	r3, #96	@ 0x60
 80027c2:	d907      	bls.n	80027d4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80027ca:	461a      	mov	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4413      	add	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e009      	b.n	80027e8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d906      	bls.n	80027e8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	4413      	add	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04e      	beq.n	8002890 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d102      	bne.n	8002804 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3302      	adds	r3, #2
 8002802:	e049      	b.n	8002898 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002812:	e7e9      	b.n	80027e8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800281a:	461a      	mov	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4413      	add	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002826:	2100      	movs	r1, #0
 8002828:	6938      	ldr	r0, [r7, #16]
 800282a:	f7ff fc3f 	bl	80020ac <u8g2_font_get_word>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002838:	2102      	movs	r1, #2
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f7ff fc36 	bl	80020ac <u8g2_font_get_word>
 8002840:	4603      	mov	r3, r0
 8002842:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	3304      	adds	r3, #4
 8002848:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800284a:	89fa      	ldrh	r2, [r7, #14]
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	429a      	cmp	r2, r3
 8002850:	d3e9      	bcc.n	8002826 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3301      	adds	r3, #1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	4313      	orrs	r3, r2
 800286a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002872:	89fa      	ldrh	r2, [r7, #14]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	429a      	cmp	r2, r3
 8002878:	d102      	bne.n	8002880 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3303      	adds	r3, #3
 800287e:	e00b      	b.n	8002898 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3302      	adds	r3, #2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4413      	add	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800288e:	e7e0      	b.n	8002852 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002894:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	897a      	ldrh	r2, [r7, #10]
 80028c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	4619      	mov	r1, r3
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff ff64 	bl	80027a0 <u8g2_font_get_glyph_data>
 80028d8:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80028e0:	6939      	ldr	r1, [r7, #16]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff fe4e 	bl	8002584 <u8g2_font_decode_glyph>
 80028e8:	4603      	mov	r3, r0
 80028ea:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80028ec:	8afb      	ldrh	r3, [r7, #22]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002918:	2b03      	cmp	r3, #3
 800291a:	d833      	bhi.n	8002984 <u8g2_DrawGlyph+0x8c>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <u8g2_DrawGlyph+0x2c>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002935 	.word	0x08002935
 8002928:	08002949 	.word	0x08002949
 800292c:	0800295d 	.word	0x0800295d
 8002930:	08002971 	.word	0x08002971
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	4798      	blx	r3
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	893b      	ldrh	r3, [r7, #8]
 8002942:	4413      	add	r3, r2
 8002944:	813b      	strh	r3, [r7, #8]
      break;
 8002946:	e01d      	b.n	8002984 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	4798      	blx	r3
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	817b      	strh	r3, [r7, #10]
      break;
 800295a:	e013      	b.n	8002984 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	4798      	blx	r3
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	893b      	ldrh	r3, [r7, #8]
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	813b      	strh	r3, [r7, #8]
      break;
 800296e:	e009      	b.n	8002984 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	4798      	blx	r3
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	4413      	add	r3, r2
 8002980:	817b      	strh	r3, [r7, #10]
      break;
 8002982:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	893a      	ldrh	r2, [r7, #8]
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff88 	bl	80028a0 <u8g2_font_draw_glyph>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop

0800299c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	4613      	mov	r3, r2
 80029ac:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fca7 	bl	8003302 <u8x8_utf8_init>
  sum = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	7812      	ldrb	r2, [r2, #0]
 80029c0:	4611      	mov	r1, r2
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	4798      	blx	r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80029ca:	8abb      	ldrh	r3, [r7, #20]
 80029cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d038      	beq.n	8002a46 <u8g2_draw_string+0xaa>
      break;
    str++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80029da:	8abb      	ldrh	r3, [r7, #20]
 80029dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d0e9      	beq.n	80029b8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80029e4:	8abb      	ldrh	r3, [r7, #20]
 80029e6:	893a      	ldrh	r2, [r7, #8]
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff84 	bl	80028f8 <u8g2_DrawGlyph>
 80029f0:	4603      	mov	r3, r0
 80029f2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d81e      	bhi.n	8002a3c <u8g2_draw_string+0xa0>
 80029fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <u8g2_draw_string+0x68>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1f 	.word	0x08002a1f
 8002a0c:	08002a29 	.word	0x08002a29
 8002a10:	08002a33 	.word	0x08002a33
      {
	case 0:
	  x += delta;
 8002a14:	897a      	ldrh	r2, [r7, #10]
 8002a16:	8a7b      	ldrh	r3, [r7, #18]
 8002a18:	4413      	add	r3, r2
 8002a1a:	817b      	strh	r3, [r7, #10]
	  break;
 8002a1c:	e00e      	b.n	8002a3c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002a1e:	893a      	ldrh	r2, [r7, #8]
 8002a20:	8a7b      	ldrh	r3, [r7, #18]
 8002a22:	4413      	add	r3, r2
 8002a24:	813b      	strh	r3, [r7, #8]
	  break;
 8002a26:	e009      	b.n	8002a3c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002a28:	897a      	ldrh	r2, [r7, #10]
 8002a2a:	8a7b      	ldrh	r3, [r7, #18]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	817b      	strh	r3, [r7, #10]
	  break;
 8002a30:	e004      	b.n	8002a3c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002a32:	893a      	ldrh	r2, [r7, #8]
 8002a34:	8a7b      	ldrh	r3, [r7, #18]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	813b      	strh	r3, [r7, #8]
	  break;
 8002a3a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002a3c:	8afa      	ldrh	r2, [r7, #22]
 8002a3e:	8a7b      	ldrh	r3, [r7, #18]
 8002a40:	4413      	add	r3, r2
 8002a42:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002a44:	e7b8      	b.n	80029b8 <u8g2_draw_string+0x1c>
      break;
 8002a46:	bf00      	nop
    }
  }
  return sum;
 8002a48:	8afb      	ldrh	r3, [r7, #22]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop

08002a54 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	4613      	mov	r3, r2
 8002a64:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <u8g2_DrawStr+0x30>)
 8002a6a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff92 	bl	800299c <u8g2_draw_string>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	0800331f 	.word	0x0800331f

08002a88 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05d      	beq.n	8002b54 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d04d      	beq.n	8002b56 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d11c      	bne.n	8002afe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	da05      	bge.n	8002ae0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002aec:	429a      	cmp	r2, r3
 8002aee:	dd32      	ble.n	8002b56 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002afc:	e02b      	b.n	8002b56 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002b04:	461a      	mov	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002b14:	440b      	add	r3, r1
 8002b16:	429a      	cmp	r2, r3
 8002b18:	da0d      	bge.n	8002b36 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	b25a      	sxtb	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dd07      	ble.n	8002b56 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002b52:	e000      	b.n	8002b56 <u8g2_UpdateRefHeight+0xce>
    return;
 8002b54:	bf00      	nop
  }  
}
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <u8g2_SetFontPosBaseline+0x1c>)
 8002b84:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	08002b61 	.word	0x08002b61

08002b98 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d00b      	beq.n	8002bc4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3374      	adds	r3, #116	@ 0x74
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fa97 	bl	80020ec <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff62 	bl	8002a88 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	460b      	mov	r3, r1
 8002bdc:	80fb      	strh	r3, [r7, #6]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8002be8:	8afb      	ldrh	r3, [r7, #22]
 8002bea:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	8abb      	ldrh	r3, [r7, #20]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8002bf6:	8afa      	ldrh	r2, [r7, #22]
 8002bf8:	8abb      	ldrh	r3, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d90b      	bls.n	8002c16 <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002bfe:	8afa      	ldrh	r2, [r7, #22]
 8002c00:	88bb      	ldrh	r3, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d205      	bcs.n	8002c12 <u8g2_clip_intersection2+0x46>
			b = d;
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	82bb      	strh	r3, [r7, #20]
			b--;
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	82bb      	strh	r3, [r7, #20]
 8002c10:	e001      	b.n	8002c16 <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8002c16:	8afa      	ldrh	r2, [r7, #22]
 8002c18:	88bb      	ldrh	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d301      	bcc.n	8002c22 <u8g2_clip_intersection2+0x56>
		return 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e01c      	b.n	8002c5c <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002c22:	8aba      	ldrh	r2, [r7, #20]
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d801      	bhi.n	8002c2e <u8g2_clip_intersection2+0x62>
		return 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e016      	b.n	8002c5c <u8g2_clip_intersection2+0x90>
	if (a < c)
 8002c2e:	8afa      	ldrh	r2, [r7, #22]
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d201      	bcs.n	8002c3a <u8g2_clip_intersection2+0x6e>
		a = c;
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8002c3a:	8aba      	ldrh	r2, [r7, #20]
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d901      	bls.n	8002c46 <u8g2_clip_intersection2+0x7a>
		b = d;
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8afa      	ldrh	r2, [r7, #22]
 8002c4a:	801a      	strh	r2, [r3, #0]
	b -= a;
 8002c4c:	8aba      	ldrh	r2, [r7, #20]
 8002c4e:	8afb      	ldrh	r3, [r7, #22]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	8aba      	ldrh	r2, [r7, #20]
 8002c58:	801a      	strh	r2, [r3, #0]
	return 1;
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c86:	893a      	ldrh	r2, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002c90:	88f8      	ldrh	r0, [r7, #6]
 8002c92:	893a      	ldrh	r2, [r7, #8]
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	47a0      	blx	r4
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}

08002caa <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002caa:	b590      	push	{r4, r7, lr}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af02      	add	r7, sp, #8
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	813b      	strh	r3, [r7, #8]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d075      	beq.n	8002dba <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d072      	beq.n	8002dba <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d91a      	bls.n	8002d10 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8002cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d109      	bne.n	8002cf6 <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002ce2:	897a      	ldrh	r2, [r7, #10]
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	817b      	strh	r3, [r7, #10]
					x++;
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	817b      	strh	r3, [r7, #10]
 8002cf4:	e00c      	b.n	8002d10 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8002cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d108      	bne.n	8002d10 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002cfe:	893a      	ldrh	r2, [r7, #8]
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	813b      	strh	r3, [r7, #8]
					y++;
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002d1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11a      	bne.n	8002d5a <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d83b      	bhi.n	8002da8 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d937      	bls.n	8002dac <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002d48:	1db9      	adds	r1, r7, #6
 8002d4a:	f107 000a 	add.w	r0, r7, #10
 8002d4e:	f7ff ff3d 	bl	8002bcc <u8g2_clip_intersection2>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11a      	bne.n	8002d8e <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8002d58:	e02f      	b.n	8002dba <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d824      	bhi.n	8002db0 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d920      	bls.n	8002db4 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002d7e:	1db9      	adds	r1, r7, #6
 8002d80:	f107 0008 	add.w	r0, r7, #8
 8002d84:	f7ff ff22 	bl	8002bcc <u8g2_clip_intersection2>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d014      	beq.n	8002db8 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	689c      	ldr	r4, [r3, #8]
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	88f8      	ldrh	r0, [r7, #6]
 8002d9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4603      	mov	r3, r0
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	47a0      	blx	r4
 8002da6:	e008      	b.n	8002dba <u8g2_DrawHVLine+0x110>
					return;
 8002da8:	bf00      	nop
 8002daa:	e006      	b.n	8002dba <u8g2_DrawHVLine+0x110>
					return;
 8002dac:	bf00      	nop
 8002dae:	e004      	b.n	8002dba <u8g2_DrawHVLine+0x110>
					return;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <u8g2_DrawHVLine+0x110>
					return;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <u8g2_DrawHVLine+0x110>
					return;
 8002db8:	bf00      	nop
		}
}
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002dc0:	b490      	push	{r4, r7}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	80fb      	strh	r3, [r7, #6]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80bb      	strh	r3, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d20d      	bcs.n	8002e02 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002de6:	883a      	ldrh	r2, [r7, #0]
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d901      	bls.n	8002df2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e014      	b.n	8002e1c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d901      	bls.n	8002dfe <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00e      	b.n	8002e1c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e00c      	b.n	8002e1c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002e02:	883a      	ldrh	r2, [r7, #0]
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d907      	bls.n	8002e1a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	883b      	ldrh	r3, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d901      	bls.n	8002e16 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e002      	b.n	8002e1c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002e1a:	2300      	movs	r3, #0
    }
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc90      	pop	{r4, r7}
 8002e24:	4770      	bx	lr

08002e26 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	4608      	mov	r0, r1
 8002e30:	4611      	mov	r1, r2
 8002e32:	461a      	mov	r2, r3
 8002e34:	4603      	mov	r3, r0
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	813b      	strh	r3, [r7, #8]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002e4c:	8b3b      	ldrh	r3, [r7, #24]
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	f7ff ffb6 	bl	8002dc0 <u8g2_is_intersection_decision_tree>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <u8g2_IsIntersection+0x38>
    return 0; 
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e00a      	b.n	8002e74 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	897a      	ldrh	r2, [r7, #10]
 8002e6e:	f7ff ffa7 	bl	8002dc0 <u8g2_is_intersection_decision_tree>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002e9a:	7efb      	ldrb	r3, [r7, #27]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002ea6:	7e3a      	ldrb	r2, [r7, #24]
 8002ea8:	7efb      	ldrb	r3, [r7, #27]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d801      	bhi.n	8002ec6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002ec2:	7e3b      	ldrb	r3, [r7, #24]
 8002ec4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002ed0:	7e3b      	ldrb	r3, [r7, #24]
 8002ed2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002ed4:	893b      	ldrh	r3, [r7, #8]
 8002ed6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002ed8:	8afb      	ldrh	r3, [r7, #22]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	7c1b      	ldrb	r3, [r3, #16]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	8afb      	ldrh	r3, [r7, #22]
 8002eea:	fb13 f302 	smulbb	r3, r3, r2
 8002eee:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002ef6:	8afb      	ldrh	r3, [r7, #22]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d117      	bne.n	8002f3e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	7ebb      	ldrb	r3, [r7, #26]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	7e7b      	ldrb	r3, [r7, #25]
 8002f22:	4053      	eors	r3, r2
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
	len--;
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e8      	bne.n	8002f0e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002f3c:	e038      	b.n	8002fb0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	7ebb      	ldrb	r3, [r7, #26]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	7e7b      	ldrb	r3, [r7, #25]
 8002f52:	4053      	eors	r3, r2
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002f5a:	7efb      	ldrb	r3, [r7, #27]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002f60:	7efb      	ldrb	r3, [r7, #27]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	76fb      	strb	r3, [r7, #27]
      len--;
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002f6e:	7efb      	ldrb	r3, [r7, #27]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002f78:	461a      	mov	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d801      	bhi.n	8002f8e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d008      	beq.n	8002faa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	767b      	strb	r3, [r7, #25]
 8002f9c:	e005      	b.n	8002faa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002f9e:	7ebb      	ldrb	r3, [r7, #26]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002fa4:	7e7b      	ldrb	r3, [r7, #25]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1c6      	bne.n	8002f3e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002fb0:	bf00      	nop
 8002fb2:	3724      	adds	r7, #36	@ 0x24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	79fa      	ldrb	r2, [r7, #7]
 8003020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ffa9 	bl	8002fbc <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff fd84 	bl	8002b78 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003094:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003096:	89fb      	ldrh	r3, [r7, #14]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	89fa      	ldrh	r2, [r7, #14]
 80030a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	7c1b      	ldrb	r3, [r3, #16]
 80030a6:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	89fa      	ldrh	r2, [r7, #14]
 80030b2:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030ba:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80030bc:	89fb      	ldrh	r3, [r7, #14]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	89fa      	ldrh	r2, [r7, #14]
 80030c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030ce:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80030d0:	89fb      	ldrh	r3, [r7, #14]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80030d8:	4413      	add	r3, r2
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	7c52      	ldrb	r2, [r2, #17]
 80030de:	4293      	cmp	r3, r2
 80030e0:	dd07      	ble.n	80030f2 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	7c5b      	ldrb	r3, [r3, #17]
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80030f2:	89fb      	ldrh	r3, [r7, #14]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	4413      	add	r3, r2
 8003118:	b29a      	uxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	8a9a      	ldrh	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	8ada      	ldrh	r2, [r3, #22]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fe5e 	bl	8002e26 <u8g2_IsIntersection>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003178:	e03b      	b.n	80031f2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318e:	429a      	cmp	r2, r3
 8003190:	d205      	bcs.n	800319e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d905      	bls.n	80031ba <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d205      	bcs.n	80031d6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d905      	bls.n	80031f2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff3c 	bl	8003080 <u8g2_update_dimension_common>
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003240:	429a      	cmp	r2, r3
 8003242:	d30a      	bcc.n	800325a <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff65 	bl	8003140 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b088      	sub	sp, #32
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	4608      	mov	r0, r1
 8003288:	4611      	mov	r1, r2
 800328a:	461a      	mov	r2, r3
 800328c:	4603      	mov	r3, r0
 800328e:	817b      	strh	r3, [r7, #10]
 8003290:	460b      	mov	r3, r1
 8003292:	813b      	strh	r3, [r7, #8]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800329e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80032a0:	8aba      	ldrh	r2, [r7, #20]
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ae:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80032b0:	8afa      	ldrh	r2, [r7, #22]
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80032b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80032c0:	8abb      	ldrh	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80032c6:	8afa      	ldrh	r2, [r7, #22]
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	82fb      	strh	r3, [r7, #22]
 80032ce:	e00a      	b.n	80032e6 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80032d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80032d8:	8afb      	ldrh	r3, [r7, #22]
 80032da:	3b01      	subs	r3, #1
 80032dc:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80032de:	8aba      	ldrh	r2, [r7, #20]
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80032e6:	88f8      	ldrh	r0, [r7, #6]
 80032e8:	8aba      	ldrh	r2, [r7, #20]
 80032ea:	8af9      	ldrh	r1, [r7, #22]
 80032ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4603      	mov	r3, r0
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fcb7 	bl	8002c68 <u8g2_draw_hv_line_2dir>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <u8x8_ascii_next+0x18>
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2b0a      	cmp	r3, #10
 8003334:	d102      	bne.n	800333c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800333a:	e001      	b.n	8003340 <u8x8_ascii_next+0x22>
  return b;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	b29b      	uxth	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691c      	ldr	r4, [r3, #16]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	2300      	movs	r3, #0
 8003360:	2120      	movs	r1, #32
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	47a0      	blx	r4
 8003366:	4603      	mov	r3, r0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bd90      	pop	{r4, r7, pc}

08003370 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	460b      	mov	r3, r1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691c      	ldr	r4, [r3, #16]
 8003382:	7afa      	ldrb	r2, [r7, #11]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2117      	movs	r1, #23
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	47a0      	blx	r4
 800338c:	4603      	mov	r3, r0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bd90      	pop	{r4, r7, pc}

08003396 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80033a2:	1cfb      	adds	r3, r7, #3
 80033a4:	461a      	mov	r2, r3
 80033a6:	2101      	movs	r1, #1
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffe1 	bl	8003370 <u8x8_byte_SendBytes>
 80033ae:	4603      	mov	r3, r0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68dc      	ldr	r4, [r3, #12]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	2300      	movs	r3, #0
 80033cc:	2115      	movs	r1, #21
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	47a0      	blx	r4
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68dc      	ldr	r4, [r3, #12]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	2300      	movs	r3, #0
 80033f0:	2116      	movs	r1, #22
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	47a0      	blx	r4
 80033f6:	4603      	mov	r3, r0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	460b      	mov	r3, r1
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68dc      	ldr	r4, [r3, #12]
 8003412:	7afa      	ldrb	r2, [r7, #11]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2117      	movs	r1, #23
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	47a0      	blx	r4
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}

08003426 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003426:	b590      	push	{r4, r7, lr}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68dc      	ldr	r4, [r3, #12]
 8003432:	2300      	movs	r3, #0
 8003434:	2200      	movs	r2, #0
 8003436:	2118      	movs	r1, #24
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	47a0      	blx	r4
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}

08003446 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003446:	b590      	push	{r4, r7, lr}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68dc      	ldr	r4, [r3, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	2200      	movs	r2, #0
 8003456:	2119      	movs	r1, #25
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	47a0      	blx	r4
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}

08003466 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	73fb      	strb	r3, [r7, #15]
    data++;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003480:	d031      	beq.n	80034e6 <u8x8_cad_SendSequence+0x80>
 8003482:	2bfe      	cmp	r3, #254	@ 0xfe
 8003484:	dc3d      	bgt.n	8003502 <u8x8_cad_SendSequence+0x9c>
 8003486:	2b19      	cmp	r3, #25
 8003488:	dc3b      	bgt.n	8003502 <u8x8_cad_SendSequence+0x9c>
 800348a:	2b18      	cmp	r3, #24
 800348c:	da23      	bge.n	80034d6 <u8x8_cad_SendSequence+0x70>
 800348e:	2b16      	cmp	r3, #22
 8003490:	dc02      	bgt.n	8003498 <u8x8_cad_SendSequence+0x32>
 8003492:	2b15      	cmp	r3, #21
 8003494:	da03      	bge.n	800349e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003496:	e034      	b.n	8003502 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003498:	2b17      	cmp	r3, #23
 800349a:	d00e      	beq.n	80034ba <u8x8_cad_SendSequence+0x54>
	return;
 800349c:	e031      	b.n	8003502 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68dc      	ldr	r4, [r3, #12]
 80034a8:	7bba      	ldrb	r2, [r7, #14]
 80034aa:	7bf9      	ldrb	r1, [r7, #15]
 80034ac:	2300      	movs	r3, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	47a0      	blx	r4
	  data++;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	603b      	str	r3, [r7, #0]
	  break;
 80034b8:	e022      	b.n	8003500 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80034c0:	f107 030e 	add.w	r3, r7, #14
 80034c4:	461a      	mov	r2, r3
 80034c6:	2101      	movs	r1, #1
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff99 	bl	8003400 <u8x8_cad_SendData>
	  data++;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	603b      	str	r3, [r7, #0]
	  break;
 80034d4:	e014      	b.n	8003500 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68dc      	ldr	r4, [r3, #12]
 80034da:	7bf9      	ldrb	r1, [r7, #15]
 80034dc:	2300      	movs	r3, #0
 80034de:	2200      	movs	r2, #0
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	47a0      	blx	r4
	  break;
 80034e4:	e00c      	b.n	8003500 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	461a      	mov	r2, r3
 80034f0:	2129      	movs	r1, #41	@ 0x29
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f9ee 	bl	80038d4 <u8x8_gpio_call>
	  data++;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
	  break;
 80034fe:	bf00      	nop
    cmd = *data;
 8003500:	e7b6      	b.n	8003470 <u8x8_cad_SendSequence+0xa>
	return;
 8003502:	bf00      	nop
    }
  }
}
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}
	...

0800350c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	72fb      	strb	r3, [r7, #11]
 800351a:	4613      	mov	r3, r2
 800351c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	3b14      	subs	r3, #20
 8003522:	2b05      	cmp	r3, #5
 8003524:	d82f      	bhi.n	8003586 <u8x8_cad_001+0x7a>
 8003526:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <u8x8_cad_001+0x20>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003575 	.word	0x08003575
 8003530:	08003545 	.word	0x08003545
 8003534:	08003559 	.word	0x08003559
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003575 	.word	0x08003575
 8003540:	08003575 	.word	0x08003575
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003544:	2100      	movs	r1, #0
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ff00 	bl	800334c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800354c:	7abb      	ldrb	r3, [r7, #10]
 800354e:	4619      	mov	r1, r3
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff ff20 	bl	8003396 <u8x8_byte_SendByte>
      break;
 8003556:	e018      	b.n	800358a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003558:	2100      	movs	r1, #0
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff fef6 	bl	800334c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003560:	7abb      	ldrb	r3, [r7, #10]
 8003562:	4619      	mov	r1, r3
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7ff ff16 	bl	8003396 <u8x8_byte_SendByte>
      break;
 800356a:	e00e      	b.n	800358a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800356c:	2101      	movs	r1, #1
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff feec 	bl	800334c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691c      	ldr	r4, [r3, #16]
 8003578:	7aba      	ldrb	r2, [r7, #10]
 800357a:	7af9      	ldrb	r1, [r7, #11]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	47a0      	blx	r4
 8003582:	4603      	mov	r3, r0
 8003584:	e002      	b.n	800358c <u8x8_cad_001+0x80>
    default:
      return 0;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <u8x8_cad_001+0x80>
  }
  return 1;
 800358a:	2301      	movs	r3, #1
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bd90      	pop	{r4, r7, pc}

08003594 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	72fb      	strb	r3, [r7, #11]
 80035a2:	4613      	mov	r3, r2
 80035a4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d006      	beq.n	80035ba <u8x8_d_st7565_common+0x26>
 80035ac:	2b0f      	cmp	r3, #15
 80035ae:	dc71      	bgt.n	8003694 <u8x8_d_st7565_common+0x100>
 80035b0:	2b0b      	cmp	r3, #11
 80035b2:	d050      	beq.n	8003656 <u8x8_d_st7565_common+0xc2>
 80035b4:	2b0e      	cmp	r3, #14
 80035b6:	d05b      	beq.n	8003670 <u8x8_d_st7565_common+0xdc>
 80035b8:	e06c      	b.n	8003694 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff33 	bl	8003426 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	795b      	ldrb	r3, [r3, #5]
 80035c4:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80035c6:	7dbb      	ldrb	r3, [r7, #22]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80035d2:	7dbb      	ldrb	r3, [r7, #22]
 80035d4:	4413      	add	r3, r2
 80035d6:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80035d8:	7dbb      	ldrb	r3, [r7, #22]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4619      	mov	r1, r3
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff fee6 	bl	80033b8 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80035ec:	7dbb      	ldrb	r3, [r7, #22]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff fede 	bl	80033b8 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	799b      	ldrb	r3, [r3, #6]
 8003600:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fed5 	bl	80033b8 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	791b      	ldrb	r3, [r3, #4]
 8003612:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003620:	7dfa      	ldrb	r2, [r7, #23]
 8003622:	7dbb      	ldrb	r3, [r7, #22]
 8003624:	4413      	add	r3, r2
 8003626:	2b84      	cmp	r3, #132	@ 0x84
 8003628:	d905      	bls.n	8003636 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 800362a:	2384      	movs	r3, #132	@ 0x84
 800362c:	75fb      	strb	r3, [r7, #23]
	c -= x;
 800362e:	7dfa      	ldrb	r2, [r7, #23]
 8003630:	7dbb      	ldrb	r3, [r7, #22]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4619      	mov	r1, r3
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fedf 	bl	8003400 <u8x8_cad_SendData>
	arg_int--;
 8003642:	7abb      	ldrb	r3, [r7, #10]
 8003644:	3b01      	subs	r3, #1
 8003646:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003648:	7abb      	ldrb	r3, [r7, #10]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f3      	bne.n	8003636 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fef9 	bl	8003446 <u8x8_cad_EndTransfer>
      break;
 8003654:	e020      	b.n	8003698 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003656:	7abb      	ldrb	r3, [r7, #10]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 800365c:	4911      	ldr	r1, [pc, #68]	@ (80036a4 <u8x8_d_st7565_common+0x110>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ff01 	bl	8003466 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003664:	e018      	b.n	8003698 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8003666:	4910      	ldr	r1, [pc, #64]	@ (80036a8 <u8x8_d_st7565_common+0x114>)
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff fefc 	bl	8003466 <u8x8_cad_SendSequence>
      break;
 800366e:	e013      	b.n	8003698 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fed8 	bl	8003426 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003676:	2181      	movs	r1, #129	@ 0x81
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff fe9d 	bl	80033b8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 800367e:	7abb      	ldrb	r3, [r7, #10]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff fea8 	bl	80033dc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff feda 	bl	8003446 <u8x8_cad_EndTransfer>
      break;
 8003692:	e001      	b.n	8003698 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8003698:	2301      	movs	r3, #1
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	0800df8c 	.word	0x0800df8c
 80036a8:	0800df94 	.word	0x0800df94

080036ac <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	72fb      	strb	r3, [r7, #11]
 80036ba:	4613      	mov	r3, r2
 80036bc:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80036be:	7aba      	ldrb	r2, [r7, #10]
 80036c0:	7af9      	ldrb	r1, [r7, #11]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff ff65 	bl	8003594 <u8x8_d_st7565_common>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d131      	bne.n	8003734 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	2b0d      	cmp	r3, #13
 80036d4:	d013      	beq.n	80036fe <u8x8_d_st7565_64128n+0x52>
 80036d6:	2b0d      	cmp	r3, #13
 80036d8:	dc2a      	bgt.n	8003730 <u8x8_d_st7565_64128n+0x84>
 80036da:	2b09      	cmp	r3, #9
 80036dc:	d002      	beq.n	80036e4 <u8x8_d_st7565_64128n+0x38>
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	d005      	beq.n	80036ee <u8x8_d_st7565_64128n+0x42>
 80036e2:	e025      	b.n	8003730 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80036e4:	4916      	ldr	r1, [pc, #88]	@ (8003740 <u8x8_d_st7565_64128n+0x94>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f832 	bl	8003750 <u8x8_d_helper_display_setup_memory>
	break;
 80036ec:	e022      	b.n	8003734 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f842 	bl	8003778 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80036f4:	4913      	ldr	r1, [pc, #76]	@ (8003744 <u8x8_d_st7565_64128n+0x98>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff feb5 	bl	8003466 <u8x8_cad_SendSequence>
	break;
 80036fc:	e01a      	b.n	8003734 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80036fe:	7abb      	ldrb	r3, [r7, #10]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8003704:	4910      	ldr	r1, [pc, #64]	@ (8003748 <u8x8_d_st7565_64128n+0x9c>)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff fead 	bl	8003466 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	7c9a      	ldrb	r2, [r3, #18]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8003718:	e00c      	b.n	8003734 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800371a:	490c      	ldr	r1, [pc, #48]	@ (800374c <u8x8_d_st7565_64128n+0xa0>)
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff fea2 	bl	8003466 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	7cda      	ldrb	r2, [r3, #19]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 800372e:	e001      	b.n	8003734 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	0800dfcc 	.word	0x0800dfcc
 8003744:	0800dfac 	.word	0x0800dfac
 8003748:	0800df9c 	.word	0x0800df9c
 800374c:	0800dfa4 	.word	0x0800dfa4

08003750 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	7c9a      	ldrb	r2, [r3, #18]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695c      	ldr	r4, [r3, #20]
 8003784:	2300      	movs	r3, #0
 8003786:	2200      	movs	r2, #0
 8003788:	2128      	movs	r1, #40	@ 0x28
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68dc      	ldr	r4, [r3, #12]
 8003792:	2300      	movs	r3, #0
 8003794:	2200      	movs	r2, #0
 8003796:	2114      	movs	r1, #20
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800379c:	2201      	movs	r2, #1
 800379e:	214b      	movs	r1, #75	@ 0x4b
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f897 	bl	80038d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	461a      	mov	r2, r3
 80037ae:	2129      	movs	r1, #41	@ 0x29
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f88f 	bl	80038d4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	214b      	movs	r1, #75	@ 0x4b
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f88a 	bl	80038d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	2129      	movs	r1, #41	@ 0x29
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f882 	bl	80038d4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80037d0:	2201      	movs	r2, #1
 80037d2:	214b      	movs	r1, #75	@ 0x4b
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f87d 	bl	80038d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	795b      	ldrb	r3, [r3, #5]
 80037e0:	461a      	mov	r2, r3
 80037e2:	2129      	movs	r1, #41	@ 0x29
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f875 	bl	80038d4 <u8x8_gpio_call>
}    
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80037f2:	b590      	push	{r4, r7, lr}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	4608      	mov	r0, r1
 80037fc:	4611      	mov	r1, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	4603      	mov	r3, r0
 8003802:	70fb      	strb	r3, [r7, #3]
 8003804:	460b      	mov	r3, r1
 8003806:	70bb      	strb	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003810:	78bb      	ldrb	r3, [r7, #2]
 8003812:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003814:	787b      	ldrb	r3, [r7, #1]
 8003816:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689c      	ldr	r4, [r3, #8]
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	2201      	movs	r2, #1
 8003826:	210f      	movs	r1, #15
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	47a0      	blx	r4
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}

08003836 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689c      	ldr	r4, [r3, #8]
 8003842:	2300      	movs	r3, #0
 8003844:	2200      	movs	r2, #0
 8003846:	2109      	movs	r1, #9
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	47a0      	blx	r4
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689c      	ldr	r4, [r3, #8]
 8003860:	2300      	movs	r3, #0
 8003862:	2200      	movs	r2, #0
 8003864:	210a      	movs	r1, #10
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}

08003872 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003872:	b590      	push	{r4, r7, lr}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689c      	ldr	r4, [r3, #8]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	2300      	movs	r3, #0
 8003886:	210b      	movs	r1, #11
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	47a0      	blx	r4
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}

08003894 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689c      	ldr	r4, [r3, #8]
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	2300      	movs	r3, #0
 80038a8:	210e      	movs	r1, #14
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	47a0      	blx	r4
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}

080038b6 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689c      	ldr	r4, [r3, #8]
 80038c2:	2300      	movs	r3, #0
 80038c4:	2200      	movs	r2, #0
 80038c6:	2110      	movs	r1, #16
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	47a0      	blx	r4
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd90      	pop	{r4, r7, pc}

080038d4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
 80038e0:	4613      	mov	r3, r2
 80038e2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695c      	ldr	r4, [r3, #20]
 80038e8:	78ba      	ldrb	r2, [r7, #2]
 80038ea:	78f9      	ldrb	r1, [r7, #3]
 80038ec:	2300      	movs	r3, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	47a0      	blx	r4
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}

080038fa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	72fb      	strb	r3, [r7, #11]
 8003908:	4613      	mov	r3, r2
 800390a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a11      	ldr	r2, [pc, #68]	@ (8003974 <u8x8_SetupDefaults+0x58>)
 800392e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <u8x8_SetupDefaults+0x58>)
 8003934:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <u8x8_SetupDefaults+0x58>)
 800393a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <u8x8_SetupDefaults+0x58>)
 8003940:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	22ff      	movs	r2, #255	@ 0xff
 800395c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	080038fb 	.word	0x080038fb

08003978 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff ffc8 	bl	800391c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ff46 	bl	8003836 <u8x8_SetupMemory>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af04      	add	r7, sp, #16
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
 80039d6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR      == PIN_INPUT) ? CELL_01_LED_01     : 0;
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 80039dc:	7bbb      	ldrb	r3, [r7, #14]
 80039de:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 80039e4:	7bbb      	ldrb	r3, [r7, #14]
 80039e6:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_02  : 0;
 80039ec:	7b7b      	ldrb	r3, [r7, #13]
 80039ee:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? CELL_02_LED_01 	: 0;
 80039f0:	7b7b      	ldrb	r3, [r7, #13]
 80039f2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? CELL_03_LED_01 	: 0;
 80039f4:	7b7b      	ldrb	r3, [r7, #13]
 80039f6:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? EXPANDER_FAN_CTRL 	: 0;
 80039f8:	7b7b      	ldrb	r3, [r7, #13]
 80039fa:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_03	: 0;
 80039fc:	7b7b      	ldrb	r3, [r7, #13]
 80039fe:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_02 : 0;
 8003a00:	7b7b      	ldrb	r3, [r7, #13]
 8003a02:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_01 : 0;
 8003a04:	7b7b      	ldrb	r3, [r7, #13]
 8003a06:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_03 	: 0;
 8003a08:	7b7b      	ldrb	r3, [r7, #13]
 8003a0a:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	b299      	uxth	r1, r3
 8003a14:	2364      	movs	r3, #100	@ 0x64
 8003a16:	9302      	str	r3, [sp, #8]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f107 030e 	add.w	r3, r7, #14
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2301      	movs	r3, #1
 8003a24:	2206      	movs	r2, #6
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f005 fc44 	bl	80092b4 <HAL_I2C_Mem_Write>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <Expander_InitPinDirections+0x88>
    {
        return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	e012      	b.n	8003a60 <Expander_InitPinDirections+0xae>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	b299      	uxth	r1, r3
 8003a42:	2364      	movs	r3, #100	@ 0x64
 8003a44:	9302      	str	r3, [sp, #8]
 8003a46:	2301      	movs	r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	f107 030d 	add.w	r3, r7, #13
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	2207      	movs	r2, #7
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f005 fc2d 	bl	80092b4 <HAL_I2C_Mem_Write>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af04      	add	r7, sp, #16
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	803b      	strh	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003a82:	883b      	ldrh	r3, [r7, #0]
 8003a84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d142      	bne.n	8003b12 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	b299      	uxth	r1, r3
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	2364      	movs	r3, #100	@ 0x64
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f005 fcfb 	bl	80094a8 <HAL_I2C_Mem_Read>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003ab6:	7bbb      	ldrb	r3, [r7, #14]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <Expander_SetPinState+0x58>
            return status;
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	e073      	b.n	8003ba8 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 8003ac0:	78bb      	ldrb	r3, [r7, #2]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003ac6:	883b      	ldrh	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	7b3b      	ldrb	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	733b      	strb	r3, [r7, #12]
 8003ad2:	e009      	b.n	8003ae8 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003ad4:	883b      	ldrh	r3, [r7, #0]
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	b25a      	sxtb	r2, r3
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b25b      	sxtb	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	b299      	uxth	r1, r3
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	2364      	movs	r3, #100	@ 0x64
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	2301      	movs	r3, #1
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2301      	movs	r3, #1
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f005 fbd5 	bl	80092b4 <HAL_I2C_Mem_Write>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003b0e:	7bbb      	ldrb	r3, [r7, #14]
 8003b10:	e04a      	b.n	8003ba8 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8003b12:	883b      	ldrh	r3, [r7, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d145      	bne.n	8003ba6 <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	b299      	uxth	r1, r3
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	2364      	movs	r3, #100	@ 0x64
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f005 fcb4 	bl	80094a8 <HAL_I2C_Mem_Read>
 8003b40:	4603      	mov	r3, r0
 8003b42:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <Expander_SetPinState+0xe6>
            return status;
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	e02c      	b.n	8003ba8 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8003b4e:	883b      	ldrh	r3, [r7, #0]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 8003b56:	78bb      	ldrb	r3, [r7, #2]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8003b5c:	7b3a      	ldrb	r2, [r7, #12]
 8003b5e:	7b7b      	ldrb	r3, [r7, #13]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	733b      	strb	r3, [r7, #12]
 8003b66:	e009      	b.n	8003b7c <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 8003b68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	b25a      	sxtb	r2, r3
 8003b70:	7b3b      	ldrb	r3, [r7, #12]
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	4013      	ands	r3, r2
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	b299      	uxth	r1, r3
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	2364      	movs	r3, #100	@ 0x64
 8003b8a:	9302      	str	r3, [sp, #8]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2301      	movs	r3, #1
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f005 fb8b 	bl	80092b4 <HAL_I2C_Mem_Write>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	e000      	b.n	8003ba8 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
    }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <Expander_InitAllDevices+0x50>)
 8003bba:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e012      	b.n	8003bec <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003bc6:	f107 0208 	add.w	r2, r7, #8
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff feed 	bl	80039b2 <Expander_InitPinDirections>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <Expander_InitAllDevices+0x36>
        {
            return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	e007      	b.n	8003bf6 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3e8      	bcc.n	8003bc6 <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	24232221 	.word	0x24232221

08003c04 <get_cell_control_params>:


// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expander_Address, uint16_t *v_set_pin_01, uint16_t *v_set_pin_02, uint16_t *v_set_pin_03 ,uint16_t *LED_PIN )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b17      	cmp	r3, #23
 8003c18:	f200 81dc 	bhi.w	8003fd4 <get_cell_control_params+0x3d0>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <get_cell_control_params+0x20>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c85 	.word	0x08003c85
 8003c28:	08003ca5 	.word	0x08003ca5
 8003c2c:	08003cc7 	.word	0x08003cc7
 8003c30:	08003cef 	.word	0x08003cef
 8003c34:	08003d0f 	.word	0x08003d0f
 8003c38:	08003d31 	.word	0x08003d31
 8003c3c:	08003d59 	.word	0x08003d59
 8003c40:	08003d79 	.word	0x08003d79
 8003c44:	08003d9b 	.word	0x08003d9b
 8003c48:	08003dc3 	.word	0x08003dc3
 8003c4c:	08003de3 	.word	0x08003de3
 8003c50:	08003e05 	.word	0x08003e05
 8003c54:	08003e2d 	.word	0x08003e2d
 8003c58:	08003e4d 	.word	0x08003e4d
 8003c5c:	08003e6f 	.word	0x08003e6f
 8003c60:	08003e97 	.word	0x08003e97
 8003c64:	08003eb7 	.word	0x08003eb7
 8003c68:	08003ed9 	.word	0x08003ed9
 8003c6c:	08003f01 	.word	0x08003f01
 8003c70:	08003f21 	.word	0x08003f21
 8003c74:	08003f43 	.word	0x08003f43
 8003c78:	08003f6b 	.word	0x08003f6b
 8003c7c:	08003f8b 	.word	0x08003f8b
 8003c80:	08003fad 	.word	0x08003fad
    {

    // for the cell 01 to 12
        case CELL_1:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2221      	movs	r2, #33	@ 0x21
 8003c88:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2204      	movs	r2, #4
 8003c94:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	801a      	strh	r2, [r3, #0]
            break;
 8003ca2:	e1a7      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_2:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2221      	movs	r2, #33	@ 0x21
 8003ca8:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc2:	801a      	strh	r2, [r3, #0]
            break;
 8003cc4:	e196      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_3:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2221      	movs	r2, #33	@ 0x21
 8003cca:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cd2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cda:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ce2:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cea:	801a      	strh	r2, [r3, #0]
            break;
 8003cec:	e182      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_4:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2222      	movs	r2, #34	@ 0x22
 8003cf2:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2208      	movs	r2, #8
 8003d04:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2210      	movs	r2, #16
 8003d0a:	801a      	strh	r2, [r3, #0]
            break;
 8003d0c:	e172      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_5:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2222      	movs	r2, #34	@ 0x22
 8003d12:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	@ 0x80
 8003d18:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2220      	movs	r2, #32
 8003d24:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2c:	801a      	strh	r2, [r3, #0]
            break;
 8003d2e:	e161      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_6:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2222      	movs	r2, #34	@ 0x22
 8003d34:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d3c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d44:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d4c:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d54:	801a      	strh	r2, [r3, #0]
            break;
 8003d56:	e14d      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_7:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2223      	movs	r2, #35	@ 0x23
 8003d5c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2204      	movs	r2, #4
 8003d68:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2210      	movs	r2, #16
 8003d74:	801a      	strh	r2, [r3, #0]
            break;
 8003d76:	e13d      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_8:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2223      	movs	r2, #35	@ 0x23
 8003d7c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d96:	801a      	strh	r2, [r3, #0]
            break;
 8003d98:	e12c      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_9:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2223      	movs	r2, #35	@ 0x23
 8003d9e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003da6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dae:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003db6:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dbe:	801a      	strh	r2, [r3, #0]
            break;
 8003dc0:	e118      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_10:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2224      	movs	r2, #36	@ 0x24
 8003dc6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	801a      	strh	r2, [r3, #0]
            break;
 8003de0:	e108      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_11:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2224      	movs	r2, #36	@ 0x24
 8003de6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2280      	movs	r2, #128	@ 0x80
 8003dec:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2240      	movs	r2, #64	@ 0x40
 8003df2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2220      	movs	r2, #32
 8003df8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e00:	801a      	strh	r2, [r3, #0]
            break;
 8003e02:	e0f7      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_12:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2224      	movs	r2, #36	@ 0x24
 8003e08:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e10:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e18:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e20:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e28:	801a      	strh	r2, [r3, #0]
            break;
 8003e2a:	e0e3      	b.n	8003ff4 <get_cell_control_params+0x3f0>

            // for the cell 12 to 24

        case CELL_13:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2221      	movs	r2, #33	@ 0x21
 8003e30:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2208      	movs	r2, #8
 8003e42:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2210      	movs	r2, #16
 8003e48:	801a      	strh	r2, [r3, #0]

            break;
 8003e4a:	e0d3      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_14:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2221      	movs	r2, #33	@ 0x21
 8003e50:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2240      	movs	r2, #64	@ 0x40
 8003e5c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2220      	movs	r2, #32
 8003e62:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6a:	801a      	strh	r2, [r3, #0]

            break;
 8003e6c:	e0c2      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_15:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2221      	movs	r2, #33	@ 0x21
 8003e72:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e7a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e82:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e8a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e92:	801a      	strh	r2, [r3, #0]
            break;
 8003e94:	e0ae      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_16:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2222      	movs	r2, #34	@ 0x22
 8003e9a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	801a      	strh	r2, [r3, #0]
            break;
 8003eb4:	e09e      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_17:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2222      	movs	r2, #34	@ 0x22
 8003eba:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed4:	801a      	strh	r2, [r3, #0]
            break;
 8003ed6:	e08d      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_18:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2222      	movs	r2, #34	@ 0x22
 8003edc:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ee4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eec:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ef4:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efc:	801a      	strh	r2, [r3, #0]
            break;
 8003efe:	e079      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_19:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2223      	movs	r2, #35	@ 0x23
 8003f04:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2208      	movs	r2, #8
 8003f16:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	801a      	strh	r2, [r3, #0]
            break;
 8003f1e:	e069      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_20:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2223      	movs	r2, #35	@ 0x23
 8003f24:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2280      	movs	r2, #128	@ 0x80
 8003f2a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2240      	movs	r2, #64	@ 0x40
 8003f30:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2220      	movs	r2, #32
 8003f36:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f3e:	801a      	strh	r2, [r3, #0]
            break;
 8003f40:	e058      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_21:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2223      	movs	r2, #35	@ 0x23
 8003f46:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f4e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f56:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f5e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f66:	801a      	strh	r2, [r3, #0]
            break;
 8003f68:	e044      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_22:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2224      	movs	r2, #36	@ 0x24
 8003f6e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2210      	movs	r2, #16
 8003f86:	801a      	strh	r2, [r3, #0]
            break;
 8003f88:	e034      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_23:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2224      	movs	r2, #36	@ 0x24
 8003f8e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2240      	movs	r2, #64	@ 0x40
 8003f9a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa8:	801a      	strh	r2, [r3, #0]
            break;
 8003faa:	e023      	b.n	8003ff4 <get_cell_control_params+0x3f0>

        case CELL_24:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2224      	movs	r2, #36	@ 0x24
 8003fb0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fb8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fc0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fc8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fd0:	801a      	strh	r2, [r3, #0]
            break;
 8003fd2:	e00f      	b.n	8003ff4 <get_cell_control_params+0x3f0>



        default:
            // Default to CELL_1 if an invalid cell is specified
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2221      	movs	r2, #33	@ 0x21
 8003fd8:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	801a      	strh	r2, [r3, #0]
            break;
 8003ff2:	bf00      	nop
    }
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08b      	sub	sp, #44	@ 0x2c
 8004004:	af02      	add	r7, sp, #8
 8004006:	4603      	mov	r3, r0
 8004008:	ed87 0a00 	vstr	s0, [r7]
 800400c:	71fb      	strb	r3, [r7, #7]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b0b      	cmp	r3, #11
 8004012:	d802      	bhi.n	800401a <Set_Output_Voltage+0x1a>
        target_i2c = &hi2c2;
 8004014:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <Set_Output_Voltage+0xd0>)
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e001      	b.n	800401e <Set_Output_Voltage+0x1e>
    } else {
        target_i2c = &hi2c3;
 800401a:	4b2e      	ldr	r3, [pc, #184]	@ (80040d4 <Set_Output_Voltage+0xd4>)
 800401c:	61fb      	str	r3, [r7, #28]
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 800401e:	23ff      	movs	r3, #255	@ 0xff
 8004020:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e016      	b.n	8004056 <Set_Output_Voltage+0x56>
        if (default_map[i].voltage == voltage) {
 8004028:	4a2b      	ldr	r2, [pc, #172]	@ (80040d8 <Set_Output_Voltage+0xd8>)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	ed97 7a00 	vldr	s14, [r7]
 8004038:	eeb4 7a67 	vcmp.f32	s14, s15
 800403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004040:	d106      	bne.n	8004050 <Set_Output_Voltage+0x50>
            mux_channel = default_map[i].mux_channel;
 8004042:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <Set_Output_Voltage+0xd8>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	791b      	ldrb	r3, [r3, #4]
 800404c:	76fb      	strb	r3, [r7, #27]
            break;
 800404e:	e005      	b.n	800405c <Set_Output_Voltage+0x5c>
    for (int i = 0; i < 8; i++) {
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b07      	cmp	r3, #7
 800405a:	dde5      	ble.n	8004028 <Set_Output_Voltage+0x28>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 800405c:	7efb      	ldrb	r3, [r7, #27]
 800405e:	2bff      	cmp	r3, #255	@ 0xff
 8004060:	d032      	beq.n	80040c8 <Set_Output_Voltage+0xc8>

    // Convert mux_channel into its 3 select bits.This is use for the Analog mux switch
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8004062:	7efb      	ldrb	r3, [r7, #27]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	74fb      	strb	r3, [r7, #19]
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 800406a:	7efb      	ldrb	r3, [r7, #27]
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	74bb      	strb	r3, [r7, #18]
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 8004076:	7efb      	ldrb	r3, [r7, #27]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	747b      	strb	r3, [r7, #17]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN ;
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 8004082:	f107 040c 	add.w	r4, r7, #12
 8004086:	f107 020e 	add.w	r2, r7, #14
 800408a:	f107 0110 	add.w	r1, r7, #16
 800408e:	79f8      	ldrb	r0, [r7, #7]
 8004090:	f107 0308 	add.w	r3, r7, #8
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	f107 030a 	add.w	r3, r7, #10
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4623      	mov	r3, r4
 800409e:	f7ff fdb1 	bl	8003c04 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 80040a2:	7c39      	ldrb	r1, [r7, #16]
 80040a4:	89fa      	ldrh	r2, [r7, #14]
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	69f8      	ldr	r0, [r7, #28]
 80040aa:	f7ff fcdd 	bl	8003a68 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 80040ae:	7c39      	ldrb	r1, [r7, #16]
 80040b0:	89ba      	ldrh	r2, [r7, #12]
 80040b2:	7cbb      	ldrb	r3, [r7, #18]
 80040b4:	69f8      	ldr	r0, [r7, #28]
 80040b6:	f7ff fcd7 	bl	8003a68 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 80040ba:	7c39      	ldrb	r1, [r7, #16]
 80040bc:	897a      	ldrh	r2, [r7, #10]
 80040be:	7c7b      	ldrb	r3, [r7, #17]
 80040c0:	69f8      	ldr	r0, [r7, #28]
 80040c2:	f7ff fcd1 	bl	8003a68 <Expander_SetPinState>
 80040c6:	e000      	b.n	80040ca <Set_Output_Voltage+0xca>
    if (mux_channel == 0xFF) return; // Voltage not found
 80040c8:	bf00      	nop
}
 80040ca:	3724      	adds	r7, #36	@ 0x24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}
 80040d0:	200018d0 	.word	0x200018d0
 80040d4:	20001924 	.word	0x20001924
 80040d8:	20000568 	.word	0x20000568

080040dc <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b089      	sub	sp, #36	@ 0x24
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	4603      	mov	r3, r0
 80040e4:	460a      	mov	r2, r1
 80040e6:	71fb      	strb	r3, [r7, #7]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71bb      	strb	r3, [r7, #6]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b0b      	cmp	r3, #11
 80040f0:	d802      	bhi.n	80040f8 <Set_LED_status+0x1c>
        target_i2c = &hi2c2;
 80040f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <Set_LED_status+0x54>)
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e001      	b.n	80040fc <Set_LED_status+0x20>
    } else {
        target_i2c = &hi2c3;
 80040f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <Set_LED_status+0x58>)
 80040fa:	617b      	str	r3, [r7, #20]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN;

    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 80040fc:	f107 040e 	add.w	r4, r7, #14
 8004100:	f107 0210 	add.w	r2, r7, #16
 8004104:	f107 0113 	add.w	r1, r7, #19
 8004108:	79f8      	ldrb	r0, [r7, #7]
 800410a:	f107 030a 	add.w	r3, r7, #10
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f107 030c 	add.w	r3, r7, #12
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4623      	mov	r3, r4
 8004118:	f7ff fd74 	bl	8003c04 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);
 800411c:	7cf9      	ldrb	r1, [r7, #19]
 800411e:	897a      	ldrh	r2, [r7, #10]
 8004120:	79bb      	ldrb	r3, [r7, #6]
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	f7ff fca0 	bl	8003a68 <Expander_SetPinState>

}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	200018d0 	.word	0x200018d0
 8004134:	20001924 	.word	0x20001924

08004138 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
 8004144:	4613      	mov	r3, r2
 8004146:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 8004148:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <INA229_writeReg+0x70>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	81bb      	strh	r3, [r7, #12]
 800414e:	2300      	movs	r3, #0
 8004150:	73bb      	strb	r3, [r7, #14]
    uint8_t rxBuf[3] = {0};
 8004152:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <INA229_writeReg+0x70>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	813b      	strh	r3, [r7, #8]
 8004158:	2300      	movs	r3, #0
 800415a:	72bb      	strb	r3, [r7, #10]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	b2db      	uxtb	r3, r3
 8004162:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 800416e:	883b      	ldrh	r3, [r7, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7f18      	ldrb	r0, [r3, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7f59      	ldrb	r1, [r3, #29]
 800417c:	f107 020c 	add.w	r2, r7, #12
 8004180:	f107 0308 	add.w	r3, r7, #8
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	2203      	movs	r2, #3
 800418a:	f000 f97b 	bl	8004484 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <INA229_writeReg+0x68>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8004194:	883b      	ldrh	r3, [r7, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	82da      	strh	r2, [r3, #22]
    }
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	0800d2fc 	.word	0x0800d2fc

080041ac <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7f1b      	ldrb	r3, [r3, #28]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f957 	bl	800446c <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	2100      	movs	r1, #0
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ffb6 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	461a      	mov	r2, r3
 80041d2:	2101      	movs	r1, #1
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ffaf 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	889b      	ldrh	r3, [r3, #4]
 80041de:	461a      	mov	r2, r3
 80041e0:	2102      	movs	r1, #2
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ffa8 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	88db      	ldrh	r3, [r3, #6]
 80041ec:	461a      	mov	r2, r3
 80041ee:	2103      	movs	r1, #3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ffa1 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	891b      	ldrh	r3, [r3, #8]
 80041fa:	461a      	mov	r2, r3
 80041fc:	210b      	movs	r1, #11
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff9a 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	895b      	ldrh	r3, [r3, #10]
 8004208:	461a      	mov	r2, r3
 800420a:	210c      	movs	r1, #12
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff93 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	899b      	ldrh	r3, [r3, #12]
 8004216:	461a      	mov	r2, r3
 8004218:	210d      	movs	r1, #13
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff8c 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	89db      	ldrh	r3, [r3, #14]
 8004224:	461a      	mov	r2, r3
 8004226:	210e      	movs	r1, #14
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff85 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8a1b      	ldrh	r3, [r3, #16]
 8004232:	461a      	mov	r2, r3
 8004234:	210f      	movs	r1, #15
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff7e 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8a5b      	ldrh	r3, [r3, #18]
 8004240:	461a      	mov	r2, r3
 8004242:	2110      	movs	r1, #16
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff77 	bl	8004138 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8a9b      	ldrh	r3, [r3, #20]
 800424e:	461a      	mov	r2, r3
 8004250:	2111      	movs	r1, #17
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff70 	bl	8004138 <INA229_writeReg>

}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8004260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004264:	b08b      	sub	sp, #44	@ 0x2c
 8004266:	af02      	add	r7, sp, #8
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 800426e:	2300      	movs	r3, #0
 8004270:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	2300      	movs	r3, #0
 8004278:	81bb      	strh	r3, [r7, #12]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	b25b      	sxtb	r3, r3
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	b25b      	sxtb	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7f18      	ldrb	r0, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7f59      	ldrb	r1, [r3, #29]
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <INA229_readReg+0xb4>)
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	3301      	adds	r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	f107 0610 	add.w	r6, r7, #16
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4633      	mov	r3, r6
 80042a8:	f000 f8ec 	bl	8004484 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e01b      	b.n	80042f6 <INA229_readReg+0x96>
    {
        value = (value << 8) | rxBuf[i];
 80042be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	020b      	lsls	r3, r1, #8
 80042cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042d0:	0202      	lsls	r2, r0, #8
 80042d2:	f107 0008 	add.w	r0, r7, #8
 80042d6:	6979      	ldr	r1, [r7, #20]
 80042d8:	4401      	add	r1, r0
 80042da:	7809      	ldrb	r1, [r1, #0]
 80042dc:	b2c9      	uxtb	r1, r1
 80042de:	2000      	movs	r0, #0
 80042e0:	460c      	mov	r4, r1
 80042e2:	4605      	mov	r5, r0
 80042e4:	ea42 0804 	orr.w	r8, r2, r4
 80042e8:	ea43 0905 	orr.w	r9, r3, r5
 80042ec:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3301      	adds	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	4a06      	ldr	r2, [pc, #24]	@ (8004314 <INA229_readReg+0xb4>)
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	461a      	mov	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4293      	cmp	r3, r2
 8004302:	dddc      	ble.n	80042be <INA229_readReg+0x5e>
    }

    return value;
 8004304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	3724      	adds	r7, #36	@ 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004314:	0800dfe4 	.word	0x0800dfe4

08004318 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8004320:	2105      	movs	r1, #5
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff9c 	bl	8004260 <INA229_readReg>
 8004328:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800432c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	0902      	lsrs	r2, r0, #4
 800433a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800433e:	090b      	lsrs	r3, r1, #4
 8004340:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8004344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004348:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800434c:	f173 0300 	sbcs.w	r3, r3, #0
 8004350:	d30c      	bcc.n	800436c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8004352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004356:	f7fc fc59 	bl	8000c0c <__aeabi_ul2f>
 800435a:	ee07 0a10 	vmov	s14, r0
 800435e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80043d0 <INA229_getVBUS_V+0xb8>
 8004362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004366:	edc7 7a05 	vstr	s15, [r7, #20]
 800436a:	e005      	b.n	8004378 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 800436c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004370:	f7fc fc4c 	bl	8000c0c <__aeabi_ul2f>
 8004374:	4603      	mov	r3, r0
 8004376:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8004378:	6978      	ldr	r0, [r7, #20]
 800437a:	f7fc f89d 	bl	80004b8 <__aeabi_f2d>
 800437e:	a310      	add	r3, pc, #64	@ (adr r3, 80043c0 <INA229_getVBUS_V+0xa8>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fc f8f0 	bl	8000568 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	a30d      	add	r3, pc, #52	@ (adr r3, 80043c8 <INA229_getVBUS_V+0xb0>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc fa11 	bl	80007bc <__aeabi_ddiv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7fc fb1b 	bl	80009dc <__aeabi_d2f>
 80043a6:	4603      	mov	r3, r0
 80043a8:	617b      	str	r3, [r7, #20]

    return data;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	ee07 3a90 	vmov	s15, r3
}
 80043b0:	eeb0 0a67 	vmov.f32	s0, s15
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	f3af 8000 	nop.w
 80043c0:	00000000 	.word	0x00000000
 80043c4:	40686a00 	.word	0x40686a00
 80043c8:	00000000 	.word	0x00000000
 80043cc:	412e8480 	.word	0x412e8480
 80043d0:	49800000 	.word	0x49800000

080043d4 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 80043dc:	2106      	movs	r1, #6
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ff3e 	bl	8004260 <INA229_readReg>
 80043e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 80043e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ec:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80043f0:	f173 0300 	sbcs.w	r3, r3, #0
 80043f4:	d30c      	bcc.n	8004410 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 80043f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043fa:	f7fc fc07 	bl	8000c0c <__aeabi_ul2f>
 80043fe:	ee07 0a10 	vmov	s14, r0
 8004402:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004460 <INA229_getDIETEMP_C+0x8c>
 8004406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440a:	edc7 7a05 	vstr	s15, [r7, #20]
 800440e:	e005      	b.n	800441c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8004410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004414:	f7fc fbfa 	bl	8000c0c <__aeabi_ul2f>
 8004418:	4603      	mov	r3, r0
 800441a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800441c:	6978      	ldr	r0, [r7, #20]
 800441e:	f7fc f84b 	bl	80004b8 <__aeabi_f2d>
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <INA229_getDIETEMP_C+0x90>)
 8004428:	f7fc f89e 	bl	8000568 <__aeabi_dmul>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <INA229_getDIETEMP_C+0x94>)
 800443a:	f7fc f9bf 	bl	80007bc <__aeabi_ddiv>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	f7fc fac9 	bl	80009dc <__aeabi_d2f>
 800444a:	4603      	mov	r3, r0
 800444c:	617b      	str	r3, [r7, #20]

    return data;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	ee07 3a90 	vmov	s15, r3
}
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	47800000 	.word	0x47800000
 8004464:	401f4000 	.word	0x401f4000
 8004468:	408f4000 	.word	0x408f4000

0800446c <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	460b      	mov	r3, r1
 8004492:	71bb      	strb	r3, [r7, #6]
 8004494:	4613      	mov	r3, r2
 8004496:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 80044a2:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <mcu_spiTransfer+0x5c>)
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e007      	b.n	80044b8 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d102      	bne.n	80044b4 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <mcu_spiTransfer+0x60>)
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e001      	b.n	80044b8 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e00f      	b.n	80044d8 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80044b8:	797b      	ldrb	r3, [r7, #5]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	9200      	str	r2, [sp, #0]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f006 fdde 	bl	800b088 <HAL_SPI_TransmitReceive>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20001978 	.word	0x20001978
 80044e4:	200019d0 	.word	0x200019d0

080044e8 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e044      	b.n	8004584 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	4613      	mov	r3, r2
 80044fe:	019b      	lsls	r3, r3, #6
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	461a      	mov	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	220c      	movs	r2, #12
 800450c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	4613      	mov	r3, r2
 8004514:	019b      	lsls	r3, r3, #6
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	461a      	mov	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4413      	add	r3, r2
 8004520:	2204      	movs	r2, #4
 8004522:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	4613      	mov	r3, r2
 800452a:	019b      	lsls	r3, r3, #6
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	461a      	mov	r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	2206      	movs	r2, #6
 8004538:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	4613      	mov	r3, r2
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4413      	add	r3, r2
 800454c:	2204      	movs	r2, #4
 800454e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	4613      	mov	r3, r2
 8004556:	019b      	lsls	r3, r3, #6
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	461a      	mov	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	4413      	add	r3, r2
 8004562:	2202      	movs	r2, #2
 8004564:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	4613      	mov	r3, r2
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4413      	add	r3, r2
 8004578:	2203      	movs	r2, #3
 800457a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	3301      	adds	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3b6      	bcc.n	80044fa <LTC6811_init_reg_limits+0x12>
    }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	6039      	str	r1, [r7, #0]
 80045a4:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f976 	bl	800489c <LTC681x_wrcfg>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
 80045c2:	460b      	mov	r3, r1
 80045c4:	71bb      	strb	r3, [r7, #6]
 80045c6:	4613      	mov	r3, r2
 80045c8:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD, DCP, CH);
 80045ca:	797a      	ldrb	r2, [r7, #5]
 80045cc:	79b9      	ldrb	r1, [r7, #6]
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f9e1 	bl	8004998 <LTC681x_adcv>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <LTC6811_rdcv>:
 */
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4603      	mov	r3, r0
 80045e6:	603a      	str	r2, [r7, #0]
 80045e8:	71fb      	strb	r3, [r7, #7]
 80045ea:	460b      	mov	r3, r1
 80045ec:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 80045f2:	79b9      	ldrb	r1, [r7, #6]
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f9f8 	bl	80049ee <LTC681x_rdcv>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <LTC6811_pollAdc>:
    return (LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
    return (LTC681x_pollAdc());
 8004610:	f000 fb6e 	bl	8004cf0 <LTC681x_pollAdc>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	bd80      	pop	{r7, pc}

0800461a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd88 	bl	8005140 <LTC681x_reset_crc_count>
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fdeb 	bl	8005224 <LTC681x_init_cfg>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af06      	add	r7, sp, #24
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
 8004666:	460b      	mov	r3, r1
 8004668:	71bb      	strb	r3, [r7, #6]
 800466a:	4613      	mov	r3, r2
 800466c:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800466e:	7979      	ldrb	r1, [r7, #5]
 8004670:	79ba      	ldrb	r2, [r7, #6]
 8004672:	79f8      	ldrb	r0, [r7, #7]
 8004674:	8c3b      	ldrh	r3, [r7, #32]
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	8bbb      	ldrh	r3, [r7, #28]
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	460b      	mov	r3, r1
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	f000 fe00 	bl	8005290 <LTC681x_set_cfgr>
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <wakeup_sleep>:
 * @param parameters   :  Total number of BMS ICs
 * @return Value       :  none
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
    int i;
    for (i = 0; i < total_ic; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e00c      	b.n	80046c2 <wakeup_sleep+0x2a>
    {
        cs_low();
 80046a8:	f001 f890 	bl	80057cc <cs_low>
        delay_time_us(160);
 80046ac:	20a0      	movs	r0, #160	@ 0xa0
 80046ae:	f001 f8b5 	bl	800581c <delay_time_us>
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 80046b2:	f001 f89f 	bl	80057f4 <cs_high>
        delay_time_us(18);
 80046b6:	2012      	movs	r0, #18
 80046b8:	f001 f8b0 	bl	800581c <delay_time_us>
    for (i = 0; i < total_ic; i++)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	dbee      	blt.n	80046a8 <wakeup_sleep+0x10>
//        HAL_Delay(2500);
    }
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <cmd_68>:
 * @brief Description  :  Generic function to write 68xx commands. Function calculates PEC for tx_cmd data.
 * @param parameters   :  transmit commands
 * @return Value       :  none
 */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = tx_cmd[0];
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	723b      	strb	r3, [r7, #8]
    cmd[1] = tx_cmd[1];
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc(2, cmd);
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	4619      	mov	r1, r3
 80046ee:	2002      	movs	r0, #2
 80046f0:	f000 f8a2 	bl	8004838 <pec15_calc>
 80046f4:	4603      	mov	r3, r0
 80046f6:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004708:	f001 f860 	bl	80057cc <cs_low>
    spi_write_array(4, cmd);
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	4619      	mov	r1, r3
 8004712:	2004      	movs	r0, #4
 8004714:	f001 f89e 	bl	8005854 <spi_write_array>
    cs_high();
 8004718:	f001 f86c 	bl	80057f4 <cs_high>
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8004732:	2306      	movs	r3, #6
 8004734:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3304      	adds	r3, #4
 800473e:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8004740:	7efb      	ldrb	r3, [r7, #27]
 8004742:	4618      	mov	r0, r3
 8004744:	f008 fc56 	bl	800cff4 <malloc>
 8004748:	4603      	mov	r3, r0
 800474a:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3301      	adds	r3, #1
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	7852      	ldrb	r2, [r2, #1]
 800475c:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	2002      	movs	r0, #2
 8004762:	f000 f869 	bl	8004838 <pec15_calc>
 8004766:	4603      	mov	r3, r0
 8004768:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	b29a      	uxth	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3302      	adds	r3, #2
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3303      	adds	r3, #3
 800477c:	8a7a      	ldrh	r2, [r7, #18]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8004782:	2304      	movs	r3, #4
 8004784:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	77bb      	strb	r3, [r7, #30]
 800478a:	e042      	b.n	8004812 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800478c:	2300      	movs	r3, #0
 800478e:	777b      	strb	r3, [r7, #29]
 8004790:	e016      	b.n	80047c0 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8004792:	7fbb      	ldrb	r3, [r7, #30]
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	461a      	mov	r2, r3
 80047a0:	7f7b      	ldrb	r3, [r7, #29]
 80047a2:	4413      	add	r3, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	441a      	add	r2, r3
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	440b      	add	r3, r1
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	3301      	adds	r3, #1
 80047b8:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80047ba:	7f7b      	ldrb	r3, [r7, #29]
 80047bc:	3301      	adds	r3, #1
 80047be:	777b      	strb	r3, [r7, #29]
 80047c0:	7f7a      	ldrb	r2, [r7, #29]
 80047c2:	7f3b      	ldrb	r3, [r7, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d3e4      	bcc.n	8004792 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 80047c8:	7fbb      	ldrb	r3, [r7, #30]
 80047ca:	1e5a      	subs	r2, r3, #1
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	441a      	add	r2, r3
 80047da:	7f3b      	ldrb	r3, [r7, #28]
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f82a 	bl	8004838 <pec15_calc>
 80047e4:	4603      	mov	r3, r0
 80047e6:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80047e8:	8a3b      	ldrh	r3, [r7, #16]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b299      	uxth	r1, r3
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	b2ca      	uxtb	r2, r1
 80047f6:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80047f8:	7ffb      	ldrb	r3, [r7, #31]
 80047fa:	3301      	adds	r3, #1
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	8a3a      	ldrh	r2, [r7, #16]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8004806:	7ffb      	ldrb	r3, [r7, #31]
 8004808:	3302      	adds	r3, #2
 800480a:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800480c:	7fbb      	ldrb	r3, [r7, #30]
 800480e:	3b01      	subs	r3, #1
 8004810:	77bb      	strb	r3, [r7, #30]
 8004812:	7fbb      	ldrb	r3, [r7, #30]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1b9      	bne.n	800478c <write_68+0x68>
    }

    cs_low();
 8004818:	f000 ffd8 	bl	80057cc <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800481c:	7efb      	ldrb	r3, [r7, #27]
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f817 	bl	8005854 <spi_write_array>
    cs_high();
 8004826:	f000 ffe5 	bl	80057f4 <cs_high>

    free(cmd);
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f008 fbea 	bl	800d004 <free>
}
 8004830:	bf00      	nop
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8004844:	2310      	movs	r3, #16
 8004846:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8004848:	2300      	movs	r3, #0
 800484a:	737b      	strb	r3, [r7, #13]
 800484c:	e017      	b.n	800487e <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	b29b      	uxth	r3, r3
 8004854:	7b7a      	ldrb	r2, [r7, #13]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	440a      	add	r2, r1
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	4053      	eors	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b29a      	uxth	r2, r3
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	490a      	ldr	r1, [pc, #40]	@ (8004898 <pec15_calc+0x60>)
 800486e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004872:	b29b      	uxth	r3, r3
 8004874:	4053      	eors	r3, r2
 8004876:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8004878:	7b7b      	ldrb	r3, [r7, #13]
 800487a:	3301      	adds	r3, #1
 800487c:	737b      	strb	r3, [r7, #13]
 800487e:	7b7a      	ldrb	r2, [r7, #13]
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3e3      	bcc.n	800484e <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	b29b      	uxth	r3, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	0800e08c 	.word	0x0800e08c

0800489c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b0c4      	sub	sp, #272	@ 0x110
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4602      	mov	r2, r0
 80048a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80048ac:	6019      	str	r1, [r3, #0]
 80048ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80048b6:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 80048b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048bc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80048d2:	e047      	b.n	8004964 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 80048d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 80048e6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80048ea:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80048ee:	e00b      	b.n	8004908 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 80048f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048f4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8004908:	2300      	movs	r3, #0
 800490a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800490e:	e020      	b.n	8004952 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8004910:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8004914:	4613      	mov	r3, r2
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	461a      	mov	r2, r3
 800491e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004922:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1899      	adds	r1, r3, r2
 800492a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800492e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004932:	5c89      	ldrb	r1, [r1, r2]
 8004934:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004938:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800493c:	54d1      	strb	r1, [r2, r3]
            write_count++;
 800493e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004942:	3301      	adds	r3, #1
 8004944:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8004948:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800494c:	3301      	adds	r3, #1
 800494e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004952:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004956:	2b05      	cmp	r3, #5
 8004958:	d9da      	bls.n	8004910 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800495a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800495e:	3301      	adds	r3, #1
 8004960:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004964:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004968:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800496c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d3ae      	bcc.n	80048d4 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8004976:	f107 0208 	add.w	r2, r7, #8
 800497a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800497e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004982:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fecb 	bl	8004724 <write_68>
}
 800498e:	bf00      	nop
 8004990:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
 80049a2:	460b      	mov	r3, r1
 80049a4:	71bb      	strb	r3, [r7, #6]
 80049a6:	4613      	mov	r3, r2
 80049a8:	717b      	strb	r3, [r7, #5]
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	105b      	asrs	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x02;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	3302      	adds	r3, #2
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	733b      	strb	r3, [r7, #12]
    md_bits = (MD & 0x01) << 7;
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	01db      	lsls	r3, r3, #7
 80049c2:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80049c4:	79bb      	ldrb	r3, [r7, #6]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	4413      	add	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	797b      	ldrb	r3, [r7, #5]
 80049d2:	4413      	add	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3360      	adds	r3, #96	@ 0x60
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	737b      	strb	r3, [r7, #13]

    cmd_68(cmd);
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fe77 	bl	80046d4 <cmd_68>
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <LTC681x_rdcv>:
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 80049ee:	b5b0      	push	{r4, r5, r7, lr}
 80049f0:	b088      	sub	sp, #32
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	4603      	mov	r3, r0
 80049f6:	603a      	str	r2, [r7, #0]
 80049f8:	71fb      	strb	r3, [r7, #7]
 80049fa:	460b      	mov	r3, r1
 80049fc:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
    uint8_t *cell_data;
    uint8_t c_ic = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75bb      	strb	r3, [r7, #22]
    uint8_t cell_reg;
    int current_ic;
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8004a06:	79bb      	ldrb	r3, [r7, #6]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f008 faf2 	bl	800cff4 <malloc>
 8004a10:	4603      	mov	r3, r0
 8004a12:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d14c      	bne.n	8004ab4 <LTC681x_rdcv+0xc6>
    {
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	757b      	strb	r3, [r7, #21]
 8004a1e:	e042      	b.n	8004aa6 <LTC681x_rdcv+0xb8>
        {
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8004a20:	79b9      	ldrb	r1, [r7, #6]
 8004a22:	7d7b      	ldrb	r3, [r7, #21]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f897 	bl	8004b5a <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e032      	b.n	8004a98 <LTC681x_rdcv+0xaa>
            {
                if (ic->isospi_reverse == false)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <LTC681x_rdcv+0x54>
                {
                    c_ic = current_ic;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	75bb      	strb	r3, [r7, #22]
 8004a40:	e006      	b.n	8004a50 <LTC681x_rdcv+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	79ba      	ldrb	r2, [r7, #6]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	b2d8      	uxtb	r0, r3
                                                    &ic[c_ic].cells.c_codes[0],
 8004a54:	7dba      	ldrb	r2, [r7, #22]
 8004a56:	4613      	mov	r3, r2
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004a64:	f103 041e 	add.w	r4, r3, #30
                                                    &ic[c_ic].cells.pec_match[0]);;
 8004a68:	7dba      	ldrb	r2, [r7, #22]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	461a      	mov	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004a78:	3342      	adds	r3, #66	@ 0x42
 8004a7a:	7d79      	ldrb	r1, [r7, #21]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4623      	mov	r3, r4
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f000 f8c5 	bl	8004c10 <parse_cells>
 8004a86:	4603      	mov	r3, r0
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	79bb      	ldrb	r3, [r7, #6]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	dbc8      	blt.n	8004a32 <LTC681x_rdcv+0x44>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004aa0:	7d7b      	ldrb	r3, [r7, #21]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	757b      	strb	r3, [r7, #21]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8004aac:	7d7a      	ldrb	r2, [r7, #21]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d9b6      	bls.n	8004a20 <LTC681x_rdcv+0x32>
 8004ab2:	e044      	b.n	8004b3e <LTC681x_rdcv+0x150>
        }
    }

    else
    {
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8004ab4:	79b9      	ldrb	r1, [r7, #6]
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f84d 	bl	8004b5a <LTC681x_rdcv_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e037      	b.n	8004b36 <LTC681x_rdcv+0x148>
        {
            if (ic->isospi_reverse == false)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <LTC681x_rdcv+0xe8>
            {
                c_ic = current_ic;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	75bb      	strb	r3, [r7, #22]
 8004ad4:	e006      	b.n	8004ae4 <LTC681x_rdcv+0xf6>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	79ba      	ldrb	r2, [r7, #6]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = pec_error
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b2d8      	uxtb	r0, r3
 8004ae8:	7dbb      	ldrb	r3, [r7, #22]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	461a      	mov	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	189c      	adds	r4, r3, r2
                                  &ic[c_ic].cells.c_codes[0],
 8004af2:	7dba      	ldrb	r2, [r7, #22]
 8004af4:	4613      	mov	r3, r2
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	461a      	mov	r2, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004b02:	f103 051e 	add.w	r5, r3, #30
                                  &ic[c_ic].cells.pec_match[0]);;
 8004b06:	7dba      	ldrb	r2, [r7, #22]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	019b      	lsls	r3, r3, #6
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	461a      	mov	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004b16:	3342      	adds	r3, #66	@ 0x42
 8004b18:	79f9      	ldrb	r1, [r7, #7]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	4622      	mov	r2, r4
 8004b20:	f000 f876 	bl	8004c10 <parse_cells>
 8004b24:	4603      	mov	r3, r0
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
            pec_error = pec_error
 8004b2e:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3301      	adds	r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	79bb      	ldrb	r3, [r7, #6]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	dbc3      	blt.n	8004ac6 <LTC681x_rdcv+0xd8>
        }
    }
    LTC681x_check_pec(total_ic, CELL, ic);
 8004b3e:	79bb      	ldrb	r3, [r7, #6]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f915 	bl	8004d74 <LTC681x_check_pec>
    free(cell_data);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f008 fa5a 	bl	800d004 <free>

    return (pec_error);
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bdb0      	pop	{r4, r5, r7, pc}

08004b5a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	603a      	str	r2, [r7, #0]
 8004b64:	71fb      	strb	r3, [r7, #7]
 8004b66:	460b      	mov	r3, r1
 8004b68:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //1: RDCVA
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d104      	bne.n	8004b7e <LTC681x_rdcv_reg+0x24>
    {
        cmd[1] = 0x04;
 8004b74:	2304      	movs	r3, #4
 8004b76:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	723b      	strb	r3, [r7, #8]
 8004b7c:	e026      	b.n	8004bcc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 2) //2: RDCVB
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d104      	bne.n	8004b8e <LTC681x_rdcv_reg+0x34>
    {
        cmd[1] = 0x06;
 8004b84:	2306      	movs	r3, #6
 8004b86:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	723b      	strb	r3, [r7, #8]
 8004b8c:	e01e      	b.n	8004bcc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 3) //3: RDCVC
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d104      	bne.n	8004b9e <LTC681x_rdcv_reg+0x44>
    {
        cmd[1] = 0x08;
 8004b94:	2308      	movs	r3, #8
 8004b96:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	723b      	strb	r3, [r7, #8]
 8004b9c:	e016      	b.n	8004bcc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 4) //4: RDCVD
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d104      	bne.n	8004bae <LTC681x_rdcv_reg+0x54>
    {
        cmd[1] = 0x0A;
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	723b      	strb	r3, [r7, #8]
 8004bac:	e00e      	b.n	8004bcc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 5) //4: RDCVE
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d104      	bne.n	8004bbe <LTC681x_rdcv_reg+0x64>
    {
        cmd[1] = 0x09;
 8004bb4:	2309      	movs	r3, #9
 8004bb6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	723b      	strb	r3, [r7, #8]
 8004bbc:	e006      	b.n	8004bcc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 6) //4: RDCVF
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d103      	bne.n	8004bcc <LTC681x_rdcv_reg+0x72>
    {
        cmd[1] = 0x0B;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	f7ff fe30 	bl	8004838 <pec15_calc>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004bdc:	89bb      	ldrh	r3, [r7, #12]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004be6:	89bb      	ldrh	r3, [r7, #12]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004bec:	f000 fdee 	bl	80057cc <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	79ba      	ldrb	r2, [r7, #6]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	f107 0008 	add.w	r0, r7, #8
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	2104      	movs	r1, #4
 8004c00:	f000 fe4c 	bl	800589c <spi_write_read>
    cs_high();
 8004c04:	f000 fdf6 	bl	80057f4 <cs_high>
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60ba      	str	r2, [r7, #8]
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	73bb      	strb	r3, [r7, #14]
    const uint8_t BYT_IN_REG = 6;
 8004c22:	2306      	movs	r3, #6
 8004c24:	773b      	strb	r3, [r7, #28]
    const uint8_t CELL_IN_REG = 3;
 8004c26:	2303      	movs	r3, #3
 8004c28:	76fb      	strb	r3, [r7, #27]
    int8_t pec_error = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	77fb      	strb	r3, [r7, #31]
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	77bb      	strb	r3, [r7, #30]
    uint8_t current_cell;

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004c34:	2300      	movs	r3, #0
 8004c36:	777b      	strb	r3, [r7, #29]
 8004c38:	e01f      	b.n	8004c7a <parse_cells+0x6a>
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
 8004c3a:	7fbb      	ldrb	r3, [r7, #30]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4413      	add	r3, r2
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8004c44:	7fbb      	ldrb	r3, [r7, #30]
 8004c46:	3301      	adds	r3, #1
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
        parsed_cell = cell_data[data_counter]
 8004c52:	440b      	add	r3, r1
 8004c54:	82bb      	strh	r3, [r7, #20]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8004c56:	7f7a      	ldrb	r2, [r7, #29]
 8004c58:	7bbb      	ldrb	r3, [r7, #14]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	7ef9      	ldrb	r1, [r7, #27]
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	8aba      	ldrh	r2, [r7, #20]
 8004c6c:	801a      	strh	r2, [r3, #0]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8004c6e:	7fbb      	ldrb	r3, [r7, #30]
 8004c70:	3302      	adds	r3, #2
 8004c72:	77bb      	strb	r3, [r7, #30]
    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004c74:	7f7b      	ldrb	r3, [r7, #29]
 8004c76:	3301      	adds	r3, #1
 8004c78:	777b      	strb	r3, [r7, #29]
 8004c7a:	7f7a      	ldrb	r2, [r7, #29]
 8004c7c:	7efb      	ldrb	r3, [r7, #27]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3db      	bcc.n	8004c3a <parse_cells+0x2a>
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004c82:	7fbb      	ldrb	r3, [r7, #30]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	b21a      	sxth	r2, r3
 8004c8e:	7fbb      	ldrb	r3, [r7, #30]
 8004c90:	3301      	adds	r3, #1
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	440b      	add	r3, r1
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b21b      	sxth	r3, r3
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b21b      	sxth	r3, r3
 8004c9e:	833b      	strh	r3, [r7, #24]
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	441a      	add	r2, r3
 8004caa:	7f3b      	ldrb	r3, [r7, #28]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fdc2 	bl	8004838 <pec15_calc>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	82fb      	strh	r3, [r7, #22]

    if (received_pec != data_pec)
 8004cb8:	8b3a      	ldrh	r2, [r7, #24]
 8004cba:	8afb      	ldrh	r3, [r7, #22]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d008      	beq.n	8004cd2 <parse_cells+0xc2>
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]
        ic_pec[cell_reg - 1] = 1;
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cca:	4413      	add	r3, r2
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e005      	b.n	8004cde <parse_cells+0xce>
    }
    else
    {
        ic_pec[cell_reg - 1] = 0;
 8004cd2:	7bbb      	ldrb	r3, [r7, #14]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd8:	4413      	add	r3, r2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
    }
    data_counter = data_counter + 2;
 8004cde:	7fbb      	ldrb	r3, [r7, #30]
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	77bb      	strb	r3, [r7, #30]

    return (pec_error);
 8004ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <LTC681x_pollAdc>:
    return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
    uint32_t counter = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
    uint8_t finished = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	72fb      	strb	r3, [r7, #11]
    uint8_t current_time = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = 0x07;
 8004d02:	2307      	movs	r3, #7
 8004d04:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x14;
 8004d06:	2314      	movs	r3, #20
 8004d08:	717b      	strb	r3, [r7, #5]
    cmd_pec = pec15_calc(2, cmd);
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	2002      	movs	r0, #2
 8004d10:	f7ff fd92 	bl	8004838 <pec15_calc>
 8004d14:	4603      	mov	r3, r0
 8004d16:	813b      	strh	r3, [r7, #8]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004d18:	893b      	ldrh	r3, [r7, #8]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	71bb      	strb	r3, [r7, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	71fb      	strb	r3, [r7, #7]

    cs_low();
 8004d28:	f000 fd50 	bl	80057cc <cs_low>
    spi_write_array(4, cmd);
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	2004      	movs	r0, #4
 8004d32:	f000 fd8f 	bl	8005854 <spi_write_array>
    while ((counter < 400000) && (finished == 0))
 8004d36:	e00d      	b.n	8004d54 <LTC681x_pollAdc+0x64>
    {
        current_time = spi_read_byte(0xFF);
 8004d38:	20ff      	movs	r0, #255	@ 0xff
 8004d3a:	f000 fdeb 	bl	8005914 <spi_read_byte>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	72bb      	strb	r3, [r7, #10]
        if (current_time > 0)
 8004d42:	7abb      	ldrb	r3, [r7, #10]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <LTC681x_pollAdc+0x5e>
        {
            finished = 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	72fb      	strb	r3, [r7, #11]
 8004d4c:	e002      	b.n	8004d54 <LTC681x_pollAdc+0x64>

        }
        else
        {
            counter = counter + 10;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	330a      	adds	r3, #10
 8004d52:	60fb      	str	r3, [r7, #12]
    while ((counter < 400000) && (finished == 0))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a06      	ldr	r2, [pc, #24]	@ (8004d70 <LTC681x_pollAdc+0x80>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d802      	bhi.n	8004d62 <LTC681x_pollAdc+0x72>
 8004d5c:	7afb      	ldrb	r3, [r7, #11]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ea      	beq.n	8004d38 <LTC681x_pollAdc+0x48>
        }
    }
    cs_high();
 8004d62:	f000 fd47 	bl	80057f4 <cs_high>

    return ((uint32_t)current_time);
 8004d66:	7abb      	ldrb	r3, [r7, #10]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00061a7f 	.word	0x00061a7f

08004d74 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
        uint8_t reg, //Type of Register
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	603a      	str	r2, [r7, #0]
 8004d7e:	71fb      	strb	r3, [r7, #7]
 8004d80:	460b      	mov	r3, r1
 8004d82:	71bb      	strb	r3, [r7, #6]
    int current_ic;
    int i;
    switch (reg)
 8004d84:	79bb      	ldrb	r3, [r7, #6]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	f200 81d3 	bhi.w	8005132 <LTC681x_check_pec+0x3be>
 8004d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <LTC681x_check_pec+0x20>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004da9 	.word	0x08004da9
 8004d98:	08004ed5 	.word	0x08004ed5
 8004d9c:	08004f9f 	.word	0x08004f9f
 8004da0:	08005069 	.word	0x08005069
 8004da4:	08004e3f 	.word	0x08004e3f
    {
    case CFGR:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e042      	b.n	8004e34 <LTC681x_check_pec+0xc0>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].config.rx_pec_match;
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	019b      	lsls	r3, r3, #6
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	7b9b      	ldrb	r3, [r3, #14]
 8004dd4:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	019b      	lsls	r3, r3, #6
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004de6:	180a      	adds	r2, r1, r0
 8004de8:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004dea:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].config.rx_pec_match;
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4613      	mov	r3, r2
 8004e06:	019b      	lsls	r3, r3, #6
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	7b9b      	ldrb	r3, [r3, #14]
 8004e14:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	461a      	mov	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004e26:	180a      	adds	r2, r1, r0
 8004e28:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004e2a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	dbb8      	blt.n	8004dae <LTC681x_check_pec+0x3a>
        }
        break;
 8004e3c:	e17a      	b.n	8005134 <LTC681x_check_pec+0x3c0>

    case CFGRB:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e042      	b.n	8004eca <LTC681x_check_pec+0x156>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4613      	mov	r3, r2
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].configb.rx_pec_match;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	019b      	lsls	r3, r3, #6
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	7f5b      	ldrb	r3, [r3, #29]
 8004e6a:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	461a      	mov	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004e7c:	180a      	adds	r2, r1, r0
 8004e7e:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004e80:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4613      	mov	r3, r2
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].configb.rx_pec_match;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	7f5b      	ldrb	r3, [r3, #29]
 8004eaa:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004ebc:	180a      	adds	r2, r1, r0
 8004ebe:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004ec0:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	dbb8      	blt.n	8004e44 <LTC681x_check_pec+0xd0>
        }
        break;
 8004ed2:	e12f      	b.n	8005134 <LTC681x_check_pec+0x3c0>
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e05c      	b.n	8004f94 <LTC681x_check_pec+0x220>
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	e04f      	b.n	8004f80 <LTC681x_check_pec+0x20c>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	461a      	mov	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	441a      	add	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4413      	add	r3, r2
 8004f08:	3342      	adds	r3, #66	@ 0x42
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	019b      	lsls	r3, r3, #6
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	4413      	add	r3, r2
                                + ic[current_ic].cells.pec_match[i];
 8004f1e:	180a      	adds	r2, r1, r0
 8004f20:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8004f22:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	019b      	lsls	r3, r3, #6
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	461a      	mov	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	441a      	add	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3360      	adds	r3, #96	@ 0x60
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4413      	add	r3, r2
 8004f3e:	8959      	ldrh	r1, [r3, #10]
                                + ic[current_ic].cells.pec_match[i];
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4613      	mov	r3, r2
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	441a      	add	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4413      	add	r3, r2
 8004f54:	3342      	adds	r3, #66	@ 0x42
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	019b      	lsls	r3, r3, #6
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	461a      	mov	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	441a      	add	r2, r3
                                + ic[current_ic].cells.pec_match[i];
 8004f6a:	180b      	adds	r3, r1, r0
 8004f6c:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3360      	adds	r3, #96	@ 0x60
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4413      	add	r3, r2
 8004f76:	460a      	mov	r2, r1
 8004f78:	815a      	strh	r2, [r3, #10]
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	dba8      	blt.n	8004ee0 <LTC681x_check_pec+0x16c>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	db9e      	blt.n	8004eda <LTC681x_check_pec+0x166>
            }
        }
        break;
 8004f9c:	e0ca      	b.n	8005134 <LTC681x_check_pec+0x3c0>
    case AUX:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e05c      	b.n	800505e <LTC681x_check_pec+0x2ea>
        {
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	e04f      	b.n	800504a <LTC681x_check_pec+0x2d6>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + (ic[current_ic].aux.pec_match[i]);
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	019b      	lsls	r3, r3, #6
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3360      	adds	r3, #96	@ 0x60
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4413      	add	r3, r2
                                + (ic[current_ic].aux.pec_match[i]);
 8004fe8:	180a      	adds	r2, r1, r0
 8004fea:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8004fec:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.aux_pec[i] =
                        ic[current_ic].crc_count.aux_pec[i]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	441a      	add	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3368      	adds	r3, #104	@ 0x68
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	88d9      	ldrh	r1, [r3, #6]
                                + (ic[current_ic].aux.pec_match[i]);
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	461a      	mov	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	441a      	add	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	3360      	adds	r3, #96	@ 0x60
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4613      	mov	r3, r2
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	461a      	mov	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	441a      	add	r2, r3
                                + (ic[current_ic].aux.pec_match[i]);
 8005034:	180b      	adds	r3, r1, r0
 8005036:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	3368      	adds	r3, #104	@ 0x68
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	460a      	mov	r2, r1
 8005042:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	3301      	adds	r3, #1
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4293      	cmp	r3, r2
 8005056:	dba8      	blt.n	8004faa <LTC681x_check_pec+0x236>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	429a      	cmp	r2, r3
 8005064:	db9e      	blt.n	8004fa4 <LTC681x_check_pec+0x230>
            }
        }

        break;
 8005066:	e065      	b.n	8005134 <LTC681x_check_pec+0x3c0>
    case STAT:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e05c      	b.n	8005128 <LTC681x_check_pec+0x3b4>
        {

            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	e04f      	b.n	8005114 <LTC681x_check_pec+0x3a0>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4613      	mov	r3, r2
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4413      	add	r3, r2
 8005084:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].stat.pec_match[i];
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4613      	mov	r3, r2
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	461a      	mov	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	441a      	add	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4413      	add	r3, r2
 800509c:	3371      	adds	r3, #113	@ 0x71
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	461a      	mov	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4413      	add	r3, r2
                                + ic[current_ic].stat.pec_match[i];
 80050b2:	180a      	adds	r2, r1, r0
 80050b4:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 80050b6:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.stat_pec[i] =
                        ic[current_ic].crc_count.stat_pec[i]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	441a      	add	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	336c      	adds	r3, #108	@ 0x6c
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	88d9      	ldrh	r1, [r3, #6]
                                + ic[current_ic].stat.pec_match[i];
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	441a      	add	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4413      	add	r3, r2
 80050e8:	3371      	adds	r3, #113	@ 0x71
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
                ic[current_ic].crc_count.stat_pec[i] =
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	019b      	lsls	r3, r3, #6
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	441a      	add	r2, r3
                                + ic[current_ic].stat.pec_match[i];
 80050fe:	180b      	adds	r3, r1, r0
 8005100:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.stat_pec[i] =
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	336c      	adds	r3, #108	@ 0x6c
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	460a      	mov	r2, r1
 800510c:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3301      	adds	r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800511a:	3b01      	subs	r3, #1
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	dba8      	blt.n	8005074 <LTC681x_check_pec+0x300>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	429a      	cmp	r2, r3
 800512e:	db9e      	blt.n	800506e <LTC681x_check_pec+0x2fa>
            }
        }
        break;
 8005130:	e000      	b.n	8005134 <LTC681x_check_pec+0x3c0>
    default:
        break;
 8005132:	bf00      	nop
    }
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	e05d      	b.n	800520e <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4613      	mov	r3, r2
 8005156:	019b      	lsls	r3, r3, #6
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	461a      	mov	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4413      	add	r3, r2
 8005178:	2200      	movs	r2, #0
 800517a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e010      	b.n	80051a6 <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	461a      	mov	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	441a      	add	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3360      	adds	r3, #96	@ 0x60
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	2200      	movs	r2, #0
 800519e:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	ddeb      	ble.n	8005184 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e010      	b.n	80051d4 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4613      	mov	r3, r2
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	461a      	mov	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3368      	adds	r3, #104	@ 0x68
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	ddeb      	ble.n	80051b2 <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e010      	b.n	8005202 <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	441a      	add	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	336c      	adds	r3, #108	@ 0x6c
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	2200      	movs	r2, #0
 80051fa:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	ddeb      	ble.n	80051e0 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3301      	adds	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	db9d      	blt.n	8005152 <LTC681x_reset_crc_count+0x12>
        }
    }
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e021      	b.n	800527a <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 8005236:	2300      	movs	r3, #0
 8005238:	73bb      	strb	r3, [r7, #14]
 800523a:	e00d      	b.n	8005258 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	4613      	mov	r3, r2
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	461a      	mov	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	441a      	add	r2, r3
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	2100      	movs	r1, #0
 8005250:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	3301      	adds	r3, #1
 8005256:	73bb      	strb	r3, [r7, #14]
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d9ee      	bls.n	800523c <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	4613      	mov	r3, r2
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	461a      	mov	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	4413      	add	r3, r2
 800526e:	2200      	movs	r2, #0
 8005270:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	3301      	adds	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	429a      	cmp	r2, r3
 8005280:	d3d9      	bcc.n	8005236 <LTC681x_init_cfg+0x12>
    }
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6039      	str	r1, [r7, #0]
 8005298:	4611      	mov	r1, r2
 800529a:	461a      	mov	r2, r3
 800529c:	4603      	mov	r3, r0
 800529e:	71fb      	strb	r3, [r7, #7]
 80052a0:	460b      	mov	r3, r1
 80052a2:	71bb      	strb	r3, [r7, #6]
 80052a4:	4613      	mov	r3, r2
 80052a6:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 80052a8:	79ba      	ldrb	r2, [r7, #6]
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f828 	bl	8005304 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 80052b4:	797a      	ldrb	r2, [r7, #5]
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f85e 	bl	800537c <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f894 	bl	80053f4 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f8e6 	bl	80054a4 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f97f 	bl	80055e2 <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 80052e4:	8bba      	ldrh	r2, [r7, #28]
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f9d1 	bl	8005692 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 80052f0:	8c3a      	ldrh	r2, [r7, #32]
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fa1b 	bl	8005732 <LTC681x_set_cfgr_ov>
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	6039      	str	r1, [r7, #0]
 800530e:	71fb      	strb	r3, [r7, #7]
 8005310:	4613      	mov	r3, r2
 8005312:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8005314:	79bb      	ldrb	r3, [r7, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d015      	beq.n	8005346 <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 800531a:	79fa      	ldrb	r2, [r7, #7]
 800531c:	4613      	mov	r3, r2
 800531e:	019b      	lsls	r3, r3, #6
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	461a      	mov	r2, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	4613      	mov	r3, r2
 8005330:	019b      	lsls	r3, r3, #6
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4413      	add	r3, r2
 800533c:	f041 0204 	orr.w	r2, r1, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8005344:	e014      	b.n	8005370 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8005346:	79fa      	ldrb	r2, [r7, #7]
 8005348:	4613      	mov	r3, r2
 800534a:	019b      	lsls	r3, r3, #6
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	461a      	mov	r2, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4413      	add	r3, r2
 8005356:	7819      	ldrb	r1, [r3, #0]
 8005358:	79fa      	ldrb	r2, [r7, #7]
 800535a:	4613      	mov	r3, r2
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	461a      	mov	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4413      	add	r3, r2
 8005368:	f021 0204 	bic.w	r2, r1, #4
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	71fb      	strb	r3, [r7, #7]
 8005388:	4613      	mov	r3, r2
 800538a:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 800538c:	79bb      	ldrb	r3, [r7, #6]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d015      	beq.n	80053be <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8005392:	79fa      	ldrb	r2, [r7, #7]
 8005394:	4613      	mov	r3, r2
 8005396:	019b      	lsls	r3, r3, #6
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	461a      	mov	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	4413      	add	r3, r2
 80053a2:	7819      	ldrb	r1, [r3, #0]
 80053a4:	79fa      	ldrb	r2, [r7, #7]
 80053a6:	4613      	mov	r3, r2
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	461a      	mov	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	f041 0201 	orr.w	r2, r1, #1
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 80053bc:	e014      	b.n	80053e8 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 80053be:	79fa      	ldrb	r2, [r7, #7]
 80053c0:	4613      	mov	r3, r2
 80053c2:	019b      	lsls	r3, r3, #6
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	461a      	mov	r2, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	4413      	add	r3, r2
 80053ce:	7819      	ldrb	r1, [r3, #0]
 80053d0:	79fa      	ldrb	r2, [r7, #7]
 80053d2:	4613      	mov	r3, r2
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	461a      	mov	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	f021 0201 	bic.w	r2, r1, #1
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e043      	b.n	8005490 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	4613      	mov	r3, r2
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4413      	add	r3, r2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3303      	adds	r3, #3
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	b25b      	sxtb	r3, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005438:	7bfa      	ldrb	r2, [r7, #15]
 800543a:	4613      	mov	r3, r2
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 8005448:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e01d      	b.n	800548a <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	4613      	mov	r3, r2
 8005452:	019b      	lsls	r3, r3, #6
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	3303      	adds	r3, #3
 8005466:	2101      	movs	r1, #1
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	b25b      	sxtb	r3, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	b25b      	sxtb	r3, r3
 8005472:	4013      	ands	r3, r2
 8005474:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	4613      	mov	r3, r2
 800547a:	019b      	lsls	r3, r3, #6
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8005486:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005488:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b04      	cmp	r3, #4
 8005494:	ddb8      	ble.n	8005408 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e041      	b.n	800553c <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	4613      	mov	r3, r2
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4413      	add	r3, r2
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	b25a      	sxtb	r2, r3
 80054d8:	2101      	movs	r1, #1
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b259      	sxtb	r1, r3
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	4613      	mov	r3, r2
 80054ea:	019b      	lsls	r3, r3, #6
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	b2ca      	uxtb	r2, r1
 80054f8:	711a      	strb	r2, [r3, #4]
 80054fa:	e01c      	b.n	8005536 <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	4613      	mov	r3, r2
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	461a      	mov	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4413      	add	r3, r2
 800550c:	791b      	ldrb	r3, [r3, #4]
 800550e:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8005510:	2101      	movs	r1, #1
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	b25b      	sxtb	r3, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	b25b      	sxtb	r3, r3
 800551e:	4013      	ands	r3, r2
 8005520:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	4613      	mov	r3, r2
 8005526:	019b      	lsls	r3, r3, #6
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8005532:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005534:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3301      	adds	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b07      	cmp	r3, #7
 8005540:	ddba      	ble.n	80054b8 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e042      	b.n	80055ce <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3308      	adds	r3, #8
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01b      	beq.n	800558e <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	4613      	mov	r3, r2
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4413      	add	r3, r2
 8005566:	795b      	ldrb	r3, [r3, #5]
 8005568:	b25a      	sxtb	r2, r3
 800556a:	2101      	movs	r1, #1
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	b25b      	sxtb	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b259      	sxtb	r1, r3
 8005578:	7bfa      	ldrb	r2, [r7, #15]
 800557a:	4613      	mov	r3, r2
 800557c:	019b      	lsls	r3, r3, #6
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4413      	add	r3, r2
 8005588:	b2ca      	uxtb	r2, r1
 800558a:	715a      	strb	r2, [r3, #5]
 800558c:	e01c      	b.n	80055c8 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	4613      	mov	r3, r2
 8005592:	019b      	lsls	r3, r3, #6
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	461a      	mov	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4413      	add	r3, r2
 800559e:	795b      	ldrb	r3, [r3, #5]
 80055a0:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 80055a2:	2101      	movs	r1, #1
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	4013      	ands	r3, r2
 80055b2:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80055b4:	7bfa      	ldrb	r2, [r7, #15]
 80055b6:	4613      	mov	r3, r2
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	461a      	mov	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80055c4:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80055c6:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	3301      	adds	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	ddb9      	ble.n	8005548 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	4603      	mov	r3, r0
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e043      	b.n	800567e <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01c      	beq.n	800563c <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	4613      	mov	r3, r2
 8005606:	019b      	lsls	r3, r3, #6
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	461a      	mov	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	795b      	ldrb	r3, [r3, #5]
 8005614:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3304      	adds	r3, #4
 800561a:	2101      	movs	r1, #1
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	b25b      	sxtb	r3, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	4613      	mov	r3, r2
 800562a:	019b      	lsls	r3, r3, #6
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	461a      	mov	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 8005636:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005638:	715a      	strb	r2, [r3, #5]
 800563a:	e01d      	b.n	8005678 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	4613      	mov	r3, r2
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4413      	add	r3, r2
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3304      	adds	r3, #4
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	b25b      	sxtb	r3, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	b25b      	sxtb	r3, r3
 8005660:	4013      	ands	r3, r2
 8005662:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	4613      	mov	r3, r2
 8005668:	019b      	lsls	r3, r3, #6
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8005674:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005676:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3301      	adds	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b03      	cmp	r3, #3
 8005682:	ddb8      	ble.n	80055f6 <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	4603      	mov	r3, r0
 800569a:	6039      	str	r1, [r7, #0]
 800569c:	71fb      	strb	r3, [r7, #7]
 800569e:	4613      	mov	r3, r2
 80056a0:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 80056a2:	88bb      	ldrh	r3, [r7, #4]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80056ac:	79fa      	ldrb	r2, [r7, #7]
 80056ae:	4613      	mov	r3, r2
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	461a      	mov	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	89fa      	ldrh	r2, [r7, #14]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 80056c2:	79fa      	ldrb	r2, [r7, #7]
 80056c4:	4613      	mov	r3, r2
 80056c6:	019b      	lsls	r3, r3, #6
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	461a      	mov	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	7899      	ldrb	r1, [r3, #2]
 80056d4:	79fa      	ldrb	r2, [r7, #7]
 80056d6:	4613      	mov	r3, r2
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	461a      	mov	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4413      	add	r3, r2
 80056e4:	f021 020f 	bic.w	r2, r1, #15
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80056ec:	79fa      	ldrb	r2, [r7, #7]
 80056ee:	4613      	mov	r3, r2
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	461a      	mov	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4413      	add	r3, r2
 80056fc:	789b      	ldrb	r3, [r3, #2]
 80056fe:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	b25b      	sxtb	r3, r3
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	b25b      	sxtb	r3, r3
 800570e:	4313      	orrs	r3, r2
 8005710:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005712:	79fa      	ldrb	r2, [r7, #7]
 8005714:	4613      	mov	r3, r2
 8005716:	019b      	lsls	r3, r3, #6
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	461a      	mov	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 8005722:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005724:	709a      	strb	r2, [r3, #2]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	4603      	mov	r3, r0
 800573a:	6039      	str	r1, [r7, #0]
 800573c:	71fb      	strb	r3, [r7, #7]
 800573e:	4613      	mov	r3, r2
 8005740:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	b299      	uxth	r1, r3
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	4613      	mov	r3, r2
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	461a      	mov	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	4413      	add	r3, r2
 800575e:	b2ca      	uxtb	r2, r1
 8005760:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	4613      	mov	r3, r2
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	461a      	mov	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	4413      	add	r3, r2
 8005772:	7899      	ldrb	r1, [r3, #2]
 8005774:	79fa      	ldrb	r2, [r7, #7]
 8005776:	4613      	mov	r3, r2
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	461a      	mov	r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f001 020f 	and.w	r2, r1, #15
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800578c:	79fa      	ldrb	r2, [r7, #7]
 800578e:	4613      	mov	r3, r2
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	461a      	mov	r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4413      	add	r3, r2
 800579c:	789b      	ldrb	r3, [r3, #2]
 800579e:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057aa:	79fa      	ldrb	r2, [r7, #7]
 80057ac:	4613      	mov	r3, r2
 80057ae:	019b      	lsls	r3, r3, #6
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	461a      	mov	r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 80057ba:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057bc:	709a      	strb	r2, [r3, #2]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057d6:	4805      	ldr	r0, [pc, #20]	@ (80057ec <cs_low+0x20>)
 80057d8:	f003 fbdc 	bl	8008f94 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 80057dc:	2201      	movs	r2, #1
 80057de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057e2:	4803      	ldr	r0, [pc, #12]	@ (80057f0 <cs_low+0x24>)
 80057e4:	f003 fbd6 	bl	8008f94 <HAL_GPIO_WritePin>


}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40020400 	.word	0x40020400
 80057f0:	40020c00 	.word	0x40020c00

080057f4 <cs_high>:

void cs_high() {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80057f8:	2201      	movs	r2, #1
 80057fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057fe:	4805      	ldr	r0, [pc, #20]	@ (8005814 <cs_high+0x20>)
 8005800:	f003 fbc8 	bl	8008f94 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8005804:	2201      	movs	r2, #1
 8005806:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800580a:	4803      	ldr	r0, [pc, #12]	@ (8005818 <cs_high+0x24>)
 800580c:	f003 fbc2 	bl	8008f94 <HAL_GPIO_WritePin>


}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40020400 	.word	0x40020400
 8005818:	40020c00 	.word	0x40020c00

0800581c <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	60bb      	str	r3, [r7, #8]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e003      	b.n	800583c <delay_time_us+0x20>
			time_delay_count++) {
		__NOP();
 8005834:	bf00      	nop
			time_delay_count++) {
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d3f7      	bcc.n	8005834 <delay_time_us+0x18>
	}
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e00f      	b.n	8005886 <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	18d1      	adds	r1, r2, r3
 800586c:	2314      	movs	r3, #20
 800586e:	2201      	movs	r2, #1
 8005870:	4809      	ldr	r0, [pc, #36]	@ (8005898 <spi_write_array+0x44>)
 8005872:	f005 f9ac 	bl	800abce <HAL_SPI_Transmit>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 800587c:	f001 ffc4 	bl	8007808 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	3301      	adds	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	429a      	cmp	r2, r3
 800588c:	d3eb      	bcc.n	8005866 <spi_write_array+0x12>
		}
	}

}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20001a80 	.word	0x20001a80

0800589c <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	461a      	mov	r2, r3
 80058a8:	460b      	mov	r3, r1
 80058aa:	72fb      	strb	r3, [r7, #11]
 80058ac:	4613      	mov	r3, r2
 80058ae:	72bb      	strb	r3, [r7, #10]
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 80058b0:	7afb      	ldrb	r3, [r7, #11]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	2314      	movs	r3, #20
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	4812      	ldr	r0, [pc, #72]	@ (8005904 <spi_write_read+0x68>)
 80058ba:	f005 f988 	bl	800abce <HAL_SPI_Transmit>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b11      	ldr	r3, [pc, #68]	@ (8005908 <spi_write_read+0x6c>)
 80058c4:	701a      	strb	r2, [r3, #0]
	rx_len_local = rx_len;
 80058c6:	4a11      	ldr	r2, [pc, #68]	@ (800590c <spi_write_read+0x70>)
 80058c8:	7abb      	ldrb	r3, [r7, #10]
 80058ca:	7013      	strb	r3, [r2, #0]
	if (status_spi_out != HAL_OK) {
 80058cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <spi_write_read+0x6c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <spi_write_read+0x3c>

		Error_Handler();
 80058d4:	f001 ff98 	bl	8007808 <Error_Handler>
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 80058d8:	7abb      	ldrb	r3, [r7, #10]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	2314      	movs	r3, #20
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4808      	ldr	r0, [pc, #32]	@ (8005904 <spi_write_read+0x68>)
 80058e2:	f005 fab8 	bl	800ae56 <HAL_SPI_Receive>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <spi_write_read+0x74>)
 80058ec:	701a      	strb	r2, [r3, #0]
	if (status_spi_in != HAL_OK) {
 80058ee:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <spi_write_read+0x74>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <spi_write_read+0x5e>

		Error_Handler();
 80058f6:	f001 ff87 	bl	8007808 <Error_Handler>
	}

}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20001a80 	.word	0x20001a80
 8005908:	20001295 	.word	0x20001295
 800590c:	20001294 	.word	0x20001294
 8005910:	20001296 	.word	0x20001296

08005914 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 800591e:	f107 020f 	add.w	r2, r7, #15
 8005922:	1df9      	adds	r1, r7, #7
 8005924:	2314      	movs	r3, #20
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2301      	movs	r3, #1
 800592a:	4806      	ldr	r0, [pc, #24]	@ (8005944 <spi_read_byte+0x30>)
 800592c:	f005 fbac 	bl	800b088 <HAL_SPI_TransmitReceive>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <spi_read_byte+0x26>
		Error_Handler();
 8005936:	f001 ff67 	bl	8007808 <Error_Handler>
	}
	return (data);
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20001a80 	.word	0x20001a80

08005948 <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	int8_t error = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	717b      	strb	r3, [r7, #5]
	wakeup_sleep(TOTAL_IC);
 8005952:	2002      	movs	r0, #2
 8005954:	f7fe fea0 	bl	8004698 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8005958:	2302      	movs	r3, #2
 800595a:	2100      	movs	r1, #0
 800595c:	2200      	movs	r2, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fe2a 	bl	80045b8 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8005964:	f7fe fe52 	bl	800460c <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8005968:	2002      	movs	r0, #2
 800596a:	f7fe fe95 	bl	8004698 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 800596e:	2300      	movs	r3, #0
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <cell_voltage_read+0x90>)
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fe32 	bl	80045de <LTC6811_rdcv>
 800597a:	4603      	mov	r3, r0
 800597c:	717b      	strb	r3, [r7, #5]
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 800597e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d121      	bne.n	80059cc <cell_voltage_read+0x84>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005988:	2300      	movs	r3, #0
 800598a:	71bb      	strb	r3, [r7, #6]
 800598c:	e01b      	b.n	80059c6 <cell_voltage_read+0x7e>
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 800598e:	2300      	movs	r3, #0
 8005990:	71fb      	strb	r3, [r7, #7]
 8005992:	e00f      	b.n	80059b4 <cell_voltage_read+0x6c>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8005994:	79ba      	ldrb	r2, [r7, #6]
 8005996:	79f9      	ldrb	r1, [r7, #7]
 8005998:	480f      	ldr	r0, [pc, #60]	@ (80059d8 <cell_voltage_read+0x90>)
 800599a:	4613      	mov	r3, r2
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	4413      	add	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	440b      	add	r3, r1
 80059a4:	330c      	adds	r3, #12
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4403      	add	r3, r0
 80059aa:	2200      	movs	r2, #0
 80059ac:	80da      	strh	r2, [r3, #6]
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	3301      	adds	r3, #1
 80059b2:	71fb      	strb	r3, [r7, #7]
 80059b4:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <cell_voltage_read+0x90>)
 80059b6:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3e9      	bcc.n	8005994 <cell_voltage_read+0x4c>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 80059c0:	79bb      	ldrb	r3, [r7, #6]
 80059c2:	3301      	adds	r3, #1
 80059c4:	71bb      	strb	r3, [r7, #6]
 80059c6:	79bb      	ldrb	r3, [r7, #6]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d9e0      	bls.n	800598e <cell_voltage_read+0x46>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
 80059cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	2000107c 	.word	0x2000107c

080059dc <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc75 	bl	80062dc <crc16>
 80059f2:	4603      	mov	r3, r0
 80059f4:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	4413      	add	r3, r2
 80059fc:	89fa      	ldrh	r2, [r7, #14]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8005a02:	89fb      	ldrh	r3, [r7, #14]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	b299      	uxth	r1, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	b2ca      	uxtb	r2, r1
 8005a12:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, data, size+2, 1000);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3302      	adds	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4803      	ldr	r0, [pc, #12]	@ (8005a30 <sendData+0x54>)
 8005a24:	f006 f9e4 	bl	800bdf0 <HAL_UART_Transmit>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20001b68 	.word	0x20001b68

08005a34 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData_modbus_01[0] = RxData_modbus_01[0];       // slave ID
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <modbusException+0x38>)
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <modbusException+0x3c>)
 8005a44:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1]|0x80;  // adding 1 to the MSB of the function code
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <modbusException+0x38>)
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <modbusException+0x3c>)
 8005a52:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = exceptioncode;   // Load the Exception code
 8005a54:	4a06      	ldr	r2, [pc, #24]	@ (8005a70 <modbusException+0x3c>)
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	7093      	strb	r3, [r2, #2]
	sendData(TxData_modbus_01, 3);         // send Data... CRC will be calculated in the function
 8005a5a:	2103      	movs	r1, #3
 8005a5c:	4804      	ldr	r0, [pc, #16]	@ (8005a70 <modbusException+0x3c>)
 8005a5e:	f7ff ffbd 	bl	80059dc <sendData>
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200012c4 	.word	0x200012c4
 8005a70:	200013c4 	.word	0x200013c4

08005a74 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005a7a:	4b34      	ldr	r3, [pc, #208]	@ (8005b4c <readHoldingRegs+0xd8>)
 8005a7c:	789b      	ldrb	r3, [r3, #2]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	b21a      	sxth	r2, r3
 8005a82:	4b32      	ldr	r3, [pc, #200]	@ (8005b4c <readHoldingRegs+0xd8>)
 8005a84:	78db      	ldrb	r3, [r3, #3]
 8005a86:	b21b      	sxth	r3, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 8005a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b4c <readHoldingRegs+0xd8>)
 8005a90:	791b      	ldrb	r3, [r3, #4]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	b21a      	sxth	r2, r3
 8005a96:	4b2d      	ldr	r3, [pc, #180]	@ (8005b4c <readHoldingRegs+0xd8>)
 8005a98:	795b      	ldrb	r3, [r3, #5]
 8005a9a:	b21b      	sxth	r3, r3
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b21b      	sxth	r3, r3
 8005aa0:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <readHoldingRegs+0x3a>
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	2b7d      	cmp	r3, #125	@ 0x7d
 8005aac:	d904      	bls.n	8005ab8 <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005aae:	2003      	movs	r0, #3
 8005ab0:	f7ff ffc0 	bl	8005a34 <modbusException>
		return 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e044      	b.n	8005b42 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8005ab8:	89fa      	ldrh	r2, [r7, #14]
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	4413      	add	r3, r2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8005ac4:	883b      	ldrh	r3, [r7, #0]
 8005ac6:	2b31      	cmp	r3, #49	@ 0x31
 8005ac8:	d904      	bls.n	8005ad4 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005aca:	2002      	movs	r0, #2
 8005acc:	f7ff ffb2 	bl	8005a34 <modbusException>
		return 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e036      	b.n	8005b42 <readHoldingRegs+0xce>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005ada:	4b1c      	ldr	r3, [pc, #112]	@ (8005b4c <readHoldingRegs+0xd8>)
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005ae0:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = numRegs*2;  // Byte count
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	4b19      	ldr	r3, [pc, #100]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005aec:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 8005aee:	2303      	movs	r3, #3
 8005af0:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	e01b      	b.n	8005b30 <readHoldingRegs+0xbc>
	{
		TxData_modbus_01[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	4a16      	ldr	r2, [pc, #88]	@ (8005b54 <readHoldingRegs+0xe0>)
 8005afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	b299      	uxth	r1, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	60ba      	str	r2, [r7, #8]
 8005b0a:	b2c9      	uxtb	r1, r1
 8005b0c:	4a10      	ldr	r2, [pc, #64]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005b0e:	54d1      	strb	r1, [r2, r3]
		TxData_modbus_01[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8005b10:	89fb      	ldrh	r3, [r7, #14]
 8005b12:	4a10      	ldr	r2, [pc, #64]	@ (8005b54 <readHoldingRegs+0xe0>)
 8005b14:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	60ba      	str	r2, [r7, #8]
 8005b1e:	b2c9      	uxtb	r1, r1
 8005b20:	4a0b      	ldr	r2, [pc, #44]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005b22:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	3301      	adds	r3, #1
 8005b28:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	dbdf      	blt.n	8005af8 <readHoldingRegs+0x84>
	}

	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4805      	ldr	r0, [pc, #20]	@ (8005b50 <readHoldingRegs+0xdc>)
 8005b3c:	f7ff ff4e 	bl	80059dc <sendData>
	return 1;   // success
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200012c4 	.word	0x200012c4
 8005b50:	200013c4 	.word	0x200013c4
 8005b54:	20000914 	.word	0x20000914

08005b58 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005b5e:	4b34      	ldr	r3, [pc, #208]	@ (8005c30 <readInputRegs+0xd8>)
 8005b60:	789b      	ldrb	r3, [r3, #2]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	b21a      	sxth	r2, r3
 8005b66:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <readInputRegs+0xd8>)
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	b21b      	sxth	r3, r3
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 8005b72:	4b2f      	ldr	r3, [pc, #188]	@ (8005c30 <readInputRegs+0xd8>)
 8005b74:	791b      	ldrb	r3, [r3, #4]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	b21a      	sxth	r2, r3
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c30 <readInputRegs+0xd8>)
 8005b7c:	795b      	ldrb	r3, [r3, #5]
 8005b7e:	b21b      	sxth	r3, r3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b21b      	sxth	r3, r3
 8005b84:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8005b86:	887b      	ldrh	r3, [r7, #2]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <readInputRegs+0x3a>
 8005b8c:	887b      	ldrh	r3, [r7, #2]
 8005b8e:	2b7d      	cmp	r3, #125	@ 0x7d
 8005b90:	d904      	bls.n	8005b9c <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005b92:	2003      	movs	r0, #3
 8005b94:	f7ff ff4e 	bl	8005a34 <modbusException>
		return 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e044      	b.n	8005c26 <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8005b9c:	89fa      	ldrh	r2, [r7, #14]
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8005ba8:	883b      	ldrh	r3, [r7, #0]
 8005baa:	2b31      	cmp	r3, #49	@ 0x31
 8005bac:	d904      	bls.n	8005bb8 <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f7ff ff40 	bl	8005a34 <modbusException>
		return 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e036      	b.n	8005c26 <readInputRegs+0xce>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c34 <readInputRegs+0xdc>)
 8005bba:	2207      	movs	r2, #7
 8005bbc:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005c30 <readInputRegs+0xd8>)
 8005bc0:	785a      	ldrb	r2, [r3, #1]
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c34 <readInputRegs+0xdc>)
 8005bc4:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = numRegs*2;  // Byte count
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4b19      	ldr	r3, [pc, #100]	@ (8005c34 <readInputRegs+0xdc>)
 8005bd0:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e01b      	b.n	8005c14 <readInputRegs+0xbc>
	{
		TxData_modbus_01[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8005bdc:	89fb      	ldrh	r3, [r7, #14]
 8005bde:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <readInputRegs+0xe0>)
 8005be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	b299      	uxth	r1, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	60ba      	str	r2, [r7, #8]
 8005bee:	b2c9      	uxtb	r1, r1
 8005bf0:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <readInputRegs+0xdc>)
 8005bf2:	54d1      	strb	r1, [r2, r3]
		TxData_modbus_01[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	4a10      	ldr	r2, [pc, #64]	@ (8005c38 <readInputRegs+0xe0>)
 8005bf8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	60ba      	str	r2, [r7, #8]
 8005c02:	b2c9      	uxtb	r1, r1
 8005c04:	4a0b      	ldr	r2, [pc, #44]	@ (8005c34 <readInputRegs+0xdc>)
 8005c06:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3301      	adds	r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	887b      	ldrh	r3, [r7, #2]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	dbdf      	blt.n	8005bdc <readInputRegs+0x84>
	}

	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	4805      	ldr	r0, [pc, #20]	@ (8005c34 <readInputRegs+0xdc>)
 8005c20:	f7ff fedc 	bl	80059dc <sendData>
	return 1;   // success
 8005c24:	2301      	movs	r3, #1
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200012c4 	.word	0x200012c4
 8005c34:	200013c4 	.word	0x200013c4
 8005c38:	0800e48c 	.word	0x0800e48c

08005c3c <readCoils>:

uint8_t readCoils (void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 8005c42:	4b52      	ldr	r3, [pc, #328]	@ (8005d8c <readCoils+0x150>)
 8005c44:	789b      	ldrb	r3, [r3, #2]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	b21a      	sxth	r2, r3
 8005c4a:	4b50      	ldr	r3, [pc, #320]	@ (8005d8c <readCoils+0x150>)
 8005c4c:	78db      	ldrb	r3, [r3, #3]
 8005c4e:	b21b      	sxth	r3, r3
 8005c50:	4313      	orrs	r3, r2
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 8005c56:	4b4d      	ldr	r3, [pc, #308]	@ (8005d8c <readCoils+0x150>)
 8005c58:	791b      	ldrb	r3, [r3, #4]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	b21a      	sxth	r2, r3
 8005c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d8c <readCoils+0x150>)
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	4313      	orrs	r3, r2
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8005c6a:	893b      	ldrh	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <readCoils+0x3c>
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005c76:	d904      	bls.n	8005c82 <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005c78:	2003      	movs	r0, #3
 8005c7a:	f7ff fedb 	bl	8005a34 <modbusException>
		return 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e080      	b.n	8005d84 <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8005c82:	897a      	ldrh	r2, [r7, #10]
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c92:	d904      	bls.n	8005c9e <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005c94:	2002      	movs	r0, #2
 8005c96:	f7ff fecd 	bl	8005a34 <modbusException>
		return 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e072      	b.n	8005d84 <readCoils+0x148>
	}


	//reset TxData_modbus_01 buffer
	memset (TxData_modbus_01, '\0', 256);
 8005c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	483a      	ldr	r0, [pc, #232]	@ (8005d90 <readCoils+0x154>)
 8005ca6:	f007 fa63 	bl	800d170 <memset>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 8005caa:	4b39      	ldr	r3, [pc, #228]	@ (8005d90 <readCoils+0x154>)
 8005cac:	2207      	movs	r2, #7
 8005cae:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005cb0:	4b36      	ldr	r3, [pc, #216]	@ (8005d8c <readCoils+0x150>)
 8005cb2:	785a      	ldrb	r2, [r3, #1]
 8005cb4:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <readCoils+0x154>)
 8005cb6:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	893a      	ldrh	r2, [r7, #8]
 8005cc2:	f002 0207 	and.w	r2, r2, #7
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	bf14      	ite	ne
 8005ccc:	2201      	movne	r2, #1
 8005cce:	2200      	moveq	r2, #0
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8005d90 <readCoils+0x154>)
 8005cd8:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 8005cda:	2303      	movs	r3, #3
 8005cdc:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData_modbus_01
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8005cde:	897b      	ldrh	r3, [r7, #10]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8005ce6:	897b      	ldrh	r3, [r7, #10]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData_modbus_01 buffer
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData_modbus_01 buffer
	for (int i=0; i<numCoils; i++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e033      	b.n	8005d60 <readCoils+0x124>
	{
		TxData_modbus_01[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8005cf8:	4a25      	ldr	r2, [pc, #148]	@ (8005d90 <readCoils+0x154>)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b25a      	sxtb	r2, r3
 8005d02:	4924      	ldr	r1, [pc, #144]	@ (8005d94 <readCoils+0x158>)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	440b      	add	r3, r1
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	8afb      	ldrh	r3, [r7, #22]
 8005d0e:	fa41 f303 	asr.w	r3, r1, r3
 8005d12:	f003 0101 	and.w	r1, r3, #1
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	b25b      	sxtb	r3, r3
 8005d22:	b2d9      	uxtb	r1, r3
 8005d24:	4a1a      	ldr	r2, [pc, #104]	@ (8005d90 <readCoils+0x154>)
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	3301      	adds	r3, #1
 8005d38:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b07      	cmp	r3, #7
 8005d3e:	dd04      	ble.n	8005d4a <readCoils+0x10e>
		{
			indxPosition = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
			indx++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	2b07      	cmp	r3, #7
 8005d4e:	d904      	bls.n	8005d5a <readCoils+0x11e>
		{
			bitPosition=0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	3301      	adds	r3, #1
 8005d58:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	dbc7      	blt.n	8005cf8 <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8005d68:	893b      	ldrh	r3, [r7, #8]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <readCoils+0x13e>
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005d7a:	69f9      	ldr	r1, [r7, #28]
 8005d7c:	4804      	ldr	r0, [pc, #16]	@ (8005d90 <readCoils+0x154>)
 8005d7e:	f7ff fe2d 	bl	80059dc <sendData>
	return 1;   // success
 8005d82:	2301      	movs	r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	200012c4 	.word	0x200012c4
 8005d90:	200013c4 	.word	0x200013c4
 8005d94:	20000978 	.word	0x20000978

08005d98 <readInputs>:

uint8_t readInputs (void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005d9e:	4b52      	ldr	r3, [pc, #328]	@ (8005ee8 <readInputs+0x150>)
 8005da0:	789b      	ldrb	r3, [r3, #2]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	b21a      	sxth	r2, r3
 8005da6:	4b50      	ldr	r3, [pc, #320]	@ (8005ee8 <readInputs+0x150>)
 8005da8:	78db      	ldrb	r3, [r3, #3]
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	4313      	orrs	r3, r2
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 8005db2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee8 <readInputs+0x150>)
 8005db4:	791b      	ldrb	r3, [r3, #4]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee8 <readInputs+0x150>)
 8005dbc:	795b      	ldrb	r3, [r3, #5]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8005dc6:	893b      	ldrh	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <readInputs+0x3c>
 8005dcc:	893b      	ldrh	r3, [r7, #8]
 8005dce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005dd2:	d904      	bls.n	8005dde <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005dd4:	2003      	movs	r0, #3
 8005dd6:	f7ff fe2d 	bl	8005a34 <modbusException>
		return 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e080      	b.n	8005ee0 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8005dde:	897a      	ldrh	r2, [r7, #10]
 8005de0:	893b      	ldrh	r3, [r7, #8]
 8005de2:	4413      	add	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dee:	d904      	bls.n	8005dfa <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005df0:	2002      	movs	r0, #2
 8005df2:	f7ff fe1f 	bl	8005a34 <modbusException>
		return 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e072      	b.n	8005ee0 <readInputs+0x148>
	}


	//reset TxData_modbus_01 buffer
	memset (TxData_modbus_01, '\0', 256);
 8005dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dfe:	2100      	movs	r1, #0
 8005e00:	483a      	ldr	r0, [pc, #232]	@ (8005eec <readInputs+0x154>)
 8005e02:	f007 f9b5 	bl	800d170 <memset>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 8005e06:	4b39      	ldr	r3, [pc, #228]	@ (8005eec <readInputs+0x154>)
 8005e08:	2207      	movs	r2, #7
 8005e0a:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005e0c:	4b36      	ldr	r3, [pc, #216]	@ (8005ee8 <readInputs+0x150>)
 8005e0e:	785a      	ldrb	r2, [r3, #1]
 8005e10:	4b36      	ldr	r3, [pc, #216]	@ (8005eec <readInputs+0x154>)
 8005e12:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	893a      	ldrh	r2, [r7, #8]
 8005e1e:	f002 0207 	and.w	r2, r2, #7
 8005e22:	b292      	uxth	r2, r2
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	bf14      	ite	ne
 8005e28:	2201      	movne	r2, #1
 8005e2a:	2200      	moveq	r2, #0
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	4413      	add	r3, r2
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b2e      	ldr	r3, [pc, #184]	@ (8005eec <readInputs+0x154>)
 8005e34:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 8005e36:	2303      	movs	r3, #3
 8005e38:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData_modbus_01
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8005e3a:	897b      	ldrh	r3, [r7, #10]
 8005e3c:	08db      	lsrs	r3, r3, #3
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData_modbus_01 buffer
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData_modbus_01 buffer
	for (int i=0; i<numCoils; i++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e033      	b.n	8005ebc <readInputs+0x124>
	{
		TxData_modbus_01[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8005e54:	4a25      	ldr	r2, [pc, #148]	@ (8005eec <readInputs+0x154>)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b25a      	sxtb	r2, r3
 8005e5e:	4924      	ldr	r1, [pc, #144]	@ (8005ef0 <readInputs+0x158>)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	440b      	add	r3, r1
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	4619      	mov	r1, r3
 8005e68:	8afb      	ldrh	r3, [r7, #22]
 8005e6a:	fa41 f303 	asr.w	r3, r1, r3
 8005e6e:	f003 0101 	and.w	r1, r3, #1
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	b2d9      	uxtb	r1, r3
 8005e80:	4a1a      	ldr	r2, [pc, #104]	@ (8005eec <readInputs+0x154>)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	460a      	mov	r2, r1
 8005e88:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	8afb      	ldrh	r3, [r7, #22]
 8005e92:	3301      	adds	r3, #1
 8005e94:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	dd04      	ble.n	8005ea6 <readInputs+0x10e>
		{
			indxPosition = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
			indx++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8005ea6:	8afb      	ldrh	r3, [r7, #22]
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	d904      	bls.n	8005eb6 <readInputs+0x11e>
		{
			bitPosition=0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	dbc7      	blt.n	8005e54 <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8005ec4:	893b      	ldrh	r3, [r7, #8]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <readInputs+0x13e>
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005ed6:	69f9      	ldr	r1, [r7, #28]
 8005ed8:	4804      	ldr	r0, [pc, #16]	@ (8005eec <readInputs+0x154>)
 8005eda:	f7ff fd7f 	bl	80059dc <sendData>
	return 1;   // success
 8005ede:	2301      	movs	r3, #1
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200012c4 	.word	0x200012c4
 8005eec:	200013c4 	.word	0x200013c4
 8005ef0:	0800e4f0 	.word	0x0800e4f0

08005ef4 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005efa:	4b38      	ldr	r3, [pc, #224]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	b21a      	sxth	r2, r3
 8005f02:	4b36      	ldr	r3, [pc, #216]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 8005f0e:	4b33      	ldr	r3, [pc, #204]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	b21a      	sxth	r2, r3
 8005f16:	4b31      	ldr	r3, [pc, #196]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005f18:	795b      	ldrb	r3, [r3, #5]
 8005f1a:	b21b      	sxth	r3, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b21b      	sxth	r3, r3
 8005f20:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <writeHoldingRegs+0x3a>
 8005f28:	887b      	ldrh	r3, [r7, #2]
 8005f2a:	2b7b      	cmp	r3, #123	@ 0x7b
 8005f2c:	d904      	bls.n	8005f38 <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005f2e:	2003      	movs	r0, #3
 8005f30:	f7ff fd80 	bl	8005a34 <modbusException>
		return 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e04c      	b.n	8005fd2 <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8005f38:	89fa      	ldrh	r2, [r7, #14]
 8005f3a:	887b      	ldrh	r3, [r7, #2]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8005f44:	883b      	ldrh	r3, [r7, #0]
 8005f46:	2b31      	cmp	r3, #49	@ 0x31
 8005f48:	d904      	bls.n	8005f54 <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f7ff fd72 	bl	8005a34 <modbusException>
		return 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e03e      	b.n	8005fd2 <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData_modbus_01[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData_modbus_01
 8005f54:	2307      	movs	r3, #7
 8005f56:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	e019      	b.n	8005f92 <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData_modbus_01[indx++]<<8)|RxData_modbus_01[indx++];
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	60ba      	str	r2, [r7, #8]
 8005f64:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005f66:	5cd3      	ldrb	r3, [r2, r3]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	b21a      	sxth	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	491a      	ldr	r1, [pc, #104]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005f74:	5ccb      	ldrb	r3, [r1, r3]
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b219      	sxth	r1, r3
 8005f7c:	89fb      	ldrh	r3, [r7, #14]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	81fa      	strh	r2, [r7, #14]
 8005f82:	461a      	mov	r2, r3
 8005f84:	b289      	uxth	r1, r1
 8005f86:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <writeHoldingRegs+0xec>)
 8005f88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	887b      	ldrh	r3, [r7, #2]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	dbe1      	blt.n	8005f5e <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 8005f9a:	4b12      	ldr	r3, [pc, #72]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005f9c:	2207      	movs	r2, #7
 8005f9e:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005fa2:	785a      	ldrb	r2, [r3, #1]
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fa6:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005faa:	789a      	ldrb	r2, [r3, #2]
 8005fac:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fae:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005fb2:	78da      	ldrb	r2, [r3, #3]
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fb6:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // num of Regs HIGH Byte
 8005fb8:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005fba:	791a      	ldrb	r2, [r3, #4]
 8005fbc:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fbe:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // num of Regs LOW Byte
 8005fc0:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <writeHoldingRegs+0xe8>)
 8005fc2:	795a      	ldrb	r2, [r3, #5]
 8005fc4:	4b07      	ldr	r3, [pc, #28]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fc6:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8005fc8:	2106      	movs	r1, #6
 8005fca:	4806      	ldr	r0, [pc, #24]	@ (8005fe4 <writeHoldingRegs+0xf0>)
 8005fcc:	f7ff fd06 	bl	80059dc <sendData>
	return 1;   // success
 8005fd0:	2301      	movs	r3, #1
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	200012c4 	.word	0x200012c4
 8005fe0:	20000914 	.word	0x20000914
 8005fe4:	200013c4 	.word	0x200013c4

08005fe8 <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005fee:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <writeSingleReg+0x88>)
 8005ff0:	789b      	ldrb	r3, [r3, #2]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	b21a      	sxth	r2, r3
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8006070 <writeSingleReg+0x88>)
 8005ff8:	78db      	ldrb	r3, [r3, #3]
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	b21b      	sxth	r3, r3
 8006000:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b31      	cmp	r3, #49	@ 0x31
 8006006:	d904      	bls.n	8006012 <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8006008:	2002      	movs	r0, #2
 800600a:	f7ff fd13 	bl	8005a34 <modbusException>
		return 0;
 800600e:	2300      	movs	r3, #0
 8006010:	e029      	b.n	8006066 <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData_modbus_01[4] and RxData_modbus_01[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData_modbus_01[4]<<8)|RxData_modbus_01[5];
 8006012:	4b17      	ldr	r3, [pc, #92]	@ (8006070 <writeSingleReg+0x88>)
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	b21a      	sxth	r2, r3
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <writeSingleReg+0x88>)
 800601c:	795b      	ldrb	r3, [r3, #5]
 800601e:	b21b      	sxth	r3, r3
 8006020:	4313      	orrs	r3, r2
 8006022:	b21a      	sxth	r2, r3
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	b291      	uxth	r1, r2
 8006028:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <writeSingleReg+0x8c>)
 800602a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 800602e:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <writeSingleReg+0x90>)
 8006030:	2207      	movs	r2, #7
 8006032:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 8006034:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <writeSingleReg+0x88>)
 8006036:	785a      	ldrb	r2, [r3, #1]
 8006038:	4b0f      	ldr	r3, [pc, #60]	@ (8006078 <writeSingleReg+0x90>)
 800603a:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 800603c:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <writeSingleReg+0x88>)
 800603e:	789a      	ldrb	r2, [r3, #2]
 8006040:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <writeSingleReg+0x90>)
 8006042:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 8006044:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <writeSingleReg+0x88>)
 8006046:	78da      	ldrb	r2, [r3, #3]
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <writeSingleReg+0x90>)
 800604a:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // Reg Data HIGH Byte
 800604c:	4b08      	ldr	r3, [pc, #32]	@ (8006070 <writeSingleReg+0x88>)
 800604e:	791a      	ldrb	r2, [r3, #4]
 8006050:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <writeSingleReg+0x90>)
 8006052:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // Reg Data LOW  Byte
 8006054:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <writeSingleReg+0x88>)
 8006056:	795a      	ldrb	r2, [r3, #5]
 8006058:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <writeSingleReg+0x90>)
 800605a:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 800605c:	2106      	movs	r1, #6
 800605e:	4806      	ldr	r0, [pc, #24]	@ (8006078 <writeSingleReg+0x90>)
 8006060:	f7ff fcbc 	bl	80059dc <sendData>
	return 1;   // success
 8006064:	2301      	movs	r3, #1
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200012c4 	.word	0x200012c4
 8006074:	20000914 	.word	0x20000914
 8006078:	200013c4 	.word	0x200013c4

0800607c <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 8006082:	4b38      	ldr	r3, [pc, #224]	@ (8006164 <writeSingleCoil+0xe8>)
 8006084:	789b      	ldrb	r3, [r3, #2]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	b21a      	sxth	r2, r3
 800608a:	4b36      	ldr	r3, [pc, #216]	@ (8006164 <writeSingleCoil+0xe8>)
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	b21b      	sxth	r3, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	b21b      	sxth	r3, r3
 8006094:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 8006096:	89fb      	ldrh	r3, [r7, #14]
 8006098:	2bc7      	cmp	r3, #199	@ 0xc7
 800609a:	d904      	bls.n	80060a6 <writeSingleCoil+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800609c:	2002      	movs	r0, #2
 800609e:	f7ff fcc9 	bl	8005a34 <modbusException>
		return 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e05a      	b.n	800615c <writeSingleCoil+0xe0>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	08db      	lsrs	r3, r3, #3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80060ae:	89fb      	ldrh	r3, [r7, #14]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData_modbus_01[4] == 0xFF) && (RxData_modbus_01[5] == 0x00))
 80060b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006164 <writeSingleCoil+0xe8>)
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	2bff      	cmp	r3, #255	@ 0xff
 80060bc:	d116      	bne.n	80060ec <writeSingleCoil+0x70>
 80060be:	4b29      	ldr	r3, [pc, #164]	@ (8006164 <writeSingleCoil+0xe8>)
 80060c0:	795b      	ldrb	r3, [r3, #5]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d112      	bne.n	80060ec <writeSingleCoil+0x70>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 80060c6:	4a28      	ldr	r2, [pc, #160]	@ (8006168 <writeSingleCoil+0xec>)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4413      	add	r3, r2
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b25a      	sxtb	r2, r3
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2101      	movs	r1, #1
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	b2d9      	uxtb	r1, r3
 80060e0:	4a21      	ldr	r2, [pc, #132]	@ (8006168 <writeSingleCoil+0xec>)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4413      	add	r3, r2
 80060e6:	460a      	mov	r2, r1
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e01b      	b.n	8006124 <writeSingleCoil+0xa8>
	}

	else if ((RxData_modbus_01[4] == 0x00) && (RxData_modbus_01[5] == 0x00))
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <writeSingleCoil+0xe8>)
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d117      	bne.n	8006124 <writeSingleCoil+0xa8>
 80060f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <writeSingleCoil+0xe8>)
 80060f6:	795b      	ldrb	r3, [r3, #5]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <writeSingleCoil+0xa8>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 80060fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <writeSingleCoil+0xec>)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4413      	add	r3, r2
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b25a      	sxtb	r2, r3
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	b25b      	sxtb	r3, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	b25b      	sxtb	r3, r3
 8006114:	4013      	ands	r3, r2
 8006116:	b25b      	sxtb	r3, r3
 8006118:	b2d9      	uxtb	r1, r3
 800611a:	4a13      	ldr	r2, [pc, #76]	@ (8006168 <writeSingleCoil+0xec>)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4413      	add	r3, r2
 8006120:	460a      	mov	r2, r1
 8006122:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 8006124:	4b11      	ldr	r3, [pc, #68]	@ (800616c <writeSingleCoil+0xf0>)
 8006126:	2207      	movs	r2, #7
 8006128:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 800612a:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <writeSingleCoil+0xe8>)
 800612c:	785a      	ldrb	r2, [r3, #1]
 800612e:	4b0f      	ldr	r3, [pc, #60]	@ (800616c <writeSingleCoil+0xf0>)
 8006130:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 8006132:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <writeSingleCoil+0xe8>)
 8006134:	789a      	ldrb	r2, [r3, #2]
 8006136:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <writeSingleCoil+0xf0>)
 8006138:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 800613a:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <writeSingleCoil+0xe8>)
 800613c:	78da      	ldrb	r2, [r3, #3]
 800613e:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <writeSingleCoil+0xf0>)
 8006140:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // Coil Data HIGH Byte
 8006142:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <writeSingleCoil+0xe8>)
 8006144:	791a      	ldrb	r2, [r3, #4]
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <writeSingleCoil+0xf0>)
 8006148:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // Coil Data LOW  Byte
 800614a:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <writeSingleCoil+0xe8>)
 800614c:	795a      	ldrb	r2, [r3, #5]
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <writeSingleCoil+0xf0>)
 8006150:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8006152:	2106      	movs	r1, #6
 8006154:	4805      	ldr	r0, [pc, #20]	@ (800616c <writeSingleCoil+0xf0>)
 8006156:	f7ff fc41 	bl	80059dc <sendData>
	return 1;   // success
 800615a:	2301      	movs	r3, #1
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	200012c4 	.word	0x200012c4
 8006168:	20000978 	.word	0x20000978
 800616c:	200013c4 	.word	0x200013c4

08006170 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 8006176:	4b56      	ldr	r3, [pc, #344]	@ (80062d0 <writeMultiCoils+0x160>)
 8006178:	789b      	ldrb	r3, [r3, #2]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	b21a      	sxth	r2, r3
 800617e:	4b54      	ldr	r3, [pc, #336]	@ (80062d0 <writeMultiCoils+0x160>)
 8006180:	78db      	ldrb	r3, [r3, #3]
 8006182:	b21b      	sxth	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b21b      	sxth	r3, r3
 8006188:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 800618a:	4b51      	ldr	r3, [pc, #324]	@ (80062d0 <writeMultiCoils+0x160>)
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	b21a      	sxth	r2, r3
 8006192:	4b4f      	ldr	r3, [pc, #316]	@ (80062d0 <writeMultiCoils+0x160>)
 8006194:	795b      	ldrb	r3, [r3, #5]
 8006196:	b21b      	sxth	r3, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	b21b      	sxth	r3, r3
 800619c:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 800619e:	893b      	ldrh	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <writeMultiCoils+0x3c>
 80061a4:	893b      	ldrh	r3, [r7, #8]
 80061a6:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80061aa:	d904      	bls.n	80061b6 <writeMultiCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80061ac:	2003      	movs	r0, #3
 80061ae:	f7ff fc41 	bl	8005a34 <modbusException>
		return 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e088      	b.n	80062c8 <writeMultiCoils+0x158>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80061b6:	897a      	ldrh	r2, [r7, #10]
 80061b8:	893b      	ldrh	r3, [r7, #8]
 80061ba:	4413      	add	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80061c6:	d904      	bls.n	80061d2 <writeMultiCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80061c8:	2002      	movs	r0, #2
 80061ca:	f7ff fc33 	bl	8005a34 <modbusException>
		return 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e07a      	b.n	80062c8 <writeMultiCoils+0x158>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80061d2:	897b      	ldrh	r3, [r7, #10]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80061da:	897b      	ldrh	r3, [r7, #10]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData_modbus_01 buffer
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData_modbus_01
 80061e6:	2307      	movs	r3, #7
 80061e8:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData_modbus_01
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e04b      	b.n	8006288 <writeMultiCoils+0x118>
	{
		if (((RxData_modbus_01[indx]>>indxPosition)&0x01) == 1)
 80061f0:	4a37      	ldr	r2, [pc, #220]	@ (80062d0 <writeMultiCoils+0x160>)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4413      	add	r3, r2
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	fa42 f303 	asr.w	r3, r2, r3
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <writeMultiCoils+0xbe>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 8006208:	4a32      	ldr	r2, [pc, #200]	@ (80062d4 <writeMultiCoils+0x164>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b25a      	sxtb	r2, r3
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	b25b      	sxtb	r3, r3
 800621c:	4313      	orrs	r3, r2
 800621e:	b25b      	sxtb	r3, r3
 8006220:	b2d9      	uxtb	r1, r3
 8006222:	4a2c      	ldr	r2, [pc, #176]	@ (80062d4 <writeMultiCoils+0x164>)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	460a      	mov	r2, r1
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e013      	b.n	8006256 <writeMultiCoils+0xe6>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 800622e:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <writeMultiCoils+0x164>)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25a      	sxtb	r2, r3
 8006238:	8b7b      	ldrh	r3, [r7, #26]
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	b25b      	sxtb	r3, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	b25b      	sxtb	r3, r3
 8006246:	4013      	ands	r3, r2
 8006248:	b25b      	sxtb	r3, r3
 800624a:	b2d9      	uxtb	r1, r3
 800624c:	4a21      	ldr	r2, [pc, #132]	@ (80062d4 <writeMultiCoils+0x164>)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	460a      	mov	r2, r1
 8006254:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 8006256:	8b7b      	ldrh	r3, [r7, #26]
 8006258:	3301      	adds	r3, #1
 800625a:	837b      	strh	r3, [r7, #26]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	3301      	adds	r3, #1
 8006260:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b07      	cmp	r3, #7
 8006266:	dd04      	ble.n	8006272 <writeMultiCoils+0x102>
		{
			indxPosition = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
			indx++;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3301      	adds	r3, #1
 8006270:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	2b07      	cmp	r3, #7
 8006276:	d904      	bls.n	8006282 <writeMultiCoils+0x112>
		{
			bitPosition=0;
 8006278:	2300      	movs	r3, #0
 800627a:	837b      	strh	r3, [r7, #26]
			startByte++;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	893b      	ldrh	r3, [r7, #8]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	429a      	cmp	r2, r3
 800628e:	dbaf      	blt.n	80061f0 <writeMultiCoils+0x80>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 8006290:	4b11      	ldr	r3, [pc, #68]	@ (80062d8 <writeMultiCoils+0x168>)
 8006292:	2207      	movs	r2, #7
 8006294:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 8006296:	4b0e      	ldr	r3, [pc, #56]	@ (80062d0 <writeMultiCoils+0x160>)
 8006298:	785a      	ldrb	r2, [r3, #1]
 800629a:	4b0f      	ldr	r3, [pc, #60]	@ (80062d8 <writeMultiCoils+0x168>)
 800629c:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 800629e:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <writeMultiCoils+0x160>)
 80062a0:	789a      	ldrb	r2, [r3, #2]
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <writeMultiCoils+0x168>)
 80062a4:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 80062a6:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <writeMultiCoils+0x160>)
 80062a8:	78da      	ldrb	r2, [r3, #3]
 80062aa:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <writeMultiCoils+0x168>)
 80062ac:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // num of coils HIGH Byte
 80062ae:	4b08      	ldr	r3, [pc, #32]	@ (80062d0 <writeMultiCoils+0x160>)
 80062b0:	791a      	ldrb	r2, [r3, #4]
 80062b2:	4b09      	ldr	r3, [pc, #36]	@ (80062d8 <writeMultiCoils+0x168>)
 80062b4:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // num of coils LOW  Byte
 80062b6:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <writeMultiCoils+0x160>)
 80062b8:	795a      	ldrb	r2, [r3, #5]
 80062ba:	4b07      	ldr	r3, [pc, #28]	@ (80062d8 <writeMultiCoils+0x168>)
 80062bc:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 80062be:	2106      	movs	r1, #6
 80062c0:	4805      	ldr	r0, [pc, #20]	@ (80062d8 <writeMultiCoils+0x168>)
 80062c2:	f7ff fb8b 	bl	80059dc <sendData>
	return 1;   // success
 80062c6:	2301      	movs	r3, #1
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200012c4 	.word	0x200012c4
 80062d4:	20000978 	.word	0x20000978
 80062d8:	200013c4 	.word	0x200013c4

080062dc <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80062e8:	23ff      	movs	r3, #255	@ 0xff
 80062ea:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80062ec:	23ff      	movs	r3, #255	@ 0xff
 80062ee:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80062f0:	e013      	b.n	800631a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	781a      	ldrb	r2, [r3, #0]
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	4053      	eors	r3, r2
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8006302:	4a0f      	ldr	r2, [pc, #60]	@ (8006340 <crc16+0x64>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4413      	add	r3, r2
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	4053      	eors	r3, r2
 800630e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8006310:	4a0c      	ldr	r2, [pc, #48]	@ (8006344 <crc16+0x68>)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800631a:	887b      	ldrh	r3, [r7, #2]
 800631c:	1e5a      	subs	r2, r3, #1
 800631e:	807a      	strh	r2, [r7, #2]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	b21a      	sxth	r2, r3
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	b21b      	sxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b21b      	sxth	r3, r3
 8006332:	b29b      	uxth	r3, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	0800e50c 	.word	0x0800e50c
 8006344:	0800e60c 	.word	0x0800e60c

08006348 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	2301      	movs	r3, #1
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	1dfb      	adds	r3, r7, #7
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2301      	movs	r3, #1
 800635e:	2200      	movs	r2, #0
 8006360:	21df      	movs	r1, #223	@ 0xdf
 8006362:	4848      	ldr	r0, [pc, #288]	@ (8006484 <RTC_Init+0x13c>)
 8006364:	f003 f8a0 	bl	80094a8 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636e:	b2db      	uxtb	r3, r3
 8006370:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	2301      	movs	r3, #1
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	1dfb      	adds	r3, r7, #7
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2301      	movs	r3, #1
 8006382:	2200      	movs	r2, #0
 8006384:	21df      	movs	r1, #223	@ 0xdf
 8006386:	483f      	ldr	r0, [pc, #252]	@ (8006484 <RTC_Init+0x13c>)
 8006388:	f002 ff94 	bl	80092b4 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 800638c:	200a      	movs	r0, #10
 800638e:	f001 ff59 	bl	8008244 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	9302      	str	r3, [sp, #8]
 8006398:	2301      	movs	r3, #1
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	1dfb      	adds	r3, r7, #7
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2301      	movs	r3, #1
 80063a2:	2203      	movs	r2, #3
 80063a4:	21df      	movs	r1, #223	@ 0xdf
 80063a6:	4837      	ldr	r0, [pc, #220]	@ (8006484 <RTC_Init+0x13c>)
 80063a8:	f003 f87e 	bl	80094a8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	f043 0308 	orr.w	r3, r3, #8
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	2301      	movs	r3, #1
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	1dfb      	adds	r3, r7, #7
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2301      	movs	r3, #1
 80063c6:	2203      	movs	r2, #3
 80063c8:	21df      	movs	r1, #223	@ 0xdf
 80063ca:	482e      	ldr	r0, [pc, #184]	@ (8006484 <RTC_Init+0x13c>)
 80063cc:	f002 ff72 	bl	80092b4 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	2301      	movs	r3, #1
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	1dfb      	adds	r3, r7, #7
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2301      	movs	r3, #1
 80063e0:	2200      	movs	r2, #0
 80063e2:	21df      	movs	r1, #223	@ 0xdf
 80063e4:	4827      	ldr	r0, [pc, #156]	@ (8006484 <RTC_Init+0x13c>)
 80063e6:	f003 f85f 	bl	80094a8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	2301      	movs	r3, #1
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	1dfb      	adds	r3, r7, #7
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2301      	movs	r3, #1
 8006404:	2200      	movs	r2, #0
 8006406:	21df      	movs	r1, #223	@ 0xdf
 8006408:	481e      	ldr	r0, [pc, #120]	@ (8006484 <RTC_Init+0x13c>)
 800640a:	f002 ff53 	bl	80092b4 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	2301      	movs	r3, #1
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2301      	movs	r3, #1
 800641e:	2203      	movs	r2, #3
 8006420:	21df      	movs	r1, #223	@ 0xdf
 8006422:	4818      	ldr	r0, [pc, #96]	@ (8006484 <RTC_Init+0x13c>)
 8006424:	f003 f840 	bl	80094a8 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ed      	beq.n	800640e <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	9302      	str	r3, [sp, #8]
 8006438:	2301      	movs	r3, #1
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	1dfb      	adds	r3, r7, #7
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2301      	movs	r3, #1
 8006442:	2203      	movs	r2, #3
 8006444:	21df      	movs	r1, #223	@ 0xdf
 8006446:	480f      	ldr	r0, [pc, #60]	@ (8006484 <RTC_Init+0x13c>)
 8006448:	f003 f82e 	bl	80094a8 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d011      	beq.n	800647a <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	b2db      	uxtb	r3, r3
 800645e:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	2301      	movs	r3, #1
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	1dfb      	adds	r3, r7, #7
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2301      	movs	r3, #1
 8006470:	2203      	movs	r2, #3
 8006472:	21df      	movs	r1, #223	@ 0xdf
 8006474:	4803      	ldr	r0, [pc, #12]	@ (8006484 <RTC_Init+0x13c>)
 8006476:	f002 ff1d 	bl	80092b4 <HAL_I2C_Mem_Write>
    }
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000187c 	.word	0x2000187c

08006488 <RS485_ProcessMessage>:
            current_message.data[current_message.length++] = byte;
        }
    }
}

void RS485_ProcessMessage(void) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
    count_1 = 1;
 800648e:	4b36      	ldr	r3, [pc, #216]	@ (8006568 <RS485_ProcessMessage+0xe0>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]
    HAL_Delay(1000);
 8006494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006498:	f001 fed4 	bl	8008244 <HAL_Delay>

    if (RxData_modbus_01[0] == 0x04) {
 800649c:	4b33      	ldr	r3, [pc, #204]	@ (800656c <RS485_ProcessMessage+0xe4>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d15c      	bne.n	800655e <RS485_ProcessMessage+0xd6>
        count_1 = 2;
 80064a4:	4b30      	ldr	r3, [pc, #192]	@ (8006568 <RS485_ProcessMessage+0xe0>)
 80064a6:	2202      	movs	r2, #2
 80064a8:	601a      	str	r2, [r3, #0]
        HAL_Delay(1000);
 80064aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80064ae:	f001 fec9 	bl	8008244 <HAL_Delay>

        uint8_t num_sequences = RxData_modbus_01[1];
 80064b2:	4b2e      	ldr	r3, [pc, #184]	@ (800656c <RS485_ProcessMessage+0xe4>)
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	76fb      	strb	r3, [r7, #27]
        int current_pos = 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
        current_message.length = 10 ;
 80064bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006570 <RS485_ProcessMessage+0xe8>)
 80064be:	220a      	movs	r2, #10
 80064c0:	841a      	strh	r2, [r3, #32]

        for (int i=0;i<current_message.length;i++){
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e044      	b.n	8006552 <RS485_ProcessMessage+0xca>
//            float volt = (float)current_message.data[current_pos++];
//            int id_LED = current_message.data[current_pos++];
//            int LED_State = current_message.data[current_pos++];
//            int time = current_message.data[current_pos++];

          int  header = RxData_modbus_01[2] ;
 80064c8:	4b28      	ldr	r3, [pc, #160]	@ (800656c <RS485_ProcessMessage+0xe4>)
 80064ca:	789b      	ldrb	r3, [r3, #2]
 80064cc:	613b      	str	r3, [r7, #16]
            int command = RxData_modbus_01[3];
 80064ce:	4b27      	ldr	r3, [pc, #156]	@ (800656c <RS485_ProcessMessage+0xe4>)
 80064d0:	78db      	ldrb	r3, [r3, #3]
 80064d2:	60fb      	str	r3, [r7, #12]

            int id = 4 ;
 80064d4:	2304      	movs	r3, #4
 80064d6:	60bb      	str	r3, [r7, #8]
            float volt = 2;
 80064d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064dc:	607b      	str	r3, [r7, #4]

            if (RxData_modbus_01[0] == 0x04) {
 80064de:	4b23      	ldr	r3, [pc, #140]	@ (800656c <RS485_ProcessMessage+0xe4>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d132      	bne.n	800654c <RS485_ProcessMessage+0xc4>
                switch (RxData_modbus_01[1]) {
 80064e6:	4b21      	ldr	r3, [pc, #132]	@ (800656c <RS485_ProcessMessage+0xe4>)
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d82d      	bhi.n	800654c <RS485_ProcessMessage+0xc4>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <RS485_ProcessMessage+0x70>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006509 	.word	0x08006509
 80064fc:	08006527 	.word	0x08006527
 8006500:	0800654d 	.word	0x0800654d
 8006504:	08006537 	.word	0x08006537
                    case 0x01:
                        Set_Output_Voltage(id, volt);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fd75 	bl	8004000 <Set_Output_Voltage>
                        count_1 = 3;
 8006516:	4b14      	ldr	r3, [pc, #80]	@ (8006568 <RS485_ProcessMessage+0xe0>)
 8006518:	2203      	movs	r2, #3
 800651a:	601a      	str	r2, [r3, #0]
                        HAL_Delay(1000);
 800651c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006520:	f001 fe90 	bl	8008244 <HAL_Delay>

                        break;
 8006524:	e012      	b.n	800654c <RS485_ProcessMessage+0xc4>
                    case 0x02:
//                        Set_LED_status(id_LED, LED_State);
                        count_1 = 4;
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <RS485_ProcessMessage+0xe0>)
 8006528:	2204      	movs	r2, #4
 800652a:	601a      	str	r2, [r3, #0]
                        HAL_Delay(1000);
 800652c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006530:	f001 fe88 	bl	8008244 <HAL_Delay>
                        break;
 8006534:	e00a      	b.n	800654c <RS485_ProcessMessage+0xc4>
                    case 0x03:
//                        HAL_Delay(time);
                        break;
                    case 0x04: {
                        Get_INA_Voltage(&cell_configs[id]);
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4a0c      	ldr	r2, [pc, #48]	@ (8006574 <RS485_ProcessMessage+0xec>)
 8006542:	4413      	add	r3, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f99d 	bl	8006884 <Get_INA_Voltage>
                        // You'll need to store float properly – not just one byte
                        break;
 800654a:	bf00      	nop
        for (int i=0;i<current_message.length;i++){
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <RS485_ProcessMessage+0xe8>)
 8006554:	8c1b      	ldrh	r3, [r3, #32]
 8006556:	461a      	mov	r2, r3
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4293      	cmp	r3, r2
 800655c:	dbb4      	blt.n	80064c8 <RS485_ProcessMessage+0x40>
                }
            }
        }
//        }
    }
}
 800655e:	bf00      	nop
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200012bc 	.word	0x200012bc
 800656c:	200012c4 	.word	0x200012c4
 8006570:	20001298 	.word	0x20001298
 8006574:	0800e70c 	.word	0x0800e70c

08006578 <init_ina229_devices>:


void init_ina229_devices(void) {
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
    ina229_devices[0] = INA229_0;
 800657c:	4b36      	ldr	r3, [pc, #216]	@ (8006658 <init_ina229_devices+0xe0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a36      	ldr	r2, [pc, #216]	@ (800665c <init_ina229_devices+0xe4>)
 8006582:	6013      	str	r3, [r2, #0]
    ina229_devices[1] = INA229_1;
 8006584:	4b36      	ldr	r3, [pc, #216]	@ (8006660 <init_ina229_devices+0xe8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a34      	ldr	r2, [pc, #208]	@ (800665c <init_ina229_devices+0xe4>)
 800658a:	6053      	str	r3, [r2, #4]
    ina229_devices[2] = INA229_2;
 800658c:	4b35      	ldr	r3, [pc, #212]	@ (8006664 <init_ina229_devices+0xec>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a32      	ldr	r2, [pc, #200]	@ (800665c <init_ina229_devices+0xe4>)
 8006592:	6093      	str	r3, [r2, #8]
    ina229_devices[3] = INA229_3;
 8006594:	4b34      	ldr	r3, [pc, #208]	@ (8006668 <init_ina229_devices+0xf0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a30      	ldr	r2, [pc, #192]	@ (800665c <init_ina229_devices+0xe4>)
 800659a:	60d3      	str	r3, [r2, #12]
    ina229_devices[4] = INA229_4;
 800659c:	4b33      	ldr	r3, [pc, #204]	@ (800666c <init_ina229_devices+0xf4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2e      	ldr	r2, [pc, #184]	@ (800665c <init_ina229_devices+0xe4>)
 80065a2:	6113      	str	r3, [r2, #16]
    ina229_devices[5] = INA229_5;
 80065a4:	4b32      	ldr	r3, [pc, #200]	@ (8006670 <init_ina229_devices+0xf8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	@ (800665c <init_ina229_devices+0xe4>)
 80065aa:	6153      	str	r3, [r2, #20]
    ina229_devices[6] = INA229_6;
 80065ac:	4b31      	ldr	r3, [pc, #196]	@ (8006674 <init_ina229_devices+0xfc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <init_ina229_devices+0xe4>)
 80065b2:	6193      	str	r3, [r2, #24]
    ina229_devices[7] = INA229_7;
 80065b4:	4b30      	ldr	r3, [pc, #192]	@ (8006678 <init_ina229_devices+0x100>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a28      	ldr	r2, [pc, #160]	@ (800665c <init_ina229_devices+0xe4>)
 80065ba:	61d3      	str	r3, [r2, #28]
    ina229_devices[8] = INA229_8;
 80065bc:	4b2f      	ldr	r3, [pc, #188]	@ (800667c <init_ina229_devices+0x104>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a26      	ldr	r2, [pc, #152]	@ (800665c <init_ina229_devices+0xe4>)
 80065c2:	6213      	str	r3, [r2, #32]
    ina229_devices[9] = INA229_9;
 80065c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006680 <init_ina229_devices+0x108>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a24      	ldr	r2, [pc, #144]	@ (800665c <init_ina229_devices+0xe4>)
 80065ca:	6253      	str	r3, [r2, #36]	@ 0x24
    ina229_devices[10] = INA229_10;
 80065cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006684 <init_ina229_devices+0x10c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a22      	ldr	r2, [pc, #136]	@ (800665c <init_ina229_devices+0xe4>)
 80065d2:	6293      	str	r3, [r2, #40]	@ 0x28
    ina229_devices[11] = INA229_11;
 80065d4:	4b2c      	ldr	r3, [pc, #176]	@ (8006688 <init_ina229_devices+0x110>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a20      	ldr	r2, [pc, #128]	@ (800665c <init_ina229_devices+0xe4>)
 80065da:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ina229_devices[12] = INA229_12;
 80065dc:	4b2b      	ldr	r3, [pc, #172]	@ (800668c <init_ina229_devices+0x114>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1e      	ldr	r2, [pc, #120]	@ (800665c <init_ina229_devices+0xe4>)
 80065e2:	6313      	str	r3, [r2, #48]	@ 0x30
    ina229_devices[13] = INA229_13;
 80065e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006690 <init_ina229_devices+0x118>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	@ (800665c <init_ina229_devices+0xe4>)
 80065ea:	6353      	str	r3, [r2, #52]	@ 0x34
    ina229_devices[14] = INA229_14;
 80065ec:	4b29      	ldr	r3, [pc, #164]	@ (8006694 <init_ina229_devices+0x11c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1a      	ldr	r2, [pc, #104]	@ (800665c <init_ina229_devices+0xe4>)
 80065f2:	6393      	str	r3, [r2, #56]	@ 0x38
    ina229_devices[15] = INA229_15;
 80065f4:	4b28      	ldr	r3, [pc, #160]	@ (8006698 <init_ina229_devices+0x120>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a18      	ldr	r2, [pc, #96]	@ (800665c <init_ina229_devices+0xe4>)
 80065fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ina229_devices[16] = INA229_16;
 80065fc:	4b27      	ldr	r3, [pc, #156]	@ (800669c <init_ina229_devices+0x124>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <init_ina229_devices+0xe4>)
 8006602:	6413      	str	r3, [r2, #64]	@ 0x40
    ina229_devices[17] = INA229_17;
 8006604:	4b26      	ldr	r3, [pc, #152]	@ (80066a0 <init_ina229_devices+0x128>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a14      	ldr	r2, [pc, #80]	@ (800665c <init_ina229_devices+0xe4>)
 800660a:	6453      	str	r3, [r2, #68]	@ 0x44
    ina229_devices[18] = INA229_18;
 800660c:	4b25      	ldr	r3, [pc, #148]	@ (80066a4 <init_ina229_devices+0x12c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a12      	ldr	r2, [pc, #72]	@ (800665c <init_ina229_devices+0xe4>)
 8006612:	6493      	str	r3, [r2, #72]	@ 0x48
    ina229_devices[19] = INA229_19;
 8006614:	4b24      	ldr	r3, [pc, #144]	@ (80066a8 <init_ina229_devices+0x130>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a10      	ldr	r2, [pc, #64]	@ (800665c <init_ina229_devices+0xe4>)
 800661a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ina229_devices[20] = INA229_20;
 800661c:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <init_ina229_devices+0x134>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0e      	ldr	r2, [pc, #56]	@ (800665c <init_ina229_devices+0xe4>)
 8006622:	6513      	str	r3, [r2, #80]	@ 0x50
    ina229_devices[21] = INA229_21;
 8006624:	4b22      	ldr	r3, [pc, #136]	@ (80066b0 <init_ina229_devices+0x138>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0c      	ldr	r2, [pc, #48]	@ (800665c <init_ina229_devices+0xe4>)
 800662a:	6553      	str	r3, [r2, #84]	@ 0x54
    ina229_devices[22] = INA229_22;
 800662c:	4b21      	ldr	r3, [pc, #132]	@ (80066b4 <init_ina229_devices+0x13c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0a      	ldr	r2, [pc, #40]	@ (800665c <init_ina229_devices+0xe4>)
 8006632:	6593      	str	r3, [r2, #88]	@ 0x58
    ina229_devices[23] = INA229_23;
 8006634:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <init_ina229_devices+0x140>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a08      	ldr	r2, [pc, #32]	@ (800665c <init_ina229_devices+0xe4>)
 800663a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    ina229_devices[24] = INA229_24;
 800663c:	4b1f      	ldr	r3, [pc, #124]	@ (80066bc <init_ina229_devices+0x144>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a06      	ldr	r2, [pc, #24]	@ (800665c <init_ina229_devices+0xe4>)
 8006642:	6613      	str	r3, [r2, #96]	@ 0x60
    ina229_devices[25] = INA229_25;
 8006644:	4b1e      	ldr	r3, [pc, #120]	@ (80066c0 <init_ina229_devices+0x148>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a04      	ldr	r2, [pc, #16]	@ (800665c <init_ina229_devices+0xe4>)
 800664a:	6653      	str	r3, [r2, #100]	@ 0x64
}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	0800e024 	.word	0x0800e024
 800665c:	200017c4 	.word	0x200017c4
 8006660:	0800e028 	.word	0x0800e028
 8006664:	0800e02c 	.word	0x0800e02c
 8006668:	0800e030 	.word	0x0800e030
 800666c:	0800e034 	.word	0x0800e034
 8006670:	0800e038 	.word	0x0800e038
 8006674:	0800e03c 	.word	0x0800e03c
 8006678:	0800e040 	.word	0x0800e040
 800667c:	0800e044 	.word	0x0800e044
 8006680:	0800e048 	.word	0x0800e048
 8006684:	0800e04c 	.word	0x0800e04c
 8006688:	0800e050 	.word	0x0800e050
 800668c:	0800e054 	.word	0x0800e054
 8006690:	0800e058 	.word	0x0800e058
 8006694:	0800e05c 	.word	0x0800e05c
 8006698:	0800e060 	.word	0x0800e060
 800669c:	0800e064 	.word	0x0800e064
 80066a0:	0800e068 	.word	0x0800e068
 80066a4:	0800e06c 	.word	0x0800e06c
 80066a8:	0800e070 	.word	0x0800e070
 80066ac:	0800e074 	.word	0x0800e074
 80066b0:	0800e078 	.word	0x0800e078
 80066b4:	0800e07c 	.word	0x0800e07c
 80066b8:	0800e080 	.word	0x0800e080
 80066bc:	0800e084 	.word	0x0800e084
 80066c0:	0800e088 	.word	0x0800e088

080066c4 <get_ina_handle>:

};


// Helper function to get INA handle from index
static INA229_Handle get_ina_handle(uint8_t index) {
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
    return INA229_0 + index;  // Assuming INA handles are sequential
 80066ce:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <get_ina_handle+0x20>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	015b      	lsls	r3, r3, #5
 80066d6:	4413      	add	r3, r2
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	0800e024 	.word	0x0800e024

080066e8 <Voltage_Sequence_Automatic>:

void Voltage_Sequence_Automatic(void)
{
 80066e8:	b5b0      	push	{r4, r5, r7, lr}
 80066ea:	b08c      	sub	sp, #48	@ 0x30
 80066ec:	af00      	add	r7, sp, #0

    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 80066ee:	4b20      	ldr	r3, [pc, #128]	@ (8006770 <Voltage_Sequence_Automatic+0x88>)
 80066f0:	463c      	mov	r4, r7
 80066f2:	461d      	mov	r5, r3
 80066f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80066fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_voltages = sizeof(test_voltages) / sizeof(test_voltages[0]);
 8006700:	2308      	movs	r3, #8
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
    const int num_cells = sizeof(cell_configs) / sizeof(cell_configs[0]);
 8006704:	231a      	movs	r3, #26
 8006706:	623b      	str	r3, [r7, #32]

    for(int v = 0; v < num_voltages; v++) {
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800670c:	e027      	b.n	800675e <Voltage_Sequence_Automatic+0x76>
        for(int c = 0; c < num_cells; c++) {
 800670e:	2300      	movs	r3, #0
 8006710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006712:	e01a      	b.n	800674a <Voltage_Sequence_Automatic+0x62>
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8006714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006716:	4613      	mov	r3, r2
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <Voltage_Sequence_Automatic+0x8c>)
 8006720:	441a      	add	r2, r3
 8006722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	3330      	adds	r3, #48	@ 0x30
 8006728:	443b      	add	r3, r7
 800672a:	3b30      	subs	r3, #48	@ 0x30
 800672c:	edd3 7a00 	vldr	s15, [r3]
 8006730:	eeb0 0a67 	vmov.f32	s0, s15
 8006734:	4610      	mov	r0, r2
 8006736:	f000 f81f 	bl	8006778 <Set_voltage_and_measure>

        	cell_voltage_read();
 800673a:	f7ff f905 	bl	8005948 <cell_voltage_read>

            HAL_Delay(10);  // Delay between cells
 800673e:	200a      	movs	r0, #10
 8006740:	f001 fd80 	bl	8008244 <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	3301      	adds	r3, #1
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	429a      	cmp	r2, r3
 8006750:	dbe0      	blt.n	8006714 <Voltage_Sequence_Automatic+0x2c>
        }
        HAL_Delay(10);  // Delay between voltage levels
 8006752:	200a      	movs	r0, #10
 8006754:	f001 fd76 	bl	8008244 <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	3301      	adds	r3, #1
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	429a      	cmp	r2, r3
 8006764:	dbd3      	blt.n	800670e <Voltage_Sequence_Automatic+0x26>





}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	3730      	adds	r7, #48	@ 0x30
 800676c:	46bd      	mov	sp, r7
 800676e:	bdb0      	pop	{r4, r5, r7, pc}
 8006770:	0800d300 	.word	0x0800d300
 8006774:	0800e70c 	.word	0x0800e70c

08006778 <Set_voltage_and_measure>:

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	ed87 0a00 	vstr	s0, [r7]
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff9b 	bl	80066c4 <get_ina_handle>
 800678e:	60f8      	str	r0, [r7, #12]

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b18      	cmp	r3, #24
 8006796:	d010      	beq.n	80067ba <Set_voltage_and_measure+0x42>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b19      	cmp	r3, #25
 800679e:	d00c      	beq.n	80067ba <Set_voltage_and_measure+0x42>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	ed97 0a00 	vldr	s0, [r7]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fd fc29 	bl	8004000 <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2101      	movs	r1, #1
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fd fc91 	bl	80040dc <Set_LED_status>

    }
    HAL_Delay(10);
 80067ba:	200a      	movs	r0, #10
 80067bc:	f001 fd42 	bl	8008244 <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6858      	ldr	r0, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	4619      	mov	r1, r3
 80067cc:	f002 fbe2 	bl	8008f94 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80067d0:	2001      	movs	r0, #1
 80067d2:	f001 fd37 	bl	8008244 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	461c      	mov	r4, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7fd fd9b 	bl	8004318 <INA229_getVBUS_V>
 80067e2:	eef0 7a40 	vmov.f32	s15, s0
 80067e6:	4a26      	ldr	r2, [pc, #152]	@ (8006880 <Set_voltage_and_measure+0x108>)
 80067e8:	0123      	lsls	r3, r4, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80067f0:	2001      	movs	r0, #1
 80067f2:	f001 fd27 	bl	8008244 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6858      	ldr	r0, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	891b      	ldrh	r3, [r3, #8]
 80067fe:	2201      	movs	r2, #1
 8006800:	4619      	mov	r1, r3
 8006802:	f002 fbc7 	bl	8008f94 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8006806:	200a      	movs	r0, #10
 8006808:	f001 fd1c 	bl	8008244 <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6858      	ldr	r0, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	891b      	ldrh	r3, [r3, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	4619      	mov	r1, r3
 8006818:	f002 fbbc 	bl	8008f94 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800681c:	2001      	movs	r0, #1
 800681e:	f001 fd11 	bl	8008244 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	461c      	mov	r4, r3
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7fd fdd3 	bl	80043d4 <INA229_getDIETEMP_C>
 800682e:	eef0 7a40 	vmov.f32	s15, s0
 8006832:	4a13      	ldr	r2, [pc, #76]	@ (8006880 <Set_voltage_and_measure+0x108>)
 8006834:	0123      	lsls	r3, r4, #4
 8006836:	4413      	add	r3, r2
 8006838:	3308      	adds	r3, #8
 800683a:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 800683e:	2001      	movs	r0, #1
 8006840:	f001 fd00 	bl	8008244 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6858      	ldr	r0, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	891b      	ldrh	r3, [r3, #8]
 800684c:	2201      	movs	r2, #1
 800684e:	4619      	mov	r1, r3
 8006850:	f002 fba0 	bl	8008f94 <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8006854:	200a      	movs	r0, #10
 8006856:	f001 fcf5 	bl	8008244 <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b18      	cmp	r3, #24
 8006860:	d009      	beq.n	8006876 <Set_voltage_and_measure+0xfe>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b19      	cmp	r3, #25
 8006868:	d005      	beq.n	8006876 <Set_voltage_and_measure+0xfe>

    {

    Set_LED_status(cell->cell_id, ON);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd fc33 	bl	80040dc <Set_LED_status>

    }
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	20000edc 	.word	0x20000edc

08006884 <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff ff17 	bl	80066c4 <get_ina_handle>
 8006896:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fc1c 	bl	80040dc <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	891b      	ldrh	r3, [r3, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	4619      	mov	r1, r3
 80068b0:	f002 fb70 	bl	8008f94 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80068b4:	2001      	movs	r0, #1
 80068b6:	f001 fcc5 	bl	8008244 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	461c      	mov	r4, r3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fd fd87 	bl	80043d4 <INA229_getDIETEMP_C>
 80068c6:	eef0 7a40 	vmov.f32	s15, s0
 80068ca:	4a12      	ldr	r2, [pc, #72]	@ (8006914 <Get_INA_Voltage+0x90>)
 80068cc:	0123      	lsls	r3, r4, #4
 80068ce:	4413      	add	r3, r2
 80068d0:	3308      	adds	r3, #8
 80068d2:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80068d6:	2001      	movs	r0, #1
 80068d8:	f001 fcb4 	bl	8008244 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6858      	ldr	r0, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	891b      	ldrh	r3, [r3, #8]
 80068e4:	2201      	movs	r2, #1
 80068e6:	4619      	mov	r1, r3
 80068e8:	f002 fb54 	bl	8008f94 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fd fbf2 	bl	80040dc <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	4a05      	ldr	r2, [pc, #20]	@ (8006914 <Get_INA_Voltage+0x90>)
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	4413      	add	r3, r2
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	ee07 3a90 	vmov	s15, r3
}
 8006908:	eeb0 0a67 	vmov.f32	s0, s15
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bd90      	pop	{r4, r7, pc}
 8006912:	bf00      	nop
 8006914:	20000edc 	.word	0x20000edc

08006918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b08b      	sub	sp, #44	@ 0x2c
 800691c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800691e:	f001 fc1f 	bl	8008160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006922:	f000 f91d 	bl	8006b60 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006926:	f000 fc87 	bl	8007238 <MX_GPIO_Init>
  MX_SPI1_Init();
 800692a:	f000 fab3 	bl	8006e94 <MX_SPI1_Init>
  MX_SPI2_Init();
 800692e:	f000 fae7 	bl	8006f00 <MX_SPI2_Init>
  MX_I2C2_Init();
 8006932:	f000 fa2f 	bl	8006d94 <MX_I2C2_Init>
  MX_I2C3_Init();
 8006936:	f000 fa6d 	bl	8006e14 <MX_I2C3_Init>
  MX_SPI3_Init();
 800693a:	f000 fb17 	bl	8006f6c <MX_SPI3_Init>
  MX_SPI4_Init();
 800693e:	f000 fb4b 	bl	8006fd8 <MX_SPI4_Init>
  MX_CAN1_Init();
 8006942:	f000 f97d 	bl	8006c40 <MX_CAN1_Init>
  MX_CAN2_Init();
 8006946:	f000 f9b1 	bl	8006cac <MX_CAN2_Init>
  MX_I2C1_Init();
 800694a:	f000 f9e3 	bl	8006d14 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800694e:	f000 fbf5 	bl	800713c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006952:	f000 fc1d 	bl	8007190 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006956:	f000 fc45 	bl	80071e4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800695a:	f006 fa85 	bl	800ce68 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800695e:	f000 fbc3 	bl	80070e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8006962:	f000 fb6f 	bl	8007044 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  RTC_Init();
 8006966:	f7ff fcef 	bl	8006348 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 800696a:	f7fa fb0d 	bl	8000f88 <LED_Init>

  init_ina229_devices();
 800696e:	f7ff fe03 	bl	8006578 <init_ina229_devices>

  for (int i = 0; i < NUM_INA229; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	e00c      	b.n	8006992 <main+0x7a>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8006978:	4a63      	ldr	r2, [pc, #396]	@ (8006b08 <main+0x1f0>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006980:	4618      	mov	r0, r3
 8006982:	f7fd fc13 	bl	80041ac <INA229_config>
 8006986:	200a      	movs	r0, #10
 8006988:	f001 fc5c 	bl	8008244 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b19      	cmp	r3, #25
 8006996:	ddef      	ble.n	8006978 <main+0x60>



  mcu_spiInit(0);
 8006998:	2000      	movs	r0, #0
 800699a:	f7fd fd67 	bl	800446c <mcu_spiInit>
  HAL_Delay(10);
 800699e:	200a      	movs	r0, #10
 80069a0:	f001 fc50 	bl	8008244 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80069a4:	4959      	ldr	r1, [pc, #356]	@ (8006b0c <main+0x1f4>)
 80069a6:	2002      	movs	r0, #2
 80069a8:	f7fd fe46 	bl	8004638 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80069ac:	2300      	movs	r3, #0
 80069ae:	72fb      	strb	r3, [r7, #11]
 80069b0:	e018      	b.n	80069e4 <main+0xcc>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 80069b2:	4b57      	ldr	r3, [pc, #348]	@ (8006b10 <main+0x1f8>)
 80069b4:	7819      	ldrb	r1, [r3, #0]
 80069b6:	4b57      	ldr	r3, [pc, #348]	@ (8006b14 <main+0x1fc>)
 80069b8:	781c      	ldrb	r4, [r3, #0]
 80069ba:	4b57      	ldr	r3, [pc, #348]	@ (8006b18 <main+0x200>)
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	4a57      	ldr	r2, [pc, #348]	@ (8006b1c <main+0x204>)
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	7af8      	ldrb	r0, [r7, #11]
 80069c4:	9204      	str	r2, [sp, #16]
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	4b55      	ldr	r3, [pc, #340]	@ (8006b20 <main+0x208>)
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	4b55      	ldr	r3, [pc, #340]	@ (8006b24 <main+0x20c>)
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <main+0x210>)
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	4623      	mov	r3, r4
 80069d6:	460a      	mov	r2, r1
 80069d8:	494c      	ldr	r1, [pc, #304]	@ (8006b0c <main+0x1f4>)
 80069da:	f7fd fe3c 	bl	8004656 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80069de:	7afb      	ldrb	r3, [r7, #11]
 80069e0:	3301      	adds	r3, #1
 80069e2:	72fb      	strb	r3, [r7, #11]
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d9e3      	bls.n	80069b2 <main+0x9a>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 80069ea:	4948      	ldr	r1, [pc, #288]	@ (8006b0c <main+0x1f4>)
 80069ec:	2002      	movs	r0, #2
 80069ee:	f7fd fdd4 	bl	800459a <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 80069f2:	4946      	ldr	r1, [pc, #280]	@ (8006b0c <main+0x1f4>)
 80069f4:	2002      	movs	r0, #2
 80069f6:	f7fd fe10 	bl	800461a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 80069fa:	4944      	ldr	r1, [pc, #272]	@ (8006b0c <main+0x1f4>)
 80069fc:	2002      	movs	r0, #2
 80069fe:	f7fd fd73 	bl	80044e8 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8006a02:	f7fb f8f5 	bl	8001bf0 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8006a06:	f7fb f91b 	bl	8001c40 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8006a0a:	4848      	ldr	r0, [pc, #288]	@ (8006b2c <main+0x214>)
 8006a0c:	f7fd f8d0 	bl	8003bb0 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8006a10:	4847      	ldr	r0, [pc, #284]	@ (8006b30 <main+0x218>)
 8006a12:	f7fd f8cd 	bl	8003bb0 <Expander_InitAllDevices>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8006a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a1a:	4946      	ldr	r1, [pc, #280]	@ (8006b34 <main+0x21c>)
 8006a1c:	4846      	ldr	r0, [pc, #280]	@ (8006b38 <main+0x220>)
 8006a1e:	f005 fa72 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8006a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a26:	4945      	ldr	r1, [pc, #276]	@ (8006b3c <main+0x224>)
 8006a28:	4845      	ldr	r0, [pc, #276]	@ (8006b40 <main+0x228>)
 8006a2a:	f005 fa6c 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8006a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a32:	4944      	ldr	r1, [pc, #272]	@ (8006b44 <main+0x22c>)
 8006a34:	4844      	ldr	r0, [pc, #272]	@ (8006b48 <main+0x230>)
 8006a36:	f005 fa66 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8006a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a3e:	4943      	ldr	r1, [pc, #268]	@ (8006b4c <main+0x234>)
 8006a40:	4843      	ldr	r0, [pc, #268]	@ (8006b50 <main+0x238>)
 8006a42:	f005 fa60 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 8006a46:	4843      	ldr	r0, [pc, #268]	@ (8006b54 <main+0x23c>)
 8006a48:	f004 fe5a 	bl	800b700 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (modebus_rx_flag = 1 )
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <main+0x240>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	701a      	strb	r2, [r3, #0]
	  {
//		  memset(Rx_Data, 0, sizeof(Rx_Data));

//		  sprintf(Tx_Data, "F103 %d", indx++);
//		    send_Data (Tx_Data);
		    HAL_Delay(500);
 8006a52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006a56:	f001 fbf5 	bl	8008244 <HAL_Delay>

		  modebus_rx_flag = 0 ;
 8006a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b58 <main+0x240>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]

		  HAL_TIM_Base_Stop_IT(&htim1);
 8006a60:	483c      	ldr	r0, [pc, #240]	@ (8006b54 <main+0x23c>)
 8006a62:	f004 febd 	bl	800b7e0 <HAL_TIM_Base_Stop_IT>

	  }



		  cell12_Temp_01_Set(resistance[0]);
 8006a66:	4b3d      	ldr	r3, [pc, #244]	@ (8006b5c <main+0x244>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a72:	eeb0 0a67 	vmov.f32	s0, s15
 8006a76:	f7fa fbbb 	bl	80011f0 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8006a7a:	4b38      	ldr	r3, [pc, #224]	@ (8006b5c <main+0x244>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a86:	eeb0 0a67 	vmov.f32	s0, s15
 8006a8a:	f7fa fc67 	bl	800135c <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8006a8e:	4b33      	ldr	r3, [pc, #204]	@ (8006b5c <main+0x244>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a9e:	f7fa fd1d 	bl	80014dc <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b5c <main+0x244>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aae:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab2:	f7fa fdc9 	bl	8001648 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8006ab6:	4b29      	ldr	r3, [pc, #164]	@ (8006b5c <main+0x244>)
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac6:	f7fa fe7f 	bl	80017c8 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8006aca:	4b24      	ldr	r3, [pc, #144]	@ (8006b5c <main+0x244>)
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ada:	f7fa ff35 	bl	8001948 <cell11_Temp_03_Set>
//
//		  HAL_Delay(1000);
//
//		  Set_Output_Voltage(CELL_24, 2.0f);

	        Voltage_Sequence_Automatic();
 8006ade:	f7ff fe03 	bl	80066e8 <Voltage_Sequence_Automatic>




	        RS485_ProcessMessage();
 8006ae2:	f7ff fcd1 	bl	8006488 <RS485_ProcessMessage>

	        // Process battery tests
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	e008      	b.n	8006afe <main+0x1e6>
	        	Set_LED_status(cell, ON);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fd faf2 	bl	80040dc <Set_LED_status>
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3301      	adds	r3, #1
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b17      	cmp	r3, #23
 8006b02:	ddf3      	ble.n	8006aec <main+0x1d4>
	  if (modebus_rx_flag = 1 )
 8006b04:	e7a2      	b.n	8006a4c <main+0x134>
 8006b06:	bf00      	nop
 8006b08:	200017c4 	.word	0x200017c4
 8006b0c:	2000107c 	.word	0x2000107c
 8006b10:	20000900 	.word	0x20000900
 8006b14:	20001284 	.word	0x20001284
 8006b18:	2000090a 	.word	0x2000090a
 8006b1c:	2000090c 	.word	0x2000090c
 8006b20:	20000910 	.word	0x20000910
 8006b24:	20001288 	.word	0x20001288
 8006b28:	20000904 	.word	0x20000904
 8006b2c:	200018d0 	.word	0x200018d0
 8006b30:	20001924 	.word	0x20001924
 8006b34:	200012c4 	.word	0x200012c4
 8006b38:	20001b20 	.word	0x20001b20
 8006b3c:	200014c4 	.word	0x200014c4
 8006b40:	20001b68 	.word	0x20001b68
 8006b44:	200015c4 	.word	0x200015c4
 8006b48:	20001bb0 	.word	0x20001bb0
 8006b4c:	200016c4 	.word	0x200016c4
 8006b50:	20001bf8 	.word	0x20001bf8
 8006b54:	20001ad8 	.word	0x20001ad8
 8006b58:	200012c0 	.word	0x200012c0
 8006b5c:	200008e8 	.word	0x200008e8

08006b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b094      	sub	sp, #80	@ 0x50
 8006b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b66:	f107 0320 	add.w	r3, r7, #32
 8006b6a:	2230      	movs	r2, #48	@ 0x30
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f006 fafe 	bl	800d170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b74:	f107 030c 	add.w	r3, r7, #12
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b84:	2300      	movs	r3, #0
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	4b2b      	ldr	r3, [pc, #172]	@ (8006c38 <SystemClock_Config+0xd8>)
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006c38 <SystemClock_Config+0xd8>)
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b94:	4b28      	ldr	r3, [pc, #160]	@ (8006c38 <SystemClock_Config+0xd8>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <SystemClock_Config+0xdc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a24      	ldr	r2, [pc, #144]	@ (8006c3c <SystemClock_Config+0xdc>)
 8006baa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4b22      	ldr	r3, [pc, #136]	@ (8006c3c <SystemClock_Config+0xdc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006bd4:	23b4      	movs	r3, #180	@ 0xb4
 8006bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006bdc:	2305      	movs	r3, #5
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006be0:	f107 0320 	add.w	r3, r7, #32
 8006be4:	4618      	mov	r0, r3
 8006be6:	f003 fb11 	bl	800a20c <HAL_RCC_OscConfig>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006bf0:	f000 fe0a 	bl	8007808 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006bf4:	f003 faba 	bl	800a16c <HAL_PWREx_EnableOverDrive>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006bfe:	f000 fe03 	bl	8007808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c02:	230f      	movs	r3, #15
 8006c04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c06:	2302      	movs	r3, #2
 8006c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006c0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	2105      	movs	r1, #5
 8006c20:	4618      	mov	r0, r3
 8006c22:	f003 fd6b 	bl	800a6fc <HAL_RCC_ClockConfig>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006c2c:	f000 fdec 	bl	8007808 <Error_Handler>
  }
}
 8006c30:	bf00      	nop
 8006c32:	3750      	adds	r7, #80	@ 0x50
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40007000 	.word	0x40007000

08006c40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006c44:	4b17      	ldr	r3, [pc, #92]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c46:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <MX_CAN1_Init+0x68>)
 8006c48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8006c4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c4c:	220a      	movs	r2, #10
 8006c4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006c50:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006c56:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006c5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c5e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8006c62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c66:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8006c6a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006c72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006c84:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006c8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006c90:	4804      	ldr	r0, [pc, #16]	@ (8006ca4 <MX_CAN1_Init+0x64>)
 8006c92:	f001 fafb 	bl	800828c <HAL_CAN_Init>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006c9c:	f000 fdb4 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006ca0:	bf00      	nop
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	2000182c 	.word	0x2000182c
 8006ca8:	40006400 	.word	0x40006400

08006cac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006cb0:	4b16      	ldr	r3, [pc, #88]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cb2:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <MX_CAN2_Init+0x64>)
 8006cb4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8006cb6:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cb8:	2210      	movs	r2, #16
 8006cba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006cbc:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006cc2:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006cc8:	4b10      	ldr	r3, [pc, #64]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8006cda:	4b0c      	ldr	r3, [pc, #48]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8006ce6:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006cec:	4b07      	ldr	r3, [pc, #28]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006cf2:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006cf8:	4804      	ldr	r0, [pc, #16]	@ (8006d0c <MX_CAN2_Init+0x60>)
 8006cfa:	f001 fac7 	bl	800828c <HAL_CAN_Init>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8006d04:	f000 fd80 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006d08:	bf00      	nop
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20001854 	.word	0x20001854
 8006d10:	40006800 	.word	0x40006800

08006d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d8c <MX_I2C1_Init+0x78>)
 8006d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d20:	4a1b      	ldr	r2, [pc, #108]	@ (8006d90 <MX_I2C1_Init+0x7c>)
 8006d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006d24:	4b18      	ldr	r3, [pc, #96]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006d2a:	4b17      	ldr	r3, [pc, #92]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006d30:	4b15      	ldr	r3, [pc, #84]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006d38:	4b13      	ldr	r3, [pc, #76]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006d3e:	4b12      	ldr	r3, [pc, #72]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006d44:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006d50:	480d      	ldr	r0, [pc, #52]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d52:	f002 f96b 	bl	800902c <HAL_I2C_Init>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006d5c:	f000 fd54 	bl	8007808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006d60:	2100      	movs	r1, #0
 8006d62:	4809      	ldr	r0, [pc, #36]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d64:	f003 f986 	bl	800a074 <HAL_I2CEx_ConfigAnalogFilter>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006d6e:	f000 fd4b 	bl	8007808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006d72:	2100      	movs	r1, #0
 8006d74:	4804      	ldr	r0, [pc, #16]	@ (8006d88 <MX_I2C1_Init+0x74>)
 8006d76:	f003 f9b9 	bl	800a0ec <HAL_I2CEx_ConfigDigitalFilter>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006d80:	f000 fd42 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006d84:	bf00      	nop
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000187c 	.word	0x2000187c
 8006d8c:	40005400 	.word	0x40005400
 8006d90:	000186a0 	.word	0x000186a0

08006d94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006d98:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e0c <MX_I2C2_Init+0x78>)
 8006d9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006da0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e10 <MX_I2C2_Init+0x7c>)
 8006da2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006da4:	4b18      	ldr	r3, [pc, #96]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006daa:	4b17      	ldr	r3, [pc, #92]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006db0:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006db2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006db6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006dc4:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006dca:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006dd0:	480d      	ldr	r0, [pc, #52]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006dd2:	f002 f92b 	bl	800902c <HAL_I2C_Init>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006ddc:	f000 fd14 	bl	8007808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006de0:	2100      	movs	r1, #0
 8006de2:	4809      	ldr	r0, [pc, #36]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006de4:	f003 f946 	bl	800a074 <HAL_I2CEx_ConfigAnalogFilter>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8006dee:	f000 fd0b 	bl	8007808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006df2:	2100      	movs	r1, #0
 8006df4:	4804      	ldr	r0, [pc, #16]	@ (8006e08 <MX_I2C2_Init+0x74>)
 8006df6:	f003 f979 	bl	800a0ec <HAL_I2CEx_ConfigDigitalFilter>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8006e00:	f000 fd02 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006e04:	bf00      	nop
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200018d0 	.word	0x200018d0
 8006e0c:	40005800 	.word	0x40005800
 8006e10:	00061a80 	.word	0x00061a80

08006e14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e8c <MX_I2C3_Init+0x78>)
 8006e1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e20:	4a1b      	ldr	r2, [pc, #108]	@ (8006e90 <MX_I2C3_Init+0x7c>)
 8006e22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e24:	4b18      	ldr	r3, [pc, #96]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006e2a:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e30:	4b15      	ldr	r3, [pc, #84]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e38:	4b13      	ldr	r3, [pc, #76]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006e3e:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e44:	4b10      	ldr	r3, [pc, #64]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006e50:	480d      	ldr	r0, [pc, #52]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e52:	f002 f8eb 	bl	800902c <HAL_I2C_Init>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006e5c:	f000 fcd4 	bl	8007808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e60:	2100      	movs	r1, #0
 8006e62:	4809      	ldr	r0, [pc, #36]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e64:	f003 f906 	bl	800a074 <HAL_I2CEx_ConfigAnalogFilter>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006e6e:	f000 fccb 	bl	8007808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006e72:	2100      	movs	r1, #0
 8006e74:	4804      	ldr	r0, [pc, #16]	@ (8006e88 <MX_I2C3_Init+0x74>)
 8006e76:	f003 f939 	bl	800a0ec <HAL_I2CEx_ConfigDigitalFilter>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006e80:	f000 fcc2 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006e84:	bf00      	nop
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20001924 	.word	0x20001924
 8006e8c:	40005c00 	.word	0x40005c00
 8006e90:	00061a80 	.word	0x00061a80

08006e94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006e98:	4b17      	ldr	r3, [pc, #92]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006e9a:	4a18      	ldr	r2, [pc, #96]	@ (8006efc <MX_SPI1_Init+0x68>)
 8006e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e9e:	4b16      	ldr	r3, [pc, #88]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006eac:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006eb2:	4b11      	ldr	r3, [pc, #68]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ec4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ec8:	2228      	movs	r2, #40	@ 0x28
 8006eca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ed2:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ed8:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006ede:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ee0:	220a      	movs	r2, #10
 8006ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006ee4:	4804      	ldr	r0, [pc, #16]	@ (8006ef8 <MX_SPI1_Init+0x64>)
 8006ee6:	f003 fde9 	bl	800aabc <HAL_SPI_Init>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006ef0:	f000 fc8a 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20001978 	.word	0x20001978
 8006efc:	40013000 	.word	0x40013000

08006f00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006f04:	4b17      	ldr	r3, [pc, #92]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f06:	4a18      	ldr	r2, [pc, #96]	@ (8006f68 <MX_SPI2_Init+0x68>)
 8006f08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f0a:	4b16      	ldr	r3, [pc, #88]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006f10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f18:	4b12      	ldr	r3, [pc, #72]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f1e:	4b11      	ldr	r3, [pc, #68]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f24:	4b0f      	ldr	r3, [pc, #60]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006f32:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f34:	2218      	movs	r2, #24
 8006f36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f38:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f3e:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f44:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006f4a:	4b06      	ldr	r3, [pc, #24]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f50:	4804      	ldr	r0, [pc, #16]	@ (8006f64 <MX_SPI2_Init+0x64>)
 8006f52:	f003 fdb3 	bl	800aabc <HAL_SPI_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006f5c:	f000 fc54 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	200019d0 	.word	0x200019d0
 8006f68:	40003800 	.word	0x40003800

08006f6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006f70:	4b17      	ldr	r3, [pc, #92]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f72:	4a18      	ldr	r2, [pc, #96]	@ (8006fd4 <MX_SPI3_Init+0x68>)
 8006f74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006f76:	4b16      	ldr	r3, [pc, #88]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006f7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006f7e:	4b14      	ldr	r3, [pc, #80]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f84:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f8a:	4b11      	ldr	r3, [pc, #68]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f90:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb0:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fb8:	220a      	movs	r2, #10
 8006fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006fbc:	4804      	ldr	r0, [pc, #16]	@ (8006fd0 <MX_SPI3_Init+0x64>)
 8006fbe:	f003 fd7d 	bl	800aabc <HAL_SPI_Init>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006fc8:	f000 fc1e 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006fcc:	bf00      	nop
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20001a28 	.word	0x20001a28
 8006fd4:	40003c00 	.word	0x40003c00

08006fd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8006fdc:	4b17      	ldr	r3, [pc, #92]	@ (800703c <MX_SPI4_Init+0x64>)
 8006fde:	4a18      	ldr	r2, [pc, #96]	@ (8007040 <MX_SPI4_Init+0x68>)
 8006fe0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006fe2:	4b16      	ldr	r3, [pc, #88]	@ (800703c <MX_SPI4_Init+0x64>)
 8006fe4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006fe8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8006fea:	4b14      	ldr	r3, [pc, #80]	@ (800703c <MX_SPI4_Init+0x64>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ff0:	4b12      	ldr	r3, [pc, #72]	@ (800703c <MX_SPI4_Init+0x64>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ff6:	4b11      	ldr	r3, [pc, #68]	@ (800703c <MX_SPI4_Init+0x64>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800703c <MX_SPI4_Init+0x64>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8007002:	4b0e      	ldr	r3, [pc, #56]	@ (800703c <MX_SPI4_Init+0x64>)
 8007004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007008:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800700a:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <MX_SPI4_Init+0x64>)
 800700c:	2230      	movs	r2, #48	@ 0x30
 800700e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007010:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <MX_SPI4_Init+0x64>)
 8007012:	2200      	movs	r2, #0
 8007014:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8007016:	4b09      	ldr	r3, [pc, #36]	@ (800703c <MX_SPI4_Init+0x64>)
 8007018:	2200      	movs	r2, #0
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <MX_SPI4_Init+0x64>)
 800701e:	2200      	movs	r2, #0
 8007020:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8007022:	4b06      	ldr	r3, [pc, #24]	@ (800703c <MX_SPI4_Init+0x64>)
 8007024:	220a      	movs	r2, #10
 8007026:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8007028:	4804      	ldr	r0, [pc, #16]	@ (800703c <MX_SPI4_Init+0x64>)
 800702a:	f003 fd47 	bl	800aabc <HAL_SPI_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8007034:	f000 fbe8 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8007038:	bf00      	nop
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20001a80 	.word	0x20001a80
 8007040:	40013400 	.word	0x40013400

08007044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800704a:	f107 0308 	add.w	r3, r7, #8
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	609a      	str	r2, [r3, #8]
 8007056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007058:	463b      	mov	r3, r7
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007060:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007062:	4a20      	ldr	r2, [pc, #128]	@ (80070e4 <MX_TIM1_Init+0xa0>)
 8007064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000-1;
 8007066:	4b1e      	ldr	r3, [pc, #120]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007068:	f242 3227 	movw	r2, #8999	@ 0x2327
 800706c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800706e:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007070:	2200      	movs	r2, #0
 8007072:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800707a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800707c:	4b18      	ldr	r3, [pc, #96]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 800707e:	2200      	movs	r2, #0
 8007080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007082:	4b17      	ldr	r3, [pc, #92]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007084:	2200      	movs	r2, #0
 8007086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007088:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 800708a:	2200      	movs	r2, #0
 800708c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800708e:	4814      	ldr	r0, [pc, #80]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 8007090:	f004 fae6 	bl	800b660 <HAL_TIM_Base_Init>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800709a:	f000 fbb5 	bl	8007808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800709e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80070a4:	f107 0308 	add.w	r3, r7, #8
 80070a8:	4619      	mov	r1, r3
 80070aa:	480d      	ldr	r0, [pc, #52]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 80070ac:	f004 fbc7 	bl	800b83e <HAL_TIM_ConfigClockSource>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80070b6:	f000 fba7 	bl	8007808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070ba:	2300      	movs	r3, #0
 80070bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80070c2:	463b      	mov	r3, r7
 80070c4:	4619      	mov	r1, r3
 80070c6:	4806      	ldr	r0, [pc, #24]	@ (80070e0 <MX_TIM1_Init+0x9c>)
 80070c8:	f004 fdc6 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80070d2:	f000 fb99 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80070d6:	bf00      	nop
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20001ad8 	.word	0x20001ad8
 80070e4:	40010000 	.word	0x40010000

080070e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80070ec:	4b11      	ldr	r3, [pc, #68]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 80070ee:	4a12      	ldr	r2, [pc, #72]	@ (8007138 <MX_USART1_UART_Init+0x50>)
 80070f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 80070f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80070f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007100:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 8007102:	2200      	movs	r2, #0
 8007104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007106:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 8007108:	2200      	movs	r2, #0
 800710a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800710c:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 800710e:	220c      	movs	r2, #12
 8007110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007112:	4b08      	ldr	r3, [pc, #32]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 8007114:	2200      	movs	r2, #0
 8007116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 800711a:	2200      	movs	r2, #0
 800711c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800711e:	4805      	ldr	r0, [pc, #20]	@ (8007134 <MX_USART1_UART_Init+0x4c>)
 8007120:	f004 fe16 	bl	800bd50 <HAL_UART_Init>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800712a:	f000 fb6d 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800712e:	bf00      	nop
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20001b20 	.word	0x20001b20
 8007138:	40011000 	.word	0x40011000

0800713c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007140:	4b11      	ldr	r3, [pc, #68]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007142:	4a12      	ldr	r2, [pc, #72]	@ (800718c <MX_USART2_UART_Init+0x50>)
 8007144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007146:	4b10      	ldr	r3, [pc, #64]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800714c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800714e:	4b0e      	ldr	r3, [pc, #56]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007150:	2200      	movs	r2, #0
 8007152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007154:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007156:	2200      	movs	r2, #0
 8007158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800715a:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 800715c:	2200      	movs	r2, #0
 800715e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007160:	4b09      	ldr	r3, [pc, #36]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007162:	220c      	movs	r2, #12
 8007164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007166:	4b08      	ldr	r3, [pc, #32]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007168:	2200      	movs	r2, #0
 800716a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 800716e:	2200      	movs	r2, #0
 8007170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007172:	4805      	ldr	r0, [pc, #20]	@ (8007188 <MX_USART2_UART_Init+0x4c>)
 8007174:	f004 fdec 	bl	800bd50 <HAL_UART_Init>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800717e:	f000 fb43 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20001b68 	.word	0x20001b68
 800718c:	40004400 	.word	0x40004400

08007190 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007194:	4b11      	ldr	r3, [pc, #68]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 8007196:	4a12      	ldr	r2, [pc, #72]	@ (80071e0 <MX_USART3_UART_Init+0x50>)
 8007198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 800719c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80071a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80071a2:	4b0e      	ldr	r3, [pc, #56]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80071a8:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80071ae:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80071b4:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071b6:	220c      	movs	r2, #12
 80071b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071ba:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071bc:	2200      	movs	r2, #0
 80071be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80071c6:	4805      	ldr	r0, [pc, #20]	@ (80071dc <MX_USART3_UART_Init+0x4c>)
 80071c8:	f004 fdc2 	bl	800bd50 <HAL_UART_Init>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80071d2:	f000 fb19 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80071d6:	bf00      	nop
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20001bb0 	.word	0x20001bb0
 80071e0:	40004800 	.word	0x40004800

080071e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80071e8:	4b11      	ldr	r3, [pc, #68]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 80071ea:	4a12      	ldr	r2, [pc, #72]	@ (8007234 <MX_USART6_UART_Init+0x50>)
 80071ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80071ee:	4b10      	ldr	r3, [pc, #64]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 80071f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80071f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80071f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80071fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007202:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 8007204:	2200      	movs	r2, #0
 8007206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007208:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 800720a:	220c      	movs	r2, #12
 800720c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800720e:	4b08      	ldr	r3, [pc, #32]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 8007210:	2200      	movs	r2, #0
 8007212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007214:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 8007216:	2200      	movs	r2, #0
 8007218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800721a:	4805      	ldr	r0, [pc, #20]	@ (8007230 <MX_USART6_UART_Init+0x4c>)
 800721c:	f004 fd98 	bl	800bd50 <HAL_UART_Init>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007226:	f000 faef 	bl	8007808 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20001bf8 	.word	0x20001bf8
 8007234:	40011400 	.word	0x40011400

08007238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	@ 0x38
 800723c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800723e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
 8007248:	609a      	str	r2, [r3, #8]
 800724a:	60da      	str	r2, [r3, #12]
 800724c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	4bb6      	ldr	r3, [pc, #728]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007256:	4ab5      	ldr	r2, [pc, #724]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007258:	f043 0310 	orr.w	r3, r3, #16
 800725c:	6313      	str	r3, [r2, #48]	@ 0x30
 800725e:	4bb3      	ldr	r3, [pc, #716]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	623b      	str	r3, [r7, #32]
 8007268:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	4baf      	ldr	r3, [pc, #700]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	4aae      	ldr	r2, [pc, #696]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007278:	6313      	str	r3, [r2, #48]	@ 0x30
 800727a:	4bac      	ldr	r3, [pc, #688]	@ (800752c <MX_GPIO_Init+0x2f4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	4ba8      	ldr	r3, [pc, #672]	@ (800752c <MX_GPIO_Init+0x2f4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	4aa7      	ldr	r2, [pc, #668]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007290:	f043 0304 	orr.w	r3, r3, #4
 8007294:	6313      	str	r3, [r2, #48]	@ 0x30
 8007296:	4ba5      	ldr	r3, [pc, #660]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	f003 0304 	and.w	r3, r3, #4
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	4ba1      	ldr	r3, [pc, #644]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	4aa0      	ldr	r2, [pc, #640]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072ac:	f043 0320 	orr.w	r3, r3, #32
 80072b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072b2:	4b9e      	ldr	r3, [pc, #632]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	4b9a      	ldr	r3, [pc, #616]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	4a99      	ldr	r2, [pc, #612]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ce:	4b97      	ldr	r3, [pc, #604]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	4b93      	ldr	r3, [pc, #588]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	4a92      	ldr	r2, [pc, #584]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ea:	4b90      	ldr	r3, [pc, #576]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	4b8c      	ldr	r3, [pc, #560]	@ (800752c <MX_GPIO_Init+0x2f4>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fe:	4a8b      	ldr	r2, [pc, #556]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6313      	str	r3, [r2, #48]	@ 0x30
 8007306:	4b89      	ldr	r3, [pc, #548]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	4b85      	ldr	r3, [pc, #532]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731a:	4a84      	ldr	r2, [pc, #528]	@ (800752c <MX_GPIO_Init+0x2f4>)
 800731c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007320:	6313      	str	r3, [r2, #48]	@ 0x30
 8007322:	4b82      	ldr	r3, [pc, #520]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800732e:	2300      	movs	r3, #0
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	4b7e      	ldr	r3, [pc, #504]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	4a7d      	ldr	r2, [pc, #500]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007338:	f043 0308 	orr.w	r3, r3, #8
 800733c:	6313      	str	r3, [r2, #48]	@ 0x30
 800733e:	4b7b      	ldr	r3, [pc, #492]	@ (800752c <MX_GPIO_Init+0x2f4>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800734a:	2201      	movs	r2, #1
 800734c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8007350:	4877      	ldr	r0, [pc, #476]	@ (8007530 <MX_GPIO_Init+0x2f8>)
 8007352:	f001 fe1f 	bl	8008f94 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8007356:	2201      	movs	r2, #1
 8007358:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800735c:	4875      	ldr	r0, [pc, #468]	@ (8007534 <MX_GPIO_Init+0x2fc>)
 800735e:	f001 fe19 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8007362:	2201      	movs	r2, #1
 8007364:	f242 0133 	movw	r1, #8243	@ 0x2033
 8007368:	4873      	ldr	r0, [pc, #460]	@ (8007538 <MX_GPIO_Init+0x300>)
 800736a:	f001 fe13 	bl	8008f94 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 800736e:	2200      	movs	r2, #0
 8007370:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8007374:	486f      	ldr	r0, [pc, #444]	@ (8007534 <MX_GPIO_Init+0x2fc>)
 8007376:	f001 fe0d 	bl	8008f94 <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 800737a:	2201      	movs	r2, #1
 800737c:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8007380:	486e      	ldr	r0, [pc, #440]	@ (800753c <MX_GPIO_Init+0x304>)
 8007382:	f001 fe07 	bl	8008f94 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8007386:	2200      	movs	r2, #0
 8007388:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800738c:	486b      	ldr	r0, [pc, #428]	@ (800753c <MX_GPIO_Init+0x304>)
 800738e:	f001 fe01 	bl	8008f94 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8007392:	2201      	movs	r2, #1
 8007394:	2101      	movs	r1, #1
 8007396:	486a      	ldr	r0, [pc, #424]	@ (8007540 <MX_GPIO_Init+0x308>)
 8007398:	f001 fdfc 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 800739c:	2200      	movs	r2, #0
 800739e:	2102      	movs	r1, #2
 80073a0:	4867      	ldr	r0, [pc, #412]	@ (8007540 <MX_GPIO_Init+0x308>)
 80073a2:	f001 fdf7 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80073a6:	2200      	movs	r2, #0
 80073a8:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80073ac:	4865      	ldr	r0, [pc, #404]	@ (8007544 <MX_GPIO_Init+0x30c>)
 80073ae:	f001 fdf1 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80073b2:	2201      	movs	r2, #1
 80073b4:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073b8:	4863      	ldr	r0, [pc, #396]	@ (8007548 <MX_GPIO_Init+0x310>)
 80073ba:	f001 fdeb 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80073be:	2201      	movs	r2, #1
 80073c0:	2103      	movs	r1, #3
 80073c2:	4862      	ldr	r0, [pc, #392]	@ (800754c <MX_GPIO_Init+0x314>)
 80073c4:	f001 fde6 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80073c8:	2200      	movs	r2, #0
 80073ca:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073ce:	4858      	ldr	r0, [pc, #352]	@ (8007530 <MX_GPIO_Init+0x2f8>)
 80073d0:	f001 fde0 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 80073d4:	2200      	movs	r2, #0
 80073d6:	f244 4138 	movw	r1, #17464	@ 0x4438
 80073da:	485b      	ldr	r0, [pc, #364]	@ (8007548 <MX_GPIO_Init+0x310>)
 80073dc:	f001 fdda 	bl	8008f94 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 80073e0:	2201      	movs	r2, #1
 80073e2:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 80073e6:	4857      	ldr	r0, [pc, #348]	@ (8007544 <MX_GPIO_Init+0x30c>)
 80073e8:	f001 fdd4 	bl	8008f94 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80073ec:	2201      	movs	r2, #1
 80073ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073f2:	4857      	ldr	r0, [pc, #348]	@ (8007550 <MX_GPIO_Init+0x318>)
 80073f4:	f001 fdce 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 80073f8:	2200      	movs	r2, #0
 80073fa:	f640 010c 	movw	r1, #2060	@ 0x80c
 80073fe:	4854      	ldr	r0, [pc, #336]	@ (8007550 <MX_GPIO_Init+0x318>)
 8007400:	f001 fdc8 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8007404:	2200      	movs	r2, #0
 8007406:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800740a:	4850      	ldr	r0, [pc, #320]	@ (800754c <MX_GPIO_Init+0x314>)
 800740c:	f001 fdc2 	bl	8008f94 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8007410:	2200      	movs	r2, #0
 8007412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007416:	4848      	ldr	r0, [pc, #288]	@ (8007538 <MX_GPIO_Init+0x300>)
 8007418:	f001 fdbc 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800741c:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007422:	2301      	movs	r3, #1
 8007424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007426:	2300      	movs	r3, #0
 8007428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800742a:	2300      	movs	r3, #0
 800742c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800742e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007432:	4619      	mov	r1, r3
 8007434:	483e      	ldr	r0, [pc, #248]	@ (8007530 <MX_GPIO_Init+0x2f8>)
 8007436:	f001 fc01 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800743a:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007440:	2301      	movs	r3, #1
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007444:	2300      	movs	r3, #0
 8007446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007448:	2300      	movs	r3, #0
 800744a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800744c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007450:	4619      	mov	r1, r3
 8007452:	4838      	ldr	r0, [pc, #224]	@ (8007534 <MX_GPIO_Init+0x2fc>)
 8007454:	f001 fbf2 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8007458:	f242 1330 	movw	r3, #8496	@ 0x2130
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800745e:	2301      	movs	r3, #1
 8007460:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007462:	2300      	movs	r3, #0
 8007464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007466:	2300      	movs	r3, #0
 8007468:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800746a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800746e:	4619      	mov	r1, r3
 8007470:	4831      	ldr	r0, [pc, #196]	@ (8007538 <MX_GPIO_Init+0x300>)
 8007472:	f001 fbe3 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8007476:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800747c:	2301      	movs	r3, #1
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007480:	2300      	movs	r3, #0
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007484:	2300      	movs	r3, #0
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800748c:	4619      	mov	r1, r3
 800748e:	482b      	ldr	r0, [pc, #172]	@ (800753c <MX_GPIO_Init+0x304>)
 8007490:	f001 fbd4 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8007494:	2304      	movs	r3, #4
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007498:	2301      	movs	r3, #1
 800749a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749c:	2300      	movs	r3, #0
 800749e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074a0:	2302      	movs	r3, #2
 80074a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 80074a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074a8:	4619      	mov	r1, r3
 80074aa:	4824      	ldr	r0, [pc, #144]	@ (800753c <MX_GPIO_Init+0x304>)
 80074ac:	f001 fbc6 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80074b0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80074b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b6:	2301      	movs	r3, #1
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ba:	2301      	movs	r3, #1
 80074bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074be:	2303      	movs	r3, #3
 80074c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c6:	4619      	mov	r1, r3
 80074c8:	481c      	ldr	r0, [pc, #112]	@ (800753c <MX_GPIO_Init+0x304>)
 80074ca:	f001 fbb7 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80074ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074d4:	2301      	movs	r3, #1
 80074d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074d8:	2302      	movs	r3, #2
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074dc:	2303      	movs	r3, #3
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80074e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074e4:	4619      	mov	r1, r3
 80074e6:	4815      	ldr	r0, [pc, #84]	@ (800753c <MX_GPIO_Init+0x304>)
 80074e8:	f001 fba8 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 80074ec:	2301      	movs	r3, #1
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f0:	2301      	movs	r3, #1
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074f4:	2302      	movs	r3, #2
 80074f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f8:	2303      	movs	r3, #3
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80074fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007500:	4619      	mov	r1, r3
 8007502:	480d      	ldr	r0, [pc, #52]	@ (8007538 <MX_GPIO_Init+0x300>)
 8007504:	f001 fb9a 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8007508:	2302      	movs	r3, #2
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800750c:	2301      	movs	r3, #1
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007510:	2301      	movs	r3, #1
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007514:	2303      	movs	r3, #3
 8007516:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8007518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751c:	4619      	mov	r1, r3
 800751e:	4806      	ldr	r0, [pc, #24]	@ (8007538 <MX_GPIO_Init+0x300>)
 8007520:	f001 fb8c 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8007524:	2301      	movs	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007528:	2301      	movs	r3, #1
 800752a:	e013      	b.n	8007554 <MX_GPIO_Init+0x31c>
 800752c:	40023800 	.word	0x40023800
 8007530:	40021000 	.word	0x40021000
 8007534:	40022000 	.word	0x40022000
 8007538:	40020800 	.word	0x40020800
 800753c:	40021400 	.word	0x40021400
 8007540:	40020000 	.word	0x40020000
 8007544:	40021c00 	.word	0x40021c00
 8007548:	40020400 	.word	0x40020400
 800754c:	40021800 	.word	0x40021800
 8007550:	40020c00 	.word	0x40020c00
 8007554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007556:	2302      	movs	r3, #2
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755a:	2303      	movs	r3, #3
 800755c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 800755e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007562:	4619      	mov	r1, r3
 8007564:	485c      	ldr	r0, [pc, #368]	@ (80076d8 <MX_GPIO_Init+0x4a0>)
 8007566:	f001 fb69 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 800756a:	2302      	movs	r3, #2
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800756e:	2301      	movs	r3, #1
 8007570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007572:	2300      	movs	r3, #0
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007576:	2302      	movs	r3, #2
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800757a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800757e:	4619      	mov	r1, r3
 8007580:	4855      	ldr	r0, [pc, #340]	@ (80076d8 <MX_GPIO_Init+0x4a0>)
 8007582:	f001 fb5b 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8007586:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800758c:	2301      	movs	r3, #1
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007590:	2300      	movs	r3, #0
 8007592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007594:	2300      	movs	r3, #0
 8007596:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800759c:	4619      	mov	r1, r3
 800759e:	484f      	ldr	r0, [pc, #316]	@ (80076dc <MX_GPIO_Init+0x4a4>)
 80075a0:	f001 fb4c 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 80075a4:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075aa:	2301      	movs	r3, #1
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b2:	2300      	movs	r3, #0
 80075b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ba:	4619      	mov	r1, r3
 80075bc:	4848      	ldr	r0, [pc, #288]	@ (80076e0 <MX_GPIO_Init+0x4a8>)
 80075be:	f001 fb3d 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 80075c2:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c8:	2301      	movs	r3, #1
 80075ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d0:	2300      	movs	r3, #0
 80075d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d8:	4619      	mov	r1, r3
 80075da:	4842      	ldr	r0, [pc, #264]	@ (80076e4 <MX_GPIO_Init+0x4ac>)
 80075dc:	f001 fb2e 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 80075e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075e6:	2301      	movs	r3, #1
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075ea:	2301      	movs	r3, #1
 80075ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ee:	2303      	movs	r3, #3
 80075f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 80075f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075f6:	4619      	mov	r1, r3
 80075f8:	4839      	ldr	r0, [pc, #228]	@ (80076e0 <MX_GPIO_Init+0x4a8>)
 80075fa:	f001 fb1f 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 80075fe:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007604:	2301      	movs	r3, #1
 8007606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007608:	2302      	movs	r3, #2
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800760c:	2303      	movs	r3, #3
 800760e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007614:	4619      	mov	r1, r3
 8007616:	4831      	ldr	r0, [pc, #196]	@ (80076dc <MX_GPIO_Init+0x4a4>)
 8007618:	f001 fb10 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 800761c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007622:	2301      	movs	r3, #1
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007626:	2301      	movs	r3, #1
 8007628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800762a:	2303      	movs	r3, #3
 800762c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800762e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007632:	4619      	mov	r1, r3
 8007634:	4829      	ldr	r0, [pc, #164]	@ (80076dc <MX_GPIO_Init+0x4a4>)
 8007636:	f001 fb01 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 800763a:	f640 430c 	movw	r3, #3084	@ 0xc0c
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007640:	2301      	movs	r3, #1
 8007642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007644:	2300      	movs	r3, #0
 8007646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007648:	2300      	movs	r3, #0
 800764a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800764c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007650:	4619      	mov	r1, r3
 8007652:	4825      	ldr	r0, [pc, #148]	@ (80076e8 <MX_GPIO_Init+0x4b0>)
 8007654:	f001 faf2 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8007658:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800765e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007664:	2300      	movs	r3, #0
 8007666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800766c:	4619      	mov	r1, r3
 800766e:	481e      	ldr	r0, [pc, #120]	@ (80076e8 <MX_GPIO_Init+0x4b0>)
 8007670:	f001 fae4 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8007674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800767a:	2300      	movs	r3, #0
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800767e:	2301      	movs	r3, #1
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8007682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007686:	4619      	mov	r1, r3
 8007688:	4814      	ldr	r0, [pc, #80]	@ (80076dc <MX_GPIO_Init+0x4a4>)
 800768a:	f001 fad7 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 800768e:	23f0      	movs	r3, #240	@ 0xf0
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007692:	2300      	movs	r3, #0
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007696:	2300      	movs	r3, #0
 8007698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800769a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800769e:	4619      	mov	r1, r3
 80076a0:	4811      	ldr	r0, [pc, #68]	@ (80076e8 <MX_GPIO_Init+0x4b0>)
 80076a2:	f001 facb 	bl	8008c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 80076a6:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076ac:	2300      	movs	r3, #0
 80076ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076b8:	4619      	mov	r1, r3
 80076ba:	480a      	ldr	r0, [pc, #40]	@ (80076e4 <MX_GPIO_Init+0x4ac>)
 80076bc:	f001 fabe 	bl	8008c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80076c0:	2200      	movs	r2, #0
 80076c2:	2100      	movs	r1, #0
 80076c4:	2028      	movs	r0, #40	@ 0x28
 80076c6:	f001 f9f0 	bl	8008aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80076ca:	2028      	movs	r0, #40	@ 0x28
 80076cc:	f001 fa09 	bl	8008ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80076d0:	bf00      	nop
 80076d2:	3738      	adds	r7, #56	@ 0x38
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40020000 	.word	0x40020000
 80076dc:	40021c00 	.word	0x40021c00
 80076e0:	40020400 	.word	0x40020400
 80076e4:	40021800 	.word	0x40021800
 80076e8:	40020c00 	.word	0x40020c00

080076ec <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7f9 fcdb 	bl	80010b4 <Push_ButtonHandler>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_UARTEx_RxEventCallback>:
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	807b      	strh	r3, [r7, #2]
	if (RxData_modbus_01[0] == SLAVE_ID)
 8007714:	4b33      	ldr	r3, [pc, #204]	@ (80077e4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b07      	cmp	r3, #7
 800771a:	d143      	bne.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
	{
		switch (RxData_modbus_01[1]){
 800771c:	4b31      	ldr	r3, [pc, #196]	@ (80077e4 <HAL_UARTEx_RxEventCallback+0xdc>)
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	3b01      	subs	r3, #1
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d83a      	bhi.n	800779c <HAL_UARTEx_RxEventCallback+0x94>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <HAL_UARTEx_RxEventCallback+0x24>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007779 	.word	0x08007779
 8007730:	0800777f 	.word	0x0800777f
 8007734:	0800776d 	.word	0x0800776d
 8007738:	08007773 	.word	0x08007773
 800773c:	08007791 	.word	0x08007791
 8007740:	08007785 	.word	0x08007785
 8007744:	0800779d 	.word	0x0800779d
 8007748:	0800779d 	.word	0x0800779d
 800774c:	0800779d 	.word	0x0800779d
 8007750:	0800779d 	.word	0x0800779d
 8007754:	0800779d 	.word	0x0800779d
 8007758:	0800779d 	.word	0x0800779d
 800775c:	0800779d 	.word	0x0800779d
 8007760:	0800779d 	.word	0x0800779d
 8007764:	08007797 	.word	0x08007797
 8007768:	0800778b 	.word	0x0800778b
		case 0x03:
			readHoldingRegs();
 800776c:	f7fe f982 	bl	8005a74 <readHoldingRegs>
			break;
 8007770:	e018      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x04:
			readInputRegs();
 8007772:	f7fe f9f1 	bl	8005b58 <readInputRegs>
			break;
 8007776:	e015      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x01:
			readCoils();
 8007778:	f7fe fa60 	bl	8005c3c <readCoils>
			break;
 800777c:	e012      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x02:
			readInputs();
 800777e:	f7fe fb0b 	bl	8005d98 <readInputs>
			break;
 8007782:	e00f      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x06:
			writeSingleReg();
 8007784:	f7fe fc30 	bl	8005fe8 <writeSingleReg>
			break;
 8007788:	e00c      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x10:
			writeHoldingRegs();
 800778a:	f7fe fbb3 	bl	8005ef4 <writeHoldingRegs>
			break;
 800778e:	e009      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x05:
			writeSingleCoil();
 8007790:	f7fe fc74 	bl	800607c <writeSingleCoil>
			break;
 8007794:	e006      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x0F:
			writeMultiCoils();
 8007796:	f7fe fceb 	bl	8006170 <writeMultiCoils>
			break;
 800779a:	e003      	b.n	80077a4 <HAL_UARTEx_RxEventCallback+0x9c>
		default:
			modbusException(ILLEGAL_FUNCTION);
 800779c:	2001      	movs	r0, #1
 800779e:	f7fe f949 	bl	8005a34 <modbusException>
			break;
 80077a2:	bf00      	nop
		}
	}


	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 80077a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077a8:	490e      	ldr	r1, [pc, #56]	@ (80077e4 <HAL_UARTEx_RxEventCallback+0xdc>)
 80077aa:	480f      	ldr	r0, [pc, #60]	@ (80077e8 <HAL_UARTEx_RxEventCallback+0xe0>)
 80077ac:	f004 fbab 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 80077b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077b4:	490d      	ldr	r1, [pc, #52]	@ (80077ec <HAL_UARTEx_RxEventCallback+0xe4>)
 80077b6:	480e      	ldr	r0, [pc, #56]	@ (80077f0 <HAL_UARTEx_RxEventCallback+0xe8>)
 80077b8:	f004 fba5 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 80077bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077c0:	490c      	ldr	r1, [pc, #48]	@ (80077f4 <HAL_UARTEx_RxEventCallback+0xec>)
 80077c2:	480d      	ldr	r0, [pc, #52]	@ (80077f8 <HAL_UARTEx_RxEventCallback+0xf0>)
 80077c4:	f004 fb9f 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 80077c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077cc:	490b      	ldr	r1, [pc, #44]	@ (80077fc <HAL_UARTEx_RxEventCallback+0xf4>)
 80077ce:	480c      	ldr	r0, [pc, #48]	@ (8007800 <HAL_UARTEx_RxEventCallback+0xf8>)
 80077d0:	f004 fb99 	bl	800bf06 <HAL_UARTEx_ReceiveToIdle_IT>

	modebus_rx_flag = 1 ;
 80077d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <HAL_UARTEx_RxEventCallback+0xfc>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]

//	HAL_UART_RxCpltCallback
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200012c4 	.word	0x200012c4
 80077e8:	20001b20 	.word	0x20001b20
 80077ec:	200014c4 	.word	0x200014c4
 80077f0:	20001b68 	.word	0x20001b68
 80077f4:	200015c4 	.word	0x200015c4
 80077f8:	20001bb0 	.word	0x20001bb0
 80077fc:	200016c4 	.word	0x200016c4
 8007800:	20001bf8 	.word	0x20001bf8
 8007804:	200012c0 	.word	0x200012c0

08007808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800780c:	b672      	cpsid	i
}
 800780e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <Error_Handler+0x8>

08007814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <HAL_MspInit+0x4c>)
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	4a0f      	ldr	r2, [pc, #60]	@ (8007860 <HAL_MspInit+0x4c>)
 8007824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007828:	6453      	str	r3, [r2, #68]	@ 0x44
 800782a:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <HAL_MspInit+0x4c>)
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007832:	607b      	str	r3, [r7, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <HAL_MspInit+0x4c>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	4a08      	ldr	r2, [pc, #32]	@ (8007860 <HAL_MspInit+0x4c>)
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	@ 0x40
 8007846:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <HAL_MspInit+0x4c>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800

08007864 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	@ 0x30
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786c:	f107 031c 	add.w	r3, r7, #28
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a4a      	ldr	r2, [pc, #296]	@ (80079ac <HAL_CAN_MspInit+0x148>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d145      	bne.n	8007912 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007886:	4b4a      	ldr	r3, [pc, #296]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	4a48      	ldr	r2, [pc, #288]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 800788e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007890:	4b47      	ldr	r3, [pc, #284]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10d      	bne.n	80078b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	4b45      	ldr	r3, [pc, #276]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 800789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a0:	4a44      	ldr	r2, [pc, #272]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 80078a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80078a8:	4b42      	ldr	r3, [pc, #264]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	4b3e      	ldr	r3, [pc, #248]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078bc:	4a3d      	ldr	r2, [pc, #244]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 80078be:	f043 0308 	orr.w	r3, r3, #8
 80078c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80078c4:	4b3b      	ldr	r3, [pc, #236]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80078d0:	2303      	movs	r3, #3
 80078d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d4:	2302      	movs	r3, #2
 80078d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078dc:	2303      	movs	r3, #3
 80078de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80078e0:	2309      	movs	r3, #9
 80078e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078e4:	f107 031c 	add.w	r3, r7, #28
 80078e8:	4619      	mov	r1, r3
 80078ea:	4833      	ldr	r0, [pc, #204]	@ (80079b8 <HAL_CAN_MspInit+0x154>)
 80078ec:	f001 f9a6 	bl	8008c3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80078f0:	2200      	movs	r2, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	2014      	movs	r0, #20
 80078f6:	f001 f8d8 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80078fa:	2014      	movs	r0, #20
 80078fc:	f001 f8f1 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	2015      	movs	r0, #21
 8007906:	f001 f8d0 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800790a:	2015      	movs	r0, #21
 800790c:	f001 f8e9 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8007910:	e048      	b.n	80079a4 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a29      	ldr	r2, [pc, #164]	@ (80079bc <HAL_CAN_MspInit+0x158>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d143      	bne.n	80079a4 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	4b24      	ldr	r3, [pc, #144]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007924:	4a23      	ldr	r2, [pc, #140]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007926:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800792a:	6413      	str	r3, [r2, #64]	@ 0x40
 800792c:	4b21      	ldr	r3, [pc, #132]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007938:	4b1d      	ldr	r3, [pc, #116]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a1c      	ldr	r2, [pc, #112]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 8007940:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <HAL_CAN_MspInit+0x14c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d10d      	bne.n	8007966 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	4b19      	ldr	r3, [pc, #100]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	4a18      	ldr	r2, [pc, #96]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007954:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007958:	6413      	str	r3, [r2, #64]	@ 0x40
 800795a:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	4b12      	ldr	r3, [pc, #72]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	4a11      	ldr	r2, [pc, #68]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	6313      	str	r3, [r2, #48]	@ 0x30
 8007976:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <HAL_CAN_MspInit+0x150>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007982:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007988:	2302      	movs	r3, #2
 800798a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007990:	2303      	movs	r3, #3
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8007994:	2309      	movs	r3, #9
 8007996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007998:	f107 031c 	add.w	r3, r7, #28
 800799c:	4619      	mov	r1, r3
 800799e:	4808      	ldr	r0, [pc, #32]	@ (80079c0 <HAL_CAN_MspInit+0x15c>)
 80079a0:	f001 f94c 	bl	8008c3c <HAL_GPIO_Init>
}
 80079a4:	bf00      	nop
 80079a6:	3730      	adds	r7, #48	@ 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40006400 	.word	0x40006400
 80079b0:	20001c40 	.word	0x20001c40
 80079b4:	40023800 	.word	0x40023800
 80079b8:	40020c00 	.word	0x40020c00
 80079bc:	40006800 	.word	0x40006800
 80079c0:	40020400 	.word	0x40020400

080079c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08e      	sub	sp, #56	@ 0x38
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a4c      	ldr	r2, [pc, #304]	@ (8007b14 <HAL_I2C_MspInit+0x150>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d12d      	bne.n	8007a42 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80079f6:	4b48      	ldr	r3, [pc, #288]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a08:	2312      	movs	r3, #18
 8007a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a10:	2303      	movs	r3, #3
 8007a12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a14:	2304      	movs	r3, #4
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	483f      	ldr	r0, [pc, #252]	@ (8007b1c <HAL_I2C_MspInit+0x158>)
 8007a20:	f001 f90c 	bl	8008c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007a24:	2300      	movs	r3, #0
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	4b3b      	ldr	r3, [pc, #236]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a34:	4b38      	ldr	r3, [pc, #224]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007a40:	e063      	b.n	8007b0a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a36      	ldr	r2, [pc, #216]	@ (8007b20 <HAL_I2C_MspInit+0x15c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d12c      	bne.n	8007aa6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	4b31      	ldr	r3, [pc, #196]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	4a30      	ldr	r2, [pc, #192]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007a68:	2330      	movs	r3, #48	@ 0x30
 8007a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a6c:	2312      	movs	r3, #18
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a74:	2303      	movs	r3, #3
 8007a76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007a78:	2304      	movs	r3, #4
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a80:	4619      	mov	r1, r3
 8007a82:	4828      	ldr	r0, [pc, #160]	@ (8007b24 <HAL_I2C_MspInit+0x160>)
 8007a84:	f001 f8da 	bl	8008c3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	4b22      	ldr	r3, [pc, #136]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a98:	4b1f      	ldr	r3, [pc, #124]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	e031      	b.n	8007b0a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8007b28 <HAL_I2C_MspInit+0x164>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d12c      	bne.n	8007b0a <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	4b18      	ldr	r3, [pc, #96]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	4a17      	ldr	r2, [pc, #92]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ac0:	4b15      	ldr	r3, [pc, #84]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007acc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ad2:	2312      	movs	r3, #18
 8007ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ada:	2303      	movs	r3, #3
 8007adc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007ade:	2304      	movs	r3, #4
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	480e      	ldr	r0, [pc, #56]	@ (8007b24 <HAL_I2C_MspInit+0x160>)
 8007aea:	f001 f8a7 	bl	8008c3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	4a08      	ldr	r2, [pc, #32]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007af8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007afe:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <HAL_I2C_MspInit+0x154>)
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	bf00      	nop
 8007b0c:	3738      	adds	r7, #56	@ 0x38
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40005400 	.word	0x40005400
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	40020400 	.word	0x40020400
 8007b20:	40005800 	.word	0x40005800
 8007b24:	40021c00 	.word	0x40021c00
 8007b28:	40005c00 	.word	0x40005c00

08007b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b090      	sub	sp, #64	@ 0x40
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
 8007b40:	60da      	str	r2, [r3, #12]
 8007b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a6d      	ldr	r2, [pc, #436]	@ (8007d00 <HAL_SPI_MspInit+0x1d4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d12c      	bne.n	8007ba8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b52:	4b6c      	ldr	r3, [pc, #432]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b56:	4a6b      	ldr	r2, [pc, #428]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b5e:	4b69      	ldr	r3, [pc, #420]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b6e:	4b65      	ldr	r3, [pc, #404]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	4a64      	ldr	r2, [pc, #400]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b74:	f043 0301 	orr.w	r3, r3, #1
 8007b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b7a:	4b62      	ldr	r3, [pc, #392]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007b86:	23e0      	movs	r3, #224	@ 0xe0
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b92:	2303      	movs	r3, #3
 8007b94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b96:	2305      	movs	r3, #5
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4859      	ldr	r0, [pc, #356]	@ (8007d08 <HAL_SPI_MspInit+0x1dc>)
 8007ba2:	f001 f84b 	bl	8008c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007ba6:	e0a7      	b.n	8007cf8 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a57      	ldr	r2, [pc, #348]	@ (8007d0c <HAL_SPI_MspInit+0x1e0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d12c      	bne.n	8007c0c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	4b53      	ldr	r3, [pc, #332]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	4a52      	ldr	r2, [pc, #328]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bc2:	4b50      	ldr	r3, [pc, #320]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bde:	4b49      	ldr	r3, [pc, #292]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007bea:	230e      	movs	r3, #14
 8007bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bfa:	2305      	movs	r3, #5
 8007bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c02:	4619      	mov	r1, r3
 8007c04:	4842      	ldr	r0, [pc, #264]	@ (8007d10 <HAL_SPI_MspInit+0x1e4>)
 8007c06:	f001 f819 	bl	8008c3c <HAL_GPIO_Init>
}
 8007c0a:	e075      	b.n	8007cf8 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a40      	ldr	r2, [pc, #256]	@ (8007d14 <HAL_SPI_MspInit+0x1e8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d12d      	bne.n	8007c72 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	4a39      	ldr	r2, [pc, #228]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c26:	4b37      	ldr	r3, [pc, #220]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	4b33      	ldr	r3, [pc, #204]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3a:	4a32      	ldr	r2, [pc, #200]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c42:	4b30      	ldr	r3, [pc, #192]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007c4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c54:	2302      	movs	r3, #2
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c60:	2306      	movs	r3, #6
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c68:	4619      	mov	r1, r3
 8007c6a:	482b      	ldr	r0, [pc, #172]	@ (8007d18 <HAL_SPI_MspInit+0x1ec>)
 8007c6c:	f000 ffe6 	bl	8008c3c <HAL_GPIO_Init>
}
 8007c70:	e042      	b.n	8007cf8 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a29      	ldr	r2, [pc, #164]	@ (8007d1c <HAL_SPI_MspInit+0x1f0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d13d      	bne.n	8007cf8 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	4b20      	ldr	r3, [pc, #128]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c84:	4a1f      	ldr	r2, [pc, #124]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	4b19      	ldr	r3, [pc, #100]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca0:	4a18      	ldr	r2, [pc, #96]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007ca2:	f043 0310 	orr.w	r3, r3, #16
 8007ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ca8:	4b16      	ldr	r3, [pc, #88]	@ (8007d04 <HAL_SPI_MspInit+0x1d8>)
 8007caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007cb4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007cc6:	2305      	movs	r3, #5
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4813      	ldr	r0, [pc, #76]	@ (8007d20 <HAL_SPI_MspInit+0x1f4>)
 8007cd2:	f000 ffb3 	bl	8008c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007ce8:	2305      	movs	r3, #5
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	480b      	ldr	r0, [pc, #44]	@ (8007d20 <HAL_SPI_MspInit+0x1f4>)
 8007cf4:	f000 ffa2 	bl	8008c3c <HAL_GPIO_Init>
}
 8007cf8:	bf00      	nop
 8007cfa:	3740      	adds	r7, #64	@ 0x40
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40013000 	.word	0x40013000
 8007d04:	40023800 	.word	0x40023800
 8007d08:	40020000 	.word	0x40020000
 8007d0c:	40003800 	.word	0x40003800
 8007d10:	40022000 	.word	0x40022000
 8007d14:	40003c00 	.word	0x40003c00
 8007d18:	40020800 	.word	0x40020800
 8007d1c:	40013400 	.word	0x40013400
 8007d20:	40021000 	.word	0x40021000

08007d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0b      	ldr	r2, [pc, #44]	@ (8007d60 <HAL_TIM_Base_MspInit+0x3c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d64 <HAL_TIM_Base_MspInit+0x40>)
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3e:	4a09      	ldr	r2, [pc, #36]	@ (8007d64 <HAL_TIM_Base_MspInit+0x40>)
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d46:	4b07      	ldr	r3, [pc, #28]	@ (8007d64 <HAL_TIM_Base_MspInit+0x40>)
 8007d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40023800 	.word	0x40023800

08007d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b090      	sub	sp, #64	@ 0x40
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a74      	ldr	r2, [pc, #464]	@ (8007f58 <HAL_UART_MspInit+0x1f0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d134      	bne.n	8007df4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d8e:	4b73      	ldr	r3, [pc, #460]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d92:	4a72      	ldr	r2, [pc, #456]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007d94:	f043 0310 	orr.w	r3, r3, #16
 8007d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d9a:	4b70      	ldr	r3, [pc, #448]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007daa:	4b6c      	ldr	r3, [pc, #432]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dae:	4a6b      	ldr	r2, [pc, #428]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007db6:	4b69      	ldr	r3, [pc, #420]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007dc2:	23c0      	movs	r3, #192	@ 0xc0
 8007dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007dd2:	2307      	movs	r3, #7
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4860      	ldr	r0, [pc, #384]	@ (8007f60 <HAL_UART_MspInit+0x1f8>)
 8007dde:	f000 ff2d 	bl	8008c3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2100      	movs	r1, #0
 8007de6:	2025      	movs	r0, #37	@ 0x25
 8007de8:	f000 fe5f 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007dec:	2025      	movs	r0, #37	@ 0x25
 8007dee:	f000 fe78 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007df2:	e0ad      	b.n	8007f50 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a5a      	ldr	r2, [pc, #360]	@ (8007f64 <HAL_UART_MspInit+0x1fc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d134      	bne.n	8007e68 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007dfe:	2300      	movs	r3, #0
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	4b56      	ldr	r3, [pc, #344]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	4a55      	ldr	r2, [pc, #340]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e0e:	4b53      	ldr	r3, [pc, #332]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e22:	4a4e      	ldr	r2, [pc, #312]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007e36:	230c      	movs	r3, #12
 8007e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e42:	2303      	movs	r3, #3
 8007e44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e46:	2307      	movs	r3, #7
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4845      	ldr	r0, [pc, #276]	@ (8007f68 <HAL_UART_MspInit+0x200>)
 8007e52:	f000 fef3 	bl	8008c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	2026      	movs	r0, #38	@ 0x26
 8007e5c:	f000 fe25 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007e60:	2026      	movs	r0, #38	@ 0x26
 8007e62:	f000 fe3e 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
}
 8007e66:	e073      	b.n	8007f50 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f6c <HAL_UART_MspInit+0x204>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d135      	bne.n	8007ede <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	4b39      	ldr	r3, [pc, #228]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	4a38      	ldr	r2, [pc, #224]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e82:	4b36      	ldr	r3, [pc, #216]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	4b32      	ldr	r3, [pc, #200]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e96:	4a31      	ldr	r2, [pc, #196]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007e98:	f043 0308 	orr.w	r3, r3, #8
 8007e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007eaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007ebc:	2307      	movs	r3, #7
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	482a      	ldr	r0, [pc, #168]	@ (8007f70 <HAL_UART_MspInit+0x208>)
 8007ec8:	f000 feb8 	bl	8008c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	2027      	movs	r0, #39	@ 0x27
 8007ed2:	f000 fdea 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007ed6:	2027      	movs	r0, #39	@ 0x27
 8007ed8:	f000 fe03 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
}
 8007edc:	e038      	b.n	8007f50 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a24      	ldr	r2, [pc, #144]	@ (8007f74 <HAL_UART_MspInit+0x20c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d133      	bne.n	8007f50 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	4b1b      	ldr	r3, [pc, #108]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ef8:	4b18      	ldr	r3, [pc, #96]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	4b14      	ldr	r3, [pc, #80]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	4a13      	ldr	r2, [pc, #76]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007f0e:	f043 0304 	orr.w	r3, r3, #4
 8007f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f14:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <HAL_UART_MspInit+0x1f4>)
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f20:	23c0      	movs	r3, #192	@ 0xc0
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f24:	2302      	movs	r3, #2
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007f30:	2308      	movs	r3, #8
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f38:	4619      	mov	r1, r3
 8007f3a:	480f      	ldr	r0, [pc, #60]	@ (8007f78 <HAL_UART_MspInit+0x210>)
 8007f3c:	f000 fe7e 	bl	8008c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007f40:	2200      	movs	r2, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	2047      	movs	r0, #71	@ 0x47
 8007f46:	f000 fdb0 	bl	8008aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007f4a:	2047      	movs	r0, #71	@ 0x47
 8007f4c:	f000 fdc9 	bl	8008ae2 <HAL_NVIC_EnableIRQ>
}
 8007f50:	bf00      	nop
 8007f52:	3740      	adds	r7, #64	@ 0x40
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	40011000 	.word	0x40011000
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	40020400 	.word	0x40020400
 8007f64:	40004400 	.word	0x40004400
 8007f68:	40020000 	.word	0x40020000
 8007f6c:	40004800 	.word	0x40004800
 8007f70:	40020c00 	.word	0x40020c00
 8007f74:	40011400 	.word	0x40011400
 8007f78:	40020800 	.word	0x40020800

08007f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <NMI_Handler+0x4>

08007f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f88:	bf00      	nop
 8007f8a:	e7fd      	b.n	8007f88 <HardFault_Handler+0x4>

08007f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <MemManage_Handler+0x4>

08007f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <BusFault_Handler+0x4>

08007f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007fa0:	bf00      	nop
 8007fa2:	e7fd      	b.n	8007fa0 <UsageFault_Handler+0x4>

08007fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007fa8:	bf00      	nop
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007fd2:	f000 f917 	bl	8008204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007fd6:	bf00      	nop
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007fe0:	4802      	ldr	r0, [pc, #8]	@ (8007fec <CAN1_RX0_IRQHandler+0x10>)
 8007fe2:	f000 fa4e 	bl	8008482 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2000182c 	.word	0x2000182c

08007ff0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007ff4:	4802      	ldr	r0, [pc, #8]	@ (8008000 <CAN1_RX1_IRQHandler+0x10>)
 8007ff6:	f000 fa44 	bl	8008482 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007ffa:	bf00      	nop
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2000182c 	.word	0x2000182c

08008004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008008:	4802      	ldr	r0, [pc, #8]	@ (8008014 <USART1_IRQHandler+0x10>)
 800800a:	f003 ffd9 	bl	800bfc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20001b20 	.word	0x20001b20

08008018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800801c:	4802      	ldr	r0, [pc, #8]	@ (8008028 <USART2_IRQHandler+0x10>)
 800801e:	f003 ffcf 	bl	800bfc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20001b68 	.word	0x20001b68

0800802c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008030:	4802      	ldr	r0, [pc, #8]	@ (800803c <USART3_IRQHandler+0x10>)
 8008032:	f003 ffc5 	bl	800bfc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008036:	bf00      	nop
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20001bb0 	.word	0x20001bb0

08008040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8008044:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008048:	f000 ffd8 	bl	8008ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 800804c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008050:	f000 ffd4 	bl	8008ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8008054:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008058:	f000 ffd0 	bl	8008ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 800805c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008060:	f000 ffcc 	bl	8008ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008064:	bf00      	nop
 8008066:	bd80      	pop	{r7, pc}

08008068 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800806c:	4802      	ldr	r0, [pc, #8]	@ (8008078 <USART6_IRQHandler+0x10>)
 800806e:	f003 ffa7 	bl	800bfc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008072:	bf00      	nop
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20001bf8 	.word	0x20001bf8

0800807c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008084:	4a14      	ldr	r2, [pc, #80]	@ (80080d8 <_sbrk+0x5c>)
 8008086:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <_sbrk+0x60>)
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008090:	4b13      	ldr	r3, [pc, #76]	@ (80080e0 <_sbrk+0x64>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008098:	4b11      	ldr	r3, [pc, #68]	@ (80080e0 <_sbrk+0x64>)
 800809a:	4a12      	ldr	r2, [pc, #72]	@ (80080e4 <_sbrk+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800809e:	4b10      	ldr	r3, [pc, #64]	@ (80080e0 <_sbrk+0x64>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d207      	bcs.n	80080bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80080ac:	f005 f878 	bl	800d1a0 <__errno>
 80080b0:	4603      	mov	r3, r0
 80080b2:	220c      	movs	r2, #12
 80080b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	e009      	b.n	80080d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080bc:	4b08      	ldr	r3, [pc, #32]	@ (80080e0 <_sbrk+0x64>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080c2:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <_sbrk+0x64>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	4a05      	ldr	r2, [pc, #20]	@ (80080e0 <_sbrk+0x64>)
 80080cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80080ce:	68fb      	ldr	r3, [r7, #12]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20030000 	.word	0x20030000
 80080dc:	00000400 	.word	0x00000400
 80080e0:	20001c44 	.word	0x20001c44
 80080e4:	20001da8 	.word	0x20001da8

080080e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80080ec:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <SystemInit+0x20>)
 80080ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f2:	4a05      	ldr	r2, [pc, #20]	@ (8008108 <SystemInit+0x20>)
 80080f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080fc:	bf00      	nop
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	e000ed00 	.word	0xe000ed00

0800810c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800810c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008110:	f7ff ffea 	bl	80080e8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008114:	480c      	ldr	r0, [pc, #48]	@ (8008148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008116:	490d      	ldr	r1, [pc, #52]	@ (800814c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008118:	4a0d      	ldr	r2, [pc, #52]	@ (8008150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800811a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800811c:	e002      	b.n	8008124 <LoopCopyDataInit>

0800811e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800811e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008122:	3304      	adds	r3, #4

08008124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008128:	d3f9      	bcc.n	800811e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800812a:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800812c:	4c0a      	ldr	r4, [pc, #40]	@ (8008158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800812e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008130:	e001      	b.n	8008136 <LoopFillZerobss>

08008132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008134:	3204      	adds	r2, #4

08008136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008138:	d3fb      	bcc.n	8008132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800813a:	f005 f837 	bl	800d1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800813e:	f7fe fbeb 	bl	8006918 <main>
  bx  lr    
 8008142:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008144:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800814c:	20000a04 	.word	0x20000a04
  ldr r2, =_sidata
 8008150:	0800e86c 	.word	0x0800e86c
  ldr r2, =_sbss
 8008154:	20000a04 	.word	0x20000a04
  ldr r4, =_ebss
 8008158:	20001da8 	.word	0x20001da8

0800815c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800815c:	e7fe      	b.n	800815c <ADC_IRQHandler>
	...

08008160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008164:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <HAL_Init+0x40>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a0d      	ldr	r2, [pc, #52]	@ (80081a0 <HAL_Init+0x40>)
 800816a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800816e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_Init+0x40>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	@ (80081a0 <HAL_Init+0x40>)
 8008176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800817a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HAL_Init+0x40>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <HAL_Init+0x40>)
 8008182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008188:	2003      	movs	r0, #3
 800818a:	f000 fc83 	bl	8008a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800818e:	200f      	movs	r0, #15
 8008190:	f000 f808 	bl	80081a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008194:	f7ff fb3e 	bl	8007814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_InitTick+0x54>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <HAL_InitTick+0x58>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fc9b 	bl	8008afe <HAL_SYSTICK_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00e      	b.n	80081f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b0f      	cmp	r3, #15
 80081d6:	d80a      	bhi.n	80081ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f000 fc63 	bl	8008aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081e4:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <HAL_InitTick+0x5c>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000994 	.word	0x20000994
 80081fc:	2000099c 	.word	0x2000099c
 8008200:	20000998 	.word	0x20000998

08008204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_IncTick+0x20>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <HAL_IncTick+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4413      	add	r3, r2
 8008214:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_IncTick+0x24>)
 8008216:	6013      	str	r3, [r2, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000099c 	.word	0x2000099c
 8008228:	20001c48 	.word	0x20001c48

0800822c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  return uwTick;
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <HAL_GetTick+0x14>)
 8008232:	681b      	ldr	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20001c48 	.word	0x20001c48

08008244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800824c:	f7ff ffee 	bl	800822c <HAL_GetTick>
 8008250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d005      	beq.n	800826a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800825e:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <HAL_Delay+0x44>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800826a:	bf00      	nop
 800826c:	f7ff ffde 	bl	800822c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	429a      	cmp	r2, r3
 800827a:	d8f7      	bhi.n	800826c <HAL_Delay+0x28>
  {
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	2000099c 	.word	0x2000099c

0800828c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e0ed      	b.n	800847a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fada 	bl	8007864 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c0:	f7ff ffb4 	bl	800822c <HAL_GetTick>
 80082c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80082c6:	e012      	b.n	80082ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80082c8:	f7ff ffb0 	bl	800822c <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b0a      	cmp	r3, #10
 80082d4:	d90b      	bls.n	80082ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2205      	movs	r2, #5
 80082e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e0c5      	b.n	800847a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0e5      	beq.n	80082c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0202 	bic.w	r2, r2, #2
 800830a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800830c:	f7ff ff8e 	bl	800822c <HAL_GetTick>
 8008310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008312:	e012      	b.n	800833a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008314:	f7ff ff8a 	bl	800822c <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b0a      	cmp	r3, #10
 8008320:	d90b      	bls.n	800833a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2205      	movs	r2, #5
 8008332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e09f      	b.n	800847a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e5      	bne.n	8008314 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7e1b      	ldrb	r3, [r3, #24]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d108      	bne.n	8008362 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e007      	b.n	8008372 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008370:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7e5b      	ldrb	r3, [r3, #25]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d108      	bne.n	800838c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e007      	b.n	800839c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800839a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7e9b      	ldrb	r3, [r3, #26]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d108      	bne.n	80083b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0220 	orr.w	r2, r2, #32
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e007      	b.n	80083c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0220 	bic.w	r2, r2, #32
 80083c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7edb      	ldrb	r3, [r3, #27]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d108      	bne.n	80083e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0210 	bic.w	r2, r2, #16
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e007      	b.n	80083f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0210 	orr.w	r2, r2, #16
 80083ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7f1b      	ldrb	r3, [r3, #28]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d108      	bne.n	800840a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0208 	orr.w	r2, r2, #8
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	e007      	b.n	800841a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0208 	bic.w	r2, r2, #8
 8008418:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7f5b      	ldrb	r3, [r3, #29]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d108      	bne.n	8008434 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0204 	orr.w	r2, r2, #4
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e007      	b.n	8008444 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0204 	bic.w	r2, r2, #4
 8008442:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	ea42 0103 	orr.w	r1, r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	1e5a      	subs	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b08a      	sub	sp, #40	@ 0x28
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d07c      	beq.n	80085c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d023      	beq.n	800851a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2201      	movs	r2, #1
 80084d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f983 	bl	80087f0 <HAL_CAN_TxMailbox0CompleteCallback>
 80084ea:	e016      	b.n	800851a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80084fe:	e00c      	b.n	800851a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
 8008512:	e002      	b.n	800851a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f989 	bl	800882c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008520:	2b00      	cmp	r3, #0
 8008522:	d024      	beq.n	800856e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800852c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f963 	bl	8008804 <HAL_CAN_TxMailbox1CompleteCallback>
 800853e:	e016      	b.n	800856e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
 8008552:	e00c      	b.n	800856e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
 8008566:	e002      	b.n	800856e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f969 	bl	8008840 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d024      	beq.n	80085c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008580:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f943 	bl	8008818 <HAL_CAN_TxMailbox2CompleteCallback>
 8008592:	e016      	b.n	80085c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a6:	e00c      	b.n	80085c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ba:	e002      	b.n	80085c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f949 	bl	8008854 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2210      	movs	r2, #16
 80085e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2208      	movs	r2, #8
 8008600:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f93a 	bl	800887c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f921 	bl	8008868 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00c      	beq.n	800864a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f003 0310 	and.w	r3, r3, #16
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008640:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2210      	movs	r2, #16
 8008648:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2208      	movs	r2, #8
 8008664:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f91c 	bl	80088a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f903 	bl	8008890 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b00      	cmp	r3, #0
 800869c:	d006      	beq.n	80086ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2210      	movs	r2, #16
 80086a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f906 	bl	80088b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d006      	beq.n	80086ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2208      	movs	r2, #8
 80086c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8ff 	bl	80088cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d07b      	beq.n	80087d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d072      	beq.n	80087c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008704:	2b00      	cmp	r3, #0
 8008706:	d008      	beq.n	800871a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	f043 0302 	orr.w	r3, r3, #2
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	f043 0304 	orr.w	r3, r3, #4
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800873c:	2b00      	cmp	r3, #0
 800873e:	d043      	beq.n	80087c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03e      	beq.n	80087c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008750:	2b60      	cmp	r3, #96	@ 0x60
 8008752:	d02b      	beq.n	80087ac <HAL_CAN_IRQHandler+0x32a>
 8008754:	2b60      	cmp	r3, #96	@ 0x60
 8008756:	d82e      	bhi.n	80087b6 <HAL_CAN_IRQHandler+0x334>
 8008758:	2b50      	cmp	r3, #80	@ 0x50
 800875a:	d022      	beq.n	80087a2 <HAL_CAN_IRQHandler+0x320>
 800875c:	2b50      	cmp	r3, #80	@ 0x50
 800875e:	d82a      	bhi.n	80087b6 <HAL_CAN_IRQHandler+0x334>
 8008760:	2b40      	cmp	r3, #64	@ 0x40
 8008762:	d019      	beq.n	8008798 <HAL_CAN_IRQHandler+0x316>
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	d826      	bhi.n	80087b6 <HAL_CAN_IRQHandler+0x334>
 8008768:	2b30      	cmp	r3, #48	@ 0x30
 800876a:	d010      	beq.n	800878e <HAL_CAN_IRQHandler+0x30c>
 800876c:	2b30      	cmp	r3, #48	@ 0x30
 800876e:	d822      	bhi.n	80087b6 <HAL_CAN_IRQHandler+0x334>
 8008770:	2b10      	cmp	r3, #16
 8008772:	d002      	beq.n	800877a <HAL_CAN_IRQHandler+0x2f8>
 8008774:	2b20      	cmp	r3, #32
 8008776:	d005      	beq.n	8008784 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008778:	e01d      	b.n	80087b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8008782:	e019      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	f043 0310 	orr.w	r3, r3, #16
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800878c:	e014      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8008796:	e00f      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087a0:	e00a      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087aa:	e005      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80087b4:	e000      	b.n	80087b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80087b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80087c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2204      	movs	r2, #4
 80087ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d008      	beq.n	80087e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f87c 	bl	80088e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80087e8:	bf00      	nop
 80087ea:	3728      	adds	r7, #40	@ 0x28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <__NVIC_SetPriorityGrouping+0x44>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008910:	4013      	ands	r3, r2
 8008912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800891c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008926:	4a04      	ldr	r2, [pc, #16]	@ (8008938 <__NVIC_SetPriorityGrouping+0x44>)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	60d3      	str	r3, [r2, #12]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	e000ed00 	.word	0xe000ed00

0800893c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008940:	4b04      	ldr	r3, [pc, #16]	@ (8008954 <__NVIC_GetPriorityGrouping+0x18>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	f003 0307 	and.w	r3, r3, #7
}
 800894a:	4618      	mov	r0, r3
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	e000ed00 	.word	0xe000ed00

08008958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	db0b      	blt.n	8008982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	f003 021f 	and.w	r2, r3, #31
 8008970:	4907      	ldr	r1, [pc, #28]	@ (8008990 <__NVIC_EnableIRQ+0x38>)
 8008972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2001      	movs	r0, #1
 800897a:	fa00 f202 	lsl.w	r2, r0, r2
 800897e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	e000e100 	.word	0xe000e100

08008994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	db0a      	blt.n	80089be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	490c      	ldr	r1, [pc, #48]	@ (80089e0 <__NVIC_SetPriority+0x4c>)
 80089ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b2:	0112      	lsls	r2, r2, #4
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	440b      	add	r3, r1
 80089b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089bc:	e00a      	b.n	80089d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	4908      	ldr	r1, [pc, #32]	@ (80089e4 <__NVIC_SetPriority+0x50>)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	3b04      	subs	r3, #4
 80089cc:	0112      	lsls	r2, r2, #4
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	440b      	add	r3, r1
 80089d2:	761a      	strb	r2, [r3, #24]
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	e000e100 	.word	0xe000e100
 80089e4:	e000ed00 	.word	0xe000ed00

080089e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b089      	sub	sp, #36	@ 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f1c3 0307 	rsb	r3, r3, #7
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	bf28      	it	cs
 8008a06:	2304      	movcs	r3, #4
 8008a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	2b06      	cmp	r3, #6
 8008a10:	d902      	bls.n	8008a18 <NVIC_EncodePriority+0x30>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	3b03      	subs	r3, #3
 8008a16:	e000      	b.n	8008a1a <NVIC_EncodePriority+0x32>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	43da      	mvns	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a30:	f04f 31ff 	mov.w	r1, #4294967295
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	43d9      	mvns	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a40:	4313      	orrs	r3, r2
         );
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3724      	adds	r7, #36	@ 0x24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a60:	d301      	bcc.n	8008a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a62:	2301      	movs	r3, #1
 8008a64:	e00f      	b.n	8008a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a66:	4a0a      	ldr	r2, [pc, #40]	@ (8008a90 <SysTick_Config+0x40>)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a6e:	210f      	movs	r1, #15
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	f7ff ff8e 	bl	8008994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a78:	4b05      	ldr	r3, [pc, #20]	@ (8008a90 <SysTick_Config+0x40>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a7e:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <SysTick_Config+0x40>)
 8008a80:	2207      	movs	r2, #7
 8008a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	e000e010 	.word	0xe000e010

08008a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ff29 	bl	80088f4 <__NVIC_SetPriorityGrouping>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b086      	sub	sp, #24
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008abc:	f7ff ff3e 	bl	800893c <__NVIC_GetPriorityGrouping>
 8008ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7ff ff8e 	bl	80089e8 <NVIC_EncodePriority>
 8008acc:	4602      	mov	r2, r0
 8008ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ff5d 	bl	8008994 <__NVIC_SetPriority>
}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	4603      	mov	r3, r0
 8008aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff ff31 	bl	8008958 <__NVIC_EnableIRQ>
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff ffa2 	bl	8008a50 <SysTick_Config>
 8008b0c:	4603      	mov	r3, r0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b24:	f7ff fb82 	bl	800822c <HAL_GetTick>
 8008b28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d008      	beq.n	8008b48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2280      	movs	r2, #128	@ 0x80
 8008b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e052      	b.n	8008bee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0216 	bic.w	r2, r2, #22
 8008b56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695a      	ldr	r2, [r3, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <HAL_DMA_Abort+0x62>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0208 	bic.w	r2, r2, #8
 8008b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b98:	e013      	b.n	8008bc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b9a:	f7ff fb47 	bl	800822c <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	d90c      	bls.n	8008bc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e015      	b.n	8008bee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e4      	bne.n	8008b9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bd4:	223f      	movs	r2, #63	@ 0x3f
 8008bd6:	409a      	lsls	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d004      	beq.n	8008c14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2280      	movs	r2, #128	@ 0x80
 8008c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e00c      	b.n	8008c2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2205      	movs	r2, #5
 8008c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
	...

08008c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b089      	sub	sp, #36	@ 0x24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	61fb      	str	r3, [r7, #28]
 8008c56:	e177      	b.n	8008f48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c58:	2201      	movs	r2, #1
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4013      	ands	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	f040 8166 	bne.w	8008f42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d005      	beq.n	8008c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d130      	bne.n	8008cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	2203      	movs	r2, #3
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	091b      	lsrs	r3, r3, #4
 8008cda:	f003 0201 	and.w	r2, r3, #1
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d017      	beq.n	8008d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	2203      	movs	r2, #3
 8008d08:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4013      	ands	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d123      	bne.n	8008d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	08da      	lsrs	r2, r3, #3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3208      	adds	r2, #8
 8008d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	220f      	movs	r2, #15
 8008d50:	fa02 f303 	lsl.w	r3, r2, r3
 8008d54:	43db      	mvns	r3, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	08da      	lsrs	r2, r3, #3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3208      	adds	r2, #8
 8008d7a:	69b9      	ldr	r1, [r7, #24]
 8008d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	43db      	mvns	r3, r3
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	4013      	ands	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f003 0203 	and.w	r2, r3, #3
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80c0 	beq.w	8008f42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	4b66      	ldr	r3, [pc, #408]	@ (8008f60 <HAL_GPIO_Init+0x324>)
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dca:	4a65      	ldr	r2, [pc, #404]	@ (8008f60 <HAL_GPIO_Init+0x324>)
 8008dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008dd2:	4b63      	ldr	r3, [pc, #396]	@ (8008f60 <HAL_GPIO_Init+0x324>)
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dde:	4a61      	ldr	r2, [pc, #388]	@ (8008f64 <HAL_GPIO_Init+0x328>)
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	089b      	lsrs	r3, r3, #2
 8008de4:	3302      	adds	r3, #2
 8008de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	220f      	movs	r2, #15
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a58      	ldr	r2, [pc, #352]	@ (8008f68 <HAL_GPIO_Init+0x32c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d037      	beq.n	8008e7a <HAL_GPIO_Init+0x23e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a57      	ldr	r2, [pc, #348]	@ (8008f6c <HAL_GPIO_Init+0x330>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d031      	beq.n	8008e76 <HAL_GPIO_Init+0x23a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a56      	ldr	r2, [pc, #344]	@ (8008f70 <HAL_GPIO_Init+0x334>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d02b      	beq.n	8008e72 <HAL_GPIO_Init+0x236>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a55      	ldr	r2, [pc, #340]	@ (8008f74 <HAL_GPIO_Init+0x338>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d025      	beq.n	8008e6e <HAL_GPIO_Init+0x232>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a54      	ldr	r2, [pc, #336]	@ (8008f78 <HAL_GPIO_Init+0x33c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01f      	beq.n	8008e6a <HAL_GPIO_Init+0x22e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a53      	ldr	r2, [pc, #332]	@ (8008f7c <HAL_GPIO_Init+0x340>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d019      	beq.n	8008e66 <HAL_GPIO_Init+0x22a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a52      	ldr	r2, [pc, #328]	@ (8008f80 <HAL_GPIO_Init+0x344>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <HAL_GPIO_Init+0x226>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a51      	ldr	r2, [pc, #324]	@ (8008f84 <HAL_GPIO_Init+0x348>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00d      	beq.n	8008e5e <HAL_GPIO_Init+0x222>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a50      	ldr	r2, [pc, #320]	@ (8008f88 <HAL_GPIO_Init+0x34c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d007      	beq.n	8008e5a <HAL_GPIO_Init+0x21e>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8008f8c <HAL_GPIO_Init+0x350>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d101      	bne.n	8008e56 <HAL_GPIO_Init+0x21a>
 8008e52:	2309      	movs	r3, #9
 8008e54:	e012      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e56:	230a      	movs	r3, #10
 8008e58:	e010      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e5a:	2308      	movs	r3, #8
 8008e5c:	e00e      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e5e:	2307      	movs	r3, #7
 8008e60:	e00c      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e62:	2306      	movs	r3, #6
 8008e64:	e00a      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e66:	2305      	movs	r3, #5
 8008e68:	e008      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e6a:	2304      	movs	r3, #4
 8008e6c:	e006      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e004      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e002      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <HAL_GPIO_Init+0x240>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	f002 0203 	and.w	r2, r2, #3
 8008e82:	0092      	lsls	r2, r2, #2
 8008e84:	4093      	lsls	r3, r2
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e8c:	4935      	ldr	r1, [pc, #212]	@ (8008f64 <HAL_GPIO_Init+0x328>)
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	089b      	lsrs	r3, r3, #2
 8008e92:	3302      	adds	r3, #2
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ebe:	4a34      	ldr	r2, [pc, #208]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ec4:	4b32      	ldr	r3, [pc, #200]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ee8:	4a29      	ldr	r2, [pc, #164]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008eee:	4b28      	ldr	r3, [pc, #160]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	43db      	mvns	r3, r3
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	4013      	ands	r3, r2
 8008efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f12:	4a1f      	ldr	r2, [pc, #124]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	4013      	ands	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f3c:	4a14      	ldr	r2, [pc, #80]	@ (8008f90 <HAL_GPIO_Init+0x354>)
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3301      	adds	r3, #1
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	2b0f      	cmp	r3, #15
 8008f4c:	f67f ae84 	bls.w	8008c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	3724      	adds	r7, #36	@ 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40023800 	.word	0x40023800
 8008f64:	40013800 	.word	0x40013800
 8008f68:	40020000 	.word	0x40020000
 8008f6c:	40020400 	.word	0x40020400
 8008f70:	40020800 	.word	0x40020800
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	40021400 	.word	0x40021400
 8008f80:	40021800 	.word	0x40021800
 8008f84:	40021c00 	.word	0x40021c00
 8008f88:	40022000 	.word	0x40022000
 8008f8c:	40022400 	.word	0x40022400
 8008f90:	40013c00 	.word	0x40013c00

08008f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	807b      	strh	r3, [r7, #2]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fa4:	787b      	ldrb	r3, [r7, #1]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008faa:	887a      	ldrh	r2, [r7, #2]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fb0:	e003      	b.n	8008fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fb2:	887b      	ldrh	r3, [r7, #2]
 8008fb4:	041a      	lsls	r2, r3, #16
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	619a      	str	r2, [r3, #24]
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b085      	sub	sp, #20
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008fd8:	887a      	ldrh	r2, [r7, #2]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	041a      	lsls	r2, r3, #16
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	43d9      	mvns	r1, r3
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	619a      	str	r2, [r3, #24]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009006:	4b08      	ldr	r3, [pc, #32]	@ (8009028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d006      	beq.n	8009020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009012:	4a05      	ldr	r2, [pc, #20]	@ (8009028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fb66 	bl	80076ec <HAL_GPIO_EXTI_Callback>
  }
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	40013c00 	.word	0x40013c00

0800902c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e12b      	b.n	8009296 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fe fcb6 	bl	80079c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2224      	movs	r2, #36	@ 0x24
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0201 	bic.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800907e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800908e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009090:	f001 fcec 	bl	800aa6c <HAL_RCC_GetPCLK1Freq>
 8009094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4a81      	ldr	r2, [pc, #516]	@ (80092a0 <HAL_I2C_Init+0x274>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d807      	bhi.n	80090b0 <HAL_I2C_Init+0x84>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a80      	ldr	r2, [pc, #512]	@ (80092a4 <HAL_I2C_Init+0x278>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	bf94      	ite	ls
 80090a8:	2301      	movls	r3, #1
 80090aa:	2300      	movhi	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e006      	b.n	80090be <HAL_I2C_Init+0x92>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a7d      	ldr	r2, [pc, #500]	@ (80092a8 <HAL_I2C_Init+0x27c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	bf94      	ite	ls
 80090b8:	2301      	movls	r3, #1
 80090ba:	2300      	movhi	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e0e7      	b.n	8009296 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4a78      	ldr	r2, [pc, #480]	@ (80092ac <HAL_I2C_Init+0x280>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	0c9b      	lsrs	r3, r3, #18
 80090d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4a6a      	ldr	r2, [pc, #424]	@ (80092a0 <HAL_I2C_Init+0x274>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d802      	bhi.n	8009100 <HAL_I2C_Init+0xd4>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3301      	adds	r3, #1
 80090fe:	e009      	b.n	8009114 <HAL_I2C_Init+0xe8>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009106:	fb02 f303 	mul.w	r3, r2, r3
 800910a:	4a69      	ldr	r2, [pc, #420]	@ (80092b0 <HAL_I2C_Init+0x284>)
 800910c:	fba2 2303 	umull	r2, r3, r2, r3
 8009110:	099b      	lsrs	r3, r3, #6
 8009112:	3301      	adds	r3, #1
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	430b      	orrs	r3, r1
 800911a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009126:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	495c      	ldr	r1, [pc, #368]	@ (80092a0 <HAL_I2C_Init+0x274>)
 8009130:	428b      	cmp	r3, r1
 8009132:	d819      	bhi.n	8009168 <HAL_I2C_Init+0x13c>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	1e59      	subs	r1, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009142:	1c59      	adds	r1, r3, #1
 8009144:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009148:	400b      	ands	r3, r1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <HAL_I2C_Init+0x138>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	1e59      	subs	r1, r3, #1
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	fbb1 f3f3 	udiv	r3, r1, r3
 800915c:	3301      	adds	r3, #1
 800915e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009162:	e051      	b.n	8009208 <HAL_I2C_Init+0x1dc>
 8009164:	2304      	movs	r3, #4
 8009166:	e04f      	b.n	8009208 <HAL_I2C_Init+0x1dc>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d111      	bne.n	8009194 <HAL_I2C_Init+0x168>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	1e58      	subs	r0, r3, #1
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6859      	ldr	r1, [r3, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	440b      	add	r3, r1
 800917e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009182:	3301      	adds	r3, #1
 8009184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009188:	2b00      	cmp	r3, #0
 800918a:	bf0c      	ite	eq
 800918c:	2301      	moveq	r3, #1
 800918e:	2300      	movne	r3, #0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	e012      	b.n	80091ba <HAL_I2C_Init+0x18e>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1e58      	subs	r0, r3, #1
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	0099      	lsls	r1, r3, #2
 80091a4:	440b      	add	r3, r1
 80091a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091aa:	3301      	adds	r3, #1
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <HAL_I2C_Init+0x196>
 80091be:	2301      	movs	r3, #1
 80091c0:	e022      	b.n	8009208 <HAL_I2C_Init+0x1dc>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10e      	bne.n	80091e8 <HAL_I2C_Init+0x1bc>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	1e58      	subs	r0, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6859      	ldr	r1, [r3, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	440b      	add	r3, r1
 80091d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80091dc:	3301      	adds	r3, #1
 80091de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e6:	e00f      	b.n	8009208 <HAL_I2C_Init+0x1dc>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	1e58      	subs	r0, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6859      	ldr	r1, [r3, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	0099      	lsls	r1, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80091fe:	3301      	adds	r3, #1
 8009200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	6809      	ldr	r1, [r1, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69da      	ldr	r2, [r3, #28]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009236:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6911      	ldr	r1, [r2, #16]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68d2      	ldr	r2, [r2, #12]
 8009242:	4311      	orrs	r1, r2
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6812      	ldr	r2, [r2, #0]
 8009248:	430b      	orrs	r3, r1
 800924a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695a      	ldr	r2, [r3, #20]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	000186a0 	.word	0x000186a0
 80092a4:	001e847f 	.word	0x001e847f
 80092a8:	003d08ff 	.word	0x003d08ff
 80092ac:	431bde83 	.word	0x431bde83
 80092b0:	10624dd3 	.word	0x10624dd3

080092b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	4608      	mov	r0, r1
 80092be:	4611      	mov	r1, r2
 80092c0:	461a      	mov	r2, r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	817b      	strh	r3, [r7, #10]
 80092c6:	460b      	mov	r3, r1
 80092c8:	813b      	strh	r3, [r7, #8]
 80092ca:	4613      	mov	r3, r2
 80092cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092ce:	f7fe ffad 	bl	800822c <HAL_GetTick>
 80092d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b20      	cmp	r3, #32
 80092de:	f040 80d9 	bne.w	8009494 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	2319      	movs	r3, #25
 80092e8:	2201      	movs	r2, #1
 80092ea:	496d      	ldr	r1, [pc, #436]	@ (80094a0 <HAL_I2C_Mem_Write+0x1ec>)
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fc8b 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80092f8:	2302      	movs	r3, #2
 80092fa:	e0cc      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_I2C_Mem_Write+0x56>
 8009306:	2302      	movs	r3, #2
 8009308:	e0c5      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b01      	cmp	r3, #1
 800931e:	d007      	beq.n	8009330 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800933e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2221      	movs	r2, #33	@ 0x21
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2240      	movs	r2, #64	@ 0x40
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a3a      	ldr	r2, [r7, #32]
 800935a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4a4d      	ldr	r2, [pc, #308]	@ (80094a4 <HAL_I2C_Mem_Write+0x1f0>)
 8009370:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009372:	88f8      	ldrh	r0, [r7, #6]
 8009374:	893a      	ldrh	r2, [r7, #8]
 8009376:	8979      	ldrh	r1, [r7, #10]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	4603      	mov	r3, r0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 fac2 	bl	800990c <I2C_RequestMemoryWrite>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d052      	beq.n	8009434 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e081      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fd50 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00d      	beq.n	80093be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d107      	bne.n	80093ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e06b      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d11b      	bne.n	8009434 <HAL_I2C_Mem_Write+0x180>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009400:	2b00      	cmp	r3, #0
 8009402:	d017      	beq.n	8009434 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800942a:	b29b      	uxth	r3, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1aa      	bne.n	8009392 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 fd43 	bl	8009ecc <I2C_WaitOnBTFFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00d      	beq.n	8009468 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009450:	2b04      	cmp	r3, #4
 8009452:	d107      	bne.n	8009464 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009462:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e016      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	e000      	b.n	8009496 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009494:	2302      	movs	r3, #2
  }
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	00100002 	.word	0x00100002
 80094a4:	ffff0000 	.word	0xffff0000

080094a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	@ 0x30
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	817b      	strh	r3, [r7, #10]
 80094ba:	460b      	mov	r3, r1
 80094bc:	813b      	strh	r3, [r7, #8]
 80094be:	4613      	mov	r3, r2
 80094c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094c2:	f7fe feb3 	bl	800822c <HAL_GetTick>
 80094c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	f040 8214 	bne.w	80098fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	2319      	movs	r3, #25
 80094dc:	2201      	movs	r2, #1
 80094de:	497b      	ldr	r1, [pc, #492]	@ (80096cc <HAL_I2C_Mem_Read+0x224>)
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fb91 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
 80094ee:	e207      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d101      	bne.n	80094fe <HAL_I2C_Mem_Read+0x56>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e200      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	d007      	beq.n	8009524 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2222      	movs	r2, #34	@ 0x22
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2240      	movs	r2, #64	@ 0x40
 8009540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800954e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800955a:	b29a      	uxth	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4a5b      	ldr	r2, [pc, #364]	@ (80096d0 <HAL_I2C_Mem_Read+0x228>)
 8009564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009566:	88f8      	ldrh	r0, [r7, #6]
 8009568:	893a      	ldrh	r2, [r7, #8]
 800956a:	8979      	ldrh	r1, [r7, #10]
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4603      	mov	r3, r0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fa5e 	bl	8009a38 <I2C_RequestMemoryRead>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e1bc      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d113      	bne.n	80095b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800958e:	2300      	movs	r3, #0
 8009590:	623b      	str	r3, [r7, #32]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	623b      	str	r3, [r7, #32]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	623b      	str	r3, [r7, #32]
 80095a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e190      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d11b      	bne.n	80095f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	e170      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d11b      	bne.n	8009636 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800961c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800961e:	2300      	movs	r3, #0
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	e150      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800964c:	e144      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009652:	2b03      	cmp	r3, #3
 8009654:	f200 80f1 	bhi.w	800983a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965c:	2b01      	cmp	r3, #1
 800965e:	d123      	bne.n	80096a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009662:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fc79 	bl	8009f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e145      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80096a6:	e117      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d14e      	bne.n	800974e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	2200      	movs	r2, #0
 80096b8:	4906      	ldr	r1, [pc, #24]	@ (80096d4 <HAL_I2C_Mem_Read+0x22c>)
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 faa4 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e11a      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
 80096ca:	bf00      	nop
 80096cc:	00100002 	.word	0x00100002
 80096d0:	ffff0000 	.word	0xffff0000
 80096d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009724:	b2d2      	uxtb	r2, r2
 8009726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800974c:	e0c4      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	2200      	movs	r2, #0
 8009756:	496c      	ldr	r1, [pc, #432]	@ (8009908 <HAL_I2C_Mem_Read+0x460>)
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fa55 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e0cb      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	2200      	movs	r2, #0
 80097b2:	4955      	ldr	r1, [pc, #340]	@ (8009908 <HAL_I2C_Mem_Read+0x460>)
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 fa27 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e09d      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009838:	e04e      	b.n	80098d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800983a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800983c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 fb8c 	bl	8009f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e058      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d124      	bne.n	80098d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009892:	2b03      	cmp	r3, #3
 8009894:	d107      	bne.n	80098a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b0:	b2d2      	uxtb	r2, r2
 80098b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f47f aeb6 	bne.w	800964e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e000      	b.n	8009900 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80098fe:	2302      	movs	r3, #2
  }
}
 8009900:	4618      	mov	r0, r3
 8009902:	3728      	adds	r7, #40	@ 0x28
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	00010004 	.word	0x00010004

0800990c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	4608      	mov	r0, r1
 8009916:	4611      	mov	r1, r2
 8009918:	461a      	mov	r2, r3
 800991a:	4603      	mov	r3, r0
 800991c:	817b      	strh	r3, [r7, #10]
 800991e:	460b      	mov	r3, r1
 8009920:	813b      	strh	r3, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	2200      	movs	r2, #0
 800993e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 f960 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00d      	beq.n	800996a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995c:	d103      	bne.n	8009966 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009964:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e05f      	b.n	8009a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800996a:	897b      	ldrh	r3, [r7, #10]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	461a      	mov	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	6a3a      	ldr	r2, [r7, #32]
 800997e:	492d      	ldr	r1, [pc, #180]	@ (8009a34 <I2C_RequestMemoryWrite+0x128>)
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f9bb 	bl	8009cfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e04c      	b.n	8009a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a8:	6a39      	ldr	r1, [r7, #32]
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fa46 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00d      	beq.n	80099d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d107      	bne.n	80099ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e02b      	b.n	8009a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d105      	bne.n	80099e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099d8:	893b      	ldrh	r3, [r7, #8]
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	611a      	str	r2, [r3, #16]
 80099e2:	e021      	b.n	8009a28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099e4:	893b      	ldrh	r3, [r7, #8]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099f4:	6a39      	ldr	r1, [r7, #32]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fa20 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00d      	beq.n	8009a1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d107      	bne.n	8009a1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e005      	b.n	8009a2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	00010002 	.word	0x00010002

08009a38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	817b      	strh	r3, [r7, #10]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	813b      	strh	r3, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f8c2 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00d      	beq.n	8009aa6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a98:	d103      	bne.n	8009aa2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e0aa      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009aa6:	897b      	ldrh	r3, [r7, #10]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	6a3a      	ldr	r2, [r7, #32]
 8009aba:	4952      	ldr	r1, [pc, #328]	@ (8009c04 <I2C_RequestMemoryRead+0x1cc>)
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 f91d 	bl	8009cfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e097      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009acc:	2300      	movs	r3, #0
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae4:	6a39      	ldr	r1, [r7, #32]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f9a8 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d107      	bne.n	8009b0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e076      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d105      	bne.n	8009b20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b14:	893b      	ldrh	r3, [r7, #8]
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	611a      	str	r2, [r3, #16]
 8009b1e:	e021      	b.n	8009b64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b20:	893b      	ldrh	r3, [r7, #8]
 8009b22:	0a1b      	lsrs	r3, r3, #8
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b30:	6a39      	ldr	r1, [r7, #32]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f982 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d107      	bne.n	8009b56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e050      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b5a:	893b      	ldrh	r3, [r7, #8]
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b66:	6a39      	ldr	r1, [r7, #32]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f967 	bl	8009e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00d      	beq.n	8009b90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d107      	bne.n	8009b8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e035      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f82b 	bl	8009c08 <I2C_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00d      	beq.n	8009bd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc6:	d103      	bne.n	8009bd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e013      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009bd4:	897b      	ldrh	r3, [r7, #10]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f043 0301 	orr.w	r3, r3, #1
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	6a3a      	ldr	r2, [r7, #32]
 8009be8:	4906      	ldr	r1, [pc, #24]	@ (8009c04 <I2C_RequestMemoryRead+0x1cc>)
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 f886 	bl	8009cfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	00010002 	.word	0x00010002

08009c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c18:	e048      	b.n	8009cac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d044      	beq.n	8009cac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c22:	f7fe fb03 	bl	800822c <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d302      	bcc.n	8009c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d139      	bne.n	8009cac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10d      	bne.n	8009c5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf0c      	ite	eq
 8009c54:	2301      	moveq	r3, #1
 8009c56:	2300      	movne	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	e00c      	b.n	8009c78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	43da      	mvns	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	bf0c      	ite	eq
 8009c70:	2301      	moveq	r3, #1
 8009c72:	2300      	movne	r3, #0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d116      	bne.n	8009cac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c98:	f043 0220 	orr.w	r2, r3, #32
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e023      	b.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	0c1b      	lsrs	r3, r3, #16
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d10d      	bne.n	8009cd2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	43da      	mvns	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bf0c      	ite	eq
 8009cc8:	2301      	moveq	r3, #1
 8009cca:	2300      	movne	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	e00c      	b.n	8009cec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	43da      	mvns	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2301      	moveq	r3, #1
 8009ce6:	2300      	movne	r3, #0
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	461a      	mov	r2, r3
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d093      	beq.n	8009c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d0a:	e071      	b.n	8009df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1a:	d123      	bne.n	8009d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d50:	f043 0204 	orr.w	r2, r3, #4
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e067      	b.n	8009e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d041      	beq.n	8009df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d6c:	f7fe fa5e 	bl	800822c <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d302      	bcc.n	8009d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d136      	bne.n	8009df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	0c1b      	lsrs	r3, r3, #16
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d10c      	bne.n	8009da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	43da      	mvns	r2, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4013      	ands	r3, r2
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf14      	ite	ne
 8009d9e:	2301      	movne	r3, #1
 8009da0:	2300      	moveq	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	e00b      	b.n	8009dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	43da      	mvns	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4013      	ands	r3, r2
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bf14      	ite	ne
 8009db8:	2301      	movne	r3, #1
 8009dba:	2300      	moveq	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ddc:	f043 0220 	orr.w	r2, r3, #32
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e021      	b.n	8009e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10c      	bne.n	8009e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	43da      	mvns	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4013      	ands	r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bf14      	ite	ne
 8009e0c:	2301      	movne	r3, #1
 8009e0e:	2300      	moveq	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	e00b      	b.n	8009e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bf14      	ite	ne
 8009e26:	2301      	movne	r3, #1
 8009e28:	2300      	moveq	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f47f af6d 	bne.w	8009d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e48:	e034      	b.n	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f8e3 	bl	800a016 <I2C_IsAcknowledgeFailed>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e034      	b.n	8009ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d028      	beq.n	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e62:	f7fe f9e3 	bl	800822c <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d302      	bcc.n	8009e78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11d      	bne.n	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e82:	2b80      	cmp	r3, #128	@ 0x80
 8009e84:	d016      	beq.n	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	f043 0220 	orr.w	r2, r3, #32
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e007      	b.n	8009ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ebe:	2b80      	cmp	r3, #128	@ 0x80
 8009ec0:	d1c3      	bne.n	8009e4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ed8:	e034      	b.n	8009f44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 f89b 	bl	800a016 <I2C_IsAcknowledgeFailed>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e034      	b.n	8009f54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef0:	d028      	beq.n	8009f44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef2:	f7fe f99b 	bl	800822c <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d302      	bcc.n	8009f08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11d      	bne.n	8009f44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d016      	beq.n	8009f44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	f043 0220 	orr.w	r2, r3, #32
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e007      	b.n	8009f54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d1c3      	bne.n	8009eda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f68:	e049      	b.n	8009ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b10      	cmp	r3, #16
 8009f76:	d119      	bne.n	8009fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f06f 0210 	mvn.w	r2, #16
 8009f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e030      	b.n	800a00e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fac:	f7fe f93e 	bl	800822c <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d302      	bcc.n	8009fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11d      	bne.n	8009ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fcc:	2b40      	cmp	r3, #64	@ 0x40
 8009fce:	d016      	beq.n	8009ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fea:	f043 0220 	orr.w	r2, r3, #32
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e007      	b.n	800a00e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a008:	2b40      	cmp	r3, #64	@ 0x40
 800a00a:	d1ae      	bne.n	8009f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a02c:	d11b      	bne.n	800a066 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a036:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a052:	f043 0204 	orr.w	r2, r3, #4
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b20      	cmp	r3, #32
 800a088:	d129      	bne.n	800a0de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2224      	movs	r2, #36	@ 0x24
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0201 	bic.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0210 	bic.w	r2, r2, #16
 800a0b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e000      	b.n	800a0e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a0de:	2302      	movs	r3, #2
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b20      	cmp	r3, #32
 800a104:	d12a      	bne.n	800a15c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2224      	movs	r2, #36	@ 0x24
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f022 0201 	bic.w	r2, r2, #1
 800a11c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a124:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	f023 030f 	bic.w	r3, r3, #15
 800a12c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	b29a      	uxth	r2, r3
 800a132:	89fb      	ldrh	r3, [r7, #14]
 800a134:	4313      	orrs	r3, r2
 800a136:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	89fa      	ldrh	r2, [r7, #14]
 800a13e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 0201 	orr.w	r2, r2, #1
 800a14e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	e000      	b.n	800a15e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a15c:	2302      	movs	r3, #2
  }
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a176:	2300      	movs	r3, #0
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4b20      	ldr	r3, [pc, #128]	@ (800a1fc <HAL_PWREx_EnableOverDrive+0x90>)
 800a17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17e:	4a1f      	ldr	r2, [pc, #124]	@ (800a1fc <HAL_PWREx_EnableOverDrive+0x90>)
 800a180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a184:	6413      	str	r3, [r2, #64]	@ 0x40
 800a186:	4b1d      	ldr	r3, [pc, #116]	@ (800a1fc <HAL_PWREx_EnableOverDrive+0x90>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a192:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <HAL_PWREx_EnableOverDrive+0x94>)
 800a194:	2201      	movs	r2, #1
 800a196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a198:	f7fe f848 	bl	800822c <HAL_GetTick>
 800a19c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a19e:	e009      	b.n	800a1b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a1a0:	f7fe f844 	bl	800822c <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1ae:	d901      	bls.n	800a1b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e01f      	b.n	800a1f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a1b4:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <HAL_PWREx_EnableOverDrive+0x98>)
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c0:	d1ee      	bne.n	800a1a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a1c2:	4b11      	ldr	r3, [pc, #68]	@ (800a208 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1c8:	f7fe f830 	bl	800822c <HAL_GetTick>
 800a1cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a1ce:	e009      	b.n	800a1e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a1d0:	f7fe f82c 	bl	800822c <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1de:	d901      	bls.n	800a1e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e007      	b.n	800a1f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a1e4:	4b07      	ldr	r3, [pc, #28]	@ (800a204 <HAL_PWREx_EnableOverDrive+0x98>)
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1f0:	d1ee      	bne.n	800a1d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40023800 	.word	0x40023800
 800a200:	420e0040 	.word	0x420e0040
 800a204:	40007000 	.word	0x40007000
 800a208:	420e0044 	.word	0x420e0044

0800a20c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e267      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d075      	beq.n	800a316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a22a:	4b88      	ldr	r3, [pc, #544]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f003 030c 	and.w	r3, r3, #12
 800a232:	2b04      	cmp	r3, #4
 800a234:	d00c      	beq.n	800a250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a236:	4b85      	ldr	r3, [pc, #532]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a23e:	2b08      	cmp	r3, #8
 800a240:	d112      	bne.n	800a268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a242:	4b82      	ldr	r3, [pc, #520]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a24a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a24e:	d10b      	bne.n	800a268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a250:	4b7e      	ldr	r3, [pc, #504]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d05b      	beq.n	800a314 <HAL_RCC_OscConfig+0x108>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d157      	bne.n	800a314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e242      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a270:	d106      	bne.n	800a280 <HAL_RCC_OscConfig+0x74>
 800a272:	4b76      	ldr	r3, [pc, #472]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a75      	ldr	r2, [pc, #468]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a27c:	6013      	str	r3, [r2, #0]
 800a27e:	e01d      	b.n	800a2bc <HAL_RCC_OscConfig+0xb0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a288:	d10c      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x98>
 800a28a:	4b70      	ldr	r3, [pc, #448]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a6f      	ldr	r2, [pc, #444]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	4b6d      	ldr	r3, [pc, #436]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a6c      	ldr	r2, [pc, #432]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a29c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	e00b      	b.n	800a2bc <HAL_RCC_OscConfig+0xb0>
 800a2a4:	4b69      	ldr	r3, [pc, #420]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a68      	ldr	r2, [pc, #416]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a2aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	4b66      	ldr	r3, [pc, #408]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a65      	ldr	r2, [pc, #404]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a2b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d013      	beq.n	800a2ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2c4:	f7fd ffb2 	bl	800822c <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ca:	e008      	b.n	800a2de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2cc:	f7fd ffae 	bl	800822c <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b64      	cmp	r3, #100	@ 0x64
 800a2d8:	d901      	bls.n	800a2de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e207      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2de:	4b5b      	ldr	r3, [pc, #364]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0f0      	beq.n	800a2cc <HAL_RCC_OscConfig+0xc0>
 800a2ea:	e014      	b.n	800a316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2ec:	f7fd ff9e 	bl	800822c <HAL_GetTick>
 800a2f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2f2:	e008      	b.n	800a306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2f4:	f7fd ff9a 	bl	800822c <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	2b64      	cmp	r3, #100	@ 0x64
 800a300:	d901      	bls.n	800a306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e1f3      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a306:	4b51      	ldr	r3, [pc, #324]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f0      	bne.n	800a2f4 <HAL_RCC_OscConfig+0xe8>
 800a312:	e000      	b.n	800a316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d063      	beq.n	800a3ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a322:	4b4a      	ldr	r3, [pc, #296]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f003 030c 	and.w	r3, r3, #12
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a32e:	4b47      	ldr	r3, [pc, #284]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a336:	2b08      	cmp	r3, #8
 800a338:	d11c      	bne.n	800a374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a33a:	4b44      	ldr	r3, [pc, #272]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d116      	bne.n	800a374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a346:	4b41      	ldr	r3, [pc, #260]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <HAL_RCC_OscConfig+0x152>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d001      	beq.n	800a35e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e1c7      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a35e:	4b3b      	ldr	r3, [pc, #236]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4937      	ldr	r1, [pc, #220]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a372:	e03a      	b.n	800a3ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d020      	beq.n	800a3be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a37c:	4b34      	ldr	r3, [pc, #208]	@ (800a450 <HAL_RCC_OscConfig+0x244>)
 800a37e:	2201      	movs	r2, #1
 800a380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a382:	f7fd ff53 	bl	800822c <HAL_GetTick>
 800a386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a388:	e008      	b.n	800a39c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a38a:	f7fd ff4f 	bl	800822c <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d901      	bls.n	800a39c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e1a8      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a39c:	4b2b      	ldr	r3, [pc, #172]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0f0      	beq.n	800a38a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3a8:	4b28      	ldr	r3, [pc, #160]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	4925      	ldr	r1, [pc, #148]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]
 800a3bc:	e015      	b.n	800a3ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3be:	4b24      	ldr	r3, [pc, #144]	@ (800a450 <HAL_RCC_OscConfig+0x244>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c4:	f7fd ff32 	bl	800822c <HAL_GetTick>
 800a3c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3ca:	e008      	b.n	800a3de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3cc:	f7fd ff2e 	bl	800822c <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e187      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3de:	4b1b      	ldr	r3, [pc, #108]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1f0      	bne.n	800a3cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d036      	beq.n	800a464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d016      	beq.n	800a42c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3fe:	4b15      	ldr	r3, [pc, #84]	@ (800a454 <HAL_RCC_OscConfig+0x248>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a404:	f7fd ff12 	bl	800822c <HAL_GetTick>
 800a408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a40a:	e008      	b.n	800a41e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a40c:	f7fd ff0e 	bl	800822c <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e167      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a41e:	4b0b      	ldr	r3, [pc, #44]	@ (800a44c <HAL_RCC_OscConfig+0x240>)
 800a420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f0      	beq.n	800a40c <HAL_RCC_OscConfig+0x200>
 800a42a:	e01b      	b.n	800a464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a42c:	4b09      	ldr	r3, [pc, #36]	@ (800a454 <HAL_RCC_OscConfig+0x248>)
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a432:	f7fd fefb 	bl	800822c <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a438:	e00e      	b.n	800a458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a43a:	f7fd fef7 	bl	800822c <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d907      	bls.n	800a458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e150      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
 800a44c:	40023800 	.word	0x40023800
 800a450:	42470000 	.word	0x42470000
 800a454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a458:	4b88      	ldr	r3, [pc, #544]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a45a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ea      	bne.n	800a43a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8097 	beq.w	800a5a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a472:	2300      	movs	r3, #0
 800a474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a476:	4b81      	ldr	r3, [pc, #516]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10f      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a482:	2300      	movs	r3, #0
 800a484:	60bb      	str	r3, [r7, #8]
 800a486:	4b7d      	ldr	r3, [pc, #500]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48a:	4a7c      	ldr	r2, [pc, #496]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a48c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a490:	6413      	str	r3, [r2, #64]	@ 0x40
 800a492:	4b7a      	ldr	r3, [pc, #488]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a49a:	60bb      	str	r3, [r7, #8]
 800a49c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a2:	4b77      	ldr	r3, [pc, #476]	@ (800a680 <HAL_RCC_OscConfig+0x474>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d118      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a4ae:	4b74      	ldr	r3, [pc, #464]	@ (800a680 <HAL_RCC_OscConfig+0x474>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a73      	ldr	r2, [pc, #460]	@ (800a680 <HAL_RCC_OscConfig+0x474>)
 800a4b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4ba:	f7fd feb7 	bl	800822c <HAL_GetTick>
 800a4be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4c0:	e008      	b.n	800a4d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4c2:	f7fd feb3 	bl	800822c <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d901      	bls.n	800a4d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e10c      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4d4:	4b6a      	ldr	r3, [pc, #424]	@ (800a680 <HAL_RCC_OscConfig+0x474>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0f0      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d106      	bne.n	800a4f6 <HAL_RCC_OscConfig+0x2ea>
 800a4e8:	4b64      	ldr	r3, [pc, #400]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ec:	4a63      	ldr	r2, [pc, #396]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4f4:	e01c      	b.n	800a530 <HAL_RCC_OscConfig+0x324>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d10c      	bne.n	800a518 <HAL_RCC_OscConfig+0x30c>
 800a4fe:	4b5f      	ldr	r3, [pc, #380]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a502:	4a5e      	ldr	r2, [pc, #376]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a504:	f043 0304 	orr.w	r3, r3, #4
 800a508:	6713      	str	r3, [r2, #112]	@ 0x70
 800a50a:	4b5c      	ldr	r3, [pc, #368]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a50e:	4a5b      	ldr	r2, [pc, #364]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	6713      	str	r3, [r2, #112]	@ 0x70
 800a516:	e00b      	b.n	800a530 <HAL_RCC_OscConfig+0x324>
 800a518:	4b58      	ldr	r3, [pc, #352]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a51c:	4a57      	ldr	r2, [pc, #348]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	6713      	str	r3, [r2, #112]	@ 0x70
 800a524:	4b55      	ldr	r3, [pc, #340]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a528:	4a54      	ldr	r2, [pc, #336]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a52a:	f023 0304 	bic.w	r3, r3, #4
 800a52e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d015      	beq.n	800a564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a538:	f7fd fe78 	bl	800822c <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a53e:	e00a      	b.n	800a556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a540:	f7fd fe74 	bl	800822c <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a54e:	4293      	cmp	r3, r2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e0cb      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a556:	4b49      	ldr	r3, [pc, #292]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0ee      	beq.n	800a540 <HAL_RCC_OscConfig+0x334>
 800a562:	e014      	b.n	800a58e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a564:	f7fd fe62 	bl	800822c <HAL_GetTick>
 800a568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a56a:	e00a      	b.n	800a582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56c:	f7fd fe5e 	bl	800822c <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e0b5      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a582:	4b3e      	ldr	r3, [pc, #248]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1ee      	bne.n	800a56c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d105      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a594:	4b39      	ldr	r3, [pc, #228]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a598:	4a38      	ldr	r2, [pc, #224]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a59a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a59e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80a1 	beq.w	800a6ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a5aa:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f003 030c 	and.w	r3, r3, #12
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d05c      	beq.n	800a670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d141      	bne.n	800a642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5be:	4b31      	ldr	r3, [pc, #196]	@ (800a684 <HAL_RCC_OscConfig+0x478>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5c4:	f7fd fe32 	bl	800822c <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ca:	e008      	b.n	800a5de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5cc:	f7fd fe2e 	bl	800822c <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e087      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5de:	4b27      	ldr	r3, [pc, #156]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f0      	bne.n	800a5cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69da      	ldr	r2, [r3, #28]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f8:	019b      	lsls	r3, r3, #6
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a600:	085b      	lsrs	r3, r3, #1
 800a602:	3b01      	subs	r3, #1
 800a604:	041b      	lsls	r3, r3, #16
 800a606:	431a      	orrs	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60c:	061b      	lsls	r3, r3, #24
 800a60e:	491b      	ldr	r1, [pc, #108]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a610:	4313      	orrs	r3, r2
 800a612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a614:	4b1b      	ldr	r3, [pc, #108]	@ (800a684 <HAL_RCC_OscConfig+0x478>)
 800a616:	2201      	movs	r2, #1
 800a618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a61a:	f7fd fe07 	bl	800822c <HAL_GetTick>
 800a61e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a620:	e008      	b.n	800a634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a622:	f7fd fe03 	bl	800822c <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d901      	bls.n	800a634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e05c      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a634:	4b11      	ldr	r3, [pc, #68]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0f0      	beq.n	800a622 <HAL_RCC_OscConfig+0x416>
 800a640:	e054      	b.n	800a6ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a642:	4b10      	ldr	r3, [pc, #64]	@ (800a684 <HAL_RCC_OscConfig+0x478>)
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a648:	f7fd fdf0 	bl	800822c <HAL_GetTick>
 800a64c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a650:	f7fd fdec 	bl	800822c <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e045      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a662:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <HAL_RCC_OscConfig+0x470>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1f0      	bne.n	800a650 <HAL_RCC_OscConfig+0x444>
 800a66e:	e03d      	b.n	800a6ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d107      	bne.n	800a688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e038      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
 800a67c:	40023800 	.word	0x40023800
 800a680:	40007000 	.word	0x40007000
 800a684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a688:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <HAL_RCC_OscConfig+0x4ec>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d028      	beq.n	800a6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d121      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d11a      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d111      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ce:	085b      	lsrs	r3, r3, #1
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d107      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d001      	beq.n	800a6ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40023800 	.word	0x40023800

0800a6fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0cc      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a710:	4b68      	ldr	r3, [pc, #416]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 030f 	and.w	r3, r3, #15
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d90c      	bls.n	800a738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71e:	4b65      	ldr	r3, [pc, #404]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a726:	4b63      	ldr	r3, [pc, #396]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 030f 	and.w	r3, r3, #15
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d001      	beq.n	800a738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e0b8      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d020      	beq.n	800a786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a750:	4b59      	ldr	r3, [pc, #356]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4a58      	ldr	r2, [pc, #352]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a75a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0308 	and.w	r3, r3, #8
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a768:	4b53      	ldr	r3, [pc, #332]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	4a52      	ldr	r2, [pc, #328]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a76e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a774:	4b50      	ldr	r3, [pc, #320]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	494d      	ldr	r1, [pc, #308]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a782:	4313      	orrs	r3, r2
 800a784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d044      	beq.n	800a81c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d107      	bne.n	800a7aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a79a:	4b47      	ldr	r3, [pc, #284]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d119      	bne.n	800a7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e07f      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d003      	beq.n	800a7ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d107      	bne.n	800a7ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e06f      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7ca:	4b3b      	ldr	r3, [pc, #236]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e067      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7da:	4b37      	ldr	r3, [pc, #220]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f023 0203 	bic.w	r2, r3, #3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	4934      	ldr	r1, [pc, #208]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7ec:	f7fd fd1e 	bl	800822c <HAL_GetTick>
 800a7f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f2:	e00a      	b.n	800a80a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7f4:	f7fd fd1a 	bl	800822c <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a802:	4293      	cmp	r3, r2
 800a804:	d901      	bls.n	800a80a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e04f      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a80a:	4b2b      	ldr	r3, [pc, #172]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 020c 	and.w	r2, r3, #12
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	429a      	cmp	r2, r3
 800a81a:	d1eb      	bne.n	800a7f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a81c:	4b25      	ldr	r3, [pc, #148]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 030f 	and.w	r3, r3, #15
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d20c      	bcs.n	800a844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a82a:	4b22      	ldr	r3, [pc, #136]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a832:	4b20      	ldr	r3, [pc, #128]	@ (800a8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 030f 	and.w	r3, r3, #15
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d001      	beq.n	800a844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e032      	b.n	800a8aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d008      	beq.n	800a862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a850:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	4916      	ldr	r1, [pc, #88]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0308 	and.w	r3, r3, #8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a86e:	4b12      	ldr	r3, [pc, #72]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	490e      	ldr	r1, [pc, #56]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a882:	f000 f821 	bl	800a8c8 <HAL_RCC_GetSysClockFreq>
 800a886:	4602      	mov	r2, r0
 800a888:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	091b      	lsrs	r3, r3, #4
 800a88e:	f003 030f 	and.w	r3, r3, #15
 800a892:	490a      	ldr	r1, [pc, #40]	@ (800a8bc <HAL_RCC_ClockConfig+0x1c0>)
 800a894:	5ccb      	ldrb	r3, [r1, r3]
 800a896:	fa22 f303 	lsr.w	r3, r2, r3
 800a89a:	4a09      	ldr	r2, [pc, #36]	@ (800a8c0 <HAL_RCC_ClockConfig+0x1c4>)
 800a89c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a89e:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <HAL_RCC_ClockConfig+0x1c8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fc7e 	bl	80081a4 <HAL_InitTick>

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	40023c00 	.word	0x40023c00
 800a8b8:	40023800 	.word	0x40023800
 800a8bc:	0800e844 	.word	0x0800e844
 800a8c0:	20000994 	.word	0x20000994
 800a8c4:	20000998 	.word	0x20000998

0800a8c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8cc:	b090      	sub	sp, #64	@ 0x40
 800a8ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8e0:	4b59      	ldr	r3, [pc, #356]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f003 030c 	and.w	r3, r3, #12
 800a8e8:	2b08      	cmp	r3, #8
 800a8ea:	d00d      	beq.n	800a908 <HAL_RCC_GetSysClockFreq+0x40>
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	f200 80a1 	bhi.w	800aa34 <HAL_RCC_GetSysClockFreq+0x16c>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0x34>
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d003      	beq.n	800a902 <HAL_RCC_GetSysClockFreq+0x3a>
 800a8fa:	e09b      	b.n	800aa34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8fc:	4b53      	ldr	r3, [pc, #332]	@ (800aa4c <HAL_RCC_GetSysClockFreq+0x184>)
 800a8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a900:	e09b      	b.n	800aa3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a902:	4b53      	ldr	r3, [pc, #332]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x188>)
 800a904:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a906:	e098      	b.n	800aa3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a908:	4b4f      	ldr	r3, [pc, #316]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a910:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a912:	4b4d      	ldr	r3, [pc, #308]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d028      	beq.n	800a970 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a91e:	4b4a      	ldr	r3, [pc, #296]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	099b      	lsrs	r3, r3, #6
 800a924:	2200      	movs	r2, #0
 800a926:	623b      	str	r3, [r7, #32]
 800a928:	627a      	str	r2, [r7, #36]	@ 0x24
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a930:	2100      	movs	r1, #0
 800a932:	4b47      	ldr	r3, [pc, #284]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x188>)
 800a934:	fb03 f201 	mul.w	r2, r3, r1
 800a938:	2300      	movs	r3, #0
 800a93a:	fb00 f303 	mul.w	r3, r0, r3
 800a93e:	4413      	add	r3, r2
 800a940:	4a43      	ldr	r2, [pc, #268]	@ (800aa50 <HAL_RCC_GetSysClockFreq+0x188>)
 800a942:	fba0 1202 	umull	r1, r2, r0, r2
 800a946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a948:	460a      	mov	r2, r1
 800a94a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a94c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a94e:	4413      	add	r3, r2
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a954:	2200      	movs	r2, #0
 800a956:	61bb      	str	r3, [r7, #24]
 800a958:	61fa      	str	r2, [r7, #28]
 800a95a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a95e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a962:	f7f6 f999 	bl	8000c98 <__aeabi_uldivmod>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4613      	mov	r3, r2
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a96e:	e053      	b.n	800aa18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a970:	4b35      	ldr	r3, [pc, #212]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	099b      	lsrs	r3, r3, #6
 800a976:	2200      	movs	r2, #0
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	617a      	str	r2, [r7, #20]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a982:	f04f 0b00 	mov.w	fp, #0
 800a986:	4652      	mov	r2, sl
 800a988:	465b      	mov	r3, fp
 800a98a:	f04f 0000 	mov.w	r0, #0
 800a98e:	f04f 0100 	mov.w	r1, #0
 800a992:	0159      	lsls	r1, r3, #5
 800a994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a998:	0150      	lsls	r0, r2, #5
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	ebb2 080a 	subs.w	r8, r2, sl
 800a9a2:	eb63 090b 	sbc.w	r9, r3, fp
 800a9a6:	f04f 0200 	mov.w	r2, #0
 800a9aa:	f04f 0300 	mov.w	r3, #0
 800a9ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a9b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a9b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a9ba:	ebb2 0408 	subs.w	r4, r2, r8
 800a9be:	eb63 0509 	sbc.w	r5, r3, r9
 800a9c2:	f04f 0200 	mov.w	r2, #0
 800a9c6:	f04f 0300 	mov.w	r3, #0
 800a9ca:	00eb      	lsls	r3, r5, #3
 800a9cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9d0:	00e2      	lsls	r2, r4, #3
 800a9d2:	4614      	mov	r4, r2
 800a9d4:	461d      	mov	r5, r3
 800a9d6:	eb14 030a 	adds.w	r3, r4, sl
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	eb45 030b 	adc.w	r3, r5, fp
 800a9e0:	607b      	str	r3, [r7, #4]
 800a9e2:	f04f 0200 	mov.w	r2, #0
 800a9e6:	f04f 0300 	mov.w	r3, #0
 800a9ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	028b      	lsls	r3, r1, #10
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	028a      	lsls	r2, r1, #10
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	2200      	movs	r2, #0
 800aa04:	60bb      	str	r3, [r7, #8]
 800aa06:	60fa      	str	r2, [r7, #12]
 800aa08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa0c:	f7f6 f944 	bl	8000c98 <__aeabi_uldivmod>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4613      	mov	r3, r2
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aa18:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	3301      	adds	r3, #1
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800aa28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa32:	e002      	b.n	800aa3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa34:	4b05      	ldr	r3, [pc, #20]	@ (800aa4c <HAL_RCC_GetSysClockFreq+0x184>)
 800aa36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa38:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3740      	adds	r7, #64	@ 0x40
 800aa40:	46bd      	mov	sp, r7
 800aa42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa46:	bf00      	nop
 800aa48:	40023800 	.word	0x40023800
 800aa4c:	00f42400 	.word	0x00f42400
 800aa50:	017d7840 	.word	0x017d7840

0800aa54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa58:	4b03      	ldr	r3, [pc, #12]	@ (800aa68 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20000994 	.word	0x20000994

0800aa6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa70:	f7ff fff0 	bl	800aa54 <HAL_RCC_GetHCLKFreq>
 800aa74:	4602      	mov	r2, r0
 800aa76:	4b05      	ldr	r3, [pc, #20]	@ (800aa8c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	0a9b      	lsrs	r3, r3, #10
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	4903      	ldr	r1, [pc, #12]	@ (800aa90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa82:	5ccb      	ldrb	r3, [r1, r3]
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	40023800 	.word	0x40023800
 800aa90:	0800e854 	.word	0x0800e854

0800aa94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa98:	f7ff ffdc 	bl	800aa54 <HAL_RCC_GetHCLKFreq>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	4b05      	ldr	r3, [pc, #20]	@ (800aab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	0b5b      	lsrs	r3, r3, #13
 800aaa4:	f003 0307 	and.w	r3, r3, #7
 800aaa8:	4903      	ldr	r1, [pc, #12]	@ (800aab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aaaa:	5ccb      	ldrb	r3, [r1, r3]
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	40023800 	.word	0x40023800
 800aab8:	0800e854 	.word	0x0800e854

0800aabc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e07b      	b.n	800abc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d108      	bne.n	800aae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aade:	d009      	beq.n	800aaf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	61da      	str	r2, [r3, #28]
 800aae6:	e005      	b.n	800aaf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fd f80c 	bl	8007b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab78:	ea42 0103 	orr.w	r1, r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	0c1b      	lsrs	r3, r3, #16
 800ab92:	f003 0104 	and.w	r1, r3, #4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9a:	f003 0210 	and.w	r2, r3, #16
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	69da      	ldr	r2, [r3, #28]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b088      	sub	sp, #32
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	60b9      	str	r1, [r7, #8]
 800abd8:	603b      	str	r3, [r7, #0]
 800abda:	4613      	mov	r3, r2
 800abdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abde:	f7fd fb25 	bl	800822c <HAL_GetTick>
 800abe2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800abe4:	88fb      	ldrh	r3, [r7, #6]
 800abe6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d001      	beq.n	800abf8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800abf4:	2302      	movs	r3, #2
 800abf6:	e12a      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <HAL_SPI_Transmit+0x36>
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e122      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <HAL_SPI_Transmit+0x48>
 800ac12:	2302      	movs	r3, #2
 800ac14:	e11b      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2203      	movs	r2, #3
 800ac22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	88fa      	ldrh	r2, [r7, #6]
 800ac36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	88fa      	ldrh	r2, [r7, #6]
 800ac3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac64:	d10f      	bne.n	800ac86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac90:	2b40      	cmp	r3, #64	@ 0x40
 800ac92:	d007      	beq.n	800aca4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acac:	d152      	bne.n	800ad54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d002      	beq.n	800acbc <HAL_SPI_Transmit+0xee>
 800acb6:	8b7b      	ldrh	r3, [r7, #26]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d145      	bne.n	800ad48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc0:	881a      	ldrh	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800accc:	1c9a      	adds	r2, r3, #2
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ace0:	e032      	b.n	800ad48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 0302 	and.w	r3, r3, #2
 800acec:	2b02      	cmp	r3, #2
 800acee:	d112      	bne.n	800ad16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf4:	881a      	ldrh	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad00:	1c9a      	adds	r2, r3, #2
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ad14:	e018      	b.n	800ad48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad16:	f7fd fa89 	bl	800822c <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d803      	bhi.n	800ad2e <HAL_SPI_Transmit+0x160>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2c:	d102      	bne.n	800ad34 <HAL_SPI_Transmit+0x166>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e082      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1c7      	bne.n	800ace2 <HAL_SPI_Transmit+0x114>
 800ad52:	e053      	b.n	800adfc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <HAL_SPI_Transmit+0x194>
 800ad5c:	8b7b      	ldrh	r3, [r7, #26]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d147      	bne.n	800adf2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ad88:	e033      	b.n	800adf2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d113      	bne.n	800adc0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	7812      	ldrb	r2, [r2, #0]
 800ada4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	b29a      	uxth	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800adbe:	e018      	b.n	800adf2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adc0:	f7fd fa34 	bl	800822c <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d803      	bhi.n	800add8 <HAL_SPI_Transmit+0x20a>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d102      	bne.n	800adde <HAL_SPI_Transmit+0x210>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e02d      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1c6      	bne.n	800ad8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fbd9 	bl	800b5b8 <SPI_EndRxTxTransaction>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b088      	sub	sp, #32
 800ae5a:	af02      	add	r7, sp, #8
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	603b      	str	r3, [r7, #0]
 800ae62:	4613      	mov	r3, r2
 800ae64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d001      	beq.n	800ae76 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800ae72:	2302      	movs	r3, #2
 800ae74:	e104      	b.n	800b080 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae7e:	d112      	bne.n	800aea6 <HAL_SPI_Receive+0x50>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10e      	bne.n	800aea6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ae90:	88fa      	ldrh	r2, [r7, #6]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	4613      	mov	r3, r2
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 f8f3 	bl	800b088 <HAL_SPI_TransmitReceive>
 800aea2:	4603      	mov	r3, r0
 800aea4:	e0ec      	b.n	800b080 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aea6:	f7fd f9c1 	bl	800822c <HAL_GetTick>
 800aeaa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_SPI_Receive+0x62>
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e0e1      	b.n	800b080 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_SPI_Receive+0x74>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0da      	b.n	800b080 <HAL_SPI_Receive+0x22a>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2204      	movs	r2, #4
 800aed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	88fa      	ldrh	r2, [r7, #6]
 800aeea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	88fa      	ldrh	r2, [r7, #6]
 800aef0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af18:	d10f      	bne.n	800af3a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800af38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af44:	2b40      	cmp	r3, #64	@ 0x40
 800af46:	d007      	beq.n	800af58 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d170      	bne.n	800b042 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800af60:	e035      	b.n	800afce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d115      	bne.n	800af9c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f103 020c 	add.w	r2, r3, #12
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7c:	7812      	ldrb	r2, [r2, #0]
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af90:	b29b      	uxth	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800af9a:	e018      	b.n	800afce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af9c:	f7fd f946 	bl	800822c <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d803      	bhi.n	800afb4 <HAL_SPI_Receive+0x15e>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb2:	d102      	bne.n	800afba <HAL_SPI_Receive+0x164>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e058      	b.n	800b080 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1c4      	bne.n	800af62 <HAL_SPI_Receive+0x10c>
 800afd8:	e038      	b.n	800b04c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d113      	bne.n	800b010 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff2:	b292      	uxth	r2, r2
 800aff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	1c9a      	adds	r2, r3, #2
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	b29a      	uxth	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b00e:	e018      	b.n	800b042 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b010:	f7fd f90c 	bl	800822c <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d803      	bhi.n	800b028 <HAL_SPI_Receive+0x1d2>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b026:	d102      	bne.n	800b02e <HAL_SPI_Receive+0x1d8>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d109      	bne.n	800b042 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e01e      	b.n	800b080 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b046:	b29b      	uxth	r3, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1c6      	bne.n	800afda <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fa4b 	bl	800b4ec <SPI_EndRxTransaction>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2220      	movs	r2, #32
 800b060:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b07e:	2300      	movs	r3, #0
  }
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	@ 0x28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b096:	2301      	movs	r3, #1
 800b098:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b09a:	f7fd f8c7 	bl	800822c <HAL_GetTick>
 800b09e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b0ae:	887b      	ldrh	r3, [r7, #2]
 800b0b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b0b2:	7ffb      	ldrb	r3, [r7, #31]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d00c      	beq.n	800b0d2 <HAL_SPI_TransmitReceive+0x4a>
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b0be:	d106      	bne.n	800b0ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <HAL_SPI_TransmitReceive+0x46>
 800b0c8:	7ffb      	ldrb	r3, [r7, #31]
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d001      	beq.n	800b0d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e17f      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_SPI_TransmitReceive+0x5c>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <HAL_SPI_TransmitReceive+0x5c>
 800b0de:	887b      	ldrh	r3, [r7, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e174      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d101      	bne.n	800b0f6 <HAL_SPI_TransmitReceive+0x6e>
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	e16d      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b04      	cmp	r3, #4
 800b108:	d003      	beq.n	800b112 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2205      	movs	r2, #5
 800b10e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	887a      	ldrh	r2, [r7, #2]
 800b122:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	887a      	ldrh	r2, [r7, #2]
 800b128:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	887a      	ldrh	r2, [r7, #2]
 800b134:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	887a      	ldrh	r2, [r7, #2]
 800b13a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b152:	2b40      	cmp	r3, #64	@ 0x40
 800b154:	d007      	beq.n	800b166 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b16e:	d17e      	bne.n	800b26e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <HAL_SPI_TransmitReceive+0xf6>
 800b178:	8afb      	ldrh	r3, [r7, #22]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d16c      	bne.n	800b258 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b182:	881a      	ldrh	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b18e:	1c9a      	adds	r2, r3, #2
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1a2:	e059      	b.n	800b258 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d11b      	bne.n	800b1ea <HAL_SPI_TransmitReceive+0x162>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d016      	beq.n	800b1ea <HAL_SPI_TransmitReceive+0x162>
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d113      	bne.n	800b1ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d2:	1c9a      	adds	r2, r3, #2
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d119      	bne.n	800b22c <HAL_SPI_TransmitReceive+0x1a4>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d014      	beq.n	800b22c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20c:	b292      	uxth	r2, r2
 800b20e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b214:	1c9a      	adds	r2, r3, #2
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3b01      	subs	r3, #1
 800b222:	b29a      	uxth	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b228:	2301      	movs	r3, #1
 800b22a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b22c:	f7fc fffe 	bl	800822c <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b238:	429a      	cmp	r2, r3
 800b23a:	d80d      	bhi.n	800b258 <HAL_SPI_TransmitReceive+0x1d0>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b242:	d009      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e0bc      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1a0      	bne.n	800b1a4 <HAL_SPI_TransmitReceive+0x11c>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b266:	b29b      	uxth	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d19b      	bne.n	800b1a4 <HAL_SPI_TransmitReceive+0x11c>
 800b26c:	e082      	b.n	800b374 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <HAL_SPI_TransmitReceive+0x1f4>
 800b276:	8afb      	ldrh	r3, [r7, #22]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d171      	bne.n	800b360 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	330c      	adds	r3, #12
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2a2:	e05d      	b.n	800b360 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d11c      	bne.n	800b2ec <HAL_SPI_TransmitReceive+0x264>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d017      	beq.n	800b2ec <HAL_SPI_TransmitReceive+0x264>
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d114      	bne.n	800b2ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	330c      	adds	r3, #12
 800b2cc:	7812      	ldrb	r2, [r2, #0]
 800b2ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d119      	bne.n	800b32e <HAL_SPI_TransmitReceive+0x2a6>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d014      	beq.n	800b32e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30e:	b2d2      	uxtb	r2, r2
 800b310:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b320:	b29b      	uxth	r3, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b32a:	2301      	movs	r3, #1
 800b32c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b32e:	f7fc ff7d 	bl	800822c <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d803      	bhi.n	800b346 <HAL_SPI_TransmitReceive+0x2be>
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b344:	d102      	bne.n	800b34c <HAL_SPI_TransmitReceive+0x2c4>
 800b346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d109      	bne.n	800b360 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e038      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b364:	b29b      	uxth	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d19c      	bne.n	800b2a4 <HAL_SPI_TransmitReceive+0x21c>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d197      	bne.n	800b2a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b374:	6a3a      	ldr	r2, [r7, #32]
 800b376:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 f91d 	bl	800b5b8 <SPI_EndRxTxTransaction>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d008      	beq.n	800b396 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2220      	movs	r2, #32
 800b388:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e01d      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	613b      	str	r3, [r7, #16]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	613b      	str	r3, [r7, #16]
 800b3b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e000      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
  }
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3728      	adds	r7, #40	@ 0x28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	603b      	str	r3, [r7, #0]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b3ec:	f7fc ff1e 	bl	800822c <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b3fc:	f7fc ff16 	bl	800822c <HAL_GetTick>
 800b400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b402:	4b39      	ldr	r3, [pc, #228]	@ (800b4e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	015b      	lsls	r3, r3, #5
 800b408:	0d1b      	lsrs	r3, r3, #20
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	fb02 f303 	mul.w	r3, r2, r3
 800b410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b412:	e054      	b.n	800b4be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41a:	d050      	beq.n	800b4be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b41c:	f7fc ff06 	bl	800822c <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d902      	bls.n	800b432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d13d      	bne.n	800b4ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b44a:	d111      	bne.n	800b470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b454:	d004      	beq.n	800b460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b45e:	d107      	bne.n	800b470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b46e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b478:	d10f      	bne.n	800b49a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e017      	b.n	800b4de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	bf0c      	ite	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	2300      	movne	r3, #0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d19b      	bne.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20000994 	.word	0x20000994

0800b4ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b500:	d111      	bne.n	800b526 <SPI_EndRxTransaction+0x3a>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b50a:	d004      	beq.n	800b516 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b514:	d107      	bne.n	800b526 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b524:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b52e:	d12a      	bne.n	800b586 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b538:	d012      	beq.n	800b560 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2200      	movs	r2, #0
 800b542:	2180      	movs	r1, #128	@ 0x80
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff ff49 	bl	800b3dc <SPI_WaitFlagStateUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d02d      	beq.n	800b5ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b554:	f043 0220 	orr.w	r2, r3, #32
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e026      	b.n	800b5ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2200      	movs	r2, #0
 800b568:	2101      	movs	r1, #1
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff ff36 	bl	800b3dc <SPI_WaitFlagStateUntilTimeout>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01a      	beq.n	800b5ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b57a:	f043 0220 	orr.w	r2, r3, #32
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e013      	b.n	800b5ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2200      	movs	r2, #0
 800b58e:	2101      	movs	r1, #1
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff ff23 	bl	800b3dc <SPI_WaitFlagStateUntilTimeout>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d007      	beq.n	800b5ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a0:	f043 0220 	orr.w	r2, r3, #32
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e000      	b.n	800b5ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7ff ff04 	bl	800b3dc <SPI_WaitFlagStateUntilTimeout>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5de:	f043 0220 	orr.w	r2, r3, #32
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e032      	b.n	800b650 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b658 <SPI_EndRxTxTransaction+0xa0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b65c <SPI_EndRxTxTransaction+0xa4>)
 800b5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f4:	0d5b      	lsrs	r3, r3, #21
 800b5f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
 800b5fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b608:	d112      	bne.n	800b630 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2200      	movs	r2, #0
 800b612:	2180      	movs	r1, #128	@ 0x80
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff fee1 	bl	800b3dc <SPI_WaitFlagStateUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d016      	beq.n	800b64e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b624:	f043 0220 	orr.w	r2, r3, #32
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e00f      	b.n	800b650 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	3b01      	subs	r3, #1
 800b63a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b646:	2b80      	cmp	r3, #128	@ 0x80
 800b648:	d0f2      	beq.n	800b630 <SPI_EndRxTxTransaction+0x78>
 800b64a:	e000      	b.n	800b64e <SPI_EndRxTxTransaction+0x96>
        break;
 800b64c:	bf00      	nop
  }

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000994 	.word	0x20000994
 800b65c:	165e9f81 	.word	0x165e9f81

0800b660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e041      	b.n	800b6f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d106      	bne.n	800b68c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7fc fb4c 	bl	8007d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f000 f994 	bl	800b9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b01      	cmp	r3, #1
 800b712:	d001      	beq.n	800b718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e04e      	b.n	800b7b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68da      	ldr	r2, [r3, #12]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f042 0201 	orr.w	r2, r2, #1
 800b72e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a23      	ldr	r2, [pc, #140]	@ (800b7c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d022      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b742:	d01d      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d018      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a1e      	ldr	r2, [pc, #120]	@ (800b7cc <HAL_TIM_Base_Start_IT+0xcc>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d013      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a1c      	ldr	r2, [pc, #112]	@ (800b7d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d00e      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a1b      	ldr	r2, [pc, #108]	@ (800b7d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d009      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a19      	ldr	r2, [pc, #100]	@ (800b7d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d004      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x80>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a18      	ldr	r2, [pc, #96]	@ (800b7dc <HAL_TIM_Base_Start_IT+0xdc>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d111      	bne.n	800b7a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b06      	cmp	r3, #6
 800b790:	d010      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f042 0201 	orr.w	r2, r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7a2:	e007      	b.n	800b7b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0201 	orr.w	r2, r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40010000 	.word	0x40010000
 800b7c8:	40000400 	.word	0x40000400
 800b7cc:	40000800 	.word	0x40000800
 800b7d0:	40000c00 	.word	0x40000c00
 800b7d4:	40010400 	.word	0x40010400
 800b7d8:	40014000 	.word	0x40014000
 800b7dc:	40001800 	.word	0x40001800

0800b7e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f022 0201 	bic.w	r2, r2, #1
 800b7f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6a1a      	ldr	r2, [r3, #32]
 800b7fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b802:	4013      	ands	r3, r2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10f      	bne.n	800b828 <HAL_TIM_Base_Stop_IT+0x48>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6a1a      	ldr	r2, [r3, #32]
 800b80e:	f240 4344 	movw	r3, #1092	@ 0x444
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d107      	bne.n	800b828 <HAL_TIM_Base_Stop_IT+0x48>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f022 0201 	bic.w	r2, r2, #1
 800b826:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b852:	2b01      	cmp	r3, #1
 800b854:	d101      	bne.n	800b85a <HAL_TIM_ConfigClockSource+0x1c>
 800b856:	2302      	movs	r3, #2
 800b858:	e0b4      	b.n	800b9c4 <HAL_TIM_ConfigClockSource+0x186>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2202      	movs	r2, #2
 800b866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b878:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b880:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b892:	d03e      	beq.n	800b912 <HAL_TIM_ConfigClockSource+0xd4>
 800b894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b898:	f200 8087 	bhi.w	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b89c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8a0:	f000 8086 	beq.w	800b9b0 <HAL_TIM_ConfigClockSource+0x172>
 800b8a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8a8:	d87f      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8aa:	2b70      	cmp	r3, #112	@ 0x70
 800b8ac:	d01a      	beq.n	800b8e4 <HAL_TIM_ConfigClockSource+0xa6>
 800b8ae:	2b70      	cmp	r3, #112	@ 0x70
 800b8b0:	d87b      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8b2:	2b60      	cmp	r3, #96	@ 0x60
 800b8b4:	d050      	beq.n	800b958 <HAL_TIM_ConfigClockSource+0x11a>
 800b8b6:	2b60      	cmp	r3, #96	@ 0x60
 800b8b8:	d877      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8ba:	2b50      	cmp	r3, #80	@ 0x50
 800b8bc:	d03c      	beq.n	800b938 <HAL_TIM_ConfigClockSource+0xfa>
 800b8be:	2b50      	cmp	r3, #80	@ 0x50
 800b8c0:	d873      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8c2:	2b40      	cmp	r3, #64	@ 0x40
 800b8c4:	d058      	beq.n	800b978 <HAL_TIM_ConfigClockSource+0x13a>
 800b8c6:	2b40      	cmp	r3, #64	@ 0x40
 800b8c8:	d86f      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8ca:	2b30      	cmp	r3, #48	@ 0x30
 800b8cc:	d064      	beq.n	800b998 <HAL_TIM_ConfigClockSource+0x15a>
 800b8ce:	2b30      	cmp	r3, #48	@ 0x30
 800b8d0:	d86b      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8d2:	2b20      	cmp	r3, #32
 800b8d4:	d060      	beq.n	800b998 <HAL_TIM_ConfigClockSource+0x15a>
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	d867      	bhi.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d05c      	beq.n	800b998 <HAL_TIM_ConfigClockSource+0x15a>
 800b8de:	2b10      	cmp	r3, #16
 800b8e0:	d05a      	beq.n	800b998 <HAL_TIM_ConfigClockSource+0x15a>
 800b8e2:	e062      	b.n	800b9aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8f4:	f000 f990 	bl	800bc18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b906:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	609a      	str	r2, [r3, #8]
      break;
 800b910:	e04f      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b922:	f000 f979 	bl	800bc18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b934:	609a      	str	r2, [r3, #8]
      break;
 800b936:	e03c      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b944:	461a      	mov	r2, r3
 800b946:	f000 f8ed 	bl	800bb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2150      	movs	r1, #80	@ 0x50
 800b950:	4618      	mov	r0, r3
 800b952:	f000 f946 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b956:	e02c      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b964:	461a      	mov	r2, r3
 800b966:	f000 f90c 	bl	800bb82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2160      	movs	r1, #96	@ 0x60
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f936 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b976:	e01c      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b984:	461a      	mov	r2, r3
 800b986:	f000 f8cd 	bl	800bb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2140      	movs	r1, #64	@ 0x40
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f926 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b996:	e00c      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f000 f91d 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b9a8:	e003      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ae:	e000      	b.n	800b9b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b9b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a46      	ldr	r2, [pc, #280]	@ (800baf8 <TIM_Base_SetConfig+0x12c>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d013      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ea:	d00f      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a43      	ldr	r2, [pc, #268]	@ (800bafc <TIM_Base_SetConfig+0x130>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d00b      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a42      	ldr	r2, [pc, #264]	@ (800bb00 <TIM_Base_SetConfig+0x134>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d007      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a41      	ldr	r2, [pc, #260]	@ (800bb04 <TIM_Base_SetConfig+0x138>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a40      	ldr	r2, [pc, #256]	@ (800bb08 <TIM_Base_SetConfig+0x13c>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d108      	bne.n	800ba1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a35      	ldr	r2, [pc, #212]	@ (800baf8 <TIM_Base_SetConfig+0x12c>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d02b      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba2c:	d027      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a32      	ldr	r2, [pc, #200]	@ (800bafc <TIM_Base_SetConfig+0x130>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d023      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a31      	ldr	r2, [pc, #196]	@ (800bb00 <TIM_Base_SetConfig+0x134>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d01f      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a30      	ldr	r2, [pc, #192]	@ (800bb04 <TIM_Base_SetConfig+0x138>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01b      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a2f      	ldr	r2, [pc, #188]	@ (800bb08 <TIM_Base_SetConfig+0x13c>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d017      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a2e      	ldr	r2, [pc, #184]	@ (800bb0c <TIM_Base_SetConfig+0x140>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d013      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a2d      	ldr	r2, [pc, #180]	@ (800bb10 <TIM_Base_SetConfig+0x144>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00f      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a2c      	ldr	r2, [pc, #176]	@ (800bb14 <TIM_Base_SetConfig+0x148>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00b      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a2b      	ldr	r2, [pc, #172]	@ (800bb18 <TIM_Base_SetConfig+0x14c>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d007      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a2a      	ldr	r2, [pc, #168]	@ (800bb1c <TIM_Base_SetConfig+0x150>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d003      	beq.n	800ba7e <TIM_Base_SetConfig+0xb2>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a29      	ldr	r2, [pc, #164]	@ (800bb20 <TIM_Base_SetConfig+0x154>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d108      	bne.n	800ba90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a10      	ldr	r2, [pc, #64]	@ (800baf8 <TIM_Base_SetConfig+0x12c>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0xf8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a12      	ldr	r2, [pc, #72]	@ (800bb08 <TIM_Base_SetConfig+0x13c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d103      	bne.n	800bacc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b01      	cmp	r3, #1
 800badc:	d105      	bne.n	800baea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f023 0201 	bic.w	r2, r3, #1
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	611a      	str	r2, [r3, #16]
  }
}
 800baea:	bf00      	nop
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	40010000 	.word	0x40010000
 800bafc:	40000400 	.word	0x40000400
 800bb00:	40000800 	.word	0x40000800
 800bb04:	40000c00 	.word	0x40000c00
 800bb08:	40010400 	.word	0x40010400
 800bb0c:	40014000 	.word	0x40014000
 800bb10:	40014400 	.word	0x40014400
 800bb14:	40014800 	.word	0x40014800
 800bb18:	40001800 	.word	0x40001800
 800bb1c:	40001c00 	.word	0x40001c00
 800bb20:	40002000 	.word	0x40002000

0800bb24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	f023 0201 	bic.w	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f023 030a 	bic.w	r3, r3, #10
 800bb60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	621a      	str	r2, [r3, #32]
}
 800bb76:	bf00      	nop
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b087      	sub	sp, #28
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	f023 0210 	bic.w	r2, r3, #16
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bbac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	031b      	lsls	r3, r3, #12
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bbbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	011b      	lsls	r3, r3, #4
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	621a      	str	r2, [r3, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	371c      	adds	r7, #28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f043 0307 	orr.w	r3, r3, #7
 800bc04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	609a      	str	r2, [r3, #8]
}
 800bc0c:	bf00      	nop
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	021a      	lsls	r2, r3, #8
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	609a      	str	r2, [r3, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d101      	bne.n	800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e05a      	b.n	800bd26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a21      	ldr	r2, [pc, #132]	@ (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d022      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcbc:	d01d      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d018      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a1b      	ldr	r2, [pc, #108]	@ (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d013      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d00e      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a18      	ldr	r2, [pc, #96]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d009      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a17      	ldr	r2, [pc, #92]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d004      	beq.n	800bcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a15      	ldr	r2, [pc, #84]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d10c      	bne.n	800bd14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40000400 	.word	0x40000400
 800bd3c:	40000800 	.word	0x40000800
 800bd40:	40000c00 	.word	0x40000c00
 800bd44:	40010400 	.word	0x40010400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	40001800 	.word	0x40001800

0800bd50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e042      	b.n	800bde8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7fb fff6 	bl	8007d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2224      	movs	r2, #36	@ 0x24
 800bd80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bd92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fdf3 	bl	800c980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	691a      	ldr	r2, [r3, #16]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bda8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	695a      	ldr	r2, [r3, #20]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68da      	ldr	r2, [r3, #12]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bdc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2220      	movs	r2, #32
 800bddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	@ 0x28
 800bdf4:	af02      	add	r7, sp, #8
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b20      	cmp	r3, #32
 800be0e:	d175      	bne.n	800befc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <HAL_UART_Transmit+0x2c>
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e06e      	b.n	800befe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2221      	movs	r2, #33	@ 0x21
 800be2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be2e:	f7fc f9fd 	bl	800822c <HAL_GetTick>
 800be32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	88fa      	ldrh	r2, [r7, #6]
 800be38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	88fa      	ldrh	r2, [r7, #6]
 800be3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be48:	d108      	bne.n	800be5c <HAL_UART_Transmit+0x6c>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	61bb      	str	r3, [r7, #24]
 800be5a:	e003      	b.n	800be64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be60:	2300      	movs	r3, #0
 800be62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be64:	e02e      	b.n	800bec4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2200      	movs	r2, #0
 800be6e:	2180      	movs	r1, #128	@ 0x80
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 fb55 	bl	800c520 <UART_WaitOnFlagUntilTimeout>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d005      	beq.n	800be88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e03a      	b.n	800befe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10b      	bne.n	800bea6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	3302      	adds	r3, #2
 800bea2:	61bb      	str	r3, [r7, #24]
 800bea4:	e007      	b.n	800beb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	781a      	ldrb	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	3301      	adds	r3, #1
 800beb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800beba:	b29b      	uxth	r3, r3
 800bebc:	3b01      	subs	r3, #1
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bec8:	b29b      	uxth	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1cb      	bne.n	800be66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2200      	movs	r2, #0
 800bed6:	2140      	movs	r1, #64	@ 0x40
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 fb21 	bl	800c520 <UART_WaitOnFlagUntilTimeout>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d005      	beq.n	800bef0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e006      	b.n	800befe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2220      	movs	r2, #32
 800bef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	e000      	b.n	800befe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800befc:	2302      	movs	r3, #2
  }
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3720      	adds	r7, #32
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b08c      	sub	sp, #48	@ 0x30
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	4613      	mov	r3, r2
 800bf12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	d14a      	bne.n	800bfb6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e043      	b.n	800bfb8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2201      	movs	r2, #1
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800bf3c:	88fb      	ldrh	r3, [r7, #6]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f000 fb45 	bl	800c5d2 <UART_Start_Receive_IT>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bf4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d12c      	bne.n	800bfb0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d125      	bne.n	800bfaa <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf5e:	2300      	movs	r3, #0
 800bf60:	613b      	str	r3, [r7, #16]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	330c      	adds	r3, #12
 800bf7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	617b      	str	r3, [r7, #20]
   return(result);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	f043 0310 	orr.w	r3, r3, #16
 800bf8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf94:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6a39      	ldr	r1, [r7, #32]
 800bf9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e5      	bne.n	800bf74 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800bfa8:	e002      	b.n	800bfb0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfb4:	e000      	b.n	800bfb8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800bfb6:	2302      	movs	r3, #2
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3730      	adds	r7, #48	@ 0x30
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b0ba      	sub	sp, #232	@ 0xe8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff6:	f003 030f 	and.w	r3, r3, #15
 800bffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10f      	bne.n	800c026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d009      	beq.n	800c026 <HAL_UART_IRQHandler+0x66>
 800c012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fbf0 	bl	800c804 <UART_Receive_IT>
      return;
 800c024:	e25b      	b.n	800c4de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 80de 	beq.w	800c1ec <HAL_UART_IRQHandler+0x22c>
 800c030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c040:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 80d1 	beq.w	800c1ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00b      	beq.n	800c06e <HAL_UART_IRQHandler+0xae>
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c066:	f043 0201 	orr.w	r2, r3, #1
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c072:	f003 0304 	and.w	r3, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <HAL_UART_IRQHandler+0xd2>
 800c07a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c07e:	f003 0301 	and.w	r3, r3, #1
 800c082:	2b00      	cmp	r3, #0
 800c084:	d005      	beq.n	800c092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c08a:	f043 0202 	orr.w	r2, r3, #2
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c096:	f003 0302 	and.w	r3, r3, #2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00b      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xf6>
 800c09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ae:	f043 0204 	orr.w	r2, r3, #4
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0ba:	f003 0308 	and.w	r3, r3, #8
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d011      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x126>
 800c0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d105      	bne.n	800c0da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d005      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0de:	f043 0208 	orr.w	r2, r3, #8
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 81f2 	beq.w	800c4d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0f4:	f003 0320 	and.w	r3, r3, #32
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d008      	beq.n	800c10e <HAL_UART_IRQHandler+0x14e>
 800c0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c100:	f003 0320 	and.w	r3, r3, #32
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fb7b 	bl	800c804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c118:	2b40      	cmp	r3, #64	@ 0x40
 800c11a:	bf0c      	ite	eq
 800c11c:	2301      	moveq	r3, #1
 800c11e:	2300      	movne	r3, #0
 800c120:	b2db      	uxtb	r3, r3
 800c122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c12a:	f003 0308 	and.w	r3, r3, #8
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d103      	bne.n	800c13a <HAL_UART_IRQHandler+0x17a>
 800c132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c136:	2b00      	cmp	r3, #0
 800c138:	d04f      	beq.n	800c1da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fa83 	bl	800c646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14a:	2b40      	cmp	r3, #64	@ 0x40
 800c14c:	d141      	bne.n	800c1d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3314      	adds	r3, #20
 800c154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c16c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3314      	adds	r3, #20
 800c176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c17a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c17e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1d9      	bne.n	800c14e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d013      	beq.n	800c1ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a6:	4a7e      	ldr	r2, [pc, #504]	@ (800c3a0 <HAL_UART_IRQHandler+0x3e0>)
 800c1a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fc fd21 	bl	8008bf6 <HAL_DMA_Abort_IT>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d016      	beq.n	800c1e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c8:	e00e      	b.n	800c1e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f99e 	bl	800c50c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d0:	e00a      	b.n	800c1e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f99a 	bl	800c50c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d8:	e006      	b.n	800c1e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f996 	bl	800c50c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c1e6:	e175      	b.n	800c4d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e8:	bf00      	nop
    return;
 800c1ea:	e173      	b.n	800c4d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	f040 814f 	bne.w	800c494 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1fa:	f003 0310 	and.w	r3, r3, #16
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 8148 	beq.w	800c494 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c208:	f003 0310 	and.w	r3, r3, #16
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8141 	beq.w	800c494 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c212:	2300      	movs	r3, #0
 800c214:	60bb      	str	r3, [r7, #8]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	60bb      	str	r3, [r7, #8]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	60bb      	str	r3, [r7, #8]
 800c226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c232:	2b40      	cmp	r3, #64	@ 0x40
 800c234:	f040 80b6 	bne.w	800c3a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 8145 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c256:	429a      	cmp	r2, r3
 800c258:	f080 813e 	bcs.w	800c4d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c262:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c26e:	f000 8088 	beq.w	800c382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	330c      	adds	r3, #12
 800c278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c280:	e853 3f00 	ldrex	r3, [r3]
 800c284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c29e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c2a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c2aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1d9      	bne.n	800c272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3314      	adds	r3, #20
 800c2c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c2ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2d0:	f023 0301 	bic.w	r3, r3, #1
 800c2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3314      	adds	r3, #20
 800c2de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c2e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c2e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c2ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e1      	bne.n	800c2be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3314      	adds	r3, #20
 800c300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c30a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3314      	adds	r3, #20
 800c31a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c31e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e3      	bne.n	800c2fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2220      	movs	r2, #32
 800c336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	330c      	adds	r3, #12
 800c346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c352:	f023 0310 	bic.w	r3, r3, #16
 800c356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	330c      	adds	r3, #12
 800c360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c364:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c366:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c368:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c36a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c36c:	e841 2300 	strex	r3, r2, [r1]
 800c370:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1e3      	bne.n	800c340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fc fbca 	bl	8008b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2202      	movs	r2, #2
 800c386:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c390:	b29b      	uxth	r3, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	b29b      	uxth	r3, r3
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7fb f9b5 	bl	8007708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c39e:	e09b      	b.n	800c4d8 <HAL_UART_IRQHandler+0x518>
 800c3a0:	0800c70d 	.word	0x0800c70d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 808e 	beq.w	800c4dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c3c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 8089 	beq.w	800c4dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	330c      	adds	r3, #12
 800c3d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	330c      	adds	r3, #12
 800c3ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c3ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3f6:	e841 2300 	strex	r3, r2, [r1]
 800c3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e3      	bne.n	800c3ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3314      	adds	r3, #20
 800c408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	e853 3f00 	ldrex	r3, [r3]
 800c410:	623b      	str	r3, [r7, #32]
   return(result);
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	f023 0301 	bic.w	r3, r3, #1
 800c418:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3314      	adds	r3, #20
 800c422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c426:	633a      	str	r2, [r7, #48]	@ 0x30
 800c428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c42c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e3      	bne.n	800c402 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2220      	movs	r2, #32
 800c43e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	330c      	adds	r3, #12
 800c44e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	e853 3f00 	ldrex	r3, [r3]
 800c456:	60fb      	str	r3, [r7, #12]
   return(result);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f023 0310 	bic.w	r3, r3, #16
 800c45e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	330c      	adds	r3, #12
 800c468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c46c:	61fa      	str	r2, [r7, #28]
 800c46e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c470:	69b9      	ldr	r1, [r7, #24]
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	e841 2300 	strex	r3, r2, [r1]
 800c478:	617b      	str	r3, [r7, #20]
   return(result);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1e3      	bne.n	800c448 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7fb f93b 	bl	8007708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c492:	e023      	b.n	800c4dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d009      	beq.n	800c4b4 <HAL_UART_IRQHandler+0x4f4>
 800c4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f941 	bl	800c734 <UART_Transmit_IT>
    return;
 800c4b2:	e014      	b.n	800c4de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00e      	beq.n	800c4de <HAL_UART_IRQHandler+0x51e>
 800c4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d008      	beq.n	800c4de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f981 	bl	800c7d4 <UART_EndTransmit_IT>
    return;
 800c4d2:	e004      	b.n	800c4de <HAL_UART_IRQHandler+0x51e>
    return;
 800c4d4:	bf00      	nop
 800c4d6:	e002      	b.n	800c4de <HAL_UART_IRQHandler+0x51e>
      return;
 800c4d8:	bf00      	nop
 800c4da:	e000      	b.n	800c4de <HAL_UART_IRQHandler+0x51e>
      return;
 800c4dc:	bf00      	nop
  }
}
 800c4de:	37e8      	adds	r7, #232	@ 0xe8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	4613      	mov	r3, r2
 800c52e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c530:	e03b      	b.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c538:	d037      	beq.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c53a:	f7fb fe77 	bl	800822c <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	6a3a      	ldr	r2, [r7, #32]
 800c546:	429a      	cmp	r2, r3
 800c548:	d302      	bcc.n	800c550 <UART_WaitOnFlagUntilTimeout+0x30>
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c550:	2303      	movs	r3, #3
 800c552:	e03a      	b.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d023      	beq.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b80      	cmp	r3, #128	@ 0x80
 800c566:	d020      	beq.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b40      	cmp	r3, #64	@ 0x40
 800c56c:	d01d      	beq.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0308 	and.w	r3, r3, #8
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d116      	bne.n	800c5aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c57c:	2300      	movs	r3, #0
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 f857 	bl	800c646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2208      	movs	r2, #8
 800c59c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e00f      	b.n	800c5ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	bf0c      	ite	eq
 800c5ba:	2301      	moveq	r3, #1
 800c5bc:	2300      	movne	r3, #0
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d0b4      	beq.n	800c532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	88fa      	ldrh	r2, [r7, #6]
 800c5ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	88fa      	ldrh	r2, [r7, #6]
 800c5f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2222      	movs	r2, #34	@ 0x22
 800c5fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68da      	ldr	r2, [r3, #12]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c616:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	695a      	ldr	r2, [r3, #20]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f042 0201 	orr.w	r2, r2, #1
 800c626:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68da      	ldr	r2, [r3, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f042 0220 	orr.w	r2, r2, #32
 800c636:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c646:	b480      	push	{r7}
 800c648:	b095      	sub	sp, #84	@ 0x54
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	330c      	adds	r3, #12
 800c654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	330c      	adds	r3, #12
 800c66c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c66e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e5      	bne.n	800c64e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3314      	adds	r3, #20
 800c688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	e853 3f00 	ldrex	r3, [r3]
 800c690:	61fb      	str	r3, [r7, #28]
   return(result);
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	f023 0301 	bic.w	r3, r3, #1
 800c698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3314      	adds	r3, #20
 800c6a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e5      	bne.n	800c682 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d119      	bne.n	800c6f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f023 0310 	bic.w	r3, r3, #16
 800c6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	330c      	adds	r3, #12
 800c6dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6de:	61ba      	str	r2, [r7, #24]
 800c6e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6979      	ldr	r1, [r7, #20]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e5      	bne.n	800c6be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c700:	bf00      	nop
 800c702:	3754      	adds	r7, #84	@ 0x54
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f7ff fef0 	bl	800c50c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c72c:	bf00      	nop
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b21      	cmp	r3, #33	@ 0x21
 800c746:	d13e      	bne.n	800c7c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c750:	d114      	bne.n	800c77c <UART_Transmit_IT+0x48>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d110      	bne.n	800c77c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	461a      	mov	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c76e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	1c9a      	adds	r2, r3, #2
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	621a      	str	r2, [r3, #32]
 800c77a:	e008      	b.n	800c78e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	1c59      	adds	r1, r3, #1
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6211      	str	r1, [r2, #32]
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c792:	b29b      	uxth	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b29b      	uxth	r3, r3
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	4619      	mov	r1, r3
 800c79c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10f      	bne.n	800c7c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68da      	ldr	r2, [r3, #12]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c7b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e000      	b.n	800c7c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c7c6:	2302      	movs	r3, #2
  }
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff fe75 	bl	800c4e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08c      	sub	sp, #48	@ 0x30
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b22      	cmp	r3, #34	@ 0x22
 800c816:	f040 80ae 	bne.w	800c976 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c822:	d117      	bne.n	800c854 <UART_Receive_IT+0x50>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d113      	bne.n	800c854 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c82c:	2300      	movs	r3, #0
 800c82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c834:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c842:	b29a      	uxth	r2, r3
 800c844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c84c:	1c9a      	adds	r2, r3, #2
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	629a      	str	r2, [r3, #40]	@ 0x28
 800c852:	e026      	b.n	800c8a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c866:	d007      	beq.n	800c878 <UART_Receive_IT+0x74>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <UART_Receive_IT+0x82>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c882:	701a      	strb	r2, [r3, #0]
 800c884:	e008      	b.n	800c898 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c892:	b2da      	uxtb	r2, r3
 800c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c896:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d15d      	bne.n	800c972 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68da      	ldr	r2, [r3, #12]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f022 0220 	bic.w	r2, r2, #32
 800c8c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68da      	ldr	r2, [r3, #12]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c8d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	695a      	ldr	r2, [r3, #20]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 0201 	bic.w	r2, r2, #1
 800c8e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d135      	bne.n	800c968 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	330c      	adds	r3, #12
 800c908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	613b      	str	r3, [r7, #16]
   return(result);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f023 0310 	bic.w	r3, r3, #16
 800c918:	627b      	str	r3, [r7, #36]	@ 0x24
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	330c      	adds	r3, #12
 800c920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c922:	623a      	str	r2, [r7, #32]
 800c924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c926:	69f9      	ldr	r1, [r7, #28]
 800c928:	6a3a      	ldr	r2, [r7, #32]
 800c92a:	e841 2300 	strex	r3, r2, [r1]
 800c92e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1e5      	bne.n	800c902 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0310 	and.w	r3, r3, #16
 800c940:	2b10      	cmp	r3, #16
 800c942:	d10a      	bne.n	800c95a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7fa fed1 	bl	8007708 <HAL_UARTEx_RxEventCallback>
 800c966:	e002      	b.n	800c96e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff fdc5 	bl	800c4f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	e002      	b.n	800c978 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	e000      	b.n	800c978 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c976:	2302      	movs	r3, #2
  }
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3730      	adds	r7, #48	@ 0x30
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c984:	b0c0      	sub	sp, #256	@ 0x100
 800c986:	af00      	add	r7, sp, #0
 800c988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c99c:	68d9      	ldr	r1, [r3, #12]
 800c99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	ea40 0301 	orr.w	r3, r0, r1
 800c9a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c9d8:	f021 010c 	bic.w	r1, r1, #12
 800c9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c9e6:	430b      	orrs	r3, r1
 800c9e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9fa:	6999      	ldr	r1, [r3, #24]
 800c9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	ea40 0301 	orr.w	r3, r0, r1
 800ca06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	4b8f      	ldr	r3, [pc, #572]	@ (800cc4c <UART_SetConfig+0x2cc>)
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d005      	beq.n	800ca20 <UART_SetConfig+0xa0>
 800ca14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b8d      	ldr	r3, [pc, #564]	@ (800cc50 <UART_SetConfig+0x2d0>)
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d104      	bne.n	800ca2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca20:	f7fe f838 	bl	800aa94 <HAL_RCC_GetPCLK2Freq>
 800ca24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ca28:	e003      	b.n	800ca32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca2a:	f7fe f81f 	bl	800aa6c <HAL_RCC_GetPCLK1Freq>
 800ca2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca36:	69db      	ldr	r3, [r3, #28]
 800ca38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca3c:	f040 810c 	bne.w	800cc58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ca4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ca4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ca52:	4622      	mov	r2, r4
 800ca54:	462b      	mov	r3, r5
 800ca56:	1891      	adds	r1, r2, r2
 800ca58:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ca5a:	415b      	adcs	r3, r3
 800ca5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ca62:	4621      	mov	r1, r4
 800ca64:	eb12 0801 	adds.w	r8, r2, r1
 800ca68:	4629      	mov	r1, r5
 800ca6a:	eb43 0901 	adc.w	r9, r3, r1
 800ca6e:	f04f 0200 	mov.w	r2, #0
 800ca72:	f04f 0300 	mov.w	r3, #0
 800ca76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca82:	4690      	mov	r8, r2
 800ca84:	4699      	mov	r9, r3
 800ca86:	4623      	mov	r3, r4
 800ca88:	eb18 0303 	adds.w	r3, r8, r3
 800ca8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca90:	462b      	mov	r3, r5
 800ca92:	eb49 0303 	adc.w	r3, r9, r3
 800ca96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ca9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800caa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800caaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800caae:	460b      	mov	r3, r1
 800cab0:	18db      	adds	r3, r3, r3
 800cab2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cab4:	4613      	mov	r3, r2
 800cab6:	eb42 0303 	adc.w	r3, r2, r3
 800caba:	657b      	str	r3, [r7, #84]	@ 0x54
 800cabc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cac4:	f7f4 f8e8 	bl	8000c98 <__aeabi_uldivmod>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4b61      	ldr	r3, [pc, #388]	@ (800cc54 <UART_SetConfig+0x2d4>)
 800cace:	fba3 2302 	umull	r2, r3, r3, r2
 800cad2:	095b      	lsrs	r3, r3, #5
 800cad4:	011c      	lsls	r4, r3, #4
 800cad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cada:	2200      	movs	r2, #0
 800cadc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cae8:	4642      	mov	r2, r8
 800caea:	464b      	mov	r3, r9
 800caec:	1891      	adds	r1, r2, r2
 800caee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800caf0:	415b      	adcs	r3, r3
 800caf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800caf8:	4641      	mov	r1, r8
 800cafa:	eb12 0a01 	adds.w	sl, r2, r1
 800cafe:	4649      	mov	r1, r9
 800cb00:	eb43 0b01 	adc.w	fp, r3, r1
 800cb04:	f04f 0200 	mov.w	r2, #0
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb18:	4692      	mov	sl, r2
 800cb1a:	469b      	mov	fp, r3
 800cb1c:	4643      	mov	r3, r8
 800cb1e:	eb1a 0303 	adds.w	r3, sl, r3
 800cb22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb26:	464b      	mov	r3, r9
 800cb28:	eb4b 0303 	adc.w	r3, fp, r3
 800cb2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cb40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cb44:	460b      	mov	r3, r1
 800cb46:	18db      	adds	r3, r3, r3
 800cb48:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	eb42 0303 	adc.w	r3, r2, r3
 800cb50:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cb56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cb5a:	f7f4 f89d 	bl	8000c98 <__aeabi_uldivmod>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	4611      	mov	r1, r2
 800cb64:	4b3b      	ldr	r3, [pc, #236]	@ (800cc54 <UART_SetConfig+0x2d4>)
 800cb66:	fba3 2301 	umull	r2, r3, r3, r1
 800cb6a:	095b      	lsrs	r3, r3, #5
 800cb6c:	2264      	movs	r2, #100	@ 0x64
 800cb6e:	fb02 f303 	mul.w	r3, r2, r3
 800cb72:	1acb      	subs	r3, r1, r3
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cb7a:	4b36      	ldr	r3, [pc, #216]	@ (800cc54 <UART_SetConfig+0x2d4>)
 800cb7c:	fba3 2302 	umull	r2, r3, r3, r2
 800cb80:	095b      	lsrs	r3, r3, #5
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cb88:	441c      	add	r4, r3
 800cb8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cb98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	464b      	mov	r3, r9
 800cba0:	1891      	adds	r1, r2, r2
 800cba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cba4:	415b      	adcs	r3, r3
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cbac:	4641      	mov	r1, r8
 800cbae:	1851      	adds	r1, r2, r1
 800cbb0:	6339      	str	r1, [r7, #48]	@ 0x30
 800cbb2:	4649      	mov	r1, r9
 800cbb4:	414b      	adcs	r3, r1
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb8:	f04f 0200 	mov.w	r2, #0
 800cbbc:	f04f 0300 	mov.w	r3, #0
 800cbc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	00cb      	lsls	r3, r1, #3
 800cbc8:	4651      	mov	r1, sl
 800cbca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbce:	4651      	mov	r1, sl
 800cbd0:	00ca      	lsls	r2, r1, #3
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	4642      	mov	r2, r8
 800cbda:	189b      	adds	r3, r3, r2
 800cbdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	460a      	mov	r2, r1
 800cbe4:	eb42 0303 	adc.w	r3, r2, r3
 800cbe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cbfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cc00:	460b      	mov	r3, r1
 800cc02:	18db      	adds	r3, r3, r3
 800cc04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc06:	4613      	mov	r3, r2
 800cc08:	eb42 0303 	adc.w	r3, r2, r3
 800cc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cc12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cc16:	f7f4 f83f 	bl	8000c98 <__aeabi_uldivmod>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc54 <UART_SetConfig+0x2d4>)
 800cc20:	fba3 1302 	umull	r1, r3, r3, r2
 800cc24:	095b      	lsrs	r3, r3, #5
 800cc26:	2164      	movs	r1, #100	@ 0x64
 800cc28:	fb01 f303 	mul.w	r3, r1, r3
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	3332      	adds	r3, #50	@ 0x32
 800cc32:	4a08      	ldr	r2, [pc, #32]	@ (800cc54 <UART_SetConfig+0x2d4>)
 800cc34:	fba2 2303 	umull	r2, r3, r2, r3
 800cc38:	095b      	lsrs	r3, r3, #5
 800cc3a:	f003 0207 	and.w	r2, r3, #7
 800cc3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4422      	add	r2, r4
 800cc46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc48:	e106      	b.n	800ce58 <UART_SetConfig+0x4d8>
 800cc4a:	bf00      	nop
 800cc4c:	40011000 	.word	0x40011000
 800cc50:	40011400 	.word	0x40011400
 800cc54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cc66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cc6a:	4642      	mov	r2, r8
 800cc6c:	464b      	mov	r3, r9
 800cc6e:	1891      	adds	r1, r2, r2
 800cc70:	6239      	str	r1, [r7, #32]
 800cc72:	415b      	adcs	r3, r3
 800cc74:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc7a:	4641      	mov	r1, r8
 800cc7c:	1854      	adds	r4, r2, r1
 800cc7e:	4649      	mov	r1, r9
 800cc80:	eb43 0501 	adc.w	r5, r3, r1
 800cc84:	f04f 0200 	mov.w	r2, #0
 800cc88:	f04f 0300 	mov.w	r3, #0
 800cc8c:	00eb      	lsls	r3, r5, #3
 800cc8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc92:	00e2      	lsls	r2, r4, #3
 800cc94:	4614      	mov	r4, r2
 800cc96:	461d      	mov	r5, r3
 800cc98:	4643      	mov	r3, r8
 800cc9a:	18e3      	adds	r3, r4, r3
 800cc9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cca0:	464b      	mov	r3, r9
 800cca2:	eb45 0303 	adc.w	r3, r5, r3
 800cca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ccaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ccba:	f04f 0200 	mov.w	r2, #0
 800ccbe:	f04f 0300 	mov.w	r3, #0
 800ccc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	008b      	lsls	r3, r1, #2
 800ccca:	4621      	mov	r1, r4
 800cccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	008a      	lsls	r2, r1, #2
 800ccd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ccd8:	f7f3 ffde 	bl	8000c98 <__aeabi_uldivmod>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4b60      	ldr	r3, [pc, #384]	@ (800ce64 <UART_SetConfig+0x4e4>)
 800cce2:	fba3 2302 	umull	r2, r3, r3, r2
 800cce6:	095b      	lsrs	r3, r3, #5
 800cce8:	011c      	lsls	r4, r3, #4
 800ccea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ccf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ccf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	464b      	mov	r3, r9
 800cd00:	1891      	adds	r1, r2, r2
 800cd02:	61b9      	str	r1, [r7, #24]
 800cd04:	415b      	adcs	r3, r3
 800cd06:	61fb      	str	r3, [r7, #28]
 800cd08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd0c:	4641      	mov	r1, r8
 800cd0e:	1851      	adds	r1, r2, r1
 800cd10:	6139      	str	r1, [r7, #16]
 800cd12:	4649      	mov	r1, r9
 800cd14:	414b      	adcs	r3, r1
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	f04f 0200 	mov.w	r2, #0
 800cd1c:	f04f 0300 	mov.w	r3, #0
 800cd20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd24:	4659      	mov	r1, fp
 800cd26:	00cb      	lsls	r3, r1, #3
 800cd28:	4651      	mov	r1, sl
 800cd2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd2e:	4651      	mov	r1, sl
 800cd30:	00ca      	lsls	r2, r1, #3
 800cd32:	4610      	mov	r0, r2
 800cd34:	4619      	mov	r1, r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	4642      	mov	r2, r8
 800cd3a:	189b      	adds	r3, r3, r2
 800cd3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd40:	464b      	mov	r3, r9
 800cd42:	460a      	mov	r2, r1
 800cd44:	eb42 0303 	adc.w	r3, r2, r3
 800cd48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cd58:	f04f 0200 	mov.w	r2, #0
 800cd5c:	f04f 0300 	mov.w	r3, #0
 800cd60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cd64:	4649      	mov	r1, r9
 800cd66:	008b      	lsls	r3, r1, #2
 800cd68:	4641      	mov	r1, r8
 800cd6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd6e:	4641      	mov	r1, r8
 800cd70:	008a      	lsls	r2, r1, #2
 800cd72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cd76:	f7f3 ff8f 	bl	8000c98 <__aeabi_uldivmod>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4b38      	ldr	r3, [pc, #224]	@ (800ce64 <UART_SetConfig+0x4e4>)
 800cd82:	fba3 2301 	umull	r2, r3, r3, r1
 800cd86:	095b      	lsrs	r3, r3, #5
 800cd88:	2264      	movs	r2, #100	@ 0x64
 800cd8a:	fb02 f303 	mul.w	r3, r2, r3
 800cd8e:	1acb      	subs	r3, r1, r3
 800cd90:	011b      	lsls	r3, r3, #4
 800cd92:	3332      	adds	r3, #50	@ 0x32
 800cd94:	4a33      	ldr	r2, [pc, #204]	@ (800ce64 <UART_SetConfig+0x4e4>)
 800cd96:	fba2 2303 	umull	r2, r3, r2, r3
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cda0:	441c      	add	r4, r3
 800cda2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cda6:	2200      	movs	r2, #0
 800cda8:	673b      	str	r3, [r7, #112]	@ 0x70
 800cdaa:	677a      	str	r2, [r7, #116]	@ 0x74
 800cdac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	1891      	adds	r1, r2, r2
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	415b      	adcs	r3, r3
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	1851      	adds	r1, r2, r1
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	414b      	adcs	r3, r1
 800cdca:	607b      	str	r3, [r7, #4]
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cdd8:	4659      	mov	r1, fp
 800cdda:	00cb      	lsls	r3, r1, #3
 800cddc:	4651      	mov	r1, sl
 800cdde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cde2:	4651      	mov	r1, sl
 800cde4:	00ca      	lsls	r2, r1, #3
 800cde6:	4610      	mov	r0, r2
 800cde8:	4619      	mov	r1, r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	4642      	mov	r2, r8
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdf2:	464b      	mov	r3, r9
 800cdf4:	460a      	mov	r2, r1
 800cdf6:	eb42 0303 	adc.w	r3, r2, r3
 800cdfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce06:	667a      	str	r2, [r7, #100]	@ 0x64
 800ce08:	f04f 0200 	mov.w	r2, #0
 800ce0c:	f04f 0300 	mov.w	r3, #0
 800ce10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ce14:	4649      	mov	r1, r9
 800ce16:	008b      	lsls	r3, r1, #2
 800ce18:	4641      	mov	r1, r8
 800ce1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce1e:	4641      	mov	r1, r8
 800ce20:	008a      	lsls	r2, r1, #2
 800ce22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ce26:	f7f3 ff37 	bl	8000c98 <__aeabi_uldivmod>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <UART_SetConfig+0x4e4>)
 800ce30:	fba3 1302 	umull	r1, r3, r3, r2
 800ce34:	095b      	lsrs	r3, r3, #5
 800ce36:	2164      	movs	r1, #100	@ 0x64
 800ce38:	fb01 f303 	mul.w	r3, r1, r3
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	3332      	adds	r3, #50	@ 0x32
 800ce42:	4a08      	ldr	r2, [pc, #32]	@ (800ce64 <UART_SetConfig+0x4e4>)
 800ce44:	fba2 2303 	umull	r2, r3, r2, r3
 800ce48:	095b      	lsrs	r3, r3, #5
 800ce4a:	f003 020f 	and.w	r2, r3, #15
 800ce4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4422      	add	r2, r4
 800ce56:	609a      	str	r2, [r3, #8]
}
 800ce58:	bf00      	nop
 800ce5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce64:	51eb851f 	.word	0x51eb851f

0800ce68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ce6c:	4904      	ldr	r1, [pc, #16]	@ (800ce80 <MX_FATFS_Init+0x18>)
 800ce6e:	4805      	ldr	r0, [pc, #20]	@ (800ce84 <MX_FATFS_Init+0x1c>)
 800ce70:	f000 f8b0 	bl	800cfd4 <FATFS_LinkDriver>
 800ce74:	4603      	mov	r3, r0
 800ce76:	461a      	mov	r2, r3
 800ce78:	4b03      	ldr	r3, [pc, #12]	@ (800ce88 <MX_FATFS_Init+0x20>)
 800ce7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ce7c:	bf00      	nop
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20001c50 	.word	0x20001c50
 800ce84:	200009a0 	.word	0x200009a0
 800ce88:	20001c4c 	.word	0x20001c4c

0800ce8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ce96:	4b06      	ldr	r3, [pc, #24]	@ (800ceb0 <USER_initialize+0x24>)
 800ce98:	2201      	movs	r2, #1
 800ce9a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ce9c:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <USER_initialize+0x24>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	2000099d 	.word	0x2000099d

0800ceb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800cebe:	4b06      	ldr	r3, [pc, #24]	@ (800ced8 <USER_status+0x24>)
 800cec0:	2201      	movs	r2, #1
 800cec2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cec4:	4b04      	ldr	r3, [pc, #16]	@ (800ced8 <USER_status+0x24>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	2000099d 	.word	0x2000099d

0800cedc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60b9      	str	r1, [r7, #8]
 800cee4:	607a      	str	r2, [r7, #4]
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ceec:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
 800cf06:	4603      	mov	r3, r0
 800cf08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800cf0a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	603a      	str	r2, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
 800cf24:	460b      	mov	r3, r1
 800cf26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	73fb      	strb	r3, [r7, #15]
    return res;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
	...

0800cf3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf52:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf54:	7a5b      	ldrb	r3, [r3, #9]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d131      	bne.n	800cfc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf5e:	7a5b      	ldrb	r3, [r3, #9]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	461a      	mov	r2, r3
 800cf64:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf66:	2100      	movs	r1, #0
 800cf68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf6a:	4b19      	ldr	r3, [pc, #100]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf6c:	7a5b      	ldrb	r3, [r3, #9]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	4a17      	ldr	r2, [pc, #92]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf7a:	4b15      	ldr	r3, [pc, #84]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf7c:	7a5b      	ldrb	r3, [r3, #9]
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	461a      	mov	r2, r3
 800cf82:	4b13      	ldr	r3, [pc, #76]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf84:	4413      	add	r3, r2
 800cf86:	79fa      	ldrb	r2, [r7, #7]
 800cf88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf8a:	4b11      	ldr	r3, [pc, #68]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf8c:	7a5b      	ldrb	r3, [r3, #9]
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	1c5a      	adds	r2, r3, #1
 800cf92:	b2d1      	uxtb	r1, r2
 800cf94:	4a0e      	ldr	r2, [pc, #56]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf96:	7251      	strb	r1, [r2, #9]
 800cf98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf9a:	7dbb      	ldrb	r3, [r7, #22]
 800cf9c:	3330      	adds	r3, #48	@ 0x30
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	223a      	movs	r2, #58	@ 0x3a
 800cfaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	3302      	adds	r3, #2
 800cfb0:	222f      	movs	r2, #47	@ 0x2f
 800cfb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	3303      	adds	r3, #3
 800cfb8:	2200      	movs	r2, #0
 800cfba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	20001c54 	.word	0x20001c54

0800cfd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff ffaa 	bl	800cf3c <FATFS_LinkDriverEx>
 800cfe8:	4603      	mov	r3, r0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <malloc>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	@ (800d000 <malloc+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f000 b82d 	b.w	800d058 <_malloc_r>
 800cffe:	bf00      	nop
 800d000:	200009b4 	.word	0x200009b4

0800d004 <free>:
 800d004:	4b02      	ldr	r3, [pc, #8]	@ (800d010 <free+0xc>)
 800d006:	4601      	mov	r1, r0
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	f000 b8f5 	b.w	800d1f8 <_free_r>
 800d00e:	bf00      	nop
 800d010:	200009b4 	.word	0x200009b4

0800d014 <sbrk_aligned>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	4e0f      	ldr	r6, [pc, #60]	@ (800d054 <sbrk_aligned+0x40>)
 800d018:	460c      	mov	r4, r1
 800d01a:	6831      	ldr	r1, [r6, #0]
 800d01c:	4605      	mov	r5, r0
 800d01e:	b911      	cbnz	r1, 800d026 <sbrk_aligned+0x12>
 800d020:	f000 f8ae 	bl	800d180 <_sbrk_r>
 800d024:	6030      	str	r0, [r6, #0]
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 f8a9 	bl	800d180 <_sbrk_r>
 800d02e:	1c43      	adds	r3, r0, #1
 800d030:	d103      	bne.n	800d03a <sbrk_aligned+0x26>
 800d032:	f04f 34ff 	mov.w	r4, #4294967295
 800d036:	4620      	mov	r0, r4
 800d038:	bd70      	pop	{r4, r5, r6, pc}
 800d03a:	1cc4      	adds	r4, r0, #3
 800d03c:	f024 0403 	bic.w	r4, r4, #3
 800d040:	42a0      	cmp	r0, r4
 800d042:	d0f8      	beq.n	800d036 <sbrk_aligned+0x22>
 800d044:	1a21      	subs	r1, r4, r0
 800d046:	4628      	mov	r0, r5
 800d048:	f000 f89a 	bl	800d180 <_sbrk_r>
 800d04c:	3001      	adds	r0, #1
 800d04e:	d1f2      	bne.n	800d036 <sbrk_aligned+0x22>
 800d050:	e7ef      	b.n	800d032 <sbrk_aligned+0x1e>
 800d052:	bf00      	nop
 800d054:	20001c60 	.word	0x20001c60

0800d058 <_malloc_r>:
 800d058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05c:	1ccd      	adds	r5, r1, #3
 800d05e:	f025 0503 	bic.w	r5, r5, #3
 800d062:	3508      	adds	r5, #8
 800d064:	2d0c      	cmp	r5, #12
 800d066:	bf38      	it	cc
 800d068:	250c      	movcc	r5, #12
 800d06a:	2d00      	cmp	r5, #0
 800d06c:	4606      	mov	r6, r0
 800d06e:	db01      	blt.n	800d074 <_malloc_r+0x1c>
 800d070:	42a9      	cmp	r1, r5
 800d072:	d904      	bls.n	800d07e <_malloc_r+0x26>
 800d074:	230c      	movs	r3, #12
 800d076:	6033      	str	r3, [r6, #0]
 800d078:	2000      	movs	r0, #0
 800d07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d07e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d154 <_malloc_r+0xfc>
 800d082:	f000 f869 	bl	800d158 <__malloc_lock>
 800d086:	f8d8 3000 	ldr.w	r3, [r8]
 800d08a:	461c      	mov	r4, r3
 800d08c:	bb44      	cbnz	r4, 800d0e0 <_malloc_r+0x88>
 800d08e:	4629      	mov	r1, r5
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff ffbf 	bl	800d014 <sbrk_aligned>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	4604      	mov	r4, r0
 800d09a:	d158      	bne.n	800d14e <_malloc_r+0xf6>
 800d09c:	f8d8 4000 	ldr.w	r4, [r8]
 800d0a0:	4627      	mov	r7, r4
 800d0a2:	2f00      	cmp	r7, #0
 800d0a4:	d143      	bne.n	800d12e <_malloc_r+0xd6>
 800d0a6:	2c00      	cmp	r4, #0
 800d0a8:	d04b      	beq.n	800d142 <_malloc_r+0xea>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	4639      	mov	r1, r7
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	eb04 0903 	add.w	r9, r4, r3
 800d0b4:	f000 f864 	bl	800d180 <_sbrk_r>
 800d0b8:	4581      	cmp	r9, r0
 800d0ba:	d142      	bne.n	800d142 <_malloc_r+0xea>
 800d0bc:	6821      	ldr	r1, [r4, #0]
 800d0be:	1a6d      	subs	r5, r5, r1
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff ffa6 	bl	800d014 <sbrk_aligned>
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d03a      	beq.n	800d142 <_malloc_r+0xea>
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	442b      	add	r3, r5
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	bb62      	cbnz	r2, 800d134 <_malloc_r+0xdc>
 800d0da:	f8c8 7000 	str.w	r7, [r8]
 800d0de:	e00f      	b.n	800d100 <_malloc_r+0xa8>
 800d0e0:	6822      	ldr	r2, [r4, #0]
 800d0e2:	1b52      	subs	r2, r2, r5
 800d0e4:	d420      	bmi.n	800d128 <_malloc_r+0xd0>
 800d0e6:	2a0b      	cmp	r2, #11
 800d0e8:	d917      	bls.n	800d11a <_malloc_r+0xc2>
 800d0ea:	1961      	adds	r1, r4, r5
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	6025      	str	r5, [r4, #0]
 800d0f0:	bf18      	it	ne
 800d0f2:	6059      	strne	r1, [r3, #4]
 800d0f4:	6863      	ldr	r3, [r4, #4]
 800d0f6:	bf08      	it	eq
 800d0f8:	f8c8 1000 	streq.w	r1, [r8]
 800d0fc:	5162      	str	r2, [r4, r5]
 800d0fe:	604b      	str	r3, [r1, #4]
 800d100:	4630      	mov	r0, r6
 800d102:	f000 f82f 	bl	800d164 <__malloc_unlock>
 800d106:	f104 000b 	add.w	r0, r4, #11
 800d10a:	1d23      	adds	r3, r4, #4
 800d10c:	f020 0007 	bic.w	r0, r0, #7
 800d110:	1ac2      	subs	r2, r0, r3
 800d112:	bf1c      	itt	ne
 800d114:	1a1b      	subne	r3, r3, r0
 800d116:	50a3      	strne	r3, [r4, r2]
 800d118:	e7af      	b.n	800d07a <_malloc_r+0x22>
 800d11a:	6862      	ldr	r2, [r4, #4]
 800d11c:	42a3      	cmp	r3, r4
 800d11e:	bf0c      	ite	eq
 800d120:	f8c8 2000 	streq.w	r2, [r8]
 800d124:	605a      	strne	r2, [r3, #4]
 800d126:	e7eb      	b.n	800d100 <_malloc_r+0xa8>
 800d128:	4623      	mov	r3, r4
 800d12a:	6864      	ldr	r4, [r4, #4]
 800d12c:	e7ae      	b.n	800d08c <_malloc_r+0x34>
 800d12e:	463c      	mov	r4, r7
 800d130:	687f      	ldr	r7, [r7, #4]
 800d132:	e7b6      	b.n	800d0a2 <_malloc_r+0x4a>
 800d134:	461a      	mov	r2, r3
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	42a3      	cmp	r3, r4
 800d13a:	d1fb      	bne.n	800d134 <_malloc_r+0xdc>
 800d13c:	2300      	movs	r3, #0
 800d13e:	6053      	str	r3, [r2, #4]
 800d140:	e7de      	b.n	800d100 <_malloc_r+0xa8>
 800d142:	230c      	movs	r3, #12
 800d144:	6033      	str	r3, [r6, #0]
 800d146:	4630      	mov	r0, r6
 800d148:	f000 f80c 	bl	800d164 <__malloc_unlock>
 800d14c:	e794      	b.n	800d078 <_malloc_r+0x20>
 800d14e:	6005      	str	r5, [r0, #0]
 800d150:	e7d6      	b.n	800d100 <_malloc_r+0xa8>
 800d152:	bf00      	nop
 800d154:	20001c64 	.word	0x20001c64

0800d158 <__malloc_lock>:
 800d158:	4801      	ldr	r0, [pc, #4]	@ (800d160 <__malloc_lock+0x8>)
 800d15a:	f000 b84b 	b.w	800d1f4 <__retarget_lock_acquire_recursive>
 800d15e:	bf00      	nop
 800d160:	20001da4 	.word	0x20001da4

0800d164 <__malloc_unlock>:
 800d164:	4801      	ldr	r0, [pc, #4]	@ (800d16c <__malloc_unlock+0x8>)
 800d166:	f000 b846 	b.w	800d1f6 <__retarget_lock_release_recursive>
 800d16a:	bf00      	nop
 800d16c:	20001da4 	.word	0x20001da4

0800d170 <memset>:
 800d170:	4402      	add	r2, r0
 800d172:	4603      	mov	r3, r0
 800d174:	4293      	cmp	r3, r2
 800d176:	d100      	bne.n	800d17a <memset+0xa>
 800d178:	4770      	bx	lr
 800d17a:	f803 1b01 	strb.w	r1, [r3], #1
 800d17e:	e7f9      	b.n	800d174 <memset+0x4>

0800d180 <_sbrk_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	@ (800d19c <_sbrk_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7fa ff76 	bl	800807c <_sbrk>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_sbrk_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_sbrk_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20001da0 	.word	0x20001da0

0800d1a0 <__errno>:
 800d1a0:	4b01      	ldr	r3, [pc, #4]	@ (800d1a8 <__errno+0x8>)
 800d1a2:	6818      	ldr	r0, [r3, #0]
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	200009b4 	.word	0x200009b4

0800d1ac <__libc_init_array>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	4d0d      	ldr	r5, [pc, #52]	@ (800d1e4 <__libc_init_array+0x38>)
 800d1b0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1e8 <__libc_init_array+0x3c>)
 800d1b2:	1b64      	subs	r4, r4, r5
 800d1b4:	10a4      	asrs	r4, r4, #2
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	42a6      	cmp	r6, r4
 800d1ba:	d109      	bne.n	800d1d0 <__libc_init_array+0x24>
 800d1bc:	4d0b      	ldr	r5, [pc, #44]	@ (800d1ec <__libc_init_array+0x40>)
 800d1be:	4c0c      	ldr	r4, [pc, #48]	@ (800d1f0 <__libc_init_array+0x44>)
 800d1c0:	f000 f864 	bl	800d28c <_init>
 800d1c4:	1b64      	subs	r4, r4, r5
 800d1c6:	10a4      	asrs	r4, r4, #2
 800d1c8:	2600      	movs	r6, #0
 800d1ca:	42a6      	cmp	r6, r4
 800d1cc:	d105      	bne.n	800d1da <__libc_init_array+0x2e>
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d4:	4798      	blx	r3
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	e7ee      	b.n	800d1b8 <__libc_init_array+0xc>
 800d1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1de:	4798      	blx	r3
 800d1e0:	3601      	adds	r6, #1
 800d1e2:	e7f2      	b.n	800d1ca <__libc_init_array+0x1e>
 800d1e4:	0800e864 	.word	0x0800e864
 800d1e8:	0800e864 	.word	0x0800e864
 800d1ec:	0800e864 	.word	0x0800e864
 800d1f0:	0800e868 	.word	0x0800e868

0800d1f4 <__retarget_lock_acquire_recursive>:
 800d1f4:	4770      	bx	lr

0800d1f6 <__retarget_lock_release_recursive>:
 800d1f6:	4770      	bx	lr

0800d1f8 <_free_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	2900      	cmp	r1, #0
 800d1fe:	d041      	beq.n	800d284 <_free_r+0x8c>
 800d200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d204:	1f0c      	subs	r4, r1, #4
 800d206:	2b00      	cmp	r3, #0
 800d208:	bfb8      	it	lt
 800d20a:	18e4      	addlt	r4, r4, r3
 800d20c:	f7ff ffa4 	bl	800d158 <__malloc_lock>
 800d210:	4a1d      	ldr	r2, [pc, #116]	@ (800d288 <_free_r+0x90>)
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	b933      	cbnz	r3, 800d224 <_free_r+0x2c>
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	6014      	str	r4, [r2, #0]
 800d21a:	4628      	mov	r0, r5
 800d21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d220:	f7ff bfa0 	b.w	800d164 <__malloc_unlock>
 800d224:	42a3      	cmp	r3, r4
 800d226:	d908      	bls.n	800d23a <_free_r+0x42>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	1821      	adds	r1, r4, r0
 800d22c:	428b      	cmp	r3, r1
 800d22e:	bf01      	itttt	eq
 800d230:	6819      	ldreq	r1, [r3, #0]
 800d232:	685b      	ldreq	r3, [r3, #4]
 800d234:	1809      	addeq	r1, r1, r0
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	e7ed      	b.n	800d216 <_free_r+0x1e>
 800d23a:	461a      	mov	r2, r3
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	b10b      	cbz	r3, 800d244 <_free_r+0x4c>
 800d240:	42a3      	cmp	r3, r4
 800d242:	d9fa      	bls.n	800d23a <_free_r+0x42>
 800d244:	6811      	ldr	r1, [r2, #0]
 800d246:	1850      	adds	r0, r2, r1
 800d248:	42a0      	cmp	r0, r4
 800d24a:	d10b      	bne.n	800d264 <_free_r+0x6c>
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	4401      	add	r1, r0
 800d250:	1850      	adds	r0, r2, r1
 800d252:	4283      	cmp	r3, r0
 800d254:	6011      	str	r1, [r2, #0]
 800d256:	d1e0      	bne.n	800d21a <_free_r+0x22>
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	6053      	str	r3, [r2, #4]
 800d25e:	4408      	add	r0, r1
 800d260:	6010      	str	r0, [r2, #0]
 800d262:	e7da      	b.n	800d21a <_free_r+0x22>
 800d264:	d902      	bls.n	800d26c <_free_r+0x74>
 800d266:	230c      	movs	r3, #12
 800d268:	602b      	str	r3, [r5, #0]
 800d26a:	e7d6      	b.n	800d21a <_free_r+0x22>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	1821      	adds	r1, r4, r0
 800d270:	428b      	cmp	r3, r1
 800d272:	bf04      	itt	eq
 800d274:	6819      	ldreq	r1, [r3, #0]
 800d276:	685b      	ldreq	r3, [r3, #4]
 800d278:	6063      	str	r3, [r4, #4]
 800d27a:	bf04      	itt	eq
 800d27c:	1809      	addeq	r1, r1, r0
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	6054      	str	r4, [r2, #4]
 800d282:	e7ca      	b.n	800d21a <_free_r+0x22>
 800d284:	bd38      	pop	{r3, r4, r5, pc}
 800d286:	bf00      	nop
 800d288:	20001c64 	.word	0x20001c64

0800d28c <_init>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr

0800d298 <_fini>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr
