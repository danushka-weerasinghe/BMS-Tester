
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001508  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c2c  08009c2c  0000b944  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c34  08009c34  0000b944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c34  08009c34  0000ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c38  08009c38  0000ac38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000944  20000000  08009c3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b944  2**0
                  CONTENTS
 10 .bss          0000119c  20000944  20000944  0000b944  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ae0  20001ae0  0000b944  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY
 13 .debug_info   00095c6f  00000000  00000000  0000b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009004  00000000  00000000  000a15e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0005a619  00000000  00000000  000aa5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004318  00000000  00000000  00104c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00005c6b  00000000  00000000  00108f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a5b4  00000000  00000000  0010eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00058ec8  00000000  00000000  00139137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010123b  00000000  00000000  00191fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0029323a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e4f0  00000000  00000000  00293280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  002a1770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000944 	.word	0x20000944
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800870c 	.word	0x0800870c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000948 	.word	0x20000948
 80001ec:	0800870c 	.word	0x0800870c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	4c19      	ldr	r4, [pc, #100]	@ (8000e10 <LED_Init+0x68>)
 8000dac:	f104 0550 	add.w	r5, r4, #80	@ 0x50

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000db0:	88a1      	ldrh	r1, [r4, #4]
 8000db2:	f854 0b08 	ldr.w	r0, [r4], #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	f004 ffd2 	bl	8005d60 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000dbc:	42ac      	cmp	r4, r5
 8000dbe:	d1f7      	bne.n	8000db0 <LED_Init+0x8>
 8000dc0:	4c14      	ldr	r4, [pc, #80]	@ (8000e14 <LED_Init+0x6c>)
 8000dc2:	f104 0520 	add.w	r5, r4, #32
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000dc6:	88a1      	ldrh	r1, [r4, #4]
 8000dc8:	f854 0b08 	ldr.w	r0, [r4], #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f004 ffc7 	bl	8005d60 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	d1f7      	bne.n	8000dc6 <LED_Init+0x1e>
 8000dd6:	4c10      	ldr	r4, [pc, #64]	@ (8000e18 <LED_Init+0x70>)
 8000dd8:	f104 0530 	add.w	r5, r4, #48	@ 0x30
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8000ddc:	88a1      	ldrh	r1, [r4, #4]
 8000dde:	f854 0b08 	ldr.w	r0, [r4], #8
 8000de2:	2201      	movs	r2, #1
 8000de4:	f004 ffbc 	bl	8005d60 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8000de8:	42ac      	cmp	r4, r5
 8000dea:	d1f7      	bne.n	8000ddc <LED_Init+0x34>
 8000dec:	4d0b      	ldr	r5, [pc, #44]	@ (8000e1c <LED_Init+0x74>)
 8000dee:	4c0c      	ldr	r4, [pc, #48]	@ (8000e20 <LED_Init+0x78>)
 8000df0:	f105 0718 	add.w	r7, r5, #24
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8000df4:	2601      	movs	r6, #1
 8000df6:	f805 6f01 	strb.w	r6, [r5, #1]!
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
        uint8_t expander_id = cell_leds[i].expander_id;
        uint16_t pin = cell_leds[i].pin;

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 8000dfa:	88e2      	ldrh	r2, [r4, #6]
 8000dfc:	7921      	ldrb	r1, [r4, #4]
 8000dfe:	f854 0b08 	ldr.w	r0, [r4], #8
 8000e02:	2301      	movs	r3, #1
 8000e04:	f001 fdda 	bl	80029bc <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8000e08:	42bd      	cmp	r5, r7
 8000e0a:	d1f4      	bne.n	8000df6 <LED_Init+0x4e>
    }

}
 8000e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000110 	.word	0x20000110
 8000e14:	200000f0 	.word	0x200000f0
 8000e18:	200000c0 	.word	0x200000c0
 8000e1c:	2000095f 	.word	0x2000095f
 8000e20:	20000000 	.word	0x20000000

08000e24 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
    currentTime = HAL_GetTick();

    for(int j = 0; j < 4; j++) {
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000e26:	4d14      	ldr	r5, [pc, #80]	@ (8000e78 <Push_ButtonHandler+0x54>)
    currentTime = HAL_GetTick();
 8000e28:	4e14      	ldr	r6, [pc, #80]	@ (8000e7c <Push_ButtonHandler+0x58>)
{
 8000e2a:	4604      	mov	r4, r0
    currentTime = HAL_GetTick();
 8000e2c:	f004 fab8 	bl	80053a0 <HAL_GetTick>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000e30:	682b      	ldr	r3, [r5, #0]
    currentTime = HAL_GetTick();
 8000e32:	6030      	str	r0, [r6, #0]
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000e34:	1ac3      	subs	r3, r0, r3
 8000e36:	2b96      	cmp	r3, #150	@ 0x96
 8000e38:	d800      	bhi.n	8000e3c <Push_ButtonHandler+0x18>
            LED_Toggle(j+1);  // Keep your existing LED toggle
            previousTime = currentTime;
            break;
        }
    }
}
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000e3c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8000e40:	d00a      	beq.n	8000e58 <Push_ButtonHandler+0x34>
 8000e42:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8000e46:	d015      	beq.n	8000e74 <Push_ButtonHandler+0x50>
 8000e48:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8000e4c:	d010      	beq.n	8000e70 <Push_ButtonHandler+0x4c>
 8000e4e:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000e52:	d1f2      	bne.n	8000e3a <Push_ButtonHandler+0x16>
 8000e54:	2303      	movs	r3, #3
 8000e56:	e000      	b.n	8000e5a <Push_ButtonHandler+0x36>
    for(int j = 0; j < 4; j++) {
 8000e58:	2300      	movs	r3, #0
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <Push_ButtonHandler+0x5c>)
 8000e5c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000e60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000e64:	8889      	ldrh	r1, [r1, #4]
 8000e66:	f004 ff7f 	bl	8005d68 <HAL_GPIO_TogglePin>
            previousTime = currentTime;
 8000e6a:	6833      	ldr	r3, [r6, #0]
 8000e6c:	602b      	str	r3, [r5, #0]
}
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
    for(int j = 0; j < 4; j++) {
 8000e70:	2302      	movs	r3, #2
 8000e72:	e7f2      	b.n	8000e5a <Push_ButtonHandler+0x36>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e7f0      	b.n	8000e5a <Push_ButtonHandler+0x36>
 8000e78:	20000978 	.word	0x20000978
 8000e7c:	2000097c 	.word	0x2000097c
 8000e80:	20000110 	.word	0x20000110

08000e84 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	ee10 0a10 	vmov	r0, s0
 8000e8a:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 8000e8c:	f7ff fb14 	bl	80004b8 <__aeabi_f2d>
 8000e90:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <cell12_Temp_01_Set+0x110>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	4838      	ldr	r0, [pc, #224]	@ (8001378 <cell12_Temp_01_Set+0x150>)
 8001298:	f007 f91c 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f006 fa71 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e94:	4c41      	ldr	r4, [pc, #260]	@ (8000f9c <cell12_Temp_01_Set+0x118>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000e96:	4d42      	ldr	r5, [pc, #264]	@ (8000fa0 <cell12_Temp_01_Set+0x11c>)
	int res = (resistance/50.0)*1024;
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f7ff fc8f 	bl	80007bc <__aeabi_ddiv>
 8000e9e:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <cell12_Temp_01_Set+0x120>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f7ff fb61 	bl	8000568 <__aeabi_dmul>
 8000ea6:	f7ff fd71 	bl	800098c <__aeabi_d2iz>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
		        r[0] |= (resArray[i] << (7 - i));
 8000eac:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	f88d 000d 	strb.w	r0, [sp, #13]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	f88d 300c 	strb.w	r3, [sp, #12]
 8000ec0:	f004 ff4e 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f004 fa71 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f004 ff46 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f004 fa69 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000eda:	4620      	mov	r0, r4
 8000edc:	2200      	movs	r2, #0
 8000ede:	2102      	movs	r1, #2
 8000ee0:	f004 ff3e 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	492f      	ldr	r1, [pc, #188]	@ (8000fa8 <cell12_Temp_01_Set+0x124>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	4628      	mov	r0, r5
 8000eee:	f006 f99d 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f004 ff32 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f004 fa55 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000f02:	4620      	mov	r0, r4
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	f004 ff2a 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	4926      	ldr	r1, [pc, #152]	@ (8000fac <cell12_Temp_01_Set+0x128>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	4628      	mov	r0, r5
 8000f16:	f006 f989 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f004 ff1e 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f004 fa41 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	f004 ff16 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	a903      	add	r1, sp, #12
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f006 f975 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	4620      	mov	r0, r4
 8000f48:	f004 ff0a 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f004 fa2d 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000f52:	4620      	mov	r0, r4
 8000f54:	2200      	movs	r2, #0
 8000f56:	2102      	movs	r1, #2
 8000f58:	f004 ff02 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <cell12_Temp_01_Set+0x12c>)
 8000f64:	4913      	ldr	r1, [pc, #76]	@ (8000fb4 <cell12_Temp_01_Set+0x130>)
 8000f66:	2302      	movs	r3, #2
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f006 fa63 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2102      	movs	r1, #2
 8000f72:	4620      	mov	r0, r4
 8000f74:	f004 fef4 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f004 fa17 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	4630      	mov	r0, r6
 8000f84:	f004 feec 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f004 fa0f 	bl	80053ac <HAL_Delay>

}
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd70      	pop	{r4, r5, r6, pc}
 8000f92:	bf00      	nop
 8000f94:	40490000 	.word	0x40490000
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	20001448 	.word	0x20001448
 8000fa4:	40900000 	.word	0x40900000
 8000fa8:	20000984 	.word	0x20000984
 8000fac:	20000164 	.word	0x20000164
 8000fb0:	20000980 	.word	0x20000980
 8000fb4:	20000160 	.word	0x20000160

08000fb8 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	ee10 0a10 	vmov	r0, s0
 8000fbe:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 8000fc0:	f7ff fa7a 	bl	80004b8 <__aeabi_f2d>
 8000fc4:	4b44      	ldr	r3, [pc, #272]	@ (80010d8 <cell12_Temp_02_Set+0x120>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <cell12_Temp_02_Set+0x164>)
 8001404:	f007 f866 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001408:	200a      	movs	r0, #10
 800140a:	f006 f9bb 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000fc8:	4c45      	ldr	r4, [pc, #276]	@ (80010e0 <cell12_Temp_02_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000fca:	4d46      	ldr	r5, [pc, #280]	@ (80010e4 <cell12_Temp_02_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f7ff fbf5 	bl	80007bc <__aeabi_ddiv>
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <cell12_Temp_02_Set+0x130>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f7ff fac7 	bl	8000568 <__aeabi_dmul>
 8000fda:	f7ff fcd7 	bl	800098c <__aeabi_d2iz>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
		        r[0] |= (resArray[i] << (7 - i));
 8000fe0:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000fe8:	4611      	mov	r1, r2
 8000fea:	f88d 000d 	strb.w	r0, [sp, #13]
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f88d 300c 	strb.w	r3, [sp, #12]
 8000ff4:	f004 feb4 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f004 f9d7 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001004:	4620      	mov	r0, r4
 8001006:	f004 feab 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f004 f9ce 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001010:	4620      	mov	r0, r4
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001018:	f004 fea2 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	4932      	ldr	r1, [pc, #200]	@ (80010ec <cell12_Temp_02_Set+0x134>)
 8001022:	2202      	movs	r2, #2
 8001024:	4628      	mov	r0, r5
 8001026:	f006 f901 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001030:	4620      	mov	r0, r4
 8001032:	f004 fe95 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f004 f9b8 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800103c:	4620      	mov	r0, r4
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001044:	f004 fe8c 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	4928      	ldr	r1, [pc, #160]	@ (80010f0 <cell12_Temp_02_Set+0x138>)
 800104e:	2202      	movs	r2, #2
 8001050:	4628      	mov	r0, r5
 8001052:	f006 f8eb 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105c:	4620      	mov	r0, r4
 800105e:	f004 fe7f 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f004 f9a2 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001068:	4620      	mov	r0, r4
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	f004 fe76 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	a903      	add	r1, sp, #12
 800107a:	2202      	movs	r2, #2
 800107c:	4628      	mov	r0, r5
 800107e:	f006 f8d5 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001088:	4620      	mov	r0, r4
 800108a:	f004 fe69 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800108e:	200a      	movs	r0, #10
 8001090:	f004 f98c 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001094:	4620      	mov	r0, r4
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800109c:	f004 fe60 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <cell12_Temp_02_Set+0x13c>)
 80010a8:	4913      	ldr	r1, [pc, #76]	@ (80010f8 <cell12_Temp_02_Set+0x140>)
 80010aa:	2302      	movs	r3, #2
 80010ac:	4628      	mov	r0, r5
 80010ae:	f006 f9c1 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b8:	4620      	mov	r0, r4
 80010ba:	f004 fe51 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f004 f974 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	4630      	mov	r0, r6
 80010ca:	f004 fe49 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f004 f96c 	bl	80053ac <HAL_Delay>

}
 80010d4:	b004      	add	sp, #16
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	40490000 	.word	0x40490000
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40021400 	.word	0x40021400
 80010e4:	20001448 	.word	0x20001448
 80010e8:	40900000 	.word	0x40900000
 80010ec:	20000984 	.word	0x20000984
 80010f0:	20000164 	.word	0x20000164
 80010f4:	20000980 	.word	0x20000980
 80010f8:	20000160 	.word	0x20000160

080010fc <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 80010fc:	b530      	push	{r4, r5, lr}
 80010fe:	ee10 0a10 	vmov	r0, s0
 8001102:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 8001104:	f7ff f9d8 	bl	80004b8 <__aeabi_f2d>
 8001108:	4b40      	ldr	r3, [pc, #256]	@ (800120c <cell12_Temp_03_Set+0x110>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001584:	4838      	ldr	r0, [pc, #224]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 8001586:	f006 ffa5 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f006 f8fa 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800110c:	4d41      	ldr	r5, [pc, #260]	@ (8001214 <cell12_Temp_03_Set+0x118>)
	int res = (resistance/50.0)*1024;
 800110e:	2200      	movs	r2, #0
 8001110:	f7ff fb54 	bl	80007bc <__aeabi_ddiv>
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <cell12_Temp_03_Set+0x11c>)
 8001116:	2200      	movs	r2, #0
 8001118:	f7ff fa26 	bl	8000568 <__aeabi_dmul>
 800111c:	f7ff fc36 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 8001120:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8001124:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112e:	f88d 000d 	strb.w	r0, [sp, #13]
 8001132:	4620      	mov	r0, r4
 8001134:	f88d 300c 	strb.w	r3, [sp, #12]
 8001138:	f004 fe12 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800113c:	200a      	movs	r0, #10
 800113e:	f004 f935 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	@ 0x40
 8001146:	4620      	mov	r0, r4
 8001148:	f004 fe0a 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f004 f92d 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001152:	4620      	mov	r0, r4
 8001154:	2200      	movs	r2, #0
 8001156:	2140      	movs	r1, #64	@ 0x40
 8001158:	f004 fe02 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	492e      	ldr	r1, [pc, #184]	@ (800121c <cell12_Temp_03_Set+0x120>)
 8001162:	2202      	movs	r2, #2
 8001164:	4628      	mov	r0, r5
 8001166:	f006 f861 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	4620      	mov	r0, r4
 8001170:	f004 fdf6 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f004 f919 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800117a:	4620      	mov	r0, r4
 800117c:	2200      	movs	r2, #0
 800117e:	2140      	movs	r1, #64	@ 0x40
 8001180:	f004 fdee 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4925      	ldr	r1, [pc, #148]	@ (8001220 <cell12_Temp_03_Set+0x124>)
 800118a:	2202      	movs	r2, #2
 800118c:	4628      	mov	r0, r5
 800118e:	f006 f84d 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4620      	mov	r0, r4
 8001198:	f004 fde2 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f004 f905 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80011a2:	4620      	mov	r0, r4
 80011a4:	2200      	movs	r2, #0
 80011a6:	2140      	movs	r1, #64	@ 0x40
 80011a8:	f004 fdda 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	a903      	add	r1, sp, #12
 80011b2:	2202      	movs	r2, #2
 80011b4:	4628      	mov	r0, r5
 80011b6:	f006 f839 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	@ 0x40
 80011be:	4620      	mov	r0, r4
 80011c0:	f004 fdce 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f004 f8f1 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80011ca:	4620      	mov	r0, r4
 80011cc:	2200      	movs	r2, #0
 80011ce:	2140      	movs	r1, #64	@ 0x40
 80011d0:	f004 fdc6 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <cell12_Temp_03_Set+0x128>)
 80011dc:	4912      	ldr	r1, [pc, #72]	@ (8001228 <cell12_Temp_03_Set+0x12c>)
 80011de:	2302      	movs	r3, #2
 80011e0:	4628      	mov	r0, r5
 80011e2:	f006 f927 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2140      	movs	r1, #64	@ 0x40
 80011ea:	4620      	mov	r0, r4
 80011ec:	f004 fdb8 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f004 f8db 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fc:	4620      	mov	r0, r4
 80011fe:	f004 fdaf 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f004 f8d2 	bl	80053ac <HAL_Delay>

}
 8001208:	b005      	add	sp, #20
 800120a:	bd30      	pop	{r4, r5, pc}
 800120c:	40490000 	.word	0x40490000
 8001210:	40021400 	.word	0x40021400
 8001214:	20001448 	.word	0x20001448
 8001218:	40900000 	.word	0x40900000
 800121c:	20000984 	.word	0x20000984
 8001220:	20000164 	.word	0x20000164
 8001224:	20000980 	.word	0x20000980
 8001228:	20000160 	.word	0x20000160

0800122c <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 800122c:	b530      	push	{r4, r5, lr}
 800122e:	ee10 0a10 	vmov	r0, s0
 8001232:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 8001234:	f7ff f940 	bl	80004b8 <__aeabi_f2d>
 8001238:	4b45      	ldr	r3, [pc, #276]	@ (8001350 <cell11_Temp_01_Set+0x124>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f0:	483d      	ldr	r0, [pc, #244]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 80016f2:	f006 feef 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016f6:	200a      	movs	r0, #10
 80016f8:	f006 f844 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800123c:	4d46      	ldr	r5, [pc, #280]	@ (8001358 <cell11_Temp_01_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 800123e:	2200      	movs	r2, #0
 8001240:	f7ff fabc 	bl	80007bc <__aeabi_ddiv>
 8001244:	4b45      	ldr	r3, [pc, #276]	@ (800135c <cell11_Temp_01_Set+0x130>)
 8001246:	2200      	movs	r2, #0
 8001248:	f7ff f98e 	bl	8000568 <__aeabi_dmul>
 800124c:	f7ff fb9e 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 8001250:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8001254:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800125e:	f88d 000d 	strb.w	r0, [sp, #13]
 8001262:	4620      	mov	r0, r4
 8001264:	f88d 300c 	strb.w	r3, [sp, #12]
 8001268:	f004 fd7a 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f004 f89d 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001278:	4620      	mov	r0, r4
 800127a:	f004 fd71 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f004 f894 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001284:	4620      	mov	r0, r4
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128c:	f004 fd68 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	4932      	ldr	r1, [pc, #200]	@ (8001360 <cell11_Temp_01_Set+0x134>)
 8001296:	2202      	movs	r2, #2
 8001298:	4628      	mov	r0, r5
 800129a:	f005 ffc7 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012a4:	4620      	mov	r0, r4
 80012a6:	f004 fd5b 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f004 f87e 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012b0:	4620      	mov	r0, r4
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012b8:	f004 fd52 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	4928      	ldr	r1, [pc, #160]	@ (8001364 <cell11_Temp_01_Set+0x138>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	4628      	mov	r0, r5
 80012c6:	f005 ffb1 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d0:	4620      	mov	r0, r4
 80012d2:	f004 fd45 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f004 f868 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012dc:	4620      	mov	r0, r4
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e4:	f004 fd3c 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	a903      	add	r1, sp, #12
 80012ee:	2202      	movs	r2, #2
 80012f0:	4628      	mov	r0, r5
 80012f2:	f005 ff9b 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012fc:	4620      	mov	r0, r4
 80012fe:	f004 fd2f 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f004 f852 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001308:	4620      	mov	r0, r4
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001310:	f004 fd26 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <cell11_Temp_01_Set+0x13c>)
 800131c:	4913      	ldr	r1, [pc, #76]	@ (800136c <cell11_Temp_01_Set+0x140>)
 800131e:	2302      	movs	r3, #2
 8001320:	4628      	mov	r0, r5
 8001322:	f006 f887 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800132c:	4620      	mov	r0, r4
 800132e:	f004 fd17 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f004 f83a 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800133e:	4620      	mov	r0, r4
 8001340:	f004 fd0e 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001344:	200a      	movs	r0, #10
 8001346:	f004 f831 	bl	80053ac <HAL_Delay>

}
 800134a:	b005      	add	sp, #20
 800134c:	bd30      	pop	{r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	40490000 	.word	0x40490000
 8001354:	40021c00 	.word	0x40021c00
 8001358:	200013f0 	.word	0x200013f0
 800135c:	40900000 	.word	0x40900000
 8001360:	20000984 	.word	0x20000984
 8001364:	20000164 	.word	0x20000164
 8001368:	20000980 	.word	0x20000980
 800136c:	20000160 	.word	0x20000160

08001370 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001370:	b530      	push	{r4, r5, lr}
 8001372:	ee10 0a10 	vmov	r0, s0
 8001376:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 8001378:	f7ff f89e 	bl	80004b8 <__aeabi_f2d>
 800137c:	4b45      	ldr	r3, [pc, #276]	@ (8001494 <cell11_Temp_02_Set+0x124>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001870:	483d      	ldr	r0, [pc, #244]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 8001872:	f006 fe2f 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001876:	200a      	movs	r0, #10
 8001878:	f005 ff84 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001380:	4d46      	ldr	r5, [pc, #280]	@ (800149c <cell11_Temp_02_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 8001382:	2200      	movs	r2, #0
 8001384:	f7ff fa1a 	bl	80007bc <__aeabi_ddiv>
 8001388:	4b45      	ldr	r3, [pc, #276]	@ (80014a0 <cell11_Temp_02_Set+0x130>)
 800138a:	2200      	movs	r2, #0
 800138c:	f7ff f8ec 	bl	8000568 <__aeabi_dmul>
 8001390:	f7ff fafc 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 8001394:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8001398:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a2:	f88d 000d 	strb.w	r0, [sp, #13]
 80013a6:	4620      	mov	r0, r4
 80013a8:	f88d 300c 	strb.w	r3, [sp, #12]
 80013ac:	f004 fcd8 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f003 fffb 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013bc:	4620      	mov	r0, r4
 80013be:	f004 fccf 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f003 fff2 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013c8:	4620      	mov	r0, r4
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d0:	f004 fcc6 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	4932      	ldr	r1, [pc, #200]	@ (80014a4 <cell11_Temp_02_Set+0x134>)
 80013da:	2202      	movs	r2, #2
 80013dc:	4628      	mov	r0, r5
 80013de:	f005 ff25 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e8:	4620      	mov	r0, r4
 80013ea:	f004 fcb9 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013ee:	200a      	movs	r0, #10
 80013f0:	f003 ffdc 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013f4:	4620      	mov	r0, r4
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fc:	f004 fcb0 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	4928      	ldr	r1, [pc, #160]	@ (80014a8 <cell11_Temp_02_Set+0x138>)
 8001406:	2202      	movs	r2, #2
 8001408:	4628      	mov	r0, r5
 800140a:	f005 ff0f 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001414:	4620      	mov	r0, r4
 8001416:	f004 fca3 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f003 ffc6 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001420:	4620      	mov	r0, r4
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001428:	f004 fc9a 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	a903      	add	r1, sp, #12
 8001432:	2202      	movs	r2, #2
 8001434:	4628      	mov	r0, r5
 8001436:	f005 fef9 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001440:	4620      	mov	r0, r4
 8001442:	f004 fc8d 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f003 ffb0 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800144c:	4620      	mov	r0, r4
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001454:	f004 fc84 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <cell11_Temp_02_Set+0x13c>)
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <cell11_Temp_02_Set+0x140>)
 8001462:	2302      	movs	r3, #2
 8001464:	4628      	mov	r0, r5
 8001466:	f005 ffe5 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	4620      	mov	r0, r4
 8001472:	f004 fc75 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f003 ff98 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001482:	4620      	mov	r0, r4
 8001484:	f004 fc6c 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f003 ff8f 	bl	80053ac <HAL_Delay>

}
 800148e:	b005      	add	sp, #20
 8001490:	bd30      	pop	{r4, r5, pc}
 8001492:	bf00      	nop
 8001494:	40490000 	.word	0x40490000
 8001498:	40021c00 	.word	0x40021c00
 800149c:	200013f0 	.word	0x200013f0
 80014a0:	40900000 	.word	0x40900000
 80014a4:	20000984 	.word	0x20000984
 80014a8:	20000164 	.word	0x20000164
 80014ac:	20000980 	.word	0x20000980
 80014b0:	20000160 	.word	0x20000160

080014b4 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	ee10 0a10 	vmov	r0, s0
 80014ba:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 80014bc:	f7fe fffc 	bl	80004b8 <__aeabi_f2d>
 80014c0:	4b44      	ldr	r3, [pc, #272]	@ (80015d4 <cell11_Temp_03_Set+0x120>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2140      	movs	r1, #64	@ 0x40
 80019ee:	483d      	ldr	r0, [pc, #244]	@ (8001ae4 <cell11_Temp_03_Set+0x164>)
 80019f0:	f006 fd70 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019f4:	200a      	movs	r0, #10
 80019f6:	f005 fec5 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80014c4:	4c45      	ldr	r4, [pc, #276]	@ (80015dc <cell11_Temp_03_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80014c6:	4d46      	ldr	r5, [pc, #280]	@ (80015e0 <cell11_Temp_03_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 80014c8:	2200      	movs	r2, #0
 80014ca:	f7ff f977 	bl	80007bc <__aeabi_ddiv>
 80014ce:	4b45      	ldr	r3, [pc, #276]	@ (80015e4 <cell11_Temp_03_Set+0x130>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f7ff f849 	bl	8000568 <__aeabi_dmul>
 80014d6:	f7ff fa59 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 80014da:	f3c0 2301 	ubfx	r3, r0, #8, #2
 80014de:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2140      	movs	r1, #64	@ 0x40
 80014e6:	f88d 000d 	strb.w	r0, [sp, #13]
 80014ea:	4630      	mov	r0, r6
 80014ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80014f0:	f004 fc36 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014f4:	200a      	movs	r0, #10
 80014f6:	f003 ff59 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001500:	4620      	mov	r0, r4
 8001502:	f004 fc2d 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001506:	200a      	movs	r0, #10
 8001508:	f003 ff50 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800150c:	4620      	mov	r0, r4
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001514:	f004 fc24 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	4932      	ldr	r1, [pc, #200]	@ (80015e8 <cell11_Temp_03_Set+0x134>)
 800151e:	2202      	movs	r2, #2
 8001520:	4628      	mov	r0, r5
 8001522:	f005 fe83 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152c:	4620      	mov	r0, r4
 800152e:	f004 fc17 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001532:	200a      	movs	r0, #10
 8001534:	f003 ff3a 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001538:	4620      	mov	r0, r4
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001540:	f004 fc0e 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	4928      	ldr	r1, [pc, #160]	@ (80015ec <cell11_Temp_03_Set+0x138>)
 800154a:	2202      	movs	r2, #2
 800154c:	4628      	mov	r0, r5
 800154e:	f005 fe6d 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001558:	4620      	mov	r0, r4
 800155a:	f004 fc01 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800155e:	200a      	movs	r0, #10
 8001560:	f003 ff24 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001564:	4620      	mov	r0, r4
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156c:	f004 fbf8 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	a903      	add	r1, sp, #12
 8001576:	2202      	movs	r2, #2
 8001578:	4628      	mov	r0, r5
 800157a:	f005 fe57 	bl	800722c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001584:	4620      	mov	r0, r4
 8001586:	f004 fbeb 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f003 ff0e 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001590:	4620      	mov	r0, r4
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001598:	f004 fbe2 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <cell11_Temp_03_Set+0x13c>)
 80015a4:	4913      	ldr	r1, [pc, #76]	@ (80015f4 <cell11_Temp_03_Set+0x140>)
 80015a6:	2302      	movs	r3, #2
 80015a8:	4628      	mov	r0, r5
 80015aa:	f005 ff43 	bl	8007434 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b4:	4620      	mov	r0, r4
 80015b6:	f004 fbd3 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ba:	200a      	movs	r0, #10
 80015bc:	f003 fef6 	bl	80053ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	@ 0x40
 80015c4:	4630      	mov	r0, r6
 80015c6:	f004 fbcb 	bl	8005d60 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ca:	200a      	movs	r0, #10
 80015cc:	f003 feee 	bl	80053ac <HAL_Delay>

}
 80015d0:	b004      	add	sp, #16
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	40490000 	.word	0x40490000
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40020400 	.word	0x40020400
 80015e0:	200013f0 	.word	0x200013f0
 80015e4:	40900000 	.word	0x40900000
 80015e8:	20000984 	.word	0x20000984
 80015ec:	20000164 	.word	0x20000164
 80015f0:	20000980 	.word	0x20000980
 80015f4:	20000160 	.word	0x20000160

080015f8 <Set_Resistance>:
	HAL_Delay(10);

}


void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 80015f8:	b500      	push	{lr}
 80015fa:	ed2d 8b02 	vpush	{d8}
 80015fe:	b083      	sub	sp, #12
	switch (tempCardId){
 8001600:	3801      	subs	r0, #1
void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 8001602:	9101      	str	r1, [sp, #4]
	switch (tempCardId){
 8001604:	2805      	cmp	r0, #5
 8001606:	d83e      	bhi.n	8001686 <Set_Resistance+0x8e>
 8001608:	e8df f000 	tbb	[pc, r0]
 800160c:	332e2910 	.word	0x332e2910
 8001610:	0338      	.short	0x0338


	case 0x01:
		cell12_Temp_01_Set(temperature);
 8001612:	eddd 7a01 	vldr	s15, [sp, #4]
 8001616:	eeb8 8a67 	vcvt.f32.u32	s16, s15

	case 0x05:
		cell11_Temp_02_Set(temperature);

	case 0x06:
		cell11_Temp_03_Set(temperature);
 800161a:	eeb0 0a48 	vmov.f32	s0, s16





}
 800161e:	b003      	add	sp, #12
 8001620:	ecbd 8b02 	vpop	{d8}
 8001624:	f85d eb04 	ldr.w	lr, [sp], #4
		cell11_Temp_03_Set(temperature);
 8001628:	f7ff bf44 	b.w	80014b4 <cell11_Temp_03_Set>
		cell12_Temp_01_Set(temperature);
 800162c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001630:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001634:	eeb0 0a48 	vmov.f32	s0, s16
 8001638:	f7ff fc24 	bl	8000e84 <cell12_Temp_01_Set>
		cell12_Temp_02_Set(temperature);
 800163c:	eeb0 0a48 	vmov.f32	s0, s16
 8001640:	f7ff fcba 	bl	8000fb8 <cell12_Temp_02_Set>
		cell12_Temp_03_Set(temperature);
 8001644:	eeb0 0a48 	vmov.f32	s0, s16
 8001648:	f7ff fd58 	bl	80010fc <cell12_Temp_03_Set>
		cell11_Temp_01_Set(temperature);
 800164c:	eeb0 0a48 	vmov.f32	s0, s16
 8001650:	f7ff fdec 	bl	800122c <cell11_Temp_01_Set>
		cell11_Temp_02_Set(temperature);
 8001654:	eeb0 0a48 	vmov.f32	s0, s16
 8001658:	f7ff fe8a 	bl	8001370 <cell11_Temp_02_Set>
 800165c:	e7dd      	b.n	800161a <Set_Resistance+0x22>
		cell12_Temp_01_Set(temperature);
 800165e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001662:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001666:	e7e9      	b.n	800163c <Set_Resistance+0x44>
 8001668:	eddd 7a01 	vldr	s15, [sp, #4]
 800166c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001670:	e7e8      	b.n	8001644 <Set_Resistance+0x4c>
 8001672:	eddd 7a01 	vldr	s15, [sp, #4]
 8001676:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800167a:	e7e7      	b.n	800164c <Set_Resistance+0x54>
 800167c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001680:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001684:	e7e6      	b.n	8001654 <Set_Resistance+0x5c>
}
 8001686:	b003      	add	sp, #12
 8001688:	ecbd 8b02 	vpop	{d8}
 800168c:	f85d fb04 	ldr.w	pc, [sp], #4

08001690 <u8x8_byte_4wire_hw_spi>:
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
    uint8_t retVal = 1U;

    switch (msg)
 8001690:	f1a1 0c14 	sub.w	ip, r1, #20
{
 8001694:	b508      	push	{r3, lr}
 8001696:	4619      	mov	r1, r3
    switch (msg)
 8001698:	f1bc 0f0c 	cmp.w	ip, #12
 800169c:	d808      	bhi.n	80016b0 <u8x8_byte_4wire_hw_spi+0x20>
 800169e:	e8df f00c 	tbb	[pc, ip]
 80016a2:	070d      	.short	0x070d
 80016a4:	1c150f07 	.word	0x1c150f07
 80016a8:	07070707 	.word	0x07070707
 80016ac:	0707      	.short	0x0707
 80016ae:	09          	.byte	0x09
 80016af:	00          	.byte	0x00
            break;
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
            break;
        default:
            retVal = 0U;
 80016b0:	2000      	movs	r0, #0
            break;
    }
    return retVal;
}
 80016b2:	bd08      	pop	{r3, pc}
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <u8x8_byte_4wire_hw_spi+0x58>)
 80016b6:	2108      	movs	r1, #8
 80016b8:	f004 fb52 	bl	8005d60 <HAL_GPIO_WritePin>
{
 80016bc:	2001      	movs	r0, #1
}
 80016be:	bd08      	pop	{r3, pc}
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 80016c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016c4:	4809      	ldr	r0, [pc, #36]	@ (80016ec <u8x8_byte_4wire_hw_spi+0x5c>)
 80016c6:	f005 fdb1 	bl	800722c <HAL_SPI_Transmit>
            break;
 80016ca:	e7f7      	b.n	80016bc <u8x8_byte_4wire_hw_spi+0x2c>
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <u8x8_byte_4wire_hw_spi+0x60>)
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	2104      	movs	r1, #4
 80016d4:	f004 fb44 	bl	8005d60 <HAL_GPIO_WritePin>
            break;
 80016d8:	e7f0      	b.n	80016bc <u8x8_byte_4wire_hw_spi+0x2c>
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 80016da:	6803      	ldr	r3, [r0, #0]
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <u8x8_byte_4wire_hw_spi+0x60>)
 80016de:	785a      	ldrb	r2, [r3, #1]
 80016e0:	2104      	movs	r1, #4
 80016e2:	f004 fb3d 	bl	8005d60 <HAL_GPIO_WritePin>
            break;
 80016e6:	e7e9      	b.n	80016bc <u8x8_byte_4wire_hw_spi+0x2c>
 80016e8:	40021800 	.word	0x40021800
 80016ec:	20001398 	.word	0x20001398
 80016f0:	40020c00 	.word	0x40020c00

080016f4 <u8x8_stm32_gpio_and_delay>:
    switch (msg)
 80016f4:	294a      	cmp	r1, #74	@ 0x4a
{
 80016f6:	b508      	push	{r3, lr}
    switch (msg)
 80016f8:	d016      	beq.n	8001728 <u8x8_stm32_gpio_and_delay+0x34>
 80016fa:	d808      	bhi.n	800170e <u8x8_stm32_gpio_and_delay+0x1a>
 80016fc:	2928      	cmp	r1, #40	@ 0x28
 80016fe:	d00e      	beq.n	800171e <u8x8_stm32_gpio_and_delay+0x2a>
 8001700:	2929      	cmp	r1, #41	@ 0x29
 8001702:	d10a      	bne.n	800171a <u8x8_stm32_gpio_and_delay+0x26>
 8001704:	4610      	mov	r0, r2
            HAL_Delay(arg_int);
 8001706:	f003 fe51 	bl	80053ac <HAL_Delay>
}
 800170a:	2001      	movs	r0, #1
 800170c:	bd08      	pop	{r3, pc}
    switch (msg)
 800170e:	294b      	cmp	r1, #75	@ 0x4b
 8001710:	d103      	bne.n	800171a <u8x8_stm32_gpio_and_delay+0x26>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001712:	4808      	ldr	r0, [pc, #32]	@ (8001734 <u8x8_stm32_gpio_and_delay+0x40>)
 8001714:	2104      	movs	r1, #4
 8001716:	f004 fb23 	bl	8005d60 <HAL_GPIO_WritePin>
}
 800171a:	2001      	movs	r0, #1
 800171c:	bd08      	pop	{r3, pc}
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 800171e:	2002      	movs	r0, #2
 8001720:	f003 fe44 	bl	80053ac <HAL_Delay>
}
 8001724:	2001      	movs	r0, #1
 8001726:	bd08      	pop	{r3, pc}
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <u8x8_stm32_gpio_and_delay+0x40>)
 800172a:	2108      	movs	r1, #8
 800172c:	f004 fb18 	bl	8005d60 <HAL_GPIO_WritePin>
}
 8001730:	2001      	movs	r0, #1
 8001732:	bd08      	pop	{r3, pc}
 8001734:	40021800 	.word	0x40021800

08001738 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001738:	b510      	push	{r4, lr}
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 800173a:	4c0e      	ldr	r4, [pc, #56]	@ (8001774 <Display_Init+0x3c>)
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <Display_Init+0x40>)
 800173e:	2201      	movs	r2, #1
 8001740:	2110      	movs	r1, #16
 8001742:	f004 fb0d 	bl	8005d60 <HAL_GPIO_WritePin>
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <Display_Init+0x44>)
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <Display_Init+0x48>)
 800174a:	490e      	ldr	r1, [pc, #56]	@ (8001784 <Display_Init+0x4c>)
 800174c:	4620      	mov	r0, r4
 800174e:	f000 f97f 	bl	8001a50 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001752:	4620      	mov	r0, r4
 8001754:	f001 f8ee 	bl	8002934 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	4620      	mov	r0, r4
 800175c:	f001 f8f4 	bl	8002948 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001760:	4620      	mov	r0, r4
 8001762:	f000 f95f 	bl	8001a24 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001766:	4620      	mov	r0, r4
 8001768:	2178      	movs	r1, #120	@ 0x78
}
 800176a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 800176e:	f001 b8f5 	b.w	800295c <u8x8_SetContrast>
 8001772:	bf00      	nop
 8001774:	20000988 	.word	0x20000988
 8001778:	40021800 	.word	0x40021800
 800177c:	080016f5 	.word	0x080016f5
 8001780:	08001691 	.word	0x08001691
 8001784:	080093b0 	.word	0x080093b0

08001788 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800178c:	4e26      	ldr	r6, [pc, #152]	@ (8001828 <Display_MainTitlePage+0xa0>)
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 800178e:	4c27      	ldr	r4, [pc, #156]	@ (800182c <Display_MainTitlePage+0xa4>)

        HAL_Delay(PAGE_DELAY_U32);

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001790:	4f27      	ldr	r7, [pc, #156]	@ (8001830 <Display_MainTitlePage+0xa8>)
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001792:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800183c <Display_MainTitlePage+0xb4>
{
 8001796:	b082      	sub	sp, #8
        u8g2_FirstPage(&u8g2);
 8001798:	4620      	mov	r0, r4
 800179a:	f000 f901 	bl	80019a0 <u8g2_FirstPage>
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 800179e:	2540      	movs	r5, #64	@ 0x40
 80017a0:	2200      	movs	r2, #0
 80017a2:	4620      	mov	r0, r4
 80017a4:	e9cd 5600 	strd	r5, r6, [sp]
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	4611      	mov	r1, r2
 80017ac:	f000 f88e 	bl	80018cc <u8g2_DrawXBM>
        while (u8g2_NextPage(&u8g2) != 0U);
 80017b0:	4620      	mov	r0, r4
 80017b2:	f000 f911 	bl	80019d8 <u8g2_NextPage>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d1f2      	bne.n	80017a0 <Display_MainTitlePage+0x18>
        HAL_Delay(PAGE_DELAY_U32);
 80017ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017be:	f003 fdf5 	bl	80053ac <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 f8d2 	bl	800196c <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80017c8:	4639      	mov	r1, r7
 80017ca:	4620      	mov	r0, r4
 80017cc:	f000 fc92 	bl	80020f4 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 80017d0:	4643      	mov	r3, r8
 80017d2:	2210      	movs	r2, #16
 80017d4:	212a      	movs	r1, #42	@ 0x2a
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 fc7c 	bl	80020d4 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80017dc:	4639      	mov	r1, r7
 80017de:	4620      	mov	r0, r4
 80017e0:	f000 fc88 	bl	80020f4 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80017e4:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <Display_MainTitlePage+0xac>)
 80017e6:	2221      	movs	r2, #33	@ 0x21
 80017e8:	2106      	movs	r1, #6
 80017ea:	4620      	mov	r0, r4
 80017ec:	f000 fc72 	bl	80020d4 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 80017f0:	200a      	movs	r0, #10
 80017f2:	f003 fddb 	bl	80053ac <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 80017f6:	4620      	mov	r0, r4
 80017f8:	f000 f8b8 	bl	800196c <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f000 f8eb 	bl	80019d8 <u8g2_NextPage>
 8001802:	4605      	mov	r5, r0
 8001804:	2800      	cmp	r0, #0
 8001806:	d1c7      	bne.n	8001798 <Display_MainTitlePage+0x10>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800180c:	f003 fdce 	bl	80053ac <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001810:	4806      	ldr	r0, [pc, #24]	@ (800182c <Display_MainTitlePage+0xa4>)
 8001812:	f000 f8ab 	bl	800196c <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001816:	4808      	ldr	r0, [pc, #32]	@ (8001838 <Display_MainTitlePage+0xb0>)
 8001818:	462a      	mov	r2, r5
 800181a:	2110      	movs	r1, #16
}
 800181c:	b002      	add	sp, #8
 800181e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001822:	f004 ba9d 	b.w	8005d60 <HAL_GPIO_WritePin>
 8001826:	bf00      	nop
 8001828:	20000168 	.word	0x20000168
 800182c:	20000988 	.word	0x20000988
 8001830:	08008758 	.word	0x08008758
 8001834:	0800874c 	.word	0x0800874c
 8001838:	40021800 	.word	0x40021800
 800183c:	08008744 	.word	0x08008744

08001840 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001844:	eb01 0803 	add.w	r8, r1, r3
{
 8001848:	b085      	sub	sp, #20
 800184a:	461c      	mov	r4, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800184c:	1c53      	adds	r3, r2, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	fa1f f888 	uxth.w	r8, r8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4643      	mov	r3, r8
{
 8001858:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  uint8_t color = u8g2->draw_color;
 800185a:	f890 a092 	ldrb.w	sl, [r0, #146]	@ 0x92
{
 800185e:	4606      	mov	r6, r0
 8001860:	460d      	mov	r5, r1
 8001862:	4691      	mov	r9, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001864:	f000 fd3c 	bl	80022e0 <u8g2_IsIntersection>
 8001868:	b360      	cbz	r0, 80018c4 <u8g2_DrawHXBM+0x84>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0) {
 800186a:	b34c      	cbz	r4, 80018c0 <u8g2_DrawHXBM+0x80>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800186c:	faba f28a 	clz	r2, sl
 8001870:	0952      	lsrs	r2, r2, #5
  mask = 1;
 8001872:	2401      	movs	r4, #1
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001874:	f04f 0b00 	mov.w	fp, #0
 8001878:	9203      	str	r2, [sp, #12]
 800187a:	e00e      	b.n	800189a <u8g2_DrawHXBM+0x5a>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800187c:	f896 3091 	ldrb.w	r3, [r6, #145]	@ 0x91
 8001880:	b1cb      	cbz	r3, 80018b6 <u8g2_DrawHXBM+0x76>
      u8g2->draw_color = ncolor;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    }
    x++;
    mask <<= 1;
 8001882:	0064      	lsls	r4, r4, #1
    if ( mask == 0 )
 8001884:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    x++;
 8001888:	f105 0501 	add.w	r5, r5, #1
    {
      mask = 1;
 800188c:	bf08      	it	eq
 800188e:	2401      	moveq	r4, #1
    x++;
 8001890:	b2ad      	uxth	r5, r5
      b++;
 8001892:	bf08      	it	eq
 8001894:	193f      	addeq	r7, r7, r4
  while(len > 0) {
 8001896:	45a8      	cmp	r8, r5
 8001898:	d012      	beq.n	80018c0 <u8g2_DrawHXBM+0x80>
    if ( *b & mask ) {
 800189a:	783b      	ldrb	r3, [r7, #0]
 800189c:	421c      	tst	r4, r3
 800189e:	d0ed      	beq.n	800187c <u8g2_DrawHXBM+0x3c>
      u8g2->draw_color = color;
 80018a0:	f886 a092 	strb.w	sl, [r6, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80018a4:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80018a8:	2301      	movs	r3, #1
 80018aa:	464a      	mov	r2, r9
 80018ac:	4629      	mov	r1, r5
 80018ae:	4630      	mov	r0, r6
 80018b0:	f000 fca4 	bl	80021fc <u8g2_DrawHVLine>
 80018b4:	e7e5      	b.n	8001882 <u8g2_DrawHXBM+0x42>
 80018b6:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = ncolor;
 80018b8:	9b03      	ldr	r3, [sp, #12]
 80018ba:	f886 3092 	strb.w	r3, [r6, #146]	@ 0x92
 80018be:	e7f3      	b.n	80018a8 <u8g2_DrawHXBM+0x68>
    }
    len--;
  }
  u8g2->draw_color = color;
 80018c0:	f886 a092 	strb.w	sl, [r6, #146]	@ 0x92
}
 80018c4:	b005      	add	sp, #20
 80018c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018ca:	bf00      	nop

080018cc <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80018cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	461e      	mov	r6, r3
 80018d4:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80018d8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80018da:	eb02 070a 	add.w	r7, r2, sl
 80018de:	b2bf      	uxth	r7, r7
 80018e0:	440b      	add	r3, r1
 80018e2:	9700      	str	r7, [sp, #0]
 80018e4:	b29b      	uxth	r3, r3
{
 80018e6:	4681      	mov	r9, r0
 80018e8:	4614      	mov	r4, r2
 80018ea:	4688      	mov	r8, r1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80018ec:	f000 fcf8 	bl	80022e0 <u8g2_IsIntersection>
 80018f0:	b190      	cbz	r0, 8001918 <u8g2_DrawXBM+0x4c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80018f2:	f1ba 0f00 	cmp.w	sl, #0
 80018f6:	d00f      	beq.n	8001918 <u8g2_DrawXBM+0x4c>
  blen += 7;
 80018f8:	f106 0a07 	add.w	sl, r6, #7
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
 80018fc:	f3ca 0acc 	ubfx	sl, sl, #3, #13
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001900:	4622      	mov	r2, r4
    y++;
 8001902:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001904:	9500      	str	r5, [sp, #0]
 8001906:	4633      	mov	r3, r6
 8001908:	4641      	mov	r1, r8
 800190a:	4648      	mov	r0, r9
    y++;
 800190c:	b2a4      	uxth	r4, r4
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800190e:	f7ff ff97 	bl	8001840 <u8g2_DrawHXBM>
  while( h > 0 )
 8001912:	42a7      	cmp	r7, r4
    bitmap += blen;
 8001914:	4455      	add	r5, sl
  while( h > 0 )
 8001916:	d1f3      	bne.n	8001900 <u8g2_DrawXBM+0x34>
    h--;
  }
}
 8001918:	b002      	add	sp, #8
 800191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800191e:	bf00      	nop

08001920 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001924:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8001926:	f890 7038 	ldrb.w	r7, [r0, #56]	@ 0x38
  dest_row = u8g2->tile_curr_row;
 800192a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800192e:	f893 8011 	ldrb.w	r8, [r3, #17]
{
 8001932:	b082      	sub	sp, #8
 8001934:	4606      	mov	r6, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001936:	2400      	movs	r4, #0
 8001938:	e002      	b.n	8001940 <u8g2_send_buffer+0x20>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 800193a:	45a8      	cmp	r8, r5
 800193c:	d913      	bls.n	8001966 <u8g2_send_buffer+0x46>
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800193e:	6833      	ldr	r3, [r6, #0]
 8001940:	7c1b      	ldrb	r3, [r3, #16]
  ptr = u8g2->tile_buf_ptr;
 8001942:	6b71      	ldr	r1, [r6, #52]	@ 0x34
  offset *= 8;
 8001944:	fb13 f204 	smulbb	r2, r3, r4
 8001948:	00d2      	lsls	r2, r2, #3
  ptr += offset;
 800194a:	b292      	uxth	r2, r2
 800194c:	4411      	add	r1, r2
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800194e:	9100      	str	r1, [sp, #0]
 8001950:	462a      	mov	r2, r5
 8001952:	2100      	movs	r1, #0
 8001954:	4630      	mov	r0, r6
  } while( src_row < src_max && dest_row < dest_max );
 8001956:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001958:	f000 ffd0 	bl	80028fc <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 800195c:	b2e3      	uxtb	r3, r4
    dest_row++;
 800195e:	3501      	adds	r5, #1
  } while( src_row < src_max && dest_row < dest_max );
 8001960:	429f      	cmp	r7, r3
    dest_row++;
 8001962:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
 8001964:	d8e9      	bhi.n	800193a <u8g2_send_buffer+0x1a>
}
 8001966:	b002      	add	sp, #8
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800196c <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800196c:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 800196e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8001972:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001974:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  cnt *= 8;
 8001976:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800197a:	2100      	movs	r1, #0
 800197c:	00d2      	lsls	r2, r2, #3
 800197e:	f006 be37 	b.w	80085f0 <memset>
 8001982:	bf00      	nop

08001984 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001984:	b510      	push	{r4, lr}
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 8001986:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  u8g2->tile_curr_row = row;
 8001988:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
{
 800198c:	4604      	mov	r4, r0
  u8g2->cb->update_dimension(u8g2);
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001992:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001994:	4620      	mov	r0, r4
 8001996:	685b      	ldr	r3, [r3, #4]
}
 8001998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 800199c:	4718      	bx	r3
 800199e:	bf00      	nop

080019a0 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80019a0:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 80019a2:	f890 3093 	ldrb.w	r3, [r0, #147]	@ 0x93
{
 80019a6:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 80019a8:	b92b      	cbnz	r3, 80019b6 <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80019aa:	4620      	mov	r0, r4
 80019ac:	2100      	movs	r1, #0
}
 80019ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80019b2:	f7ff bfe7 	b.w	8001984 <u8g2_SetBufferCurrTileRow>
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80019b6:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 80019b8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80019bc:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80019be:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  cnt *= 8;
 80019c0:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80019c4:	2100      	movs	r1, #0
 80019c6:	00d2      	lsls	r2, r2, #3
 80019c8:	f006 fe12 	bl	80085f0 <memset>
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80019cc:	4620      	mov	r0, r4
 80019ce:	2100      	movs	r1, #0
}
 80019d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80019d4:	f7ff bfd6 	b.w	8001984 <u8g2_SetBufferCurrTileRow>

080019d8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80019dc:	f7ff ffa0 	bl	8001920 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80019e0:	f894 5039 	ldrb.w	r5, [r4, #57]	@ 0x39
  row += u8g2->tile_buf_height;
 80019e4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019e8:	6822      	ldr	r2, [r4, #0]
  row += u8g2->tile_buf_height;
 80019ea:	441d      	add	r5, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019ec:	7c51      	ldrb	r1, [r2, #17]
  row += u8g2->tile_buf_height;
 80019ee:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019f0:	42a9      	cmp	r1, r5
 80019f2:	d911      	bls.n	8001a18 <u8g2_NextPage+0x40>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 80019f4:	f894 1093 	ldrb.w	r1, [r4, #147]	@ 0x93
 80019f8:	b929      	cbnz	r1, 8001a06 <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7ff ffc1 	bl	8001984 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001a02:	2001      	movs	r0, #1
}
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
  cnt *= 8;
 8001a06:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001a08:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  cnt *= 8;
 8001a0a:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001a0e:	00d2      	lsls	r2, r2, #3
 8001a10:	2100      	movs	r1, #0
 8001a12:	f006 fded 	bl	80085f0 <memset>
}
 8001a16:	e7f0      	b.n	80019fa <u8g2_NextPage+0x22>
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 ffa9 	bl	8002970 <u8x8_RefreshDisplay>
    return 0;
 8001a1e:	2000      	movs	r0, #0
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop

08001a24 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 8001a28:	f7ff ffba 	bl	80019a0 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff ffd3 	bl	80019d8 <u8g2_NextPage>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d1fa      	bne.n	8001a2c <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001a36:	4601      	mov	r1, r0
 8001a38:	4620      	mov	r0, r4
}
 8001a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001a3e:	f7ff bfa1 	b.w	8001984 <u8g2_SetBufferCurrTileRow>
 8001a42:	bf00      	nop

08001a44 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001a44:	2308      	movs	r3, #8
 8001a46:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 8001a48:	4800      	ldr	r0, [pc, #0]	@ (8001a4c <u8g2_m_16_8_f+0x8>)
 8001a4a:	4770      	bx	lr
 8001a4c:	20000a1c 	.word	0x20000a1c

08001a50 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	4614      	mov	r4, r2
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <u8g2_Setup_st7565_64128n_f+0x34>)
 8001a5a:	4623      	mov	r3, r4
{
 8001a5c:	460d      	mov	r5, r1
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a5e:	490a      	ldr	r1, [pc, #40]	@ (8001a88 <u8g2_Setup_st7565_64128n_f+0x38>)
{
 8001a60:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a62:	f000 ff97 	bl	8002994 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001a66:	f10d 000f 	add.w	r0, sp, #15
 8001a6a:	f7ff ffeb 	bl	8001a44 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <u8g2_Setup_st7565_64128n_f+0x3c>)
 8001a70:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001a74:	9500      	str	r5, [sp, #0]
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001a76:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 fd8f 	bl	800259c <u8g2_SetupBuffer>
}
 8001a7e:	b005      	add	sp, #20
 8001a80:	bd30      	pop	{r4, r5, pc}
 8001a82:	bf00      	nop
 8001a84:	08002731 	.word	0x08002731
 8001a88:	08002781 	.word	0x08002781
 8001a8c:	08002331 	.word	0x08002331

08001a90 <u8g2_font_get_word>:
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    return pos;
 8001a90:	5a40      	ldrh	r0, [r0, r1]
 8001a92:	ba40      	rev16	r0, r0
}
 8001a94:	b280      	uxth	r0, r0
 8001a96:	4770      	bx	lr

08001a98 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8001a98:	2000      	movs	r0, #0
 8001a9a:	4770      	bx	lr

08001a9c <u8g2_font_get_word.constprop.0>:
    return pos;
 8001a9c:	8840      	ldrh	r0, [r0, #2]
 8001a9e:	ba40      	rev16	r0, r0
}
 8001aa0:	b280      	uxth	r0, r0
 8001aa2:	4770      	bx	lr

08001aa4 <u8g2_font_get_word.constprop.1>:
    return pos;
 8001aa4:	8800      	ldrh	r0, [r0, #0]
 8001aa6:	ba40      	rev16	r0, r0
}
 8001aa8:	b280      	uxth	r0, r0
 8001aaa:	4770      	bx	lr

08001aac <u8g2_add_vector_y>:
  switch(dir)
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d008      	beq.n	8001ac2 <u8g2_add_vector_y+0x16>
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <u8g2_add_vector_y+0x10>
 8001ab4:	b943      	cbnz	r3, 8001ac8 <u8g2_add_vector_y+0x1c>
      dy += y;
 8001ab6:	4410      	add	r0, r2
 8001ab8:	b280      	uxth	r0, r0
      break;
 8001aba:	4770      	bx	lr
      dy -= y;
 8001abc:	1a80      	subs	r0, r0, r2
 8001abe:	b280      	uxth	r0, r0
      break;
 8001ac0:	4770      	bx	lr
      dy += x;
 8001ac2:	4408      	add	r0, r1
 8001ac4:	b280      	uxth	r0, r0
      break;
 8001ac6:	4770      	bx	lr
      dy -= x;
 8001ac8:	1a40      	subs	r0, r0, r1
 8001aca:	b280      	uxth	r0, r0
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <u8g2_add_vector_x>:
  switch(dir)
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d008      	beq.n	8001ae6 <u8g2_add_vector_x+0x16>
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d003      	beq.n	8001ae0 <u8g2_add_vector_x+0x10>
 8001ad8:	b943      	cbnz	r3, 8001aec <u8g2_add_vector_x+0x1c>
      dx += x;
 8001ada:	4408      	add	r0, r1
 8001adc:	b280      	uxth	r0, r0
      break;
 8001ade:	4770      	bx	lr
      dx -= x;
 8001ae0:	1a40      	subs	r0, r0, r1
 8001ae2:	b280      	uxth	r0, r0
      break;
 8001ae4:	4770      	bx	lr
      dx -= y;
 8001ae6:	1a80      	subs	r0, r0, r2
 8001ae8:	b280      	uxth	r0, r0
      break;
 8001aea:	4770      	bx	lr
      dx += y;
 8001aec:	4410      	add	r0, r2
 8001aee:	b280      	uxth	r0, r0
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <u8g2_font_decode_glyph>:
{
 8001af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af8:	4682      	mov	sl, r0
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001afa:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
  decode->decode_bit_pos = 0;
 8001afe:	2300      	movs	r3, #0
{
 8001b00:	b08b      	sub	sp, #44	@ 0x2c
  if ( bit_pos_plus_cnt >= 8 )
 8001b02:	2807      	cmp	r0, #7
  decode->decode_ptr = glyph_data;
 8001b04:	f8ca 1060 	str.w	r1, [sl, #96]	@ 0x60
  decode->decode_bit_pos = 0;
 8001b08:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001b0c:	780c      	ldrb	r4, [r1, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8001b0e:	f240 81ad 	bls.w	8001e6c <u8g2_font_decode_glyph+0x378>
    f->decode_ptr++;
 8001b12:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 8001b14:	f1a0 0208 	sub.w	r2, r0, #8
    f->decode_ptr++;
 8001b18:	f8ca 1060 	str.w	r1, [sl, #96]	@ 0x60
    bit_pos_plus_cnt -= 8;
 8001b1c:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	4083      	lsls	r3, r0
 8001b24:	ea24 0403 	bic.w	r4, r4, r3
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b28:	fa4f fb84 	sxtb.w	fp, r4
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b2c:	f88a 206c 	strb.w	r2, [sl, #108]	@ 0x6c
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b30:	f88a b06a 	strb.w	fp, [sl, #106]	@ 0x6a
  val >>= bit_pos;
 8001b34:	780b      	ldrb	r3, [r1, #0]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b36:	f89a 5079 	ldrb.w	r5, [sl, #121]	@ 0x79
  val >>= bit_pos;
 8001b3a:	fa43 f002 	asr.w	r0, r3, r2
  bit_pos_plus_cnt += cnt;
 8001b3e:	1953      	adds	r3, r2, r5
 8001b40:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	f200 8183 	bhi.w	8001e4e <u8g2_font_decode_glyph+0x35a>
  val >>= bit_pos;
 8001b48:	b2c2      	uxtb	r2, r0
  decode->fg_color = u8g2->draw_color;
 8001b4a:	f89a 0092 	ldrb.w	r0, [sl, #146]	@ 0x92
 8001b4e:	f88a 006e 	strb.w	r0, [sl, #110]	@ 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b52:	fab0 f080 	clz	r0, r0
 8001b56:	0940      	lsrs	r0, r0, #5
 8001b58:	f88a 006f 	strb.w	r0, [sl, #111]	@ 0x6f
  val &= (1U<<cnt)-1;
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	40a8      	lsls	r0, r5
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b62:	f89a 607a 	ldrb.w	r6, [sl, #122]	@ 0x7a
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b66:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
  val &= (1U<<cnt)-1;
 8001b6a:	ea22 0200 	bic.w	r2, r2, r0
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b6e:	b250      	sxtb	r0, r2
 8001b70:	f88a 006b 	strb.w	r0, [sl, #107]	@ 0x6b
 8001b74:	9008      	str	r0, [sp, #32]
  bit_pos_plus_cnt += cnt;
 8001b76:	18f0      	adds	r0, r6, r3
  val >>= bit_pos;
 8001b78:	780d      	ldrb	r5, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8001b7a:	b2c0      	uxtb	r0, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001b7c:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8001b7e:	fa45 f503 	asr.w	r5, r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b82:	f200 8155 	bhi.w	8001e30 <u8g2_font_decode_glyph+0x33c>
  val >>= bit_pos;
 8001b86:	b2ed      	uxtb	r5, r5
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b88:	f89a e07b 	ldrb.w	lr, [sl, #123]	@ 0x7b
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b8c:	f88a 006c 	strb.w	r0, [sl, #108]	@ 0x6c
  bit_pos_plus_cnt += cnt;
 8001b90:	eb0e 0300 	add.w	r3, lr, r0
  val >>= bit_pos;
 8001b94:	780f      	ldrb	r7, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8001b96:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b98:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 8001b9a:	fa47 f700 	asr.w	r7, r7, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001b9e:	f200 8134 	bhi.w	8001e0a <u8g2_font_decode_glyph+0x316>
  val >>= bit_pos;
 8001ba2:	fa5f fc87 	uxtb.w	ip, r7
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001ba6:	f89a 707c 	ldrb.w	r7, [sl, #124]	@ 0x7c
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001baa:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
  bit_pos_plus_cnt += cnt;
 8001bae:	18f8      	adds	r0, r7, r3
  val >>= bit_pos;
 8001bb0:	f891 8000 	ldrb.w	r8, [r1]
  bit_pos_plus_cnt += cnt;
 8001bb4:	b2c0      	uxtb	r0, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001bb6:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8001bb8:	fa48 f803 	asr.w	r8, r8, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001bbc:	f200 8115 	bhi.w	8001dea <u8g2_font_decode_glyph+0x2f6>
  val >>= bit_pos;
 8001bc0:	fa5f f388 	uxtb.w	r3, r8
  val &= (1U<<cnt)-1;
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001bc8:	f88a 006c 	strb.w	r0, [sl, #108]	@ 0x6c
  cnt--;
 8001bcc:	1878      	adds	r0, r7, r1
  val &= (1U<<cnt)-1;
 8001bce:	fa01 f707 	lsl.w	r7, r1, r7
 8001bd2:	ea23 0307 	bic.w	r3, r3, r7
  d <<= cnt;
 8001bd6:	b2c7      	uxtb	r7, r0
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f707 	lsl.w	r7, r0, r7
  v -= d;
 8001bde:	1bdb      	subs	r3, r3, r7
  if ( decode->glyph_width > 0 )
 8001be0:	f1bb 0f00 	cmp.w	fp, #0
  v -= d;
 8001be4:	b25f      	sxtb	r7, r3
  if ( decode->glyph_width > 0 )
 8001be6:	f340 80fc 	ble.w	8001de2 <u8g2_font_decode_glyph+0x2ee>
  cnt--;
 8001bea:	eb0e 0301 	add.w	r3, lr, r1
  d <<= cnt;
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	fa00 f303 	lsl.w	r3, r0, r3
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bf4:	1a9a      	subs	r2, r3, r2
  cnt--;
 8001bf6:	1e73      	subs	r3, r6, #1
  val &= (1U<<cnt)-1;
 8001bf8:	fa01 fe0e 	lsl.w	lr, r1, lr
  d <<= cnt;
 8001bfc:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 8001bfe:	40b1      	lsls	r1, r6
 8001c00:	ea2c 0c0e 	bic.w	ip, ip, lr
  d <<= cnt;
 8001c04:	4098      	lsls	r0, r3
  val &= (1U<<cnt)-1;
 8001c06:	ea25 0101 	bic.w	r1, r5, r1
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001c0a:	eba2 020c 	sub.w	r2, r2, ip
  v -= d;
 8001c0e:	1a09      	subs	r1, r1, r0
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001c10:	b252      	sxtb	r2, r2
 8001c12:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 8001c16:	f8ba 0064 	ldrh.w	r0, [sl, #100]	@ 0x64
 8001c1a:	b249      	sxtb	r1, r1
 8001c1c:	f7ff ff58 	bl	8001ad0 <u8g2_add_vector_x>
 8001c20:	f8aa 0064 	strh.w	r0, [sl, #100]	@ 0x64
 8001c24:	4605      	mov	r5, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001c26:	f8ba 0066 	ldrh.w	r0, [sl, #102]	@ 0x66
 8001c2a:	f7ff ff3f 	bl	8001aac <u8g2_add_vector_y>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8aa 0066 	strh.w	r0, [sl, #102]	@ 0x66
      switch(decode->dir)
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	f200 819b 	bhi.w	8001f70 <u8g2_font_decode_glyph+0x47c>
 8001c3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c3e:	0119      	.short	0x0119
 8001c40:	0129011f 	.word	0x0129011f
 8001c44:	0004      	.short	0x0004
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c46:	f1c4 0301 	rsb	r3, r4, #1
 8001c4a:	4403      	add	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
	    x1 += h;
 8001c4e:	9b08      	ldr	r3, [sp, #32]
	    y1++;
 8001c50:	1c41      	adds	r1, r0, #1
	    x1 += h;
 8001c52:	18eb      	adds	r3, r5, r3
	    y1++;
 8001c54:	b289      	uxth	r1, r1
	    x1 += h;
 8001c56:	b29b      	uxth	r3, r3
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c58:	9100      	str	r1, [sp, #0]
 8001c5a:	4650      	mov	r0, sl
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f000 fb3f 	bl	80022e0 <u8g2_IsIntersection>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	f000 80bd 	beq.w	8001de2 <u8g2_font_decode_glyph+0x2ee>
    decode->x = 0;
 8001c68:	f04f 0c00 	mov.w	ip, #0
  uint8_t bit_pos = f->decode_bit_pos;
 8001c6c:	f89a 306c 	ldrb.w	r3, [sl, #108]	@ 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001c70:	f8da 5060 	ldr.w	r5, [sl, #96]	@ 0x60
    decode->x = 0;
 8001c74:	f8aa c068 	strh.w	ip, [sl, #104]	@ 0x68
  val &= (1U<<cnt)-1;
 8001c78:	4664      	mov	r4, ip
 8001c7a:	9709      	str	r7, [sp, #36]	@ 0x24
 8001c7c:	46d0      	mov	r8, sl
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c7e:	f898 1076 	ldrb.w	r1, [r8, #118]	@ 0x76
  val >>= bit_pos;
 8001c82:	7828      	ldrb	r0, [r5, #0]
  bit_pos_plus_cnt += cnt;
 8001c84:	18ca      	adds	r2, r1, r3
 8001c86:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001c88:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8001c8a:	fa40 f003 	asr.w	r0, r0, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001c8e:	f200 8161 	bhi.w	8001f54 <u8g2_font_decode_glyph+0x460>
  val >>= bit_pos;
 8001c92:	b2c3      	uxtb	r3, r0
  val &= (1U<<cnt)-1;
 8001c94:	f04f 36ff 	mov.w	r6, #4294967295
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c98:	f898 0077 	ldrb.w	r0, [r8, #119]	@ 0x77
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c9c:	f888 206c 	strb.w	r2, [r8, #108]	@ 0x6c
  val &= (1U<<cnt)-1;
 8001ca0:	fa06 f101 	lsl.w	r1, r6, r1
 8001ca4:	ea23 0301 	bic.w	r3, r3, r1
  bit_pos_plus_cnt += cnt;
 8001ca8:	1881      	adds	r1, r0, r2
  val >>= bit_pos;
 8001caa:	782e      	ldrb	r6, [r5, #0]
  val &= (1U<<cnt)-1;
 8001cac:	9307      	str	r3, [sp, #28]
  bit_pos_plus_cnt += cnt;
 8001cae:	b2c9      	uxtb	r1, r1
  if ( bit_pos_plus_cnt >= 8 )
 8001cb0:	2907      	cmp	r1, #7
  val >>= bit_pos;
 8001cb2:	fa46 f602 	asr.w	r6, r6, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001cb6:	f200 813f 	bhi.w	8001f38 <u8g2_font_decode_glyph+0x444>
  val >>= bit_pos;
 8001cba:	b2f3      	uxtb	r3, r6
  val &= (1U<<cnt)-1;
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	fa02 f000 	lsl.w	r0, r2, r0
 8001cc4:	ea23 0300 	bic.w	r3, r3, r0
 8001cc8:	9306      	str	r3, [sp, #24]
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001cca:	f888 106c 	strb.w	r1, [r8, #108]	@ 0x6c
  lx = decode->x;
 8001cce:	fa5f fb84 	uxtb.w	fp, r4
  ly = decode->y;
 8001cd2:	fa5f f58c 	uxtb.w	r5, ip
  cnt = len;
 8001cd6:	9c07      	ldr	r4, [sp, #28]
 8001cd8:	9503      	str	r5, [sp, #12]
    rem = decode->glyph_width;
 8001cda:	f898 706a 	ldrb.w	r7, [r8, #106]	@ 0x6a
    else if ( decode->is_transparent == 0 )    
 8001cde:	f898 a06d 	ldrb.w	sl, [r8, #109]	@ 0x6d
    rem -= lx;
 8001ce2:	eba7 060b 	sub.w	r6, r7, fp
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001ce6:	fa4f f985 	sxtb.w	r9, r5
    rem -= lx;
 8001cea:	b2f6      	uxtb	r6, r6
    else if ( decode->is_transparent == 0 )    
 8001cec:	f1ba 0f00 	cmp.w	sl, #0
 8001cf0:	f000 80dc 	beq.w	8001eac <u8g2_font_decode_glyph+0x3b8>
 8001cf4:	44a3      	add	fp, r4
    if ( cnt < rem )
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	46ca      	mov	sl, r9
 8001cfa:	fa5f fb8b 	uxtb.w	fp, fp
 8001cfe:	d811      	bhi.n	8001d24 <u8g2_font_decode_glyph+0x230>
    cnt -= rem;
 8001d00:	ebab 0107 	sub.w	r1, fp, r7
 8001d04:	fa5f fb81 	uxtb.w	fp, r1
    ly++;
 8001d08:	3501      	adds	r5, #1
    if ( cnt < rem )
 8001d0a:	455f      	cmp	r7, fp
    ly++;
 8001d0c:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 8001d0e:	d807      	bhi.n	8001d20 <u8g2_font_decode_glyph+0x22c>
    cnt -= rem;
 8001d10:	ebab 0b07 	sub.w	fp, fp, r7
 8001d14:	fa5f fb8b 	uxtb.w	fp, fp
    ly++;
 8001d18:	3501      	adds	r5, #1
    if ( cnt < rem )
 8001d1a:	455f      	cmp	r7, fp
    ly++;
 8001d1c:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 8001d1e:	d9f7      	bls.n	8001d10 <u8g2_font_decode_glyph+0x21c>
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d20:	fa4f fa85 	sxtb.w	sl, r5
  cnt = len;
 8001d24:	9e06      	ldr	r6, [sp, #24]
  decode->x = lx;
 8001d26:	f888 b068 	strb.w	fp, [r8, #104]	@ 0x68
  decode->y = ly;  
 8001d2a:	f888 a069 	strb.w	sl, [r8, #105]	@ 0x69
  cnt = len;
 8001d2e:	9504      	str	r5, [sp, #16]
 8001d30:	e008      	b.n	8001d44 <u8g2_font_decode_glyph+0x250>
    ly++;
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	f898 706a 	ldrb.w	r7, [r8, #106]	@ 0x6a
 8001d38:	9204      	str	r2, [sp, #16]
    cnt -= rem;
 8001d3a:	b2f6      	uxtb	r6, r6
    lx = 0;
 8001d3c:	f04f 0b00 	mov.w	fp, #0
 8001d40:	fa4f fa83 	sxtb.w	sl, r3
    rem -= lx;
 8001d44:	eba7 020b 	sub.w	r2, r7, fp
 8001d48:	b2d5      	uxtb	r5, r2
    if ( cnt < rem )
 8001d4a:	42b5      	cmp	r5, r6
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d4c:	f898 3070 	ldrb.w	r3, [r8, #112]	@ 0x70
 8001d50:	f8b8 0064 	ldrh.w	r0, [r8, #100]	@ 0x64
 8001d54:	f8cd a014 	str.w	sl, [sp, #20]
 8001d58:	fa4f f18b 	sxtb.w	r1, fp
 8001d5c:	4652      	mov	r2, sl
    if ( cnt < rem )
 8001d5e:	462c      	mov	r4, r5
 8001d60:	bf28      	it	cs
 8001d62:	4634      	movcs	r4, r6
 8001d64:	9403      	str	r4, [sp, #12]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d66:	f7ff feb3 	bl	8001ad0 <u8g2_add_vector_x>
    y = decode->target_y;
 8001d6a:	f8b8 9066 	ldrh.w	r9, [r8, #102]	@ 0x66
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d6e:	4604      	mov	r4, r0
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d70:	4648      	mov	r0, r9
 8001d72:	f7ff fe9b 	bl	8001aac <u8g2_add_vector_y>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001d76:	f898 106e 	ldrb.w	r1, [r8, #110]	@ 0x6e
 8001d7a:	f888 1092 	strb.w	r1, [r8, #146]	@ 0x92
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d7e:	4602      	mov	r2, r0
      u8g2_DrawHVLine(u8g2, 
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4621      	mov	r1, r4
 8001d84:	9b03      	ldr	r3, [sp, #12]
 8001d86:	4640      	mov	r0, r8
 8001d88:	f000 fa38 	bl	80021fc <u8g2_DrawHVLine>
    cnt -= rem;
 8001d8c:	44b3      	add	fp, r6
    ly++;
 8001d8e:	9b04      	ldr	r3, [sp, #16]
 8001d90:	fa5f f18b 	uxtb.w	r1, fp
    if ( cnt < rem )
 8001d94:	42b5      	cmp	r5, r6
    ly++;
 8001d96:	f103 0301 	add.w	r3, r3, #1
    cnt -= rem;
 8001d9a:	eba1 0607 	sub.w	r6, r1, r7
    if ( cnt < rem )
 8001d9e:	d9c8      	bls.n	8001d32 <u8g2_font_decode_glyph+0x23e>
  uint8_t bit_pos = f->decode_bit_pos;
 8001da0:	f898 206c 	ldrb.w	r2, [r8, #108]	@ 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001da4:	f8d8 0060 	ldr.w	r0, [r8, #96]	@ 0x60
  decode->y = ly;  
 8001da8:	f888 a069 	strb.w	sl, [r8, #105]	@ 0x69
  decode->x = lx;
 8001dac:	b24c      	sxtb	r4, r1
 8001dae:	f888 4068 	strb.w	r4, [r8, #104]	@ 0x68
  bit_pos_plus_cnt += cnt;
 8001db2:	1c53      	adds	r3, r2, #1
  val >>= bit_pos;
 8001db4:	7801      	ldrb	r1, [r0, #0]
  bit_pos_plus_cnt += cnt;
 8001db6:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001db8:	2b07      	cmp	r3, #7
  uint8_t bit_pos = f->decode_bit_pos;
 8001dba:	46d4      	mov	ip, sl
  val >>= bit_pos;
 8001dbc:	fa41 f102 	asr.w	r1, r1, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001dc0:	f200 80a2 	bhi.w	8001f08 <u8g2_font_decode_glyph+0x414>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001dc4:	07c9      	lsls	r1, r1, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001dc6:	f888 306c 	strb.w	r3, [r8, #108]	@ 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001dca:	d480      	bmi.n	8001cce <u8g2_font_decode_glyph+0x1da>
 8001dcc:	46d1      	mov	r9, sl
 8001dce:	4605      	mov	r5, r0
      if ( decode->y >= h )
 8001dd0:	9a08      	ldr	r2, [sp, #32]
 8001dd2:	454a      	cmp	r2, r9
 8001dd4:	f73f af53 	bgt.w	8001c7e <u8g2_font_decode_glyph+0x18a>
    u8g2->draw_color = decode->fg_color;
 8001dd8:	f898 306e 	ldrb.w	r3, [r8, #110]	@ 0x6e
 8001ddc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8001dde:	f888 3092 	strb.w	r3, [r8, #146]	@ 0x92
}
 8001de2:	4638      	mov	r0, r7
 8001de4:	b00b      	add	sp, #44	@ 0x2c
 8001de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f->decode_ptr++;
 8001dea:	f101 0901 	add.w	r9, r1, #1
 8001dee:	f8ca 9060 	str.w	r9, [sl, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001df2:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8001df4:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8001dfe:	3808      	subs	r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e00:	ea43 0308 	orr.w	r3, r3, r8
    bit_pos_plus_cnt -= 8;
 8001e04:	b2c0      	uxtb	r0, r0
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e06:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001e08:	e6dc      	b.n	8001bc4 <u8g2_font_decode_glyph+0xd0>
    f->decode_ptr++;
 8001e0a:	f101 0801 	add.w	r8, r1, #1
 8001e0e:	f8ca 8060 	str.w	r8, [sl, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e12:	f891 c001 	ldrb.w	ip, [r1, #1]
    s -= bit_pos;
 8001e16:	f1c0 0008 	rsb	r0, r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e1a:	b2c0      	uxtb	r0, r0
 8001e1c:	fa0c fc00 	lsl.w	ip, ip, r0
    bit_pos_plus_cnt -= 8;
 8001e20:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e22:	ea4c 0c07 	orr.w	ip, ip, r7
    bit_pos_plus_cnt -= 8;
 8001e26:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e28:	fa5f fc8c 	uxtb.w	ip, ip
    bit_pos_plus_cnt -= 8;
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	e6ba      	b.n	8001ba6 <u8g2_font_decode_glyph+0xb2>
    f->decode_ptr++;
 8001e30:	1c4f      	adds	r7, r1, #1
 8001e32:	f8ca 7060 	str.w	r7, [sl, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e36:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8001e38:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8001e42:	3808      	subs	r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e44:	431d      	orrs	r5, r3
    bit_pos_plus_cnt -= 8;
 8001e46:	b2c0      	uxtb	r0, r0
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e48:	b2ed      	uxtb	r5, r5
    bit_pos_plus_cnt -= 8;
 8001e4a:	4639      	mov	r1, r7
 8001e4c:	e69c      	b.n	8001b88 <u8g2_font_decode_glyph+0x94>
    f->decode_ptr++;
 8001e4e:	1c4e      	adds	r6, r1, #1
 8001e50:	f8ca 6060 	str.w	r6, [sl, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e54:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8001e56:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
    bit_pos_plus_cnt -= 8;
 8001e60:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e62:	4302      	orrs	r2, r0
    bit_pos_plus_cnt -= 8;
 8001e64:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e66:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8001e68:	4631      	mov	r1, r6
 8001e6a:	e66e      	b.n	8001b4a <u8g2_font_decode_glyph+0x56>
  bit_pos_plus_cnt += cnt;
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	e656      	b.n	8001b1e <u8g2_font_decode_glyph+0x2a>
	    y1 += h;
 8001e70:	9908      	ldr	r1, [sp, #32]
	    x1 += decode->glyph_width;
 8001e72:	1963      	adds	r3, r4, r5
	    y1 += h;
 8001e74:	1841      	adds	r1, r0, r1
	    x1 += decode->glyph_width;
 8001e76:	b29b      	uxth	r3, r3
	    y1 += h;
 8001e78:	b289      	uxth	r1, r1
	    break;
 8001e7a:	e6ed      	b.n	8001c58 <u8g2_font_decode_glyph+0x164>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e7c:	9b08      	ldr	r3, [sp, #32]
	    y1 += decode->glyph_width;
 8001e7e:	1821      	adds	r1, r4, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e80:	f1c3 0001 	rsb	r0, r3, #1
 8001e84:	4428      	add	r0, r5
	    x1++;
 8001e86:	1c6b      	adds	r3, r5, #1
	    y1 += decode->glyph_width;
 8001e88:	b289      	uxth	r1, r1
	    x1++;
 8001e8a:	b29b      	uxth	r3, r3
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e8c:	b285      	uxth	r5, r0
	    break;
 8001e8e:	e6e3      	b.n	8001c58 <u8g2_font_decode_glyph+0x164>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e90:	f1c4 0101 	rsb	r1, r4, #1
 8001e94:	4429      	add	r1, r5
	    x1++;
 8001e96:	1c6b      	adds	r3, r5, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e98:	b28d      	uxth	r5, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e9a:	9908      	ldr	r1, [sp, #32]
 8001e9c:	f1c1 0001 	rsb	r0, r1, #1
 8001ea0:	4410      	add	r0, r2
	    y1++;
 8001ea2:	1c51      	adds	r1, r2, #1
	    x1++;
 8001ea4:	b29b      	uxth	r3, r3
	    y1++;
 8001ea6:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ea8:	b282      	uxth	r2, r0
	    break;	  
 8001eaa:	e6d5      	b.n	8001c58 <u8g2_font_decode_glyph+0x164>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001eac:	f898 206f 	ldrb.w	r2, [r8, #111]	@ 0x6f
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001eb0:	f898 3070 	ldrb.w	r3, [r8, #112]	@ 0x70
    x = decode->target_x;
 8001eb4:	f8b8 5064 	ldrh.w	r5, [r8, #100]	@ 0x64
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001eb8:	f8b8 0066 	ldrh.w	r0, [r8, #102]	@ 0x66
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001ebc:	f888 2092 	strb.w	r2, [r8, #146]	@ 0x92
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001ec0:	fa4f f18b 	sxtb.w	r1, fp
 8001ec4:	464a      	mov	r2, r9
    x = decode->target_x;
 8001ec6:	9504      	str	r5, [sp, #16]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001ec8:	f7ff fdf0 	bl	8001aac <u8g2_add_vector_y>
 8001ecc:	4605      	mov	r5, r0
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001ece:	9804      	ldr	r0, [sp, #16]
 8001ed0:	f7ff fdfe 	bl	8001ad0 <u8g2_add_vector_x>
      u8g2_DrawHVLine(u8g2, 
 8001ed4:	42a6      	cmp	r6, r4
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001ed6:	4601      	mov	r1, r0
      u8g2_DrawHVLine(u8g2, 
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	462a      	mov	r2, r5
 8001edc:	4633      	mov	r3, r6
 8001ede:	4640      	mov	r0, r8
 8001ee0:	bf28      	it	cs
 8001ee2:	4623      	movcs	r3, r4
 8001ee4:	f000 f98a 	bl	80021fc <u8g2_DrawHVLine>
    cnt -= rem;
 8001ee8:	44a3      	add	fp, r4
    ly++;
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	fa5f fb8b 	uxtb.w	fp, fp
    if ( cnt < rem )
 8001ef0:	42a6      	cmp	r6, r4
    ly++;
 8001ef2:	f103 0301 	add.w	r3, r3, #1
    cnt -= rem;
 8001ef6:	ebab 0407 	sub.w	r4, fp, r7
    if ( cnt < rem )
 8001efa:	d818      	bhi.n	8001f2e <u8g2_font_decode_glyph+0x43a>
    ly++;
 8001efc:	b2db      	uxtb	r3, r3
    cnt -= rem;
 8001efe:	b2e4      	uxtb	r4, r4
    ly++;
 8001f00:	9303      	str	r3, [sp, #12]
    lx = 0;
 8001f02:	46d3      	mov	fp, sl
 8001f04:	461d      	mov	r5, r3
 8001f06:	e6e8      	b.n	8001cda <u8g2_font_decode_glyph+0x1e6>
    f->decode_ptr++;
 8001f08:	1c45      	adds	r5, r0, #1
 8001f0a:	f8c8 5060 	str.w	r5, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f0e:	7840      	ldrb	r0, [r0, #1]
    s -= bit_pos;
 8001f10:	f1c2 0308 	rsb	r3, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	4098      	lsls	r0, r3
    bit_pos_plus_cnt -= 8;
 8001f18:	3a07      	subs	r2, #7
 8001f1a:	b2d3      	uxtb	r3, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f1c:	ea40 0201 	orr.w	r2, r0, r1
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001f20:	07d2      	lsls	r2, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001f22:	f888 306c 	strb.w	r3, [r8, #108]	@ 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001f26:	f53f aed2 	bmi.w	8001cce <u8g2_font_decode_glyph+0x1da>
 8001f2a:	46d1      	mov	r9, sl
 8001f2c:	e750      	b.n	8001dd0 <u8g2_font_decode_glyph+0x2dc>
 8001f2e:	9d03      	ldr	r5, [sp, #12]
 8001f30:	f898 706a 	ldrb.w	r7, [r8, #106]	@ 0x6a
 8001f34:	46ca      	mov	sl, r9
 8001f36:	e6f5      	b.n	8001d24 <u8g2_font_decode_glyph+0x230>
    s -= bit_pos;
 8001f38:	f1c2 0308 	rsb	r3, r2, #8
    f->decode_ptr++;
 8001f3c:	1c6a      	adds	r2, r5, #1
 8001f3e:	f8c8 2060 	str.w	r2, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f42:	786a      	ldrb	r2, [r5, #1]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
    bit_pos_plus_cnt -= 8;
 8001f4a:	3908      	subs	r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f4c:	4333      	orrs	r3, r6
    bit_pos_plus_cnt -= 8;
 8001f4e:	b2c9      	uxtb	r1, r1
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f50:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001f52:	e6b3      	b.n	8001cbc <u8g2_font_decode_glyph+0x1c8>
    f->decode_ptr++;
 8001f54:	1c6e      	adds	r6, r5, #1
    s -= bit_pos;
 8001f56:	f1c3 0308 	rsb	r3, r3, #8
    f->decode_ptr++;
 8001f5a:	f8c8 6060 	str.w	r6, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f5e:	b2df      	uxtb	r7, r3
 8001f60:	786b      	ldrb	r3, [r5, #1]
 8001f62:	40bb      	lsls	r3, r7
    bit_pos_plus_cnt -= 8;
 8001f64:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f66:	4303      	orrs	r3, r0
    bit_pos_plus_cnt -= 8;
 8001f68:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f6a:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001f6c:	4635      	mov	r5, r6
 8001f6e:	e691      	b.n	8001c94 <u8g2_font_decode_glyph+0x1a0>
      switch(decode->dir)
 8001f70:	4601      	mov	r1, r0
 8001f72:	462b      	mov	r3, r5
 8001f74:	e670      	b.n	8001c58 <u8g2_font_decode_glyph+0x164>
 8001f76:	bf00      	nop

08001f78 <u8g2_font_get_glyph_data>:
{
 8001f78:	b508      	push	{r3, lr}
  const uint8_t *font = u8g2->font;
 8001f7a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
  if ( encoding <= 255 )
 8001f7c:	29ff      	cmp	r1, #255	@ 0xff
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001f7e:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 8001f82:	d80e      	bhi.n	8001fa2 <u8g2_font_get_glyph_data+0x2a>
    if ( encoding >= 'a' )
 8001f84:	2960      	cmp	r1, #96	@ 0x60
 8001f86:	d92e      	bls.n	8001fe6 <u8g2_font_get_glyph_data+0x6e>
      font += u8g2->font_info.start_pos_lower_a;
 8001f88:	f8b0 2088 	ldrh.w	r2, [r0, #136]	@ 0x88
 8001f8c:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f8e:	7858      	ldrb	r0, [r3, #1]
 8001f90:	b130      	cbz	r0, 8001fa0 <u8g2_font_get_glyph_data+0x28>
      if ( u8x8_pgm_read( font ) == encoding )
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	428a      	cmp	r2, r1
 8001f96:	d02c      	beq.n	8001ff2 <u8g2_font_get_glyph_data+0x7a>
      font += u8x8_pgm_read( font + 1 );
 8001f98:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f9a:	7858      	ldrb	r0, [r3, #1]
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1f8      	bne.n	8001f92 <u8g2_font_get_glyph_data+0x1a>
}
 8001fa0:	bd08      	pop	{r3, pc}
    font += u8g2->font_info.start_pos_unicode;
 8001fa2:	f8b0 208a 	ldrh.w	r2, [r0, #138]	@ 0x8a
 8001fa6:	4413      	add	r3, r2
    unicode_lookup_table = font; 
 8001fa8:	461a      	mov	r2, r3
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001faa:	4610      	mov	r0, r2
 8001fac:	f7ff fd7a 	bl	8001aa4 <u8g2_font_get_word.constprop.1>
 8001fb0:	4684      	mov	ip, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001fb2:	4610      	mov	r0, r2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001fb4:	4463      	add	r3, ip
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001fb6:	f7ff fd71 	bl	8001a9c <u8g2_font_get_word.constprop.0>
    } while( e < encoding );
 8001fba:	4281      	cmp	r1, r0
      unicode_lookup_table+=4;
 8001fbc:	f102 0204 	add.w	r2, r2, #4
    } while( e < encoding );
 8001fc0:	d8f3      	bhi.n	8001faa <u8g2_font_get_glyph_data+0x32>
      e |= u8x8_pgm_read( font + 1 );
 8001fc2:	8818      	ldrh	r0, [r3, #0]
 8001fc4:	ba42      	rev16	r2, r0
 8001fc6:	b292      	uxth	r2, r2
      if ( e == 0 )
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d0e9      	beq.n	8001fa0 <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 8001fcc:	4291      	cmp	r1, r2
 8001fce:	d008      	beq.n	8001fe2 <u8g2_font_get_glyph_data+0x6a>
      font += u8x8_pgm_read( font + 2 );
 8001fd0:	789a      	ldrb	r2, [r3, #2]
 8001fd2:	4413      	add	r3, r2
      e |= u8x8_pgm_read( font + 1 );
 8001fd4:	8818      	ldrh	r0, [r3, #0]
 8001fd6:	ba42      	rev16	r2, r0
 8001fd8:	b292      	uxth	r2, r2
      if ( e == 0 )
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d0e0      	beq.n	8001fa0 <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 8001fde:	4291      	cmp	r1, r2
 8001fe0:	d1f6      	bne.n	8001fd0 <u8g2_font_get_glyph_data+0x58>
	return font+3;	/* skip encoding and glyph size */
 8001fe2:	1cd8      	adds	r0, r3, #3
}
 8001fe4:	bd08      	pop	{r3, pc}
    else if ( encoding >= 'A' )
 8001fe6:	2940      	cmp	r1, #64	@ 0x40
 8001fe8:	d9d7      	bls.n	8001f9a <u8g2_font_get_glyph_data+0x22>
      font += u8g2->font_info.start_pos_upper_A;
 8001fea:	f8b0 2086 	ldrh.w	r2, [r0, #134]	@ 0x86
 8001fee:	4413      	add	r3, r2
 8001ff0:	e7d3      	b.n	8001f9a <u8g2_font_get_glyph_data+0x22>
	return font+2;	/* skip encoding and glyph size */
 8001ff2:	1c98      	adds	r0, r3, #2
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop

08001ff8 <u8g2_draw_string>:
{
 8001ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffc:	461e      	mov	r6, r3
 8001ffe:	4604      	mov	r4, r0
 8002000:	468a      	mov	sl, r1
 8002002:	4691      	mov	r9, r2
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002004:	f000 fafa 	bl	80025fc <u8x8_utf8_init>
  sum = 0;
 8002008:	2700      	movs	r7, #0
 800200a:	3e01      	subs	r6, #1
    if ( e == 0x0ffff )
 800200c:	f64f 78ff 	movw	r8, #65535	@ 0xffff
    if ( e != 0x0fffe )
 8002010:	f64f 7bfe 	movw	fp, #65534	@ 0xfffe
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002014:	6863      	ldr	r3, [r4, #4]
 8002016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800201a:	4620      	mov	r0, r4
 800201c:	4798      	blx	r3
    if ( e == 0x0ffff )
 800201e:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002020:	4605      	mov	r5, r0
    if ( e == 0x0ffff )
 8002022:	d051      	beq.n	80020c8 <u8g2_draw_string+0xd0>
    if ( e != 0x0fffe )
 8002024:	4558      	cmp	r0, fp
 8002026:	d0f5      	beq.n	8002014 <u8g2_draw_string+0x1c>
  switch(u8g2->font_decode.dir)
 8002028:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800202c:	2b03      	cmp	r3, #3
 800202e:	d84e      	bhi.n	80020ce <u8g2_draw_string+0xd6>
 8002030:	e8df f003 	tbb	[pc, r3]
 8002034:	02323a42 	.word	0x02323a42
      x += u8g2->font_calc_vref(u8g2);
 8002038:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800203a:	4620      	mov	r0, r4
 800203c:	4798      	blx	r3
 800203e:	4450      	add	r0, sl
 8002040:	b280      	uxth	r0, r0
      break;
 8002042:	464b      	mov	r3, r9
  u8g2->font_decode.target_x = x;
 8002044:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002048:	4629      	mov	r1, r5
  u8g2->font_decode.target_y = y;
 800204a:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff92 	bl	8001f78 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8002054:	4601      	mov	r1, r0
 8002056:	b128      	cbz	r0, 8002064 <u8g2_draw_string+0x6c>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002058:	4620      	mov	r0, r4
 800205a:	f7ff fd4b 	bl	8001af4 <u8g2_font_decode_glyph>
 800205e:	b281      	uxth	r1, r0
      sum += delta;    
 8002060:	440f      	add	r7, r1
 8002062:	b2bf      	uxth	r7, r7
      switch(u8g2->font_decode.dir)
 8002064:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8002068:	2b03      	cmp	r3, #3
 800206a:	d8d3      	bhi.n	8002014 <u8g2_draw_string+0x1c>
 800206c:	e8df f003 	tbb	[pc, r3]
 8002070:	02070c10 	.word	0x02070c10
	  y -= delta;
 8002074:	eba9 0101 	sub.w	r1, r9, r1
 8002078:	fa1f f981 	uxth.w	r9, r1
	  break;
 800207c:	e7ca      	b.n	8002014 <u8g2_draw_string+0x1c>
	  x -= delta;
 800207e:	ebaa 0101 	sub.w	r1, sl, r1
 8002082:	fa1f fa81 	uxth.w	sl, r1
	  break;
 8002086:	e7c5      	b.n	8002014 <u8g2_draw_string+0x1c>
	  y += delta;
 8002088:	4449      	add	r1, r9
 800208a:	fa1f f981 	uxth.w	r9, r1
	  break;
 800208e:	e7c1      	b.n	8002014 <u8g2_draw_string+0x1c>
	  x += delta;
 8002090:	4451      	add	r1, sl
 8002092:	fa1f fa81 	uxth.w	sl, r1
	  break;
 8002096:	e7bd      	b.n	8002014 <u8g2_draw_string+0x1c>
      y -= u8g2->font_calc_vref(u8g2);
 8002098:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800209a:	4620      	mov	r0, r4
 800209c:	4798      	blx	r3
 800209e:	eba9 0300 	sub.w	r3, r9, r0
 80020a2:	b29b      	uxth	r3, r3
      break;
 80020a4:	4650      	mov	r0, sl
 80020a6:	e7cd      	b.n	8002044 <u8g2_draw_string+0x4c>
      x -= u8g2->font_calc_vref(u8g2);
 80020a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80020aa:	4620      	mov	r0, r4
 80020ac:	4798      	blx	r3
 80020ae:	ebaa 0000 	sub.w	r0, sl, r0
 80020b2:	b280      	uxth	r0, r0
      break;
 80020b4:	464b      	mov	r3, r9
 80020b6:	e7c5      	b.n	8002044 <u8g2_draw_string+0x4c>
      y += u8g2->font_calc_vref(u8g2);
 80020b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80020ba:	4620      	mov	r0, r4
 80020bc:	4798      	blx	r3
 80020be:	eb09 0300 	add.w	r3, r9, r0
 80020c2:	b29b      	uxth	r3, r3
      break;
 80020c4:	4650      	mov	r0, sl
 80020c6:	e7bd      	b.n	8002044 <u8g2_draw_string+0x4c>
}
 80020c8:	4638      	mov	r0, r7
 80020ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(u8g2->font_decode.dir)
 80020ce:	464b      	mov	r3, r9
 80020d0:	4650      	mov	r0, sl
 80020d2:	e7b7      	b.n	8002044 <u8g2_draw_string+0x4c>

080020d4 <u8g2_DrawStr>:
{
 80020d4:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80020d6:	4c03      	ldr	r4, [pc, #12]	@ (80020e4 <u8g2_DrawStr+0x10>)
 80020d8:	6044      	str	r4, [r0, #4]
}
 80020da:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8g2_draw_string(u8g2, x, y, str);
 80020de:	f7ff bf8b 	b.w	8001ff8 <u8g2_draw_string>
 80020e2:	bf00      	nop
 80020e4:	080025ed 	.word	0x080025ed

080020e8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80020e8:	4b01      	ldr	r3, [pc, #4]	@ (80020f0 <u8g2_SetFontPosBaseline+0x8>)
 80020ea:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	08001a99 	.word	0x08001a99

080020f4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80020f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4603      	mov	r3, r0
  if ( u8g2->font != font )
 80020fa:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80020fc:	4288      	cmp	r0, r1
 80020fe:	d057      	beq.n	80021b0 <u8g2_SetFont+0xbc>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002100:	6599      	str	r1, [r3, #88]	@ 0x58
  return u8x8_pgm_read( font );  
 8002102:	460a      	mov	r2, r1
 8002104:	7809      	ldrb	r1, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002106:	f883 1074 	strb.w	r1, [r3, #116]	@ 0x74
  return u8x8_pgm_read( font );  
 800210a:	7851      	ldrb	r1, [r2, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800210c:	f883 1075 	strb.w	r1, [r3, #117]	@ 0x75
  return u8x8_pgm_read( font );  
 8002110:	7891      	ldrb	r1, [r2, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002112:	f883 1076 	strb.w	r1, [r3, #118]	@ 0x76
  return u8x8_pgm_read( font );  
 8002116:	78d1      	ldrb	r1, [r2, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002118:	f883 1077 	strb.w	r1, [r3, #119]	@ 0x77
  return u8x8_pgm_read( font );  
 800211c:	7911      	ldrb	r1, [r2, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800211e:	f883 1078 	strb.w	r1, [r3, #120]	@ 0x78
  return u8x8_pgm_read( font );  
 8002122:	7951      	ldrb	r1, [r2, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002124:	f883 1079 	strb.w	r1, [r3, #121]	@ 0x79
  return u8x8_pgm_read( font );  
 8002128:	7991      	ldrb	r1, [r2, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800212a:	f883 107a 	strb.w	r1, [r3, #122]	@ 0x7a
  return u8x8_pgm_read( font );  
 800212e:	79d1      	ldrb	r1, [r2, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002130:	f883 107b 	strb.w	r1, [r3, #123]	@ 0x7b
  return u8x8_pgm_read( font );  
 8002134:	7a11      	ldrb	r1, [r2, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002136:	f883 107c 	strb.w	r1, [r3, #124]	@ 0x7c
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800213a:	7a51      	ldrb	r1, [r2, #9]
 800213c:	f883 107d 	strb.w	r1, [r3, #125]	@ 0x7d
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002140:	f992 600a 	ldrsb.w	r6, [r2, #10]
  return u8x8_pgm_read( font );  
 8002144:	f892 900a 	ldrb.w	r9, [r2, #10]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002148:	f883 607e 	strb.w	r6, [r3, #126]	@ 0x7e
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800214c:	7ad1      	ldrb	r1, [r2, #11]
 800214e:	f883 107f 	strb.w	r1, [r3, #127]	@ 0x7f
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002152:	f992 700c 	ldrsb.w	r7, [r2, #12]
  return u8x8_pgm_read( font );  
 8002156:	f892 a00c 	ldrb.w	sl, [r2, #12]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800215a:	f883 7080 	strb.w	r7, [r3, #128]	@ 0x80
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800215e:	f992 500d 	ldrsb.w	r5, [r2, #13]
 8002162:	f883 5081 	strb.w	r5, [r3, #129]	@ 0x81
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002166:	f992 400e 	ldrsb.w	r4, [r2, #14]
 800216a:	f883 4082 	strb.w	r4, [r3, #130]	@ 0x82
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800216e:	f992 800f 	ldrsb.w	r8, [r2, #15]
 8002172:	f883 8083 	strb.w	r8, [r3, #131]	@ 0x83
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002176:	f992 b010 	ldrsb.w	fp, [r2, #16]
 800217a:	f883 b084 	strb.w	fp, [r3, #132]	@ 0x84
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800217e:	2111      	movs	r1, #17
 8002180:	4610      	mov	r0, r2
 8002182:	f7ff fc85 	bl	8001a90 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002186:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002188:	f8a3 0086 	strh.w	r0, [r3, #134]	@ 0x86
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800218c:	4610      	mov	r0, r2
 800218e:	f7ff fc7f 	bl	8001a90 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002192:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002194:	f8a3 0088 	strh.w	r0, [r3, #136]	@ 0x88
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002198:	4610      	mov	r0, r2
 800219a:	f7ff fc79 	bl	8001a90 <u8g2_font_get_word>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800219e:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80021a2:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80021a6:	f883 508e 	strb.w	r5, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80021aa:	f883 408f 	strb.w	r4, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80021ae:	b90a      	cbnz	r2, 80021b4 <u8g2_SetFont+0xc0>
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80021b4:	2a01      	cmp	r2, #1
 80021b6:	d00b      	beq.n	80021d0 <u8g2_SetFont+0xdc>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80021b8:	443e      	add	r6, r7
 80021ba:	42b5      	cmp	r5, r6
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80021bc:	bfbc      	itt	lt
 80021be:	44d1      	addlt	r9, sl
 80021c0:	f883 908e 	strblt.w	r9, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80021c4:	42a7      	cmp	r7, r4
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80021c6:	bfb8      	it	lt
 80021c8:	f883 708f 	strblt.w	r7, [r3, #143]	@ 0x8f
}
 80021cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80021d0:	45a8      	cmp	r8, r5
 80021d2:	bfb8      	it	lt
 80021d4:	46a8      	movlt	r8, r5
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80021d6:	455c      	cmp	r4, fp
 80021d8:	f883 808e 	strb.w	r8, [r3, #142]	@ 0x8e
 80021dc:	dde8      	ble.n	80021b0 <u8g2_SetFont+0xbc>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80021de:	f883 b08f 	strb.w	fp, [r3, #143]	@ 0x8f
 80021e2:	e7e5      	b.n	80021b0 <u8g2_SetFont+0xbc>

080021e4 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80021e4:	b430      	push	{r4, r5}

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 80021e6:	8fc4      	ldrh	r4, [r0, #62]	@ 0x3e
		u8g2_uint_t len, uint8_t dir) {
 80021e8:	f89d 5008 	ldrb.w	r5, [sp, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021ec:	9502      	str	r5, [sp, #8]
	y -= u8g2->pixel_curr_row;
 80021ee:	1b12      	subs	r2, r2, r4
	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021f0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80021f2:	b292      	uxth	r2, r2
 80021f4:	46a4      	mov	ip, r4
}
 80021f6:	bc30      	pop	{r4, r5}
	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021f8:	4760      	bx	ip
 80021fa:	bf00      	nop

080021fc <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80021fc:	b410      	push	{r4}
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 80021fe:	f890 408c 	ldrb.w	r4, [r0, #140]	@ 0x8c
		u8g2_uint_t len, uint8_t dir) {
 8002202:	f89d c004 	ldrb.w	ip, [sp, #4]
	if (u8g2->is_page_clip_window_intersection != 0)
 8002206:	b35c      	cbz	r4, 8002260 <u8g2_DrawHVLine+0x64>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002208:	b353      	cbz	r3, 8002260 <u8g2_DrawHVLine+0x64>

			/* convert to two directions */
			if (len > 1) {
 800220a:	2b01      	cmp	r3, #1
 800220c:	d005      	beq.n	800221a <u8g2_DrawHVLine+0x1e>
				if (dir == 2) {
 800220e:	f1bc 0f02 	cmp.w	ip, #2
 8002212:	d028      	beq.n	8002266 <u8g2_DrawHVLine+0x6a>
					x -= len;
					x++;
				} else if (dir == 3) {
 8002214:	f1bc 0f03 	cmp.w	ip, #3
 8002218:	d05a      	beq.n	80022d0 <u8g2_DrawHVLine+0xd4>
				}
			}
			dir &= 1;

			/* clip against the user window */
			if (dir == 0) {
 800221a:	f01c 0f01 	tst.w	ip, #1
 800221e:	d025      	beq.n	800226c <u8g2_DrawHVLine+0x70>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
						u8g2->user_x1) == 0)
					return;
			} else {
				if (x < u8g2->user_x0)
 8002220:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8002224:	428c      	cmp	r4, r1
 8002226:	d81b      	bhi.n	8002260 <u8g2_DrawHVLine+0x64>
					return;
				if (x >= u8g2->user_x1)
 8002228:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800222c:	428c      	cmp	r4, r1
 800222e:	d917      	bls.n	8002260 <u8g2_DrawHVLine+0x64>
	b += *len;
 8002230:	4413      	add	r3, r2
 8002232:	b29b      	uxth	r3, r3
	if (a > b) {
 8002234:	4293      	cmp	r3, r2
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002236:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 800223a:	f8b0 c04e 	ldrh.w	ip, [r0, #78]	@ 0x4e
	if (a > b) {
 800223e:	d341      	bcc.n	80022c4 <u8g2_DrawHVLine+0xc8>
	if (a >= d)
 8002240:	4594      	cmp	ip, r2
 8002242:	d90d      	bls.n	8002260 <u8g2_DrawHVLine+0x64>
	if (b <= c)
 8002244:	429c      	cmp	r4, r3
 8002246:	d20b      	bcs.n	8002260 <u8g2_DrawHVLine+0x64>
	if (a < c)
 8002248:	42a2      	cmp	r2, r4
 800224a:	bf38      	it	cc
 800224c:	4622      	movcc	r2, r4
	b -= a;
 800224e:	459c      	cmp	ip, r3
 8002250:	bf94      	ite	ls
 8002252:	ebc2 040c 	rsbls	r4, r2, ip
 8002256:	ebc2 0403 	rsbhi	r4, r2, r3
 800225a:	b2a3      	uxth	r3, r4
 800225c:	2401      	movs	r4, #1
 800225e:	e024      	b.n	80022aa <u8g2_DrawHVLine+0xae>
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
		}
}
 8002260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002264:	4770      	bx	lr
					x++;
 8002266:	3101      	adds	r1, #1
 8002268:	1ac9      	subs	r1, r1, r3
 800226a:	b289      	uxth	r1, r1
				if (y < u8g2->user_y0)
 800226c:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 8002270:	4294      	cmp	r4, r2
 8002272:	d8f5      	bhi.n	8002260 <u8g2_DrawHVLine+0x64>
				if (y >= u8g2->user_y1)
 8002274:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
 8002278:	4294      	cmp	r4, r2
 800227a:	d9f1      	bls.n	8002260 <u8g2_DrawHVLine+0x64>
	b += *len;
 800227c:	440b      	add	r3, r1
 800227e:	b29b      	uxth	r3, r3
	if (a > b) {
 8002280:	428b      	cmp	r3, r1
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002282:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8002286:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
	if (a > b) {
 800228a:	d315      	bcc.n	80022b8 <u8g2_DrawHVLine+0xbc>
	if (a >= d)
 800228c:	458c      	cmp	ip, r1
 800228e:	d9e7      	bls.n	8002260 <u8g2_DrawHVLine+0x64>
	if (b <= c)
 8002290:	429c      	cmp	r4, r3
 8002292:	d2e5      	bcs.n	8002260 <u8g2_DrawHVLine+0x64>
	if (a < c)
 8002294:	42a1      	cmp	r1, r4
 8002296:	bf38      	it	cc
 8002298:	4621      	movcc	r1, r4
	b -= a;
 800229a:	459c      	cmp	ip, r3
 800229c:	bf94      	ite	ls
 800229e:	ebc1 040c 	rsbls	r4, r1, ip
 80022a2:	ebc1 0403 	rsbhi	r4, r1, r3
 80022a6:	b2a3      	uxth	r3, r4
 80022a8:	2400      	movs	r4, #0
			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022aa:	9401      	str	r4, [sp, #4]
 80022ac:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80022ae:	68a4      	ldr	r4, [r4, #8]
 80022b0:	46a4      	mov	ip, r4
}
 80022b2:	f85d 4b04 	ldr.w	r4, [sp], #4
			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022b6:	4760      	bx	ip
		if (a < d) {
 80022b8:	458c      	cmp	ip, r1
 80022ba:	d90d      	bls.n	80022d8 <u8g2_DrawHVLine+0xdc>
			b--;
 80022bc:	f10c 33ff 	add.w	r3, ip, #4294967295
 80022c0:	b29b      	uxth	r3, r3
	if (a >= d)
 80022c2:	e7e5      	b.n	8002290 <u8g2_DrawHVLine+0x94>
		if (a < d) {
 80022c4:	4594      	cmp	ip, r2
 80022c6:	d909      	bls.n	80022dc <u8g2_DrawHVLine+0xe0>
			b--;
 80022c8:	f10c 33ff 	add.w	r3, ip, #4294967295
 80022cc:	b29b      	uxth	r3, r3
	if (a >= d)
 80022ce:	e7b9      	b.n	8002244 <u8g2_DrawHVLine+0x48>
					y++;
 80022d0:	3201      	adds	r2, #1
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	b292      	uxth	r2, r2
			if (dir == 0) {
 80022d6:	e7a3      	b.n	8002220 <u8g2_DrawHVLine+0x24>
			a = c;
 80022d8:	4621      	mov	r1, r4
 80022da:	e7d7      	b.n	800228c <u8g2_DrawHVLine+0x90>
 80022dc:	4622      	mov	r2, r4
 80022de:	e7af      	b.n	8002240 <u8g2_DrawHVLine+0x44>

080022e0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80022e0:	b510      	push	{r4, lr}
  if ( v0 < a1 )		// v0 <= a1
 80022e2:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
{
 80022e6:	f8bd c008 	ldrh.w	ip, [sp, #8]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80022ea:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	@ 0x4c
  if ( v0 < a1 )		// v0 <= a1
 80022ee:	4294      	cmp	r4, r2
 80022f0:	d910      	bls.n	8002314 <u8g2_IsIntersection+0x34>
    if ( v1 > a0 )	// v1 >= a0
 80022f2:	45e6      	cmp	lr, ip
 80022f4:	d301      	bcc.n	80022fa <u8g2_IsIntersection+0x1a>
      if ( v0 > v1 )	// v0 > v1
 80022f6:	4562      	cmp	r2, ip
 80022f8:	d90e      	bls.n	8002318 <u8g2_IsIntersection+0x38>
  if ( v0 < a1 )		// v0 <= a1
 80022fa:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80022fe:	f8b0 2048 	ldrh.w	r2, [r0, #72]	@ 0x48
  if ( v0 < a1 )		// v0 <= a1
 8002302:	428c      	cmp	r4, r1
 8002304:	d90a      	bls.n	800231c <u8g2_IsIntersection+0x3c>
    if ( v1 > a0 )	// v1 >= a0
 8002306:	429a      	cmp	r2, r3
 8002308:	d30f      	bcc.n	800232a <u8g2_IsIntersection+0x4a>
      if ( v0 > v1 )	// v0 > v1
 800230a:	4299      	cmp	r1, r3
 800230c:	bf94      	ite	ls
 800230e:	2000      	movls	r0, #0
 8002310:	2001      	movhi	r0, #1
}
 8002312:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 8002314:	45e6      	cmp	lr, ip
 8002316:	d3ee      	bcc.n	80022f6 <u8g2_IsIntersection+0x16>
    return 0; 
 8002318:	2000      	movs	r0, #0
}
 800231a:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 800231c:	429a      	cmp	r2, r3
 800231e:	d2fb      	bcs.n	8002318 <u8g2_IsIntersection+0x38>
      if ( v0 > v1 )	// v0 > v1
 8002320:	4299      	cmp	r1, r3
 8002322:	bf94      	ite	ls
 8002324:	2000      	movls	r0, #0
 8002326:	2001      	movhi	r0, #1
 8002328:	e7f3      	b.n	8002312 <u8g2_IsIntersection+0x32>
      return 1;
 800232a:	2001      	movs	r0, #1
}
 800232c:	bd10      	pop	{r4, pc}
 800232e:	bf00      	nop

08002330 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002334:	4615      	mov	r5, r2
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8002336:	f890 4092 	ldrb.w	r4, [r0, #146]	@ 0x92
{
 800233a:	f89d 2018 	ldrb.w	r2, [sp, #24]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800233e:	f005 0c07 	and.w	ip, r5, #7
  mask <<= bit_pos;
 8002342:	f04f 0e01 	mov.w	lr, #1
 8002346:	fa0e fe0c 	lsl.w	lr, lr, ip
  if ( u8g2->draw_color <= 1 )
 800234a:	2c01      	cmp	r4, #1
  mask <<= bit_pos;
 800234c:	fa5f fe8e 	uxtb.w	lr, lr
  if ( u8g2->draw_color <= 1 )
 8002350:	d975      	bls.n	800243e <u8g2_ll_hvline_vertical_top_lsb+0x10e>
  or_mask = 0;
 8002352:	2400      	movs	r4, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002354:	6806      	ldr	r6, [r0, #0]
 8002356:	7c36      	ldrb	r6, [r6, #16]
  offset &= ~7;
 8002358:	f025 0507 	bic.w	r5, r5, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800235c:	fb05 f606 	mul.w	r6, r5, r6
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8002360:	f64f 75f8 	movw	r5, #65528	@ 0xfff8
 8002364:	4035      	ands	r5, r6
  ptr += x;
 8002366:	440d      	add	r5, r1
  ptr = u8g2->tile_buf_ptr;
 8002368:	6b41      	ldr	r1, [r0, #52]	@ 0x34
  ptr += x;
 800236a:	4429      	add	r1, r5
  
  if ( dir == 0 )
 800236c:	2a00      	cmp	r2, #0
 800236e:	d146      	bne.n	80023fe <u8g2_ll_hvline_vertical_top_lsb+0xce>
 8002370:	1e58      	subs	r0, r3, #1
 8002372:	2802      	cmp	r0, #2
 8002374:	d96e      	bls.n	8002454 <u8g2_ll_hvline_vertical_top_lsb+0x124>
 8002376:	4617      	mov	r7, r2
 8002378:	4616      	mov	r6, r2
 800237a:	f364 0707 	bfi	r7, r4, #0, #8
 800237e:	f36e 0607 	bfi	r6, lr, #0, #8
 8002382:	f364 270f 	bfi	r7, r4, #8, #8
 8002386:	f36e 260f 	bfi	r6, lr, #8, #8
 800238a:	1f1d      	subs	r5, r3, #4
 800238c:	f364 4717 	bfi	r7, r4, #16, #8
 8002390:	f36e 4617 	bfi	r6, lr, #16, #8
 8002394:	f3c5 058d 	ubfx	r5, r5, #2, #14
 8002398:	f364 671f 	bfi	r7, r4, #24, #8
 800239c:	f36e 661f 	bfi	r6, lr, #24, #8
 80023a0:	3501      	adds	r5, #1
 80023a2:	468c      	mov	ip, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80023a4:	f8dc 0000 	ldr.w	r0, [ip]
 80023a8:	3201      	adds	r2, #1
 80023aa:	4338      	orrs	r0, r7
 80023ac:	fa1f f882 	uxth.w	r8, r2
	*ptr ^= xor_mask;
 80023b0:	4070      	eors	r0, r6
 80023b2:	45a8      	cmp	r8, r5
 80023b4:	f84c 0b04 	str.w	r0, [ip], #4
	ptr++;
	len--;
      } while( len != 0 );
 80023b8:	d3f4      	bcc.n	80023a4 <u8g2_ll_hvline_vertical_top_lsb+0x74>
 80023ba:	00ad      	lsls	r5, r5, #2
 80023bc:	b2ad      	uxth	r5, r5
 80023be:	1b5a      	subs	r2, r3, r5
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	4429      	add	r1, r5
 80023c4:	b292      	uxth	r2, r2
 80023c6:	d013      	beq.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 80023c8:	780b      	ldrb	r3, [r1, #0]
 80023ca:	4323      	orrs	r3, r4
	*ptr ^= xor_mask;
 80023cc:	ea8e 0303 	eor.w	r3, lr, r3
      } while( len != 0 );
 80023d0:	2a01      	cmp	r2, #1
	*ptr ^= xor_mask;
 80023d2:	700b      	strb	r3, [r1, #0]
      } while( len != 0 );
 80023d4:	d00c      	beq.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 80023d6:	784b      	ldrb	r3, [r1, #1]
 80023d8:	4323      	orrs	r3, r4
	*ptr ^= xor_mask;
 80023da:	ea8e 0303 	eor.w	r3, lr, r3
      } while( len != 0 );
 80023de:	2a02      	cmp	r2, #2
	*ptr ^= xor_mask;
 80023e0:	704b      	strb	r3, [r1, #1]
      } while( len != 0 );
 80023e2:	d005      	beq.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 80023e4:	788b      	ldrb	r3, [r1, #2]
 80023e6:	ea44 0203 	orr.w	r2, r4, r3
	*ptr ^= xor_mask;
 80023ea:	ea8e 0302 	eor.w	r3, lr, r2
 80023ee:	708b      	strb	r3, [r1, #2]
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	or_mask <<= 1;
 80023f4:	b2ec      	uxtb	r4, r5
	xor_mask <<= 1;
 80023f6:	fa5f fe82 	uxtb.w	lr, r2
    } while( len != 0 );
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f8      	beq.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
      *ptr |= or_mask;
 80023fe:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 8002400:	f10c 0c01 	add.w	ip, ip, #1
      *ptr |= or_mask;
 8002404:	4322      	orrs	r2, r4
      *ptr ^= xor_mask;
 8002406:	ea8e 0202 	eor.w	r2, lr, r2
      len--;
 800240a:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 800240c:	f01c 0c07 	ands.w	ip, ip, #7
      *ptr ^= xor_mask;
 8002410:	700a      	strb	r2, [r1, #0]
      len--;
 8002412:	b29b      	uxth	r3, r3
	or_mask <<= 1;
 8002414:	ea4f 0544 	mov.w	r5, r4, lsl #1
	xor_mask <<= 1;
 8002418:	ea4f 024e 	mov.w	r2, lr, lsl #1
      if ( bit_pos == 0 )
 800241c:	d1ea      	bne.n	80023f4 <u8g2_ll_hvline_vertical_top_lsb+0xc4>
	if ( u8g2->draw_color <= 1 )
 800241e:	f890 2092 	ldrb.w	r2, [r0, #146]	@ 0x92
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002422:	8f45      	ldrh	r5, [r0, #58]	@ 0x3a
	if ( u8g2->draw_color <= 1 )
 8002424:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002426:	4429      	add	r1, r5
	if ( u8g2->draw_color <= 1 )
 8002428:	d904      	bls.n	8002434 <u8g2_ll_hvline_vertical_top_lsb+0x104>
	  xor_mask = 1;
 800242a:	f04f 0e01 	mov.w	lr, #1
    } while( len != 0 );
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e5      	bne.n	80023fe <u8g2_ll_hvline_vertical_top_lsb+0xce>
 8002432:	e7dd      	b.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	if ( u8g2->draw_color != 1 )
 8002434:	d108      	bne.n	8002448 <u8g2_ll_hvline_vertical_top_lsb+0x118>
 8002436:	4614      	mov	r4, r2
    } while( len != 0 );
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e0      	bne.n	80023fe <u8g2_ll_hvline_vertical_top_lsb+0xce>
 800243c:	e7d8      	b.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
  if ( u8g2->draw_color != 1 )
 800243e:	4674      	mov	r4, lr
 8002440:	d188      	bne.n	8002354 <u8g2_ll_hvline_vertical_top_lsb+0x24>
  xor_mask = 0;
 8002442:	f04f 0e00 	mov.w	lr, #0
 8002446:	e785      	b.n	8002354 <u8g2_ll_hvline_vertical_top_lsb+0x24>
	  xor_mask = 1;
 8002448:	f04f 0e01 	mov.w	lr, #1
	if ( u8g2->draw_color != 1 )
 800244c:	4674      	mov	r4, lr
    } while( len != 0 );
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1d5      	bne.n	80023fe <u8g2_ll_hvline_vertical_top_lsb+0xce>
 8002452:	e7cd      	b.n	80023f0 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
  if ( dir == 0 )
 8002454:	461a      	mov	r2, r3
 8002456:	e7b7      	b.n	80023c8 <u8g2_ll_hvline_vertical_top_lsb+0x98>

08002458 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002458:	b410      	push	{r4}
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800245a:	f8b0 c046 	ldrh.w	ip, [r0, #70]	@ 0x46
{
 800245e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  yy -= y;
 8002462:	ebac 0202 	sub.w	r2, ip, r2
  
  xx = u8g2->width;
 8002466:	f8b0 c044 	ldrh.w	ip, [r0, #68]	@ 0x44
  xx -= x;
 800246a:	ebac 0101 	sub.w	r1, ip, r1
  yy -= y;
 800246e:	b292      	uxth	r2, r2
  xx -= x;
 8002470:	b289      	uxth	r1, r1
  
  if ( dir == 0 )
 8002472:	b944      	cbnz	r4, 8002486 <u8g2_draw_l90_r2+0x2e>
  {
    yy--;
 8002474:	3a01      	subs	r2, #1
    xx -= len;
 8002476:	1ac9      	subs	r1, r1, r3
    yy--;
 8002478:	b292      	uxth	r2, r2
    xx -= len;
 800247a:	b289      	uxth	r1, r1
  {
    xx--;
    yy -= len;
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800247c:	9401      	str	r4, [sp, #4]
}
 800247e:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002482:	f7ff beaf 	b.w	80021e4 <u8g2_draw_hv_line_2dir>
  else if ( dir == 1 )
 8002486:	2c01      	cmp	r4, #1
 8002488:	d1f8      	bne.n	800247c <u8g2_draw_l90_r2+0x24>
    xx--;
 800248a:	3901      	subs	r1, #1
    yy -= len;
 800248c:	1ad2      	subs	r2, r2, r3
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800248e:	9401      	str	r4, [sp, #4]
    xx--;
 8002490:	b289      	uxth	r1, r1
}
 8002492:	f85d 4b04 	ldr.w	r4, [sp], #4
    yy -= len;
 8002496:	b292      	uxth	r2, r2
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002498:	f7ff bea4 	b.w	80021e4 <u8g2_draw_hv_line_2dir>

0800249c <u8g2_update_page_win_r2>:
{
 800249c:	b510      	push	{r4, lr}
  if ( u8g2->height >= u8g2->buf_y1 )
 800249e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	@ 0x46
 80024a2:	f8b0 2042 	ldrh.w	r2, [r0, #66]	@ 0x42
{
 80024a6:	4604      	mov	r4, r0
  if ( u8g2->height >= u8g2->buf_y1 )
 80024a8:	4293      	cmp	r3, r2
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80024aa:	bf28      	it	cs
 80024ac:	1a9a      	subcs	r2, r3, r2
  u8g2->user_x0 = 0;
 80024ae:	f04f 0100 	mov.w	r1, #0
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80024b2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
{
 80024b6:	b082      	sub	sp, #8
  u8g2->user_y0 = 0;
 80024b8:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80024bc:	bf28      	it	cs
 80024be:	f8a4 204c 	strhcs.w	r2, [r4, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80024c2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
  u8g2->user_x0 = 0;
 80024c6:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80024ca:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80024ce:	1a99      	subs	r1, r3, r2
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80024d0:	f8b4 0056 	ldrh.w	r0, [r4, #86]	@ 0x56
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80024d4:	f8a4 104e 	strh.w	r1, [r4, #78]	@ 0x4e
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80024d8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80024dc:	f8b4 2054 	ldrh.w	r2, [r4, #84]	@ 0x54
 80024e0:	9000      	str	r0, [sp, #0]
 80024e2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff fefa 	bl	80022e0 <u8g2_IsIntersection>
 80024ec:	b918      	cbnz	r0, 80024f6 <u8g2_update_page_win_r2+0x5a>
    u8g2->is_page_clip_window_intersection = 0;
 80024ee:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
}
 80024f2:	b002      	add	sp, #8
 80024f4:	bd10      	pop	{r4, pc}
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80024f6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80024fa:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 80024fe:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8002500:	bf38      	it	cc
 8002502:	f8a4 3048 	strhcc.w	r3, [r4, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002506:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800250a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800250e:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8002510:	bf88      	it	hi
 8002512:	f8a4 304a 	strhhi.w	r3, [r4, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002516:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 800251a:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 800251e:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8002520:	bf38      	it	cc
 8002522:	f8a4 304c 	strhcc.w	r3, [r4, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002526:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 800252a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    u8g2->is_page_clip_window_intersection = 1;
 800252e:	2101      	movs	r1, #1
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002530:	429a      	cmp	r2, r3
    u8g2->is_page_clip_window_intersection = 1;
 8002532:	f884 108c 	strb.w	r1, [r4, #140]	@ 0x8c
      u8g2->user_y1 = u8g2->clip_y1;
 8002536:	bf88      	it	hi
 8002538:	f8a4 304e 	strhhi.w	r3, [r4, #78]	@ 0x4e
}
 800253c:	b002      	add	sp, #8
 800253e:	bd10      	pop	{r4, pc}

08002540 <u8g2_update_dimension_r2>:
void u8g2_update_dimension_r2(u8g2_t *u8g2)
 8002540:	b510      	push	{r4, lr}
 8002542:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8002546:	6801      	ldr	r1, [r0, #0]
 8002548:	f890 4039 	ldrb.w	r4, [r0, #57]	@ 0x39
 800254c:	00d3      	lsls	r3, r2, #3
 800254e:	8783      	strh	r3, [r0, #60]	@ 0x3c
 8002550:	f891 c010 	ldrb.w	ip, [r1, #16]
 8002554:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 8002558:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800255c:	f8a0 c03a 	strh.w	ip, [r0, #58]	@ 0x3a
 8002560:	f8a0 e03e 	strh.w	lr, [r0, #62]	@ 0x3e
 8002564:	f891 c011 	ldrb.w	ip, [r1, #17]
 8002568:	4422      	add	r2, r4
 800256a:	4562      	cmp	r2, ip
 800256c:	dd05      	ble.n	800257a <u8g2_update_dimension_r2+0x3a>
 800256e:	ebac 0c04 	sub.w	ip, ip, r4
 8002572:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002576:	fa1f f38c 	uxth.w	r3, ip
 800257a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 800257e:	8acc      	ldrh	r4, [r1, #22]
 8002580:	2200      	movs	r2, #0
 8002582:	4611      	mov	r1, r2
 8002584:	4473      	add	r3, lr
 8002586:	f36c 010f 	bfi	r1, ip, #0, #16
 800258a:	f36e 020f 	bfi	r2, lr, #0, #16
 800258e:	f363 421f 	bfi	r2, r3, #16, #16
 8002592:	f364 411f 	bfi	r1, r4, #16, #16
 8002596:	e9c0 2110 	strd	r2, r1, [r0, #64]	@ 0x40
 800259a:	bd10      	pop	{r4, pc}

0800259c <u8g2_SetupBuffer>:
{
 800259c:	b538      	push	{r3, r4, r5, lr}
  u8g2->ll_hvline = ll_hvline_cb;
 800259e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  u8g2->is_auto_page_clear = 1;
 80025a0:	2301      	movs	r3, #1
  u8g2->font = NULL;
 80025a2:	2500      	movs	r5, #0
  u8g2->tile_buf_height = tile_buf_height;
 80025a4:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  u8g2->is_auto_page_clear = 1;
 80025a8:	f880 3093 	strb.w	r3, [r0, #147]	@ 0x93
  u8g2->bitmap_transparency = 0;
 80025ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 80025b0:	9b04      	ldr	r3, [sp, #16]
  u8g2->bitmap_transparency = 0;
 80025b2:	f8a0 2091 	strh.w	r2, [r0, #145]	@ 0x91
{
 80025b6:	4604      	mov	r4, r0
  u8g2->tile_curr_row = 0;
 80025b8:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80025bc:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 80025c0:	f880 508d 	strb.w	r5, [r0, #141]	@ 0x8d
  u8g2->tile_buf_ptr = buf;
 80025c4:	6341      	str	r1, [r0, #52]	@ 0x34
  u8g2->cb = u8g2_cb;
 80025c6:	6303      	str	r3, [r0, #48]	@ 0x30
  u8g2->font = NULL;
 80025c8:	6585      	str	r5, [r0, #88]	@ 0x58
  u8g2->cb->update_dimension(u8g2);
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80025ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
  u8g2->clip_x0 = 0;
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <u8g2_SetupBuffer+0x4c>)
  u8g2->cb->update_page_win(u8g2);
 80025d2:	6852      	ldr	r2, [r2, #4]
  u8g2->clip_x0 = 0;
 80025d4:	6523      	str	r3, [r4, #80]	@ 0x50
 80025d6:	6563      	str	r3, [r4, #84]	@ 0x54
  u8g2->cb->update_page_win(u8g2);
 80025d8:	4620      	mov	r0, r4
 80025da:	4790      	blx	r2
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80025dc:	4620      	mov	r0, r4
 80025de:	f7ff fd83 	bl	80020e8 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 80025e2:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
}
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
 80025e8:	ffff0000 	.word	0xffff0000

080025ec <u8x8_ascii_next>:
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
 80025ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80025f0:	b119      	cbz	r1, 80025fa <u8x8_ascii_next+0xe>
  return b;
 80025f2:	290a      	cmp	r1, #10
 80025f4:	bf18      	it	ne
 80025f6:	4608      	movne	r0, r1
 80025f8:	4770      	bx	lr
}
 80025fa:	4770      	bx	lr

080025fc <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80025fc:	2300      	movs	r3, #0
 80025fe:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 8002602:	4770      	bx	lr

08002604 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002604:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002606:	6904      	ldr	r4, [r0, #16]
{
 8002608:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800260a:	46a4      	mov	ip, r4
 800260c:	2300      	movs	r3, #0
}
 800260e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002612:	2120      	movs	r1, #32
 8002614:	4760      	bx	ip
 8002616:	bf00      	nop

08002618 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002618:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800261a:	6904      	ldr	r4, [r0, #16]
{
 800261c:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800261e:	46a4      	mov	ip, r4
 8002620:	460a      	mov	r2, r1
}
 8002622:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002626:	2117      	movs	r1, #23
 8002628:	4760      	bx	ip
 800262a:	bf00      	nop

0800262c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800262c:	b500      	push	{lr}
 800262e:	b083      	sub	sp, #12
 8002630:	460b      	mov	r3, r1
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002632:	f10d 0207 	add.w	r2, sp, #7
 8002636:	2101      	movs	r1, #1
{
 8002638:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800263c:	f7ff ffec 	bl	8002618 <u8x8_byte_SendBytes>
}
 8002640:	b003      	add	sp, #12
 8002642:	f85d fb04 	ldr.w	pc, [sp], #4
 8002646:	bf00      	nop

08002648 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002648:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800264a:	68c4      	ldr	r4, [r0, #12]
{
 800264c:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800264e:	46a4      	mov	ip, r4
 8002650:	2300      	movs	r3, #0
}
 8002652:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002656:	2115      	movs	r1, #21
 8002658:	4760      	bx	ip
 800265a:	bf00      	nop

0800265c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800265c:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800265e:	68c4      	ldr	r4, [r0, #12]
{
 8002660:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002662:	46a4      	mov	ip, r4
 8002664:	2300      	movs	r3, #0
}
 8002666:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800266a:	2116      	movs	r1, #22
 800266c:	4760      	bx	ip
 800266e:	bf00      	nop

08002670 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002670:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002672:	68c4      	ldr	r4, [r0, #12]
{
 8002674:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002676:	46a4      	mov	ip, r4
 8002678:	460a      	mov	r2, r1
}
 800267a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800267e:	2117      	movs	r1, #23
 8002680:	4760      	bx	ip
 8002682:	bf00      	nop

08002684 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002684:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002686:	68c4      	ldr	r4, [r0, #12]
 8002688:	2300      	movs	r3, #0
 800268a:	46a4      	mov	ip, r4
 800268c:	461a      	mov	r2, r3
}
 800268e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002692:	2118      	movs	r1, #24
 8002694:	4760      	bx	ip
 8002696:	bf00      	nop

08002698 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002698:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800269a:	68c4      	ldr	r4, [r0, #12]
 800269c:	2300      	movs	r3, #0
 800269e:	46a4      	mov	ip, r4
 80026a0:	461a      	mov	r2, r3
}
 80026a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80026a6:	2119      	movs	r1, #25
 80026a8:	4760      	bx	ip
 80026aa:	bf00      	nop

080026ac <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4605      	mov	r5, r0
 80026b0:	b082      	sub	sp, #8
 80026b2:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80026b4:	f894 c000 	ldrb.w	ip, [r4]
    data++;
    switch( cmd )
 80026b8:	f1bc 0f19 	cmp.w	ip, #25
 80026bc:	d815      	bhi.n	80026ea <u8x8_cad_SendSequence+0x3e>
 80026be:	f1bc 0f17 	cmp.w	ip, #23
 80026c2:	d82a      	bhi.n	800271a <u8x8_cad_SendSequence+0x6e>
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
 80026c4:	f10d 0207 	add.w	r2, sp, #7
 80026c8:	f04f 0101 	mov.w	r1, #1
 80026cc:	4628      	mov	r0, r5
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026ce:	f04f 0300 	mov.w	r3, #0
    switch( cmd )
 80026d2:	d117      	bne.n	8002704 <u8x8_cad_SendSequence+0x58>
	  v = *data;
 80026d4:	7863      	ldrb	r3, [r4, #1]
 80026d6:	f88d 3007 	strb.w	r3, [sp, #7]
	  data++;
 80026da:	3402      	adds	r4, #2
	  u8x8_cad_SendData(u8x8, 1, &v);
 80026dc:	f7ff ffc8 	bl	8002670 <u8x8_cad_SendData>
    cmd = *data;
 80026e0:	f894 c000 	ldrb.w	ip, [r4]
    switch( cmd )
 80026e4:	f1bc 0f19 	cmp.w	ip, #25
 80026e8:	d9e9      	bls.n	80026be <u8x8_cad_SendSequence+0x12>
 80026ea:	f1bc 0ffe 	cmp.w	ip, #254	@ 0xfe
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026ee:	f04f 0129 	mov.w	r1, #41	@ 0x29
 80026f2:	4628      	mov	r0, r5
    switch( cmd )
 80026f4:	d119      	bne.n	800272a <u8x8_cad_SendSequence+0x7e>
	  v = *data;
 80026f6:	7862      	ldrb	r2, [r4, #1]
 80026f8:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 80026fc:	3402      	adds	r4, #2
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026fe:	f000 f941 	bl	8002984 <u8x8_gpio_call>
	  break;
 8002702:	e7d7      	b.n	80026b4 <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 8002704:	f1bc 0f14 	cmp.w	ip, #20
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002708:	4661      	mov	r1, ip
    switch( cmd )
 800270a:	d90e      	bls.n	800272a <u8x8_cad_SendSequence+0x7e>
	  v = *data;
 800270c:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800270e:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002710:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 8002714:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002716:	47b0      	blx	r6
	  break;
 8002718:	e7cc      	b.n	80026b4 <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800271a:	2300      	movs	r3, #0
 800271c:	68ee      	ldr	r6, [r5, #12]
 800271e:	461a      	mov	r2, r3
 8002720:	4661      	mov	r1, ip
 8002722:	4628      	mov	r0, r5
    data++;
 8002724:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002726:	47b0      	blx	r6
	  break;
 8002728:	e7c4      	b.n	80026b4 <u8x8_cad_SendSequence+0x8>
      default:
	return;
    }
  }
}
 800272a:	b002      	add	sp, #8
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	bf00      	nop

08002730 <u8x8_cad_001>:
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 8002730:	f1a1 0c14 	sub.w	ip, r1, #20
{
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002738:	460e      	mov	r6, r1
 800273a:	4604      	mov	r4, r0
 800273c:	4615      	mov	r5, r2
 800273e:	4698      	mov	r8, r3
  switch(msg)
 8002740:	f1bc 0f05 	cmp.w	ip, #5
 8002744:	d81a      	bhi.n	800277c <u8x8_cad_001+0x4c>
 8002746:	e8df f00c 	tbb	[pc, ip]
 800274a:	0f06      	.short	0x0f06
 800274c:	0606030f 	.word	0x0606030f
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002750:	2101      	movs	r1, #1
 8002752:	f7ff ff57 	bl	8002604 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002756:	6927      	ldr	r7, [r4, #16]
 8002758:	4643      	mov	r3, r8
 800275a:	462a      	mov	r2, r5
 800275c:	4631      	mov	r1, r6
 800275e:	4620      	mov	r0, r4
 8002760:	46bc      	mov	ip, r7
    default:
      return 0;
  }
  return 1;
}
 8002762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002766:	4760      	bx	ip
      u8x8_byte_SetDC(u8x8, 0);
 8002768:	2100      	movs	r1, #0
 800276a:	f7ff ff4b 	bl	8002604 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800276e:	4629      	mov	r1, r5
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff ff5b 	bl	800262c <u8x8_byte_SendByte>
  return 1;
 8002776:	2001      	movs	r0, #1
}
 8002778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(msg)
 800277c:	2000      	movs	r0, #0
 800277e:	e7fb      	b.n	8002778 <u8x8_cad_001+0x48>

08002780 <u8x8_d_st7565_64128n>:

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002780:	290e      	cmp	r1, #14
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002786:	4605      	mov	r5, r0
 8002788:	4614      	mov	r4, r2
  switch(msg)
 800278a:	d04d      	beq.n	8002828 <u8x8_d_st7565_64128n+0xa8>
 800278c:	290f      	cmp	r1, #15
 800278e:	d009      	beq.n	80027a4 <u8x8_d_st7565_64128n+0x24>
 8002790:	290b      	cmp	r1, #11
 8002792:	d13d      	bne.n	8002810 <u8x8_d_st7565_64128n+0x90>
      if ( arg_int == 0 )
 8002794:	2a00      	cmp	r2, #0
 8002796:	d152      	bne.n	800283e <u8x8_d_st7565_64128n+0xbe>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002798:	4937      	ldr	r1, [pc, #220]	@ (8002878 <u8x8_d_st7565_64128n+0xf8>)
 800279a:	f7ff ff87 	bl	80026ac <u8x8_cad_SendSequence>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
 800279e:	2001      	movs	r0, #1
}
 80027a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_cad_StartTransfer(u8x8);
 80027a4:	461e      	mov	r6, r3
 80027a6:	f7ff ff6d 	bl	8002684 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80027aa:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 80027ac:	f895 1022 	ldrb.w	r1, [r5, #34]	@ 0x22
 80027b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80027b4:	f001 08ff 	and.w	r8, r1, #255	@ 0xff
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80027b8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80027bc:	f041 0110 	orr.w	r1, r1, #16
 80027c0:	4628      	mov	r0, r5
 80027c2:	f7ff ff41 	bl	8002648 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80027c6:	f008 010f 	and.w	r1, r8, #15
 80027ca:	4628      	mov	r0, r5
 80027cc:	f7ff ff3c 	bl	8002648 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80027d0:	79b1      	ldrb	r1, [r6, #6]
 80027d2:	4628      	mov	r0, r5
 80027d4:	f041 01b0 	orr.w	r1, r1, #176	@ 0xb0
 80027d8:	f7ff ff36 	bl	8002648 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80027dc:	7933      	ldrb	r3, [r6, #4]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80027de:	6837      	ldr	r7, [r6, #0]
      c *= 8;
 80027e0:	00de      	lsls	r6, r3, #3
 80027e2:	b2f6      	uxtb	r6, r6
      if ( c + x > 132u )
 80027e4:	eb06 0308 	add.w	r3, r6, r8
 80027e8:	2b84      	cmp	r3, #132	@ 0x84
	c -= x;
 80027ea:	bfc4      	itt	gt
 80027ec:	f1c8 0884 	rsbgt	r8, r8, #132	@ 0x84
 80027f0:	fa5f f688 	uxtbgt.w	r6, r8
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80027f4:	463a      	mov	r2, r7
 80027f6:	4631      	mov	r1, r6
 80027f8:	4628      	mov	r0, r5
 80027fa:	f7ff ff39 	bl	8002670 <u8x8_cad_SendData>
	arg_int--;
 80027fe:	1e63      	subs	r3, r4, #1
      } while( arg_int > 0 );
 8002800:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8002804:	d1f6      	bne.n	80027f4 <u8x8_d_st7565_64128n+0x74>
      u8x8_cad_EndTransfer(u8x8);
 8002806:	4628      	mov	r0, r5
 8002808:	f7ff ff46 	bl	8002698 <u8x8_cad_EndTransfer>
  return 1;
 800280c:	2001      	movs	r0, #1
 800280e:	e7c7      	b.n	80027a0 <u8x8_d_st7565_64128n+0x20>
    switch(msg)
 8002810:	290a      	cmp	r1, #10
 8002812:	d021      	beq.n	8002858 <u8x8_d_st7565_64128n+0xd8>
 8002814:	290d      	cmp	r1, #13
 8002816:	d016      	beq.n	8002846 <u8x8_d_st7565_64128n+0xc6>
 8002818:	2909      	cmp	r1, #9
 800281a:	bf18      	it	ne
 800281c:	2000      	movne	r0, #0
 800281e:	d1bf      	bne.n	80027a0 <u8x8_d_st7565_64128n+0x20>
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8002820:	4916      	ldr	r1, [pc, #88]	@ (800287c <u8x8_d_st7565_64128n+0xfc>)
 8002822:	f000 f835 	bl	8002890 <u8x8_d_helper_display_setup_memory>
	break;
 8002826:	e7f1      	b.n	800280c <u8x8_d_st7565_64128n+0x8c>
      u8x8_cad_StartTransfer(u8x8);
 8002828:	f7ff ff2c 	bl	8002684 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800282c:	2181      	movs	r1, #129	@ 0x81
 800282e:	4628      	mov	r0, r5
 8002830:	f7ff ff0a 	bl	8002648 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002834:	08a1      	lsrs	r1, r4, #2
 8002836:	4628      	mov	r0, r5
 8002838:	f7ff ff10 	bl	800265c <u8x8_cad_SendArg>
 800283c:	e7e3      	b.n	8002806 <u8x8_d_st7565_64128n+0x86>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800283e:	4910      	ldr	r1, [pc, #64]	@ (8002880 <u8x8_d_st7565_64128n+0x100>)
 8002840:	f7ff ff34 	bl	80026ac <u8x8_cad_SendSequence>
 8002844:	e7e2      	b.n	800280c <u8x8_d_st7565_64128n+0x8c>
	if ( arg_int == 0 )
 8002846:	b972      	cbnz	r2, 8002866 <u8x8_d_st7565_64128n+0xe6>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002848:	490e      	ldr	r1, [pc, #56]	@ (8002884 <u8x8_d_st7565_64128n+0x104>)
 800284a:	f7ff ff2f 	bl	80026ac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	7c9b      	ldrb	r3, [r3, #18]
 8002852:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 8002856:	e7d9      	b.n	800280c <u8x8_d_st7565_64128n+0x8c>
	u8x8_d_helper_display_init(u8x8);
 8002858:	f000 f820 	bl	800289c <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 800285c:	490a      	ldr	r1, [pc, #40]	@ (8002888 <u8x8_d_st7565_64128n+0x108>)
 800285e:	4628      	mov	r0, r5
 8002860:	f7ff ff24 	bl	80026ac <u8x8_cad_SendSequence>
	break;
 8002864:	e7d2      	b.n	800280c <u8x8_d_st7565_64128n+0x8c>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002866:	4909      	ldr	r1, [pc, #36]	@ (800288c <u8x8_d_st7565_64128n+0x10c>)
 8002868:	f7ff ff20 	bl	80026ac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	7cdb      	ldrb	r3, [r3, #19]
 8002870:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 8002874:	e7ca      	b.n	800280c <u8x8_d_st7565_64128n+0x8c>
 8002876:	bf00      	nop
 8002878:	0800940c 	.word	0x0800940c
 800287c:	080093bc 	.word	0x080093bc
 8002880:	08009404 	.word	0x08009404
 8002884:	080093fc 	.word	0x080093fc
 8002888:	080093d4 	.word	0x080093d4
 800288c:	080093f4 	.word	0x080093f4

08002890 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002890:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002892:	7c8b      	ldrb	r3, [r1, #18]
 8002894:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800289c:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800289e:	2300      	movs	r3, #0
{
 80028a0:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 80028a2:	461a      	mov	r2, r3
 80028a4:	6945      	ldr	r5, [r0, #20]
 80028a6:	2128      	movs	r1, #40	@ 0x28
 80028a8:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80028aa:	2300      	movs	r3, #0
 80028ac:	461a      	mov	r2, r3
 80028ae:	68e5      	ldr	r5, [r4, #12]
 80028b0:	2114      	movs	r1, #20
 80028b2:	4620      	mov	r0, r4
 80028b4:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80028b6:	4620      	mov	r0, r4
 80028b8:	2201      	movs	r2, #1
 80028ba:	214b      	movs	r1, #75	@ 0x4b
 80028bc:	f000 f862 	bl	8002984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	4620      	mov	r0, r4
 80028c4:	791a      	ldrb	r2, [r3, #4]
 80028c6:	2129      	movs	r1, #41	@ 0x29
 80028c8:	f000 f85c 	bl	8002984 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028cc:	4620      	mov	r0, r4
 80028ce:	2200      	movs	r2, #0
 80028d0:	214b      	movs	r1, #75	@ 0x4b
 80028d2:	f000 f857 	bl	8002984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	4620      	mov	r0, r4
 80028da:	791a      	ldrb	r2, [r3, #4]
 80028dc:	2129      	movs	r1, #41	@ 0x29
 80028de:	f000 f851 	bl	8002984 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028e2:	4620      	mov	r0, r4
 80028e4:	2201      	movs	r2, #1
 80028e6:	214b      	movs	r1, #75	@ 0x4b
 80028e8:	f000 f84c 	bl	8002984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	4620      	mov	r0, r4
 80028f0:	795a      	ldrb	r2, [r3, #5]
 80028f2:	2129      	movs	r1, #41	@ 0x29
}    
 80028f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028f8:	f000 b844 	b.w	8002984 <u8x8_gpio_call>

080028fc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80028fc:	b530      	push	{r4, r5, lr}
 80028fe:	b083      	sub	sp, #12
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002900:	6884      	ldr	r4, [r0, #8]
  tile.tile_ptr = tile_ptr;
 8002902:	9d06      	ldr	r5, [sp, #24]
  tile.x_pos = x;
 8002904:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8002908:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
 800290c:	f88d 3004 	strb.w	r3, [sp, #4]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002910:	2201      	movs	r2, #1
 8002912:	466b      	mov	r3, sp
 8002914:	210f      	movs	r1, #15
  tile.tile_ptr = tile_ptr;
 8002916:	9500      	str	r5, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002918:	47a0      	blx	r4
}
 800291a:	b003      	add	sp, #12
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	bf00      	nop

08002920 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002920:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002922:	6884      	ldr	r4, [r0, #8]
 8002924:	2300      	movs	r3, #0
 8002926:	46a4      	mov	ip, r4
 8002928:	461a      	mov	r2, r3
}
 800292a:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800292e:	2109      	movs	r1, #9
 8002930:	4760      	bx	ip
 8002932:	bf00      	nop

08002934 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002934:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002936:	6884      	ldr	r4, [r0, #8]
 8002938:	2300      	movs	r3, #0
 800293a:	46a4      	mov	ip, r4
 800293c:	461a      	mov	r2, r3
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800293e:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002942:	210a      	movs	r1, #10
 8002944:	4760      	bx	ip
 8002946:	bf00      	nop

08002948 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002948:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800294a:	6884      	ldr	r4, [r0, #8]
{
 800294c:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800294e:	46a4      	mov	ip, r4
 8002950:	2300      	movs	r3, #0
}
 8002952:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002956:	210b      	movs	r1, #11
 8002958:	4760      	bx	ip
 800295a:	bf00      	nop

0800295c <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800295c:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800295e:	6884      	ldr	r4, [r0, #8]
{
 8002960:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002962:	46a4      	mov	ip, r4
 8002964:	2300      	movs	r3, #0
}
 8002966:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800296a:	210e      	movs	r1, #14
 800296c:	4760      	bx	ip
 800296e:	bf00      	nop

08002970 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002970:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002972:	6884      	ldr	r4, [r0, #8]
 8002974:	2300      	movs	r3, #0
 8002976:	46a4      	mov	ip, r4
 8002978:	461a      	mov	r2, r3
}
 800297a:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800297e:	2110      	movs	r1, #16
 8002980:	4760      	bx	ip
 8002982:	bf00      	nop

08002984 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002984:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002986:	6944      	ldr	r4, [r0, #20]
 8002988:	2300      	movs	r3, #0
 800298a:	46a4      	mov	ip, r4
}
 800298c:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002990:	4760      	bx	ip
 8002992:	bf00      	nop

08002994 <u8x8_Setup>:
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
 8002994:	6103      	str	r3, [r0, #16]
    u8x8->display_info = NULL;
 8002996:	2300      	movs	r3, #0
  u8x8->cad_cb = cad_cb;
 8002998:	e9c0 1202 	strd	r1, r2, [r0, #8]
    u8x8->display_info = NULL;
 800299c:	6003      	str	r3, [r0, #0]
    u8x8->is_font_inverse_mode = 0;
 800299e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029a2:	22ff      	movs	r2, #255	@ 0xff
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80029a4:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80029a8:	6183      	str	r3, [r0, #24]
{
 80029aa:	9b00      	ldr	r3, [sp, #0]
    u8x8->is_font_inverse_mode = 0;
 80029ac:	f8a0 1023 	strh.w	r1, [r0, #35]	@ 0x23
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029b0:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80029b4:	6143      	str	r3, [r0, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80029b6:	f7ff bfb3 	b.w	8002920 <u8x8_SetupMemory>
 80029ba:	bf00      	nop

080029bc <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 80029bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 80029c0:	2aff      	cmp	r2, #255	@ 0xff
{
 80029c2:	b086      	sub	sp, #24
 80029c4:	4614      	mov	r4, r2
 80029c6:	4606      	mov	r6, r0
 80029c8:	461f      	mov	r7, r3
    if ((pin & 0xFF00) == 0)
 80029ca:	d92c      	bls.n	8002a26 <Expander_SetPinState+0x6a>
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
    }
    else if ((pin & 0x00FF) == 0)
 80029cc:	b2d3      	uxtb	r3, r2
 80029ce:	b11b      	cbz	r3, 80029d8 <Expander_SetPinState+0x1c>
                                   EXPANDER_I2C_TIMEOUT);
        return status;
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 80029d0:	2001      	movs	r0, #1
    }
}
 80029d2:	b006      	add	sp, #24
 80029d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = HAL_I2C_Mem_Read(hi2c,
 80029d8:	2264      	movs	r2, #100	@ 0x64
 80029da:	004d      	lsls	r5, r1, #1
 80029dc:	2301      	movs	r3, #1
 80029de:	f10d 0817 	add.w	r8, sp, #23
 80029e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80029e6:	f8cd 8000 	str.w	r8, [sp]
 80029ea:	2203      	movs	r2, #3
 80029ec:	4629      	mov	r1, r5
 80029ee:	f003 fde9 	bl	80065c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d1ed      	bne.n	80029d2 <Expander_SetPinState+0x16>
            currentOutput |= pin_mask;
 80029f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 80029fa:	f8cd 8000 	str.w	r8, [sp]
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 80029fe:	0a24      	lsrs	r4, r4, #8
        if (state == HIGH) {
 8002a00:	2f01      	cmp	r7, #1
            currentOutput |= pin_mask;
 8002a02:	bf0c      	ite	eq
 8002a04:	431c      	orreq	r4, r3
            currentOutput &= ~pin_mask;
 8002a06:	ea23 0404 	bicne.w	r4, r3, r4
        status = HAL_I2C_Mem_Write(hi2c,
 8002a0a:	2264      	movs	r2, #100	@ 0x64
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a12:	4629      	mov	r1, r5
 8002a14:	2203      	movs	r2, #3
 8002a16:	4630      	mov	r0, r6
 8002a18:	f88d 4017 	strb.w	r4, [sp, #23]
 8002a1c:	f003 fcb8 	bl	8006390 <HAL_I2C_Mem_Write>
}
 8002a20:	b006      	add	sp, #24
 8002a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = HAL_I2C_Mem_Read(hi2c,
 8002a26:	2264      	movs	r2, #100	@ 0x64
 8002a28:	004d      	lsls	r5, r1, #1
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f10d 0817 	add.w	r8, sp, #23
 8002a30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a34:	f8cd 8000 	str.w	r8, [sp]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	f003 fdc2 	bl	80065c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1c6      	bne.n	80029d2 <Expander_SetPinState+0x16>
            currentOutput |= (uint8_t)pin;
 8002a44:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002a48:	f8cd 8000 	str.w	r8, [sp]
        if (state == HIGH) {
 8002a4c:	2f01      	cmp	r7, #1
            currentOutput |= (uint8_t)pin;
 8002a4e:	bf0c      	ite	eq
 8002a50:	431c      	orreq	r4, r3
            currentOutput &= ~(uint8_t)pin;
 8002a52:	ea23 0404 	bicne.w	r4, r3, r4
        status = HAL_I2C_Mem_Write(hi2c,
 8002a56:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002a5a:	f04f 0301 	mov.w	r3, #1
 8002a5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
            currentOutput |= (uint8_t)pin;
 8002a62:	bf08      	it	eq
 8002a64:	b2e4      	uxtbeq	r4, r4
        status = HAL_I2C_Mem_Write(hi2c,
 8002a66:	2202      	movs	r2, #2
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f88d 4017 	strb.w	r4, [sp, #23]
 8002a70:	f003 fc8e 	bl	8006390 <HAL_I2C_Mem_Write>
}
 8002a74:	b006      	add	sp, #24
 8002a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a7a:	bf00      	nop

08002a7c <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	b087      	sub	sp, #28
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8002a82:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <Expander_InitAllDevices+0x6c>)
 8002a84:	9305      	str	r3, [sp, #20]
{
 8002a86:	4606      	mov	r6, r0
 8002a88:	ac05      	add	r4, sp, #20
 8002a8a:	f10d 0a18 	add.w	sl, sp, #24
 8002a8e:	f10d 0912 	add.w	r9, sp, #18
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8002a92:	2501      	movs	r5, #1
    uint8_t port1_config = 0;
 8002a94:	f04f 0800 	mov.w	r8, #0
    status = HAL_I2C_Mem_Write(hi2c,
 8002a98:	2764      	movs	r7, #100	@ 0x64
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
    for (size_t i = 0; i < count; i++)
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8002a9a:	f814 bb01 	ldrb.w	fp, [r4], #1
    status = HAL_I2C_Mem_Write(hi2c,
 8002a9e:	9702      	str	r7, [sp, #8]
 8002aa0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	e9cd 9500 	strd	r9, r5, [sp]
 8002aac:	2206      	movs	r2, #6
 8002aae:	4630      	mov	r0, r6
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8002ab0:	f88d 5012 	strb.w	r5, [sp, #18]
    uint8_t port1_config = 0;
 8002ab4:	f88d 8013 	strb.w	r8, [sp, #19]
    status = HAL_I2C_Mem_Write(hi2c,
 8002ab8:	f003 fc6a 	bl	8006390 <HAL_I2C_Mem_Write>
    status = HAL_I2C_Mem_Write(hi2c,
 8002abc:	2301      	movs	r3, #1
 8002abe:	4659      	mov	r1, fp
    if (status != HAL_OK)
 8002ac0:	b110      	cbz	r0, 8002ac8 <Expander_InitAllDevices+0x4c>
        {
            return status;
        }
    }
    return HAL_OK;
}
 8002ac2:	b007      	add	sp, #28
 8002ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_I2C_Mem_Write(hi2c,
 8002ac8:	f10d 0213 	add.w	r2, sp, #19
 8002acc:	e88d 00a4 	stmia.w	sp, {r2, r5, r7}
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	f003 fc5c 	bl	8006390 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d1f2      	bne.n	8002ac2 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8002adc:	4554      	cmp	r4, sl
 8002ade:	d1dc      	bne.n	8002a9a <Expander_InitAllDevices+0x1e>
}
 8002ae0:	b007      	add	sp, #28
 8002ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	24232221 	.word	0x24232221

08002aec <Set_Output_Voltage>:
}

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 8002aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
        target_i2c = &hi2c2;
 8002af0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca4 <Set_Output_Voltage+0x1b8>)
 8002af2:	4c6d      	ldr	r4, [pc, #436]	@ (8002ca8 <Set_Output_Voltage+0x1bc>)
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
    for (int i = 0; i < 8; i++) {
        if (default_map[i].voltage == voltage) {
 8002af4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8002af8:	eeb4 0a67 	vcmp.f32	s0, s15
        target_i2c = &hi2c2;
 8002afc:	280b      	cmp	r0, #11
 8002afe:	bf98      	it	ls
 8002b00:	461c      	movls	r4, r3
        if (default_map[i].voltage == voltage) {
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	d03a      	beq.n	8002b7e <Set_Output_Voltage+0x92>
 8002b08:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 8002b0c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	f000 80a3 	beq.w	8002c5e <Set_Output_Voltage+0x172>
 8002b18:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8002cac <Set_Output_Voltage+0x1c0>
 8002b1c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	f000 80b4 	beq.w	8002c90 <Set_Output_Voltage+0x1a4>
 8002b28:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8002cb0 <Set_Output_Voltage+0x1c4>
 8002b2c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	f000 80ae 	beq.w	8002c94 <Set_Output_Voltage+0x1a8>
 8002b38:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8002cb4 <Set_Output_Voltage+0x1c8>
 8002b3c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	f000 80a8 	beq.w	8002c98 <Set_Output_Voltage+0x1ac>
 8002b48:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 8002cb8 <Set_Output_Voltage+0x1cc>
 8002b4c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	f000 80a2 	beq.w	8002c9c <Set_Output_Voltage+0x1b0>
 8002b58:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8002b5c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	f000 809c 	beq.w	8002ca0 <Set_Output_Voltage+0x1b4>
 8002b68:	eddf 7a54 	vldr	s15, [pc, #336]	@ 8002cbc <Set_Output_Voltage+0x1d0>
 8002b6c:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	bf08      	it	eq
 8002b76:	2207      	moveq	r2, #7
 8002b78:	d002      	beq.n	8002b80 <Set_Output_Voltage+0x94>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
}
 8002b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < 8; i++) {
 8002b7e:	2200      	movs	r2, #0
            mux_channel = default_map[i].mux_channel;
 8002b80:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc0 <Set_Output_Voltage+0x1d4>)
 8002b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b86:	791a      	ldrb	r2, [r3, #4]
    if (mux_channel == 0xFF) return; // Voltage not found
 8002b88:	2aff      	cmp	r2, #255	@ 0xff
 8002b8a:	d0f6      	beq.n	8002b7a <Set_Output_Voltage+0x8e>
    switch(cell)
 8002b8c:	3801      	subs	r0, #1
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8002b8e:	f002 0301 	and.w	r3, r2, #1
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 8002b92:	f3c2 0740 	ubfx	r7, r2, #1, #1
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 8002b96:	f3c2 0580 	ubfx	r5, r2, #2, #1
    switch(cell)
 8002b9a:	2816      	cmp	r0, #22
 8002b9c:	d871      	bhi.n	8002c82 <Set_Output_Voltage+0x196>
 8002b9e:	e8df f000 	tbb	[pc, r0]
 8002ba2:	680c      	.short	0x680c
 8002ba4:	4139322b 	.word	0x4139322b
 8002ba8:	24574f48 	.word	0x24574f48
 8002bac:	680c7060 	.word	0x680c7060
 8002bb0:	4139322b 	.word	0x4139322b
 8002bb4:	24574f48 	.word	0x24574f48
 8002bb8:	60          	.byte	0x60
 8002bb9:	00          	.byte	0x00
 8002bba:	f04f 0820 	mov.w	r8, #32
 8002bbe:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8002bc2:	2280      	movs	r2, #128	@ 0x80
 8002bc4:	2621      	movs	r6, #33	@ 0x21
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fef7 	bl	80029bc <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 8002bce:	463b      	mov	r3, r7
 8002bd0:	464a      	mov	r2, r9
 8002bd2:	4631      	mov	r1, r6
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7ff fef1 	bl	80029bc <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 8002bda:	462b      	mov	r3, r5
 8002bdc:	4642      	mov	r2, r8
 8002bde:	4631      	mov	r1, r6
 8002be0:	4620      	mov	r0, r4
}
 8002be2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 8002be6:	f7ff bee9 	b.w	80029bc <Expander_SetPinState>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002bea:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002bee:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002bf2:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002bf4:	2624      	movs	r6, #36	@ 0x24
            break;
 8002bf6:	e7e6      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002bf8:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002bfc:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c00:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002c02:	2622      	movs	r6, #34	@ 0x22
            break;
 8002c04:	e7df      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002c06:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002c0a:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002c0e:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002c10:	2622      	movs	r6, #34	@ 0x22
            break;
 8002c12:	e7d8      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c14:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c18:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002c20:	2622      	movs	r6, #34	@ 0x22
            break;
 8002c22:	e7d0      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002c24:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002c28:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c2c:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002c2e:	2623      	movs	r6, #35	@ 0x23
            break;
 8002c30:	e7c9      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002c32:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002c36:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002c3a:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002c3c:	2623      	movs	r6, #35	@ 0x23
            break;
 8002c3e:	e7c2      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c40:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c44:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002c4c:	2623      	movs	r6, #35	@ 0x23
            break;
 8002c4e:	e7ba      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002c50:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002c54:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c58:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002c5a:	2624      	movs	r6, #36	@ 0x24
            break;
 8002c5c:	e7b3      	b.n	8002bc6 <Set_Output_Voltage+0xda>
    for (int i = 0; i < 8; i++) {
 8002c5e:	2201      	movs	r2, #1
 8002c60:	e78e      	b.n	8002b80 <Set_Output_Voltage+0x94>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c62:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c66:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002c6e:	2624      	movs	r6, #36	@ 0x24
 8002c70:	e7a9      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c72:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c76:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_01;
 8002c7e:	2621      	movs	r6, #33	@ 0x21
 8002c80:	e7a1      	b.n	8002bc6 <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002c82:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002c86:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c8a:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_01;
 8002c8c:	2621      	movs	r6, #33	@ 0x21
 8002c8e:	e79a      	b.n	8002bc6 <Set_Output_Voltage+0xda>
    for (int i = 0; i < 8; i++) {
 8002c90:	2202      	movs	r2, #2
 8002c92:	e775      	b.n	8002b80 <Set_Output_Voltage+0x94>
 8002c94:	2203      	movs	r2, #3
 8002c96:	e773      	b.n	8002b80 <Set_Output_Voltage+0x94>
 8002c98:	2204      	movs	r2, #4
 8002c9a:	e771      	b.n	8002b80 <Set_Output_Voltage+0x94>
 8002c9c:	2205      	movs	r2, #5
 8002c9e:	e76f      	b.n	8002b80 <Set_Output_Voltage+0x94>
 8002ca0:	2206      	movs	r2, #6
 8002ca2:	e76d      	b.n	8002b80 <Set_Output_Voltage+0x94>
 8002ca4:	200014f4 	.word	0x200014f4
 8002ca8:	200014a0 	.word	0x200014a0
 8002cac:	40333333 	.word	0x40333333
 8002cb0:	40533333 	.word	0x40533333
 8002cb4:	4059999a 	.word	0x4059999a
 8002cb8:	40666666 	.word	0x40666666
 8002cbc:	40866666 	.word	0x40866666
 8002cc0:	08009414 	.word	0x08009414

08002cc4 <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 8002cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
        target_i2c = &hi2c2;
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002df8 <Set_LED_status+0x134>)
 8002cca:	4c4c      	ldr	r4, [pc, #304]	@ (8002dfc <Set_LED_status+0x138>)
    switch(cell)
 8002ccc:	1e43      	subs	r3, r0, #1
{
 8002cce:	b087      	sub	sp, #28
 8002cd0:	460e      	mov	r6, r1
        target_i2c = &hi2c2;
 8002cd2:	280b      	cmp	r0, #11
 8002cd4:	bf98      	it	ls
 8002cd6:	4614      	movls	r4, r2
    switch(cell)
 8002cd8:	2b16      	cmp	r3, #22
 8002cda:	f200 808b 	bhi.w	8002df4 <Set_LED_status+0x130>
 8002cde:	e8df f003 	tbb	[pc, r3]
 8002ce2:	317d      	.short	0x317d
 8002ce4:	5b835d0c 	.word	0x5b835d0c
 8002ce8:	716f6963 	.word	0x716f6963
 8002cec:	317d8977 	.word	0x317d8977
 8002cf0:	5b835d0c 	.word	0x5b835d0c
 8002cf4:	716f6963 	.word	0x716f6963
 8002cf8:	77          	.byte	0x77
 8002cf9:	00          	.byte	0x00
 8002cfa:	2744      	movs	r7, #68	@ 0x44
        status = HAL_I2C_Mem_Read(hi2c,
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f10d 0517 	add.w	r5, sp, #23
 8002d04:	9202      	str	r2, [sp, #8]
 8002d06:	e9cd 5300 	strd	r5, r3, [sp]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4639      	mov	r1, r7
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f003 fc58 	bl	80065c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002d14:	b998      	cbnz	r0, 8002d3e <Set_LED_status+0x7a>
            currentOutput |= (uint8_t)pin;
 8002d16:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002d1a:	9500      	str	r5, [sp, #0]
        if (state == HIGH) {
 8002d1c:	2e01      	cmp	r6, #1
            currentOutput |= (uint8_t)pin;
 8002d1e:	bf0c      	ite	eq
 8002d20:	f043 0610 	orreq.w	r6, r3, #16
            currentOutput &= ~(uint8_t)pin;
 8002d24:	f003 06ef 	andne.w	r6, r3, #239	@ 0xef
        status = HAL_I2C_Mem_Write(hi2c,
 8002d28:	2264      	movs	r2, #100	@ 0x64
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d30:	4639      	mov	r1, r7
 8002d32:	2202      	movs	r2, #2
 8002d34:	4620      	mov	r0, r4
 8002d36:	f88d 6017 	strb.w	r6, [sp, #23]
 8002d3a:	f003 fb29 	bl	8006390 <HAL_I2C_Mem_Write>
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);

}
 8002d3e:	b007      	add	sp, #28
 8002d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(cell)
 8002d44:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002d48:	f04f 0904 	mov.w	r9, #4
 8002d4c:	2742      	movs	r7, #66	@ 0x42
        status = HAL_I2C_Mem_Read(hi2c,
 8002d4e:	2264      	movs	r2, #100	@ 0x64
 8002d50:	2301      	movs	r3, #1
 8002d52:	f10d 0517 	add.w	r5, sp, #23
 8002d56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d5a:	9500      	str	r5, [sp, #0]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4639      	mov	r1, r7
 8002d60:	4620      	mov	r0, r4
 8002d62:	f003 fc2f 	bl	80065c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002d66:	2800      	cmp	r0, #0
 8002d68:	d1e9      	bne.n	8002d3e <Set_LED_status+0x7a>
            currentOutput |= pin_mask;
 8002d6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002d6e:	9500      	str	r5, [sp, #0]
        if (state == HIGH) {
 8002d70:	2e01      	cmp	r6, #1
            currentOutput |= pin_mask;
 8002d72:	bf0c      	ite	eq
 8002d74:	ea49 0603 	orreq.w	r6, r9, r3
            currentOutput &= ~pin_mask;
 8002d78:	ea08 0603 	andne.w	r6, r8, r3
        status = HAL_I2C_Mem_Write(hi2c,
 8002d7c:	2264      	movs	r2, #100	@ 0x64
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d84:	4639      	mov	r1, r7
 8002d86:	2203      	movs	r2, #3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f88d 6017 	strb.w	r6, [sp, #23]
 8002d8e:	f003 faff 	bl	8006390 <HAL_I2C_Mem_Write>
}
 8002d92:	b007      	add	sp, #28
 8002d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(cell)
 8002d98:	2746      	movs	r7, #70	@ 0x46
 8002d9a:	e7af      	b.n	8002cfc <Set_LED_status+0x38>
 8002d9c:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002da0:	f04f 0902 	mov.w	r9, #2
 8002da4:	2744      	movs	r7, #68	@ 0x44
 8002da6:	e7d2      	b.n	8002d4e <Set_LED_status+0x8a>
 8002da8:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002dac:	f04f 0902 	mov.w	r9, #2
 8002db0:	2746      	movs	r7, #70	@ 0x46
 8002db2:	e7cc      	b.n	8002d4e <Set_LED_status+0x8a>
 8002db4:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002db8:	f04f 0904 	mov.w	r9, #4
 8002dbc:	2746      	movs	r7, #70	@ 0x46
 8002dbe:	e7c6      	b.n	8002d4e <Set_LED_status+0x8a>
 8002dc0:	2748      	movs	r7, #72	@ 0x48
 8002dc2:	e79b      	b.n	8002cfc <Set_LED_status+0x38>
 8002dc4:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002dc8:	f04f 0902 	mov.w	r9, #2
 8002dcc:	2748      	movs	r7, #72	@ 0x48
 8002dce:	e7be      	b.n	8002d4e <Set_LED_status+0x8a>
 8002dd0:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002dd4:	f04f 0904 	mov.w	r9, #4
 8002dd8:	2748      	movs	r7, #72	@ 0x48
 8002dda:	e7b8      	b.n	8002d4e <Set_LED_status+0x8a>
 8002ddc:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002de0:	f04f 0902 	mov.w	r9, #2
 8002de4:	2742      	movs	r7, #66	@ 0x42
 8002de6:	e7b2      	b.n	8002d4e <Set_LED_status+0x8a>
 8002de8:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002dec:	f04f 0904 	mov.w	r9, #4
 8002df0:	2744      	movs	r7, #68	@ 0x44
 8002df2:	e7ac      	b.n	8002d4e <Set_LED_status+0x8a>
 8002df4:	2742      	movs	r7, #66	@ 0x42
 8002df6:	e781      	b.n	8002cfc <Set_LED_status+0x38>
 8002df8:	200014f4 	.word	0x200014f4
 8002dfc:	200014a0 	.word	0x200014a0

08002e00 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	4604      	mov	r4, r0
 8002e04:	b085      	sub	sp, #20
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8002e06:	7f00      	ldrb	r0, [r0, #28]
 8002e08:	f000 f95a 	bl	80030c0 <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8002e0c:	8827      	ldrh	r7, [r4, #0]
    txBuf[2] = LSB(value);
 8002e0e:	f88d 700a 	strb.w	r7, [sp, #10]
    uint8_t rxBuf[3] = {0};
 8002e12:	ae03      	add	r6, sp, #12
 8002e14:	2500      	movs	r5, #0
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e16:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002e18:	0a3b      	lsrs	r3, r7, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e1a:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002e1c:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002e20:	f88d 3009 	strb.w	r3, [sp, #9]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e24:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e26:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e28:	ab02      	add	r3, sp, #8
 8002e2a:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e2c:	f88d 5008 	strb.w	r5, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e30:	f000 f948 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8002e34:	8863      	ldrh	r3, [r4, #2]
    txBuf[2] = LSB(value);
 8002e36:	f88d 300a 	strb.w	r3, [sp, #10]
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002e3a:	f007 0710 	and.w	r7, r7, #16
 8002e3e:	82e7      	strh	r7, [r4, #22]
    txBuf[1] = MSB(value);
 8002e40:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e42:	9600      	str	r6, [sp, #0]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e44:	2204      	movs	r2, #4
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e46:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002e48:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002e4c:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e50:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e54:	ab02      	add	r3, sp, #8
 8002e56:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e58:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	f000 f932 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 8002e60:	88a3      	ldrh	r3, [r4, #4]
    txBuf[2] = LSB(value);
 8002e62:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e66:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002e68:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e6a:	2208      	movs	r2, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e6c:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002e6e:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002e72:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e76:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e7a:	ab02      	add	r3, sp, #8
 8002e7c:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e7e:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e80:	2203      	movs	r2, #3
 8002e82:	f000 f91f 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8002e86:	88e3      	ldrh	r3, [r4, #6]
    txBuf[2] = LSB(value);
 8002e88:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e8c:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002e8e:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e90:	220c      	movs	r2, #12
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e92:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002e94:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002e98:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e9c:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ea0:	ab02      	add	r3, sp, #8
 8002ea2:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002ea4:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f000 f90c 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 8002eac:	8923      	ldrh	r3, [r4, #8]
    txBuf[2] = LSB(value);
 8002eae:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002eb2:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002eb4:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002eb6:	222c      	movs	r2, #44	@ 0x2c
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002eb8:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002eba:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002ebe:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002ec2:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ec6:	ab02      	add	r3, sp, #8
 8002ec8:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002eca:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ecc:	2203      	movs	r2, #3
 8002ece:	f000 f8f9 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8002ed2:	8963      	ldrh	r3, [r4, #10]
    txBuf[2] = LSB(value);
 8002ed4:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ed8:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002eda:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002edc:	2230      	movs	r2, #48	@ 0x30
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ede:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002ee0:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002ee4:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002ee8:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002eec:	ab02      	add	r3, sp, #8
 8002eee:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002ef0:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f000 f8e6 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8002ef8:	89a3      	ldrh	r3, [r4, #12]
    txBuf[2] = LSB(value);
 8002efa:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002efe:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002f00:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f02:	2234      	movs	r2, #52	@ 0x34
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f04:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002f06:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002f0a:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f0e:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f12:	ab02      	add	r3, sp, #8
 8002f14:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f16:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f000 f8d3 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8002f1e:	89e3      	ldrh	r3, [r4, #14]
    txBuf[2] = LSB(value);
 8002f20:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f24:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002f26:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f28:	2238      	movs	r2, #56	@ 0x38
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f2a:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002f2c:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002f30:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f34:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f38:	ab02      	add	r3, sp, #8
 8002f3a:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f3c:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f3e:	2203      	movs	r2, #3
 8002f40:	f000 f8c0 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8002f44:	8a23      	ldrh	r3, [r4, #16]
    txBuf[2] = LSB(value);
 8002f46:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f4a:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002f4c:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f4e:	223c      	movs	r2, #60	@ 0x3c
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f50:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002f52:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002f56:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f5a:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f5e:	ab02      	add	r3, sp, #8
 8002f60:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f62:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f64:	2203      	movs	r2, #3
 8002f66:	f000 f8ad 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8002f6a:	8a63      	ldrh	r3, [r4, #18]
    txBuf[2] = LSB(value);
 8002f6c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f70:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002f72:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f74:	2240      	movs	r2, #64	@ 0x40
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f76:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002f78:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[1] = MSB(value);
 8002f7c:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f80:	f88d 2008 	strb.w	r2, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f84:	ab02      	add	r3, sp, #8
 8002f86:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f88:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f000 f89a 	bl	80030c4 <mcu_spiTransfer>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8002f90:	8aa7      	ldrh	r7, [r4, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f92:	9600      	str	r6, [sp, #0]
    txBuf[1] = MSB(value);
 8002f94:	0a3a      	lsrs	r2, r7, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f96:	2144      	movs	r1, #68	@ 0x44
    uint8_t rxBuf[3] = {0};
 8002f98:	f8ad 500c 	strh.w	r5, [sp, #12]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f9c:	f88d 1008 	strb.w	r1, [sp, #8]
    txBuf[1] = MSB(value);
 8002fa0:	f88d 2009 	strb.w	r2, [sp, #9]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002fa4:	7f61      	ldrb	r1, [r4, #29]
 8002fa6:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002fa8:	70b5      	strb	r5, [r6, #2]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002faa:	ab02      	add	r3, sp, #8
 8002fac:	2203      	movs	r2, #3
    txBuf[2] = LSB(value);
 8002fae:	f88d 700a 	strb.w	r7, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002fb2:	f000 f887 	bl	80030c4 <mcu_spiTransfer>

}
 8002fb6:	b005      	add	sp, #20
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8002fc0:	b500      	push	{lr}
 8002fc2:	b087      	sub	sp, #28
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002fc4:	aa04      	add	r2, sp, #16
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fc6:	9200      	str	r2, [sp, #0]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002fc8:	2100      	movs	r1, #0
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002fca:	f04f 0c15 	mov.w	ip, #21
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fce:	ab03      	add	r3, sp, #12
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002fd0:	9104      	str	r1, [sp, #16]
 8002fd2:	f8ad 1014 	strh.w	r1, [sp, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	7f41      	ldrb	r1, [r0, #29]
 8002fda:	7f00      	ldrb	r0, [r0, #28]
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002fdc:	f88d c00c 	strb.w	ip, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fe0:	f000 f870 	bl	80030c4 <mcu_spiTransfer>
        value = (value << 8) | rxBuf[i];
 8002fe4:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 8002fe8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8002fec:	ba5b      	rev16	r3, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
    float data;

    //Remove reserved bits
    value = value >> 4;
 8002ff4:	091a      	lsrs	r2, r3, #4
 8002ff6:	ee07 2a90 	vmov	s15, r2

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8002ffa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	bf24      	itt	cs
 8003004:	ed9f 7a10 	vldrcs	s14, [pc, #64]	@ 8003048 <INA229_getVBUS_V+0x88>
 8003008:	ee77 7ac7 	vsubcs.f32	s15, s15, s14
    {
        data = (float)value;
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 800300c:	ee17 0a90 	vmov	r0, s15
 8003010:	f7fd fa52 	bl	80004b8 <__aeabi_f2d>
 8003014:	a308      	add	r3, pc, #32	@ (adr r3, 8003038 <INA229_getVBUS_V+0x78>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f7fd faa5 	bl	8000568 <__aeabi_dmul>
 800301e:	a308      	add	r3, pc, #32	@ (adr r3, 8003040 <INA229_getVBUS_V+0x80>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fbca 	bl	80007bc <__aeabi_ddiv>
 8003028:	f7fd fcd8 	bl	80009dc <__aeabi_d2f>

    return data;
}
 800302c:	ee00 0a10 	vmov	s0, r0
 8003030:	b007      	add	sp, #28
 8003032:	f85d fb04 	ldr.w	pc, [sp], #4
 8003036:	bf00      	nop
 8003038:	00000000 	.word	0x00000000
 800303c:	40686a00 	.word	0x40686a00
 8003040:	00000000 	.word	0x00000000
 8003044:	412e8480 	.word	0x412e8480
 8003048:	49800000 	.word	0x49800000

0800304c <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 800304c:	b500      	push	{lr}
 800304e:	b087      	sub	sp, #28
    uint8_t rxBuf[6] = {0}; //max buffer size
 8003050:	aa04      	add	r2, sp, #16
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003052:	9200      	str	r2, [sp, #0]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8003054:	2100      	movs	r1, #0
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8003056:	f04f 0c19 	mov.w	ip, #25
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 800305a:	ab03      	add	r3, sp, #12
    uint8_t rxBuf[6] = {0}; //max buffer size
 800305c:	9104      	str	r1, [sp, #16]
 800305e:	f8ad 1014 	strh.w	r1, [sp, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003062:	2203      	movs	r2, #3
 8003064:	7f41      	ldrb	r1, [r0, #29]
 8003066:	7f00      	ldrb	r0, [r0, #28]
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8003068:	f88d c00c 	strb.w	ip, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 800306c:	f000 f82a 	bl	80030c4 <mcu_spiTransfer>
        value = (value << 8) | rxBuf[i];
 8003070:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 8003074:	ba5b      	rev16	r3, r3
 8003076:	b29a      	uxth	r2, r3
 8003078:	ee07 2a90 	vmov	s15, r2
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 800307c:	041b      	lsls	r3, r3, #16
    {
        data = (float)value - 0x10000; 
 800307e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003082:	bf44      	itt	mi
 8003084:	ed9f 7a0b 	vldrmi	s14, [pc, #44]	@ 80030b4 <INA229_getDIETEMP_C+0x68>
 8003088:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
    {
        data = (float)value;
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa12 	bl	80004b8 <__aeabi_f2d>
 8003094:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <INA229_getDIETEMP_C+0x6c>)
 8003096:	2200      	movs	r2, #0
 8003098:	f7fd fa66 	bl	8000568 <__aeabi_dmul>
 800309c:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <INA229_getDIETEMP_C+0x70>)
 800309e:	2200      	movs	r2, #0
 80030a0:	f7fd fb8c 	bl	80007bc <__aeabi_ddiv>
 80030a4:	f7fd fc9a 	bl	80009dc <__aeabi_d2f>

    return data;
}
 80030a8:	ee00 0a10 	vmov	s0, r0
 80030ac:	b007      	add	sp, #28
 80030ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b2:	bf00      	nop
 80030b4:	47800000 	.word	0x47800000
 80030b8:	401f4000 	.word	0x401f4000
 80030bc:	408f4000 	.word	0x408f4000

080030c0 <mcu_spiInit>:
    /* Add MCU specific init necessary for I2C to be used */




}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 80030c4:	4619      	mov	r1, r3
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable

    // Select the SPI handle based on the busId value
    if(busId == 0)
 80030c6:	b198      	cbz	r0, 80030f0 <mcu_spiTransfer+0x2c>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
    }
    else if(busId == 1)
 80030c8:	2801      	cmp	r0, #1
 80030ca:	d10f      	bne.n	80030ec <mcu_spiTransfer+0x28>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80030cc:	4809      	ldr	r0, [pc, #36]	@ (80030f4 <mcu_spiTransfer+0x30>)
{
 80030ce:	b500      	push	{lr}
 80030d0:	b083      	sub	sp, #12
        // Invalid bus id, return error
        return 1;
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	9a04      	ldr	r2, [sp, #16]
 80030dc:	f004 f9aa 	bl	8007434 <HAL_SPI_TransmitReceive>
 80030e0:	3800      	subs	r0, #0
 80030e2:	bf18      	it	ne
 80030e4:	2001      	movne	r0, #1
    {
        return 1; // SPI transaction failed
    }
    return 0; // Transaction successful
}
 80030e6:	b003      	add	sp, #12
 80030e8:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1;
 80030ec:	2001      	movs	r0, #1
}
 80030ee:	4770      	bx	lr
        hspi = &hspi1;  // Map busId 0 to SPI1
 80030f0:	4801      	ldr	r0, [pc, #4]	@ (80030f8 <mcu_spiTransfer+0x34>)
 80030f2:	e7ec      	b.n	80030ce <mcu_spiTransfer+0xa>
 80030f4:	200013f0 	.word	0x200013f0
 80030f8:	20001448 	.word	0x20001448

080030fc <LTC6811_init_reg_limits>:
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80030fc:	b190      	cbz	r0, 8003124 <LTC6811_init_reg_limits+0x28>
{
 80030fe:	b410      	push	{r4}
 8003100:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    {
        ic[cic].ic_reg.cell_channels = 12;
 8003104:	4c08      	ldr	r4, [pc, #32]	@ (8003128 <LTC6811_init_reg_limits+0x2c>)
 8003106:	eb01 0380 	add.w	r3, r1, r0, lsl #2
        ic[cic].ic_reg.stat_channels = 4;
        ic[cic].ic_reg.aux_channels = 6;
        ic[cic].ic_reg.num_cv_reg = 4;
        ic[cic].ic_reg.num_gpio_reg = 2;
 800310a:	f240 3202 	movw	r2, #770	@ 0x302
        ic[cic].ic_reg.cell_channels = 12;
 800310e:	f8c1 40e4 	str.w	r4, [r1, #228]	@ 0xe4
        ic[cic].ic_reg.num_gpio_reg = 2;
 8003112:	f8a1 20e8 	strh.w	r2, [r1, #232]	@ 0xe8
    for (cic = 0; cic < total_ic; cic++)
 8003116:	f501 7182 	add.w	r1, r1, #260	@ 0x104
 800311a:	4299      	cmp	r1, r3
 800311c:	d1f7      	bne.n	800310e <LTC6811_init_reg_limits+0x12>
        ic[cic].ic_reg.num_stat_reg = 3;
    }
}
 800311e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	0406040c 	.word	0x0406040c

0800312c <LTC6811_wrcfg>:
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
    LTC681x_wrcfg(total_ic, ic);
 800312c:	f000 b8da 	b.w	80032e4 <LTC681x_wrcfg>

08003130 <LTC6811_adcv>:
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
    LTC681x_adcv(MD, DCP, CH);
 8003130:	f000 b942 	b.w	80033b8 <LTC681x_adcv>

08003134 <LTC6811_rdcv>:
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
    int8_t pec_error = 0;
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 8003134:	f000 ba56 	b.w	80035e4 <LTC681x_rdcv>

08003138 <LTC6811_pollAdc>:
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
    return (LTC681x_pollAdc());
 8003138:	f000 bb38 	b.w	80037ac <LTC681x_pollAdc>

0800313c <LTC6811_reset_crc_count>:
/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
    LTC681x_reset_crc_count(total_ic, ic);
 800313c:	f000 bb58 	b.w	80037f0 <LTC681x_reset_crc_count>

08003140 <LTC6811_init_cfg>:
/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
    LTC681x_init_cfg(total_ic, ic);
 8003140:	f000 bb6a 	b.w	8003818 <LTC681x_init_cfg>

08003144 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8003144:	b410      	push	{r4}
 8003146:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800314a:	9404      	str	r4, [sp, #16]
{
 800314c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 8003150:	9405      	str	r4, [sp, #20]
}
 8003152:	f85d 4b04 	ldr.w	r4, [sp], #4
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 8003156:	f000 bbe9 	b.w	800392c <LTC681x_set_cfgr>
 800315a:	bf00      	nop

0800315c <wakeup_sleep>:
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
    int i;
    for (i = 0; i < total_ic; i++)
 800315c:	b180      	cbz	r0, 8003180 <wakeup_sleep+0x24>
{
 800315e:	b538      	push	{r3, r4, r5, lr}
 8003160:	4605      	mov	r5, r0
    for (i = 0; i < total_ic; i++)
 8003162:	2400      	movs	r4, #0
    {
        cs_low();
 8003164:	f000 fc8a 	bl	8003a7c <cs_low>
        delay_time_us(160);
 8003168:	20a0      	movs	r0, #160	@ 0xa0
 800316a:	f000 fcaf 	bl	8003acc <delay_time_us>
    for (i = 0; i < total_ic; i++)
 800316e:	3401      	adds	r4, #1
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 8003170:	f000 fc98 	bl	8003aa4 <cs_high>
        delay_time_us(18);
 8003174:	2012      	movs	r0, #18
 8003176:	f000 fca9 	bl	8003acc <delay_time_us>
    for (i = 0; i < total_ic; i++)
 800317a:	42ac      	cmp	r4, r5
 800317c:	d1f2      	bne.n	8003164 <wakeup_sleep+0x8>
//        HAL_Delay(2500);
    }
}
 800317e:	bd38      	pop	{r3, r4, r5, pc}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop

08003184 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8003184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const uint8_t BYTES_IN_REG = 6;
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8003188:	00c4      	lsls	r4, r0, #3
 800318a:	3404      	adds	r4, #4
 800318c:	b2e4      	uxtb	r4, r4
{
 800318e:	4606      	mov	r6, r0
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8003190:	4620      	mov	r0, r4
{
 8003192:	4688      	mov	r8, r1
 8003194:	4617      	mov	r7, r2
    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8003196:	f005 f96d 	bl	8008474 <malloc>
    cmd[0] = tx_cmd[0];
 800319a:	f898 3000 	ldrb.w	r3, [r8]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
        remainder = (remainder << 8) ^ crc15Table[addr];
 800319e:	4950      	ldr	r1, [pc, #320]	@ (80032e0 <write_68+0x15c>)
    cmd[1] = tx_cmd[1];
 80031a0:	f898 2001 	ldrb.w	r2, [r8, #1]
    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 80031a4:	4605      	mov	r5, r0
    cmd[0] = tx_cmd[0];
 80031a6:	2000      	movs	r0, #0
 80031a8:	f363 0007 	bfi	r0, r3, #0, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 80031ac:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 80031b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
    cmd[0] = tx_cmd[0];
 80031b4:	f362 200f 	bfi	r0, r2, #8, #8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80031b8:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4053      	eors	r3, r2
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80031c8:	005b      	lsls	r3, r3, #1
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80031ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cmd[0] = tx_cmd[0];
 80031ce:	f362 4017 	bfi	r0, r2, #16, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80031d2:	b29b      	uxth	r3, r3
    cmd[0] = tx_cmd[0];
 80031d4:	f363 601f 	bfi	r0, r3, #24, #8
 80031d8:	6028      	str	r0, [r5, #0]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d072      	beq.n	80032c4 <write_68+0x140>
 80031de:	1e73      	subs	r3, r6, #1
 80031e0:	1fba      	subs	r2, r7, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f04f 0e06 	mov.w	lr, #6
 80031e8:	fb1e 2e06 	smlabb	lr, lr, r6, r2
 80031ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80031f4:	ebae 0e43 	sub.w	lr, lr, r3, lsl #1
 80031f8:	eb07 0246 	add.w	r2, r7, r6, lsl #1
    cmd_index = 4;
 80031fc:	f04f 0c04 	mov.w	ip, #4
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8003200:	4613      	mov	r3, r2
            cmd_index = cmd_index + 1;
 8003202:	f10c 0a04 	add.w	sl, ip, #4
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8003206:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 800320a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800320e:	f813 9c05 	ldrb.w	r9, [r3, #-5]
 8003212:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8003216:	f852 7d06 	ldr.w	r7, [r2, #-6]!
 800321a:	f845 700c 	str.w	r7, [r5, ip]
            cmd_index = cmd_index + 1;
 800321e:	f10c 0305 	add.w	r3, ip, #5
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8003222:	b2db      	uxtb	r3, r3
 8003224:	fa5f fa8a 	uxtb.w	sl, sl
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8003228:	4572      	cmp	r2, lr
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 800322a:	f805 600a 	strb.w	r6, [r5, sl]
 800322e:	54e8      	strb	r0, [r5, r3]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003230:	b2fb      	uxtb	r3, r7
 8003232:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8003236:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800323a:	ea89 19d3 	eor.w	r9, r9, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800323e:	fa5f f989 	uxtb.w	r9, r9
 8003242:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003246:	f831 9029 	ldrh.w	r9, [r1, r9, lsl #2]
 800324a:	b29b      	uxth	r3, r3
 800324c:	ea83 0309 	eor.w	r3, r3, r9
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003250:	ea88 18d3 	eor.w	r8, r8, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003254:	fa5f f888 	uxtb.w	r8, r8
 8003258:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800325c:	f831 8028 	ldrh.w	r8, [r1, r8, lsl #2]
 8003260:	b29b      	uxth	r3, r3
 8003262:	ea83 0308 	eor.w	r3, r3, r8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003266:	f3c3 18c7 	ubfx	r8, r3, #7, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 800326a:	ea88 6717 	eor.w	r7, r8, r7, lsr #24
 800326e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003272:	f831 7027 	ldrh.w	r7, [r1, r7, lsl #2]
 8003276:	b29b      	uxth	r3, r3
 8003278:	ea83 0307 	eor.w	r3, r3, r7
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800327c:	ea86 16d3 	eor.w	r6, r6, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003280:	b2f6      	uxtb	r6, r6
 8003282:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003286:	f831 6026 	ldrh.w	r6, [r1, r6, lsl #2]
 800328a:	b29b      	uxth	r3, r3
 800328c:	ea83 0306 	eor.w	r3, r3, r6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003290:	ea80 10d3 	eor.w	r0, r0, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003294:	b2c0      	uxtb	r0, r0
            cmd_index = cmd_index + 1;
 8003296:	f10c 0706 	add.w	r7, ip, #6
        remainder = (remainder << 8) ^ crc15Table[addr];
 800329a:	f831 6020 	ldrh.w	r6, [r1, r0, lsl #2]
 800329e:	ea4f 2303 	mov.w	r3, r3, lsl #8
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80032a2:	b2f8      	uxtb	r0, r7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea83 0306 	eor.w	r3, r3, r6
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80032aa:	eb05 0600 	add.w	r6, r5, r0
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80032ae:	ea4f 0743 	mov.w	r7, r3, lsl #1
        cmd_index = cmd_index + 2;
 80032b2:	f10c 0c08 	add.w	ip, ip, #8
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80032b6:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80032ba:	542b      	strb	r3, [r5, r0]
        cmd_index = cmd_index + 2;
 80032bc:	fa5f fc8c 	uxtb.w	ip, ip
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80032c0:	7077      	strb	r7, [r6, #1]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80032c2:	d19d      	bne.n	8003200 <write_68+0x7c>
    cs_low();
 80032c4:	f000 fbda 	bl	8003a7c <cs_low>
    spi_write_array(CMD_LEN, cmd);
 80032c8:	4629      	mov	r1, r5
 80032ca:	4620      	mov	r0, r4
 80032cc:	f000 fc08 	bl	8003ae0 <spi_write_array>
    cs_high();
 80032d0:	f000 fbe8 	bl	8003aa4 <cs_high>
    free(cmd);
 80032d4:	4628      	mov	r0, r5
}
 80032d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    free(cmd);
 80032da:	f005 b8d3 	b.w	8008484 <free>
 80032de:	bf00      	nop
 80032e0:	080094bc 	.word	0x080094bc

080032e4 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 80032e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e8:	b0c3      	sub	sp, #268	@ 0x10c
    uint8_t cmd[2] = { 0x00, 0x01 };
 80032ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ee:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t write_count = 0;
    uint8_t c_ic = 0;
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80032f2:	aa02      	add	r2, sp, #8
 80032f4:	b378      	cbz	r0, 8003356 <LTC681x_wrcfg+0x72>
    {
        if (ic->isospi_reverse == false)
 80032f6:	f891 50c5 	ldrb.w	r5, [r1, #197]	@ 0xc5
 80032fa:	b395      	cbz	r5, 8003362 <LTC681x_wrcfg+0x7e>
 80032fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8003300:	fa5f fc8c 	uxtb.w	ip, ip
    uint8_t write_count = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	aa02      	add	r2, sp, #8
            c_ic = total_ic - current_ic - 1;
        }

        for (data = 0; data < 6; data++)
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003308:	eb0c 178c 	add.w	r7, ip, ip, lsl #6
 800330c:	eb01 0e87 	add.w	lr, r1, r7, lsl #2
            write_count++;
 8003310:	1c9c      	adds	r4, r3, #2
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003312:	b2e4      	uxtb	r4, r4
 8003314:	f831 8027 	ldrh.w	r8, [r1, r7, lsl #2]
 8003318:	f89e 7002 	ldrb.w	r7, [lr, #2]
 800331c:	f822 8003 	strh.w	r8, [r2, r3]
            write_count++;
 8003320:	1cde      	adds	r6, r3, #3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003322:	5517      	strb	r7, [r2, r4]
            write_count++;
 8003324:	1d1d      	adds	r5, r3, #4
 8003326:	1d5c      	adds	r4, r3, #5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003328:	f10c 3cff 	add.w	ip, ip, #4294967295
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800332c:	b2f6      	uxtb	r6, r6
 800332e:	b2ed      	uxtb	r5, r5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003330:	fa5f fc8c 	uxtb.w	ip, ip
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003334:	b2e4      	uxtb	r4, r4
 8003336:	f89e 9003 	ldrb.w	r9, [lr, #3]
 800333a:	f89e 8004 	ldrb.w	r8, [lr, #4]
 800333e:	f89e 7005 	ldrb.w	r7, [lr, #5]
 8003342:	f802 9006 	strb.w	r9, [r2, r6]
            write_count++;
 8003346:	3306      	adds	r3, #6
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003348:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800334c:	f802 8005 	strb.w	r8, [r2, r5]
            write_count++;
 8003350:	b2db      	uxtb	r3, r3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003352:	5517      	strb	r7, [r2, r4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003354:	d1d8      	bne.n	8003308 <LTC681x_wrcfg+0x24>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8003356:	a901      	add	r1, sp, #4
 8003358:	f7ff ff14 	bl	8003184 <write_68>
}
 800335c:	b043      	add	sp, #268	@ 0x10c
 800335e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003362:	eb00 1780 	add.w	r7, r0, r0, lsl #6
 8003366:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800336a:	aa02      	add	r2, sp, #8
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800336c:	880b      	ldrh	r3, [r1, #0]
 800336e:	5353      	strh	r3, [r2, r5]
            write_count++;
 8003370:	1cac      	adds	r4, r5, #2
 8003372:	f105 0e03 	add.w	lr, r5, #3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003376:	b2e4      	uxtb	r4, r4
 8003378:	fa5f fe8e 	uxtb.w	lr, lr
 800337c:	78ce      	ldrb	r6, [r1, #3]
 800337e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8003382:	f802 8004 	strb.w	r8, [r2, r4]
            write_count++;
 8003386:	f105 0c04 	add.w	ip, r5, #4
 800338a:	1d6b      	adds	r3, r5, #5
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800338c:	f802 600e 	strb.w	r6, [r2, lr]
 8003390:	794c      	ldrb	r4, [r1, #5]
 8003392:	790e      	ldrb	r6, [r1, #4]
 8003394:	fa5f fc8c 	uxtb.w	ip, ip
 8003398:	b2db      	uxtb	r3, r3
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800339a:	f501 7182 	add.w	r1, r1, #260	@ 0x104
            write_count++;
 800339e:	3506      	adds	r5, #6
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80033a0:	42b9      	cmp	r1, r7
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80033a2:	f802 600c 	strb.w	r6, [r2, ip]
            write_count++;
 80033a6:	b2ed      	uxtb	r5, r5
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80033a8:	54d4      	strb	r4, [r2, r3]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80033aa:	d1df      	bne.n	800336c <LTC681x_wrcfg+0x88>
    write_68(total_ic, cmd, write_buffer);
 80033ac:	a901      	add	r1, sp, #4
 80033ae:	f7ff fee9 	bl	8003184 <write_68>
}
 80033b2:	b043      	add	sp, #268	@ 0x10c
 80033b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080033b8 <LTC681x_adcv>:
        )
{
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 80033b8:	f3c0 0c40 	ubfx	ip, r0, #1, #1
{
 80033bc:	b510      	push	{r4, lr}
    cmd[0] = md_bits + 0x02;
 80033be:	f10c 0c02 	add.w	ip, ip, #2
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033c2:	4c16      	ldr	r4, [pc, #88]	@ (800341c <LTC681x_adcv+0x64>)
    md_bits = (MD & 0x01) << 7;
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80033c4:	3260      	adds	r2, #96	@ 0x60
 80033c6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033ca:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80033ce:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80033d2:	b2d2      	uxtb	r2, r2
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033d4:	f481 5180 	eor.w	r1, r1, #4096	@ 0x1000
 80033d8:	020b      	lsls	r3, r1, #8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80033da:	ea82 11d1 	eor.w	r1, r2, r1, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033de:	b2c9      	uxtb	r1, r1
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f834 1021 	ldrh.w	r1, [r4, r1, lsl #2]
 80033e6:	404b      	eors	r3, r1
    cmd[0] = tx_cmd[0];
 80033e8:	2100      	movs	r1, #0
 80033ea:	f36c 0107 	bfi	r1, ip, #0, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033ee:	005b      	lsls	r3, r3, #1
    cmd[0] = tx_cmd[0];
 80033f0:	f362 210f 	bfi	r1, r2, #8, #8
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80033f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
{
 80033f8:	b082      	sub	sp, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033fa:	b29b      	uxth	r3, r3
    cmd[0] = tx_cmd[0];
 80033fc:	f362 4117 	bfi	r1, r2, #16, #8
 8003400:	f363 611f 	bfi	r1, r3, #24, #8
 8003404:	9101      	str	r1, [sp, #4]
    cs_low();
 8003406:	f000 fb39 	bl	8003a7c <cs_low>
    spi_write_array(4, cmd);
 800340a:	2004      	movs	r0, #4
 800340c:	eb0d 0100 	add.w	r1, sp, r0
 8003410:	f000 fb66 	bl	8003ae0 <spi_write_array>
    cs_high();
 8003414:	f000 fb46 	bl	8003aa4 <cs_high>

    cmd_68(cmd);
}
 8003418:	b002      	add	sp, #8
 800341a:	bd10      	pop	{r4, pc}
 800341c:	080094bc 	.word	0x080094bc

08003420 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8003420:	b530      	push	{r4, r5, lr}
 8003422:	f100 3cff 	add.w	ip, r0, #4294967295
 8003426:	b083      	sub	sp, #12
 8003428:	460d      	mov	r5, r1
 800342a:	4614      	mov	r4, r2
 800342c:	f1bc 0f05 	cmp.w	ip, #5
 8003430:	d83d      	bhi.n	80034ae <LTC681x_rdcv_reg+0x8e>
 8003432:	e8df f00c 	tbb	[pc, ip]
 8003436:	211a      	.short	0x211a
 8003438:	03352f28 	.word	0x03352f28
        cmd[0] = 0x00;
    }
    else if (reg == 6) //4: RDCVF
    {
        cmd[1] = 0x0B;
        cmd[0] = 0x00;
 800343c:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8003440:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003444:	2036      	movs	r0, #54	@ 0x36
 8003446:	2348      	movs	r3, #72	@ 0x48
    }

    cmd_pec = pec15_calc(2, cmd);
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003448:	f88d 3006 	strb.w	r3, [sp, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 800344c:	f88d 0007 	strb.w	r0, [sp, #7]

    cs_low();
 8003450:	f000 fb14 	bl	8003a7c <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003454:	2104      	movs	r1, #4
 8003456:	00eb      	lsls	r3, r5, #3
 8003458:	4622      	mov	r2, r4
 800345a:	eb0d 0001 	add.w	r0, sp, r1
 800345e:	f000 fb59 	bl	8003b14 <spi_write_read>
    cs_high();
 8003462:	f000 fb1f 	bl	8003aa4 <cs_high>
}
 8003466:	b003      	add	sp, #12
 8003468:	bd30      	pop	{r4, r5, pc}
        cmd[0] = 0x00;
 800346a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800346e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003472:	20c2      	movs	r0, #194	@ 0xc2
 8003474:	2307      	movs	r3, #7
 8003476:	e7e7      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
        cmd[0] = 0x00;
 8003478:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800347c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003480:	2094      	movs	r0, #148	@ 0x94
 8003482:	239a      	movs	r3, #154	@ 0x9a
 8003484:	e7e0      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
        cmd[0] = 0x00;
 8003486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800348a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800348e:	2052      	movs	r0, #82	@ 0x52
 8003490:	235e      	movs	r3, #94	@ 0x5e
 8003492:	e7d9      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
        cmd[0] = 0x00;
 8003494:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003498:	f8ad 3004 	strh.w	r3, [sp, #4]
 800349c:	23c3      	movs	r3, #195	@ 0xc3
 800349e:	e7d3      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
        cmd[0] = 0x00;
 80034a0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80034a4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80034a8:	2060      	movs	r0, #96	@ 0x60
 80034aa:	23d5      	movs	r3, #213	@ 0xd5
 80034ac:	e7cc      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034ae:	490b      	ldr	r1, [pc, #44]	@ (80034dc <LTC681x_rdcv_reg+0xbc>)
 80034b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034b8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80034bc:	f482 5280 	eor.w	r2, r2, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034c0:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034ca:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80034ce:	0058      	lsls	r0, r3, #1
    cmd[3] = (uint8_t) (cmd_pec);
 80034d0:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80034d4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80034d8:	e7b6      	b.n	8003448 <LTC681x_rdcv_reg+0x28>
 80034da:	bf00      	nop
 80034dc:	080094bc 	.word	0x080094bc

080034e0 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint8_t CELL_IN_REG = 3;
    int8_t pec_error = 0;
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 80034e2:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80034e6:	fa5f fc8c 	uxtb.w	ip, ip

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 80034ea:	eb02 040c 	add.w	r4, r2, ip
        parsed_cell = cell_data[data_counter]
 80034ee:	f812 500c 	ldrb.w	r5, [r2, ip]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 80034f2:	7864      	ldrb	r4, [r4, #1]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034f4:	3901      	subs	r1, #1
        parsed_cell = cell_data[data_counter]
 80034f6:	eb05 2504 	add.w	r5, r5, r4, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034fa:	eb01 0441 	add.w	r4, r1, r1, lsl #1
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034fe:	f04f 0e01 	mov.w	lr, #1
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003502:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003506:	f10c 0502 	add.w	r5, ip, #2
        parsed_cell = cell_data[data_counter]
 800350a:	b2ed      	uxtb	r5, r5
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 800350c:	1956      	adds	r6, r2, r5
        parsed_cell = cell_data[data_counter]
 800350e:	5d55      	ldrb	r5, [r2, r5]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8003510:	7876      	ldrb	r6, [r6, #1]
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003512:	3401      	adds	r4, #1
        parsed_cell = cell_data[data_counter]
 8003514:	eb05 2506 	add.w	r5, r5, r6, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003518:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
 800351c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003520:	f10c 0404 	add.w	r4, ip, #4
        parsed_cell = cell_data[data_counter]
 8003524:	b2e4      	uxtb	r4, r4
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8003526:	1915      	adds	r5, r2, r4
        parsed_cell = cell_data[data_counter]
 8003528:	5d14      	ldrb	r4, [r2, r4]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 800352a:	786d      	ldrb	r5, [r5, #1]
        parsed_cell = cell_data[data_counter]
 800352c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003530:	805c      	strh	r4, [r3, #2]
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003532:	2508      	movs	r5, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003534:	4c2a      	ldr	r4, [pc, #168]	@ (80035e0 <parse_cells+0x100>)
 8003536:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800353a:	fb15 e600 	smlabb	r6, r5, r0, lr
        remainder = (remainder << 8) ^ crc15Table[addr];
 800353e:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003542:	5d97      	ldrb	r7, [r2, r6]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003544:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003548:	ea87 17d3 	eor.w	r7, r7, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800354c:	b2ff      	uxtb	r7, r7
 800354e:	fa03 f605 	lsl.w	r6, r3, r5
 8003552:	f834 3027 	ldrh.w	r3, [r4, r7, lsl #2]
 8003556:	b2b6      	uxth	r6, r6
 8003558:	4073      	eors	r3, r6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800355a:	fb05 2600 	mla	r6, r5, r0, r2
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800355e:	f10c 0c06 	add.w	ip, ip, #6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003562:	78b7      	ldrb	r7, [r6, #2]
 8003564:	ea87 17d3 	eor.w	r7, r7, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003568:	b2ff      	uxtb	r7, r7
 800356a:	fa03 f605 	lsl.w	r6, r3, r5
 800356e:	f834 3027 	ldrh.w	r3, [r4, r7, lsl #2]
 8003572:	b2b6      	uxth	r6, r6
 8003574:	4073      	eors	r3, r6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003576:	fb05 2600 	mla	r6, r5, r0, r2
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800357a:	fa5f fc8c 	uxtb.w	ip, ip
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800357e:	78f6      	ldrb	r6, [r6, #3]
 8003580:	ea86 16d3 	eor.w	r6, r6, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003584:	b2f6      	uxtb	r6, r6
 8003586:	40ab      	lsls	r3, r5
 8003588:	f834 6026 	ldrh.w	r6, [r4, r6, lsl #2]
 800358c:	b29b      	uxth	r3, r3
 800358e:	4073      	eors	r3, r6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003590:	fb05 2600 	mla	r6, r5, r0, r2
 8003594:	7935      	ldrb	r5, [r6, #4]
 8003596:	7970      	ldrb	r0, [r6, #5]
 8003598:	ea85 15d3 	eor.w	r5, r5, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800359c:	b2ed      	uxtb	r5, r5
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	f834 5025 	ldrh.w	r5, [r4, r5, lsl #2]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	406b      	eors	r3, r5
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80035a8:	ea80 10d3 	eor.w	r0, r0, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80035ac:	b2c0      	uxtb	r0, r0
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	f834 0020 	ldrh.w	r0, [r4, r0, lsl #2]
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80035b4:	eb02 040c 	add.w	r4, r2, ip
        remainder = (remainder << 8) ^ crc15Table[addr];
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4043      	eors	r3, r0
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80035bc:	f812 000c 	ldrb.w	r0, [r2, ip]
 80035c0:	7862      	ldrb	r2, [r4, #1]
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80035c2:	fa03 f30e 	lsl.w	r3, r3, lr

    if (received_pec != data_pec)
 80035c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	429a      	cmp	r2, r3
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
        ic_pec[cell_reg - 1] = 1;
 80035ce:	9b05      	ldr	r3, [sp, #20]
    if (received_pec != data_pec)
 80035d0:	bf08      	it	eq
 80035d2:	f04f 0e00 	moveq.w	lr, #0
        ic_pec[cell_reg - 1] = 1;
 80035d6:	f803 e001 	strb.w	lr, [r3, r1]
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 80035da:	4670      	mov	r0, lr
        ic_pec[cell_reg - 1] = 0;
    }
    data_counter = data_counter + 2;

    return (pec_error);
}
 80035dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035de:	bf00      	nop
 80035e0:	080094bc 	.word	0x080094bc

080035e4 <LTC681x_rdcv>:
{
 80035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	b083      	sub	sp, #12
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80035ec:	00c8      	lsls	r0, r1, #3
{
 80035ee:	468b      	mov	fp, r1
 80035f0:	4615      	mov	r5, r2
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80035f2:	f004 ff3f 	bl	8008474 <malloc>
 80035f6:	4680      	mov	r8, r0
    if (reg == 0)
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	f040 80a5 	bne.w	8003748 <LTC681x_rdcv+0x164>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80035fe:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 8003602:	4692      	mov	sl, r2
 8003604:	2a00      	cmp	r2, #0
 8003606:	d03e      	beq.n	8003686 <LTC681x_rdcv+0xa2>
                    c_ic = total_ic - current_ic - 1;
 8003608:	f10b 39ff 	add.w	r9, fp, #4294967295
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800360c:	2701      	movs	r7, #1
                    c_ic = total_ic - current_ic - 1;
 800360e:	46ca      	mov	sl, r9
 8003610:	46b9      	mov	r9, r7
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8003612:	4642      	mov	r2, r8
 8003614:	4659      	mov	r1, fp
 8003616:	4648      	mov	r0, r9
 8003618:	f7ff ff02 	bl	8003420 <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 800361c:	f1bb 0f00 	cmp.w	fp, #0
 8003620:	d027      	beq.n	8003672 <LTC681x_rdcv+0x8e>
 8003622:	2700      	movs	r7, #0
 8003624:	e00c      	b.n	8003640 <LTC681x_rdcv+0x5c>
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003626:	f106 0342 	add.w	r3, r6, #66	@ 0x42
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f106 031e 	add.w	r3, r6, #30
 8003630:	f7ff ff56 	bl	80034e0 <parse_cells>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003634:	3701      	adds	r7, #1
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003636:	4420      	add	r0, r4
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003638:	45bb      	cmp	fp, r7
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800363a:	b2c3      	uxtb	r3, r0
 800363c:	b244      	sxtb	r4, r0
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 800363e:	d019      	beq.n	8003674 <LTC681x_rdcv+0x90>
                    c_ic = total_ic - current_ic - 1;
 8003640:	b2f8      	uxtb	r0, r7
 8003642:	ebaa 0600 	sub.w	r6, sl, r0
                                                    &ic[c_ic].cells.c_codes[0],
 8003646:	eb07 1387 	add.w	r3, r7, r7, lsl #6
 800364a:	b2f6      	uxtb	r6, r6
                if (ic->isospi_reverse == false)
 800364c:	f895 c0c5 	ldrb.w	ip, [r5, #197]	@ 0xc5
                                                    &ic[c_ic].cells.c_codes[0],
 8003650:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003654:	eb06 1686 	add.w	r6, r6, r6, lsl #6
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003658:	f103 0e42 	add.w	lr, r3, #66	@ 0x42
 800365c:	4642      	mov	r2, r8
 800365e:	4649      	mov	r1, r9
 8003660:	331e      	adds	r3, #30
                                                    &ic[c_ic].cells.c_codes[0],
 8003662:	eb05 0686 	add.w	r6, r5, r6, lsl #2
                if (ic->isospi_reverse == false)
 8003666:	f1bc 0f00 	cmp.w	ip, #0
 800366a:	d1dc      	bne.n	8003626 <LTC681x_rdcv+0x42>
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800366c:	f8cd e000 	str.w	lr, [sp]
 8003670:	e7de      	b.n	8003630 <LTC681x_rdcv+0x4c>
    return (pec_error);
 8003672:	b2e3      	uxtb	r3, r4
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003674:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 8003678:	f109 0901 	add.w	r9, r9, #1
 800367c:	fa5f f989 	uxtb.w	r9, r9
 8003680:	454a      	cmp	r2, r9
 8003682:	d2c6      	bcs.n	8003612 <LTC681x_rdcv+0x2e>
 8003684:	469a      	mov	sl, r3
                    ic[current_ic].crc_count.cfgr_pec
                            + ic[current_ic].configb.rx_pec_match;
        }
        break;
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003686:	f1bb 0f00 	cmp.w	fp, #0
 800368a:	d04d      	beq.n	8003728 <LTC681x_rdcv+0x144>
 800368c:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
 8003690:	eb05 008b 	add.w	r0, r5, fp, lsl #2
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003694:	2a00      	cmp	r2, #0
 8003696:	d04e      	beq.n	8003736 <LTC681x_rdcv+0x152>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
                                + ic[current_ic].cells.pec_match[i];
 8003698:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
                                + ic[current_ic].cells.pec_match[i];
 800369c:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	@ 0xca
                                + ic[current_ic].cells.pec_match[i];
 80036a0:	f8b5 40c6 	ldrh.w	r4, [r5, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 80036a4:	4419      	add	r1, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036a6:	2a01      	cmp	r2, #1
                                + ic[current_ic].cells.pec_match[i];
 80036a8:	4423      	add	r3, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036aa:	f8a5 10ca 	strh.w	r1, [r5, #202]	@ 0xca
                                + ic[current_ic].cells.pec_match[i];
 80036ae:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036b0:	d034      	beq.n	800371c <LTC681x_rdcv+0x138>
                                + ic[current_ic].cells.pec_match[i];
 80036b2:	f895 1043 	ldrb.w	r1, [r5, #67]	@ 0x43
                                + ic[current_ic].cells.pec_match[i];
 80036b6:	f8b5 40cc 	ldrh.w	r4, [r5, #204]	@ 0xcc
                                + ic[current_ic].cells.pec_match[i];
 80036ba:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036bc:	2a02      	cmp	r2, #2
                                + ic[current_ic].cells.pec_match[i];
 80036be:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036c0:	f8a5 10cc 	strh.w	r1, [r5, #204]	@ 0xcc
                                + ic[current_ic].cells.pec_match[i];
 80036c4:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036c6:	d029      	beq.n	800371c <LTC681x_rdcv+0x138>
                                + ic[current_ic].cells.pec_match[i];
 80036c8:	f895 1044 	ldrb.w	r1, [r5, #68]	@ 0x44
                                + ic[current_ic].cells.pec_match[i];
 80036cc:	f8b5 40ce 	ldrh.w	r4, [r5, #206]	@ 0xce
                                + ic[current_ic].cells.pec_match[i];
 80036d0:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036d2:	2a03      	cmp	r2, #3
                                + ic[current_ic].cells.pec_match[i];
 80036d4:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036d6:	f8a5 10ce 	strh.w	r1, [r5, #206]	@ 0xce
                                + ic[current_ic].cells.pec_match[i];
 80036da:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036dc:	d01e      	beq.n	800371c <LTC681x_rdcv+0x138>
                                + ic[current_ic].cells.pec_match[i];
 80036de:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
                                + ic[current_ic].cells.pec_match[i];
 80036e2:	f8b5 40d0 	ldrh.w	r4, [r5, #208]	@ 0xd0
                                + ic[current_ic].cells.pec_match[i];
 80036e6:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036e8:	2a04      	cmp	r2, #4
                                + ic[current_ic].cells.pec_match[i];
 80036ea:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036ec:	f8a5 10d0 	strh.w	r1, [r5, #208]	@ 0xd0
                                + ic[current_ic].cells.pec_match[i];
 80036f0:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036f2:	d013      	beq.n	800371c <LTC681x_rdcv+0x138>
                                + ic[current_ic].cells.pec_match[i];
 80036f4:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
                                + ic[current_ic].cells.pec_match[i];
 80036f8:	f8b5 40d2 	ldrh.w	r4, [r5, #210]	@ 0xd2
                                + ic[current_ic].cells.pec_match[i];
 80036fc:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036fe:	2a05      	cmp	r2, #5
                                + ic[current_ic].cells.pec_match[i];
 8003700:	4421      	add	r1, r4
                                + ic[current_ic].cells.pec_match[i];
 8003702:	b29b      	uxth	r3, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8003704:	f8a5 10d2 	strh.w	r1, [r5, #210]	@ 0xd2
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003708:	d008      	beq.n	800371c <LTC681x_rdcv+0x138>
                                + ic[current_ic].cells.pec_match[i];
 800370a:	f895 1047 	ldrb.w	r1, [r5, #71]	@ 0x47
                                + ic[current_ic].cells.pec_match[i];
 800370e:	f8b5 40d4 	ldrh.w	r4, [r5, #212]	@ 0xd4
                                + ic[current_ic].cells.pec_match[i];
 8003712:	440b      	add	r3, r1
                                + ic[current_ic].cells.pec_match[i];
 8003714:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 8003716:	f8a5 10d4 	strh.w	r1, [r5, #212]	@ 0xd4
                                + ic[current_ic].cells.pec_match[i];
 800371a:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 800371c:	f8a5 30c6 	strh.w	r3, [r5, #198]	@ 0xc6
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003720:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 8003724:	4285      	cmp	r5, r0
 8003726:	d1b7      	bne.n	8003698 <LTC681x_rdcv+0xb4>
    free(cell_data);
 8003728:	4640      	mov	r0, r8
 800372a:	f004 feab 	bl	8008484 <free>
}
 800372e:	4650      	mov	r0, sl
 8003730:	b003      	add	sp, #12
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003736:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 800373a:	4285      	cmp	r5, r0
 800373c:	d0f4      	beq.n	8003728 <LTC681x_rdcv+0x144>
 800373e:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 8003742:	4285      	cmp	r5, r0
 8003744:	d1f7      	bne.n	8003736 <LTC681x_rdcv+0x152>
 8003746:	e7ef      	b.n	8003728 <LTC681x_rdcv+0x144>
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8003748:	4602      	mov	r2, r0
 800374a:	4659      	mov	r1, fp
 800374c:	4620      	mov	r0, r4
 800374e:	f7ff fe67 	bl	8003420 <LTC681x_rdcv_reg>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003752:	f1bb 0f00 	cmp.w	fp, #0
 8003756:	d027      	beq.n	80037a8 <LTC681x_rdcv+0x1c4>
 8003758:	2700      	movs	r7, #0
    int8_t pec_error = 0;
 800375a:	463e      	mov	r6, r7
                c_ic = total_ic - current_ic - 1;
 800375c:	f10b 39ff 	add.w	r9, fp, #4294967295
 8003760:	e014      	b.n	800378c <LTC681x_rdcv+0x1a8>
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8003762:	461a      	mov	r2, r3
                                  &ic[c_ic].cells.c_codes[0],
 8003764:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8003768:	eb05 0383 	add.w	r3, r5, r3, lsl #2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 800376c:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 8003770:	9100      	str	r1, [sp, #0]
 8003772:	331e      	adds	r3, #30
 8003774:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8003778:	4621      	mov	r1, r4
 800377a:	f7ff feb1 	bl	80034e0 <parse_cells>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800377e:	3701      	adds	r7, #1
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8003780:	4430      	add	r0, r6
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003782:	45bb      	cmp	fp, r7
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8003784:	fa5f fa80 	uxtb.w	sl, r0
            pec_error = pec_error
 8003788:	b246      	sxtb	r6, r0
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800378a:	d00a      	beq.n	80037a2 <LTC681x_rdcv+0x1be>
                c_ic = total_ic - current_ic - 1;
 800378c:	b2f8      	uxtb	r0, r7
            if (ic->isospi_reverse == false)
 800378e:	f895 20c5 	ldrb.w	r2, [r5, #197]	@ 0xc5
                c_ic = total_ic - current_ic - 1;
 8003792:	eba9 0300 	sub.w	r3, r9, r0
 8003796:	b2db      	uxtb	r3, r3
            if (ic->isospi_reverse == false)
 8003798:	2a00      	cmp	r2, #0
 800379a:	d1e2      	bne.n	8003762 <LTC681x_rdcv+0x17e>
 800379c:	463a      	mov	r2, r7
                c_ic = current_ic;
 800379e:	4603      	mov	r3, r0
 80037a0:	e7e0      	b.n	8003764 <LTC681x_rdcv+0x180>
 80037a2:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 80037a6:	e771      	b.n	800368c <LTC681x_rdcv+0xa8>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037a8:	46da      	mov	sl, fp
 80037aa:	e7bd      	b.n	8003728 <LTC681x_rdcv+0x144>

080037ac <LTC681x_pollAdc>:
{
 80037ac:	b510      	push	{r4, lr}
 80037ae:	b082      	sub	sp, #8
    cmd[0] = 0x07;
 80037b0:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <LTC681x_pollAdc+0x40>)
 80037b2:	9301      	str	r3, [sp, #4]
    cs_low();
 80037b4:	f000 f962 	bl	8003a7c <cs_low>
    spi_write_array(4, cmd);
 80037b8:	2004      	movs	r0, #4
 80037ba:	eb0d 0100 	add.w	r1, sp, r0
 80037be:	f000 f98f 	bl	8003ae0 <spi_write_array>
 80037c2:	f649 4440 	movw	r4, #40000	@ 0x9c40
        current_time = spi_read_byte(0xFF);
 80037c6:	20ff      	movs	r0, #255	@ 0xff
 80037c8:	f000 f9cc 	bl	8003b64 <spi_read_byte>
        if (current_time > 0)
 80037cc:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80037d0:	d005      	beq.n	80037de <LTC681x_pollAdc+0x32>
    return ((uint32_t)current_time);
 80037d2:	4604      	mov	r4, r0
    cs_high();
 80037d4:	f000 f966 	bl	8003aa4 <cs_high>
}
 80037d8:	4620      	mov	r0, r4
 80037da:	b002      	add	sp, #8
 80037dc:	bd10      	pop	{r4, pc}
    while ((counter < 400000) && (finished == 0))
 80037de:	3c01      	subs	r4, #1
 80037e0:	d1f1      	bne.n	80037c6 <LTC681x_pollAdc+0x1a>
    cs_high();
 80037e2:	f000 f95f 	bl	8003aa4 <cs_high>
}
 80037e6:	4620      	mov	r0, r4
 80037e8:	b002      	add	sp, #8
 80037ea:	bd10      	pop	{r4, pc}
 80037ec:	6cf31407 	.word	0x6cf31407

080037f0 <LTC681x_reset_crc_count>:
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037f0:	b188      	cbz	r0, 8003816 <LTC681x_reset_crc_count+0x26>
 80037f2:	f101 03c6 	add.w	r3, r1, #198	@ 0xc6
 80037f6:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 80037fa:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    {
        ic[current_ic].crc_count.pec_count = 0;
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]
 8003806:	615a      	str	r2, [r3, #20]
 8003808:	619a      	str	r2, [r3, #24]
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800380e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003812:	428b      	cmp	r3, r1
 8003814:	d1f4      	bne.n	8003800 <LTC681x_reset_crc_count+0x10>
        for (i = 0; i < 2; i++)
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
        }
    }
}
 8003816:	4770      	bx	lr

08003818 <LTC681x_init_cfg>:
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003818:	b160      	cbz	r0, 8003834 <LTC681x_init_cfg+0x1c>
 800381a:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800381e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
    {
        for (j = 0; j < 6; j++)
        {
            ic[current_ic].config.tx_data[j] = 0;
 8003822:	2300      	movs	r3, #0
        }
        ic[current_ic].isospi_reverse = 0;
 8003824:	f881 30c5 	strb.w	r3, [r1, #197]	@ 0xc5
            ic[current_ic].config.tx_data[j] = 0;
 8003828:	600b      	str	r3, [r1, #0]
 800382a:	808b      	strh	r3, [r1, #4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800382c:	f501 7182 	add.w	r1, r1, #260	@ 0x104
 8003830:	428a      	cmp	r2, r1
 8003832:	d1f7      	bne.n	8003824 <LTC681x_init_cfg+0xc>
    }
}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop

08003838 <LTC681x_set_cfgr_dis>:
    for (i = 0; i < 8; i++)
    {
        if (dcc[i])
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8003838:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800383c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        if (dcc[i])
 8003840:	7810      	ldrb	r0, [r2, #0]
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003842:	790b      	ldrb	r3, [r1, #4]
        if (dcc[i])
 8003844:	2800      	cmp	r0, #0
 8003846:	d15e      	bne.n	8003906 <LTC681x_set_cfgr_dis+0xce>
                    & (~(0x01 << i));
 8003848:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 800384c:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 800384e:	7850      	ldrb	r0, [r2, #1]
 8003850:	2800      	cmp	r0, #0
 8003852:	d155      	bne.n	8003900 <LTC681x_set_cfgr_dis+0xc8>
                    & (~(0x01 << i));
 8003854:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003858:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 800385a:	7890      	ldrb	r0, [r2, #2]
 800385c:	2800      	cmp	r0, #0
 800385e:	d14c      	bne.n	80038fa <LTC681x_set_cfgr_dis+0xc2>
                    & (~(0x01 << i));
 8003860:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003864:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 8003866:	78d0      	ldrb	r0, [r2, #3]
 8003868:	2800      	cmp	r0, #0
 800386a:	d143      	bne.n	80038f4 <LTC681x_set_cfgr_dis+0xbc>
                    & (~(0x01 << i));
 800386c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003870:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 8003872:	7910      	ldrb	r0, [r2, #4]
 8003874:	2800      	cmp	r0, #0
 8003876:	d13a      	bne.n	80038ee <LTC681x_set_cfgr_dis+0xb6>
                    & (~(0x01 << i));
 8003878:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 800387c:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 800387e:	7950      	ldrb	r0, [r2, #5]
 8003880:	bb90      	cbnz	r0, 80038e8 <LTC681x_set_cfgr_dis+0xb0>
                    & (~(0x01 << i));
 8003882:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003886:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 8003888:	7990      	ldrb	r0, [r2, #6]
 800388a:	bb50      	cbnz	r0, 80038e2 <LTC681x_set_cfgr_dis+0xaa>
                    & (~(0x01 << i));
 800388c:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003890:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 8003892:	79d0      	ldrb	r0, [r2, #7]
 8003894:	b1c0      	cbz	r0, 80038c8 <LTC681x_set_cfgr_dis+0x90>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389a:	710b      	strb	r3, [r1, #4]
    }
    for (i = 0; i < 4; i++)
    {
        if (dcc[i + 8])
 800389c:	7a10      	ldrb	r0, [r2, #8]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 800389e:	794b      	ldrb	r3, [r1, #5]
        if (dcc[i + 8])
 80038a0:	b9c8      	cbnz	r0, 80038d6 <LTC681x_set_cfgr_dis+0x9e>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
                    & (~(0x01 << i));
 80038a2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038a6:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038a8:	7a50      	ldrb	r0, [r2, #9]
 80038aa:	bb78      	cbnz	r0, 800390c <LTC681x_set_cfgr_dis+0xd4>
                    & (~(0x01 << i));
 80038ac:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038b0:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038b2:	7a90      	ldrb	r0, [r2, #10]
 80038b4:	bb80      	cbnz	r0, 8003918 <LTC681x_set_cfgr_dis+0xe0>
                    & (~(0x01 << i));
 80038b6:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038ba:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038bc:	7ad2      	ldrb	r2, [r2, #11]
 80038be:	b38a      	cbz	r2, 8003924 <LTC681x_set_cfgr_dis+0xec>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	714b      	strb	r3, [r1, #5]
    }
}
 80038c6:	4770      	bx	lr
                    & (~(0x01 << i));
 80038c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038cc:	710b      	strb	r3, [r1, #4]
        if (dcc[i + 8])
 80038ce:	7a10      	ldrb	r0, [r2, #8]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038d0:	794b      	ldrb	r3, [r1, #5]
        if (dcc[i + 8])
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d0e5      	beq.n	80038a2 <LTC681x_set_cfgr_dis+0x6a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038dc:	7a50      	ldrb	r0, [r2, #9]
 80038de:	b9a8      	cbnz	r0, 800390c <LTC681x_set_cfgr_dis+0xd4>
 80038e0:	e7e4      	b.n	80038ac <LTC681x_set_cfgr_dis+0x74>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e6:	e7d3      	b.n	8003890 <LTC681x_set_cfgr_dis+0x58>
 80038e8:	f043 0320 	orr.w	r3, r3, #32
 80038ec:	e7cb      	b.n	8003886 <LTC681x_set_cfgr_dis+0x4e>
 80038ee:	f043 0310 	orr.w	r3, r3, #16
 80038f2:	e7c3      	b.n	800387c <LTC681x_set_cfgr_dis+0x44>
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	e7ba      	b.n	8003870 <LTC681x_set_cfgr_dis+0x38>
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	e7b1      	b.n	8003864 <LTC681x_set_cfgr_dis+0x2c>
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	e7a8      	b.n	8003858 <LTC681x_set_cfgr_dis+0x20>
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	e79f      	b.n	800384c <LTC681x_set_cfgr_dis+0x14>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 8003912:	7a90      	ldrb	r0, [r2, #10]
 8003914:	2800      	cmp	r0, #0
 8003916:	d0ce      	beq.n	80038b6 <LTC681x_set_cfgr_dis+0x7e>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 800391e:	7ad2      	ldrb	r2, [r2, #11]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d1cd      	bne.n	80038c0 <LTC681x_set_cfgr_dis+0x88>
                    & (~(0x01 << i));
 8003924:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003928:	714b      	strb	r3, [r1, #5]
}
 800392a:	4770      	bx	lr

0800392c <LTC681x_set_cfgr>:
{
 800392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8003930:	eb00 1480 	add.w	r4, r0, r0, lsl #6
 8003934:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003938:	f811 c024 	ldrb.w	ip, [r1, r4, lsl #2]
{
 800393c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003940:	9f08      	ldr	r7, [sp, #32]
 8003942:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8003946:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 800394a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (refon)
 800394e:	2a00      	cmp	r2, #0
 8003950:	d059      	beq.n	8003a06 <LTC681x_set_cfgr+0xda>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8003952:	f04c 0c04 	orr.w	ip, ip, #4
    if (adcopt)
 8003956:	2b00      	cmp	r3, #0
 8003958:	d059      	beq.n	8003a0e <LTC681x_set_cfgr+0xe2>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 800395a:	f04c 0301 	orr.w	r3, ip, #1
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 800395e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003962:	f898 2000 	ldrb.w	r2, [r8]
 8003966:	2a00      	cmp	r2, #0
 8003968:	d159      	bne.n	8003a1e <LTC681x_set_cfgr+0xf2>
                    & (~(0x01 << (i + 3)));
 800396a:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800396e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003972:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003976:	2a00      	cmp	r2, #0
 8003978:	d159      	bne.n	8003a2e <LTC681x_set_cfgr+0x102>
                    & (~(0x01 << (i + 3)));
 800397a:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800397e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003982:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003986:	2a00      	cmp	r2, #0
 8003988:	d159      	bne.n	8003a3e <LTC681x_set_cfgr+0x112>
                    & (~(0x01 << (i + 3)));
 800398a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800398e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003992:	f898 2003 	ldrb.w	r2, [r8, #3]
 8003996:	2a00      	cmp	r2, #0
 8003998:	d159      	bne.n	8003a4e <LTC681x_set_cfgr+0x122>
                    & (~(0x01 << (i + 3)));
 800399a:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800399e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 80039a2:	f898 2004 	ldrb.w	r2, [r8, #4]
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	d059      	beq.n	8003a5e <LTC681x_set_cfgr+0x132>
                    | (0x01 << (i + 3));
 80039aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80039ae:	f801 300e 	strb.w	r3, [r1, lr]
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 80039b2:	9a07      	ldr	r2, [sp, #28]
 80039b4:	f7ff ff40 	bl	8003838 <LTC681x_set_cfgr_dis>
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
    int i;
    for (i = 0; i < 4; i++)
    {
        if (dcto[i])
 80039b8:	783a      	ldrb	r2, [r7, #0]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039ba:	7963      	ldrb	r3, [r4, #5]
        if (dcto[i])
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d15a      	bne.n	8003a76 <LTC681x_set_cfgr+0x14a>
                    | (0x01 << (i + 4));
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
                    & (~(0x01 << (i + 4)));
 80039c0:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039c4:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 80039c6:	787a      	ldrb	r2, [r7, #1]
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	d151      	bne.n	8003a70 <LTC681x_set_cfgr+0x144>
                    & (~(0x01 << (i + 4)));
 80039cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039d0:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 80039d2:	78ba      	ldrb	r2, [r7, #2]
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d148      	bne.n	8003a6a <LTC681x_set_cfgr+0x13e>
                    & (~(0x01 << (i + 4)));
 80039d8:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039dc:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d03f      	beq.n	8003a64 <LTC681x_set_cfgr+0x138>
                    | (0x01 << (i + 4));
 80039e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
}

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
    uint16_t tmp = (uv / 16) - 1;
 80039e8:	092d      	lsrs	r5, r5, #4
 80039ea:	3d01      	subs	r5, #1
 80039ec:	b2ad      	uxth	r5, r5
}

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
    uint16_t tmp = (ov / 16);
 80039ee:	0932      	lsrs	r2, r6, #4
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80039f0:	7065      	strb	r5, [r4, #1]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 80039f2:	f3c5 2503 	ubfx	r5, r5, #8, #4
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 80039f6:	0a36      	lsrs	r6, r6, #8
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
            | ((0x000F & tmp) << 4);
 80039f8:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039fc:	7163      	strb	r3, [r4, #5]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 80039fe:	70e6      	strb	r6, [r4, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8003a00:	70a5      	strb	r5, [r4, #2]
}
 8003a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8003a06:	f00c 0cfb 	and.w	ip, ip, #251	@ 0xfb
    if (adcopt)
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1a5      	bne.n	800395a <LTC681x_set_cfgr+0x2e>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 8003a0e:	f00c 03fe 	and.w	r3, ip, #254	@ 0xfe
 8003a12:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a16:	f898 2000 	ldrb.w	r2, [r8]
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	d0a5      	beq.n	800396a <LTC681x_set_cfgr+0x3e>
                    | (0x01 << (i + 3));
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a22:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a26:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	d0a5      	beq.n	800397a <LTC681x_set_cfgr+0x4e>
                    | (0x01 << (i + 3));
 8003a2e:	f043 0310 	orr.w	r3, r3, #16
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a32:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a36:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	d0a5      	beq.n	800398a <LTC681x_set_cfgr+0x5e>
                    | (0x01 << (i + 3));
 8003a3e:	f043 0320 	orr.w	r3, r3, #32
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a42:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a46:	f898 2003 	ldrb.w	r2, [r8, #3]
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d0a5      	beq.n	800399a <LTC681x_set_cfgr+0x6e>
                    | (0x01 << (i + 3));
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a52:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a56:	f898 2004 	ldrb.w	r2, [r8, #4]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d1a5      	bne.n	80039aa <LTC681x_set_cfgr+0x7e>
                    & (~(0x01 << (i + 3)));
 8003a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a62:	e7a4      	b.n	80039ae <LTC681x_set_cfgr+0x82>
                    & (~(0x01 << (i + 4)));
 8003a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a68:	e7be      	b.n	80039e8 <LTC681x_set_cfgr+0xbc>
                    | (0x01 << (i + 4));
 8003a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a6e:	e7b5      	b.n	80039dc <LTC681x_set_cfgr+0xb0>
 8003a70:	f043 0320 	orr.w	r3, r3, #32
 8003a74:	e7ac      	b.n	80039d0 <LTC681x_set_cfgr+0xa4>
 8003a76:	f043 0310 	orr.w	r3, r3, #16
 8003a7a:	e7a3      	b.n	80039c4 <LTC681x_set_cfgr+0x98>

08003a7c <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 8003a7c:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003a7e:	4807      	ldr	r0, [pc, #28]	@ (8003a9c <cs_low+0x20>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a86:	f002 f96b 	bl	8005d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted


}
 8003a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 8003a8e:	4804      	ldr	r0, [pc, #16]	@ (8003aa0 <cs_low+0x24>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a96:	f002 b963 	b.w	8005d60 <HAL_GPIO_WritePin>
 8003a9a:	bf00      	nop
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	40020c00 	.word	0x40020c00

08003aa4 <cs_high>:

void cs_high() {
 8003aa4:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003aa6:	4807      	ldr	r0, [pc, #28]	@ (8003ac4 <cs_high+0x20>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aae:	f002 f957 	bl	8005d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted


}
 8003ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8003ab6:	4804      	ldr	r0, [pc, #16]	@ (8003ac8 <cs_high+0x24>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003abe:	f002 b94f 	b.w	8005d60 <HAL_GPIO_WritePin>
 8003ac2:	bf00      	nop
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020c00 	.word	0x40020c00

08003acc <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8003acc:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8003ad0:	b120      	cbz	r0, 8003adc <delay_time_us+0x10>
 8003ad2:	2300      	movs	r3, #0
			time_delay_count++) {
		__NOP();
 8003ad4:	bf00      	nop
			time_delay_count++) {
 8003ad6:	3301      	adds	r3, #1
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1fb      	bne.n	8003ad4 <delay_time_us+0x8>
	}
}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <spi_write_array>:

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8003ae0:	b1a8      	cbz	r0, 8003b0e <spi_write_array+0x2e>
		) {
 8003ae2:	b570      	push	{r4, r5, r6, lr}
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8003ae4:	4e0a      	ldr	r6, [pc, #40]	@ (8003b10 <spi_write_array+0x30>)
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	180d      	adds	r5, r1, r0
 8003aea:	e002      	b.n	8003af2 <spi_write_array+0x12>
	for (len_t = 0; len_t < len; len_t++) {
 8003aec:	3401      	adds	r4, #1
 8003aee:	42ac      	cmp	r4, r5
 8003af0:	d00c      	beq.n	8003b0c <spi_write_array+0x2c>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8003af2:	2314      	movs	r3, #20
 8003af4:	2201      	movs	r2, #1
 8003af6:	4621      	mov	r1, r4
 8003af8:	4630      	mov	r0, r6
 8003afa:	f003 fb97 	bl	800722c <HAL_SPI_Transmit>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d0f4      	beq.n	8003aec <spi_write_array+0xc>
	for (len_t = 0; len_t < len; len_t++) {
 8003b02:	3401      	adds	r4, #1
			/* Transfer error in transmission process */
			Error_Handler();
 8003b04:	f001 f858 	bl	8004bb8 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8003b08:	42ac      	cmp	r4, r5
 8003b0a:	d1f2      	bne.n	8003af2 <spi_write_array+0x12>
		}
	}

}
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	4770      	bx	lr
 8003b10:	20001340 	.word	0x20001340

08003b14 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	461c      	mov	r4, r3
 8003b18:	4615      	mov	r5, r2
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8003b1a:	2314      	movs	r3, #20
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	4601      	mov	r1, r0
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <spi_write_read+0x40>)
 8003b22:	f003 fb83 	bl	800722c <HAL_SPI_Transmit>
 8003b26:	4a0c      	ldr	r2, [pc, #48]	@ (8003b58 <spi_write_read+0x44>)
	rx_len_local = rx_len;
 8003b28:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <spi_write_read+0x48>)
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8003b2a:	7010      	strb	r0, [r2, #0]
	rx_len_local = rx_len;
 8003b2c:	701c      	strb	r4, [r3, #0]
	if (status_spi_out != HAL_OK) {
 8003b2e:	b948      	cbnz	r0, 8003b44 <spi_write_read+0x30>

		Error_Handler();
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 8003b30:	2314      	movs	r3, #20
 8003b32:	4808      	ldr	r0, [pc, #32]	@ (8003b54 <spi_write_read+0x40>)
 8003b34:	4622      	mov	r2, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f003 fde6 	bl	8007708 <HAL_SPI_Receive>
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <spi_write_read+0x4c>)
 8003b3e:	7018      	strb	r0, [r3, #0]
	if (status_spi_in != HAL_OK) {
 8003b40:	b918      	cbnz	r0, 8003b4a <spi_write_read+0x36>

		Error_Handler();
	}

}
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
		Error_Handler();
 8003b44:	f001 f838 	bl	8004bb8 <Error_Handler>
 8003b48:	e7f2      	b.n	8003b30 <spi_write_read+0x1c>
}
 8003b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Error_Handler();
 8003b4e:	f001 b833 	b.w	8004bb8 <Error_Handler>
 8003b52:	bf00      	nop
 8003b54:	20001340 	.word	0x20001340
 8003b58:	20000fbd 	.word	0x20000fbd
 8003b5c:	20000fbe 	.word	0x20000fbe
 8003b60:	20000fbc 	.word	0x20000fbc

08003b64 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8003b64:	b500      	push	{lr}
 8003b66:	b087      	sub	sp, #28
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003b68:	2314      	movs	r3, #20
uint8_t spi_read_byte(uint8_t tx_dat) {
 8003b6a:	4684      	mov	ip, r0
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <spi_read_byte+0x38>)
uint8_t spi_read_byte(uint8_t tx_dat) {
 8003b70:	f88d c00f 	strb.w	ip, [sp, #15]
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003b74:	2301      	movs	r3, #1
 8003b76:	f10d 0217 	add.w	r2, sp, #23
 8003b7a:	f10d 010f 	add.w	r1, sp, #15
 8003b7e:	f003 fc59 	bl	8007434 <HAL_SPI_TransmitReceive>
 8003b82:	b920      	cbnz	r0, 8003b8e <spi_read_byte+0x2a>
		Error_Handler();
	}
	return (data);
}
 8003b84:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003b88:	b007      	add	sp, #28
 8003b8a:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8003b8e:	f001 f813 	bl	8004bb8 <Error_Handler>
}
 8003b92:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003b96:	b007      	add	sp, #28
 8003b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b9c:	20001340 	.word	0x20001340

08003ba0 <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 8003ba0:	b570      	push	{r4, r5, r6, lr}
	int8_t error = 0;
	wakeup_sleep(TOTAL_IC);
 8003ba2:	2002      	movs	r0, #2
 8003ba4:	f7ff fada 	bl	800315c <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4611      	mov	r1, r2
 8003bac:	2002      	movs	r0, #2
	 LTC6811_pollAdc();
	wakeup_sleep(TOTAL_IC);
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8003bae:	4d12      	ldr	r5, [pc, #72]	@ (8003bf8 <cell_voltage_read+0x58>)
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8003bb0:	f7ff fabe 	bl	8003130 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8003bb4:	f7ff fac0 	bl	8003138 <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8003bb8:	2002      	movs	r0, #2
 8003bba:	f7ff facf 	bl	800315c <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7ff fab6 	bl	8003134 <LTC6811_rdcv>
 8003bc8:	b244      	sxtb	r4, r0
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8003bca:	1c63      	adds	r3, r4, #1
 8003bcc:	d001      	beq.n	8003bd2 <cell_voltage_read+0x32>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
}
 8003bce:	4620      	mov	r0, r4
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8003bd2:	f895 60e4 	ldrb.w	r6, [r5, #228]	@ 0xe4
 8003bd6:	2e00      	cmp	r6, #0
 8003bd8:	d0f9      	beq.n	8003bce <cell_voltage_read+0x2e>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8003bda:	0076      	lsls	r6, r6, #1
 8003bdc:	4632      	mov	r2, r6
 8003bde:	2100      	movs	r1, #0
 8003be0:	f105 001e 	add.w	r0, r5, #30
 8003be4:	f004 fd04 	bl	80085f0 <memset>
 8003be8:	4632      	mov	r2, r6
 8003bea:	2100      	movs	r1, #0
 8003bec:	f505 7091 	add.w	r0, r5, #290	@ 0x122
 8003bf0:	f004 fcfe 	bl	80085f0 <memset>
}
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	20000fd0 	.word	0x20000fd0

08003bfc <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 8003bfc:	b570      	push	{r4, r5, r6, lr}



	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 8003bfe:	b28e      	uxth	r6, r1
{
 8003c00:	460d      	mov	r5, r1
	uint16_t crc = crc16(data, size);
 8003c02:	4631      	mov	r1, r6
{
 8003c04:	4604      	mov	r4, r0
	uint16_t crc = crc16(data, size);
 8003c06:	f000 f81d 	bl	8003c44 <crc16>
	data[size] = crc&0xFF;   // CRC LOW
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003c0a:	1963      	adds	r3, r4, r5
	data[size] = crc&0xFF;   // CRC LOW
 8003c0c:	5560      	strb	r0, [r4, r5]

	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8003c0e:	4d0b      	ldr	r5, [pc, #44]	@ (8003c3c <sendData+0x40>)
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003c10:	0a00      	lsrs	r0, r0, #8
 8003c12:	7058      	strb	r0, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8003c14:	2201      	movs	r2, #1
 8003c16:	4628      	mov	r0, r5
 8003c18:	2120      	movs	r1, #32
 8003c1a:	f002 f8a1 	bl	8005d60 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8003c1e:	1cb2      	adds	r2, r6, #2
 8003c20:	4621      	mov	r1, r4
 8003c22:	b292      	uxth	r2, r2
 8003c24:	4806      	ldr	r0, [pc, #24]	@ (8003c40 <sendData+0x44>)
 8003c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c2a:	f004 f8f3 	bl	8007e14 <HAL_UART_Transmit>

	// Pull RE Low to enable RX operation

	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003c2e:	4628      	mov	r0, r5
 8003c30:	2200      	movs	r2, #0
}
 8003c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003c36:	2120      	movs	r1, #32
 8003c38:	f002 b892 	b.w	8005d60 <HAL_GPIO_WritePin>
 8003c3c:	40020400 	.word	0x40020400
 8003c40:	200012b0 	.word	0x200012b0

08003c44 <crc16>:
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8003c44:	b1c1      	cbz	r1, 8003c78 <crc16+0x34>
 8003c46:	f101 3cff 	add.w	ip, r1, #4294967295
 8003c4a:	fa1f fc8c 	uxth.w	ip, ip
{
 8003c4e:	b430      	push	{r4, r5}
 8003c50:	f10c 0c01 	add.w	ip, ip, #1
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8003c54:	22ff      	movs	r2, #255	@ 0xff
 8003c56:	4d0a      	ldr	r5, [pc, #40]	@ (8003c80 <crc16+0x3c>)
 8003c58:	4c0a      	ldr	r4, [pc, #40]	@ (8003c84 <crc16+0x40>)
 8003c5a:	4484      	add	ip, r0
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8003c5c:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8003c5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c62:	4053      	eors	r3, r2
    while (buffer_length--) {
 8003c64:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8003c66:	5cea      	ldrb	r2, [r5, r3]
 8003c68:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 8003c6c:	5ce1      	ldrb	r1, [r4, r3]
    while (buffer_length--) {
 8003c6e:	d1f6      	bne.n	8003c5e <crc16+0x1a>
    }

    return (crc_hi << 8 | crc_lo);
 8003c70:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8003c74:	bc30      	pop	{r4, r5}
 8003c76:	4770      	bx	lr
    while (buffer_length--) {
 8003c78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	080099bc 	.word	0x080099bc
 8003c84:	080098bc 	.word	0x080098bc

08003c88 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8a:	b087      	sub	sp, #28
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003c8c:	2401      	movs	r4, #1
 8003c8e:	f04f 36ff 	mov.w	r6, #4294967295
 8003c92:	f10d 0517 	add.w	r5, sp, #23
 8003c96:	4623      	mov	r3, r4
 8003c98:	2200      	movs	r2, #0
 8003c9a:	21df      	movs	r1, #223	@ 0xdf
 8003c9c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003ca0:	4838      	ldr	r0, [pc, #224]	@ (8003d84 <RTC_Init+0xfc>)
 8003ca2:	9500      	str	r5, [sp, #0]
 8003ca4:	f002 fc8e 	bl	80065c4 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8003ca8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cac:	4835      	ldr	r0, [pc, #212]	@ (8003d84 <RTC_Init+0xfc>)
 8003cae:	9602      	str	r6, [sp, #8]
    ctrl &= ~MCP7940N_ST;
 8003cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	21df      	movs	r1, #223	@ 0xdf
    ctrl &= ~MCP7940N_ST;
 8003cb8:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cbc:	e9cd 5400 	strd	r5, r4, [sp]
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	f002 fb65 	bl	8006390 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8003cc6:	200a      	movs	r0, #10
 8003cc8:	f001 fb70 	bl	80053ac <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003ccc:	2203      	movs	r2, #3
 8003cce:	21df      	movs	r1, #223	@ 0xdf
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003cd6:	482b      	ldr	r0, [pc, #172]	@ (8003d84 <RTC_Init+0xfc>)
 8003cd8:	9500      	str	r5, [sp, #0]
 8003cda:	f002 fc73 	bl	80065c4 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8003cde:	f89d 3017 	ldrb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003ce2:	4828      	ldr	r0, [pc, #160]	@ (8003d84 <RTC_Init+0xfc>)
 8003ce4:	9602      	str	r6, [sp, #8]
    ctrl |= MCP7940N_VBATEN;
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cea:	2203      	movs	r2, #3
 8003cec:	21df      	movs	r1, #223	@ 0xdf
    ctrl |= MCP7940N_VBATEN;
 8003cee:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cf2:	e9cd 5400 	strd	r5, r4, [sp]
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f002 fb4a 	bl	8006390 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	21df      	movs	r1, #223	@ 0xdf
 8003d00:	4623      	mov	r3, r4
 8003d02:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d06:	481f      	ldr	r0, [pc, #124]	@ (8003d84 <RTC_Init+0xfc>)
 8003d08:	9500      	str	r5, [sp, #0]
 8003d0a:	f002 fc5b 	bl	80065c4 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8003d0e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d12:	481c      	ldr	r0, [pc, #112]	@ (8003d84 <RTC_Init+0xfc>)
 8003d14:	9602      	str	r6, [sp, #8]
    ctrl |= MCP7940N_ST;
 8003d16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d1a:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d1e:	e9cd 5400 	strd	r5, r4, [sp]
 8003d22:	2200      	movs	r2, #0
 8003d24:	21df      	movs	r1, #223	@ 0xdf
 8003d26:	4623      	mov	r3, r4
 8003d28:	f002 fb32 	bl	8006390 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d2c:	4f15      	ldr	r7, [pc, #84]	@ (8003d84 <RTC_Init+0xfc>)
 8003d2e:	9500      	str	r5, [sp, #0]
 8003d30:	2301      	movs	r3, #1
 8003d32:	21df      	movs	r1, #223	@ 0xdf
 8003d34:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	f002 fc42 	bl	80065c4 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8003d40:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003d44:	0699      	lsls	r1, r3, #26
 8003d46:	d5f2      	bpl.n	8003d2e <RTC_Init+0xa6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d48:	2301      	movs	r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d50:	480c      	ldr	r0, [pc, #48]	@ (8003d84 <RTC_Init+0xfc>)
 8003d52:	9500      	str	r5, [sp, #0]
 8003d54:	21df      	movs	r1, #223	@ 0xdf
 8003d56:	f002 fc35 	bl	80065c4 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8003d5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003d5e:	06da      	lsls	r2, r3, #27
 8003d60:	d401      	bmi.n	8003d66 <RTC_Init+0xde>
        ctrl &= ~MCP7940N_PWRFAIL;
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
    }
}
 8003d62:	b007      	add	sp, #28
 8003d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ctrl &= ~MCP7940N_PWRFAIL;
 8003d66:	f023 0710 	bic.w	r7, r3, #16
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d6a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d6e:	9500      	str	r5, [sp, #0]
 8003d70:	2301      	movs	r3, #1
 8003d72:	2203      	movs	r2, #3
 8003d74:	21df      	movs	r1, #223	@ 0xdf
 8003d76:	4803      	ldr	r0, [pc, #12]	@ (8003d84 <RTC_Init+0xfc>)
        ctrl &= ~MCP7940N_PWRFAIL;
 8003d78:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d7c:	f002 fb08 	bl	8006390 <HAL_I2C_Mem_Write>
}
 8003d80:	b007      	add	sp, #28
 8003d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d84:	20001548 	.word	0x20001548

08003d88 <init_ina229_devices>:
        // Handle case when RxData_modbus_01[0] != 7
    }
}


void init_ina229_devices(void) {
 8003d88:	b430      	push	{r4, r5}
    ina229_devices[0] = INA229_0;
    ina229_devices[1] = INA229_1;
    ina229_devices[2] = INA229_2;
 8003d8a:	4a28      	ldr	r2, [pc, #160]	@ (8003e2c <init_ina229_devices+0xa4>)
    ina229_devices[1] = INA229_1;
 8003d8c:	4c28      	ldr	r4, [pc, #160]	@ (8003e30 <init_ina229_devices+0xa8>)
    ina229_devices[0] = INA229_0;
 8003d8e:	4b29      	ldr	r3, [pc, #164]	@ (8003e34 <init_ina229_devices+0xac>)
    ina229_devices[1] = INA229_1;
 8003d90:	6824      	ldr	r4, [r4, #0]
    ina229_devices[2] = INA229_2;
 8003d92:	6812      	ldr	r2, [r2, #0]
    ina229_devices[3] = INA229_3;
 8003d94:	4828      	ldr	r0, [pc, #160]	@ (8003e38 <init_ina229_devices+0xb0>)
    ina229_devices[4] = INA229_4;
 8003d96:	4929      	ldr	r1, [pc, #164]	@ (8003e3c <init_ina229_devices+0xb4>)
    ina229_devices[3] = INA229_3;
 8003d98:	6800      	ldr	r0, [r0, #0]
    ina229_devices[4] = INA229_4;
 8003d9a:	6809      	ldr	r1, [r1, #0]
    ina229_devices[0] = INA229_0;
 8003d9c:	4d28      	ldr	r5, [pc, #160]	@ (8003e40 <init_ina229_devices+0xb8>)
    ina229_devices[2] = INA229_2;
 8003d9e:	e9c3 4201 	strd	r4, r2, [r3, #4]
    ina229_devices[5] = INA229_5;
 8003da2:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <init_ina229_devices+0xbc>)
    ina229_devices[6] = INA229_6;
 8003da4:	4c28      	ldr	r4, [pc, #160]	@ (8003e48 <init_ina229_devices+0xc0>)
    ina229_devices[5] = INA229_5;
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	615a      	str	r2, [r3, #20]
    ina229_devices[7] = INA229_7;
 8003daa:	4a28      	ldr	r2, [pc, #160]	@ (8003e4c <init_ina229_devices+0xc4>)
    ina229_devices[6] = INA229_6;
 8003dac:	6824      	ldr	r4, [r4, #0]
    ina229_devices[7] = INA229_7;
 8003dae:	6812      	ldr	r2, [r2, #0]
    ina229_devices[0] = INA229_0;
 8003db0:	682d      	ldr	r5, [r5, #0]
 8003db2:	601d      	str	r5, [r3, #0]
    ina229_devices[7] = INA229_7;
 8003db4:	e9c3 4206 	strd	r4, r2, [r3, #24]
    ina229_devices[8] = INA229_8;
    ina229_devices[9] = INA229_9;
    ina229_devices[10] = INA229_10;
 8003db8:	4a25      	ldr	r2, [pc, #148]	@ (8003e50 <init_ina229_devices+0xc8>)
    ina229_devices[11] = INA229_11;
 8003dba:	4c26      	ldr	r4, [pc, #152]	@ (8003e54 <init_ina229_devices+0xcc>)
    ina229_devices[10] = INA229_10;
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    ina229_devices[4] = INA229_4;
 8003dc0:	e9c3 0103 	strd	r0, r1, [r3, #12]
    ina229_devices[8] = INA229_8;
 8003dc4:	4824      	ldr	r0, [pc, #144]	@ (8003e58 <init_ina229_devices+0xd0>)
    ina229_devices[9] = INA229_9;
 8003dc6:	4925      	ldr	r1, [pc, #148]	@ (8003e5c <init_ina229_devices+0xd4>)
    ina229_devices[12] = INA229_12;
 8003dc8:	4a25      	ldr	r2, [pc, #148]	@ (8003e60 <init_ina229_devices+0xd8>)
    ina229_devices[8] = INA229_8;
 8003dca:	6800      	ldr	r0, [r0, #0]
    ina229_devices[9] = INA229_9;
 8003dcc:	6809      	ldr	r1, [r1, #0]
    ina229_devices[11] = INA229_11;
 8003dce:	6824      	ldr	r4, [r4, #0]
    ina229_devices[12] = INA229_12;
 8003dd0:	6812      	ldr	r2, [r2, #0]
    ina229_devices[9] = INA229_9;
 8003dd2:	e9c3 0108 	strd	r0, r1, [r3, #32]
    ina229_devices[13] = INA229_13;
 8003dd6:	4823      	ldr	r0, [pc, #140]	@ (8003e64 <init_ina229_devices+0xdc>)
    ina229_devices[14] = INA229_14;
 8003dd8:	4923      	ldr	r1, [pc, #140]	@ (8003e68 <init_ina229_devices+0xe0>)
    ina229_devices[13] = INA229_13;
 8003dda:	6800      	ldr	r0, [r0, #0]
    ina229_devices[14] = INA229_14;
 8003ddc:	6809      	ldr	r1, [r1, #0]
    ina229_devices[12] = INA229_12;
 8003dde:	e9c3 420b 	strd	r4, r2, [r3, #44]	@ 0x2c
    ina229_devices[15] = INA229_15;
 8003de2:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <init_ina229_devices+0xe4>)
    ina229_devices[16] = INA229_16;
 8003de4:	4c22      	ldr	r4, [pc, #136]	@ (8003e70 <init_ina229_devices+0xe8>)
    ina229_devices[15] = INA229_15;
 8003de6:	6812      	ldr	r2, [r2, #0]
    ina229_devices[14] = INA229_14;
 8003de8:	e9c3 010d 	strd	r0, r1, [r3, #52]	@ 0x34
    ina229_devices[15] = INA229_15;
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c
    ina229_devices[17] = INA229_17;
 8003dee:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <init_ina229_devices+0xec>)
    ina229_devices[16] = INA229_16;
 8003df0:	6824      	ldr	r4, [r4, #0]
    ina229_devices[17] = INA229_17;
 8003df2:	6812      	ldr	r2, [r2, #0]
    ina229_devices[18] = INA229_18;
 8003df4:	4820      	ldr	r0, [pc, #128]	@ (8003e78 <init_ina229_devices+0xf0>)
    ina229_devices[19] = INA229_19;
 8003df6:	4921      	ldr	r1, [pc, #132]	@ (8003e7c <init_ina229_devices+0xf4>)
    ina229_devices[18] = INA229_18;
 8003df8:	6800      	ldr	r0, [r0, #0]
    ina229_devices[19] = INA229_19;
 8003dfa:	6809      	ldr	r1, [r1, #0]
    ina229_devices[17] = INA229_17;
 8003dfc:	e9c3 4210 	strd	r4, r2, [r3, #64]	@ 0x40
    ina229_devices[20] = INA229_20;
 8003e00:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <init_ina229_devices+0xf8>)
    ina229_devices[21] = INA229_21;
 8003e02:	4c20      	ldr	r4, [pc, #128]	@ (8003e84 <init_ina229_devices+0xfc>)
    ina229_devices[20] = INA229_20;
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	651a      	str	r2, [r3, #80]	@ 0x50
    ina229_devices[22] = INA229_22;
 8003e08:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <init_ina229_devices+0x100>)
    ina229_devices[21] = INA229_21;
 8003e0a:	6824      	ldr	r4, [r4, #0]
    ina229_devices[22] = INA229_22;
 8003e0c:	6812      	ldr	r2, [r2, #0]
    ina229_devices[19] = INA229_19;
 8003e0e:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
    ina229_devices[22] = INA229_22;
 8003e12:	e9c3 4215 	strd	r4, r2, [r3, #84]	@ 0x54
    ina229_devices[23] = INA229_23;
    ina229_devices[24] = INA229_24;
 8003e16:	491d      	ldr	r1, [pc, #116]	@ (8003e8c <init_ina229_devices+0x104>)
    ina229_devices[25] = INA229_25;
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <init_ina229_devices+0x108>)
    ina229_devices[23] = INA229_23;
 8003e1a:	481e      	ldr	r0, [pc, #120]	@ (8003e94 <init_ina229_devices+0x10c>)
    ina229_devices[24] = INA229_24;
 8003e1c:	6809      	ldr	r1, [r1, #0]
    ina229_devices[25] = INA229_25;
 8003e1e:	6812      	ldr	r2, [r2, #0]
    ina229_devices[23] = INA229_23;
 8003e20:	6800      	ldr	r0, [r0, #0]
 8003e22:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8003e24:	bc30      	pop	{r4, r5}
    ina229_devices[25] = INA229_25;
 8003e26:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
}
 8003e2a:	4770      	bx	lr
 8003e2c:	080094b0 	.word	0x080094b0
 8003e30:	080094b4 	.word	0x080094b4
 8003e34:	200015ec 	.word	0x200015ec
 8003e38:	080094ac 	.word	0x080094ac
 8003e3c:	080094a8 	.word	0x080094a8
 8003e40:	080094b8 	.word	0x080094b8
 8003e44:	080094a4 	.word	0x080094a4
 8003e48:	080094a0 	.word	0x080094a0
 8003e4c:	0800949c 	.word	0x0800949c
 8003e50:	08009490 	.word	0x08009490
 8003e54:	0800948c 	.word	0x0800948c
 8003e58:	08009498 	.word	0x08009498
 8003e5c:	08009494 	.word	0x08009494
 8003e60:	08009488 	.word	0x08009488
 8003e64:	08009484 	.word	0x08009484
 8003e68:	08009480 	.word	0x08009480
 8003e6c:	0800947c 	.word	0x0800947c
 8003e70:	08009478 	.word	0x08009478
 8003e74:	08009474 	.word	0x08009474
 8003e78:	08009470 	.word	0x08009470
 8003e7c:	0800946c 	.word	0x0800946c
 8003e80:	08009468 	.word	0x08009468
 8003e84:	08009464 	.word	0x08009464
 8003e88:	08009460 	.word	0x08009460
 8003e8c:	08009458 	.word	0x08009458
 8003e90:	08009454 	.word	0x08009454
 8003e94:	0800945c 	.word	0x0800945c

08003e98 <Set_voltage_and_measure>:

}

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <Set_voltage_and_measure+0xb0>)
{
 8003e9c:	4604      	mov	r4, r0
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003e9e:	7800      	ldrb	r0, [r0, #0]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	7862      	ldrb	r2, [r4, #1]
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003ea4:	f1a0 0318 	sub.w	r3, r0, #24
 8003ea8:	2b01      	cmp	r3, #1
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003eaa:	eb06 1642 	add.w	r6, r6, r2, lsl #5
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003eae:	d905      	bls.n	8003ebc <Set_voltage_and_measure+0x24>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 8003eb0:	f7fe fe1c 	bl	8002aec <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 8003eb4:	7820      	ldrb	r0, [r4, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f7fe ff04 	bl	8002cc4 <Set_LED_status>

    }
    HAL_Delay(10);
 8003ebc:	200a      	movs	r0, #10
 8003ebe:	f001 fa75 	bl	80053ac <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003ec2:	8921      	ldrh	r1, [r4, #8]
 8003ec4:	6860      	ldr	r0, [r4, #4]
    HAL_Delay(1);
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003ec6:	4d21      	ldr	r5, [pc, #132]	@ (8003f4c <Set_voltage_and_measure+0xb4>)
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f001 ff49 	bl	8005d60 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f001 fa6c 	bl	80053ac <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	7867      	ldrb	r7, [r4, #1]
 8003ed8:	f7ff f872 	bl	8002fc0 <INA229_getVBUS_V>
 8003edc:	eb05 1707 	add.w	r7, r5, r7, lsl #4
    HAL_Delay(1);
 8003ee0:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003ee2:	ed87 0a00 	vstr	s0, [r7]
    HAL_Delay(1);
 8003ee6:	f001 fa61 	bl	80053ac <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8003eea:	8921      	ldrh	r1, [r4, #8]
 8003eec:	6860      	ldr	r0, [r4, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f001 ff36 	bl	8005d60 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8003ef4:	200a      	movs	r0, #10
 8003ef6:	f001 fa59 	bl	80053ac <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003efa:	8921      	ldrh	r1, [r4, #8]
 8003efc:	6860      	ldr	r0, [r4, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f001 ff2e 	bl	8005d60 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003f04:	2001      	movs	r0, #1
 8003f06:	f001 fa51 	bl	80053ac <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	7866      	ldrb	r6, [r4, #1]
 8003f0e:	f7ff f89d 	bl	800304c <INA229_getDIETEMP_C>
 8003f12:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    HAL_Delay(1);
 8003f16:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8003f18:	ed85 0a02 	vstr	s0, [r5, #8]
    HAL_Delay(1);
 8003f1c:	f001 fa46 	bl	80053ac <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8003f20:	8921      	ldrh	r1, [r4, #8]
 8003f22:	6860      	ldr	r0, [r4, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f001 ff1b 	bl	8005d60 <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8003f2a:	200a      	movs	r0, #10
 8003f2c:	f001 fa3e 	bl	80053ac <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003f30:	7820      	ldrb	r0, [r4, #0]
 8003f32:	f1a0 0318 	sub.w	r3, r0, #24
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d800      	bhi.n	8003f3c <Set_voltage_and_measure+0xa4>
    {

    Set_LED_status(cell->cell_id, ON);

    }
}
 8003f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Set_LED_status(cell->cell_id, ON);
 8003f40:	2100      	movs	r1, #0
 8003f42:	f7fe bebf 	b.w	8002cc4 <Set_LED_status>
 8003f46:	bf00      	nop
 8003f48:	080094b8 	.word	0x080094b8
 8003f4c:	20000e1c 	.word	0x20000e1c

08003f50 <Voltage_Sequence_Automatic>:
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 8003f52:	4d13      	ldr	r5, [pc, #76]	@ (8003fa0 <Voltage_Sequence_Automatic+0x50>)
{
 8003f54:	ed2d 8b02 	vpush	{d8}
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 8003f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8003f5a:	b089      	sub	sp, #36	@ 0x24
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 8003f5c:	466c      	mov	r4, sp
 8003f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int v = 0; v < num_voltages; v++) {
 8003f68:	4d0e      	ldr	r5, [pc, #56]	@ (8003fa4 <Voltage_Sequence_Automatic+0x54>)
 8003f6a:	466e      	mov	r6, sp
 8003f6c:	af08      	add	r7, sp, #32
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8003f6e:	ecb6 8a01 	vldmia	r6!, {s16}
 8003f72:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa8 <Voltage_Sequence_Automatic+0x58>)
 8003f74:	eeb0 0a48 	vmov.f32	s0, s16
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7ff ff8d 	bl	8003e98 <Set_voltage_and_measure>
        for(int c = 0; c < num_cells; c++) {
 8003f7e:	340c      	adds	r4, #12
        	cell_voltage_read();
 8003f80:	f7ff fe0e 	bl	8003ba0 <cell_voltage_read>
            HAL_Delay(10);  // Delay between cells
 8003f84:	200a      	movs	r0, #10
 8003f86:	f001 fa11 	bl	80053ac <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8003f8a:	42ac      	cmp	r4, r5
 8003f8c:	d1f2      	bne.n	8003f74 <Voltage_Sequence_Automatic+0x24>
        HAL_Delay(10);  // Delay between voltage levels
 8003f8e:	200a      	movs	r0, #10
 8003f90:	f001 fa0c 	bl	80053ac <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8003f94:	42be      	cmp	r6, r7
 8003f96:	d1ea      	bne.n	8003f6e <Voltage_Sequence_Automatic+0x1e>
}
 8003f98:	b009      	add	sp, #36	@ 0x24
 8003f9a:	ecbd 8b02 	vpop	{d8}
 8003f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa0:	08008724 	.word	0x08008724
 8003fa4:	08009c14 	.word	0x08009c14
 8003fa8:	08009adc 	.word	0x08009adc

08003fac <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8003fac:	b570      	push	{r4, r5, r6, lr}
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003fae:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <Get_INA_Voltage+0x5c>)
 8003fb0:	7843      	ldrb	r3, [r0, #1]
 8003fb2:	6815      	ldr	r5, [r2, #0]
{
 8003fb4:	4604      	mov	r4, r0

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);

	Set_LED_status(cell->cell_id, OFF);
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	7800      	ldrb	r0, [r0, #0]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003fba:	eb05 1543 	add.w	r5, r5, r3, lsl #5
	Set_LED_status(cell->cell_id, OFF);
 8003fbe:	f7fe fe81 	bl	8002cc4 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003fc2:	8921      	ldrh	r1, [r4, #8]
 8003fc4:	6860      	ldr	r0, [r4, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f001 feca 	bl	8005d60 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f001 f9ed 	bl	80053ac <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getVBUS_V(ina);
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	7866      	ldrb	r6, [r4, #1]
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800400c <Get_INA_Voltage+0x60>)
 8003fd8:	f7fe fff2 	bl	8002fc0 <INA229_getVBUS_V>
 8003fdc:	eb05 1606 	add.w	r6, r5, r6, lsl #4
    HAL_Delay(1);
 8003fe0:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].temperature_C = INA229_getVBUS_V(ina);
 8003fe2:	ed86 0a02 	vstr	s0, [r6, #8]
    HAL_Delay(1);
 8003fe6:	f001 f9e1 	bl	80053ac <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8003fea:	8921      	ldrh	r1, [r4, #8]
 8003fec:	6860      	ldr	r0, [r4, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f001 feb6 	bl	8005d60 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8003ff4:	7820      	ldrb	r0, [r4, #0]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f7fe fe64 	bl	8002cc4 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8003ffc:	7863      	ldrb	r3, [r4, #1]
 8003ffe:	eb05 1503 	add.w	r5, r5, r3, lsl #4
}
 8004002:	ed95 0a00 	vldr	s0, [r5]
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	080094b8 	.word	0x080094b8
 800400c:	20000e1c 	.word	0x20000e1c

08004010 <tester_setup>:
    if(RxData_modbus_01[0] == 0x7)  // Slave ID check
 8004010:	4b6b      	ldr	r3, [pc, #428]	@ (80041c0 <tester_setup+0x1b0>)
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	2a07      	cmp	r2, #7
 8004016:	d000      	beq.n	800401a <tester_setup+0xa>
 8004018:	4770      	bx	lr
{
 800401a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401c:	ed2d 8b02 	vpush	{d8}
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8004020:	785a      	ldrb	r2, [r3, #1]
    	flag_1 = 0 ;
 8004022:	4968      	ldr	r1, [pc, #416]	@ (80041c4 <tester_setup+0x1b4>)
 8004024:	2000      	movs	r0, #0
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8004026:	2a03      	cmp	r2, #3
{
 8004028:	b089      	sub	sp, #36	@ 0x24
    	flag_1 = 0 ;
 800402a:	6008      	str	r0, [r1, #0]
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 800402c:	d011      	beq.n	8004052 <tester_setup+0x42>
        else if(RxData_modbus_01[1] == 0x4)  // GET function (0x4)
 800402e:	2a04      	cmp	r2, #4
 8004030:	d003      	beq.n	800403a <tester_setup+0x2a>
}
 8004032:	b009      	add	sp, #36	@ 0x24
 8004034:	ecbd 8b02 	vpop	{d8}
 8004038:	bdf0      	pop	{r4, r5, r6, r7, pc}
            switch (function_code)
 800403a:	789a      	ldrb	r2, [r3, #2]
            uint8_t id = RxData_modbus_01[3];
 800403c:	78db      	ldrb	r3, [r3, #3]
        	flag_1 = 2 ;
 800403e:	2002      	movs	r0, #2
            switch (function_code)
 8004040:	3a01      	subs	r2, #1
        	flag_1 = 2 ;
 8004042:	6008      	str	r0, [r1, #0]
            switch (function_code)
 8004044:	2a04      	cmp	r2, #4
 8004046:	d8f4      	bhi.n	8004032 <tester_setup+0x22>
 8004048:	e8df f002 	tbb	[pc, r2]
 800404c:	961c979b 	.word	0x961c979b
 8004050:	1c          	.byte	0x1c
 8004051:	00          	.byte	0x00
            switch (RxData_modbus_01[2])  // Function code from table
 8004052:	789a      	ldrb	r2, [r3, #2]
            uint8_t id_LED = RxData_modbus_01[6];
 8004054:	799c      	ldrb	r4, [r3, #6]
            uint8_t LED_State = RxData_modbus_01[7];
 8004056:	79dd      	ldrb	r5, [r3, #7]
            switch (RxData_modbus_01[2])  // Function code from table
 8004058:	3a01      	subs	r2, #1
 800405a:	2a07      	cmp	r2, #7
 800405c:	d8e9      	bhi.n	8004032 <tester_setup+0x22>
 800405e:	a101      	add	r1, pc, #4	@ (adr r1, 8004064 <tester_setup+0x54>)
 8004060:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004064:	0800414b 	.word	0x0800414b
 8004068:	0800412d 	.word	0x0800412d
 800406c:	08004033 	.word	0x08004033
 8004070:	08004033 	.word	0x08004033
 8004074:	08004033 	.word	0x08004033
 8004078:	08004117 	.word	0x08004117
 800407c:	08004105 	.word	0x08004105
 8004080:	080040c3 	.word	0x080040c3
                    if (id >= 1 && id <= 23)
 8004084:	3b01      	subs	r3, #1
 8004086:	2b16      	cmp	r3, #22
 8004088:	d8d3      	bhi.n	8004032 <tester_setup+0x22>
						TxData_modbus_01[0] = 0x07;  // slave address
 800408a:	4c4f      	ldr	r4, [pc, #316]	@ (80041c8 <tester_setup+0x1b8>)
						uint16_t Temp_scaled = (uint16_t)(get_Temp * 10000); // Scale as needed
 800408c:	2200      	movs	r2, #0
						TxData_modbus_01[1] = Temp_scaled >> 8;
 800408e:	0a11      	lsrs	r1, r2, #8
						TxData_modbus_01[0] = 0x07;  // slave address
 8004090:	2507      	movs	r5, #7
						TxData_modbus_01[1] = Temp_scaled >> 8;
 8004092:	7061      	strb	r1, [r4, #1]
						TxData_modbus_01[0] = 0x07;  // slave address
 8004094:	7025      	strb	r5, [r4, #0]
						uint16_t crc = crc16(TxData_modbus_01, 6);
 8004096:	2106      	movs	r1, #6
						TxData_modbus_01[2] = Temp_scaled & 0xFF;
 8004098:	70a2      	strb	r2, [r4, #2]
						TxData_modbus_01[3] = 0;
 800409a:	70e2      	strb	r2, [r4, #3]
						TxData_modbus_01[4] = 0;  // force data high
 800409c:	7122      	strb	r2, [r4, #4]
						TxData_modbus_01[5] = 0;  // force data low
 800409e:	7162      	strb	r2, [r4, #5]
						uint16_t crc = crc16(TxData_modbus_01, 6);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff fdcf 	bl	8003c44 <crc16>
						sendData(TxData_modbus_01,7);
 80040a6:	4629      	mov	r1, r5
						uint16_t crc = crc16(TxData_modbus_01, 6);
 80040a8:	4603      	mov	r3, r0
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 80040aa:	f3c0 2207 	ubfx	r2, r0, #8, #8
						sendData(TxData_modbus_01,7);
 80040ae:	4620      	mov	r0, r4
						TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 80040b0:	71a3      	strb	r3, [r4, #6]
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 80040b2:	71e2      	strb	r2, [r4, #7]
}
 80040b4:	b009      	add	sp, #36	@ 0x24
 80040b6:	ecbd 8b02 	vpop	{d8}
 80040ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						sendData(TxData_modbus_01,7);
 80040be:	f7ff bd9d 	b.w	8003bfc <sendData>
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 80040c2:	4d42      	ldr	r5, [pc, #264]	@ (80041cc <tester_setup+0x1bc>)
 80040c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040c6:	466c      	mov	r4, sp
 80040c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int v = 0; v < num_voltages; v++) {
 80040d2:	4d3f      	ldr	r5, [pc, #252]	@ (80041d0 <tester_setup+0x1c0>)
 80040d4:	466e      	mov	r6, sp
 80040d6:	af08      	add	r7, sp, #32
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 80040d8:	ecb6 8a01 	vldmia	r6!, {s16}
 80040dc:	4c3d      	ldr	r4, [pc, #244]	@ (80041d4 <tester_setup+0x1c4>)
 80040de:	eeb0 0a48 	vmov.f32	s0, s16
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff fed8 	bl	8003e98 <Set_voltage_and_measure>
        for(int c = 0; c < num_cells; c++) {
 80040e8:	340c      	adds	r4, #12
        	cell_voltage_read();
 80040ea:	f7ff fd59 	bl	8003ba0 <cell_voltage_read>
            HAL_Delay(10);  // Delay between cells
 80040ee:	200a      	movs	r0, #10
 80040f0:	f001 f95c 	bl	80053ac <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 80040f4:	42ac      	cmp	r4, r5
 80040f6:	d1f2      	bne.n	80040de <tester_setup+0xce>
        HAL_Delay(10);  // Delay between voltage levels
 80040f8:	200a      	movs	r0, #10
 80040fa:	f001 f957 	bl	80053ac <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 80040fe:	42be      	cmp	r6, r7
 8004100:	d1ea      	bne.n	80040d8 <tester_setup+0xc8>
 8004102:	e796      	b.n	8004032 <tester_setup+0x22>
                    Set_LED_status(id, led_state);
 8004104:	7919      	ldrb	r1, [r3, #4]
 8004106:	78d8      	ldrb	r0, [r3, #3]
}
 8004108:	b009      	add	sp, #36	@ 0x24
 800410a:	ecbd 8b02 	vpop	{d8}
 800410e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    Set_LED_status(id, led_state);
 8004112:	f7fe bdd7 	b.w	8002cc4 <Set_LED_status>
                    HAL_Delay(delay_time);
 8004116:	f8b3 0003 	ldrh.w	r0, [r3, #3]
 800411a:	ba40      	rev16	r0, r0
 800411c:	b280      	uxth	r0, r0
}
 800411e:	b009      	add	sp, #36	@ 0x24
 8004120:	ecbd 8b02 	vpop	{d8}
 8004124:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    HAL_Delay(delay_time);
 8004128:	f001 b940 	b.w	80053ac <HAL_Delay>
                    tempCardId = RxData_modbus_01[3];  // Temp card ID (1-6)
 800412c:	78d8      	ldrb	r0, [r3, #3]
                    res = RxData_modbus_01[4];  // Resistance value (0-256)
 800412e:	7919      	ldrb	r1, [r3, #4]
                    if (tempCardId >= 1 && tempCardId <= 6)
 8004130:	1e43      	subs	r3, r0, #1
 8004132:	2b05      	cmp	r3, #5
 8004134:	f63f af7d 	bhi.w	8004032 <tester_setup+0x22>
                        Set_Resistance(tempCardId, res);
 8004138:	f7fd fa5e 	bl	80015f8 <Set_Resistance>
                        Set_LED_status(id_LED, LED_State);
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f7fe fdc0 	bl	8002cc4 <Set_LED_status>
                        HAL_Delay(1000);
 8004144:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004148:	e7e9      	b.n	800411e <tester_setup+0x10e>
                    id = RxData_modbus_01[3];  // Cell ID (1-23)
 800414a:	78d8      	ldrb	r0, [r3, #3]
                    uint8_t volt_code = RxData_modbus_01[4];  // Voltage code (1-8)
 800414c:	791b      	ldrb	r3, [r3, #4]
                    if (id >= 0 && id <= 23)
 800414e:	2817      	cmp	r0, #23
 8004150:	f63f af6f 	bhi.w	8004032 <tester_setup+0x22>
                        switch (volt_code)
 8004154:	3b01      	subs	r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b07      	cmp	r3, #7
 800415a:	bf97      	itett	ls
 800415c:	4a1e      	ldrls	r2, [pc, #120]	@ (80041d8 <tester_setup+0x1c8>)
                    if (id >= 0 && id <= 23)
 800415e:	ed9f 0a1f 	vldrhi	s0, [pc, #124]	@ 80041dc <tester_setup+0x1cc>
 8004162:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8004166:	ed93 0a00 	vldrls	s0, [r3]
}
 800416a:	b009      	add	sp, #36	@ 0x24
 800416c:	ecbd 8b02 	vpop	{d8}
 8004170:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                        Set_Output_Voltage(id, volt);
 8004174:	f7fe bcba 	b.w	8002aec <Set_Output_Voltage>
                    if (id >= 1 && id <= 24)
 8004178:	3b01      	subs	r3, #1
 800417a:	2b17      	cmp	r3, #23
 800417c:	f63f af59 	bhi.w	8004032 <tester_setup+0x22>
 8004180:	e783      	b.n	800408a <tester_setup+0x7a>
                    if (id >= 0 && id <= 23)
 8004182:	2b17      	cmp	r3, #23
 8004184:	f63f af55 	bhi.w	8004032 <tester_setup+0x22>
                    	float get_voltage = Get_INA_Voltage(&cell_configs[id]);
 8004188:	4812      	ldr	r0, [pc, #72]	@ (80041d4 <tester_setup+0x1c4>)
                    	TxData_modbus_01[0] = 0x07;  // slave address
 800418a:	4c0f      	ldr	r4, [pc, #60]	@ (80041c8 <tester_setup+0x1b8>)
                    	float get_voltage = Get_INA_Voltage(&cell_configs[id]);
 800418c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004190:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004194:	f7ff ff0a 	bl	8003fac <Get_INA_Voltage>
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8004198:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041e0 <tester_setup+0x1d0>
 800419c:	ee60 7a27 	vmul.f32	s15, s0, s15
                    	TxData_modbus_01[3] = 0;
 80041a0:	2200      	movs	r2, #0
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 80041a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
                    	TxData_modbus_01[0] = 0x07;  // slave address
 80041a6:	2507      	movs	r5, #7
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 80041a8:	ee17 3a90 	vmov	r3, s15
                    	TxData_modbus_01[1] = voltage_scaled >> 8;
 80041ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80041b0:	7061      	strb	r1, [r4, #1]
                    	TxData_modbus_01[0] = 0x07;  // slave address
 80041b2:	7025      	strb	r5, [r4, #0]
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 80041b4:	2106      	movs	r1, #6
                    	TxData_modbus_01[2] = voltage_scaled & 0xFF;
 80041b6:	70a3      	strb	r3, [r4, #2]
                    	TxData_modbus_01[3] = 0;
 80041b8:	70e2      	strb	r2, [r4, #3]
                    	TxData_modbus_01[4] = 0;  // force data high
 80041ba:	7122      	strb	r2, [r4, #4]
                    	TxData_modbus_01[5] = 0;  // force data low
 80041bc:	7162      	strb	r2, [r4, #5]
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 80041be:	e76f      	b.n	80040a0 <tester_setup+0x90>
 80041c0:	20001964 	.word	0x20001964
 80041c4:	20001974 	.word	0x20001974
 80041c8:	20001954 	.word	0x20001954
 80041cc:	08008724 	.word	0x08008724
 80041d0:	08009c14 	.word	0x08009c14
 80041d4:	08009adc 	.word	0x08009adc
 80041d8:	08009abc 	.word	0x08009abc
 80041dc:	00000000 	.word	0x00000000
 80041e0:	461c4000 	.word	0x461c4000

080041e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041e4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041e6:	2300      	movs	r3, #0
{
 80041e8:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80041ee:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041f2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80041f6:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	4923      	ldr	r1, [pc, #140]	@ (8004288 <SystemClock_Config+0xa4>)
 80041fc:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041fe:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004200:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004204:	4a21      	ldr	r2, [pc, #132]	@ (800428c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800420a:	6408      	str	r0, [r1, #64]	@ 0x40
 800420c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800420e:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8004212:	9101      	str	r1, [sp, #4]
 8004214:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800421e:	6011      	str	r1, [r2, #0]
 8004220:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004222:	930f      	str	r3, [sp, #60]	@ 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004224:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004228:	2310      	movs	r3, #16
 800422a:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800422c:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800422e:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004232:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004234:	23b4      	movs	r3, #180	@ 0xb4
 8004236:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800423a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800423c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800423e:	2202      	movs	r2, #2
 8004240:	2305      	movs	r3, #5
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004242:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004244:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004246:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004248:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800424c:	f002 fc08 	bl	8006a60 <HAL_RCC_OscConfig>
 8004250:	b108      	cbz	r0, 8004256 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004252:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004254:	e7fe      	b.n	8004254 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004256:	f002 fbc7 	bl	80069e8 <HAL_PWREx_EnableOverDrive>
 800425a:	4603      	mov	r3, r0
 800425c:	b108      	cbz	r0, 8004262 <SystemClock_Config+0x7e>
 800425e:	b672      	cpsid	i
  while (1)
 8004260:	e7fe      	b.n	8004260 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004262:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004264:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004268:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800426c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004270:	a803      	add	r0, sp, #12
 8004272:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004274:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004278:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800427a:	f002 fe07 	bl	8006e8c <HAL_RCC_ClockConfig>
 800427e:	b108      	cbz	r0, 8004284 <SystemClock_Config+0xa0>
 8004280:	b672      	cpsid	i
  while (1)
 8004282:	e7fe      	b.n	8004282 <SystemClock_Config+0x9e>
}
 8004284:	b015      	add	sp, #84	@ 0x54
 8004286:	bd30      	pop	{r4, r5, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	40007000 	.word	0x40007000

08004290 <main>:
{
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004294:	4cbe      	ldr	r4, [pc, #760]	@ (8004590 <main+0x300>)
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8004296:	4dbf      	ldr	r5, [pc, #764]	@ (8004594 <main+0x304>)
{
 8004298:	b097      	sub	sp, #92	@ 0x5c
    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 800429a:	2600      	movs	r6, #0
 800429c:	e9c4 6600 	strd	r6, r6, [r4]
 80042a0:	e9c4 6602 	strd	r6, r6, [r4, #8]
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 80042a4:	e9c5 6600 	strd	r6, r6, [r5]
 80042a8:	e9c5 6602 	strd	r6, r6, [r5, #8]
  HAL_Init();
 80042ac:	f001 f852 	bl	8005354 <HAL_Init>
  SystemClock_Config();
 80042b0:	f7ff ff98 	bl	80041e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	e9cd 6611 	strd	r6, r6, [sp, #68]	@ 0x44
 80042b8:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042bc:	4bb6      	ldr	r3, [pc, #728]	@ (8004598 <main+0x308>)
 80042be:	9606      	str	r6, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	9615      	str	r6, [sp, #84]	@ 0x54
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 80042c4:	48b5      	ldr	r0, [pc, #724]	@ (800459c <main+0x30c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c6:	f042 0210 	orr.w	r2, r2, #16
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80042cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ce:	f002 0210 	and.w	r2, r2, #16
 80042d2:	9206      	str	r2, [sp, #24]
 80042d4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80042d6:	9607      	str	r6, [sp, #28]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
 80042e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80042e6:	9207      	str	r2, [sp, #28]
 80042e8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ea:	9608      	str	r6, [sp, #32]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ee:	f042 0204 	orr.w	r2, r2, #4
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f6:	f002 0204 	and.w	r2, r2, #4
 80042fa:	9208      	str	r2, [sp, #32]
 80042fc:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042fe:	9609      	str	r6, [sp, #36]	@ 0x24
 8004300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004302:	f042 0220 	orr.w	r2, r2, #32
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
 8004308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430a:	f002 0220 	and.w	r2, r2, #32
 800430e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004312:	960a      	str	r6, [sp, #40]	@ 0x28
 8004314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
 800431c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800431e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8004322:	920a      	str	r2, [sp, #40]	@ 0x28
 8004324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004326:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004332:	f002 0201 	and.w	r2, r2, #1
 8004336:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	960c      	str	r6, [sp, #48]	@ 0x30
 800433c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433e:	f042 0202 	orr.w	r2, r2, #2
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
 8004344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004346:	f002 0202 	and.w	r2, r2, #2
 800434a:	920c      	str	r2, [sp, #48]	@ 0x30
 800434c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800434e:	960d      	str	r6, [sp, #52]	@ 0x34
 8004350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
 8004358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800435a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800435e:	920d      	str	r2, [sp, #52]	@ 0x34
 8004360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004362:	960e      	str	r6, [sp, #56]	@ 0x38
 8004364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004366:	f042 0208 	orr.w	r2, r2, #8
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8004374:	2201      	movs	r2, #1
 8004376:	f240 71fc 	movw	r1, #2044	@ 0x7fc
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800437a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800437c:	f001 fcf0 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8004380:	4887      	ldr	r0, [pc, #540]	@ (80045a0 <main+0x310>)
 8004382:	2201      	movs	r2, #1
 8004384:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004388:	f001 fcea 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 800438c:	4885      	ldr	r0, [pc, #532]	@ (80045a4 <main+0x314>)
 800438e:	2201      	movs	r2, #1
 8004390:	f242 0133 	movw	r1, #8243	@ 0x2033
 8004394:	f001 fce4 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 8004398:	4632      	mov	r2, r6
 800439a:	4881      	ldr	r0, [pc, #516]	@ (80045a0 <main+0x310>)
 800439c:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80043a0:	f001 fcde 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 80043a4:	4880      	ldr	r0, [pc, #512]	@ (80045a8 <main+0x318>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 80043ac:	f001 fcd8 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 80043b0:	4632      	mov	r2, r6
 80043b2:	487d      	ldr	r0, [pc, #500]	@ (80045a8 <main+0x318>)
 80043b4:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 80043b8:	f001 fcd2 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	4611      	mov	r1, r2
 80043c0:	487a      	ldr	r0, [pc, #488]	@ (80045ac <main+0x31c>)
 80043c2:	f001 fccd 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 80043c6:	4632      	mov	r2, r6
 80043c8:	4878      	ldr	r0, [pc, #480]	@ (80045ac <main+0x31c>)
 80043ca:	2102      	movs	r1, #2
 80043cc:	f001 fcc8 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80043d0:	4632      	mov	r2, r6
 80043d2:	4877      	ldr	r0, [pc, #476]	@ (80045b0 <main+0x320>)
 80043d4:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80043d8:	f001 fcc2 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80043dc:	4875      	ldr	r0, [pc, #468]	@ (80045b4 <main+0x324>)
 80043de:	2201      	movs	r2, #1
 80043e0:	f648 0103 	movw	r1, #34819	@ 0x8803
 80043e4:	f001 fcbc 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80043e8:	4873      	ldr	r0, [pc, #460]	@ (80045b8 <main+0x328>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	2103      	movs	r1, #3
 80043ee:	f001 fcb7 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80043f2:	4632      	mov	r2, r6
 80043f4:	4869      	ldr	r0, [pc, #420]	@ (800459c <main+0x30c>)
 80043f6:	f648 0103 	movw	r1, #34819	@ 0x8803
 80043fa:	f001 fcb1 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 80043fe:	4632      	mov	r2, r6
 8004400:	486c      	ldr	r0, [pc, #432]	@ (80045b4 <main+0x324>)
 8004402:	f244 4138 	movw	r1, #17464	@ 0x4438
 8004406:	f001 fcab 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 800440a:	4869      	ldr	r0, [pc, #420]	@ (80045b0 <main+0x320>)
 800440c:	2201      	movs	r2, #1
 800440e:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8004412:	f001 fca5 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8004416:	4869      	ldr	r0, [pc, #420]	@ (80045bc <main+0x32c>)
 8004418:	2201      	movs	r2, #1
 800441a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800441e:	f001 fc9f 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8004422:	4632      	mov	r2, r6
 8004424:	4865      	ldr	r0, [pc, #404]	@ (80045bc <main+0x32c>)
 8004426:	f640 010c 	movw	r1, #2060	@ 0x80c
 800442a:	f001 fc99 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 800442e:	4632      	mov	r2, r6
 8004430:	4861      	ldr	r0, [pc, #388]	@ (80045b8 <main+0x328>)
 8004432:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8004436:	f001 fc93 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 800443a:	4632      	mov	r2, r6
 800443c:	4859      	ldr	r0, [pc, #356]	@ (80045a4 <main+0x314>)
 800443e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004442:	f001 fc8d 	bl	8005d60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004446:	2701      	movs	r7, #1
 8004448:	f648 73ff 	movw	r3, #36863	@ 0x8fff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800444c:	4853      	ldr	r0, [pc, #332]	@ (800459c <main+0x30c>)
 800444e:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004450:	e9cd 3711 	strd	r3, r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004454:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004458:	f001 fa7c 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800445c:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004460:	484f      	ldr	r0, [pc, #316]	@ (80045a0 <main+0x310>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004464:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800446a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800446c:	f001 fa72 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8004470:	f242 1330 	movw	r3, #8496	@ 0x2130
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004474:	484b      	ldr	r0, [pc, #300]	@ (80045a4 <main+0x314>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004478:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 800447e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004480:	f001 fa68 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8004484:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004488:	4847      	ldr	r0, [pc, #284]	@ (80045a8 <main+0x318>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800448c:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448e:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8004496:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004498:	f001 fa5c 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 800449c:	2304      	movs	r3, #4
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 800449e:	4842      	ldr	r0, [pc, #264]	@ (80045a8 <main+0x318>)
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 80044a0:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 80044a2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a4:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ac:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 80044b0:	f001 fa50 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80044b4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b8:	483b      	ldr	r0, [pc, #236]	@ (80045a8 <main+0x318>)
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80044ba:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044bc:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044be:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044c2:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044c6:	f001 fa45 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80044ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044ce:	4836      	ldr	r0, [pc, #216]	@ (80045a8 <main+0x318>)
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80044d0:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044d2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044d4:	e9cd 7912 	strd	r7, r9, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044dc:	f001 fa3a 	bl	8005954 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80044e0:	4830      	ldr	r0, [pc, #192]	@ (80045a4 <main+0x314>)
 80044e2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	e9cd 9813 	strd	r9, r8, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	e9cd 7711 	strd	r7, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f001 fa32 	bl	8005954 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 80044f0:	482c      	ldr	r0, [pc, #176]	@ (80045a4 <main+0x314>)
 80044f2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f4:	e9cd 9711 	strd	r9, r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f8:	e9cd 7813 	strd	r7, r8, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 80044fc:	f001 fa2a 	bl	8005954 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8004500:	482a      	ldr	r0, [pc, #168]	@ (80045ac <main+0x31c>)
 8004502:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004504:	e9cd 9813 	strd	r9, r8, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004508:	e9cd 7711 	strd	r7, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 800450c:	f001 fa22 	bl	8005954 <HAL_GPIO_Init>
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004510:	4826      	ldr	r0, [pc, #152]	@ (80045ac <main+0x31c>)
 8004512:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004514:	e9cd 6913 	strd	r6, r9, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004518:	e9cd 9711 	strd	r9, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800451c:	f001 fa1a 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8004520:	f24c 030c 	movw	r3, #49164	@ 0xc00c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004524:	4822      	ldr	r0, [pc, #136]	@ (80045b0 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004528:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 800452e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004530:	f001 fa10 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8004534:	f24c 433b 	movw	r3, #50235	@ 0xc43b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	481e      	ldr	r0, [pc, #120]	@ (80045b4 <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8004542:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004544:	f001 fa06 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8004548:	f24e 033f 	movw	r3, #57407	@ 0xe03f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800454c:	481a      	ldr	r0, [pc, #104]	@ (80045b8 <main+0x328>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454e:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004550:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8004556:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004558:	f001 f9fc 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 800455c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8004560:	4814      	ldr	r0, [pc, #80]	@ (80045b4 <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004562:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8004566:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8004568:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456a:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 800456e:	f001 f9f1 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8004572:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004576:	480e      	ldr	r0, [pc, #56]	@ (80045b0 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800457c:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800457e:	e9cd 7912 	strd	r7, r9, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8004582:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004584:	f001 f9e6 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8004588:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800458c:	e018      	b.n	80045c0 <main+0x330>
 800458e:	bf00      	nop
 8004590:	20001964 	.word	0x20001964
 8004594:	20001954 	.word	0x20001954
 8004598:	40023800 	.word	0x40023800
 800459c:	40021000 	.word	0x40021000
 80045a0:	40022000 	.word	0x40022000
 80045a4:	40020800 	.word	0x40020800
 80045a8:	40021400 	.word	0x40021400
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40021c00 	.word	0x40021c00
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40021800 	.word	0x40021800
 80045bc:	40020c00 	.word	0x40020c00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045c0:	48ae      	ldr	r0, [pc, #696]	@ (800487c <main+0x5ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c2:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045c6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 80045c8:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ca:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045ce:	f001 f9c1 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 80045d2:	f640 430c 	movw	r3, #3084	@ 0xc0c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d6:	48aa      	ldr	r0, [pc, #680]	@ (8004880 <main+0x5f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d8:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045da:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 80045e0:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e2:	f001 f9b7 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045e6:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 80045ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ee:	48a4      	ldr	r0, [pc, #656]	@ (8004880 <main+0x5f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045f4:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f8:	f001 f9ac 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CD_Pin;
 80045fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8004600:	489e      	ldr	r0, [pc, #632]	@ (800487c <main+0x5ec>)
  GPIO_InitStruct.Pin = CD_Pin;
 8004602:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8004604:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004606:	e9cd 6712 	strd	r6, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800460a:	f001 f9a3 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 800460e:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004610:	489b      	ldr	r0, [pc, #620]	@ (8004880 <main+0x5f0>)
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8004612:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004614:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800461a:	f001 f99b 	bl	8005954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 800461e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004622:	4898      	ldr	r0, [pc, #608]	@ (8004884 <main+0x5f4>)
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8004624:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004626:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800462c:	f001 f992 	bl	8005954 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004630:	4632      	mov	r2, r6
 8004632:	4631      	mov	r1, r6
 8004634:	2028      	movs	r0, #40	@ 0x28
 8004636:	f001 f8cd 	bl	80057d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800463a:	2028      	movs	r0, #40	@ 0x28
 800463c:	f001 f906 	bl	800584c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8004640:	4891      	ldr	r0, [pc, #580]	@ (8004888 <main+0x5f8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004642:	4b92      	ldr	r3, [pc, #584]	@ (800488c <main+0x5fc>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004644:	6286      	str	r6, [r0, #40]	@ 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004646:	f44f 7982 	mov.w	r9, #260	@ 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800464a:	e9c0 6602 	strd	r6, r6, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800464e:	e9c0 6704 	strd	r6, r7, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004652:	e9c0 6608 	strd	r6, r6, [r0, #32]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004656:	e9c0 3900 	strd	r3, r9, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800465a:	f44f 7800 	mov.w	r8, #512	@ 0x200
 800465e:	2328      	movs	r3, #40	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004660:	260a      	movs	r6, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004662:	e9c0 8306 	strd	r8, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004666:	62c6      	str	r6, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004668:	f002 fd7e 	bl	8007168 <HAL_SPI_Init>
 800466c:	b108      	cbz	r0, 8004672 <main+0x3e2>
 800466e:	b672      	cpsid	i
  while (1)
 8004670:	e7fe      	b.n	8004670 <main+0x3e0>
  hspi2.Instance = SPI2;
 8004672:	4603      	mov	r3, r0
 8004674:	4886      	ldr	r0, [pc, #536]	@ (8004890 <main+0x600>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004676:	e9c0 9301 	strd	r9, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800467a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800467e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8004682:	e9c0 360a 	strd	r3, r6, [r0, #40]	@ 0x28
  hspi2.Instance = SPI2;
 8004686:	4b83      	ldr	r3, [pc, #524]	@ (8004894 <main+0x604>)
 8004688:	6003      	str	r3, [r0, #0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800468a:	2318      	movs	r3, #24
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800468c:	6147      	str	r7, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800468e:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004692:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004694:	f002 fd68 	bl	8007168 <HAL_SPI_Init>
 8004698:	b108      	cbz	r0, 800469e <main+0x40e>
 800469a:	b672      	cpsid	i
  while (1)
 800469c:	e7fe      	b.n	800469c <main+0x40c>
  hi2c2.Instance = I2C2;
 800469e:	4f7e      	ldr	r7, [pc, #504]	@ (8004898 <main+0x608>)
  hi2c2.Init.ClockSpeed = 400000;
 80046a0:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <main+0x60c>)
 80046a2:	f8df b248 	ldr.w	fp, [pc, #584]	@ 80048ec <main+0x65c>
  hi2c2.Init.OwnAddress1 = 0;
 80046a6:	e9c7 0002 	strd	r0, r0, [r7, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80046aa:	e9c7 0005 	strd	r0, r0, [r7, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046ae:	e9c7 0007 	strd	r0, r0, [r7, #28]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046b2:	f44f 4a80 	mov.w	sl, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046b6:	4638      	mov	r0, r7
  hi2c2.Init.ClockSpeed = 400000;
 80046b8:	e9c7 3b00 	strd	r3, fp, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046bc:	f8c7 a010 	str.w	sl, [r7, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046c0:	f001 fd9e 	bl	8006200 <HAL_I2C_Init>
 80046c4:	b108      	cbz	r0, 80046ca <main+0x43a>
 80046c6:	b672      	cpsid	i
  while (1)
 80046c8:	e7fe      	b.n	80046c8 <main+0x438>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046ca:	4601      	mov	r1, r0
 80046cc:	4638      	mov	r0, r7
 80046ce:	f002 f947 	bl	8006960 <HAL_I2CEx_ConfigAnalogFilter>
 80046d2:	4601      	mov	r1, r0
 80046d4:	b108      	cbz	r0, 80046da <main+0x44a>
 80046d6:	b672      	cpsid	i
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <main+0x448>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80046da:	4638      	mov	r0, r7
 80046dc:	f002 f960 	bl	80069a0 <HAL_I2CEx_ConfigDigitalFilter>
 80046e0:	b108      	cbz	r0, 80046e6 <main+0x456>
 80046e2:	b672      	cpsid	i
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <main+0x454>
  hi2c3.Instance = I2C3;
 80046e6:	4f6e      	ldr	r7, [pc, #440]	@ (80048a0 <main+0x610>)
 80046e8:	4b6e      	ldr	r3, [pc, #440]	@ (80048a4 <main+0x614>)
  hi2c3.Init.ClockSpeed = 400000;
 80046ea:	f8c7 b004 	str.w	fp, [r7, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80046ee:	e9c7 0002 	strd	r0, r0, [r7, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80046f2:	e9c7 0005 	strd	r0, r0, [r7, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046f6:	e9c7 0007 	strd	r0, r0, [r7, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80046fa:	4638      	mov	r0, r7
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046fc:	f8c7 a010 	str.w	sl, [r7, #16]
  hi2c3.Instance = I2C3;
 8004700:	603b      	str	r3, [r7, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004702:	f001 fd7d 	bl	8006200 <HAL_I2C_Init>
 8004706:	4601      	mov	r1, r0
 8004708:	b108      	cbz	r0, 800470e <main+0x47e>
 800470a:	b672      	cpsid	i
  while (1)
 800470c:	e7fe      	b.n	800470c <main+0x47c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800470e:	4638      	mov	r0, r7
 8004710:	f002 f926 	bl	8006960 <HAL_I2CEx_ConfigAnalogFilter>
 8004714:	4601      	mov	r1, r0
 8004716:	b108      	cbz	r0, 800471c <main+0x48c>
 8004718:	b672      	cpsid	i
  while (1)
 800471a:	e7fe      	b.n	800471a <main+0x48a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800471c:	4638      	mov	r0, r7
 800471e:	f002 f93f 	bl	80069a0 <HAL_I2CEx_ConfigDigitalFilter>
 8004722:	4603      	mov	r3, r0
 8004724:	b108      	cbz	r0, 800472a <main+0x49a>
 8004726:	b672      	cpsid	i
  while (1)
 8004728:	e7fe      	b.n	8004728 <main+0x498>
  hspi3.Instance = SPI3;
 800472a:	485f      	ldr	r0, [pc, #380]	@ (80048a8 <main+0x618>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800472c:	e9c0 9301 	strd	r9, r3, [r0, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004730:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004734:	e9c0 3805 	strd	r3, r8, [r0, #20]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004738:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCPolynomial = 10;
 800473c:	e9c0 360a 	strd	r3, r6, [r0, #40]	@ 0x28
  hspi3.Instance = SPI3;
 8004740:	4b5a      	ldr	r3, [pc, #360]	@ (80048ac <main+0x61c>)
 8004742:	6003      	str	r3, [r0, #0]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004744:	2320      	movs	r3, #32
 8004746:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004748:	f002 fd0e 	bl	8007168 <HAL_SPI_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	b108      	cbz	r0, 8004754 <main+0x4c4>
 8004750:	b672      	cpsid	i
  while (1)
 8004752:	e7fe      	b.n	8004752 <main+0x4c2>
  hspi4.Instance = SPI4;
 8004754:	4856      	ldr	r0, [pc, #344]	@ (80048b0 <main+0x620>)
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004756:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800475a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800475e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004762:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi4.Instance = SPI4;
 8004764:	4b53      	ldr	r3, [pc, #332]	@ (80048b4 <main+0x624>)
 8004766:	6003      	str	r3, [r0, #0]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004768:	2330      	movs	r3, #48	@ 0x30
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800476a:	f8c0 9004 	str.w	r9, [r0, #4]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800476e:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi4.Init.CRCPolynomial = 10;
 8004772:	62c6      	str	r6, [r0, #44]	@ 0x2c
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004774:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004776:	f002 fcf7 	bl	8007168 <HAL_SPI_Init>
 800477a:	b108      	cbz	r0, 8004780 <main+0x4f0>
 800477c:	b672      	cpsid	i
  while (1)
 800477e:	e7fe      	b.n	800477e <main+0x4ee>
  hcan1.Instance = CAN1;
 8004780:	484d      	ldr	r0, [pc, #308]	@ (80048b8 <main+0x628>)
  hcan1.Init.Prescaler = 10;
 8004782:	4f4e      	ldr	r7, [pc, #312]	@ (80048bc <main+0x62c>)
 8004784:	230a      	movs	r3, #10
 8004786:	e9c0 7300 	strd	r7, r3, [r0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800478a:	2300      	movs	r3, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800478c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004790:	6183      	str	r3, [r0, #24]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004792:	8383      	strh	r3, [r0, #28]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8004794:	f44f 2c40 	mov.w	ip, #786432	@ 0xc0000
 8004798:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800479c:	e9c0 c304 	strd	ip, r3, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80047a0:	f000 fe16 	bl	80053d0 <HAL_CAN_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b108      	cbz	r0, 80047ac <main+0x51c>
 80047a8:	b672      	cpsid	i
  while (1)
 80047aa:	e7fe      	b.n	80047aa <main+0x51a>
  hcan2.Instance = CAN2;
 80047ac:	4844      	ldr	r0, [pc, #272]	@ (80048c0 <main+0x630>)
  hcan2.Init.Prescaler = 16;
 80047ae:	4e45      	ldr	r6, [pc, #276]	@ (80048c4 <main+0x634>)
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80047b0:	6183      	str	r3, [r0, #24]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80047b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80047b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80047ba:	8383      	strh	r3, [r0, #28]
  hcan2.Init.Prescaler = 16;
 80047bc:	2310      	movs	r3, #16
 80047be:	e9c0 6300 	strd	r6, r3, [r0]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80047c2:	f000 fe05 	bl	80053d0 <HAL_CAN_Init>
 80047c6:	b108      	cbz	r0, 80047cc <main+0x53c>
 80047c8:	b672      	cpsid	i
  while (1)
 80047ca:	e7fe      	b.n	80047ca <main+0x53a>
  hi2c1.Instance = I2C1;
 80047cc:	4e3e      	ldr	r6, [pc, #248]	@ (80048c8 <main+0x638>)
  hi2c1.Init.ClockSpeed = 100000;
 80047ce:	493f      	ldr	r1, [pc, #252]	@ (80048cc <main+0x63c>)
 80047d0:	4b3f      	ldr	r3, [pc, #252]	@ (80048d0 <main+0x640>)
  hi2c1.Init.OwnAddress1 = 0;
 80047d2:	e9c6 0002 	strd	r0, r0, [r6, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80047d6:	e9c6 1300 	strd	r1, r3, [r6]
  hi2c1.Init.OwnAddress2 = 0;
 80047da:	e9c6 0005 	strd	r0, r0, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047de:	e9c6 0007 	strd	r0, r0, [r6, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047e6:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047e8:	6133      	str	r3, [r6, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047ea:	f001 fd09 	bl	8006200 <HAL_I2C_Init>
 80047ee:	4601      	mov	r1, r0
 80047f0:	b108      	cbz	r0, 80047f6 <main+0x566>
 80047f2:	b672      	cpsid	i
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <main+0x564>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047f6:	4630      	mov	r0, r6
 80047f8:	f002 f8b2 	bl	8006960 <HAL_I2CEx_ConfigAnalogFilter>
 80047fc:	4601      	mov	r1, r0
 80047fe:	b108      	cbz	r0, 8004804 <main+0x574>
 8004800:	b672      	cpsid	i
  while (1)
 8004802:	e7fe      	b.n	8004802 <main+0x572>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004804:	4630      	mov	r0, r6
 8004806:	f002 f8cb 	bl	80069a0 <HAL_I2CEx_ConfigDigitalFilter>
 800480a:	4603      	mov	r3, r0
 800480c:	b108      	cbz	r0, 8004812 <main+0x582>
 800480e:	b672      	cpsid	i
  while (1)
 8004810:	e7fe      	b.n	8004810 <main+0x580>
  huart2.Instance = USART2;
 8004812:	4830      	ldr	r0, [pc, #192]	@ (80048d4 <main+0x644>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004814:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004818:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
 800481c:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800481e:	4b2e      	ldr	r3, [pc, #184]	@ (80048d8 <main+0x648>)
 8004820:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004824:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 8004826:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800482a:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800482c:	f003 fa60 	bl	8007cf0 <HAL_UART_Init>
 8004830:	4603      	mov	r3, r0
 8004832:	b108      	cbz	r0, 8004838 <main+0x5a8>
 8004834:	b672      	cpsid	i
  while (1)
 8004836:	e7fe      	b.n	8004836 <main+0x5a6>
  huart3.Instance = USART3;
 8004838:	4828      	ldr	r0, [pc, #160]	@ (80048dc <main+0x64c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800483a:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 800483e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004842:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004846:	61c3      	str	r3, [r0, #28]
  huart3.Instance = USART3;
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <main+0x650>)
 800484a:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800484c:	f003 fa50 	bl	8007cf0 <HAL_UART_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	b108      	cbz	r0, 8004858 <main+0x5c8>
 8004854:	b672      	cpsid	i
  while (1)
 8004856:	e7fe      	b.n	8004856 <main+0x5c6>
  huart6.Instance = USART6;
 8004858:	4822      	ldr	r0, [pc, #136]	@ (80048e4 <main+0x654>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 800485e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004862:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004866:	61c3      	str	r3, [r0, #28]
  huart6.Instance = USART6;
 8004868:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <main+0x658>)
 800486a:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800486c:	f003 fa40 	bl	8007cf0 <HAL_UART_Init>
 8004870:	4680      	mov	r8, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d03c      	beq.n	80048f0 <main+0x660>
 8004876:	b672      	cpsid	i
  while (1)
 8004878:	e7fe      	b.n	8004878 <main+0x5e8>
 800487a:	bf00      	nop
 800487c:	40021c00 	.word	0x40021c00
 8004880:	40020c00 	.word	0x40020c00
 8004884:	40021800 	.word	0x40021800
 8004888:	20001448 	.word	0x20001448
 800488c:	40013000 	.word	0x40013000
 8004890:	200013f0 	.word	0x200013f0
 8004894:	40003800 	.word	0x40003800
 8004898:	200014f4 	.word	0x200014f4
 800489c:	40005800 	.word	0x40005800
 80048a0:	200014a0 	.word	0x200014a0
 80048a4:	40005c00 	.word	0x40005c00
 80048a8:	20001398 	.word	0x20001398
 80048ac:	40003c00 	.word	0x40003c00
 80048b0:	20001340 	.word	0x20001340
 80048b4:	40013400 	.word	0x40013400
 80048b8:	200015c4 	.word	0x200015c4
 80048bc:	40006400 	.word	0x40006400
 80048c0:	2000159c 	.word	0x2000159c
 80048c4:	40006800 	.word	0x40006800
 80048c8:	20001548 	.word	0x20001548
 80048cc:	40005400 	.word	0x40005400
 80048d0:	000186a0 	.word	0x000186a0
 80048d4:	20001268 	.word	0x20001268
 80048d8:	40004400 	.word	0x40004400
 80048dc:	20001220 	.word	0x20001220
 80048e0:	40004800 	.word	0x40004800
 80048e4:	200011d8 	.word	0x200011d8
 80048e8:	40011400 	.word	0x40011400
 80048ec:	00061a80 	.word	0x00061a80
  MX_FATFS_Init();
 80048f0:	f003 fd78 	bl	80083e4 <MX_FATFS_Init>
  huart1.Instance = USART1;
 80048f4:	487f      	ldr	r0, [pc, #508]	@ (8004af4 <main+0x864>)
 80048f6:	4b80      	ldr	r3, [pc, #512]	@ (8004af8 <main+0x868>)
 80048f8:	6003      	str	r3, [r0, #0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048fa:	e9c0 8802 	strd	r8, r8, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048fe:	e9c0 8806 	strd	r8, r8, [r0, #24]
  huart1.Init.BaudRate = 115200;
 8004902:	6047      	str	r7, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004904:	6146      	str	r6, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004906:	f8c0 8010 	str.w	r8, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800490a:	f003 f9f1 	bl	8007cf0 <HAL_UART_Init>
 800490e:	4603      	mov	r3, r0
 8004910:	b108      	cbz	r0, 8004916 <main+0x686>
 8004912:	b672      	cpsid	i
  while (1)
 8004914:	e7fe      	b.n	8004914 <main+0x684>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004916:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 800491a:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800491e:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  htim1.Instance = TIM1;
 8004922:	4876      	ldr	r0, [pc, #472]	@ (8004afc <main+0x86c>)
  htim1.Init.Prescaler = 9000-1;
 8004924:	4a76      	ldr	r2, [pc, #472]	@ (8004b00 <main+0x870>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004926:	6083      	str	r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8004928:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800492c:	6183      	str	r3, [r0, #24]
  htim1.Init.Prescaler = 9000-1;
 800492e:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004932:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 65535;
 8004936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800493a:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800493c:	f003 f804 	bl	8007948 <HAL_TIM_Base_Init>
 8004940:	b108      	cbz	r0, 8004946 <main+0x6b6>
 8004942:	b672      	cpsid	i
  while (1)
 8004944:	e7fe      	b.n	8004944 <main+0x6b4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800494a:	486c      	ldr	r0, [pc, #432]	@ (8004afc <main+0x86c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800494c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800494e:	a911      	add	r1, sp, #68	@ 0x44
 8004950:	f003 f8e4 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8004954:	4603      	mov	r3, r0
 8004956:	b108      	cbz	r0, 800495c <main+0x6cc>
 8004958:	b672      	cpsid	i
  while (1)
 800495a:	e7fe      	b.n	800495a <main+0x6ca>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800495c:	4867      	ldr	r0, [pc, #412]	@ (8004afc <main+0x86c>)
 800495e:	a90f      	add	r1, sp, #60	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004960:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004964:	f003 f984 	bl	8007c70 <HAL_TIMEx_MasterConfigSynchronization>
 8004968:	4606      	mov	r6, r0
 800496a:	b108      	cbz	r0, 8004970 <main+0x6e0>
 800496c:	b672      	cpsid	i
  while (1)
 800496e:	e7fe      	b.n	800496e <main+0x6de>
  RTC_Init();
 8004970:	f7ff f98a 	bl	8003c88 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8004974:	f7fc fa18 	bl	8000da8 <LED_Init>
  init_ina229_devices();
 8004978:	f7ff fa06 	bl	8003d88 <init_ina229_devices>
  for (int i = 0; i < NUM_INA229; i++)
 800497c:	4f61      	ldr	r7, [pc, #388]	@ (8004b04 <main+0x874>)
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 800497e:	f857 0b04 	ldr.w	r0, [r7], #4
 8004982:	f7fe fa3d 	bl	8002e00 <INA229_config>
  for (int i = 0; i < NUM_INA229; i++)
 8004986:	3601      	adds	r6, #1
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8004988:	200a      	movs	r0, #10
 800498a:	f000 fd0f 	bl	80053ac <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 800498e:	2e1a      	cmp	r6, #26
 8004990:	d1f5      	bne.n	800497e <main+0x6ee>
  mcu_spiInit(0);
 8004992:	2000      	movs	r0, #0
 8004994:	f7fe fb94 	bl	80030c0 <mcu_spiInit>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8004998:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8004b40 <main+0x8b0>
 800499c:	4f5a      	ldr	r7, [pc, #360]	@ (8004b08 <main+0x878>)
 800499e:	4e5b      	ldr	r6, [pc, #364]	@ (8004b0c <main+0x87c>)
 80049a0:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8004b44 <main+0x8b4>
 80049a4:	f8df a1a0 	ldr.w	sl, [pc, #416]	@ 8004b48 <main+0x8b8>
 80049a8:	f8df b1a0 	ldr.w	fp, [pc, #416]	@ 8004b4c <main+0x8bc>
  HAL_Delay(10);
 80049ac:	200a      	movs	r0, #10
 80049ae:	f000 fcfd 	bl	80053ac <HAL_Delay>
	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80049b2:	4957      	ldr	r1, [pc, #348]	@ (8004b10 <main+0x880>)
 80049b4:	2002      	movs	r0, #2
 80049b6:	f7fe fbc3 	bl	8003140 <LTC6811_init_cfg>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 80049ba:	f8b8 3000 	ldrh.w	r3, [r8]
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	883b      	ldrh	r3, [r7, #0]
 80049c2:	9303      	str	r3, [sp, #12]
 80049c4:	4b53      	ldr	r3, [pc, #332]	@ (8004b14 <main+0x884>)
 80049c6:	f8cd a004 	str.w	sl, [sp, #4]
 80049ca:	f8cd b008 	str.w	fp, [sp, #8]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	7833      	ldrb	r3, [r6, #0]
 80049d2:	f899 2000 	ldrb.w	r2, [r9]
 80049d6:	494e      	ldr	r1, [pc, #312]	@ (8004b10 <main+0x880>)
 80049d8:	2000      	movs	r0, #0
 80049da:	f7fe fbb3 	bl	8003144 <LTC6811_set_cfgr>
 80049de:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80049e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004b14 <main+0x884>)
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f8b8 3000 	ldrh.w	r3, [r8]
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	8839      	ldrh	r1, [r7, #0]
 80049ee:	7833      	ldrb	r3, [r6, #0]
 80049f0:	f899 2000 	ldrb.w	r2, [r9]
 80049f4:	9103      	str	r1, [sp, #12]
 80049f6:	2001      	movs	r0, #1
 80049f8:	4945      	ldr	r1, [pc, #276]	@ (8004b10 <main+0x880>)
 80049fa:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8004b50 <main+0x8c0>
 80049fe:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8004b54 <main+0x8c4>
 8004a02:	4f45      	ldr	r7, [pc, #276]	@ (8004b18 <main+0x888>)
		  HAL_TIM_Base_Stop_IT(&htim1);
 8004a04:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004afc <main+0x86c>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8004a08:	f7fe fb9c 	bl	8003144 <LTC6811_set_cfgr>
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8004a0c:	4940      	ldr	r1, [pc, #256]	@ (8004b10 <main+0x880>)
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fe fb8c 	bl	800312c <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8004a14:	493e      	ldr	r1, [pc, #248]	@ (8004b10 <main+0x880>)
 8004a16:	2002      	movs	r0, #2
 8004a18:	f7fe fb90 	bl	800313c <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8004a1c:	493c      	ldr	r1, [pc, #240]	@ (8004b10 <main+0x880>)
 8004a1e:	2002      	movs	r0, #2
 8004a20:	f7fe fb6c 	bl	80030fc <LTC6811_init_reg_limits>
  Display_Init();
 8004a24:	f7fc fe88 	bl	8001738 <Display_Init>
  Display_MainTitlePage();
 8004a28:	f7fc feae 	bl	8001788 <Display_MainTitlePage>
  Expander_InitAllDevices(&hi2c2);
 8004a2c:	483b      	ldr	r0, [pc, #236]	@ (8004b1c <main+0x88c>)
 8004a2e:	f7fe f825 	bl	8002a7c <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8004a32:	483b      	ldr	r0, [pc, #236]	@ (8004b20 <main+0x890>)
 8004a34:	f7fe f822 	bl	8002a7c <Expander_InitAllDevices>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8004a38:	493a      	ldr	r1, [pc, #232]	@ (8004b24 <main+0x894>)
 8004a3a:	482e      	ldr	r0, [pc, #184]	@ (8004af4 <main+0x864>)
 8004a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a40:	f003 fa6c 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8004a44:	4938      	ldr	r1, [pc, #224]	@ (8004b28 <main+0x898>)
 8004a46:	4839      	ldr	r0, [pc, #228]	@ (8004b2c <main+0x89c>)
 8004a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a4c:	f003 fa66 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8004a50:	4937      	ldr	r1, [pc, #220]	@ (8004b30 <main+0x8a0>)
 8004a52:	4838      	ldr	r0, [pc, #224]	@ (8004b34 <main+0x8a4>)
 8004a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a58:	f003 fa60 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8004a5c:	4936      	ldr	r1, [pc, #216]	@ (8004b38 <main+0x8a8>)
 8004a5e:	4837      	ldr	r0, [pc, #220]	@ (8004b3c <main+0x8ac>)
 8004a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a64:	f003 fa5a 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8004a68:	4824      	ldr	r0, [pc, #144]	@ (8004afc <main+0x86c>)
 8004a6a:	f003 f805 	bl	8007a78 <HAL_TIM_Base_Start_IT>
	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004a6e:	2600      	movs	r6, #0
	  if (modebus_rx_flag == 1 )
 8004a70:	f898 3000 	ldrb.w	r3, [r8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d115      	bne.n	8004aa4 <main+0x814>
		    HAL_Delay(500);
 8004a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a7c:	f000 fc96 	bl	80053ac <HAL_Delay>
	        tester_setup();
 8004a80:	f7ff fac6 	bl	8004010 <tester_setup>
		  flag_1 = 5 ;
 8004a84:	2305      	movs	r3, #5
		  HAL_TIM_Base_Stop_IT(&htim1);
 8004a86:	4648      	mov	r0, r9
	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004a88:	e9c4 6600 	strd	r6, r6, [r4]
 8004a8c:	e9c4 6602 	strd	r6, r6, [r4, #8]
	    	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8004a90:	e9c5 6600 	strd	r6, r6, [r5]
 8004a94:	e9c5 6602 	strd	r6, r6, [r5, #8]
		  modebus_rx_flag = 0 ;
 8004a98:	f888 6000 	strb.w	r6, [r8]
		  flag_1 = 5 ;
 8004a9c:	f88a 3000 	strb.w	r3, [sl]
		  HAL_TIM_Base_Stop_IT(&htim1);
 8004aa0:	f003 f824 	bl	8007aec <HAL_TIM_Base_Stop_IT>
		  cell12_Temp_01_Set(resistance[0]);
 8004aa4:	edd7 7a00 	vldr	s15, [r7]
 8004aa8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004aac:	f7fc f9ea 	bl	8000e84 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8004ab0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ab4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ab8:	f7fc fa7e 	bl	8000fb8 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8004abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ac0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ac4:	f7fc fb1a 	bl	80010fc <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8004ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004acc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ad0:	f7fc fbac 	bl	800122c <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8004ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ad8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004adc:	f7fc fc48 	bl	8001370 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8004ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ae4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ae8:	f7fc fce4 	bl	80014b4 <cell11_Temp_03_Set>
		  Voltage_Sequence_Automatic();
 8004aec:	f7ff fa30 	bl	8003f50 <Voltage_Sequence_Automatic>
	  if (modebus_rx_flag == 1 )
 8004af0:	e7be      	b.n	8004a70 <main+0x7e0>
 8004af2:	bf00      	nop
 8004af4:	200012b0 	.word	0x200012b0
 8004af8:	40011000 	.word	0x40011000
 8004afc:	200012f8 	.word	0x200012f8
 8004b00:	40010000 	.word	0x40010000
 8004b04:	200015ec 	.word	0x200015ec
 8004b08:	200008ae 	.word	0x200008ae
 8004b0c:	20000fcc 	.word	0x20000fcc
 8004b10:	20000fd0 	.word	0x20000fd0
 8004b14:	200008b0 	.word	0x200008b0
 8004b18:	200008b8 	.word	0x200008b8
 8004b1c:	200014f4 	.word	0x200014f4
 8004b20:	200014a0 	.word	0x200014a0
 8004b24:	20001964 	.word	0x20001964
 8004b28:	20001854 	.word	0x20001854
 8004b2c:	20001268 	.word	0x20001268
 8004b30:	20001754 	.word	0x20001754
 8004b34:	20001220 	.word	0x20001220
 8004b38:	20001654 	.word	0x20001654
 8004b3c:	200011d8 	.word	0x200011d8
 8004b40:	200008ac 	.word	0x200008ac
 8004b44:	200008b5 	.word	0x200008b5
 8004b48:	20000fc0 	.word	0x20000fc0
 8004b4c:	200008a8 	.word	0x200008a8
 8004b50:	20001975 	.word	0x20001975
 8004b54:	20001974 	.word	0x20001974

08004b58 <HAL_GPIO_EXTI_Callback>:
    Push_ButtonHandler(GPIO_Pin);
 8004b58:	f7fc b964 	b.w	8000e24 <Push_ButtonHandler>

08004b5c <HAL_UARTEx_RxEventCallback>:
{
 8004b5c:	b508      	push	{r3, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 8004b5e:	490d      	ldr	r1, [pc, #52]	@ (8004b94 <HAL_UARTEx_RxEventCallback+0x38>)
 8004b60:	480d      	ldr	r0, [pc, #52]	@ (8004b98 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004b62:	2210      	movs	r2, #16
 8004b64:	f003 f9da 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 8004b68:	490c      	ldr	r1, [pc, #48]	@ (8004b9c <HAL_UARTEx_RxEventCallback+0x40>)
 8004b6a:	480d      	ldr	r0, [pc, #52]	@ (8004ba0 <HAL_UARTEx_RxEventCallback+0x44>)
 8004b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b70:	f003 f9d4 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 8004b74:	490b      	ldr	r1, [pc, #44]	@ (8004ba4 <HAL_UARTEx_RxEventCallback+0x48>)
 8004b76:	480c      	ldr	r0, [pc, #48]	@ (8004ba8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004b78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b7c:	f003 f9ce 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 8004b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b84:	4909      	ldr	r1, [pc, #36]	@ (8004bac <HAL_UARTEx_RxEventCallback+0x50>)
 8004b86:	480a      	ldr	r0, [pc, #40]	@ (8004bb0 <HAL_UARTEx_RxEventCallback+0x54>)
 8004b88:	f003 f9c8 	bl	8007f1c <HAL_UARTEx_ReceiveToIdle_IT>
	modebus_rx_flag = 1 ;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
}
 8004b92:	bd08      	pop	{r3, pc}
 8004b94:	20001964 	.word	0x20001964
 8004b98:	200012b0 	.word	0x200012b0
 8004b9c:	20001854 	.word	0x20001854
 8004ba0:	20001268 	.word	0x20001268
 8004ba4:	20001754 	.word	0x20001754
 8004ba8:	20001220 	.word	0x20001220
 8004bac:	20001654 	.word	0x20001654
 8004bb0:	200011d8 	.word	0x200011d8
 8004bb4:	20001975 	.word	0x20001975

08004bb8 <Error_Handler>:
 8004bb8:	b672      	cpsid	i
  while (1)
 8004bba:	e7fe      	b.n	8004bba <Error_Handler+0x2>

08004bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bbc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <HAL_MspInit+0x34>)
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	9100      	str	r1, [sp, #0]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bca:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bce:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004bd2:	9200      	str	r2, [sp, #0]
 8004bd4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	9101      	str	r1, [sp, #4]
 8004bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bea:	b002      	add	sp, #8
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004bf8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8004bfa:	6802      	ldr	r2, [r0, #0]
 8004bfc:	4944      	ldr	r1, [pc, #272]	@ (8004d10 <HAL_CAN_MspInit+0x118>)
{
 8004bfe:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 8004c02:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004c08:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004c0c:	930a      	str	r3, [sp, #40]	@ 0x28
  if(hcan->Instance==CAN1)
 8004c0e:	d02f      	beq.n	8004c70 <HAL_CAN_MspInit+0x78>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 8004c10:	4940      	ldr	r1, [pc, #256]	@ (8004d14 <HAL_CAN_MspInit+0x11c>)
 8004c12:	428a      	cmp	r2, r1
 8004c14:	d001      	beq.n	8004c1a <HAL_CAN_MspInit+0x22>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004c16:	b00d      	add	sp, #52	@ 0x34
 8004c18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d18 <HAL_CAN_MspInit+0x120>)
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c20:	483e      	ldr	r0, [pc, #248]	@ (8004d1c <HAL_CAN_MspInit+0x124>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c22:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8004c26:	6411      	str	r1, [r2, #64]	@ 0x40
 8004c28:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8004c2a:	f001 6180 	and.w	r1, r1, #67108864	@ 0x4000000
 8004c2e:	9103      	str	r1, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c30:	6801      	ldr	r1, [r0, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c32:	9c03      	ldr	r4, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c34:	3101      	adds	r1, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c36:	2901      	cmp	r1, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c38:	6001      	str	r1, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c3a:	d055      	beq.n	8004ce8 <HAL_CAN_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3c:	4b36      	ldr	r3, [pc, #216]	@ (8004d18 <HAL_CAN_MspInit+0x120>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	9205      	str	r2, [sp, #20]
 8004c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c44:	f042 0202 	orr.w	r2, r2, #2
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c4c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8004d00 <HAL_CAN_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	9805      	ldr	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c58:	4831      	ldr	r0, [pc, #196]	@ (8004d20 <HAL_CAN_MspInit+0x128>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c60:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c66:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c68:	f000 fe74 	bl	8005954 <HAL_GPIO_Init>
}
 8004c6c:	b00d      	add	sp, #52	@ 0x34
 8004c6e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c70:	492a      	ldr	r1, [pc, #168]	@ (8004d1c <HAL_CAN_MspInit+0x124>)
 8004c72:	680a      	ldr	r2, [r1, #0]
 8004c74:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c76:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c78:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c7a:	d029      	beq.n	8004cd0 <HAL_CAN_MspInit+0xd8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c7c:	2400      	movs	r4, #0
 8004c7e:	4b26      	ldr	r3, [pc, #152]	@ (8004d18 <HAL_CAN_MspInit+0x120>)
 8004c80:	9402      	str	r4, [sp, #8]
 8004c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c84:	4827      	ldr	r0, [pc, #156]	@ (8004d24 <HAL_CAN_MspInit+0x12c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c8e:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 8004d08 <HAL_CAN_MspInit+0x110>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c98:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9a:	2309      	movs	r3, #9
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ca2:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca6:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca8:	f000 fe54 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004cac:	4622      	mov	r2, r4
 8004cae:	4621      	mov	r1, r4
 8004cb0:	2014      	movs	r0, #20
 8004cb2:	f000 fd8f 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004cb6:	2014      	movs	r0, #20
 8004cb8:	f000 fdc8 	bl	800584c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	2015      	movs	r0, #21
 8004cc2:	f000 fd87 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004cc6:	2015      	movs	r0, #21
 8004cc8:	f000 fdc0 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 8004ccc:	b00d      	add	sp, #52	@ 0x34
 8004cce:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004cd0:	4a11      	ldr	r2, [pc, #68]	@ (8004d18 <HAL_CAN_MspInit+0x120>)
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cdc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	e7c9      	b.n	8004c7c <HAL_CAN_MspInit+0x84>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004ce8:	9304      	str	r3, [sp, #16]
 8004cea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	9304      	str	r3, [sp, #16]
 8004cfa:	9b04      	ldr	r3, [sp, #16]
 8004cfc:	e79e      	b.n	8004c3c <HAL_CAN_MspInit+0x44>
 8004cfe:	bf00      	nop
 8004d00:	00003000 	.word	0x00003000
 8004d04:	00000002 	.word	0x00000002
 8004d08:	00000003 	.word	0x00000003
 8004d0c:	00000002 	.word	0x00000002
 8004d10:	40006400 	.word	0x40006400
 8004d14:	40006800 	.word	0x40006800
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	20001978 	.word	0x20001978
 8004d20:	40020400 	.word	0x40020400
 8004d24:	40020c00 	.word	0x40020c00

08004d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d28:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8004d2a:	6803      	ldr	r3, [r0, #0]
 8004d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e28 <HAL_I2C_MspInit+0x100>)
{
 8004d2e:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8004d32:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004d38:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004d3c:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hi2c->Instance==I2C1)
 8004d3e:	d007      	beq.n	8004d50 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004d40:	4a3a      	ldr	r2, [pc, #232]	@ (8004e2c <HAL_I2C_MspInit+0x104>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d028      	beq.n	8004d98 <HAL_I2C_MspInit+0x70>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8004d46:	4a3a      	ldr	r2, [pc, #232]	@ (8004e30 <HAL_I2C_MspInit+0x108>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d048      	beq.n	8004dde <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004d4c:	b00d      	add	sp, #52	@ 0x34
 8004d4e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d50:	4d38      	ldr	r5, [pc, #224]	@ (8004e34 <HAL_I2C_MspInit+0x10c>)
 8004d52:	9400      	str	r4, [sp, #0]
 8004d54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	632b      	str	r3, [r5, #48]	@ 0x30
 8004d5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d64:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004d68:	2312      	movs	r3, #18
 8004d6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	9800      	ldr	r0, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d70:	4831      	ldr	r0, [pc, #196]	@ (8004e38 <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	2203      	movs	r2, #3
 8004d74:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d76:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7c:	f000 fdea 	bl	8005954 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d80:	9401      	str	r4, [sp, #4]
 8004d82:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d88:	642b      	str	r3, [r5, #64]	@ 0x40
 8004d8a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	9b01      	ldr	r3, [sp, #4]
}
 8004d94:	b00d      	add	sp, #52	@ 0x34
 8004d96:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d98:	4d26      	ldr	r5, [pc, #152]	@ (8004e34 <HAL_I2C_MspInit+0x10c>)
 8004d9a:	9402      	str	r4, [sp, #8]
 8004d9c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da2:	632b      	str	r3, [r5, #48]	@ 0x30
 8004da4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004dac:	2230      	movs	r2, #48	@ 0x30
 8004dae:	2312      	movs	r3, #18
 8004db0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004db4:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004db6:	4821      	ldr	r0, [pc, #132]	@ (8004e3c <HAL_I2C_MspInit+0x114>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db8:	2203      	movs	r2, #3
 8004dba:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dbc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dbe:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dc2:	f000 fdc7 	bl	8005954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004dc6:	9403      	str	r4, [sp, #12]
 8004dc8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004dca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dce:	642b      	str	r3, [r5, #64]	@ 0x40
 8004dd0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	9b03      	ldr	r3, [sp, #12]
}
 8004dda:	b00d      	add	sp, #52	@ 0x34
 8004ddc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dde:	4d15      	ldr	r5, [pc, #84]	@ (8004e34 <HAL_I2C_MspInit+0x10c>)
 8004de0:	9404      	str	r4, [sp, #16]
 8004de2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de8:	632b      	str	r3, [r5, #48]	@ 0x30
 8004dea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004df2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004df6:	2312      	movs	r3, #18
 8004df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dfc:	9804      	ldr	r0, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dfe:	480f      	ldr	r0, [pc, #60]	@ (8004e3c <HAL_I2C_MspInit+0x114>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e00:	2203      	movs	r2, #3
 8004e02:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e04:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e06:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e0a:	f000 fda3 	bl	8005954 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e0e:	9405      	str	r4, [sp, #20]
 8004e10:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e16:	642b      	str	r3, [r5, #64]	@ 0x40
 8004e18:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	9b05      	ldr	r3, [sp, #20]
}
 8004e22:	b00d      	add	sp, #52	@ 0x34
 8004e24:	bd30      	pop	{r4, r5, pc}
 8004e26:	bf00      	nop
 8004e28:	40005400 	.word	0x40005400
 8004e2c:	40005800 	.word	0x40005800
 8004e30:	40005c00 	.word	0x40005c00
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40020400 	.word	0x40020400
 8004e3c:	40021c00 	.word	0x40021c00

08004e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e40:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8004e42:	6802      	ldr	r2, [r0, #0]
 8004e44:	495a      	ldr	r1, [pc, #360]	@ (8004fb0 <HAL_SPI_MspInit+0x170>)
{
 8004e46:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8004e4a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004e50:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8004e54:	930c      	str	r3, [sp, #48]	@ 0x30
  if(hspi->Instance==SPI1)
 8004e56:	d03d      	beq.n	8004ed4 <HAL_SPI_MspInit+0x94>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8004e58:	4956      	ldr	r1, [pc, #344]	@ (8004fb4 <HAL_SPI_MspInit+0x174>)
 8004e5a:	428a      	cmp	r2, r1
 8004e5c:	d05d      	beq.n	8004f1a <HAL_SPI_MspInit+0xda>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8004e5e:	4956      	ldr	r1, [pc, #344]	@ (8004fb8 <HAL_SPI_MspInit+0x178>)
 8004e60:	428a      	cmp	r2, r1
 8004e62:	d07d      	beq.n	8004f60 <HAL_SPI_MspInit+0x120>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8004e64:	4955      	ldr	r1, [pc, #340]	@ (8004fbc <HAL_SPI_MspInit+0x17c>)
 8004e66:	428a      	cmp	r2, r1
 8004e68:	d001      	beq.n	8004e6e <HAL_SPI_MspInit+0x2e>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004e6a:	b00f      	add	sp, #60	@ 0x3c
 8004e6c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004e6e:	4a54      	ldr	r2, [pc, #336]	@ (8004fc0 <HAL_SPI_MspInit+0x180>)
 8004e70:	9306      	str	r3, [sp, #24]
 8004e72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e74:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8004e78:	6451      	str	r1, [r2, #68]	@ 0x44
 8004e7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e7c:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8004e80:	9106      	str	r1, [sp, #24]
 8004e82:	9906      	ldr	r1, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e84:	9307      	str	r3, [sp, #28]
 8004e86:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004e88:	f043 0310 	orr.w	r3, r3, #16
 8004e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e8e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004e90:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 8004e94:	2102      	movs	r1, #2
 8004e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e9a:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e9e:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ea2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea4:	2503      	movs	r5, #3
 8004ea6:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ea8:	a908      	add	r1, sp, #32
 8004eaa:	f500 30e0 	add.w	r0, r0, #114688	@ 0x1c000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eae:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eb4:	f000 fd4e 	bl	8005954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ec2:	4840      	ldr	r0, [pc, #256]	@ (8004fc4 <HAL_SPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004ec4:	940c      	str	r4, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ec8:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eca:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ece:	f000 fd41 	bl	8005954 <HAL_GPIO_Init>
}
 8004ed2:	e7ca      	b.n	8004e6a <HAL_SPI_MspInit+0x2a>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <HAL_SPI_MspInit+0x180>)
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8004eda:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8004ede:	6450      	str	r0, [r2, #68]	@ 0x44
 8004ee0:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8004ee2:	f400 5080 	and.w	r0, r0, #4096	@ 0x1000
 8004ee6:	9000      	str	r0, [sp, #0]
 8004ee8:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eee:	4836      	ldr	r0, [pc, #216]	@ (8004fc8 <HAL_SPI_MspInit+0x188>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ef6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ef8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8004fa8 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f02:	2203      	movs	r2, #3
 8004f04:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f06:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f08:	ed8d 7b08 	vstr	d7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f0c:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f10:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f12:	f000 fd1f 	bl	8005954 <HAL_GPIO_Init>
}
 8004f16:	b00f      	add	sp, #60	@ 0x3c
 8004f18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f1a:	4a29      	ldr	r2, [pc, #164]	@ (8004fc0 <HAL_SPI_MspInit+0x180>)
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f20:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8004f24:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f26:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f28:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f34:	4825      	ldr	r0, [pc, #148]	@ (8004fcc <HAL_SPI_MspInit+0x18c>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f3c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f44:	2203      	movs	r2, #3
 8004f46:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f48:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004f4a:	240e      	movs	r4, #14
 8004f4c:	2502      	movs	r5, #2
 8004f4e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f52:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f56:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f58:	f000 fcfc 	bl	8005954 <HAL_GPIO_Init>
}
 8004f5c:	b00f      	add	sp, #60	@ 0x3c
 8004f5e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004f60:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <HAL_SPI_MspInit+0x180>)
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f66:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004f6a:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f6c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f6e:	f400 4000 	and.w	r0, r0, #32768	@ 0x8000
 8004f72:	9004      	str	r0, [sp, #16]
 8004f74:	9804      	ldr	r0, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7a:	4815      	ldr	r0, [pc, #84]	@ (8004fd0 <HAL_SPI_MspInit+0x190>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f82:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f90:	f44f 54e0 	mov.w	r4, #7168	@ 0x1c00
 8004f94:	2502      	movs	r5, #2
 8004f96:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9a:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f9e:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa0:	f000 fcd8 	bl	8005954 <HAL_GPIO_Init>
}
 8004fa4:	b00f      	add	sp, #60	@ 0x3c
 8004fa6:	bd30      	pop	{r4, r5, pc}
 8004fa8:	000000e0 	.word	0x000000e0
 8004fac:	00000002 	.word	0x00000002
 8004fb0:	40013000 	.word	0x40013000
 8004fb4:	40003800 	.word	0x40003800
 8004fb8:	40003c00 	.word	0x40003c00
 8004fbc:	40013400 	.word	0x40013400
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40020000 	.word	0x40020000
 8004fcc:	40022000 	.word	0x40022000
 8004fd0:	40020800 	.word	0x40020800

08004fd4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005000 <HAL_TIM_Base_MspInit+0x2c>)
 8004fd6:	6802      	ldr	r2, [r0, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d000      	beq.n	8004fde <HAL_TIM_Base_MspInit+0xa>
 8004fdc:	4770      	bx	lr
{
 8004fde:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fe0:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	9201      	str	r2, [sp, #4]
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004ffa:	b002      	add	sp, #8
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	00000000 	.word	0x00000000

08005008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005008:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800500a:	6803      	ldr	r3, [r0, #0]
 800500c:	4a66      	ldr	r2, [pc, #408]	@ (80051a8 <HAL_UART_MspInit+0x1a0>)
{
 800500e:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005010:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8005012:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005014:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005018:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800501c:	940c      	str	r4, [sp, #48]	@ 0x30
  if(huart->Instance==USART1)
 800501e:	d035      	beq.n	800508c <HAL_UART_MspInit+0x84>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005020:	4a62      	ldr	r2, [pc, #392]	@ (80051ac <HAL_UART_MspInit+0x1a4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d05d      	beq.n	80050e2 <HAL_UART_MspInit+0xda>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005026:	4a62      	ldr	r2, [pc, #392]	@ (80051b0 <HAL_UART_MspInit+0x1a8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	f000 8085 	beq.w	8005138 <HAL_UART_MspInit+0x130>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800502e:	4a61      	ldr	r2, [pc, #388]	@ (80051b4 <HAL_UART_MspInit+0x1ac>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d001      	beq.n	8005038 <HAL_UART_MspInit+0x30>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005034:	b00f      	add	sp, #60	@ 0x3c
 8005036:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8005038:	4b5f      	ldr	r3, [pc, #380]	@ (80051b8 <HAL_UART_MspInit+0x1b0>)
 800503a:	9406      	str	r4, [sp, #24]
 800503c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	485f      	ldr	r0, [pc, #380]	@ (80051bc <HAL_UART_MspInit+0x1b4>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8005040:	f042 0220 	orr.w	r2, r2, #32
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
 8005046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005048:	f002 0220 	and.w	r2, r2, #32
 800504c:	9206      	str	r2, [sp, #24]
 800504e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005050:	9407      	str	r4, [sp, #28]
 8005052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005054:	f042 0204 	orr.w	r2, r2, #4
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800505c:	ed9f 7b4c 	vldr	d7, [pc, #304]	@ 8005190 <HAL_UART_MspInit+0x188>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005066:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2308      	movs	r3, #8
 800506a:	2203      	movs	r2, #3
 800506c:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005070:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005074:	9d07      	ldr	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	f000 fc6d 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800507a:	4622      	mov	r2, r4
 800507c:	4621      	mov	r1, r4
 800507e:	2047      	movs	r0, #71	@ 0x47
 8005080:	f000 fba8 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005084:	2047      	movs	r0, #71	@ 0x47
 8005086:	f000 fbe1 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 800508a:	e7d3      	b.n	8005034 <HAL_UART_MspInit+0x2c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800508c:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <HAL_UART_MspInit+0x1b0>)
 800508e:	9400      	str	r4, [sp, #0]
 8005090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005092:	484b      	ldr	r0, [pc, #300]	@ (80051c0 <HAL_UART_MspInit+0x1b8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005094:	f042 0210 	orr.w	r2, r2, #16
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
 800509a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509c:	f002 0210 	and.w	r2, r2, #16
 80050a0:	9200      	str	r2, [sp, #0]
 80050a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a4:	9401      	str	r4, [sp, #4]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a8:	f042 0202 	orr.w	r2, r2, #2
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050b0:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8005190 <HAL_UART_MspInit+0x188>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ba:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050bc:	2307      	movs	r3, #7
 80050be:	2203      	movs	r2, #3
 80050c0:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050c4:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c8:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ca:	f000 fc43 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050ce:	4622      	mov	r2, r4
 80050d0:	4621      	mov	r1, r4
 80050d2:	2025      	movs	r0, #37	@ 0x25
 80050d4:	f000 fb7e 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050d8:	2025      	movs	r0, #37	@ 0x25
 80050da:	f000 fbb7 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 80050de:	b00f      	add	sp, #60	@ 0x3c
 80050e0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80050e2:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <HAL_UART_MspInit+0x1b0>)
 80050e4:	9402      	str	r4, [sp, #8]
 80050e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e8:	4836      	ldr	r0, [pc, #216]	@ (80051c4 <HAL_UART_MspInit+0x1bc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80050ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80050ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80050f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050f2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80050f6:	9202      	str	r2, [sp, #8]
 80050f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fa:	9403      	str	r4, [sp, #12]
 80050fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005106:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8005198 <HAL_UART_MspInit+0x190>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005110:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005112:	2307      	movs	r3, #7
 8005114:	2203      	movs	r2, #3
 8005116:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800511a:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005120:	f000 fc18 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005124:	4622      	mov	r2, r4
 8005126:	4621      	mov	r1, r4
 8005128:	2026      	movs	r0, #38	@ 0x26
 800512a:	f000 fb53 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800512e:	2026      	movs	r0, #38	@ 0x26
 8005130:	f000 fb8c 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 8005134:	b00f      	add	sp, #60	@ 0x3c
 8005136:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8005138:	4b1f      	ldr	r3, [pc, #124]	@ (80051b8 <HAL_UART_MspInit+0x1b0>)
 800513a:	9404      	str	r4, [sp, #16]
 800513c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800513e:	4822      	ldr	r0, [pc, #136]	@ (80051c8 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005140:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005144:	641a      	str	r2, [r3, #64]	@ 0x40
 8005146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005148:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800514c:	9204      	str	r2, [sp, #16]
 800514e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005150:	9405      	str	r4, [sp, #20]
 8005152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005154:	f042 0208 	orr.w	r2, r2, #8
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800515c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80051a0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005166:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005168:	2307      	movs	r3, #7
 800516a:	2203      	movs	r2, #3
 800516c:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005170:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005174:	9d05      	ldr	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005176:	f000 fbed 	bl	8005954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800517a:	4622      	mov	r2, r4
 800517c:	4621      	mov	r1, r4
 800517e:	2027      	movs	r0, #39	@ 0x27
 8005180:	f000 fb28 	bl	80057d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005184:	2027      	movs	r0, #39	@ 0x27
 8005186:	f000 fb61 	bl	800584c <HAL_NVIC_EnableIRQ>
}
 800518a:	b00f      	add	sp, #60	@ 0x3c
 800518c:	bd30      	pop	{r4, r5, pc}
 800518e:	bf00      	nop
 8005190:	000000c0 	.word	0x000000c0
 8005194:	00000002 	.word	0x00000002
 8005198:	0000000c 	.word	0x0000000c
 800519c:	00000002 	.word	0x00000002
 80051a0:	00000300 	.word	0x00000300
 80051a4:	00000002 	.word	0x00000002
 80051a8:	40011000 	.word	0x40011000
 80051ac:	40004400 	.word	0x40004400
 80051b0:	40004800 	.word	0x40004800
 80051b4:	40011400 	.word	0x40011400
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40020800 	.word	0x40020800
 80051c0:	40020400 	.word	0x40020400
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40020c00 	.word	0x40020c00

080051cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051cc:	e7fe      	b.n	80051cc <NMI_Handler>
 80051ce:	bf00      	nop

080051d0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d0:	e7fe      	b.n	80051d0 <HardFault_Handler>
 80051d2:	bf00      	nop

080051d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d4:	e7fe      	b.n	80051d4 <MemManage_Handler>
 80051d6:	bf00      	nop

080051d8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d8:	e7fe      	b.n	80051d8 <BusFault_Handler>
 80051da:	bf00      	nop

080051dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051dc:	e7fe      	b.n	80051dc <UsageFault_Handler>
 80051de:	bf00      	nop

080051e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop

080051e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ec:	f000 b8cc 	b.w	8005388 <HAL_IncTick>

080051f0 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80051f0:	4801      	ldr	r0, [pc, #4]	@ (80051f8 <CAN1_RX0_IRQHandler+0x8>)
 80051f2:	f000 b987 	b.w	8005504 <HAL_CAN_IRQHandler>
 80051f6:	bf00      	nop
 80051f8:	200015c4 	.word	0x200015c4

080051fc <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <CAN1_RX1_IRQHandler+0x8>)
 80051fe:	f000 b981 	b.w	8005504 <HAL_CAN_IRQHandler>
 8005202:	bf00      	nop
 8005204:	200015c4 	.word	0x200015c4

08005208 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005208:	4801      	ldr	r0, [pc, #4]	@ (8005210 <USART1_IRQHandler+0x8>)
 800520a:	f002 bf39 	b.w	8008080 <HAL_UART_IRQHandler>
 800520e:	bf00      	nop
 8005210:	200012b0 	.word	0x200012b0

08005214 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005214:	4801      	ldr	r0, [pc, #4]	@ (800521c <USART2_IRQHandler+0x8>)
 8005216:	f002 bf33 	b.w	8008080 <HAL_UART_IRQHandler>
 800521a:	bf00      	nop
 800521c:	20001268 	.word	0x20001268

08005220 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005220:	4801      	ldr	r0, [pc, #4]	@ (8005228 <USART3_IRQHandler+0x8>)
 8005222:	f002 bf2d 	b.w	8008080 <HAL_UART_IRQHandler>
 8005226:	bf00      	nop
 8005228:	20001220 	.word	0x20001220

0800522c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800522c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 800522e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005232:	f000 fda3 	bl	8005d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 8005236:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800523a:	f000 fd9f 	bl	8005d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 800523e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005242:	f000 fd9b 	bl	8005d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 800524a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800524e:	f000 bd95 	b.w	8005d7c <HAL_GPIO_EXTI_IRQHandler>
 8005252:	bf00      	nop

08005254 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005254:	4801      	ldr	r0, [pc, #4]	@ (800525c <USART6_IRQHandler+0x8>)
 8005256:	f002 bf13 	b.w	8008080 <HAL_UART_IRQHandler>
 800525a:	bf00      	nop
 800525c:	200011d8 	.word	0x200011d8

08005260 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005260:	490c      	ldr	r1, [pc, #48]	@ (8005294 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005262:	4a0d      	ldr	r2, [pc, #52]	@ (8005298 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005264:	680b      	ldr	r3, [r1, #0]
{
 8005266:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005268:	4c0c      	ldr	r4, [pc, #48]	@ (800529c <_sbrk+0x3c>)
 800526a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800526c:	b12b      	cbz	r3, 800527a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800526e:	4418      	add	r0, r3
 8005270:	4290      	cmp	r0, r2
 8005272:	d807      	bhi.n	8005284 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005274:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <_sbrk+0x40>)
 800527c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800527e:	4418      	add	r0, r3
 8005280:	4290      	cmp	r0, r2
 8005282:	d9f7      	bls.n	8005274 <_sbrk+0x14>
    errno = ENOMEM;
 8005284:	f003 f9cc 	bl	8008620 <__errno>
 8005288:	230c      	movs	r3, #12
 800528a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd10      	pop	{r4, pc}
 8005294:	2000197c 	.word	0x2000197c
 8005298:	20030000 	.word	0x20030000
 800529c:	00000400 	.word	0x00000400
 80052a0:	20001ae0 	.word	0x20001ae0

080052a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052a4:	4a03      	ldr	r2, [pc, #12]	@ (80052b4 <SystemInit+0x10>)
 80052a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80052aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052b2:	4770      	bx	lr
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80052b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80052f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052bc:	f7ff fff2 	bl	80052a4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052c0:	480c      	ldr	r0, [pc, #48]	@ (80052f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80052c2:	490d      	ldr	r1, [pc, #52]	@ (80052f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80052c4:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80052c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052c8:	e002      	b.n	80052d0 <LoopCopyDataInit>

080052ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ce:	3304      	adds	r3, #4

080052d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d4:	d3f9      	bcc.n	80052ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80052d8:	4c0a      	ldr	r4, [pc, #40]	@ (8005304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80052da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052dc:	e001      	b.n	80052e2 <LoopFillZerobss>

080052de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052e0:	3204      	adds	r2, #4

080052e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e4:	d3fb      	bcc.n	80052de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80052e6:	f003 f9a1 	bl	800862c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ea:	f7fe ffd1 	bl	8004290 <main>
  bx  lr    
 80052ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80052f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80052f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f8:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 80052fc:	08009c3c 	.word	0x08009c3c
  ldr r2, =_sbss
 8005300:	20000944 	.word	0x20000944
  ldr r4, =_ebss
 8005304:	20001ae0 	.word	0x20001ae0

08005308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005308:	e7fe      	b.n	8005308 <ADC_IRQHandler>
	...

0800530c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800530c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800530e:	4a0e      	ldr	r2, [pc, #56]	@ (8005348 <HAL_InitTick+0x3c>)
 8005310:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <HAL_InitTick+0x40>)
 8005312:	7812      	ldrb	r2, [r2, #0]
{
 8005314:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800531c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005320:	fbb0 f0f3 	udiv	r0, r0, r3
 8005324:	f000 faa0 	bl	8005868 <HAL_SYSTICK_Config>
 8005328:	b908      	cbnz	r0, 800532e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800532a:	2d0f      	cmp	r5, #15
 800532c:	d901      	bls.n	8005332 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800532e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005330:	bd38      	pop	{r3, r4, r5, pc}
 8005332:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005334:	4602      	mov	r2, r0
 8005336:	4629      	mov	r1, r5
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	f000 fa4a 	bl	80057d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005340:	4b03      	ldr	r3, [pc, #12]	@ (8005350 <HAL_InitTick+0x44>)
 8005342:	4620      	mov	r0, r4
 8005344:	601d      	str	r5, [r3, #0]
}
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	200008d4 	.word	0x200008d4
 800534c:	200008d0 	.word	0x200008d0
 8005350:	200008d8 	.word	0x200008d8

08005354 <HAL_Init>:
{
 8005354:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_Init+0x30>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005366:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800536e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005370:	2003      	movs	r0, #3
 8005372:	f000 fa1d 	bl	80057b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005376:	200f      	movs	r0, #15
 8005378:	f7ff ffc8 	bl	800530c <HAL_InitTick>
  HAL_MspInit();
 800537c:	f7ff fc1e 	bl	8004bbc <HAL_MspInit>
}
 8005380:	2000      	movs	r0, #0
 8005382:	bd08      	pop	{r3, pc}
 8005384:	40023c00 	.word	0x40023c00

08005388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005388:	4a03      	ldr	r2, [pc, #12]	@ (8005398 <HAL_IncTick+0x10>)
 800538a:	4b04      	ldr	r3, [pc, #16]	@ (800539c <HAL_IncTick+0x14>)
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	440b      	add	r3, r1
 8005392:	6013      	str	r3, [r2, #0]
}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20001980 	.word	0x20001980
 800539c:	200008d4 	.word	0x200008d4

080053a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80053a0:	4b01      	ldr	r3, [pc, #4]	@ (80053a8 <HAL_GetTick+0x8>)
 80053a2:	6818      	ldr	r0, [r3, #0]
}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20001980 	.word	0x20001980

080053ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80053b0:	f7ff fff6 	bl	80053a0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053b4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80053b6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80053b8:	d002      	beq.n	80053c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80053ba:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <HAL_Delay+0x20>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053c0:	f7ff ffee 	bl	80053a0 <HAL_GetTick>
 80053c4:	1b40      	subs	r0, r0, r5
 80053c6:	42a0      	cmp	r0, r4
 80053c8:	d3fa      	bcc.n	80053c0 <HAL_Delay+0x14>
  {
  }
}
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	200008d4 	.word	0x200008d4

080053d0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d07b      	beq.n	80054cc <HAL_CAN_Init+0xfc>
{
 80053d4:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80053d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80053da:	4604      	mov	r4, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d072      	beq.n	80054c6 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ea:	f7ff ffd9 	bl	80053a0 <HAL_GetTick>
 80053ee:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053f0:	e004      	b.n	80053fc <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053f2:	f7ff ffd5 	bl	80053a0 <HAL_GetTick>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	280a      	cmp	r0, #10
 80053fa:	d85b      	bhi.n	80054b4 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	07d1      	lsls	r1, r2, #31
 8005402:	d5f6      	bpl.n	80053f2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	f022 0202 	bic.w	r2, r2, #2
 800540a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800540c:	f7ff ffc8 	bl	80053a0 <HAL_GetTick>
 8005410:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005412:	e004      	b.n	800541e <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005414:	f7ff ffc4 	bl	80053a0 <HAL_GetTick>
 8005418:	1b40      	subs	r0, r0, r5
 800541a:	280a      	cmp	r0, #10
 800541c:	d84a      	bhi.n	80054b4 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	0792      	lsls	r2, r2, #30
 8005424:	d4f6      	bmi.n	8005414 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005426:	7e22      	ldrb	r2, [r4, #24]
 8005428:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	bf0c      	ite	eq
 800542e:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005432:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005438:	7e62      	ldrb	r2, [r4, #25]
 800543a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	bf0c      	ite	eq
 8005440:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005444:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800544a:	7ea2      	ldrb	r2, [r4, #26]
 800544c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	bf0c      	ite	eq
 8005452:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005456:	f022 0220 	bicne.w	r2, r2, #32
 800545a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800545c:	7ee2      	ldrb	r2, [r4, #27]
 800545e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	bf0c      	ite	eq
 8005464:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005468:	f042 0210 	orrne.w	r2, r2, #16
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800546e:	7f22      	ldrb	r2, [r4, #28]
 8005470:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	bf0c      	ite	eq
 8005476:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800547a:	f022 0208 	bicne.w	r2, r2, #8
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005480:	7f62      	ldrb	r2, [r4, #29]
 8005482:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	bf0c      	ite	eq
 8005488:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800548c:	f022 0204 	bicne.w	r2, r2, #4
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005492:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8005496:	6921      	ldr	r1, [r4, #16]
 8005498:	4302      	orrs	r2, r0
 800549a:	430a      	orrs	r2, r1
 800549c:	6960      	ldr	r0, [r4, #20]
 800549e:	6861      	ldr	r1, [r4, #4]
 80054a0:	4302      	orrs	r2, r0
 80054a2:	3901      	subs	r1, #1
 80054a4:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054a6:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80054a8:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80054aa:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054ac:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80054ae:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80054b6:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054bc:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80054be:	f884 2020 	strb.w	r2, [r4, #32]
    return HAL_ERROR;
 80054c2:	2001      	movs	r0, #1
}
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80054c6:	f7ff fb97 	bl	8004bf8 <HAL_CAN_MspInit>
 80054ca:	e789      	b.n	80053e0 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80054cc:	2001      	movs	r0, #1
}
 80054ce:	4770      	bx	lr

080054d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop

080054d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop

080054dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop

080054e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  Rx FIFO 0 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop

080054ec <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop

080054f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop

080054f8 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop

080054fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop

08005504 <HAL_CAN_IRQHandler>:
{
 8005504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005508:	6803      	ldr	r3, [r0, #0]
 800550a:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800550c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005510:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005512:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005516:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800551a:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800551e:	f014 0601 	ands.w	r6, r4, #1
{
 8005522:	b083      	sub	sp, #12
 8005524:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005526:	d025      	beq.n	8005574 <HAL_CAN_IRQHandler+0x70>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005528:	07fa      	lsls	r2, r7, #31
 800552a:	f100 8091 	bmi.w	8005650 <HAL_CAN_IRQHandler+0x14c>
{
 800552e:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8005532:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005536:	2100      	movs	r1, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005538:	05fb      	lsls	r3, r7, #23
 800553a:	f140 809d 	bpl.w	8005678 <HAL_CAN_IRQHandler+0x174>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005544:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005546:	05ba      	lsls	r2, r7, #22
 8005548:	f100 8091 	bmi.w	800566e <HAL_CAN_IRQHandler+0x16a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800554c:	057b      	lsls	r3, r7, #21
 800554e:	d403      	bmi.n	8005558 <HAL_CAN_IRQHandler+0x54>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005550:	053e      	lsls	r6, r7, #20
 8005552:	f140 80f9 	bpl.w	8005748 <HAL_CAN_IRQHandler+0x244>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005556:	4606      	mov	r6, r0
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005558:	03f9      	lsls	r1, r7, #15
 800555a:	d50b      	bpl.n	8005574 <HAL_CAN_IRQHandler+0x70>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005562:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005564:	03ba      	lsls	r2, r7, #14
 8005566:	f100 80d9 	bmi.w	800571c <HAL_CAN_IRQHandler+0x218>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800556a:	037b      	lsls	r3, r7, #13
 800556c:	f140 80d1 	bpl.w	8005712 <HAL_CAN_IRQHandler+0x20e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005570:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005574:	0721      	lsls	r1, r4, #28
 8005576:	d502      	bpl.n	800557e <HAL_CAN_IRQHandler+0x7a>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005578:	f01b 0f10 	tst.w	fp, #16
 800557c:	d162      	bne.n	8005644 <HAL_CAN_IRQHandler+0x140>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800557e:	0762      	lsls	r2, r4, #29
 8005580:	d502      	bpl.n	8005588 <HAL_CAN_IRQHandler+0x84>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005582:	f01b 0f08 	tst.w	fp, #8
 8005586:	d179      	bne.n	800567c <HAL_CAN_IRQHandler+0x178>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005588:	07a3      	lsls	r3, r4, #30
 800558a:	d504      	bpl.n	8005596 <HAL_CAN_IRQHandler+0x92>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	079f      	lsls	r7, r3, #30
 8005592:	f040 8093 	bne.w	80056bc <HAL_CAN_IRQHandler+0x1b8>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005596:	0660      	lsls	r0, r4, #25
 8005598:	d502      	bpl.n	80055a0 <HAL_CAN_IRQHandler+0x9c>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800559a:	f019 0f10 	tst.w	r9, #16
 800559e:	d14b      	bne.n	8005638 <HAL_CAN_IRQHandler+0x134>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055a0:	06a1      	lsls	r1, r4, #26
 80055a2:	d502      	bpl.n	80055aa <HAL_CAN_IRQHandler+0xa6>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055a4:	f019 0f08 	tst.w	r9, #8
 80055a8:	d16f      	bne.n	800568a <HAL_CAN_IRQHandler+0x186>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055aa:	06e2      	lsls	r2, r4, #27
 80055ac:	d503      	bpl.n	80055b6 <HAL_CAN_IRQHandler+0xb2>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	d177      	bne.n	80056a6 <HAL_CAN_IRQHandler+0x1a2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80055b6:	03a7      	lsls	r7, r4, #14
 80055b8:	d502      	bpl.n	80055c0 <HAL_CAN_IRQHandler+0xbc>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80055ba:	f018 0f10 	tst.w	r8, #16
 80055be:	d176      	bne.n	80056ae <HAL_CAN_IRQHandler+0x1aa>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80055c0:	03e0      	lsls	r0, r4, #15
 80055c2:	d502      	bpl.n	80055ca <HAL_CAN_IRQHandler+0xc6>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80055c4:	f018 0f08 	tst.w	r8, #8
 80055c8:	d166      	bne.n	8005698 <HAL_CAN_IRQHandler+0x194>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80055ca:	0421      	lsls	r1, r4, #16
 80055cc:	d52f      	bpl.n	800562e <HAL_CAN_IRQHandler+0x12a>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80055ce:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055d2:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80055d4:	d029      	beq.n	800562a <HAL_CAN_IRQHandler+0x126>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80055d6:	05e2      	lsls	r2, r4, #23
 80055d8:	bf44      	itt	mi
 80055da:	f00a 0201 	andmi.w	r2, sl, #1
 80055de:	4316      	orrmi	r6, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055e0:	05a7      	lsls	r7, r4, #22
 80055e2:	d517      	bpl.n	8005614 <HAL_CAN_IRQHandler+0x110>
 80055e4:	f01a 0f02 	tst.w	sl, #2
 80055e8:	d014      	beq.n	8005614 <HAL_CAN_IRQHandler+0x110>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055ea:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 80055ec:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055f0:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055f4:	d56b      	bpl.n	80056ce <HAL_CAN_IRQHandler+0x1ca>
 80055f6:	f01a 0f04 	tst.w	sl, #4
 80055fa:	d166      	bne.n	80056ca <HAL_CAN_IRQHandler+0x1c6>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055fc:	b992      	cbnz	r2, 8005624 <HAL_CAN_IRQHandler+0x120>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055fe:	2204      	movs	r2, #4
 8005600:	605a      	str	r2, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8005602:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005604:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8005606:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8005608:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800560a:	f7ff ff79 	bl	8005500 <HAL_CAN_ErrorCallback>
}
 800560e:	b003      	add	sp, #12
 8005610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005614:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005616:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800561a:	d502      	bpl.n	8005622 <HAL_CAN_IRQHandler+0x11e>
 800561c:	f01a 0f04 	tst.w	sl, #4
 8005620:	d153      	bne.n	80056ca <HAL_CAN_IRQHandler+0x1c6>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005622:	b112      	cbz	r2, 800562a <HAL_CAN_IRQHandler+0x126>
 8005624:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 8005628:	d156      	bne.n	80056d8 <HAL_CAN_IRQHandler+0x1d4>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800562a:	2204      	movs	r2, #4
 800562c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800562e:	2e00      	cmp	r6, #0
 8005630:	d1e7      	bne.n	8005602 <HAL_CAN_IRQHandler+0xfe>
}
 8005632:	b003      	add	sp, #12
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800563c:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005640:	611a      	str	r2, [r3, #16]
 8005642:	e7ad      	b.n	80055a0 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005648:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e796      	b.n	800557e <HAL_CAN_IRQHandler+0x7a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005650:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005652:	07be      	lsls	r6, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005654:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005656:	d435      	bmi.n	80056c4 <HAL_CAN_IRQHandler+0x1c0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005658:	0779      	lsls	r1, r7, #29
 800565a:	d453      	bmi.n	8005704 <HAL_CAN_IRQHandler+0x200>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800565c:	073a      	lsls	r2, r7, #28
 800565e:	d570      	bpl.n	8005742 <HAL_CAN_IRQHandler+0x23e>
 8005660:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
 8005664:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800566c:	e764      	b.n	8005538 <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800566e:	4628      	mov	r0, r5
 8005670:	9101      	str	r1, [sp, #4]
 8005672:	f7ff ff2f 	bl	80054d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8005676:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005678:	460e      	mov	r6, r1
 800567a:	e76d      	b.n	8005558 <HAL_CAN_IRQHandler+0x54>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	2208      	movs	r2, #8
 8005680:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005682:	4628      	mov	r0, r5
 8005684:	f7ff ff32 	bl	80054ec <HAL_CAN_RxFifo0FullCallback>
 8005688:	e77e      	b.n	8005588 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005690:	4628      	mov	r0, r5
 8005692:	f7ff ff2f 	bl	80054f4 <HAL_CAN_RxFifo1FullCallback>
 8005696:	e788      	b.n	80055aa <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	2208      	movs	r2, #8
 800569c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff ff2c 	bl	80054fc <HAL_CAN_WakeUpFromRxMsgCallback>
 80056a4:	e791      	b.n	80055ca <HAL_CAN_IRQHandler+0xc6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7ff ff22 	bl	80054f0 <HAL_CAN_RxFifo1MsgPendingCallback>
 80056ac:	e783      	b.n	80055b6 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	2210      	movs	r2, #16
 80056b2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff ff1f 	bl	80054f8 <HAL_CAN_SleepCallback>
 80056ba:	e781      	b.n	80055c0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056bc:	4628      	mov	r0, r5
 80056be:	f7ff ff13 	bl	80054e8 <HAL_CAN_RxFifo0MsgPendingCallback>
 80056c2:	e768      	b.n	8005596 <HAL_CAN_IRQHandler+0x92>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80056c4:	f7ff ff04 	bl	80054d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80056c8:	e731      	b.n	800552e <HAL_CAN_IRQHandler+0x2a>
        errorcode |= HAL_CAN_ERROR_BOF;
 80056ca:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	d095      	beq.n	80055fe <HAL_CAN_IRQHandler+0xfa>
 80056d2:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 80056d6:	d092      	beq.n	80055fe <HAL_CAN_IRQHandler+0xfa>
        switch (esrflags & CAN_ESR_LEC)
 80056d8:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 80056dc:	d044      	beq.n	8005768 <HAL_CAN_IRQHandler+0x264>
 80056de:	d821      	bhi.n	8005724 <HAL_CAN_IRQHandler+0x220>
 80056e0:	f1ba 0f20 	cmp.w	sl, #32
 80056e4:	d05b      	beq.n	800579e <HAL_CAN_IRQHandler+0x29a>
 80056e6:	f1ba 0f30 	cmp.w	sl, #48	@ 0x30
 80056ea:	d04f      	beq.n	800578c <HAL_CAN_IRQHandler+0x288>
 80056ec:	f1ba 0f10 	cmp.w	sl, #16
 80056f0:	d135      	bne.n	800575e <HAL_CAN_IRQHandler+0x25a>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056f2:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056f4:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80056fa:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 80056fc:	f046 0608 	orr.w	r6, r6, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005700:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005702:	e77e      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>
 8005704:	f44f 5620 	mov.w	r6, #10240	@ 0x2800
 8005708:	f44f 4090 	mov.w	r0, #18432	@ 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800570c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005710:	e712      	b.n	8005538 <HAL_CAN_IRQHandler+0x34>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005712:	0338      	lsls	r0, r7, #12
 8005714:	d51f      	bpl.n	8005756 <HAL_CAN_IRQHandler+0x252>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005716:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 800571a:	e72b      	b.n	8005574 <HAL_CAN_IRQHandler+0x70>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800571c:	4628      	mov	r0, r5
 800571e:	f7ff fedb 	bl	80054d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005722:	e727      	b.n	8005574 <HAL_CAN_IRQHandler+0x70>
        switch (esrflags & CAN_ESR_LEC)
 8005724:	f1ba 0f50 	cmp.w	sl, #80	@ 0x50
 8005728:	d027      	beq.n	800577a <HAL_CAN_IRQHandler+0x276>
 800572a:	f1ba 0f60 	cmp.w	sl, #96	@ 0x60
 800572e:	d116      	bne.n	800575e <HAL_CAN_IRQHandler+0x25a>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005730:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005732:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005734:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005738:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 800573a:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800573e:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005740:	e75f      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005742:	f7ff fecb 	bl	80054dc <HAL_CAN_TxMailbox0AbortCallback>
 8005746:	e6f2      	b.n	800552e <HAL_CAN_IRQHandler+0x2a>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005748:	4628      	mov	r0, r5
 800574a:	9101      	str	r1, [sp, #4]
 800574c:	f7ff fec8 	bl	80054e0 <HAL_CAN_TxMailbox1AbortCallback>
 8005750:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005752:	460e      	mov	r6, r1
 8005754:	e700      	b.n	8005558 <HAL_CAN_IRQHandler+0x54>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fec4 	bl	80054e4 <HAL_CAN_TxMailbox2AbortCallback>
 800575c:	e70a      	b.n	8005574 <HAL_CAN_IRQHandler+0x70>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005764:	619a      	str	r2, [r3, #24]
 8005766:	e760      	b.n	800562a <HAL_CAN_IRQHandler+0x126>
 8005768:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800576a:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800576c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005770:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 8005772:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005776:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005778:	e743      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800577a:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800577c:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800577e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005782:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8005784:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005788:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800578a:	e73a      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800578c:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800578e:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005790:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005794:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8005796:	f046 0620 	orr.w	r6, r6, #32
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800579a:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800579c:	e731      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800579e:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80057a0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80057a6:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 80057a8:	f046 0610 	orr.w	r6, r6, #16
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80057ac:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80057ae:	e728      	b.n	8005602 <HAL_CAN_IRQHandler+0xfe>

080057b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057b0:	4907      	ldr	r1, [pc, #28]	@ (80057d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80057b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057be:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057c0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80057ca:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <HAL_NVIC_SetPriority+0x70>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057dc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057de:	f1c3 0e07 	rsb	lr, r3, #7
 80057e2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ea:	bf28      	it	cs
 80057ec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057f0:	f1bc 0f06 	cmp.w	ip, #6
 80057f4:	d91c      	bls.n	8005830 <HAL_NVIC_SetPriority+0x5c>
 80057f6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	fa03 f30c 	lsl.w	r3, r3, ip
 8005802:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	fa03 f30e 	lsl.w	r3, r3, lr
 800580e:	ea21 0303 	bic.w	r3, r1, r3
 8005812:	fa03 f30c 	lsl.w	r3, r3, ip
 8005816:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005818:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800581a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800581e:	db0a      	blt.n	8005836 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005820:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005824:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005828:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800582c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005830:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005832:	4694      	mov	ip, r2
 8005834:	e7e7      	b.n	8005806 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005836:	4a04      	ldr	r2, [pc, #16]	@ (8005848 <HAL_NVIC_SetPriority+0x74>)
 8005838:	f000 000f 	and.w	r0, r0, #15
 800583c:	4402      	add	r2, r0
 800583e:	7613      	strb	r3, [r2, #24]
 8005840:	f85d fb04 	ldr.w	pc, [sp], #4
 8005844:	e000ed00 	.word	0xe000ed00
 8005848:	e000ecfc 	.word	0xe000ecfc

0800584c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800584c:	2800      	cmp	r0, #0
 800584e:	db07      	blt.n	8005860 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005850:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <HAL_NVIC_EnableIRQ+0x18>)
 8005852:	0941      	lsrs	r1, r0, #5
 8005854:	2301      	movs	r3, #1
 8005856:	f000 001f 	and.w	r0, r0, #31
 800585a:	4083      	lsls	r3, r0
 800585c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	e000e100 	.word	0xe000e100

08005868 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005868:	3801      	subs	r0, #1
 800586a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800586e:	d301      	bcc.n	8005874 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005870:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005872:	4770      	bx	lr
{
 8005874:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005876:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587a:	4c07      	ldr	r4, [pc, #28]	@ (8005898 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8005882:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005886:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005888:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800588a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	619a      	str	r2, [r3, #24]
}
 800588e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	6119      	str	r1, [r3, #16]
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a0:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80058a2:	f7ff fd7d 	bl	80053a0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d006      	beq.n	80058bc <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 80058b8:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	f022 0216 	bic.w	r2, r2, #22
 80058c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058cc:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80058d0:	4605      	mov	r5, r0
 80058d2:	b342      	cbz	r2, 8005926 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f022 0208 	bic.w	r2, r2, #8
 80058da:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058e4:	e005      	b.n	80058f2 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e6:	f7ff fd5b 	bl	80053a0 <HAL_GetTick>
 80058ea:	1b43      	subs	r3, r0, r5
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d810      	bhi.n	8005912 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f013 0301 	ands.w	r3, r3, #1
 80058f8:	d1f5      	bne.n	80058e6 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058fa:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80058fc:	223f      	movs	r2, #63	@ 0x3f
 80058fe:	408a      	lsls	r2, r1
  return HAL_OK;
 8005900:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8005902:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8005904:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005906:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005908:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800590c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8005910:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005912:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005914:	2220      	movs	r2, #32
 8005916:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005918:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800591a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800591e:	2300      	movs	r3, #0
 8005920:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8005924:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005926:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8005928:	2a00      	cmp	r2, #0
 800592a:	d1d3      	bne.n	80058d4 <HAL_DMA_Abort+0x38>
 800592c:	e7d6      	b.n	80058dc <HAL_DMA_Abort+0x40>
 800592e:	bf00      	nop

08005930 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005930:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005934:	2b02      	cmp	r3, #2
 8005936:	d003      	beq.n	8005940 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005938:	2380      	movs	r3, #128	@ 0x80
 800593a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
 800593e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005940:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005942:	2305      	movs	r3, #5
 8005944:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 800594e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005950:	6013      	str	r3, [r2, #0]
}
 8005952:	4770      	bx	lr

08005954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4aa9      	ldr	r2, [pc, #676]	@ (8005c00 <HAL_GPIO_Init+0x2ac>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800595a:	680b      	ldr	r3, [r1, #0]
 800595c:	4290      	cmp	r0, r2
{
 800595e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f000 80de 	beq.w	8005b24 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005968:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 8005c10 <HAL_GPIO_Init+0x2bc>
    ioposition = 0x01U << position;
 800596c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005970:	468a      	mov	sl, r1
 8005972:	e003      	b.n	800597c <HAL_GPIO_Init+0x28>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005974:	3201      	adds	r2, #1
 8005976:	2a10      	cmp	r2, #16
 8005978:	f000 80a8 	beq.w	8005acc <HAL_GPIO_Init+0x178>
    ioposition = 0x01U << position;
 800597c:	fa0b f102 	lsl.w	r1, fp, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005980:	ea01 0603 	and.w	r6, r1, r3
    if(iocurrent == ioposition)
 8005984:	4399      	bics	r1, r3
 8005986:	d1f5      	bne.n	8005974 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005988:	f8da 4004 	ldr.w	r4, [sl, #4]
 800598c:	f004 0c03 	and.w	ip, r4, #3
 8005990:	0051      	lsls	r1, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005992:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005994:	f10c 37ff 	add.w	r7, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005998:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800599a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800599c:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059a0:	d95a      	bls.n	8005a58 <HAL_GPIO_Init+0x104>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059a2:	f1bc 0f03 	cmp.w	ip, #3
 80059a6:	f040 81c1 	bne.w	8005d2c <HAL_GPIO_Init+0x3d8>
      temp = GPIOx->MODER;
 80059aa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ac:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059b0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b2:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059b4:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80059b8:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ba:	d0db      	beq.n	8005974 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059bc:	4d91      	ldr	r5, [pc, #580]	@ (8005c04 <HAL_GPIO_Init+0x2b0>)
 80059be:	2100      	movs	r1, #0
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80059c4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80059c8:	6469      	str	r1, [r5, #68]	@ 0x44
 80059ca:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80059cc:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80059d0:	9103      	str	r1, [sp, #12]
 80059d2:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80059d4:	f022 0103 	bic.w	r1, r2, #3
 80059d8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80059dc:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059e0:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80059e4:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059e6:	00bf      	lsls	r7, r7, #2
 80059e8:	f04f 0c0f 	mov.w	ip, #15
 80059ec:	fa0c fc07 	lsl.w	ip, ip, r7
 80059f0:	ea25 0e0c 	bic.w	lr, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059f4:	4d84      	ldr	r5, [pc, #528]	@ (8005c08 <HAL_GPIO_Init+0x2b4>)
 80059f6:	42a8      	cmp	r0, r5
 80059f8:	d06b      	beq.n	8005ad2 <HAL_GPIO_Init+0x17e>
 80059fa:	4d84      	ldr	r5, [pc, #528]	@ (8005c0c <HAL_GPIO_Init+0x2b8>)
 80059fc:	42a8      	cmp	r0, r5
 80059fe:	f000 8164 	beq.w	8005cca <HAL_GPIO_Init+0x376>
 8005a02:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8005c14 <HAL_GPIO_Init+0x2c0>
 8005a06:	4560      	cmp	r0, ip
 8005a08:	f000 8166 	beq.w	8005cd8 <HAL_GPIO_Init+0x384>
 8005a0c:	f8df c208 	ldr.w	ip, [pc, #520]	@ 8005c18 <HAL_GPIO_Init+0x2c4>
 8005a10:	4560      	cmp	r0, ip
 8005a12:	f000 816f 	beq.w	8005cf4 <HAL_GPIO_Init+0x3a0>
 8005a16:	f8df c204 	ldr.w	ip, [pc, #516]	@ 8005c1c <HAL_GPIO_Init+0x2c8>
 8005a1a:	4560      	cmp	r0, ip
 8005a1c:	f000 8171 	beq.w	8005d02 <HAL_GPIO_Init+0x3ae>
 8005a20:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 8005c20 <HAL_GPIO_Init+0x2cc>
 8005a24:	4560      	cmp	r0, ip
 8005a26:	f000 815e 	beq.w	8005ce6 <HAL_GPIO_Init+0x392>
 8005a2a:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8005c24 <HAL_GPIO_Init+0x2d0>
 8005a2e:	4560      	cmp	r0, ip
 8005a30:	f000 816e 	beq.w	8005d10 <HAL_GPIO_Init+0x3bc>
 8005a34:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 8005c28 <HAL_GPIO_Init+0x2d4>
 8005a38:	4560      	cmp	r0, ip
 8005a3a:	f000 8170 	beq.w	8005d1e <HAL_GPIO_Init+0x3ca>
 8005a3e:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 8005c2c <HAL_GPIO_Init+0x2d8>
 8005a42:	4560      	cmp	r0, ip
 8005a44:	bf0c      	ite	eq
 8005a46:	f04f 0c09 	moveq.w	ip, #9
 8005a4a:	f04f 0c0a 	movne.w	ip, #10
 8005a4e:	fa0c f707 	lsl.w	r7, ip, r7
 8005a52:	ea4e 0507 	orr.w	r5, lr, r7
 8005a56:	e042      	b.n	8005ade <HAL_GPIO_Init+0x18a>
        temp = GPIOx->OSPEEDR; 
 8005a58:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a5a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a5e:	f8da 700c 	ldr.w	r7, [sl, #12]
 8005a62:	408f      	lsls	r7, r1
 8005a64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8005a68:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005a6a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a6c:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a70:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8005a74:	4097      	lsls	r7, r2
 8005a76:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005a7a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005a7c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a7e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a82:	f8da 7008 	ldr.w	r7, [sl, #8]
 8005a86:	408f      	lsls	r7, r1
 8005a88:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a8c:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8005a90:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a92:	d18a      	bne.n	80059aa <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 8005a94:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8005a98:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9c:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8005aa0:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8005aa4:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005aa6:	f8da 7010 	ldr.w	r7, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aaa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005aae:	fa07 f70e 	lsl.w	r7, r7, lr
 8005ab2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ab4:	270f      	movs	r7, #15
 8005ab6:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005aba:	9f00      	ldr	r7, [sp, #0]
 8005abc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ac0:	9f01      	ldr	r7, [sp, #4]
 8005ac2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005ac6:	f8c9 7020 	str.w	r7, [r9, #32]
 8005aca:	e76e      	b.n	80059aa <HAL_GPIO_Init+0x56>
        }
        EXTI->IMR = temp;
      }
    }
  }
}
 8005acc:	b005      	add	sp, #20
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ad2:	f04f 0c01 	mov.w	ip, #1
 8005ad6:	fa0c f707 	lsl.w	r7, ip, r7
 8005ada:	ea4e 0507 	orr.w	r5, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ade:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 8005ae0:	f8d8 1008 	ldr.w	r1, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8005ae4:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ae6:	02e7      	lsls	r7, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	bf54      	ite	pl
 8005aea:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005aec:	4331      	orrmi	r1, r6
        EXTI->RTSR = temp;
 8005aee:	f8c8 1008 	str.w	r1, [r8, #8]
        temp = EXTI->FTSR;
 8005af2:	f8d8 100c 	ldr.w	r1, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005af6:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005af8:	bf54      	ite	pl
 8005afa:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005afc:	4331      	orrmi	r1, r6
        EXTI->FTSR = temp;
 8005afe:	f8c8 100c 	str.w	r1, [r8, #12]
        temp = EXTI->EMR;
 8005b02:	f8d8 1004 	ldr.w	r1, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b06:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8005b08:	bf54      	ite	pl
 8005b0a:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005b0c:	4331      	orrmi	r1, r6
        EXTI->EMR = temp;
 8005b0e:	f8c8 1004 	str.w	r1, [r8, #4]
        temp = EXTI->IMR;
 8005b12:	f8d8 1000 	ldr.w	r1, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b16:	03e4      	lsls	r4, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8005b18:	bf54      	ite	pl
 8005b1a:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005b1c:	4331      	orrmi	r1, r6
        EXTI->IMR = temp;
 8005b1e:	f8c8 1000 	str.w	r1, [r8]
 8005b22:	e727      	b.n	8005974 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b24:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8005c04 <HAL_GPIO_Init+0x2b0>
    ioposition = 0x01U << position;
 8005b28:	f04f 0a01 	mov.w	sl, #1
 8005b2c:	e002      	b.n	8005b34 <HAL_GPIO_Init+0x1e0>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b2e:	3201      	adds	r2, #1
 8005b30:	2a10      	cmp	r2, #16
 8005b32:	d0cb      	beq.n	8005acc <HAL_GPIO_Init+0x178>
    ioposition = 0x01U << position;
 8005b34:	fa0a f402 	lsl.w	r4, sl, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b38:	ea03 0604 	and.w	r6, r3, r4
    if(iocurrent == ioposition)
 8005b3c:	439c      	bics	r4, r3
 8005b3e:	d1f6      	bne.n	8005b2e <HAL_GPIO_Init+0x1da>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b40:	684d      	ldr	r5, [r1, #4]
 8005b42:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b44:	2703      	movs	r7, #3
 8005b46:	fa07 fc04 	lsl.w	ip, r7, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b4a:	f005 0803 	and.w	r8, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b4e:	ea6f 090c 	mvn.w	r9, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b52:	f108 3cff 	add.w	ip, r8, #4294967295
 8005b56:	f1bc 0f01 	cmp.w	ip, #1
 8005b5a:	d969      	bls.n	8005c30 <HAL_GPIO_Init+0x2dc>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b5c:	f1b8 0f03 	cmp.w	r8, #3
 8005b60:	f040 80ee 	bne.w	8005d40 <HAL_GPIO_Init+0x3ec>
      temp = GPIOx->MODER;
 8005b64:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b68:	fa08 f404 	lsl.w	r4, r8, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b6c:	ea0c 0c09 	and.w	ip, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b70:	ea44 040c 	orr.w	r4, r4, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b74:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005b78:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b7a:	d0d8      	beq.n	8005b2e <HAL_GPIO_Init+0x1da>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7c:	2400      	movs	r4, #0
 8005b7e:	9403      	str	r4, [sp, #12]
 8005b80:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8005b84:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8005b88:	f8cb 4044 	str.w	r4, [fp, #68]	@ 0x44
 8005b8c:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8005b90:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8005b94:	9403      	str	r4, [sp, #12]
 8005b96:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005b98:	f022 0403 	bic.w	r4, r2, #3
 8005b9c:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005ba0:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ba4:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba8:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bac:	270f      	movs	r7, #15
 8005bae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005bb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005bb6:	ea2e 0c0c 	bic.w	ip, lr, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bba:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->RTSR;
 8005bbe:	4c14      	ldr	r4, [pc, #80]	@ (8005c10 <HAL_GPIO_Init+0x2bc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bc0:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR;
 8005bc2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005bc4:	ea6f 0c06 	mvn.w	ip, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bc8:	d47d      	bmi.n	8005cc6 <HAL_GPIO_Init+0x372>
        temp &= ~((uint32_t)iocurrent);
 8005bca:	ea04 040c 	and.w	r4, r4, ip
        EXTI->RTSR = temp;
 8005bce:	4f10      	ldr	r7, [pc, #64]	@ (8005c10 <HAL_GPIO_Init+0x2bc>)
 8005bd0:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 8005bd2:	68fc      	ldr	r4, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd4:	02af      	lsls	r7, r5, #10
 8005bd6:	d474      	bmi.n	8005cc2 <HAL_GPIO_Init+0x36e>
        temp &= ~((uint32_t)iocurrent);
 8005bd8:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->FTSR = temp;
 8005bdc:	4f0c      	ldr	r7, [pc, #48]	@ (8005c10 <HAL_GPIO_Init+0x2bc>)
 8005bde:	60fc      	str	r4, [r7, #12]
        temp = EXTI->EMR;
 8005be0:	687c      	ldr	r4, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005be2:	03af      	lsls	r7, r5, #14
 8005be4:	d46b      	bmi.n	8005cbe <HAL_GPIO_Init+0x36a>
        temp &= ~((uint32_t)iocurrent);
 8005be6:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->EMR = temp;
 8005bea:	4f09      	ldr	r7, [pc, #36]	@ (8005c10 <HAL_GPIO_Init+0x2bc>)
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bec:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8005bee:	607c      	str	r4, [r7, #4]
        temp = EXTI->IMR;
 8005bf0:	683c      	ldr	r4, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bf2:	d462      	bmi.n	8005cba <HAL_GPIO_Init+0x366>
        temp &= ~((uint32_t)iocurrent);
 8005bf4:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->IMR = temp;
 8005bf8:	4d05      	ldr	r5, [pc, #20]	@ (8005c10 <HAL_GPIO_Init+0x2bc>)
 8005bfa:	602c      	str	r4, [r5, #0]
 8005bfc:	e797      	b.n	8005b2e <HAL_GPIO_Init+0x1da>
 8005bfe:	bf00      	nop
 8005c00:	40020000 	.word	0x40020000
 8005c04:	40023800 	.word	0x40023800
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	40020800 	.word	0x40020800
 8005c10:	40013c00 	.word	0x40013c00
 8005c14:	40020c00 	.word	0x40020c00
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40021400 	.word	0x40021400
 8005c20:	40021800 	.word	0x40021800
 8005c24:	40021c00 	.word	0x40021c00
 8005c28:	40022000 	.word	0x40022000
 8005c2c:	40022400 	.word	0x40022400
        temp = GPIOx->OSPEEDR; 
 8005c30:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c34:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c36:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c3a:	fa07 fc04 	lsl.w	ip, r7, r4
 8005c3e:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8005c42:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c46:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c4a:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c4e:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c52:	fa0c fc02 	lsl.w	ip, ip, r2
 8005c56:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 8005c5a:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8005c5e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c62:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c64:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c68:	fa07 fc04 	lsl.w	ip, r7, r4
 8005c6c:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c70:	f1b8 0f02 	cmp.w	r8, #2
        GPIOx->PUPDR = temp;
 8005c74:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c78:	f47f af74 	bne.w	8005b64 <HAL_GPIO_Init+0x210>
        temp = GPIOx->AFR[position >> 3U];
 8005c7c:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8005c80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005c84:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8005c88:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c8c:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8005c90:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8005c94:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c96:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c98:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c9c:	fa07 f70e 	lsl.w	r7, r7, lr
 8005ca0:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ca2:	270f      	movs	r7, #15
 8005ca4:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005ca8:	9f00      	ldr	r7, [sp, #0]
 8005caa:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cae:	9f01      	ldr	r7, [sp, #4]
 8005cb0:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005cb4:	f8cc e020 	str.w	lr, [ip, #32]
 8005cb8:	e754      	b.n	8005b64 <HAL_GPIO_Init+0x210>
          temp |= iocurrent;
 8005cba:	4334      	orrs	r4, r6
 8005cbc:	e79c      	b.n	8005bf8 <HAL_GPIO_Init+0x2a4>
          temp |= iocurrent;
 8005cbe:	4334      	orrs	r4, r6
 8005cc0:	e793      	b.n	8005bea <HAL_GPIO_Init+0x296>
          temp |= iocurrent;
 8005cc2:	4334      	orrs	r4, r6
 8005cc4:	e78a      	b.n	8005bdc <HAL_GPIO_Init+0x288>
          temp |= iocurrent;
 8005cc6:	4334      	orrs	r4, r6
 8005cc8:	e781      	b.n	8005bce <HAL_GPIO_Init+0x27a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cca:	f04f 0c02 	mov.w	ip, #2
 8005cce:	fa0c f707 	lsl.w	r7, ip, r7
 8005cd2:	ea4e 0507 	orr.w	r5, lr, r7
 8005cd6:	e702      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005cd8:	f04f 0c03 	mov.w	ip, #3
 8005cdc:	fa0c f707 	lsl.w	r7, ip, r7
 8005ce0:	ea4e 0507 	orr.w	r5, lr, r7
 8005ce4:	e6fb      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005ce6:	f04f 0c06 	mov.w	ip, #6
 8005cea:	fa0c f707 	lsl.w	r7, ip, r7
 8005cee:	ea4e 0507 	orr.w	r5, lr, r7
 8005cf2:	e6f4      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005cf4:	f04f 0c04 	mov.w	ip, #4
 8005cf8:	fa0c f707 	lsl.w	r7, ip, r7
 8005cfc:	ea4e 0507 	orr.w	r5, lr, r7
 8005d00:	e6ed      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005d02:	f04f 0c05 	mov.w	ip, #5
 8005d06:	fa0c f707 	lsl.w	r7, ip, r7
 8005d0a:	ea4e 0507 	orr.w	r5, lr, r7
 8005d0e:	e6e6      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005d10:	f04f 0c07 	mov.w	ip, #7
 8005d14:	fa0c f707 	lsl.w	r7, ip, r7
 8005d18:	ea4e 0507 	orr.w	r5, lr, r7
 8005d1c:	e6df      	b.n	8005ade <HAL_GPIO_Init+0x18a>
 8005d1e:	f04f 0c08 	mov.w	ip, #8
 8005d22:	fa0c f707 	lsl.w	r7, ip, r7
 8005d26:	ea4e 0507 	orr.w	r5, lr, r7
 8005d2a:	e6d8      	b.n	8005ade <HAL_GPIO_Init+0x18a>
        temp = GPIOx->PUPDR;
 8005d2c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d2e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d32:	f8da 7008 	ldr.w	r7, [sl, #8]
 8005d36:	408f      	lsls	r7, r1
 8005d38:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8005d3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3e:	e634      	b.n	80059aa <HAL_GPIO_Init+0x56>
        temp = GPIOx->PUPDR;
 8005d40:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8005d5c <HAL_GPIO_Init+0x408>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d44:	688f      	ldr	r7, [r1, #8]
        temp = GPIOx->PUPDR;
 8005d46:	f8dc e00c 	ldr.w	lr, [ip, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d4a:	40a7      	lsls	r7, r4
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d4c:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d50:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->PUPDR = temp;
 8005d54:	f8cc e00c 	str.w	lr, [ip, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d58:	e704      	b.n	8005b64 <HAL_GPIO_Init+0x210>
 8005d5a:	bf00      	nop
 8005d5c:	40020000 	.word	0x40020000

08005d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d60:	b902      	cbnz	r2, 8005d64 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d62:	0409      	lsls	r1, r1, #16
 8005d64:	6181      	str	r1, [r0, #24]
  }
}
 8005d66:	4770      	bx	lr

08005d68 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d68:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d6a:	ea01 0203 	and.w	r2, r1, r3
 8005d6e:	ea21 0103 	bic.w	r1, r1, r3
 8005d72:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d76:	6181      	str	r1, [r0, #24]
}
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop

08005d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d7c:	4a04      	ldr	r2, [pc, #16]	@ (8005d90 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8005d7e:	6951      	ldr	r1, [r2, #20]
 8005d80:	4201      	tst	r1, r0
 8005d82:	d100      	bne.n	8005d86 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005d84:	4770      	bx	lr
{
 8005d86:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d88:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d8a:	f7fe fee5 	bl	8004b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d8e:	bd08      	pop	{r3, pc}
 8005d90:	40013c00 	.word	0x40013c00

08005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005d94:	b530      	push	{r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	1c48      	adds	r0, r1, #1
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	d121      	bne.n	8005de2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	e002      	b.n	8005da8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x14>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	0555      	lsls	r5, r2, #21
 8005da6:	d405      	bmi.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	0792      	lsls	r2, r2, #30
 8005dac:	d5f9      	bpl.n	8005da2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xe>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005dae:	2000      	movs	r0, #0
}
 8005db0:	b003      	add	sp, #12
 8005db2:	bd30      	pop	{r4, r5, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dbc:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbe:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc2:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc4:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc6:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dcc:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7e6      	b.n	8005db0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
 8005de2:	6820      	ldr	r0, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de4:	6945      	ldr	r5, [r0, #20]
 8005de6:	07ad      	lsls	r5, r5, #30
 8005de8:	4603      	mov	r3, r0
 8005dea:	d4e0      	bmi.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dec:	6940      	ldr	r0, [r0, #20]
 8005dee:	0540      	lsls	r0, r0, #21
 8005df0:	d4e0      	bmi.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
 8005df2:	e9cd 1200 	strd	r1, r2, [sp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7ff fad3 	bl	80053a0 <HAL_GetTick>
 8005dfa:	9a01      	ldr	r2, [sp, #4]
 8005dfc:	9900      	ldr	r1, [sp, #0]
 8005dfe:	1a83      	subs	r3, r0, r2
 8005e00:	4299      	cmp	r1, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e02:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e04:	d301      	bcc.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x76>
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d1ec      	bne.n	8005de4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e0a:	6943      	ldr	r3, [r0, #20]
 8005e0c:	079b      	lsls	r3, r3, #30
 8005e0e:	d4e9      	bmi.n	8005de4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e10:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e12:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e14:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e16:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e20:	4313      	orrs	r3, r2
 8005e22:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8005e24:	e7d8      	b.n	8005dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
 8005e26:	bf00      	nop

08005e28 <I2C_RequestMemoryWrite>:
{
 8005e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2c:	6805      	ldr	r5, [r0, #0]
{
 8005e2e:	b084      	sub	sp, #16
 8005e30:	4606      	mov	r6, r0
 8005e32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e34:	6828      	ldr	r0, [r5, #0]
{
 8005e36:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e38:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8005e3c:	1c63      	adds	r3, r4, #1
{
 8005e3e:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e40:	6028      	str	r0, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e42:	d137      	bne.n	8005eb4 <I2C_RequestMemoryWrite+0x8c>
 8005e44:	696c      	ldr	r4, [r5, #20]
 8005e46:	07e4      	lsls	r4, r4, #31
 8005e48:	d5fc      	bpl.n	8005e44 <I2C_RequestMemoryWrite+0x1c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e4a:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8005e4e:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e52:	f04f 31ff 	mov.w	r1, #4294967295
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ff9c 	bl	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005e5c:	b118      	cbz	r0, 8005e66 <I2C_RequestMemoryWrite+0x3e>
    return HAL_ERROR;
 8005e5e:	2001      	movs	r0, #1
}
 8005e60:	b004      	add	sp, #16
 8005e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e66:	6833      	ldr	r3, [r6, #0]
 8005e68:	9003      	str	r0, [sp, #12]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	9203      	str	r2, [sp, #12]
 8005e72:	9a03      	ldr	r2, [sp, #12]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	0610      	lsls	r0, r2, #24
 8005e78:	d442      	bmi.n	8005f00 <I2C_RequestMemoryWrite+0xd8>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	0551      	lsls	r1, r2, #21
 8005e7e:	d5f9      	bpl.n	8005e74 <I2C_RequestMemoryWrite+0x4c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e80:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e82:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e86:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8a:	6332      	str	r2, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e8c:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e90:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e94:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8005e96:	f042 0204 	orr.w	r2, r2, #4
 8005e9a:	6432      	str	r2, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005e9e:	2100      	movs	r1, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea0:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8005ea2:	f886 103c 	strb.w	r1, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea6:	d1da      	bne.n	8005e5e <I2C_RequestMemoryWrite+0x36>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e7d5      	b.n	8005e5e <I2C_RequestMemoryWrite+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	b15c      	cbz	r4, 8005ecc <I2C_RequestMemoryWrite+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb4:	696b      	ldr	r3, [r5, #20]
 8005eb6:	07db      	lsls	r3, r3, #31
 8005eb8:	d434      	bmi.n	8005f24 <I2C_RequestMemoryWrite+0xfc>
 8005eba:	9101      	str	r1, [sp, #4]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7ff fa70 	bl	80053a0 <HAL_GetTick>
 8005ec0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ec2:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	1ac3      	subs	r3, r0, r3
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d2f2      	bcs.n	8005eb2 <I2C_RequestMemoryWrite+0x8a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ecc:	696b      	ldr	r3, [r5, #20]
 8005ece:	07d8      	lsls	r0, r3, #31
 8005ed0:	d4f0      	bmi.n	8005eb4 <I2C_RequestMemoryWrite+0x8c>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed2:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ed4:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed6:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ed8:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005edc:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ee0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005ee2:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ee6:	f043 0320 	orr.w	r3, r3, #32
 8005eea:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	05da      	lsls	r2, r3, #23
 8005ef0:	d502      	bpl.n	8005ef8 <I2C_RequestMemoryWrite+0xd0>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ef6:	6433      	str	r3, [r6, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005ef8:	2003      	movs	r0, #3
}
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f00:	f1b8 0f01 	cmp.w	r8, #1
 8005f04:	d008      	beq.n	8005f18 <I2C_RequestMemoryWrite+0xf0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f06:	0a3a      	lsrs	r2, r7, #8
 8005f08:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	0614      	lsls	r4, r2, #24
 8005f0e:	d403      	bmi.n	8005f18 <I2C_RequestMemoryWrite+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	0550      	lsls	r0, r2, #21
 8005f14:	d5f9      	bpl.n	8005f0a <I2C_RequestMemoryWrite+0xe2>
 8005f16:	e7b3      	b.n	8005e80 <I2C_RequestMemoryWrite+0x58>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 8005f1a:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1c:	611f      	str	r7, [r3, #16]
}
 8005f1e:	b004      	add	sp, #16
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f24:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8005f28:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7ff ff30 	bl	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d192      	bne.n	8005e5e <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	9003      	str	r0, [sp, #12]
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	9203      	str	r2, [sp, #12]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	9a03      	ldr	r2, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	0615      	lsls	r5, r2, #24
 8005f4a:	d419      	bmi.n	8005f80 <I2C_RequestMemoryWrite+0x158>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	0552      	lsls	r2, r2, #21
 8005f50:	d496      	bmi.n	8005e80 <I2C_RequestMemoryWrite+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7ff fa25 	bl	80053a0 <HAL_GetTick>
 8005f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f58:	1ac3      	subs	r3, r0, r3
 8005f5a:	429c      	cmp	r4, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f5c:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	d301      	bcc.n	8005f64 <I2C_RequestMemoryWrite+0x13c>
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	d1f0      	bne.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f64:	695a      	ldr	r2, [r3, #20]
 8005f66:	f012 0280 	ands.w	r2, r2, #128	@ 0x80
 8005f6a:	d1ec      	bne.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f6c:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f6e:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f70:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f74:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f78:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8005f7e:	e78d      	b.n	8005e9c <I2C_RequestMemoryWrite+0x74>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f80:	f1b8 0f01 	cmp.w	r8, #1
 8005f84:	d0c8      	beq.n	8005f18 <I2C_RequestMemoryWrite+0xf0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f86:	0a3a      	lsrs	r2, r7, #8
 8005f88:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	0612      	lsls	r2, r2, #24
 8005f8e:	d4c3      	bmi.n	8005f18 <I2C_RequestMemoryWrite+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	0551      	lsls	r1, r2, #21
 8005f94:	f53f af74 	bmi.w	8005e80 <I2C_RequestMemoryWrite+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7ff fa02 	bl	80053a0 <HAL_GetTick>
 8005f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f9e:	1ac3      	subs	r3, r0, r3
 8005fa0:	429c      	cmp	r4, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fa2:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa4:	d301      	bcc.n	8005faa <I2C_RequestMemoryWrite+0x182>
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	d1ef      	bne.n	8005f8a <I2C_RequestMemoryWrite+0x162>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	f012 0280 	ands.w	r2, r2, #128	@ 0x80
 8005fb0:	d1eb      	bne.n	8005f8a <I2C_RequestMemoryWrite+0x162>
 8005fb2:	e7db      	b.n	8005f6c <I2C_RequestMemoryWrite+0x144>

08005fb4 <I2C_RequestMemoryRead>:
{
 8005fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb8:	6805      	ldr	r5, [r0, #0]
{
 8005fba:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fbc:	682b      	ldr	r3, [r5, #0]
{
 8005fbe:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fc4:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc6:	682b      	ldr	r3, [r5, #0]
{
 8005fc8:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd0:	f1b9 3fff 	cmp.w	r9, #4294967295
{
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fd8:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fda:	d13a      	bne.n	8006052 <I2C_RequestMemoryRead+0x9e>
 8005fdc:	696c      	ldr	r4, [r5, #20]
 8005fde:	07e2      	lsls	r2, r4, #31
 8005fe0:	d5fc      	bpl.n	8005fdc <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe2:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8005fe6:	b2cc      	uxtb	r4, r1
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fea:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fec:	f04f 31ff 	mov.w	r1, #4294967295
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff fecf 	bl	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005ff6:	b118      	cbz	r0, 8006000 <I2C_RequestMemoryRead+0x4c>
    return HAL_ERROR;
 8005ff8:	2001      	movs	r0, #1
}
 8005ffa:	b005      	add	sp, #20
 8005ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006000:	9003      	str	r0, [sp, #12]
 8006002:	6830      	ldr	r0, [r6, #0]
 8006004:	6943      	ldr	r3, [r0, #20]
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	6983      	ldr	r3, [r0, #24]
 800600a:	9303      	str	r3, [sp, #12]
 800600c:	9b03      	ldr	r3, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800600e:	6943      	ldr	r3, [r0, #20]
 8006010:	0619      	lsls	r1, r3, #24
 8006012:	d467      	bmi.n	80060e4 <I2C_RequestMemoryRead+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006014:	6943      	ldr	r3, [r0, #20]
 8006016:	055a      	lsls	r2, r3, #21
 8006018:	d5f9      	bpl.n	800600e <I2C_RequestMemoryRead+0x5a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800601a:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800601c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006020:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006022:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006024:	6333      	str	r3, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006026:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800602e:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8006030:	f043 0304 	orr.w	r3, r3, #4
 8006034:	6433      	str	r3, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006036:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8006038:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800603a:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 800603c:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006040:	d1da      	bne.n	8005ff8 <I2C_RequestMemoryRead+0x44>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006048:	6003      	str	r3, [r0, #0]
 800604a:	e7d5      	b.n	8005ff8 <I2C_RequestMemoryRead+0x44>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	d00b      	beq.n	800606a <I2C_RequestMemoryRead+0xb6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006052:	696b      	ldr	r3, [r5, #20]
 8006054:	07d8      	lsls	r0, r3, #31
 8006056:	d46d      	bmi.n	8006134 <I2C_RequestMemoryRead+0x180>
 8006058:	9101      	str	r1, [sp, #4]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7ff f9a1 	bl	80053a0 <HAL_GetTick>
 800605e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006060:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	9901      	ldr	r1, [sp, #4]
 8006064:	1ac3      	subs	r3, r0, r3
 8006066:	4599      	cmp	r9, r3
 8006068:	d2f0      	bcs.n	800604c <I2C_RequestMemoryRead+0x98>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800606a:	696b      	ldr	r3, [r5, #20]
 800606c:	07db      	lsls	r3, r3, #31
 800606e:	d4f0      	bmi.n	8006052 <I2C_RequestMemoryRead+0x9e>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006070:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8006072:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006074:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006076:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800607a:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800607e:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8006080:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006084:	f043 0320 	orr.w	r3, r3, #32
 8006088:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	05dc      	lsls	r4, r3, #23
 800608e:	d425      	bmi.n	80060dc <I2C_RequestMemoryRead+0x128>
    return HAL_TIMEOUT;
 8006090:	2003      	movs	r0, #3
 8006092:	e7b2      	b.n	8005ffa <I2C_RequestMemoryRead+0x46>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006094:	6803      	ldr	r3, [r0, #0]
 8006096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800609a:	6003      	str	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609c:	6943      	ldr	r3, [r0, #20]
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d43c      	bmi.n	800611c <I2C_RequestMemoryRead+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7ff f97d 	bl	80053a0 <HAL_GetTick>
 80060a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060a8:	1ac3      	subs	r3, r0, r3
 80060aa:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060ac:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ae:	d302      	bcc.n	80060b6 <I2C_RequestMemoryRead+0x102>
 80060b0:	f1b9 0f00 	cmp.w	r9, #0
 80060b4:	d1f2      	bne.n	800609c <I2C_RequestMemoryRead+0xe8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060b6:	6943      	ldr	r3, [r0, #20]
 80060b8:	07d9      	lsls	r1, r3, #31
 80060ba:	d4ef      	bmi.n	800609c <I2C_RequestMemoryRead+0xe8>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060bc:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80060be:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060c0:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060c2:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060c6:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80060cc:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060d0:	f043 0320 	orr.w	r3, r3, #32
 80060d4:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d6:	6803      	ldr	r3, [r0, #0]
 80060d8:	05da      	lsls	r2, r3, #23
 80060da:	d5d9      	bpl.n	8006090 <I2C_RequestMemoryRead+0xdc>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060e0:	6433      	str	r3, [r6, #64]	@ 0x40
 80060e2:	e7d5      	b.n	8006090 <I2C_RequestMemoryRead+0xdc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060e4:	f1b8 0f01 	cmp.w	r8, #1
 80060e8:	d008      	beq.n	80060fc <I2C_RequestMemoryRead+0x148>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060ea:	0a3b      	lsrs	r3, r7, #8
 80060ec:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ee:	6943      	ldr	r3, [r0, #20]
 80060f0:	0619      	lsls	r1, r3, #24
 80060f2:	d403      	bmi.n	80060fc <I2C_RequestMemoryRead+0x148>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f4:	6943      	ldr	r3, [r0, #20]
 80060f6:	055a      	lsls	r2, r3, #21
 80060f8:	d5f9      	bpl.n	80060ee <I2C_RequestMemoryRead+0x13a>
 80060fa:	e78e      	b.n	800601a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060fc:	b2ff      	uxtb	r7, r7
 80060fe:	6107      	str	r7, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006100:	6943      	ldr	r3, [r0, #20]
 8006102:	061a      	lsls	r2, r3, #24
 8006104:	d403      	bmi.n	800610e <I2C_RequestMemoryRead+0x15a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006106:	6943      	ldr	r3, [r0, #20]
 8006108:	055b      	lsls	r3, r3, #21
 800610a:	d5f9      	bpl.n	8006100 <I2C_RequestMemoryRead+0x14c>
 800610c:	e785      	b.n	800601a <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006114:	6003      	str	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006116:	6943      	ldr	r3, [r0, #20]
 8006118:	07dd      	lsls	r5, r3, #31
 800611a:	d5fc      	bpl.n	8006116 <I2C_RequestMemoryRead+0x162>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800611c:	f044 0401 	orr.w	r4, r4, #1
 8006120:	6104      	str	r4, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006122:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006124:	4649      	mov	r1, r9
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff fe34 	bl	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800612c:	3800      	subs	r0, #0
 800612e:	bf18      	it	ne
 8006130:	2001      	movne	r0, #1
 8006132:	e762      	b.n	8005ffa <I2C_RequestMemoryRead+0x46>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006134:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8006138:	b2cc      	uxtb	r4, r1
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800613a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800613c:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800613e:	4649      	mov	r1, r9
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff fe27 	bl	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8006146:	2800      	cmp	r0, #0
 8006148:	f47f af56 	bne.w	8005ff8 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614c:	9003      	str	r0, [sp, #12]
 800614e:	6830      	ldr	r0, [r6, #0]
 8006150:	6943      	ldr	r3, [r0, #20]
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	6983      	ldr	r3, [r0, #24]
 8006156:	9303      	str	r3, [sp, #12]
 8006158:	9b03      	ldr	r3, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615a:	6943      	ldr	r3, [r0, #20]
 800615c:	061d      	lsls	r5, r3, #24
 800615e:	d41b      	bmi.n	8006198 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006160:	6943      	ldr	r3, [r0, #20]
 8006162:	055b      	lsls	r3, r3, #21
 8006164:	f53f af59 	bmi.w	800601a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006168:	f7ff f91a 	bl	80053a0 <HAL_GetTick>
 800616c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800616e:	1ac3      	subs	r3, r0, r3
 8006170:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006172:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006174:	d302      	bcc.n	800617c <I2C_RequestMemoryRead+0x1c8>
 8006176:	f1b9 0f00 	cmp.w	r9, #0
 800617a:	d1ee      	bne.n	800615a <I2C_RequestMemoryRead+0x1a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800617c:	6943      	ldr	r3, [r0, #20]
 800617e:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8006182:	d1ea      	bne.n	800615a <I2C_RequestMemoryRead+0x1a6>
          hi2c->State               = HAL_I2C_STATE_READY;
 8006184:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006188:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618c:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006190:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8006192:	4313      	orrs	r3, r2
 8006194:	6433      	str	r3, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8006196:	e74e      	b.n	8006036 <I2C_RequestMemoryRead+0x82>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006198:	f1b8 0f01 	cmp.w	r8, #1
 800619c:	d017      	beq.n	80061ce <I2C_RequestMemoryRead+0x21a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800619e:	0a3b      	lsrs	r3, r7, #8
 80061a0:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	6943      	ldr	r3, [r0, #20]
 80061a4:	061d      	lsls	r5, r3, #24
 80061a6:	d412      	bmi.n	80061ce <I2C_RequestMemoryRead+0x21a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a8:	6943      	ldr	r3, [r0, #20]
 80061aa:	055b      	lsls	r3, r3, #21
 80061ac:	f53f af35 	bmi.w	800601a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b0:	f7ff f8f6 	bl	80053a0 <HAL_GetTick>
 80061b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b6:	1ac3      	subs	r3, r0, r3
 80061b8:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061ba:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	d302      	bcc.n	80061c4 <I2C_RequestMemoryRead+0x210>
 80061be:	f1b9 0f00 	cmp.w	r9, #0
 80061c2:	d1ee      	bne.n	80061a2 <I2C_RequestMemoryRead+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061c4:	6943      	ldr	r3, [r0, #20]
 80061c6:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80061ca:	d1ea      	bne.n	80061a2 <I2C_RequestMemoryRead+0x1ee>
 80061cc:	e7da      	b.n	8006184 <I2C_RequestMemoryRead+0x1d0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ce:	b2ff      	uxtb	r7, r7
 80061d0:	6107      	str	r7, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061d2:	6943      	ldr	r3, [r0, #20]
 80061d4:	061f      	lsls	r7, r3, #24
 80061d6:	f53f af5d 	bmi.w	8006094 <I2C_RequestMemoryRead+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061da:	6943      	ldr	r3, [r0, #20]
 80061dc:	0559      	lsls	r1, r3, #21
 80061de:	f53f af1c 	bmi.w	800601a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7ff f8dd 	bl	80053a0 <HAL_GetTick>
 80061e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061e8:	1ac3      	subs	r3, r0, r3
 80061ea:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061ec:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	d302      	bcc.n	80061f6 <I2C_RequestMemoryRead+0x242>
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	d1ed      	bne.n	80061d2 <I2C_RequestMemoryRead+0x21e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061f6:	6943      	ldr	r3, [r0, #20]
 80061f8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80061fc:	d1e9      	bne.n	80061d2 <I2C_RequestMemoryRead+0x21e>
 80061fe:	e7c1      	b.n	8006184 <I2C_RequestMemoryRead+0x1d0>

08006200 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006200:	2800      	cmp	r0, #0
 8006202:	f000 80b8 	beq.w	8006376 <HAL_I2C_Init+0x176>
{
 8006206:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006208:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800620c:	4604      	mov	r4, r0
 800620e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8098 	beq.w	8006348 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8006218:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800621a:	2224      	movs	r2, #36	@ 0x24
 800621c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800622e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006236:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006238:	f000 fec6 	bl	8006fc8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800623c:	4b4f      	ldr	r3, [pc, #316]	@ (800637c <HAL_I2C_Init+0x17c>)
 800623e:	6865      	ldr	r5, [r4, #4]
 8006240:	429d      	cmp	r5, r3
 8006242:	d84f      	bhi.n	80062e4 <HAL_I2C_Init+0xe4>
 8006244:	4b4e      	ldr	r3, [pc, #312]	@ (8006380 <HAL_I2C_Init+0x180>)
 8006246:	4298      	cmp	r0, r3
 8006248:	d97c      	bls.n	8006344 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800624a:	4b4e      	ldr	r3, [pc, #312]	@ (8006384 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800624c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800624e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006252:	1e43      	subs	r3, r0, #1
 8006254:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	6851      	ldr	r1, [r2, #4]
 800625c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006260:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8006264:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006266:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8006268:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800626c:	f10c 0c01 	add.w	ip, ip, #1
 8006270:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006274:	ea41 010c 	orr.w	r1, r1, ip
 8006278:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800627a:	69d1      	ldr	r1, [r2, #28]
 800627c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8006280:	3301      	adds	r3, #1
 8006282:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8006286:	4203      	tst	r3, r0
 8006288:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800628c:	d161      	bne.n	8006352 <HAL_I2C_Init+0x152>
 800628e:	2304      	movs	r3, #4
 8006290:	430b      	orrs	r3, r1
 8006292:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006294:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	4303      	orrs	r3, r0
 800629c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062a4:	6891      	ldr	r1, [r2, #8]
 80062a6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80062aa:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80062ae:	4303      	orrs	r3, r0
 80062b0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062b8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80062bc:	68d1      	ldr	r1, [r2, #12]
 80062be:	4303      	orrs	r3, r0
 80062c0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80062c4:	430b      	orrs	r3, r1
 80062c6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80062c8:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ca:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80062cc:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80062d2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062da:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 80062e0:	4618      	mov	r0, r3
}
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062e4:	4b28      	ldr	r3, [pc, #160]	@ (8006388 <HAL_I2C_Init+0x188>)
 80062e6:	4298      	cmp	r0, r3
 80062e8:	d92c      	bls.n	8006344 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062ea:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80062ec:	4b25      	ldr	r3, [pc, #148]	@ (8006384 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ee:	4e27      	ldr	r6, [pc, #156]	@ (800638c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80062f0:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062f4:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062f6:	6850      	ldr	r0, [r2, #4]
 80062f8:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80062fc:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8006300:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006302:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006306:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800630a:	fb00 f101 	mul.w	r1, r0, r1
 800630e:	fba6 6101 	umull	r6, r1, r6, r1
 8006312:	6a10      	ldr	r0, [r2, #32]
 8006314:	0989      	lsrs	r1, r1, #6
 8006316:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800631a:	3101      	adds	r1, #1
 800631c:	4301      	orrs	r1, r0
 800631e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006320:	69d1      	ldr	r1, [r2, #28]
 8006322:	68a0      	ldr	r0, [r4, #8]
 8006324:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8006328:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800632c:	b9a0      	cbnz	r0, 8006358 <HAL_I2C_Init+0x158>
 800632e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006332:	fbb3 f3f5 	udiv	r3, r3, r5
 8006336:	3301      	adds	r3, #1
 8006338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633c:	b1cb      	cbz	r3, 8006372 <HAL_I2C_Init+0x172>
 800633e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006342:	e7a5      	b.n	8006290 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006344:	2001      	movs	r0, #1
}
 8006346:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006348:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800634c:	f7fe fcec 	bl	8004d28 <HAL_I2C_MspInit>
 8006350:	e762      	b.n	8006218 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006356:	e79b      	b.n	8006290 <HAL_I2C_Init+0x90>
 8006358:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800635c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006360:	fbb3 f3f5 	udiv	r3, r3, r5
 8006364:	3301      	adds	r3, #1
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	b113      	cbz	r3, 8006372 <HAL_I2C_Init+0x172>
 800636c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006370:	e78e      	b.n	8006290 <HAL_I2C_Init+0x90>
 8006372:	2301      	movs	r3, #1
 8006374:	e78c      	b.n	8006290 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006376:	2001      	movs	r0, #1
}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	000186a0 	.word	0x000186a0
 8006380:	001e847f 	.word	0x001e847f
 8006384:	431bde83 	.word	0x431bde83
 8006388:	003d08ff 	.word	0x003d08ff
 800638c:	10624dd3 	.word	0x10624dd3

08006390 <HAL_I2C_Mem_Write>:
{
 8006390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006394:	4604      	mov	r4, r0
 8006396:	b083      	sub	sp, #12
 8006398:	4698      	mov	r8, r3
 800639a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	@ 0x2c
 800639e:	460e      	mov	r6, r1
 80063a0:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80063a2:	f7fe fffd 	bl	80053a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a6:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d004      	beq.n	80063b8 <HAL_I2C_Mem_Write+0x28>
      return HAL_BUSY;
 80063ae:	2602      	movs	r6, #2
}
 80063b0:	4630      	mov	r0, r6
 80063b2:	b003      	add	sp, #12
 80063b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b8:	4605      	mov	r5, r0
 80063ba:	6820      	ldr	r0, [r4, #0]
 80063bc:	6983      	ldr	r3, [r0, #24]
 80063be:	079a      	lsls	r2, r3, #30
 80063c0:	d517      	bpl.n	80063f2 <HAL_I2C_Mem_Write+0x62>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fe ffed 	bl	80053a0 <HAL_GetTick>
 80063c6:	1b40      	subs	r0, r0, r5
 80063c8:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063ca:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063cc:	d9f6      	bls.n	80063bc <HAL_I2C_Mem_Write+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063ce:	6983      	ldr	r3, [r0, #24]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	f013 0302 	ands.w	r3, r3, #2
 80063d6:	d1f1      	bne.n	80063bc <HAL_I2C_Mem_Write+0x2c>
          hi2c->State             = HAL_I2C_STATE_READY;
 80063d8:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063da:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063dc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80063e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063ea:	f042 0220 	orr.w	r2, r2, #32
 80063ee:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80063f0:	e7dd      	b.n	80063ae <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80063f2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d0d9      	beq.n	80063ae <HAL_I2C_Mem_Write+0x1e>
 80063fa:	2301      	movs	r3, #1
 80063fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006400:	6803      	ldr	r3, [r0, #0]
 8006402:	07db      	lsls	r3, r3, #31
 8006404:	d56d      	bpl.n	80064e2 <HAL_I2C_Mem_Write+0x152>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006406:	4631      	mov	r1, r6
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006408:	6806      	ldr	r6, [r0, #0]
 800640a:	f426 6600 	bic.w	r6, r6, #2048	@ 0x800
 800640e:	6006      	str	r6, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8006410:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006412:	6260      	str	r0, [r4, #36]	@ 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006414:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006416:	9000      	str	r0, [sp, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006418:	2021      	movs	r0, #33	@ 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641a:	9501      	str	r5, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800641c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006420:	2040      	movs	r0, #64	@ 0x40
 8006422:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006426:	2000      	movs	r0, #0
 8006428:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 800642a:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800642e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8006430:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006432:	4863      	ldr	r0, [pc, #396]	@ (80065c0 <HAL_I2C_Mem_Write+0x230>)
 8006434:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006436:	4643      	mov	r3, r8
 8006438:	463a      	mov	r2, r7
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff fcf4 	bl	8005e28 <I2C_RequestMemoryWrite>
 8006440:	4606      	mov	r6, r0
 8006442:	bb28      	cbnz	r0, 8006490 <HAL_I2C_Mem_Write+0x100>
    while (hi2c->XferSize > 0U)
 8006444:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006446:	6823      	ldr	r3, [r4, #0]
    while (hi2c->XferSize > 0U)
 8006448:	2a00      	cmp	r2, #0
 800644a:	f000 80b3 	beq.w	80065b4 <HAL_I2C_Mem_Write+0x224>
 800644e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006450:	3201      	adds	r2, #1
 8006452:	d15e      	bne.n	8006512 <HAL_I2C_Mem_Write+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	0610      	lsls	r0, r2, #24
 8006458:	d41c      	bmi.n	8006494 <HAL_I2C_Mem_Write+0x104>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	0551      	lsls	r1, r2, #21
 800645e:	d5f9      	bpl.n	8006454 <HAL_I2C_Mem_Write+0xc4>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006460:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006462:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006466:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006468:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800646a:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800646c:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006470:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006474:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006476:	f042 0204 	orr.w	r2, r2, #4
 800647a:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800647e:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006480:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8006482:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006486:	d103      	bne.n	8006490 <HAL_I2C_Mem_Write+0x100>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8006490:	2601      	movs	r6, #1
 8006492:	e78d      	b.n	80063b0 <HAL_I2C_Mem_Write+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006494:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006496:	8d27      	ldrh	r7, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006498:	4628      	mov	r0, r5
      hi2c->XferSize--;
 800649a:	1e79      	subs	r1, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800649c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a0:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80064a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80064a4:	3a01      	subs	r2, #1
 80064a6:	b292      	uxth	r2, r2
 80064a8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064aa:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 80064ac:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80064ae:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064b0:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80064b2:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064b4:	d512      	bpl.n	80064dc <HAL_I2C_Mem_Write+0x14c>
 80064b6:	b931      	cbnz	r1, 80064c6 <HAL_I2C_Mem_Write+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	0755      	lsls	r5, r2, #29
 80064bc:	d444      	bmi.n	8006548 <HAL_I2C_Mem_Write+0x1b8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	0550      	lsls	r0, r2, #21
 80064c2:	d5f9      	bpl.n	80064b8 <HAL_I2C_Mem_Write+0x128>
 80064c4:	e7cc      	b.n	8006460 <HAL_I2C_Mem_Write+0xd0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064c6:	786a      	ldrb	r2, [r5, #1]
 80064c8:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80064ca:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 80064cc:	3f02      	subs	r7, #2
        hi2c->XferCount--;
 80064ce:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 80064d0:	b2b9      	uxth	r1, r7
        hi2c->pBuffPtr++;
 80064d2:	3502      	adds	r5, #2
        hi2c->XferCount--;
 80064d4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80064d6:	6265      	str	r5, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80064d8:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80064da:	8562      	strh	r2, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80064dc:	2900      	cmp	r1, #0
 80064de:	d1b9      	bne.n	8006454 <HAL_I2C_Mem_Write+0xc4>
 80064e0:	e7ea      	b.n	80064b8 <HAL_I2C_Mem_Write+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80064e2:	6803      	ldr	r3, [r0, #0]
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	e78c      	b.n	8006406 <HAL_I2C_Mem_Write+0x76>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80064ee:	8d27      	ldrh	r7, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f0:	4602      	mov	r2, r0
      hi2c->XferSize--;
 80064f2:	1e79      	subs	r1, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f4:	f812 cb01 	ldrb.w	ip, [r2], #1
 80064f8:	f8c3 c010 	str.w	ip, [r3, #16]
      hi2c->pBuffPtr++;
 80064fc:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80064fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006500:	3a01      	subs	r2, #1
 8006502:	b292      	uxth	r2, r2
 8006504:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006506:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 8006508:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800650a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800650c:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800650e:	d428      	bmi.n	8006562 <HAL_I2C_Mem_Write+0x1d2>
    while (hi2c->XferSize > 0U)
 8006510:	b341      	cbz	r1, 8006564 <HAL_I2C_Mem_Write+0x1d4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	0611      	lsls	r1, r2, #24
 8006516:	d4e9      	bmi.n	80064ec <HAL_I2C_Mem_Write+0x15c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	0550      	lsls	r0, r2, #21
 800651c:	d4a0      	bmi.n	8006460 <HAL_I2C_Mem_Write+0xd0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7fe ff3f 	bl	80053a0 <HAL_GetTick>
 8006522:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006524:	1b43      	subs	r3, r0, r5
 8006526:	429a      	cmp	r2, r3
 8006528:	d22c      	bcs.n	8006584 <HAL_I2C_Mem_Write+0x1f4>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	f012 0280 	ands.w	r2, r2, #128	@ 0x80
 8006532:	d1ee      	bne.n	8006512 <HAL_I2C_Mem_Write+0x182>
          hi2c->State               = HAL_I2C_STATE_READY;
 8006534:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006538:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006540:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006542:	430a      	orrs	r2, r1
 8006544:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8006546:	e799      	b.n	800647c <HAL_I2C_Mem_Write+0xec>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006548:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800654a:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8006550:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006552:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006554:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8006558:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 8006560:	e726      	b.n	80063b0 <HAL_I2C_Mem_Write+0x20>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006562:	b999      	cbnz	r1, 800658c <HAL_I2C_Mem_Write+0x1fc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	0752      	lsls	r2, r2, #29
 8006568:	d4ee      	bmi.n	8006548 <HAL_I2C_Mem_Write+0x1b8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	0551      	lsls	r1, r2, #21
 800656e:	f53f af77 	bmi.w	8006460 <HAL_I2C_Mem_Write+0xd0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fe ff15 	bl	80053a0 <HAL_GetTick>
 8006576:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006578:	1b43      	subs	r3, r0, r5
 800657a:	429a      	cmp	r2, r3
 800657c:	d314      	bcc.n	80065a8 <HAL_I2C_Mem_Write+0x218>
 800657e:	b19a      	cbz	r2, 80065a8 <HAL_I2C_Mem_Write+0x218>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	e7ef      	b.n	8006564 <HAL_I2C_Mem_Write+0x1d4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006584:	2a00      	cmp	r2, #0
 8006586:	d0d0      	beq.n	800652a <HAL_I2C_Mem_Write+0x19a>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	e7c2      	b.n	8006512 <HAL_I2C_Mem_Write+0x182>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800658c:	7842      	ldrb	r2, [r0, #1]
 800658e:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8006590:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8006592:	3f02      	subs	r7, #2
        hi2c->XferCount--;
 8006594:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8006596:	b2b9      	uxth	r1, r7
        hi2c->pBuffPtr++;
 8006598:	3002      	adds	r0, #2
        hi2c->XferCount--;
 800659a:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800659c:	6260      	str	r0, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800659e:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80065a0:	8562      	strh	r2, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065a2:	2900      	cmp	r1, #0
 80065a4:	d1b5      	bne.n	8006512 <HAL_I2C_Mem_Write+0x182>
 80065a6:	e7dd      	b.n	8006564 <HAL_I2C_Mem_Write+0x1d4>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	f012 0204 	ands.w	r2, r2, #4
 80065b0:	d1d8      	bne.n	8006564 <HAL_I2C_Mem_Write+0x1d4>
 80065b2:	e7bf      	b.n	8006534 <HAL_I2C_Mem_Write+0x1a4>
 80065b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065b6:	3201      	adds	r2, #1
 80065b8:	f43f af7e 	beq.w	80064b8 <HAL_I2C_Mem_Write+0x128>
 80065bc:	e7d2      	b.n	8006564 <HAL_I2C_Mem_Write+0x1d4>
 80065be:	bf00      	nop
 80065c0:	ffff0000 	.word	0xffff0000

080065c4 <HAL_I2C_Mem_Read>:
{
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	b086      	sub	sp, #24
 80065cc:	4699      	mov	r9, r3
 80065ce:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 80065d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80065d4:	460f      	mov	r7, r1
 80065d6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80065d8:	f7fe fee2 	bl	80053a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065dc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d004      	beq.n	80065ee <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80065e4:	2702      	movs	r7, #2
}
 80065e6:	4638      	mov	r0, r7
 80065e8:	b006      	add	sp, #24
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ee:	4605      	mov	r5, r0
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	6983      	ldr	r3, [r0, #24]
 80065f4:	079b      	lsls	r3, r3, #30
 80065f6:	d517      	bpl.n	8006628 <HAL_I2C_Mem_Read+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f8:	f7fe fed2 	bl	80053a0 <HAL_GetTick>
 80065fc:	1b40      	subs	r0, r0, r5
 80065fe:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006600:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	d9f6      	bls.n	80065f2 <HAL_I2C_Mem_Read+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006604:	6983      	ldr	r3, [r0, #24]
 8006606:	43db      	mvns	r3, r3
 8006608:	f013 0302 	ands.w	r3, r3, #2
 800660c:	d1f1      	bne.n	80065f2 <HAL_I2C_Mem_Read+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 800660e:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006610:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006612:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006616:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800661a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800661c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	f042 0220 	orr.w	r2, r2, #32
 8006624:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8006626:	e7dd      	b.n	80065e4 <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 8006628:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d0d9      	beq.n	80065e4 <HAL_I2C_Mem_Read+0x20>
 8006630:	2301      	movs	r3, #1
 8006632:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006636:	6803      	ldr	r3, [r0, #0]
 8006638:	07d9      	lsls	r1, r3, #31
 800663a:	d561      	bpl.n	8006700 <HAL_I2C_Mem_Read+0x13c>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800663c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800663e:	6807      	ldr	r7, [r0, #0]
 8006640:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 8006644:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8006646:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006648:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800664a:	2022      	movs	r0, #34	@ 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800664c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006650:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006654:	2040      	movs	r0, #64	@ 0x40
 8006656:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800665a:	2000      	movs	r0, #0
 800665c:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 800665e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006662:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8006664:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006666:	488b      	ldr	r0, [pc, #556]	@ (8006894 <HAL_I2C_Mem_Read+0x2d0>)
 8006668:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800666a:	464b      	mov	r3, r9
 800666c:	4642      	mov	r2, r8
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fca0 	bl	8005fb4 <I2C_RequestMemoryRead>
 8006674:	4607      	mov	r7, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d13d      	bne.n	80066f6 <HAL_I2C_Mem_Read+0x132>
    if (hi2c->XferSize == 0U)
 800667a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800667e:	2a00      	cmp	r2, #0
 8006680:	d143      	bne.n	800670a <HAL_I2C_Mem_Read+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006682:	9002      	str	r0, [sp, #8]
 8006684:	695a      	ldr	r2, [r3, #20]
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	9202      	str	r2, [sp, #8]
 800668c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006694:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006698:	2220      	movs	r2, #32
 800669a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800669e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80066a6:	e79e      	b.n	80065e6 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	0652      	lsls	r2, r2, #25
 80066ac:	f100 80ca 	bmi.w	8006844 <HAL_I2C_Mem_Read+0x280>
 80066b0:	2e00      	cmp	r6, #0
 80066b2:	f000 80c3 	beq.w	800683c <HAL_I2C_Mem_Read+0x278>
 80066b6:	e00d      	b.n	80066d4 <HAL_I2C_Mem_Read+0x110>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b8:	f7fe fe72 	bl	80053a0 <HAL_GetTick>
 80066bc:	1b40      	subs	r0, r0, r5
 80066be:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066c0:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	d203      	bcs.n	80066cc <HAL_I2C_Mem_Read+0x108>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	0651      	lsls	r1, r2, #25
 80066c8:	f140 8081 	bpl.w	80067ce <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	0652      	lsls	r2, r2, #25
 80066d0:	f100 80b8 	bmi.w	8006844 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	06d0      	lsls	r0, r2, #27
 80066d8:	d5ee      	bpl.n	80066b8 <HAL_I2C_Mem_Read+0xf4>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066da:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066dc:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e0:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e2:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066e4:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066e6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ea:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066f0:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80066f2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80066f6:	2701      	movs	r7, #1
}
 80066f8:	4638      	mov	r0, r7
 80066fa:	b006      	add	sp, #24
 80066fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8006700:	6803      	ldr	r3, [r0, #0]
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	6003      	str	r3, [r0, #0]
 8006708:	e798      	b.n	800663c <HAL_I2C_Mem_Read+0x78>
    else if (hi2c->XferSize == 1U)
 800670a:	2a01      	cmp	r2, #1
 800670c:	f000 8116 	beq.w	800693c <HAL_I2C_Mem_Read+0x378>
    else if (hi2c->XferSize == 2U)
 8006710:	2a02      	cmp	r2, #2
 8006712:	d07b      	beq.n	800680c <HAL_I2C_Mem_Read+0x248>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006714:	9005      	str	r0, [sp, #20]
 8006716:	6959      	ldr	r1, [r3, #20]
 8006718:	9105      	str	r1, [sp, #20]
 800671a:	6999      	ldr	r1, [r3, #24]
 800671c:	9105      	str	r1, [sp, #20]
 800671e:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8006720:	2a03      	cmp	r2, #3
 8006722:	d8c1      	bhi.n	80066a8 <HAL_I2C_Mem_Read+0xe4>
        if (hi2c->XferSize == 1U)
 8006724:	2a01      	cmp	r2, #1
 8006726:	f000 80e0 	beq.w	80068ea <HAL_I2C_Mem_Read+0x326>
        else if (hi2c->XferSize == 2U)
 800672a:	2a02      	cmp	r2, #2
 800672c:	f000 80b4 	beq.w	8006898 <HAL_I2C_Mem_Read+0x2d4>
 8006730:	1c71      	adds	r1, r6, #1
 8006732:	d13e      	bne.n	80067b2 <HAL_I2C_Mem_Read+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	0752      	lsls	r2, r2, #29
 8006738:	d5fc      	bpl.n	8006734 <HAL_I2C_Mem_Read+0x170>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673a:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006742:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006748:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800674a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800674c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800674e:	3b01      	subs	r3, #1
 8006750:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8006752:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8006754:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8006756:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006758:	1c73      	adds	r3, r6, #1
          hi2c->XferSize--;
 800675a:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800675c:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	d144      	bne.n	80067ec <HAL_I2C_Mem_Read+0x228>
 8006762:	6953      	ldr	r3, [r2, #20]
 8006764:	0758      	lsls	r0, r3, #29
 8006766:	d5fc      	bpl.n	8006762 <HAL_I2C_Mem_Read+0x19e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800676e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006770:	6913      	ldr	r3, [r2, #16]
 8006772:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006774:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8006776:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8006778:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677a:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 800677c:	3b01      	subs	r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006782:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8006784:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8006786:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 800678a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800678c:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006790:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8006792:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006794:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8006796:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8006798:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800679a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800679c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800679e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80067a0:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80067a2:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80067a4:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80067a6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	f43f af74 	beq.w	8006696 <HAL_I2C_Mem_Read+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	e7b6      	b.n	8006720 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	0752      	lsls	r2, r2, #29
 80067b6:	d4c0      	bmi.n	800673a <HAL_I2C_Mem_Read+0x176>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b8:	f7fe fdf2 	bl	80053a0 <HAL_GetTick>
 80067bc:	1b43      	subs	r3, r0, r5
 80067be:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	d301      	bcc.n	80067c8 <HAL_I2C_Mem_Read+0x204>
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	d1f4      	bne.n	80067b2 <HAL_I2C_Mem_Read+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	0751      	lsls	r1, r2, #29
 80067cc:	d4f1      	bmi.n	80067b2 <HAL_I2C_Mem_Read+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067d2:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80067de:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80067e8:	2701      	movs	r7, #1
 80067ea:	e785      	b.n	80066f8 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067ec:	6953      	ldr	r3, [r2, #20]
 80067ee:	075b      	lsls	r3, r3, #29
 80067f0:	f100 80b3 	bmi.w	800695a <HAL_I2C_Mem_Read+0x396>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f4:	f7fe fdd4 	bl	80053a0 <HAL_GetTick>
 80067f8:	1b43      	subs	r3, r0, r5
 80067fa:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067fc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	d301      	bcc.n	8006804 <HAL_I2C_Mem_Read+0x240>
 8006800:	2e00      	cmp	r6, #0
 8006802:	d1f3      	bne.n	80067ec <HAL_I2C_Mem_Read+0x228>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006804:	6953      	ldr	r3, [r2, #20]
 8006806:	0759      	lsls	r1, r3, #29
 8006808:	d4f0      	bmi.n	80067ec <HAL_I2C_Mem_Read+0x228>
 800680a:	e7e0      	b.n	80067ce <HAL_I2C_Mem_Read+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8006812:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800681a:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681c:	9004      	str	r0, [sp, #16]
 800681e:	6959      	ldr	r1, [r3, #20]
 8006820:	9104      	str	r1, [sp, #16]
 8006822:	6999      	ldr	r1, [r3, #24]
 8006824:	9104      	str	r1, [sp, #16]
 8006826:	9904      	ldr	r1, [sp, #16]
 8006828:	e77a      	b.n	8006720 <HAL_I2C_Mem_Read+0x15c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fe fdb9 	bl	80053a0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	0651      	lsls	r1, r2, #25
 8006834:	d5cb      	bpl.n	80067ce <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	0652      	lsls	r2, r2, #25
 800683a:	d403      	bmi.n	8006844 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	06d0      	lsls	r0, r2, #27
 8006840:	d5f3      	bpl.n	800682a <HAL_I2C_Mem_Read+0x266>
 8006842:	e74a      	b.n	80066da <HAL_I2C_Mem_Read+0x116>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006844:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 800684a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800684c:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 800684e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8006850:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8006852:	3b01      	subs	r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006858:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 800685a:	3a01      	subs	r2, #1
 800685c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800685e:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006862:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8006864:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8006866:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800686a:	d59d      	bpl.n	80067a8 <HAL_I2C_Mem_Read+0x1e4>
          if (hi2c->XferSize == 3U)
 800686c:	2a03      	cmp	r2, #3
 800686e:	d103      	bne.n	8006878 <HAL_I2C_Mem_Read+0x2b4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	680b      	ldr	r3, [r1, #0]
 8006872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006876:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006878:	690b      	ldr	r3, [r1, #16]
 800687a:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 800687c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800687e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8006880:	3301      	adds	r3, #1
 8006882:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8006884:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8006886:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006888:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800688a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800688c:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 800688e:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006890:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006892:	e789      	b.n	80067a8 <HAL_I2C_Mem_Read+0x1e4>
 8006894:	ffff0000 	.word	0xffff0000
 8006898:	1c70      	adds	r0, r6, #1
 800689a:	d117      	bne.n	80068cc <HAL_I2C_Mem_Read+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	0751      	lsls	r1, r2, #29
 80068a0:	d5fc      	bpl.n	800689c <HAL_I2C_Mem_Read+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80068ae:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80068b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80068b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80068ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80068bc:	3b01      	subs	r3, #1
 80068be:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 80068c2:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c4:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 80068c6:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80068ca:	e7d7      	b.n	800687c <HAL_I2C_Mem_Read+0x2b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	0750      	lsls	r0, r2, #29
 80068d0:	d4e7      	bmi.n	80068a2 <HAL_I2C_Mem_Read+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fe fd65 	bl	80053a0 <HAL_GetTick>
 80068d6:	1b43      	subs	r3, r0, r5
 80068d8:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068da:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	d301      	bcc.n	80068e2 <HAL_I2C_Mem_Read+0x31e>
 80068de:	2e00      	cmp	r6, #0
 80068e0:	d1f4      	bne.n	80068cc <HAL_I2C_Mem_Read+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	0752      	lsls	r2, r2, #29
 80068e6:	d4f1      	bmi.n	80068cc <HAL_I2C_Mem_Read+0x308>
 80068e8:	e771      	b.n	80067ce <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	0650      	lsls	r0, r2, #25
 80068ee:	d421      	bmi.n	8006934 <HAL_I2C_Mem_Read+0x370>
 80068f0:	b1e6      	cbz	r6, 800692c <HAL_I2C_Mem_Read+0x368>
 80068f2:	e00c      	b.n	800690e <HAL_I2C_Mem_Read+0x34a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f4:	f7fe fd54 	bl	80053a0 <HAL_GetTick>
 80068f8:	1b40      	subs	r0, r0, r5
 80068fa:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068fc:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fe:	d203      	bcs.n	8006908 <HAL_I2C_Mem_Read+0x344>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	0652      	lsls	r2, r2, #25
 8006904:	f57f af63 	bpl.w	80067ce <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	0650      	lsls	r0, r2, #25
 800690c:	d412      	bmi.n	8006934 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	06d1      	lsls	r1, r2, #27
 8006912:	f53f aee2 	bmi.w	80066da <HAL_I2C_Mem_Read+0x116>
 8006916:	e7ed      	b.n	80068f4 <HAL_I2C_Mem_Read+0x330>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fe fd42 	bl	80053a0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	695a      	ldr	r2, [r3, #20]
 8006920:	0652      	lsls	r2, r2, #25
 8006922:	f57f af54 	bpl.w	80067ce <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	0650      	lsls	r0, r2, #25
 800692a:	d403      	bmi.n	8006934 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	06d1      	lsls	r1, r2, #27
 8006930:	d5f2      	bpl.n	8006918 <HAL_I2C_Mem_Read+0x354>
 8006932:	e6d2      	b.n	80066da <HAL_I2C_Mem_Read+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006938:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800693a:	e79f      	b.n	800687c <HAL_I2C_Mem_Read+0x2b8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8006942:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006944:	9003      	str	r0, [sp, #12]
 8006946:	6959      	ldr	r1, [r3, #20]
 8006948:	9103      	str	r1, [sp, #12]
 800694a:	6999      	ldr	r1, [r3, #24]
 800694c:	9103      	str	r1, [sp, #12]
 800694e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8006956:	6019      	str	r1, [r3, #0]
 8006958:	e6e2      	b.n	8006720 <HAL_I2C_Mem_Read+0x15c>
 800695a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800695c:	e704      	b.n	8006768 <HAL_I2C_Mem_Read+0x1a4>
 800695e:	bf00      	nop

08006960 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006960:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8006964:	2a20      	cmp	r2, #32
{
 8006966:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006968:	fa5f fc82 	uxtb.w	ip, r2
 800696c:	d001      	beq.n	8006972 <HAL_I2CEx_ConfigAnalogFilter+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800696e:	2002      	movs	r0, #2
  }
}
 8006970:	4770      	bx	lr
    __HAL_I2C_DISABLE(hi2c);
 8006972:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006974:	2024      	movs	r0, #36	@ 0x24
 8006976:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800697a:	6810      	ldr	r0, [r2, #0]
 800697c:	f020 0001 	bic.w	r0, r0, #1
 8006980:	6010      	str	r0, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006982:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8006984:	f020 0010 	bic.w	r0, r0, #16
 8006988:	6250      	str	r0, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 800698a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800698c:	4301      	orrs	r1, r0
 800698e:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 8006990:	6811      	ldr	r1, [r2, #0]
 8006992:	f041 0101 	orr.w	r1, r1, #1
 8006996:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8006998:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800699a:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 800699e:	4770      	bx	lr

080069a0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a0:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 80069a4:	2a20      	cmp	r2, #32
 80069a6:	d001      	beq.n	80069ac <HAL_I2CEx_ConfigDigitalFilter+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2002      	movs	r0, #2
  }
}
 80069aa:	4770      	bx	lr
{
 80069ac:	b410      	push	{r4}
 80069ae:	fa5f fc82 	uxtb.w	ip, r2
    __HAL_I2C_DISABLE(hi2c);
 80069b2:	6804      	ldr	r4, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069b4:	2224      	movs	r2, #36	@ 0x24
 80069b6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->FLTR;
 80069c2:	4603      	mov	r3, r0
 80069c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
    tmpreg &= ~(I2C_FLTR_DNF);
 80069c6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80069ca:	4002      	ands	r2, r0
    tmpreg |= DigitalFilter;
 80069cc:	4311      	orrs	r1, r2
    hi2c->Instance->FLTR = tmpreg;
 80069ce:	b289      	uxth	r1, r1
 80069d0:	6261      	str	r1, [r4, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80069da:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 80069de:	2000      	movs	r0, #0
}
 80069e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069e8:	b530      	push	{r4, r5, lr}
 80069ea:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80069ec:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80069ee:	491a      	ldr	r1, [pc, #104]	@ (8006a58 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80069f0:	4d1a      	ldr	r5, [pc, #104]	@ (8006a5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80069f2:	2200      	movs	r2, #0
 80069f4:	9201      	str	r2, [sp, #4]
 80069f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80069fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80069fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a04:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a06:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a08:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a0a:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8006a0c:	f7fe fcc8 	bl	80053a0 <HAL_GetTick>
 8006a10:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a12:	e005      	b.n	8006a20 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a14:	f7fe fcc4 	bl	80053a0 <HAL_GetTick>
 8006a18:	1b00      	subs	r0, r0, r4
 8006a1a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006a1e:	d816      	bhi.n	8006a4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a20:	686b      	ldr	r3, [r5, #4]
 8006a22:	03da      	lsls	r2, r3, #15
 8006a24:	d5f6      	bpl.n	8006a14 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a26:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a28:	4d0c      	ldr	r5, [pc, #48]	@ (8006a5c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8006a2e:	f7fe fcb7 	bl	80053a0 <HAL_GetTick>
 8006a32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a34:	e005      	b.n	8006a42 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a36:	f7fe fcb3 	bl	80053a0 <HAL_GetTick>
 8006a3a:	1b00      	subs	r0, r0, r4
 8006a3c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006a40:	d805      	bhi.n	8006a4e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a42:	686b      	ldr	r3, [r5, #4]
 8006a44:	039b      	lsls	r3, r3, #14
 8006a46:	d5f6      	bpl.n	8006a36 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8006a48:	2000      	movs	r0, #0
}
 8006a4a:	b003      	add	sp, #12
 8006a4c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8006a4e:	2003      	movs	r0, #3
}
 8006a50:	b003      	add	sp, #12
 8006a52:	bd30      	pop	{r4, r5, pc}
 8006a54:	40023800 	.word	0x40023800
 8006a58:	420e0000 	.word	0x420e0000
 8006a5c:	40007000 	.word	0x40007000

08006a60 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f000 81d8 	beq.w	8006e16 <HAL_RCC_OscConfig+0x3b6>
{
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	6803      	ldr	r3, [r0, #0]
 8006a6c:	07dd      	lsls	r5, r3, #31
{
 8006a6e:	b082      	sub	sp, #8
 8006a70:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a72:	d52f      	bpl.n	8006ad4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a74:	499d      	ldr	r1, [pc, #628]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006a76:	688a      	ldr	r2, [r1, #8]
 8006a78:	f002 020c 	and.w	r2, r2, #12
 8006a7c:	2a04      	cmp	r2, #4
 8006a7e:	f000 80ec 	beq.w	8006c5a <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a82:	688a      	ldr	r2, [r1, #8]
 8006a84:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a88:	2a08      	cmp	r2, #8
 8006a8a:	f000 80e2 	beq.w	8006c52 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a94:	f000 80eb 	beq.w	8006c6e <HAL_RCC_OscConfig+0x20e>
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a9c:	f000 8173 	beq.w	8006d86 <HAL_RCC_OscConfig+0x326>
 8006aa0:	4d92      	ldr	r5, [pc, #584]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006aa2:	682a      	ldr	r2, [r5, #0]
 8006aa4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	682a      	ldr	r2, [r5, #0]
 8006aac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ab0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80e0 	bne.w	8006c78 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab8:	f7fe fc72 	bl	80053a0 <HAL_GetTick>
 8006abc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006abe:	e005      	b.n	8006acc <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac0:	f7fe fc6e 	bl	80053a0 <HAL_GetTick>
 8006ac4:	1b80      	subs	r0, r0, r6
 8006ac6:	2864      	cmp	r0, #100	@ 0x64
 8006ac8:	f200 8100 	bhi.w	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	039f      	lsls	r7, r3, #14
 8006ad0:	d4f6      	bmi.n	8006ac0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	079d      	lsls	r5, r3, #30
 8006ad6:	d528      	bpl.n	8006b2a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ad8:	4a84      	ldr	r2, [pc, #528]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006ada:	6891      	ldr	r1, [r2, #8]
 8006adc:	f011 0f0c 	tst.w	r1, #12
 8006ae0:	f000 809b 	beq.w	8006c1a <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ae4:	6891      	ldr	r1, [r2, #8]
 8006ae6:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006aea:	2908      	cmp	r1, #8
 8006aec:	f000 8091 	beq.w	8006c12 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006af0:	68e3      	ldr	r3, [r4, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 810c 	beq.w	8006d10 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af8:	4b7d      	ldr	r3, [pc, #500]	@ (8006cf0 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afa:	4e7c      	ldr	r6, [pc, #496]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b00:	f7fe fc4e 	bl	80053a0 <HAL_GetTick>
 8006b04:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b06:	e005      	b.n	8006b14 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fe fc4a 	bl	80053a0 <HAL_GetTick>
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	2802      	cmp	r0, #2
 8006b10:	f200 80dc 	bhi.w	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	079f      	lsls	r7, r3, #30
 8006b18:	d5f6      	bpl.n	8006b08 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1a:	6833      	ldr	r3, [r6, #0]
 8006b1c:	6922      	ldr	r2, [r4, #16]
 8006b1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006b22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006b26:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	071a      	lsls	r2, r3, #28
 8006b2c:	d45c      	bmi.n	8006be8 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b2e:	075d      	lsls	r5, r3, #29
 8006b30:	d53a      	bpl.n	8006ba8 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b32:	4a6e      	ldr	r2, [pc, #440]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006b34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006b36:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8006b3a:	f040 8088 	bne.w	8006c4e <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b48:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b52:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b54:	4e67      	ldr	r6, [pc, #412]	@ (8006cf4 <HAL_RCC_OscConfig+0x294>)
 8006b56:	6833      	ldr	r3, [r6, #0]
 8006b58:	05d8      	lsls	r0, r3, #23
 8006b5a:	f140 80a7 	bpl.w	8006cac <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f000 80b7 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x274>
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	f000 811d 	beq.w	8006da6 <HAL_RCC_OscConfig+0x346>
 8006b6c:	4e5f      	ldr	r6, [pc, #380]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006b6e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	6732      	str	r2, [r6, #112]	@ 0x70
 8006b76:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8006b78:	f022 0204 	bic.w	r2, r2, #4
 8006b7c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 80ad 	bne.w	8006cde <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b84:	f7fe fc0c 	bl	80053a0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b88:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006b8c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8e:	e005      	b.n	8006b9c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b90:	f7fe fc06 	bl	80053a0 <HAL_GetTick>
 8006b94:	1bc0      	subs	r0, r0, r7
 8006b96:	4540      	cmp	r0, r8
 8006b98:	f200 8098 	bhi.w	8006ccc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	d4f6      	bmi.n	8006b90 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	f040 80f9 	bne.w	8006d9a <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba8:	69a3      	ldr	r3, [r4, #24]
 8006baa:	b1cb      	cbz	r3, 8006be0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bac:	4d4f      	ldr	r5, [pc, #316]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006bae:	68aa      	ldr	r2, [r5, #8]
 8006bb0:	f002 020c 	and.w	r2, r2, #12
 8006bb4:	2a08      	cmp	r2, #8
 8006bb6:	f000 80bc 	beq.w	8006d32 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bba:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbc:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf0 <HAL_RCC_OscConfig+0x290>)
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bc4:	f000 80f9 	beq.w	8006dba <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc8:	f7fe fbea 	bl	80053a0 <HAL_GetTick>
 8006bcc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bce:	e004      	b.n	8006bda <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd0:	f7fe fbe6 	bl	80053a0 <HAL_GetTick>
 8006bd4:	1b00      	subs	r0, r0, r4
 8006bd6:	2802      	cmp	r0, #2
 8006bd8:	d878      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	019b      	lsls	r3, r3, #6
 8006bde:	d4f7      	bmi.n	8006bd0 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006be0:	2000      	movs	r0, #0
}
 8006be2:	b002      	add	sp, #8
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006be8:	6963      	ldr	r3, [r4, #20]
 8006bea:	b1fb      	cbz	r3, 8006c2c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8006bec:	4b40      	ldr	r3, [pc, #256]	@ (8006cf0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bee:	4e3f      	ldr	r6, [pc, #252]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8006bf6:	f7fe fbd3 	bl	80053a0 <HAL_GetTick>
 8006bfa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bfc:	e004      	b.n	8006c08 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bfe:	f7fe fbcf 	bl	80053a0 <HAL_GetTick>
 8006c02:	1b40      	subs	r0, r0, r5
 8006c04:	2802      	cmp	r0, #2
 8006c06:	d861      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c08:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006c0a:	079b      	lsls	r3, r3, #30
 8006c0c:	d5f7      	bpl.n	8006bfe <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	e78d      	b.n	8006b2e <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c12:	6852      	ldr	r2, [r2, #4]
 8006c14:	0251      	lsls	r1, r2, #9
 8006c16:	f53f af6b 	bmi.w	8006af0 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1a:	4a34      	ldr	r2, [pc, #208]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	0792      	lsls	r2, r2, #30
 8006c20:	d538      	bpl.n	8006c94 <HAL_RCC_OscConfig+0x234>
 8006c22:	68e2      	ldr	r2, [r4, #12]
 8006c24:	2a01      	cmp	r2, #1
 8006c26:	d035      	beq.n	8006c94 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7da      	b.n	8006be2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8006c2c:	4a30      	ldr	r2, [pc, #192]	@ (8006cf0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c2e:	4e2f      	ldr	r6, [pc, #188]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8006c30:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8006c34:	f7fe fbb4 	bl	80053a0 <HAL_GetTick>
 8006c38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3a:	e004      	b.n	8006c46 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fe fbb0 	bl	80053a0 <HAL_GetTick>
 8006c40:	1b40      	subs	r0, r0, r5
 8006c42:	2802      	cmp	r0, #2
 8006c44:	d842      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c46:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006c48:	079f      	lsls	r7, r3, #30
 8006c4a:	d4f7      	bmi.n	8006c3c <HAL_RCC_OscConfig+0x1dc>
 8006c4c:	e7df      	b.n	8006c0e <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8006c4e:	2500      	movs	r5, #0
 8006c50:	e780      	b.n	8006b54 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c52:	684a      	ldr	r2, [r1, #4]
 8006c54:	0251      	lsls	r1, r2, #9
 8006c56:	f57f af1a 	bpl.w	8006a8e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5a:	4a24      	ldr	r2, [pc, #144]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	0392      	lsls	r2, r2, #14
 8006c60:	f57f af38 	bpl.w	8006ad4 <HAL_RCC_OscConfig+0x74>
 8006c64:	6862      	ldr	r2, [r4, #4]
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	f47f af34 	bne.w	8006ad4 <HAL_RCC_OscConfig+0x74>
 8006c6c:	e7dc      	b.n	8006c28 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006c70:	6813      	ldr	r3, [r2, #0]
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c78:	f7fe fb92 	bl	80053a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7c:	4e1b      	ldr	r6, [pc, #108]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006c7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c80:	e004      	b.n	8006c8c <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c82:	f7fe fb8d 	bl	80053a0 <HAL_GetTick>
 8006c86:	1b40      	subs	r0, r0, r5
 8006c88:	2864      	cmp	r0, #100	@ 0x64
 8006c8a:	d81f      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	039b      	lsls	r3, r3, #14
 8006c90:	d5f7      	bpl.n	8006c82 <HAL_RCC_OscConfig+0x222>
 8006c92:	e71e      	b.n	8006ad2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	4915      	ldr	r1, [pc, #84]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006c96:	6920      	ldr	r0, [r4, #16]
 8006c98:	680a      	ldr	r2, [r1, #0]
 8006c9a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8006c9e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006ca2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca4:	071a      	lsls	r2, r3, #28
 8006ca6:	f57f af42 	bpl.w	8006b2e <HAL_RCC_OscConfig+0xce>
 8006caa:	e79d      	b.n	8006be8 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006cb4:	f7fe fb74 	bl	80053a0 <HAL_GetTick>
 8006cb8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	6833      	ldr	r3, [r6, #0]
 8006cbc:	05d9      	lsls	r1, r3, #23
 8006cbe:	f53f af4e 	bmi.w	8006b5e <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc2:	f7fe fb6d 	bl	80053a0 <HAL_GetTick>
 8006cc6:	1bc0      	subs	r0, r0, r7
 8006cc8:	2802      	cmp	r0, #2
 8006cca:	d9f6      	bls.n	8006cba <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8006ccc:	2003      	movs	r0, #3
}
 8006cce:	b002      	add	sp, #8
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd4:	4a05      	ldr	r2, [pc, #20]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
 8006cd6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006cde:	f7fe fb5f 	bl	80053a0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce2:	4f02      	ldr	r7, [pc, #8]	@ (8006cec <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006ce4:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cea:	e00a      	b.n	8006d02 <HAL_RCC_OscConfig+0x2a2>
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	42470000 	.word	0x42470000
 8006cf4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fe fb52 	bl	80053a0 <HAL_GetTick>
 8006cfc:	1b80      	subs	r0, r0, r6
 8006cfe:	4540      	cmp	r0, r8
 8006d00:	d8e4      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d04:	079a      	lsls	r2, r3, #30
 8006d06:	d5f7      	bpl.n	8006cf8 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	f43f af4d 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x148>
 8006d0e:	e044      	b.n	8006d9a <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8006d10:	4a42      	ldr	r2, [pc, #264]	@ (8006e1c <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d12:	4e43      	ldr	r6, [pc, #268]	@ (8006e20 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8006d14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d16:	f7fe fb43 	bl	80053a0 <HAL_GetTick>
 8006d1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1c:	e004      	b.n	8006d28 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1e:	f7fe fb3f 	bl	80053a0 <HAL_GetTick>
 8006d22:	1b40      	subs	r0, r0, r5
 8006d24:	2802      	cmp	r0, #2
 8006d26:	d8d1      	bhi.n	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	0799      	lsls	r1, r3, #30
 8006d2c:	d4f7      	bmi.n	8006d1e <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	e6fb      	b.n	8006b2a <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	f43f af78 	beq.w	8006c28 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8006d38:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d40:	4291      	cmp	r1, r2
 8006d42:	f47f af71 	bne.w	8006c28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d46:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d48:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4c:	4291      	cmp	r1, r2
 8006d4e:	f47f af6b 	bne.w	8006c28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006d54:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006d58:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d5a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006d5e:	f47f af63 	bne.w	8006c28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006d64:	0852      	lsrs	r2, r2, #1
 8006d66:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8006d6a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d6c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006d70:	f47f af5a 	bne.w	8006c28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d76:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d7a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006d7e:	bf14      	ite	ne
 8006d80:	2001      	movne	r0, #1
 8006d82:	2000      	moveq	r0, #0
 8006d84:	e72d      	b.n	8006be2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d86:	4b26      	ldr	r3, [pc, #152]	@ (8006e20 <HAL_RCC_OscConfig+0x3c0>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006d96:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d98:	e76e      	b.n	8006c78 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d9a:	4a21      	ldr	r2, [pc, #132]	@ (8006e20 <HAL_RCC_OscConfig+0x3c0>)
 8006d9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da4:	e700      	b.n	8006ba8 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e20 <HAL_RCC_OscConfig+0x3c0>)
 8006da8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006daa:	f042 0204 	orr.w	r2, r2, #4
 8006dae:	671a      	str	r2, [r3, #112]	@ 0x70
 8006db0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006db8:	e791      	b.n	8006cde <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8006dba:	f7fe faf1 	bl	80053a0 <HAL_GetTick>
 8006dbe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc0:	e005      	b.n	8006dce <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc2:	f7fe faed 	bl	80053a0 <HAL_GetTick>
 8006dc6:	1b80      	subs	r0, r0, r6
 8006dc8:	2802      	cmp	r0, #2
 8006dca:	f63f af7f 	bhi.w	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	682b      	ldr	r3, [r5, #0]
 8006dd0:	0199      	lsls	r1, r3, #6
 8006dd2:	d4f6      	bmi.n	8006dc2 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dd4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006dd8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006de0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8006de4:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8006de6:	490d      	ldr	r1, [pc, #52]	@ (8006e1c <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006de8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006dec:	3a01      	subs	r2, #1
 8006dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006df2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006df4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006df6:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006df8:	f7fe fad2 	bl	80053a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dfc:	4d08      	ldr	r5, [pc, #32]	@ (8006e20 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8006dfe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e00:	e005      	b.n	8006e0e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e02:	f7fe facd 	bl	80053a0 <HAL_GetTick>
 8006e06:	1b00      	subs	r0, r0, r4
 8006e08:	2802      	cmp	r0, #2
 8006e0a:	f63f af5f 	bhi.w	8006ccc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	019a      	lsls	r2, r3, #6
 8006e12:	d5f6      	bpl.n	8006e02 <HAL_RCC_OscConfig+0x3a2>
 8006e14:	e6e4      	b.n	8006be0 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8006e16:	2001      	movs	r0, #1
}
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	42470000 	.word	0x42470000
 8006e20:	40023800 	.word	0x40023800

08006e24 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e24:	4916      	ldr	r1, [pc, #88]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8006e26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e28:	688b      	ldr	r3, [r1, #8]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d01b      	beq.n	8006e6a <HAL_RCC_GetSysClockFreq+0x46>
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d001      	beq.n	8006e3a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e36:	4813      	ldr	r0, [pc, #76]	@ (8006e84 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006e38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e3a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e40:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e44:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e48:	d111      	bne.n	8006e6e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e4a:	480e      	ldr	r0, [pc, #56]	@ (8006e84 <HAL_RCC_GetSysClockFreq+0x60>)
 8006e4c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006e50:	fba1 0100 	umull	r0, r1, r1, r0
 8006e54:	f7f9 fe12 	bl	8000a7c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e58:	4b09      	ldr	r3, [pc, #36]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006e60:	3301      	adds	r3, #1
 8006e62:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8006e64:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006e68:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6a:	4807      	ldr	r0, [pc, #28]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006e6c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e6e:	4806      	ldr	r0, [pc, #24]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8006e70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006e74:	2300      	movs	r3, #0
 8006e76:	fba1 0100 	umull	r0, r1, r1, r0
 8006e7a:	f7f9 fdff 	bl	8000a7c <__aeabi_uldivmod>
 8006e7e:	e7eb      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x34>
 8006e80:	40023800 	.word	0x40023800
 8006e84:	00f42400 	.word	0x00f42400
 8006e88:	017d7840 	.word	0x017d7840

08006e8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f000 8087 	beq.w	8006fa0 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e92:	4a48      	ldr	r2, [pc, #288]	@ (8006fb4 <HAL_RCC_ClockConfig+0x128>)
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	428b      	cmp	r3, r1
{
 8006e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea4:	d209      	bcs.n	8006eba <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	b2cb      	uxtb	r3, r1
 8006ea8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	428b      	cmp	r3, r1
 8006eb2:	d002      	beq.n	8006eba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006eb4:	2001      	movs	r0, #1
}
 8006eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	0798      	lsls	r0, r3, #30
 8006ebe:	d514      	bpl.n	8006eea <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	0759      	lsls	r1, r3, #29
 8006ec2:	d504      	bpl.n	8006ece <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ec4:	493c      	ldr	r1, [pc, #240]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006ec6:	688a      	ldr	r2, [r1, #8]
 8006ec8:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8006ecc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ece:	071a      	lsls	r2, r3, #28
 8006ed0:	d504      	bpl.n	8006edc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ed2:	4939      	ldr	r1, [pc, #228]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006ed4:	688a      	ldr	r2, [r1, #8]
 8006ed6:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8006eda:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006edc:	4936      	ldr	r1, [pc, #216]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006ede:	68a0      	ldr	r0, [r4, #8]
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006ee6:	4302      	orrs	r2, r0
 8006ee8:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	07df      	lsls	r7, r3, #31
 8006eec:	d521      	bpl.n	8006f32 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eee:	6862      	ldr	r2, [r4, #4]
 8006ef0:	2a01      	cmp	r2, #1
 8006ef2:	d057      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ef4:	1e93      	subs	r3, r2, #2
 8006ef6:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006efc:	d94d      	bls.n	8006f9a <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efe:	0799      	lsls	r1, r3, #30
 8006f00:	d5d8      	bpl.n	8006eb4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4e2d      	ldr	r6, [pc, #180]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006f04:	68b3      	ldr	r3, [r6, #8]
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006f0e:	f7fe fa47 	bl	80053a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f12:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006f16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f18:	e004      	b.n	8006f24 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1a:	f7fe fa41 	bl	80053a0 <HAL_GetTick>
 8006f1e:	1bc0      	subs	r0, r0, r7
 8006f20:	4540      	cmp	r0, r8
 8006f22:	d844      	bhi.n	8006fae <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f24:	68b3      	ldr	r3, [r6, #8]
 8006f26:	6862      	ldr	r2, [r4, #4]
 8006f28:	f003 030c 	and.w	r3, r3, #12
 8006f2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006f30:	d1f3      	bne.n	8006f1a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f32:	4a20      	ldr	r2, [pc, #128]	@ (8006fb4 <HAL_RCC_ClockConfig+0x128>)
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	42ab      	cmp	r3, r5
 8006f3c:	d906      	bls.n	8006f4c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	b2eb      	uxtb	r3, r5
 8006f40:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	d1b3      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	075a      	lsls	r2, r3, #29
 8006f50:	d506      	bpl.n	8006f60 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f52:	4919      	ldr	r1, [pc, #100]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006f54:	68e0      	ldr	r0, [r4, #12]
 8006f56:	688a      	ldr	r2, [r1, #8]
 8006f58:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8006f5c:	4302      	orrs	r2, r0
 8006f5e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	d507      	bpl.n	8006f74 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f64:	4a14      	ldr	r2, [pc, #80]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006f66:	6921      	ldr	r1, [r4, #16]
 8006f68:	6893      	ldr	r3, [r2, #8]
 8006f6a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006f6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006f72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f74:	f7ff ff56 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8006f78:	4a0f      	ldr	r2, [pc, #60]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006f7a:	4c10      	ldr	r4, [pc, #64]	@ (8006fbc <HAL_RCC_ClockConfig+0x130>)
 8006f7c:	6892      	ldr	r2, [r2, #8]
 8006f7e:	4910      	ldr	r1, [pc, #64]	@ (8006fc0 <HAL_RCC_ClockConfig+0x134>)
 8006f80:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006f84:	4603      	mov	r3, r0
 8006f86:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8006f88:	480e      	ldr	r0, [pc, #56]	@ (8006fc4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f8a:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8006f8c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f8e:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8006f90:	f7fe f9bc 	bl	800530c <HAL_InitTick>
  return HAL_OK;
 8006f94:	2000      	movs	r0, #0
}
 8006f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9a:	0198      	lsls	r0, r3, #6
 8006f9c:	d4b1      	bmi.n	8006f02 <HAL_RCC_ClockConfig+0x76>
 8006f9e:	e789      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006fa0:	2001      	movs	r0, #1
}
 8006fa2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa4:	4b04      	ldr	r3, [pc, #16]	@ (8006fb8 <HAL_RCC_ClockConfig+0x12c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	039e      	lsls	r6, r3, #14
 8006faa:	d4aa      	bmi.n	8006f02 <HAL_RCC_ClockConfig+0x76>
 8006fac:	e782      	b.n	8006eb4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8006fae:	2003      	movs	r0, #3
 8006fb0:	e781      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x2a>
 8006fb2:	bf00      	nop
 8006fb4:	40023c00 	.word	0x40023c00
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	08009c1c 	.word	0x08009c1c
 8006fc0:	200008d0 	.word	0x200008d0
 8006fc4:	200008d8 	.word	0x200008d8

08006fc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fc8:	4b04      	ldr	r3, [pc, #16]	@ (8006fdc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006fca:	4905      	ldr	r1, [pc, #20]	@ (8006fe0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	4a05      	ldr	r2, [pc, #20]	@ (8006fe4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006fd6:	5cd3      	ldrb	r3, [r2, r3]
}
 8006fd8:	40d8      	lsrs	r0, r3
 8006fda:	4770      	bx	lr
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	200008d0 	.word	0x200008d0
 8006fe4:	08009c14 	.word	0x08009c14

08006fe8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fe8:	4b04      	ldr	r3, [pc, #16]	@ (8006ffc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006fea:	4905      	ldr	r1, [pc, #20]	@ (8007000 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	4a05      	ldr	r2, [pc, #20]	@ (8007004 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006ff0:	6808      	ldr	r0, [r1, #0]
 8006ff2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006ff6:	5cd3      	ldrb	r3, [r2, r3]
}
 8006ff8:	40d8      	lsrs	r0, r3
 8006ffa:	4770      	bx	lr
 8006ffc:	40023800 	.word	0x40023800
 8007000:	200008d0 	.word	0x200008d0
 8007004:	08009c14 	.word	0x08009c14

08007008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800700c:	b083      	sub	sp, #12
 800700e:	461f      	mov	r7, r3
 8007010:	4615      	mov	r5, r2
 8007012:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007014:	460c      	mov	r4, r1
 8007016:	4680      	mov	r8, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007018:	f7fe f9c2 	bl	80053a0 <HAL_GetTick>
 800701c:	443e      	add	r6, r7
 800701e:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8007020:	f7fe f9be 	bl	80053a0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007024:	4b2d      	ldr	r3, [pc, #180]	@ (80070dc <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 800702c:	fb06 f202 	mul.w	r2, r6, r2
 8007030:	3701      	adds	r7, #1
 8007032:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007034:	d10d      	bne.n	8007052 <SPI_WaitFlagStateUntilTimeout+0x4a>
 8007036:	f8d8 2000 	ldr.w	r2, [r8]
 800703a:	6893      	ldr	r3, [r2, #8]
 800703c:	ea34 0303 	bics.w	r3, r4, r3
 8007040:	bf0c      	ite	eq
 8007042:	2301      	moveq	r3, #1
 8007044:	2300      	movne	r3, #0
 8007046:	429d      	cmp	r5, r3
 8007048:	d1f7      	bne.n	800703a <SPI_WaitFlagStateUntilTimeout+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 800704a:	2000      	movs	r0, #0
}
 800704c:	b003      	add	sp, #12
 800704e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007052:	4681      	mov	r9, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	ea34 0303 	bics.w	r3, r4, r3
 800705e:	bf0c      	ite	eq
 8007060:	2301      	moveq	r3, #1
 8007062:	2300      	movne	r3, #0
 8007064:	42ab      	cmp	r3, r5
 8007066:	d0f0      	beq.n	800704a <SPI_WaitFlagStateUntilTimeout+0x42>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007068:	f7fe f99a 	bl	80053a0 <HAL_GetTick>
 800706c:	eba0 0309 	sub.w	r3, r0, r9
 8007070:	42b3      	cmp	r3, r6
 8007072:	d208      	bcs.n	8007086 <SPI_WaitFlagStateUntilTimeout+0x7e>
      if (count == 0U)
 8007074:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007076:	2b00      	cmp	r3, #0
      count--;
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800707e:	bf08      	it	eq
 8007080:	2600      	moveq	r6, #0
      count--;
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	e7e6      	b.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x4c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007086:	e9d8 3100 	ldrd	r3, r1, [r8]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800708c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007090:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007094:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007096:	d014      	beq.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0xba>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007098:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800709c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80070a0:	d107      	bne.n	80070b2 <SPI_WaitFlagStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070b0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80070b2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80070b4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80070b6:	f888 2051 	strb.w	r2, [r8, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80070ba:	f888 3050 	strb.w	r3, [r8, #80]	@ 0x50
 80070be:	2003      	movs	r0, #3
 80070c0:	e7c4      	b.n	800704c <SPI_WaitFlagStateUntilTimeout+0x44>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070c2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80070c6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80070ca:	d002      	beq.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xca>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070cc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80070d0:	d1e2      	bne.n	8007098 <SPI_WaitFlagStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e7dd      	b.n	8007098 <SPI_WaitFlagStateUntilTimeout+0x90>
 80070dc:	200008d0 	.word	0x200008d0

080070e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	460f      	mov	r7, r1
 80070e8:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	460b      	mov	r3, r1
 80070ee:	2201      	movs	r2, #1
 80070f0:	2102      	movs	r1, #2
{
 80070f2:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070f4:	f7ff ff88 	bl	8007008 <SPI_WaitFlagStateUntilTimeout>
 80070f8:	bb40      	cbnz	r0, 800714c <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070fa:	4b19      	ldr	r3, [pc, #100]	@ (8007160 <SPI_EndRxTxTransaction+0x80>)
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	4b19      	ldr	r3, [pc, #100]	@ (8007164 <SPI_EndRxTxTransaction+0x84>)
 8007100:	fba3 3505 	umull	r3, r5, r3, r5
 8007104:	0d6d      	lsrs	r5, r5, #21
 8007106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800710a:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800710e:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007110:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007116:	4606      	mov	r6, r0
 8007118:	d107      	bne.n	800712a <SPI_EndRxTxTransaction+0x4a>
 800711a:	e00d      	b.n	8007138 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800711c:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800711e:	6821      	ldr	r1, [r4, #0]
      count--;
 8007120:	3b01      	subs	r3, #1
 8007122:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007124:	688b      	ldr	r3, [r1, #8]
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	d502      	bpl.n	8007130 <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f5      	bne.n	800711c <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 8007130:	4630      	mov	r0, r6
 8007132:	b004      	add	sp, #16
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007138:	4602      	mov	r2, r0
 800713a:	f8cd 8000 	str.w	r8, [sp]
 800713e:	463b      	mov	r3, r7
 8007140:	2180      	movs	r1, #128	@ 0x80
 8007142:	4620      	mov	r0, r4
 8007144:	f7ff ff60 	bl	8007008 <SPI_WaitFlagStateUntilTimeout>
 8007148:	2800      	cmp	r0, #0
 800714a:	d0f1      	beq.n	8007130 <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800714e:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007150:	f043 0320 	orr.w	r3, r3, #32
}
 8007154:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007156:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8007158:	b004      	add	sp, #16
 800715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715e:	bf00      	nop
 8007160:	200008d0 	.word	0x200008d0
 8007164:	165e9f81 	.word	0x165e9f81

08007168 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007168:	2800      	cmp	r0, #0
 800716a:	d05c      	beq.n	8007226 <HAL_SPI_Init+0xbe>
{
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007170:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007172:	2800      	cmp	r0, #0
 8007174:	d047      	beq.n	8007206 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007176:	2300      	movs	r3, #0
 8007178:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800717c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007180:	2200      	movs	r2, #0
 8007182:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007184:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8007188:	2b00      	cmp	r3, #0
 800718a:	d042      	beq.n	8007212 <HAL_SPI_Init+0xaa>
 800718c:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 800718e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007190:	68a5      	ldr	r5, [r4, #8]
 8007192:	69a2      	ldr	r2, [r4, #24]
 8007194:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007196:	2302      	movs	r3, #2
 8007198:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800719c:	680b      	ldr	r3, [r1, #0]
 800719e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071a2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 80071aa:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80071ae:	432b      	orrs	r3, r5
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 80071b6:	432b      	orrs	r3, r5
 80071b8:	6925      	ldr	r5, [r4, #16]
 80071ba:	f005 0502 	and.w	r5, r5, #2
 80071be:	432b      	orrs	r3, r5
 80071c0:	6965      	ldr	r5, [r4, #20]
 80071c2:	f005 0501 	and.w	r5, r5, #1
 80071c6:	432b      	orrs	r3, r5
 80071c8:	69e5      	ldr	r5, [r4, #28]
 80071ca:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 80071ce:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 80071d2:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 80071d6:	4333      	orrs	r3, r6
 80071d8:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071da:	0c12      	lsrs	r2, r2, #16
 80071dc:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071e0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071e4:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071e8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071ec:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071f0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071f2:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071f4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80071fa:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071fc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071fe:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007200:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8007204:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800720c:	d0b6      	beq.n	800717c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800720e:	61e0      	str	r0, [r4, #28]
 8007210:	e7b4      	b.n	800717c <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8007212:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007214:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8007218:	f7fd fe12 	bl	8004e40 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800721c:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007220:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8007224:	e7b3      	b.n	800718e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8007226:	2001      	movs	r0, #1
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <HAL_SPI_Transmit>:
{
 800722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007230:	4604      	mov	r4, r0
 8007232:	b082      	sub	sp, #8
 8007234:	461d      	mov	r5, r3
 8007236:	460f      	mov	r7, r1
 8007238:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800723a:	f7fe f8b1 	bl	80053a0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800723e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8007242:	2b01      	cmp	r3, #1
 8007244:	d176      	bne.n	8007334 <HAL_SPI_Transmit+0x108>
  if ((pData == NULL) || (Size == 0U))
 8007246:	4606      	mov	r6, r0
 8007248:	b2d8      	uxtb	r0, r3
 800724a:	2f00      	cmp	r7, #0
 800724c:	d06f      	beq.n	800732e <HAL_SPI_Transmit+0x102>
 800724e:	f1b8 0f00 	cmp.w	r8, #0
 8007252:	d06c      	beq.n	800732e <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 8007254:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007258:	2b01      	cmp	r3, #1
 800725a:	d06b      	beq.n	8007334 <HAL_SPI_Transmit+0x108>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800725c:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 800725e:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    __HAL_SPI_DISABLE(hspi);
 8007262:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007264:	6327      	str	r7, [r4, #48]	@ 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007266:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007268:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800726a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800726e:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 8007272:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007276:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxXferSize  = Size;
 8007278:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800727c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007280:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007282:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007284:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 8007286:	4601      	mov	r1, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007288:	d107      	bne.n	800729a <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 800728a:	6803      	ldr	r3, [r0, #0]
 800728c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007290:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8007292:	6803      	ldr	r3, [r0, #0]
 8007294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007298:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729a:	6803      	ldr	r3, [r0, #0]
 800729c:	065b      	lsls	r3, r3, #25
 800729e:	d54d      	bpl.n	800733c <HAL_SPI_Transmit+0x110>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072a0:	68e3      	ldr	r3, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a2:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a8:	d051      	beq.n	800734e <HAL_SPI_Transmit+0x122>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	f040 808d 	bne.w	80073ca <HAL_SPI_Transmit+0x19e>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072b0:	783b      	ldrb	r3, [r7, #0]
 80072b2:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80072b4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b8:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ba:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80072bc:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072be:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80072c0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80072c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b1bb      	cbz	r3, 80072f8 <HAL_SPI_Transmit+0xcc>
 80072c8:	1c68      	adds	r0, r5, #1
 80072ca:	d174      	bne.n	80073b6 <HAL_SPI_Transmit+0x18a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	0791      	lsls	r1, r2, #30
 80072d2:	d57f      	bpl.n	80073d4 <HAL_SPI_Transmit+0x1a8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80072da:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80072e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072e4:	fa1f fc8c 	uxth.w	ip, ip
 80072e8:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80072ec:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ee:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80072f0:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f2:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d1e9      	bne.n	80072cc <HAL_SPI_Transmit+0xa0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072f8:	4632      	mov	r2, r6
 80072fa:	4629      	mov	r1, r5
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7ff feef 	bl	80070e0 <SPI_EndRxTxTransaction>
 8007302:	b108      	cbz	r0, 8007308 <HAL_SPI_Transmit+0xdc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007304:	2320      	movs	r3, #32
 8007306:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007308:	68a3      	ldr	r3, [r4, #8]
 800730a:	b933      	cbnz	r3, 800731a <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	68d3      	ldr	r3, [r2, #12]
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	6893      	ldr	r3, [r2, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800731a:	2301      	movs	r3, #1
 800731c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007320:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8007322:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007324:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 8007326:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800732a:	bf18      	it	ne
 800732c:	2001      	movne	r0, #1
}
 800732e:	b002      	add	sp, #8
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007334:	2002      	movs	r0, #2
}
 8007336:	b002      	add	sp, #8
 8007338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 800733c:	6803      	ldr	r3, [r0, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800733e:	6862      	ldr	r2, [r4, #4]
    __HAL_SPI_ENABLE(hspi);
 8007340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007344:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800734c:	d1ad      	bne.n	80072aa <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800734e:	2a00      	cmp	r2, #0
 8007350:	d067      	beq.n	8007422 <HAL_SPI_Transmit+0x1f6>
 8007352:	f1b8 0f01 	cmp.w	r8, #1
 8007356:	d064      	beq.n	8007422 <HAL_SPI_Transmit+0x1f6>
    while (hspi->TxXferCount > 0U)
 8007358:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0cb      	beq.n	80072f8 <HAL_SPI_Transmit+0xcc>
 8007360:	1c6b      	adds	r3, r5, #1
 8007362:	d14e      	bne.n	8007402 <HAL_SPI_Transmit+0x1d6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007364:	6883      	ldr	r3, [r0, #8]
 8007366:	079f      	lsls	r7, r3, #30
 8007368:	d50f      	bpl.n	800738a <HAL_SPI_Transmit+0x15e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800736a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800736c:	f832 3b02 	ldrh.w	r3, [r2], #2
 8007370:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8007372:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007374:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007376:	3b01      	subs	r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800737c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0b9      	beq.n	80072f8 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007384:	6883      	ldr	r3, [r0, #8]
 8007386:	079f      	lsls	r7, r3, #30
 8007388:	d4ef      	bmi.n	800736a <HAL_SPI_Transmit+0x13e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800738a:	f7fe f809 	bl	80053a0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800738e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0b0      	beq.n	80072f8 <HAL_SPI_Transmit+0xcc>
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	e7e4      	b.n	8007364 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800739a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80073a0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80073a4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073a6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80073a8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073aa:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80073ac:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80073ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0a0      	beq.n	80072f8 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	0792      	lsls	r2, r2, #30
 80073bc:	d4ed      	bmi.n	800739a <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073be:	f7fd ffef 	bl	80053a0 <HAL_GetTick>
 80073c2:	1b80      	subs	r0, r0, r6
 80073c4:	42a8      	cmp	r0, r5
 80073c6:	d3f2      	bcc.n	80073ae <HAL_SPI_Transmit+0x182>
 80073c8:	e023      	b.n	8007412 <HAL_SPI_Transmit+0x1e6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ca:	f1b8 0f01 	cmp.w	r8, #1
 80073ce:	f47f af78 	bne.w	80072c2 <HAL_SPI_Transmit+0x96>
 80073d2:	e76d      	b.n	80072b0 <HAL_SPI_Transmit+0x84>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d4:	f7fd ffe4 	bl	80053a0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80073d8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f af75 	bne.w	80072cc <HAL_SPI_Transmit+0xa0>
 80073e2:	e789      	b.n	80072f8 <HAL_SPI_Transmit+0xcc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80073e6:	f832 3b02 	ldrh.w	r3, [r2], #2
 80073ea:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount--;
 80073ec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ee:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80073f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f43f af7c 	beq.w	80072f8 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	688b      	ldr	r3, [r1, #8]
 8007404:	079a      	lsls	r2, r3, #30
 8007406:	d4ed      	bmi.n	80073e4 <HAL_SPI_Transmit+0x1b8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007408:	f7fd ffca 	bl	80053a0 <HAL_GetTick>
 800740c:	1b83      	subs	r3, r0, r6
 800740e:	42ab      	cmp	r3, r5
 8007410:	d3f1      	bcc.n	80073f6 <HAL_SPI_Transmit+0x1ca>
          hspi->State = HAL_SPI_STATE_READY;
 8007412:	2301      	movs	r3, #1
 8007414:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007418:	2300      	movs	r3, #0
 800741a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800741e:	2003      	movs	r0, #3
 8007420:	e785      	b.n	800732e <HAL_SPI_Transmit+0x102>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007422:	f837 3b02 	ldrh.w	r3, [r7], #2
 8007426:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8007428:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800742a:	6327      	str	r7, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800742c:	3b01      	subs	r3, #1
 800742e:	b29b      	uxth	r3, r3
 8007430:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007432:	e791      	b.n	8007358 <HAL_SPI_Transmit+0x12c>

08007434 <HAL_SPI_TransmitReceive>:
{
 8007434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	4604      	mov	r4, r0
 800743a:	b082      	sub	sp, #8
 800743c:	4690      	mov	r8, r2
 800743e:	461e      	mov	r6, r3
 8007440:	460f      	mov	r7, r1
  tickstart = HAL_GetTick();
 8007442:	f7fd ffad 	bl	80053a0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007446:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 800744a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800744c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800744e:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007450:	d00b      	beq.n	800746a <HAL_SPI_TransmitReceive+0x36>
 8007452:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007456:	f040 808f 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x144>
 800745a:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 808a 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x144>
 8007464:	2904      	cmp	r1, #4
 8007466:	f040 8087 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x144>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800746a:	2f00      	cmp	r7, #0
 800746c:	f000 8108 	beq.w	8007680 <HAL_SPI_TransmitReceive+0x24c>
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	f000 8104 	beq.w	8007680 <HAL_SPI_TransmitReceive+0x24c>
 8007478:	2e00      	cmp	r6, #0
 800747a:	f000 8101 	beq.w	8007680 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 800747e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007482:	2b01      	cmp	r3, #1
 8007484:	d078      	beq.n	8007578 <HAL_SPI_TransmitReceive+0x144>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007486:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800748a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800748e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007490:	bf1c      	itt	ne
 8007492:	2305      	movne	r3, #5
 8007494:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007498:	2300      	movs	r3, #0
 800749a:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_LOCK(hspi);
 800749c:	2101      	movs	r1, #1
  hspi->RxISR       = NULL;
 800749e:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80074a4:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  __HAL_LOCK(hspi);
 80074a6:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
  hspi->TxXferCount = Size;
 80074aa:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ac:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80074ae:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074b0:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80074b2:	6327      	str	r7, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074b4:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074b6:	d403      	bmi.n	80074c0 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 80074b8:	6819      	ldr	r1, [r3, #0]
 80074ba:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80074be:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c0:	68e1      	ldr	r1, [r4, #12]
 80074c2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80074c6:	d05b      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	f000 80ca 	beq.w	8007662 <HAL_SPI_TransmitReceive+0x22e>
 80074ce:	2e01      	cmp	r6, #1
 80074d0:	f000 80c7 	beq.w	8007662 <HAL_SPI_TransmitReceive+0x22e>
 80074d4:	9b08      	ldr	r3, [sp, #32]
 80074d6:	3301      	adds	r3, #1
        txallowed = 1U;
 80074d8:	f04f 0601 	mov.w	r6, #1
 80074dc:	d028      	beq.n	8007530 <HAL_SPI_TransmitReceive+0xfc>
 80074de:	e08d      	b.n	80075fc <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074e0:	6821      	ldr	r1, [r4, #0]
 80074e2:	688b      	ldr	r3, [r1, #8]
 80074e4:	079b      	lsls	r3, r3, #30
 80074e6:	d50f      	bpl.n	8007508 <HAL_SPI_TransmitReceive+0xd4>
 80074e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b163      	cbz	r3, 8007508 <HAL_SPI_TransmitReceive+0xd4>
 80074ee:	b15e      	cbz	r6, 8007508 <HAL_SPI_TransmitReceive+0xd4>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80074f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	730b      	strb	r3, [r1, #12]
        hspi->TxXferCount--;
 80074f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 80074f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074fa:	6821      	ldr	r1, [r4, #0]
        hspi->TxXferCount--;
 80074fc:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80074fe:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007500:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007502:	2600      	movs	r6, #0
        hspi->TxXferCount--;
 8007504:	86e3      	strh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8007506:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007508:	688b      	ldr	r3, [r1, #8]
 800750a:	f013 0301 	ands.w	r3, r3, #1
 800750e:	d00d      	beq.n	800752c <HAL_SPI_TransmitReceive+0xf8>
 8007510:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007512:	b292      	uxth	r2, r2
 8007514:	b152      	cbz	r2, 800752c <HAL_SPI_TransmitReceive+0xf8>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007516:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007518:	68c9      	ldr	r1, [r1, #12]
 800751a:	7011      	strb	r1, [r2, #0]
        hspi->RxXferCount--;
 800751c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr++;
 800751e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007520:	3a01      	subs	r2, #1
        hspi->pRxBuffPtr++;
 8007522:	3101      	adds	r1, #1
        hspi->RxXferCount--;
 8007524:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8007526:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007528:	87e2      	strh	r2, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800752a:	461e      	mov	r6, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800752c:	f7fd ff38 	bl	80053a0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007530:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1d3      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0xac>
 8007538:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1cf      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0xac>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007540:	9908      	ldr	r1, [sp, #32]
 8007542:	462a      	mov	r2, r5
 8007544:	4620      	mov	r0, r4
 8007546:	f7ff fdcb 	bl	80070e0 <SPI_EndRxTxTransaction>
 800754a:	2800      	cmp	r0, #0
 800754c:	f040 8093 	bne.w	8007676 <HAL_SPI_TransmitReceive+0x242>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	b933      	cbnz	r3, 8007562 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	68d3      	ldr	r3, [r2, #12]
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	6893      	ldr	r3, [r2, #8]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8007562:	2301      	movs	r3, #1
 8007564:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007568:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800756a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756c:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 800756e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007572:	bf18      	it	ne
 8007574:	2001      	movne	r0, #1
 8007576:	e000      	b.n	800757a <HAL_SPI_TransmitReceive+0x146>
    return HAL_BUSY;
 8007578:	2002      	movs	r0, #2
}
 800757a:	b002      	add	sp, #8
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007580:	2a00      	cmp	r2, #0
 8007582:	d17f      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x250>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007584:	f837 2b02 	ldrh.w	r2, [r7], #2
 8007588:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800758a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800758c:	6327      	str	r7, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800758e:	3b01      	subs	r3, #1
 8007590:	b29b      	uxth	r3, r3
 8007592:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007594:	9b08      	ldr	r3, [sp, #32]
 8007596:	3301      	adds	r3, #1
        txallowed = 1U;
 8007598:	f04f 0601 	mov.w	r6, #1
 800759c:	d025      	beq.n	80075ea <HAL_SPI_TransmitReceive+0x1b6>
 800759e:	e074      	b.n	800768a <HAL_SPI_TransmitReceive+0x256>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	6893      	ldr	r3, [r2, #8]
 80075a4:	0798      	lsls	r0, r3, #30
 80075a6:	d50d      	bpl.n	80075c4 <HAL_SPI_TransmitReceive+0x190>
 80075a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	b153      	cbz	r3, 80075c4 <HAL_SPI_TransmitReceive+0x190>
 80075ae:	b146      	cbz	r6, 80075c2 <HAL_SPI_TransmitReceive+0x18e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80075b2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80075b6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80075b8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ba:	6321      	str	r1, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29b      	uxth	r3, r3
 80075c0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80075c2:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075c4:	6893      	ldr	r3, [r2, #8]
 80075c6:	f013 0301 	ands.w	r3, r3, #1
 80075ca:	d00c      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0x1b2>
 80075cc:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80075ce:	b289      	uxth	r1, r1
 80075d0:	b149      	cbz	r1, 80075e6 <HAL_SPI_TransmitReceive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075d2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80075d4:	68d2      	ldr	r2, [r2, #12]
 80075d6:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 80075da:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80075dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075de:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075e6:	f7fd fedb 	bl	80053a0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1d6      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x16c>
 80075f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1d2      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x16c>
 80075fa:	e7a1      	b.n	8007540 <HAL_SPI_TransmitReceive+0x10c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	b91b      	cbnz	r3, 800760a <HAL_SPI_TransmitReceive+0x1d6>
 8007602:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d09a      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	6893      	ldr	r3, [r2, #8]
 800760e:	0799      	lsls	r1, r3, #30
 8007610:	d50f      	bpl.n	8007632 <HAL_SPI_TransmitReceive+0x1fe>
 8007612:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007614:	b29b      	uxth	r3, r3
 8007616:	b163      	cbz	r3, 8007632 <HAL_SPI_TransmitReceive+0x1fe>
 8007618:	b15e      	cbz	r6, 8007632 <HAL_SPI_TransmitReceive+0x1fe>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800761a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8007620:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8007622:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007624:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8007626:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8007628:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800762a:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800762c:	2600      	movs	r6, #0
        hspi->TxXferCount--;
 800762e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8007630:	6321      	str	r1, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007632:	6893      	ldr	r3, [r2, #8]
 8007634:	f013 0301 	ands.w	r3, r3, #1
 8007638:	d003      	beq.n	8007642 <HAL_SPI_TransmitReceive+0x20e>
 800763a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800763c:	b289      	uxth	r1, r1
 800763e:	2900      	cmp	r1, #0
 8007640:	d155      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x2ba>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007642:	f7fd fead 	bl	80053a0 <HAL_GetTick>
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	1b40      	subs	r0, r0, r5
 800764a:	4298      	cmp	r0, r3
 800764c:	d3d6      	bcc.n	80075fc <HAL_SPI_TransmitReceive+0x1c8>
        hspi->State = HAL_SPI_STATE_READY;
 800764e:	2301      	movs	r3, #1
 8007650:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        return HAL_TIMEOUT;
 8007654:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007656:	2300      	movs	r3, #0
 8007658:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800765c:	b002      	add	sp, #8
 800765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007662:	783a      	ldrb	r2, [r7, #0]
 8007664:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8007666:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007668:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800766a:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800766c:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800766e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007670:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8007672:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007674:	e72e      	b.n	80074d4 <HAL_SPI_TransmitReceive+0xa0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007676:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 8007678:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800767a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800767c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007680:	2001      	movs	r0, #1
 8007682:	e77a      	b.n	800757a <HAL_SPI_TransmitReceive+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007684:	2e01      	cmp	r6, #1
 8007686:	d185      	bne.n	8007594 <HAL_SPI_TransmitReceive+0x160>
 8007688:	e77c      	b.n	8007584 <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800768c:	b29b      	uxth	r3, r3
 800768e:	b923      	cbnz	r3, 800769a <HAL_SPI_TransmitReceive+0x266>
 8007690:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	f43f af53 	beq.w	8007540 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800769a:	6822      	ldr	r2, [r4, #0]
 800769c:	6893      	ldr	r3, [r2, #8]
 800769e:	079f      	lsls	r7, r3, #30
 80076a0:	d50d      	bpl.n	80076be <HAL_SPI_TransmitReceive+0x28a>
 80076a2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b153      	cbz	r3, 80076be <HAL_SPI_TransmitReceive+0x28a>
 80076a8:	b146      	cbz	r6, 80076bc <HAL_SPI_TransmitReceive+0x288>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80076ac:	f831 3b02 	ldrh.w	r3, [r1], #2
 80076b0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80076b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b4:	6321      	str	r1, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 80076bc:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076be:	6893      	ldr	r3, [r2, #8]
 80076c0:	f013 0301 	ands.w	r3, r3, #1
 80076c4:	d00c      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0x2ac>
 80076c6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80076c8:	b289      	uxth	r1, r1
 80076ca:	b149      	cbz	r1, 80076e0 <HAL_SPI_TransmitReceive+0x2ac>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80076ce:	68d2      	ldr	r2, [r2, #12]
 80076d0:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 80076d4:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80076d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d8:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29b      	uxth	r3, r3
 80076de:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076e0:	f7fd fe5e 	bl	80053a0 <HAL_GetTick>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	1b40      	subs	r0, r0, r5
 80076e8:	4298      	cmp	r0, r3
 80076ea:	d3ce      	bcc.n	800768a <HAL_SPI_TransmitReceive+0x256>
 80076ec:	e7af      	b.n	800764e <HAL_SPI_TransmitReceive+0x21a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076ee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80076f0:	68d2      	ldr	r2, [r2, #12]
 80076f2:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80076f4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr++;
 80076f6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80076f8:	3a01      	subs	r2, #1
        hspi->pRxBuffPtr++;
 80076fa:	3101      	adds	r1, #1
        hspi->RxXferCount--;
 80076fc:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 80076fe:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007700:	87e2      	strh	r2, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007702:	461e      	mov	r6, r3
 8007704:	e79d      	b.n	8007642 <HAL_SPI_TransmitReceive+0x20e>
 8007706:	bf00      	nop

08007708 <HAL_SPI_Receive>:
{
 8007708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800770c:	461d      	mov	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800770e:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8007712:	2b01      	cmp	r3, #1
{
 8007714:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8007716:	d177      	bne.n	8007808 <HAL_SPI_Receive+0x100>
 8007718:	fa5f f883 	uxtb.w	r8, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800771c:	6843      	ldr	r3, [r0, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007722:	4604      	mov	r4, r0
 8007724:	4617      	mov	r7, r2
 8007726:	4689      	mov	r9, r1
 8007728:	d103      	bne.n	8007732 <HAL_SPI_Receive+0x2a>
 800772a:	6883      	ldr	r3, [r0, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80d2 	beq.w	80078d6 <HAL_SPI_Receive+0x1ce>
  tickstart = HAL_GetTick();
 8007732:	f7fd fe35 	bl	80053a0 <HAL_GetTick>
 8007736:	4606      	mov	r6, r0
  if ((pData == NULL) || (Size == 0U))
 8007738:	f1b9 0f00 	cmp.w	r9, #0
 800773c:	d060      	beq.n	8007800 <HAL_SPI_Receive+0xf8>
 800773e:	2f00      	cmp	r7, #0
 8007740:	d05e      	beq.n	8007800 <HAL_SPI_Receive+0xf8>
  __HAL_LOCK(hspi);
 8007742:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007746:	2b01      	cmp	r3, #1
 8007748:	d05e      	beq.n	8007808 <HAL_SPI_Receive+0x100>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800774a:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800774c:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800774e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  __HAL_LOCK(hspi);
 8007752:	2001      	movs	r0, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007754:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 8007756:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800775e:	f04f 0004 	mov.w	r0, #4
 8007762:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 8007766:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800776a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800776c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800776e:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->RxXferCount = Size;
 8007770:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007772:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007774:	86e3      	strh	r3, [r4, #54]	@ 0x36
    __HAL_SPI_DISABLE(hspi);
 8007776:	460b      	mov	r3, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007778:	f000 80a4 	beq.w	80078c4 <HAL_SPI_Receive+0x1bc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800777c:	680a      	ldr	r2, [r1, #0]
 800777e:	0650      	lsls	r0, r2, #25
 8007780:	d403      	bmi.n	800778a <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8007782:	680a      	ldr	r2, [r1, #0]
 8007784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007788:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800778a:	68e2      	ldr	r2, [r4, #12]
 800778c:	2a00      	cmp	r2, #0
 800778e:	d141      	bne.n	8007814 <HAL_SPI_Receive+0x10c>
    while (hspi->RxXferCount > 0U)
 8007790:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007792:	b292      	uxth	r2, r2
 8007794:	b1ca      	cbz	r2, 80077ca <HAL_SPI_Receive+0xc2>
 8007796:	1c6f      	adds	r7, r5, #1
 8007798:	d00e      	beq.n	80077b8 <HAL_SPI_Receive+0xb0>
 800779a:	e06b      	b.n	8007874 <HAL_SPI_Receive+0x16c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800779c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800779e:	7b1b      	ldrb	r3, [r3, #12]
 80077a0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80077a2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80077a6:	3a01      	subs	r2, #1
 80077a8:	b292      	uxth	r2, r2
 80077aa:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80077ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077ae:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 80077b0:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077b2:	63a1      	str	r1, [r4, #56]	@ 0x38
    while (hspi->RxXferCount > 0U)
 80077b4:	b14b      	cbz	r3, 80077ca <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	07d0      	lsls	r0, r2, #31
 80077bc:	d4ee      	bmi.n	800779c <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077be:	f7fd fdef 	bl	80053a0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 80077c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f5      	bne.n	80077b6 <HAL_SPI_Receive+0xae>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077d0:	f000 808b 	beq.w	80078ea <HAL_SPI_Receive+0x1e2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d4:	9600      	str	r6, [sp, #0]
 80077d6:	462b      	mov	r3, r5
 80077d8:	2200      	movs	r2, #0
 80077da:	2101      	movs	r1, #1
 80077dc:	4620      	mov	r0, r4
 80077de:	f7ff fc13 	bl	8007008 <SPI_WaitFlagStateUntilTimeout>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f040 8092 	bne.w	800790c <HAL_SPI_Receive+0x204>
  hspi->State = HAL_SPI_STATE_READY;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ee:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80077f0:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f2:	ebb0 0803 	subs.w	r8, r0, r3
  __HAL_UNLOCK(hspi);
 80077f6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077fa:	bf18      	it	ne
 80077fc:	f04f 0801 	movne.w	r8, #1
}
 8007800:	4640      	mov	r0, r8
 8007802:	b003      	add	sp, #12
 8007804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007808:	f04f 0802 	mov.w	r8, #2
}
 800780c:	4640      	mov	r0, r8
 800780e:	b003      	add	sp, #12
 8007810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 8007814:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007816:	b292      	uxth	r2, r2
 8007818:	2a00      	cmp	r2, #0
 800781a:	d0d6      	beq.n	80077ca <HAL_SPI_Receive+0xc2>
 800781c:	1c6a      	adds	r2, r5, #1
 800781e:	d140      	bne.n	80078a2 <HAL_SPI_Receive+0x19a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007820:	688b      	ldr	r3, [r1, #8]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d50f      	bpl.n	8007846 <HAL_SPI_Receive+0x13e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007826:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007828:	68ca      	ldr	r2, [r1, #12]
 800782a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800782e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007830:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007832:	3a01      	subs	r2, #1
 8007834:	b292      	uxth	r2, r2
 8007836:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8007838:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0c4      	beq.n	80077ca <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007840:	688b      	ldr	r3, [r1, #8]
 8007842:	07db      	lsls	r3, r3, #31
 8007844:	d4ef      	bmi.n	8007826 <HAL_SPI_Receive+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007846:	f7fd fdab 	bl	80053a0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800784a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0bb      	beq.n	80077ca <HAL_SPI_Receive+0xc2>
 8007852:	6821      	ldr	r1, [r4, #0]
 8007854:	e7e4      	b.n	8007820 <HAL_SPI_Receive+0x118>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007856:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007858:	7b1b      	ldrb	r3, [r3, #12]
 800785a:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800785c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800785e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007860:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007862:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8007864:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007866:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007868:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800786a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0ab      	beq.n	80077ca <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	07d1      	lsls	r1, r2, #31
 8007878:	d4ed      	bmi.n	8007856 <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800787a:	f7fd fd91 	bl	80053a0 <HAL_GetTick>
 800787e:	1b80      	subs	r0, r0, r6
 8007880:	42a8      	cmp	r0, r5
 8007882:	d3f2      	bcc.n	800786a <HAL_SPI_Receive+0x162>
 8007884:	e015      	b.n	80078b2 <HAL_SPI_Receive+0x1aa>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007886:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800788e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007890:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007892:	3b01      	subs	r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8007898:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d094      	beq.n	80077ca <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	07d2      	lsls	r2, r2, #31
 80078a6:	d4ee      	bmi.n	8007886 <HAL_SPI_Receive+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a8:	f7fd fd7a 	bl	80053a0 <HAL_GetTick>
 80078ac:	1b80      	subs	r0, r0, r6
 80078ae:	42a8      	cmp	r0, r5
 80078b0:	d3f2      	bcc.n	8007898 <HAL_SPI_Receive+0x190>
          hspi->State = HAL_SPI_STATE_READY;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078b8:	2300      	movs	r3, #0
 80078ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078be:	f04f 0803 	mov.w	r8, #3
 80078c2:	e79d      	b.n	8007800 <HAL_SPI_Receive+0xf8>
    __HAL_SPI_DISABLE(hspi);
 80078c4:	680a      	ldr	r2, [r1, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ca:	600a      	str	r2, [r1, #0]
    SPI_1LINE_RX(hspi);
 80078cc:	680a      	ldr	r2, [r1, #0]
 80078ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078d2:	600a      	str	r2, [r1, #0]
 80078d4:	e752      	b.n	800777c <HAL_SPI_Receive+0x74>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078d6:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078d8:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078da:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078dc:	f880 5051 	strb.w	r5, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078e0:	460a      	mov	r2, r1
 80078e2:	f7ff fda7 	bl	8007434 <HAL_SPI_TransmitReceive>
 80078e6:	4680      	mov	r8, r0
 80078e8:	e78a      	b.n	8007800 <HAL_SPI_Receive+0xf8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f0:	d023      	beq.n	800793a <HAL_SPI_Receive+0x232>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078f6:	d010      	beq.n	800791a <HAL_SPI_Receive+0x212>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078f8:	9600      	str	r6, [sp, #0]
 80078fa:	462b      	mov	r3, r5
 80078fc:	2200      	movs	r2, #0
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	4620      	mov	r0, r4
 8007902:	f7ff fb81 	bl	8007008 <SPI_WaitFlagStateUntilTimeout>
 8007906:	2800      	cmp	r0, #0
 8007908:	f43f af6e 	beq.w	80077e8 <HAL_SPI_Receive+0xe0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800790e:	f043 0320 	orr.w	r3, r3, #32
 8007912:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007914:	2320      	movs	r3, #32
 8007916:	6563      	str	r3, [r4, #84]	@ 0x54
 8007918:	e766      	b.n	80077e8 <HAL_SPI_Receive+0xe0>
    __HAL_SPI_DISABLE(hspi);
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	680a      	ldr	r2, [r1, #0]
 800791e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007922:	600a      	str	r2, [r1, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007924:	462b      	mov	r3, r5
 8007926:	2200      	movs	r2, #0
 8007928:	9600      	str	r6, [sp, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	4620      	mov	r0, r4
 800792e:	f7ff fb6b 	bl	8007008 <SPI_WaitFlagStateUntilTimeout>
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f af58 	beq.w	80077e8 <HAL_SPI_Receive+0xe0>
 8007938:	e7e8      	b.n	800790c <HAL_SPI_Receive+0x204>
    __HAL_SPI_DISABLE(hspi);
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	6813      	ldr	r3, [r2, #0]
 800793e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007942:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007944:	e7d8      	b.n	80078f8 <HAL_SPI_Receive+0x1f0>
 8007946:	bf00      	nop

08007948 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007948:	2800      	cmp	r0, #0
 800794a:	f000 808f 	beq.w	8007a6c <HAL_TIM_Base_Init+0x124>
{
 800794e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007950:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007954:	4604      	mov	r4, r0
 8007956:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8081 	beq.w	8007a62 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007960:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007962:	4943      	ldr	r1, [pc, #268]	@ (8007a70 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	2302      	movs	r3, #2
 8007966:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800796a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800796c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800796e:	d064      	beq.n	8007a3a <HAL_TIM_Base_Init+0xf2>
 8007970:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007974:	d030      	beq.n	80079d8 <HAL_TIM_Base_Init+0x90>
 8007976:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 800797a:	428a      	cmp	r2, r1
 800797c:	d02c      	beq.n	80079d8 <HAL_TIM_Base_Init+0x90>
 800797e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007982:	428a      	cmp	r2, r1
 8007984:	d028      	beq.n	80079d8 <HAL_TIM_Base_Init+0x90>
 8007986:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800798a:	428a      	cmp	r2, r1
 800798c:	d024      	beq.n	80079d8 <HAL_TIM_Base_Init+0x90>
 800798e:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8007992:	428a      	cmp	r2, r1
 8007994:	d051      	beq.n	8007a3a <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007996:	4937      	ldr	r1, [pc, #220]	@ (8007a74 <HAL_TIM_Base_Init+0x12c>)
 8007998:	428a      	cmp	r2, r1
 800799a:	d021      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
 800799c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079a0:	428a      	cmp	r2, r1
 80079a2:	d01d      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
 80079a4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079a8:	428a      	cmp	r2, r1
 80079aa:	d019      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
 80079ac:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d015      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
 80079b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079b8:	428a      	cmp	r2, r1
 80079ba:	d011      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
 80079bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079c0:	428a      	cmp	r2, r1
 80079c2:	d00d      	beq.n	80079e0 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079c6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ce:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80079d0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80079d4:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d6:	e010      	b.n	80079fa <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80079d8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80079de:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079e0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80079f2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80079f4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80079f8:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079fa:	2301      	movs	r3, #1
 80079fc:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079fe:	6913      	ldr	r3, [r2, #16]
 8007a00:	07db      	lsls	r3, r3, #31
 8007a02:	d503      	bpl.n	8007a0c <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a04:	6913      	ldr	r3, [r2, #16]
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a12:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007a16:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007a1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007a1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a22:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a2a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007a2e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007a32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007a36:	2000      	movs	r0, #0
}
 8007a38:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007a3a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a42:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a48:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a4a:	69a1      	ldr	r1, [r4, #24]
 8007a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a50:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007a52:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	68e3      	ldr	r3, [r4, #12]
 8007a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a60:	e7cb      	b.n	80079fa <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8007a62:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007a66:	f7fd fab5 	bl	8004fd4 <HAL_TIM_Base_MspInit>
 8007a6a:	e779      	b.n	8007960 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8007a6c:	2001      	movs	r0, #1
}
 8007a6e:	4770      	bx	lr
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40014000 	.word	0x40014000

08007a78 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007a78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d12f      	bne.n	8007ae0 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a80:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a82:	4918      	ldr	r1, [pc, #96]	@ (8007ae4 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	2202      	movs	r2, #2
 8007a86:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a8a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	d019      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9a:	d016      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007a9c:	4a12      	ldr	r2, [pc, #72]	@ (8007ae8 <HAL_TIM_Base_Start_IT+0x70>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007aa2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007aaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007ab2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007aba:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <HAL_TIM_Base_Start_IT+0x52>
 8007ac2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d104      	bne.n	8007ad4 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	2a06      	cmp	r2, #6
 8007ad2:	d003      	beq.n	8007adc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007adc:	2000      	movs	r0, #0
 8007ade:	4770      	bx	lr
    return HAL_ERROR;
 8007ae0:	2001      	movs	r0, #1
}
 8007ae2:	4770      	bx	lr
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40000400 	.word	0x40000400

08007aec <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007aec:	6803      	ldr	r3, [r0, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	f241 1111 	movw	r1, #4369	@ 0x1111
 8007afc:	420a      	tst	r2, r1
 8007afe:	d108      	bne.n	8007b12 <HAL_TIM_Base_Stop_IT+0x26>
 8007b00:	6a19      	ldr	r1, [r3, #32]
 8007b02:	f240 4244 	movw	r2, #1092	@ 0x444
 8007b06:	4211      	tst	r1, r2
 8007b08:	d103      	bne.n	8007b12 <HAL_TIM_Base_Stop_IT+0x26>
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8007b18:	2000      	movs	r0, #0
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007b1c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007b20:	2a01      	cmp	r2, #1
 8007b22:	d06e      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0xe6>
 8007b24:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8007b26:	6802      	ldr	r2, [r0, #0]
{
 8007b28:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007b2a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8007b2e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007b32:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007b36:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b38:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8007b3c:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007b40:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007b42:	680c      	ldr	r4, [r1, #0]
 8007b44:	2c60      	cmp	r4, #96	@ 0x60
 8007b46:	d076      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x11a>
 8007b48:	d811      	bhi.n	8007b6e <HAL_TIM_ConfigClockSource+0x52>
 8007b4a:	2c40      	cmp	r4, #64	@ 0x40
 8007b4c:	d05b      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0xea>
 8007b4e:	d82e      	bhi.n	8007bae <HAL_TIM_ConfigClockSource+0x92>
 8007b50:	2c20      	cmp	r4, #32
 8007b52:	d004      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x42>
 8007b54:	f200 8088 	bhi.w	8007c68 <HAL_TIM_ConfigClockSource+0x14c>
 8007b58:	f034 0110 	bics.w	r1, r4, #16
 8007b5c:	d11f      	bne.n	8007b9e <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b5e:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b60:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b64:	4321      	orrs	r1, r4
 8007b66:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b6a:	6091      	str	r1, [r2, #8]
}
 8007b6c:	e016      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8007b6e:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8007b72:	d013      	beq.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
 8007b74:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8007b78:	d033      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0xc6>
 8007b7a:	2c70      	cmp	r4, #112	@ 0x70
 8007b7c:	d10f      	bne.n	8007b9e <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b7e:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007b82:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b84:	4328      	orrs	r0, r5
 8007b86:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b8c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8007b90:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b92:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007b94:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b96:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007b9a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007ba0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007baa:	bc30      	pop	{r4, r5}
 8007bac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007bae:	2c50      	cmp	r4, #80	@ 0x50
 8007bb0:	d1f5      	bne.n	8007b9e <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8007bb2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007bb4:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8007bb6:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bb8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007bbc:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	6a11      	ldr	r1, [r2, #32]
 8007bc0:	f021 0101 	bic.w	r1, r1, #1
 8007bc4:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc6:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bc8:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bcc:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007bd0:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007bd2:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007bd4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bd6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bda:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8007bde:	6091      	str	r1, [r2, #8]
}
 8007be0:	e7dc      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007be6:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be8:	4328      	orrs	r0, r5
 8007bea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bec:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bf0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8007bf4:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8007bf6:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf8:	6891      	ldr	r1, [r2, #8]
 8007bfa:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8007bfe:	6091      	str	r1, [r2, #8]
      break;
 8007c00:	e7cc      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8007c02:	2002      	movs	r0, #2
}
 8007c04:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8007c06:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007c08:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8007c0a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c0c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007c10:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c12:	6a11      	ldr	r1, [r2, #32]
 8007c14:	f021 0101 	bic.w	r1, r1, #1
 8007c18:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c1c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c20:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007c24:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007c26:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007c28:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c2a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c2e:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007c32:	6091      	str	r1, [r2, #8]
}
 8007c34:	e7b2      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8007c36:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007c38:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8007c3a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3c:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c40:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c44:	6a10      	ldr	r0, [r2, #32]
 8007c46:	f020 0010 	bic.w	r0, r0, #16
 8007c4a:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4c:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4e:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c52:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007c56:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8007c58:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007c5a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c5c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c60:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007c64:	6091      	str	r1, [r2, #8]
}
 8007c66:	e799      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8007c68:	2c30      	cmp	r4, #48	@ 0x30
 8007c6a:	f43f af78 	beq.w	8007b5e <HAL_TIM_ConfigClockSource+0x42>
 8007c6e:	e796      	b.n	8007b9e <HAL_TIM_ConfigClockSource+0x82>

08007c70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c70:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007c74:	2a01      	cmp	r2, #1
 8007c76:	d037      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007c78:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c7a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7c:	2002      	movs	r0, #2
{
 8007c7e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007c84:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c86:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c8a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c8e:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c90:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c92:	4816      	ldr	r0, [pc, #88]	@ (8007cec <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007c94:	4282      	cmp	r2, r0
 8007c96:	d01a      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007c98:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007c9c:	d017      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007c9e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8007ca2:	4282      	cmp	r2, r0
 8007ca4:	d013      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007ca6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8007caa:	4282      	cmp	r2, r0
 8007cac:	d00f      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007cae:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8007cb2:	4282      	cmp	r2, r0
 8007cb4:	d00b      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007cb6:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8007cba:	4282      	cmp	r2, r0
 8007cbc:	d007      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007cbe:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8007cc2:	4282      	cmp	r2, r0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8007cc6:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8007cca:	4282      	cmp	r2, r0
 8007ccc:	d104      	bne.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cce:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cd0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007cd8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007ce0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8007ce4:	bc30      	pop	{r4, r5}
 8007ce6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007ce8:	2002      	movs	r0, #2
}
 8007cea:	4770      	bx	lr
 8007cec:	40010000 	.word	0x40010000

08007cf0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	f000 8087 	beq.w	8007e04 <HAL_UART_Init+0x114>
{
 8007cf6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cf8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d079      	beq.n	8007dfa <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d06:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d08:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8007d0a:	2224      	movs	r2, #36	@ 0x24
 8007d0c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d16:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d18:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d1a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d1c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8007d20:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d22:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d24:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d26:	4302      	orrs	r2, r0
 8007d28:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007d2a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d2c:	4302      	orrs	r2, r0
 8007d2e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8007d30:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8007d34:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d38:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d42:	4931      	ldr	r1, [pc, #196]	@ (8007e08 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007d48:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d4a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d4c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d4e:	d036      	beq.n	8007dbe <HAL_UART_Init+0xce>
 8007d50:	4a2e      	ldr	r2, [pc, #184]	@ (8007e0c <HAL_UART_Init+0x11c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d033      	beq.n	8007dbe <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d56:	f7ff f937 	bl	8006fc8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d5a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d5c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d5e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d62:	e9d4 5300 	ldrd	r5, r3, [r4]
 8007d66:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d6a:	d02b      	beq.n	8007dc4 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d6c:	009a      	lsls	r2, r3, #2
 8007d6e:	0f9b      	lsrs	r3, r3, #30
 8007d70:	f7f8 fe84 	bl	8000a7c <__aeabi_uldivmod>
 8007d74:	4a26      	ldr	r2, [pc, #152]	@ (8007e10 <HAL_UART_Init+0x120>)
 8007d76:	fba2 1300 	umull	r1, r3, r2, r0
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	2164      	movs	r1, #100	@ 0x64
 8007d7e:	fb01 0013 	mls	r0, r1, r3, r0
 8007d82:	0100      	lsls	r0, r0, #4
 8007d84:	3032      	adds	r0, #50	@ 0x32
 8007d86:	fba2 2000 	umull	r2, r0, r2, r0
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8007d90:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d92:	692a      	ldr	r2, [r5, #16]
 8007d94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d98:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d9a:	696a      	ldr	r2, [r5, #20]
 8007d9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007da0:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8007da2:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007da6:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8007da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dac:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dae:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007db0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007db4:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8007db8:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dba:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dbe:	f7ff f913 	bl	8006fe8 <HAL_RCC_GetPCLK2Freq>
 8007dc2:	e7ca      	b.n	8007d5a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dc4:	18da      	adds	r2, r3, r3
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	415b      	adcs	r3, r3
 8007dcc:	f7f8 fe56 	bl	8000a7c <__aeabi_uldivmod>
 8007dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e10 <HAL_UART_Init+0x120>)
 8007dd2:	fba2 3100 	umull	r3, r1, r2, r0
 8007dd6:	0949      	lsrs	r1, r1, #5
 8007dd8:	2364      	movs	r3, #100	@ 0x64
 8007dda:	fb03 0311 	mls	r3, r3, r1, r0
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	3332      	adds	r3, #50	@ 0x32
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007df0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007df4:	4413      	add	r3, r2
 8007df6:	60ab      	str	r3, [r5, #8]
 8007df8:	e7cb      	b.n	8007d92 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8007dfa:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8007dfe:	f7fd f903 	bl	8005008 <HAL_UART_MspInit>
 8007e02:	e780      	b.n	8007d06 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8007e04:	2001      	movs	r0, #1
}
 8007e06:	4770      	bx	lr
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	51eb851f 	.word	0x51eb851f

08007e14 <HAL_UART_Transmit>:
{
 8007e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e18:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007e1a:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007e1e:	2820      	cmp	r0, #32
 8007e20:	d155      	bne.n	8007ece <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8007e22:	460d      	mov	r5, r1
 8007e24:	b109      	cbz	r1, 8007e2a <HAL_UART_Transmit+0x16>
 8007e26:	4616      	mov	r6, r2
 8007e28:	b912      	cbnz	r2, 8007e30 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8007e2a:	2001      	movs	r0, #1
}
 8007e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e30:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e36:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e38:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8007e40:	f7fd faae 	bl	80053a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e44:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8007e46:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8007e4c:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8007e4e:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e50:	d040      	beq.n	8007ed4 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8007e52:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e54:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d047      	beq.n	8007eec <HAL_UART_Transmit+0xd8>
 8007e5c:	1c7b      	adds	r3, r7, #1
 8007e5e:	d124      	bne.n	8007eaa <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e60:	6813      	ldr	r3, [r2, #0]
 8007e62:	061f      	lsls	r7, r3, #24
 8007e64:	d5fc      	bpl.n	8007e60 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	d02c      	beq.n	8007ec4 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e6e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007e70:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e78:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ef      	bne.n	8007e60 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	0659      	lsls	r1, r3, #25
 8007e84:	d5fc      	bpl.n	8007e80 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8007e86:	2320      	movs	r3, #32
 8007e88:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8007e8c:	2000      	movs	r0, #0
}
 8007e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8007e92:	2d00      	cmp	r5, #0
 8007e94:	d03d      	beq.n	8007f12 <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e9a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007e9c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ea4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	b313      	cbz	r3, 8007ef0 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	061e      	lsls	r6, r3, #24
 8007eae:	d4f0      	bmi.n	8007e92 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb0:	f7fd fa76 	bl	80053a0 <HAL_GetTick>
 8007eb4:	eba0 0309 	sub.w	r3, r0, r9
 8007eb8:	429f      	cmp	r7, r3
 8007eba:	d311      	bcc.n	8007ee0 <HAL_UART_Transmit+0xcc>
 8007ebc:	b187      	cbz	r7, 8007ee0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	68d3      	ldr	r3, [r2, #12]
 8007ec2:	e7f2      	b.n	8007eaa <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ec4:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	e7cf      	b.n	8007e6e <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8007ece:	2002      	movs	r0, #2
}
 8007ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1bb      	bne.n	8007e52 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8007eda:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007edc:	461d      	mov	r5, r3
 8007ede:	e7b8      	b.n	8007e52 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8007ee0:	2320      	movs	r3, #32
 8007ee2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8007ee6:	2003      	movs	r0, #3
}
 8007ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eec:	1c78      	adds	r0, r7, #1
 8007eee:	d0c7      	beq.n	8007e80 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	065b      	lsls	r3, r3, #25
 8007ef4:	d4c7      	bmi.n	8007e86 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef6:	f7fd fa53 	bl	80053a0 <HAL_GetTick>
 8007efa:	eba0 0309 	sub.w	r3, r0, r9
 8007efe:	429f      	cmp	r7, r3
 8007f00:	d3ee      	bcc.n	8007ee0 <HAL_UART_Transmit+0xcc>
 8007f02:	2f00      	cmp	r7, #0
 8007f04:	d0ec      	beq.n	8007ee0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	d5f2      	bpl.n	8007ef6 <HAL_UART_Transmit+0xe2>
 8007f10:	e7b9      	b.n	8007e86 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f12:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1a:	e7be      	b.n	8007e9a <HAL_UART_Transmit+0x86>

08007f1c <HAL_UARTEx_ReceiveToIdle_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f1c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d127      	bne.n	8007f74 <HAL_UARTEx_ReceiveToIdle_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 8007f24:	b101      	cbz	r1, 8007f28 <HAL_UARTEx_ReceiveToIdle_IT+0xc>
 8007f26:	b90a      	cbnz	r2, 8007f2c <HAL_UARTEx_ReceiveToIdle_IT+0x10>
      return HAL_ERROR;
 8007f28:	2001      	movs	r0, #1
}
 8007f2a:	4770      	bx	lr
{
 8007f2c:	b410      	push	{r4}
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f2e:	2300      	movs	r3, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f30:	2401      	movs	r4, #1
{
 8007f32:	b083      	sub	sp, #12
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f34:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f36:	6343      	str	r3, [r0, #52]	@ 0x34
  huart->RxXferCount = Size;
 8007f38:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3a:	6443      	str	r3, [r0, #68]	@ 0x44
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f3c:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8007f3e:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f40:	2122      	movs	r1, #34	@ 0x22
  huart->RxXferSize = Size;
 8007f42:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f44:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f48:	6802      	ldr	r2, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f4a:	b11b      	cbz	r3, 8007f54 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f4c:	68d3      	ldr	r3, [r2, #12]
 8007f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f52:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f54:	6953      	ldr	r3, [r2, #20]
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f5c:	68d3      	ldr	r3, [r2, #12]
 8007f5e:	f043 0320 	orr.w	r3, r3, #32
 8007f62:	60d3      	str	r3, [r2, #12]
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d006      	beq.n	8007f78 <HAL_UARTEx_ReceiveToIdle_IT+0x5c>
      return HAL_ERROR;
 8007f6a:	2001      	movs	r0, #1
}
 8007f6c:	b003      	add	sp, #12
 8007f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f72:	4770      	bx	lr
    return HAL_BUSY;
 8007f74:	2002      	movs	r0, #2
 8007f76:	4770      	bx	lr
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	6813      	ldr	r3, [r2, #0]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	6853      	ldr	r3, [r2, #4]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	f102 030c 	add.w	r3, r2, #12
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	f102 000c 	add.w	r0, r2, #12
 8007f96:	e840 3100 	strex	r1, r3, [r0]
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	d1f3      	bne.n	8007f86 <HAL_UARTEx_ReceiveToIdle_IT+0x6a>
    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7e4      	b.n	8007f6c <HAL_UARTEx_ReceiveToIdle_IT+0x50>
 8007fa2:	bf00      	nop

08007fa4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop

08007fa8 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop

08007fac <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <UART_DMAAbortOnError>:
{
 8007fb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fb2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007fb8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8007fba:	f7ff fff7 	bl	8007fac <HAL_UART_ErrorCallback>
}
 8007fbe:	bd08      	pop	{r3, pc}

08007fc0 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fc0:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fc2:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fc4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fca:	d042      	beq.n	8008052 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d039      	beq.n	8008044 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd0:	684b      	ldr	r3, [r1, #4]
 8007fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fd6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007fd8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8007fda:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8007fdc:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8007fde:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d132      	bne.n	8008050 <UART_Receive_IT.part.0.isra.0+0x90>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007fea:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fec:	6802      	ldr	r2, [r0, #0]
 8007fee:	68d1      	ldr	r1, [r2, #12]
 8007ff0:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007ff4:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ff6:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ff8:	68d1      	ldr	r1, [r2, #12]
 8007ffa:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8007ffe:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008000:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008002:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008006:	f021 0101 	bic.w	r1, r1, #1
 800800a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800800c:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008010:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008012:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8008014:	2901      	cmp	r1, #1
 8008016:	d125      	bne.n	8008064 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008018:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	f102 030c 	add.w	r3, r2, #12
 800801e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	f102 0c0c 	add.w	ip, r2, #12
 800802a:	e84c 3100 	strex	r1, r3, [ip]
 800802e:	2900      	cmp	r1, #0
 8008030:	d1f3      	bne.n	800801a <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	06db      	lsls	r3, r3, #27
 8008036:	d41a      	bmi.n	800806e <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008038:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800803a:	f7fc fd8f 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
}
 800803e:	b003      	add	sp, #12
 8008040:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008044:	6903      	ldr	r3, [r0, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1c2      	bne.n	8007fd0 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800804a:	684b      	ldr	r3, [r1, #4]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	e7c2      	b.n	8007fd6 <UART_Receive_IT.part.0.isra.0+0x16>
 8008050:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008052:	6903      	ldr	r3, [r0, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f8      	bne.n	800804a <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008058:	684b      	ldr	r3, [r1, #4]
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8008062:	e7bb      	b.n	8007fdc <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8008064:	f7ff ffa0 	bl	8007fa8 <HAL_UART_RxCpltCallback>
}
 8008068:	b003      	add	sp, #12
 800806a:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800806e:	2300      	movs	r3, #0
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	6853      	ldr	r3, [r2, #4]
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	9b01      	ldr	r3, [sp, #4]
 800807c:	e7dc      	b.n	8008038 <UART_Receive_IT.part.0.isra.0+0x78>
 800807e:	bf00      	nop

08008080 <HAL_UART_IRQHandler>:
{
 8008080:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008082:	6803      	ldr	r3, [r0, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008086:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008088:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 800808a:	f012 0f0f 	tst.w	r2, #15
{
 800808e:	b083      	sub	sp, #12
 8008090:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008092:	d170      	bne.n	8008176 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008094:	0691      	lsls	r1, r2, #26
 8008096:	d502      	bpl.n	800809e <HAL_UART_IRQHandler+0x1e>
 8008098:	06a9      	lsls	r1, r5, #26
 800809a:	f100 80a3 	bmi.w	80081e4 <HAL_UART_IRQHandler+0x164>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080a0:	2901      	cmp	r1, #1
 80080a2:	d00b      	beq.n	80080bc <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080a4:	0610      	lsls	r0, r2, #24
 80080a6:	d502      	bpl.n	80080ae <HAL_UART_IRQHandler+0x2e>
 80080a8:	0629      	lsls	r1, r5, #24
 80080aa:	f100 80a5 	bmi.w	80081f8 <HAL_UART_IRQHandler+0x178>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ae:	0652      	lsls	r2, r2, #25
 80080b0:	d502      	bpl.n	80080b8 <HAL_UART_IRQHandler+0x38>
 80080b2:	0668      	lsls	r0, r5, #25
 80080b4:	f100 80bf 	bmi.w	8008236 <HAL_UART_IRQHandler+0x1b6>
}
 80080b8:	b003      	add	sp, #12
 80080ba:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080bc:	06d0      	lsls	r0, r2, #27
 80080be:	d5f1      	bpl.n	80080a4 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080c0:	06e9      	lsls	r1, r5, #27
 80080c2:	d5ef      	bpl.n	80080a4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c4:	2200      	movs	r2, #0
 80080c6:	9201      	str	r2, [sp, #4]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	9201      	str	r2, [sp, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	9201      	str	r2, [sp, #4]
 80080d0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d2:	695a      	ldr	r2, [r3, #20]
 80080d4:	0655      	lsls	r5, r2, #25
 80080d6:	f140 813c 	bpl.w	8008352 <HAL_UART_IRQHandler+0x2d2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080da:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80080dc:	6802      	ldr	r2, [r0, #0]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d0e8      	beq.n	80080b8 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080e6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80080e8:	4291      	cmp	r1, r2
 80080ea:	d9e5      	bls.n	80080b8 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80080ec:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080ee:	69c2      	ldr	r2, [r0, #28]
 80080f0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80080f4:	d036      	beq.n	8008164 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	f103 020c 	add.w	r2, r3, #12
 80080fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	f103 050c 	add.w	r5, r3, #12
 8008106:	e845 2100 	strex	r1, r2, [r5]
 800810a:	2900      	cmp	r1, #0
 800810c:	d1f3      	bne.n	80080f6 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	f103 0214 	add.w	r2, r3, #20
 8008112:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	f103 0514 	add.w	r5, r3, #20
 800811e:	e845 2100 	strex	r1, r2, [r5]
 8008122:	2900      	cmp	r1, #0
 8008124:	d1f3      	bne.n	800810e <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	f103 0214 	add.w	r2, r3, #20
 800812a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	f103 0514 	add.w	r5, r3, #20
 8008136:	e845 2100 	strex	r1, r2, [r5]
 800813a:	2900      	cmp	r1, #0
 800813c:	d1f3      	bne.n	8008126 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800813e:	2220      	movs	r2, #32
 8008140:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008144:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	f103 020c 	add.w	r2, r3, #12
 800814a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	f103 050c 	add.w	r5, r3, #12
 8008156:	e845 2100 	strex	r1, r2, [r5]
 800815a:	2900      	cmp	r1, #0
 800815c:	d1f3      	bne.n	8008146 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800815e:	f7fd fb9d 	bl	800589c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008162:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008164:	2302      	movs	r3, #2
 8008166:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008168:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800816a:	1ac9      	subs	r1, r1, r3
 800816c:	4620      	mov	r0, r4
 800816e:	b289      	uxth	r1, r1
 8008170:	f7fc fcf4 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
 8008174:	e7a0      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008176:	f011 0101 	ands.w	r1, r1, #1
 800817a:	f040 80cf 	bne.w	800831c <HAL_UART_IRQHandler+0x29c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800817e:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8008182:	d08c      	beq.n	800809e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008184:	07d0      	lsls	r0, r2, #31
 8008186:	d50b      	bpl.n	80081a0 <HAL_UART_IRQHandler+0x120>
 8008188:	05e8      	lsls	r0, r5, #23
 800818a:	f140 80de 	bpl.w	800834a <HAL_UART_IRQHandler+0x2ca>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800818e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008190:	f040 0001 	orr.w	r0, r0, #1
 8008194:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008196:	0750      	lsls	r0, r2, #29
 8008198:	d55c      	bpl.n	8008254 <HAL_UART_IRQHandler+0x1d4>
 800819a:	2900      	cmp	r1, #0
 800819c:	f040 80c2 	bne.w	8008324 <HAL_UART_IRQHandler+0x2a4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081a0:	0790      	lsls	r0, r2, #30
 80081a2:	d566      	bpl.n	8008272 <HAL_UART_IRQHandler+0x1f2>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081a4:	0710      	lsls	r0, r2, #28
 80081a6:	f100 80cd 	bmi.w	8008344 <HAL_UART_IRQHandler+0x2c4>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081aa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d083      	beq.n	80080b8 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081b0:	0691      	lsls	r1, r2, #26
 80081b2:	d509      	bpl.n	80081c8 <HAL_UART_IRQHandler+0x148>
 80081b4:	06aa      	lsls	r2, r5, #26
 80081b6:	d507      	bpl.n	80081c8 <HAL_UART_IRQHandler+0x148>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80081bc:	2a22      	cmp	r2, #34	@ 0x22
 80081be:	d103      	bne.n	80081c8 <HAL_UART_IRQHandler+0x148>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff fefd 	bl	8007fc0 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081cc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081d0:	f001 0108 	and.w	r1, r1, #8
 80081d4:	ea52 0501 	orrs.w	r5, r2, r1
 80081d8:	d155      	bne.n	8008286 <HAL_UART_IRQHandler+0x206>
        HAL_UART_ErrorCallback(huart);
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff fee6 	bl	8007fac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	6465      	str	r5, [r4, #68]	@ 0x44
 80081e2:	e769      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80081e8:	2b22      	cmp	r3, #34	@ 0x22
 80081ea:	f47f af65 	bne.w	80080b8 <HAL_UART_IRQHandler+0x38>
}
 80081ee:	b003      	add	sp, #12
 80081f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f4:	f7ff bee4 	b.w	8007fc0 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081f8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80081fc:	2a21      	cmp	r2, #33	@ 0x21
 80081fe:	f47f af5b 	bne.w	80080b8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008202:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008204:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008206:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800820a:	f000 80dd 	beq.w	80083c8 <HAL_UART_IRQHandler+0x348>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800820e:	1c51      	adds	r1, r2, #1
 8008210:	6221      	str	r1, [r4, #32]
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8008216:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8008218:	3a01      	subs	r2, #1
 800821a:	b292      	uxth	r2, r2
 800821c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800821e:	2a00      	cmp	r2, #0
 8008220:	f47f af4a 	bne.w	80080b8 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800822a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008232:	60da      	str	r2, [r3, #12]
 8008234:	e740      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008236:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008238:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800823a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800823e:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008240:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008242:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8008246:	f7ff fead 	bl	8007fa4 <HAL_UART_TxCpltCallback>
    return;
 800824a:	e735      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800824c:	05e8      	lsls	r0, r5, #23
 800824e:	d49e      	bmi.n	800818e <HAL_UART_IRQHandler+0x10e>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008250:	0750      	lsls	r0, r2, #29
 8008252:	d467      	bmi.n	8008324 <HAL_UART_IRQHandler+0x2a4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008254:	0790      	lsls	r0, r2, #30
 8008256:	d50c      	bpl.n	8008272 <HAL_UART_IRQHandler+0x1f2>
 8008258:	2900      	cmp	r1, #0
 800825a:	d0a3      	beq.n	80081a4 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800825c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800825e:	f041 0104 	orr.w	r1, r1, #4
 8008262:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008264:	0711      	lsls	r1, r2, #28
 8008266:	d5a0      	bpl.n	80081aa <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008268:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800826a:	f041 0108 	orr.w	r1, r1, #8
 800826e:	6461      	str	r1, [r4, #68]	@ 0x44
 8008270:	e79b      	b.n	80081aa <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008272:	0710      	lsls	r0, r2, #28
 8008274:	d599      	bpl.n	80081aa <HAL_UART_IRQHandler+0x12a>
 8008276:	f005 0020 	and.w	r0, r5, #32
 800827a:	4308      	orrs	r0, r1
 800827c:	d1f4      	bne.n	8008268 <HAL_UART_IRQHandler+0x1e8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800827e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008280:	2a00      	cmp	r2, #0
 8008282:	d1a1      	bne.n	80081c8 <HAL_UART_IRQHandler+0x148>
 8008284:	e718      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	f103 020c 	add.w	r2, r3, #12
 800828a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800828e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	f103 000c 	add.w	r0, r3, #12
 8008296:	e840 2100 	strex	r1, r2, [r0]
 800829a:	2900      	cmp	r1, #0
 800829c:	d1f3      	bne.n	8008286 <HAL_UART_IRQHandler+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	f103 0214 	add.w	r2, r3, #20
 80082a2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	f103 0014 	add.w	r0, r3, #20
 80082ae:	e840 2100 	strex	r1, r2, [r0]
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d1f3      	bne.n	800829e <HAL_UART_IRQHandler+0x21e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80082b8:	2a01      	cmp	r2, #1
 80082ba:	d022      	beq.n	8008302 <HAL_UART_IRQHandler+0x282>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082bc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80082be:	2120      	movs	r1, #32
 80082c0:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c6:	695a      	ldr	r2, [r3, #20]
 80082c8:	0655      	lsls	r5, r2, #25
 80082ca:	d534      	bpl.n	8008336 <HAL_UART_IRQHandler+0x2b6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	f103 0214 	add.w	r2, r3, #20
 80082d0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	f103 0014 	add.w	r0, r3, #20
 80082dc:	e840 2100 	strex	r1, r2, [r0]
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d1f3      	bne.n	80082cc <HAL_UART_IRQHandler+0x24c>
          if (huart->hdmarx != NULL)
 80082e4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80082e6:	b330      	cbz	r0, 8008336 <HAL_UART_IRQHandler+0x2b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e8:	4b3d      	ldr	r3, [pc, #244]	@ (80083e0 <HAL_UART_IRQHandler+0x360>)
 80082ea:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ec:	f7fd fb20 	bl	8005930 <HAL_DMA_Abort_IT>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f43f aee1 	beq.w	80080b8 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082f6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80082f8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 80082fa:	b003      	add	sp, #12
 80082fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008300:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	f103 020c 	add.w	r2, r3, #12
 8008306:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	f103 000c 	add.w	r0, r3, #12
 8008312:	e840 2100 	strex	r1, r2, [r0]
 8008316:	2900      	cmp	r1, #0
 8008318:	d1f3      	bne.n	8008302 <HAL_UART_IRQHandler+0x282>
 800831a:	e7cf      	b.n	80082bc <HAL_UART_IRQHandler+0x23c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800831c:	07d0      	lsls	r0, r2, #31
 800831e:	d495      	bmi.n	800824c <HAL_UART_IRQHandler+0x1cc>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008320:	0750      	lsls	r0, r2, #29
 8008322:	d50c      	bpl.n	800833e <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008324:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008326:	f041 0102 	orr.w	r1, r1, #2
 800832a:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800832c:	0791      	lsls	r1, r2, #30
 800832e:	d495      	bmi.n	800825c <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008330:	0711      	lsls	r1, r2, #28
 8008332:	d499      	bmi.n	8008268 <HAL_UART_IRQHandler+0x1e8>
 8008334:	e739      	b.n	80081aa <HAL_UART_IRQHandler+0x12a>
            HAL_UART_ErrorCallback(huart);
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fe38 	bl	8007fac <HAL_UART_ErrorCallback>
 800833c:	e6bc      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800833e:	0791      	lsls	r1, r2, #30
 8008340:	d48c      	bmi.n	800825c <HAL_UART_IRQHandler+0x1dc>
 8008342:	e7f5      	b.n	8008330 <HAL_UART_IRQHandler+0x2b0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008344:	06a9      	lsls	r1, r5, #26
 8008346:	d48f      	bmi.n	8008268 <HAL_UART_IRQHandler+0x1e8>
 8008348:	e799      	b.n	800827e <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800834a:	0750      	lsls	r0, r2, #29
 800834c:	f53f af28 	bmi.w	80081a0 <HAL_UART_IRQHandler+0x120>
 8008350:	e780      	b.n	8008254 <HAL_UART_IRQHandler+0x1d4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008352:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8008354:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008356:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8008358:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800835a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800835c:	2a00      	cmp	r2, #0
 800835e:	f43f aeab 	beq.w	80080b8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008362:	1a41      	subs	r1, r0, r1
 8008364:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008366:	2900      	cmp	r1, #0
 8008368:	f43f aea6 	beq.w	80080b8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	f103 020c 	add.w	r2, r3, #12
 8008370:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008374:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	f103 050c 	add.w	r5, r3, #12
 800837c:	e845 2000 	strex	r0, r2, [r5]
 8008380:	2800      	cmp	r0, #0
 8008382:	d1f3      	bne.n	800836c <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	f103 0214 	add.w	r2, r3, #20
 8008388:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	f103 0514 	add.w	r5, r3, #20
 8008394:	e845 2000 	strex	r0, r2, [r5]
 8008398:	2800      	cmp	r0, #0
 800839a:	d1f3      	bne.n	8008384 <HAL_UART_IRQHandler+0x304>
        huart->RxState = HAL_UART_STATE_READY;
 800839c:	2220      	movs	r2, #32
 800839e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	f103 020c 	add.w	r2, r3, #12
 80083a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	f103 050c 	add.w	r5, r3, #12
 80083b4:	e845 2000 	strex	r0, r2, [r5]
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d1f3      	bne.n	80083a4 <HAL_UART_IRQHandler+0x324>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083bc:	2302      	movs	r3, #2
 80083be:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083c0:	4620      	mov	r0, r4
 80083c2:	f7fc fbcb 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
 80083c6:	e677      	b.n	80080b8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c8:	6921      	ldr	r1, [r4, #16]
 80083ca:	2900      	cmp	r1, #0
 80083cc:	f47f af1f 	bne.w	800820e <HAL_UART_IRQHandler+0x18e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083d0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80083d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80083d8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083da:	6222      	str	r2, [r4, #32]
 80083dc:	e71b      	b.n	8008216 <HAL_UART_IRQHandler+0x196>
 80083de:	bf00      	nop
 80083e0:	08007fb1 	.word	0x08007fb1

080083e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80083e4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80083e6:	4903      	ldr	r1, [pc, #12]	@ (80083f4 <MX_FATFS_Init+0x10>)
 80083e8:	4803      	ldr	r0, [pc, #12]	@ (80083f8 <MX_FATFS_Init+0x14>)
 80083ea:	f000 f81f 	bl	800842c <FATFS_LinkDriver>
 80083ee:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <MX_FATFS_Init+0x18>)
 80083f0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80083f2:	bd08      	pop	{r3, pc}
 80083f4:	20001984 	.word	0x20001984
 80083f8:	200008dc 	.word	0x200008dc
 80083fc:	20001988 	.word	0x20001988

08008400 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008400:	4b02      	ldr	r3, [pc, #8]	@ (800840c <USER_initialize+0xc>)
 8008402:	2201      	movs	r2, #1
 8008404:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008406:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	200008f0 	.word	0x200008f0

08008410 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8008410:	2000      	movs	r0, #0
 8008412:	4770      	bx	lr

08008414 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8008414:	2001      	movs	r0, #1
 8008416:	4770      	bx	lr

08008418 <USER_write>:
DRESULT USER_write (
 8008418:	2000      	movs	r0, #0
 800841a:	4770      	bx	lr

0800841c <USER_status>:
DSTATUS USER_status (
 800841c:	4b02      	ldr	r3, [pc, #8]	@ (8008428 <USER_status+0xc>)
 800841e:	2201      	movs	r2, #1
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	7818      	ldrb	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	200008f0 	.word	0x200008f0

0800842c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800842c:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800842e:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <FATFS_LinkDriver+0x44>)
 8008430:	7a5c      	ldrb	r4, [r3, #9]
 8008432:	b9cc      	cbnz	r4, 8008468 <FATFS_LinkDriver+0x3c>
 8008434:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8008436:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800843a:	7a5c      	ldrb	r4, [r3, #9]
 800843c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800843e:	7a5c      	ldrb	r4, [r3, #9]
 8008440:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008444:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8008446:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8008448:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800844a:	441c      	add	r4, r3
 800844c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800844e:	1c54      	adds	r4, r2, #1
 8008450:	b2e4      	uxtb	r4, r4
 8008452:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008454:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 8008456:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8008458:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 800845a:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800845c:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800845e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8008462:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008464:	70c8      	strb	r0, [r1, #3]
}
 8008466:	4770      	bx	lr
  uint8_t ret = 1;
 8008468:	2001      	movs	r0, #1
}
 800846a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	2000198c 	.word	0x2000198c

08008474 <malloc>:
 8008474:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <malloc+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f000 b82d 	b.w	80084d8 <_malloc_r>
 800847e:	bf00      	nop
 8008480:	200008f4 	.word	0x200008f4

08008484 <free>:
 8008484:	4b02      	ldr	r3, [pc, #8]	@ (8008490 <free+0xc>)
 8008486:	4601      	mov	r1, r0
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f000 b8f5 	b.w	8008678 <_free_r>
 800848e:	bf00      	nop
 8008490:	200008f4 	.word	0x200008f4

08008494 <sbrk_aligned>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4e0f      	ldr	r6, [pc, #60]	@ (80084d4 <sbrk_aligned+0x40>)
 8008498:	460c      	mov	r4, r1
 800849a:	6831      	ldr	r1, [r6, #0]
 800849c:	4605      	mov	r5, r0
 800849e:	b911      	cbnz	r1, 80084a6 <sbrk_aligned+0x12>
 80084a0:	f000 f8ae 	bl	8008600 <_sbrk_r>
 80084a4:	6030      	str	r0, [r6, #0]
 80084a6:	4621      	mov	r1, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 f8a9 	bl	8008600 <_sbrk_r>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d103      	bne.n	80084ba <sbrk_aligned+0x26>
 80084b2:	f04f 34ff 	mov.w	r4, #4294967295
 80084b6:	4620      	mov	r0, r4
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
 80084ba:	1cc4      	adds	r4, r0, #3
 80084bc:	f024 0403 	bic.w	r4, r4, #3
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d0f8      	beq.n	80084b6 <sbrk_aligned+0x22>
 80084c4:	1a21      	subs	r1, r4, r0
 80084c6:	4628      	mov	r0, r5
 80084c8:	f000 f89a 	bl	8008600 <_sbrk_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	d1f2      	bne.n	80084b6 <sbrk_aligned+0x22>
 80084d0:	e7ef      	b.n	80084b2 <sbrk_aligned+0x1e>
 80084d2:	bf00      	nop
 80084d4:	20001998 	.word	0x20001998

080084d8 <_malloc_r>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	1ccd      	adds	r5, r1, #3
 80084de:	f025 0503 	bic.w	r5, r5, #3
 80084e2:	3508      	adds	r5, #8
 80084e4:	2d0c      	cmp	r5, #12
 80084e6:	bf38      	it	cc
 80084e8:	250c      	movcc	r5, #12
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	4606      	mov	r6, r0
 80084ee:	db01      	blt.n	80084f4 <_malloc_r+0x1c>
 80084f0:	42a9      	cmp	r1, r5
 80084f2:	d904      	bls.n	80084fe <_malloc_r+0x26>
 80084f4:	230c      	movs	r3, #12
 80084f6:	6033      	str	r3, [r6, #0]
 80084f8:	2000      	movs	r0, #0
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085d4 <_malloc_r+0xfc>
 8008502:	f000 f869 	bl	80085d8 <__malloc_lock>
 8008506:	f8d8 3000 	ldr.w	r3, [r8]
 800850a:	461c      	mov	r4, r3
 800850c:	bb44      	cbnz	r4, 8008560 <_malloc_r+0x88>
 800850e:	4629      	mov	r1, r5
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff ffbf 	bl	8008494 <sbrk_aligned>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	4604      	mov	r4, r0
 800851a:	d158      	bne.n	80085ce <_malloc_r+0xf6>
 800851c:	f8d8 4000 	ldr.w	r4, [r8]
 8008520:	4627      	mov	r7, r4
 8008522:	2f00      	cmp	r7, #0
 8008524:	d143      	bne.n	80085ae <_malloc_r+0xd6>
 8008526:	2c00      	cmp	r4, #0
 8008528:	d04b      	beq.n	80085c2 <_malloc_r+0xea>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	4639      	mov	r1, r7
 800852e:	4630      	mov	r0, r6
 8008530:	eb04 0903 	add.w	r9, r4, r3
 8008534:	f000 f864 	bl	8008600 <_sbrk_r>
 8008538:	4581      	cmp	r9, r0
 800853a:	d142      	bne.n	80085c2 <_malloc_r+0xea>
 800853c:	6821      	ldr	r1, [r4, #0]
 800853e:	1a6d      	subs	r5, r5, r1
 8008540:	4629      	mov	r1, r5
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff ffa6 	bl	8008494 <sbrk_aligned>
 8008548:	3001      	adds	r0, #1
 800854a:	d03a      	beq.n	80085c2 <_malloc_r+0xea>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	442b      	add	r3, r5
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	f8d8 3000 	ldr.w	r3, [r8]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	bb62      	cbnz	r2, 80085b4 <_malloc_r+0xdc>
 800855a:	f8c8 7000 	str.w	r7, [r8]
 800855e:	e00f      	b.n	8008580 <_malloc_r+0xa8>
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	1b52      	subs	r2, r2, r5
 8008564:	d420      	bmi.n	80085a8 <_malloc_r+0xd0>
 8008566:	2a0b      	cmp	r2, #11
 8008568:	d917      	bls.n	800859a <_malloc_r+0xc2>
 800856a:	1961      	adds	r1, r4, r5
 800856c:	42a3      	cmp	r3, r4
 800856e:	6025      	str	r5, [r4, #0]
 8008570:	bf18      	it	ne
 8008572:	6059      	strne	r1, [r3, #4]
 8008574:	6863      	ldr	r3, [r4, #4]
 8008576:	bf08      	it	eq
 8008578:	f8c8 1000 	streq.w	r1, [r8]
 800857c:	5162      	str	r2, [r4, r5]
 800857e:	604b      	str	r3, [r1, #4]
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f82f 	bl	80085e4 <__malloc_unlock>
 8008586:	f104 000b 	add.w	r0, r4, #11
 800858a:	1d23      	adds	r3, r4, #4
 800858c:	f020 0007 	bic.w	r0, r0, #7
 8008590:	1ac2      	subs	r2, r0, r3
 8008592:	bf1c      	itt	ne
 8008594:	1a1b      	subne	r3, r3, r0
 8008596:	50a3      	strne	r3, [r4, r2]
 8008598:	e7af      	b.n	80084fa <_malloc_r+0x22>
 800859a:	6862      	ldr	r2, [r4, #4]
 800859c:	42a3      	cmp	r3, r4
 800859e:	bf0c      	ite	eq
 80085a0:	f8c8 2000 	streq.w	r2, [r8]
 80085a4:	605a      	strne	r2, [r3, #4]
 80085a6:	e7eb      	b.n	8008580 <_malloc_r+0xa8>
 80085a8:	4623      	mov	r3, r4
 80085aa:	6864      	ldr	r4, [r4, #4]
 80085ac:	e7ae      	b.n	800850c <_malloc_r+0x34>
 80085ae:	463c      	mov	r4, r7
 80085b0:	687f      	ldr	r7, [r7, #4]
 80085b2:	e7b6      	b.n	8008522 <_malloc_r+0x4a>
 80085b4:	461a      	mov	r2, r3
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	d1fb      	bne.n	80085b4 <_malloc_r+0xdc>
 80085bc:	2300      	movs	r3, #0
 80085be:	6053      	str	r3, [r2, #4]
 80085c0:	e7de      	b.n	8008580 <_malloc_r+0xa8>
 80085c2:	230c      	movs	r3, #12
 80085c4:	6033      	str	r3, [r6, #0]
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f80c 	bl	80085e4 <__malloc_unlock>
 80085cc:	e794      	b.n	80084f8 <_malloc_r+0x20>
 80085ce:	6005      	str	r5, [r0, #0]
 80085d0:	e7d6      	b.n	8008580 <_malloc_r+0xa8>
 80085d2:	bf00      	nop
 80085d4:	2000199c 	.word	0x2000199c

080085d8 <__malloc_lock>:
 80085d8:	4801      	ldr	r0, [pc, #4]	@ (80085e0 <__malloc_lock+0x8>)
 80085da:	f000 b84b 	b.w	8008674 <__retarget_lock_acquire_recursive>
 80085de:	bf00      	nop
 80085e0:	20001adc 	.word	0x20001adc

080085e4 <__malloc_unlock>:
 80085e4:	4801      	ldr	r0, [pc, #4]	@ (80085ec <__malloc_unlock+0x8>)
 80085e6:	f000 b846 	b.w	8008676 <__retarget_lock_release_recursive>
 80085ea:	bf00      	nop
 80085ec:	20001adc 	.word	0x20001adc

080085f0 <memset>:
 80085f0:	4402      	add	r2, r0
 80085f2:	4603      	mov	r3, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d100      	bne.n	80085fa <memset+0xa>
 80085f8:	4770      	bx	lr
 80085fa:	f803 1b01 	strb.w	r1, [r3], #1
 80085fe:	e7f9      	b.n	80085f4 <memset+0x4>

08008600 <_sbrk_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d06      	ldr	r5, [pc, #24]	@ (800861c <_sbrk_r+0x1c>)
 8008604:	2300      	movs	r3, #0
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	f7fc fe28 	bl	8005260 <_sbrk>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_sbrk_r+0x1a>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	b103      	cbz	r3, 800861a <_sbrk_r+0x1a>
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20001ad8 	.word	0x20001ad8

08008620 <__errno>:
 8008620:	4b01      	ldr	r3, [pc, #4]	@ (8008628 <__errno+0x8>)
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	200008f4 	.word	0x200008f4

0800862c <__libc_init_array>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	4d0d      	ldr	r5, [pc, #52]	@ (8008664 <__libc_init_array+0x38>)
 8008630:	4c0d      	ldr	r4, [pc, #52]	@ (8008668 <__libc_init_array+0x3c>)
 8008632:	1b64      	subs	r4, r4, r5
 8008634:	10a4      	asrs	r4, r4, #2
 8008636:	2600      	movs	r6, #0
 8008638:	42a6      	cmp	r6, r4
 800863a:	d109      	bne.n	8008650 <__libc_init_array+0x24>
 800863c:	4d0b      	ldr	r5, [pc, #44]	@ (800866c <__libc_init_array+0x40>)
 800863e:	4c0c      	ldr	r4, [pc, #48]	@ (8008670 <__libc_init_array+0x44>)
 8008640:	f000 f864 	bl	800870c <_init>
 8008644:	1b64      	subs	r4, r4, r5
 8008646:	10a4      	asrs	r4, r4, #2
 8008648:	2600      	movs	r6, #0
 800864a:	42a6      	cmp	r6, r4
 800864c:	d105      	bne.n	800865a <__libc_init_array+0x2e>
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	f855 3b04 	ldr.w	r3, [r5], #4
 8008654:	4798      	blx	r3
 8008656:	3601      	adds	r6, #1
 8008658:	e7ee      	b.n	8008638 <__libc_init_array+0xc>
 800865a:	f855 3b04 	ldr.w	r3, [r5], #4
 800865e:	4798      	blx	r3
 8008660:	3601      	adds	r6, #1
 8008662:	e7f2      	b.n	800864a <__libc_init_array+0x1e>
 8008664:	08009c34 	.word	0x08009c34
 8008668:	08009c34 	.word	0x08009c34
 800866c:	08009c34 	.word	0x08009c34
 8008670:	08009c38 	.word	0x08009c38

08008674 <__retarget_lock_acquire_recursive>:
 8008674:	4770      	bx	lr

08008676 <__retarget_lock_release_recursive>:
 8008676:	4770      	bx	lr

08008678 <_free_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4605      	mov	r5, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	d041      	beq.n	8008704 <_free_r+0x8c>
 8008680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008684:	1f0c      	subs	r4, r1, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb8      	it	lt
 800868a:	18e4      	addlt	r4, r4, r3
 800868c:	f7ff ffa4 	bl	80085d8 <__malloc_lock>
 8008690:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <_free_r+0x90>)
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x2c>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	4628      	mov	r0, r5
 800869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a0:	f7ff bfa0 	b.w	80085e4 <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x42>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1809      	addeq	r1, r1, r0
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x1e>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x4c>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x42>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1850      	adds	r0, r2, r1
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x6c>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	4401      	add	r1, r0
 80086d0:	1850      	adds	r0, r2, r1
 80086d2:	4283      	cmp	r3, r0
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x22>
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6053      	str	r3, [r2, #4]
 80086de:	4408      	add	r0, r1
 80086e0:	6010      	str	r0, [r2, #0]
 80086e2:	e7da      	b.n	800869a <_free_r+0x22>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x74>
 80086e6:	230c      	movs	r3, #12
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x22>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	1821      	adds	r1, r4, r0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf04      	itt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	bf04      	itt	eq
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7ca      	b.n	800869a <_free_r+0x22>
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	bf00      	nop
 8008708:	2000199c 	.word	0x2000199c

0800870c <_init>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr

08008718 <_fini>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr
