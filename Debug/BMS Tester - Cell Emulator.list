
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c628  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001374  0800c7d8  0800c7d8  0000d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db4c  0800db4c  0000f984  2**0
                  CONTENTS
  4 .ARM          00000008  0800db4c  0800db4c  0000eb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db54  0800db54  0000f984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db54  0800db54  0000eb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db58  0800db58  0000eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000984  20000000  0800db5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f984  2**0
                  CONTENTS
 10 .bss          00000e7c  20000984  20000984  0000f984  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001800  20001800  0000f984  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f984  2**0
                  CONTENTS, READONLY
 13 .debug_info   00059463  00000000  00000000  0000f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006008  00000000  00000000  00068e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f20  00000000  00000000  0006ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002fb4  00000000  00000000  00072d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002907c  00000000  00000000  00075cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002eea6  00000000  00000000  0009ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8341  00000000  00000000  000cdc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c5f57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000117e0  00000000  00000000  001c5f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001d777c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000984 	.word	0x20000984
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c7c0 	.word	0x0800c7c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000988 	.word	0x20000988
 80001ec:	0800c7c0 	.word	0x0800c7c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e00f      	b.n	8001064 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <LED_Init+0xdc>)
 8001048:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <LED_Init+0xdc>)
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f007 fa99 	bl	8008590 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3301      	adds	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b09      	cmp	r3, #9
 8001068:	d9ec      	bls.n	8001044 <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	73bb      	strb	r3, [r7, #14]
 800106e:	e00f      	b.n	8001090 <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <LED_Init+0xe0>)
 8001074:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <LED_Init+0xe0>)
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	f007 fa83 	bl	8008590 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	3301      	adds	r3, #1
 800108e:	73bb      	strb	r3, [r7, #14]
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d9ec      	bls.n	8001070 <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	737b      	strb	r3, [r7, #13]
 800109a:	e00f      	b.n	80010bc <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	4a1f      	ldr	r2, [pc, #124]	@ (800111c <LED_Init+0xe4>)
 80010a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <LED_Init+0xe4>)
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f007 fa6d 	bl	8008590 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	3301      	adds	r3, #1
 80010ba:	737b      	strb	r3, [r7, #13]
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d9ec      	bls.n	800109c <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	733b      	strb	r3, [r7, #12]
 80010c6:	e01d      	b.n	8001104 <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	4a15      	ldr	r2, [pc, #84]	@ (8001120 <LED_Init+0xe8>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 80010d0:	7b3b      	ldrb	r3, [r7, #12]
 80010d2:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <LED_Init+0xec>)
 80010d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010d8:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <LED_Init+0xec>)
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <LED_Init+0xec>)
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	88db      	ldrh	r3, [r3, #6]
 80010f0:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 80010f2:	88ba      	ldrh	r2, [r7, #4]
 80010f4:	79f9      	ldrb	r1, [r7, #7]
 80010f6:	2301      	movs	r3, #1
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f002 fd0d 	bl	8003b18 <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	2b17      	cmp	r3, #23
 8001108:	d9de      	bls.n	80010c8 <LED_Init+0x90>
    }

}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000050 	.word	0x20000050
 800111c:	20000070 	.word	0x20000070
 8001120:	200009a8 	.word	0x200009a8
 8001124:	200000a0 	.word	0x200000a0

08001128 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d80e      	bhi.n	8001156 <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3b01      	subs	r3, #1
 800113c:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <LED_Toggle+0x38>)
 800113e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3b01      	subs	r3, #1
 8001146:	4906      	ldr	r1, [pc, #24]	@ (8001160 <LED_Toggle+0x38>)
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f007 fa36 	bl	80085c2 <HAL_GPIO_TogglePin>
    }
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 800116e:	f006 fb5b 	bl	8007828 <HAL_GetTick>
 8001172:	4603      	mov	r3, r0
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <Push_ButtonHandler+0x64>)
 8001176:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e01c      	b.n	80011b8 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 800117e:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <Push_ButtonHandler+0x68>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	429a      	cmp	r2, r3
 800118a:	d112      	bne.n	80011b2 <Push_ButtonHandler+0x4e>
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <Push_ButtonHandler+0x64>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <Push_ButtonHandler+0x6c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b96      	cmp	r3, #150	@ 0x96
 8001198:	d90b      	bls.n	80011b2 <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ffc0 	bl	8001128 <LED_Toggle>
            previousTime = currentTime;
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <Push_ButtonHandler+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <Push_ButtonHandler+0x6c>)
 80011ae:	6013      	str	r3, [r2, #0]
            break;
 80011b0:	e006      	b.n	80011c0 <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	dddf      	ble.n	800117e <Push_ButtonHandler+0x1a>
        }
    }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200009a0 	.word	0x200009a0
 80011cc:	0800c85c 	.word	0x0800c85c
 80011d0:	200009a4 	.word	0x200009a4

080011d4 <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e00e      	b.n	8001202 <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	411a      	asrs	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1c3 030f 	rsb	r3, r3, #15
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	440b      	add	r3, r1
 80011f6:	f002 0201 	and.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b09      	cmp	r3, #9
 8001206:	dded      	ble.n	80011e4 <intToBinary+0x10>
		    }
		}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 8001216:	b480      	push	{r7}
 8001218:	b085      	sub	sp, #20
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e02b      	b.n	800128c <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25a      	sxtb	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	440b      	add	r3, r1
 8001242:	6819      	ldr	r1, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b25b      	sxtb	r3, r3
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3308      	adds	r3, #8
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	440b      	add	r3, r1
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1c3 0307 	rsb	r3, r3, #7
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	b25b      	sxtb	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b25a      	sxtb	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b07      	cmp	r3, #7
 8001290:	ddd0      	ble.n	8001234 <assignBytes+0x1e>
		    }
		}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b096      	sub	sp, #88	@ 0x58
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff f95c 	bl	8000568 <__aeabi_f2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <cell12_Temp_01_Set+0x148>)
 80012b6:	f7ff fad9 	bl	800086c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <cell12_Temp_01_Set+0x14c>)
 80012c8:	f7ff f9a6 	bl	8000618 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbb2 	bl	8000a3c <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2240      	movs	r2, #64	@ 0x40
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00a fe99 	bl	800c01c <memset>
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80012f6:	f7ff ff6d 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff86 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2101      	movs	r1, #1
 800130e:	4838      	ldr	r0, [pc, #224]	@ (80013f0 <cell12_Temp_01_Set+0x150>)
 8001310:	f007 f93e 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001314:	200a      	movs	r0, #10
 8001316:	f006 fa93 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2102      	movs	r1, #2
 800131e:	4835      	ldr	r0, [pc, #212]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001320:	f007 f936 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001324:	200a      	movs	r0, #10
 8001326:	f006 fa8b 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2102      	movs	r1, #2
 800132e:	4831      	ldr	r0, [pc, #196]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001330:	f007 f92e 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	2202      	movs	r2, #2
 800133a:	492f      	ldr	r1, [pc, #188]	@ (80013f8 <cell12_Temp_01_Set+0x158>)
 800133c:	482f      	ldr	r0, [pc, #188]	@ (80013fc <cell12_Temp_01_Set+0x15c>)
 800133e:	f008 fef4 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	482b      	ldr	r0, [pc, #172]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001348:	f007 f922 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f006 fa77 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	4827      	ldr	r0, [pc, #156]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001358:	f007 f91a 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	2202      	movs	r2, #2
 8001362:	4927      	ldr	r1, [pc, #156]	@ (8001400 <cell12_Temp_01_Set+0x160>)
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <cell12_Temp_01_Set+0x15c>)
 8001366:	f008 fee0 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2102      	movs	r1, #2
 800136e:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001370:	f007 f90e 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f006 fa63 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2102      	movs	r1, #2
 800137e:	481d      	ldr	r0, [pc, #116]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 8001380:	f007 f906 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001384:	f107 0108 	add.w	r1, r7, #8
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	2202      	movs	r2, #2
 800138e:	481b      	ldr	r0, [pc, #108]	@ (80013fc <cell12_Temp_01_Set+0x15c>)
 8001390:	f008 fecb 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 800139a:	f007 f8f9 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800139e:	200a      	movs	r0, #10
 80013a0:	f006 fa4e 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 80013aa:	f007 f8f1 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2302      	movs	r3, #2
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <cell12_Temp_01_Set+0x164>)
 80013b8:	4913      	ldr	r1, [pc, #76]	@ (8001408 <cell12_Temp_01_Set+0x168>)
 80013ba:	4810      	ldr	r0, [pc, #64]	@ (80013fc <cell12_Temp_01_Set+0x15c>)
 80013bc:	f009 f912 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2102      	movs	r1, #2
 80013c4:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <cell12_Temp_01_Set+0x154>)
 80013c6:	f007 f8e3 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f006 fa38 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2101      	movs	r1, #1
 80013d4:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <cell12_Temp_01_Set+0x150>)
 80013d6:	f007 f8db 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013da:	200a      	movs	r0, #10
 80013dc:	f006 fa30 	bl	8007840 <HAL_Delay>

}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	@ 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40490000 	.word	0x40490000
 80013ec:	40900000 	.word	0x40900000
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020800 	.word	0x40020800
 80013f8:	200009c0 	.word	0x200009c0
 80013fc:	200013f4 	.word	0x200013f4
 8001400:	20000160 	.word	0x20000160
 8001404:	200009c4 	.word	0x200009c4
 8001408:	20000164 	.word	0x20000164

0800140c <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 800140c:	b580      	push	{r7, lr}
 800140e:	b096      	sub	sp, #88	@ 0x58
 8001410:	af02      	add	r7, sp, #8
 8001412:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff f8a6 	bl	8000568 <__aeabi_f2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b51      	ldr	r3, [pc, #324]	@ (8001568 <cell12_Temp_02_Set+0x15c>)
 8001422:	f7ff fa23 	bl	800086c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b4e      	ldr	r3, [pc, #312]	@ (800156c <cell12_Temp_02_Set+0x160>)
 8001434:	f7ff f8f0 	bl	8000618 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fafc 	bl	8000a3c <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f00a fde3 	bl	800c01c <memset>
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001462:	f7ff feb7 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fed0 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2101      	movs	r1, #1
 800147a:	483d      	ldr	r0, [pc, #244]	@ (8001570 <cell12_Temp_02_Set+0x164>)
 800147c:	f007 f888 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001480:	200a      	movs	r0, #10
 8001482:	f006 f9dd 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148c:	4839      	ldr	r0, [pc, #228]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 800148e:	f007 f87f 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001492:	200a      	movs	r0, #10
 8001494:	f006 f9d4 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149e:	4835      	ldr	r0, [pc, #212]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 80014a0:	f007 f876 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	2202      	movs	r2, #2
 80014aa:	4933      	ldr	r1, [pc, #204]	@ (8001578 <cell12_Temp_02_Set+0x16c>)
 80014ac:	4833      	ldr	r0, [pc, #204]	@ (800157c <cell12_Temp_02_Set+0x170>)
 80014ae:	f008 fe3c 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b8:	482e      	ldr	r0, [pc, #184]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 80014ba:	f007 f869 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014be:	200a      	movs	r0, #10
 80014c0:	f006 f9be 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ca:	482a      	ldr	r0, [pc, #168]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 80014cc:	f007 f860 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2202      	movs	r2, #2
 80014d6:	492a      	ldr	r1, [pc, #168]	@ (8001580 <cell12_Temp_02_Set+0x174>)
 80014d8:	4828      	ldr	r0, [pc, #160]	@ (800157c <cell12_Temp_02_Set+0x170>)
 80014da:	f008 fe26 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e4:	4823      	ldr	r0, [pc, #140]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 80014e6:	f007 f853 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014ea:	200a      	movs	r0, #10
 80014ec:	f006 f9a8 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f6:	481f      	ldr	r0, [pc, #124]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 80014f8:	f007 f84a 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80014fc:	f107 0108 	add.w	r1, r7, #8
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	2202      	movs	r2, #2
 8001506:	481d      	ldr	r0, [pc, #116]	@ (800157c <cell12_Temp_02_Set+0x170>)
 8001508:	f008 fe0f 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001512:	4818      	ldr	r0, [pc, #96]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 8001514:	f007 f83c 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f006 f991 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001524:	4813      	ldr	r0, [pc, #76]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 8001526:	f007 f833 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <cell12_Temp_02_Set+0x178>)
 8001534:	4914      	ldr	r1, [pc, #80]	@ (8001588 <cell12_Temp_02_Set+0x17c>)
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <cell12_Temp_02_Set+0x170>)
 8001538:	f009 f854 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <cell12_Temp_02_Set+0x168>)
 8001544:	f007 f824 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f006 f979 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2101      	movs	r1, #1
 8001552:	4807      	ldr	r0, [pc, #28]	@ (8001570 <cell12_Temp_02_Set+0x164>)
 8001554:	f007 f81c 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001558:	200a      	movs	r0, #10
 800155a:	f006 f971 	bl	8007840 <HAL_Delay>

}
 800155e:	bf00      	nop
 8001560:	3750      	adds	r7, #80	@ 0x50
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40490000 	.word	0x40490000
 800156c:	40900000 	.word	0x40900000
 8001570:	40020800 	.word	0x40020800
 8001574:	40021400 	.word	0x40021400
 8001578:	200009c0 	.word	0x200009c0
 800157c:	200013f4 	.word	0x200013f4
 8001580:	20000160 	.word	0x20000160
 8001584:	200009c4 	.word	0x200009c4
 8001588:	20000164 	.word	0x20000164

0800158c <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 800158c:	b580      	push	{r7, lr}
 800158e:	b096      	sub	sp, #88	@ 0x58
 8001590:	af02      	add	r7, sp, #8
 8001592:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe ffe6 	bl	8000568 <__aeabi_f2d>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b4d      	ldr	r3, [pc, #308]	@ (80016d8 <cell12_Temp_03_Set+0x14c>)
 80015a2:	f7ff f963 	bl	800086c <__aeabi_ddiv>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b4a      	ldr	r3, [pc, #296]	@ (80016dc <cell12_Temp_03_Set+0x150>)
 80015b4:	f7ff f830 	bl	8000618 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa3c 	bl	8000a3c <__aeabi_d2iz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2240      	movs	r2, #64	@ 0x40
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00a fd23 	bl	800c01c <memset>
 80015d6:	2301      	movs	r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80015e2:	f7ff fdf7 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe10 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fc:	4838      	ldr	r0, [pc, #224]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 80015fe:	f006 ffc7 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001602:	200a      	movs	r0, #10
 8001604:	f006 f91c 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2140      	movs	r1, #64	@ 0x40
 800160c:	4834      	ldr	r0, [pc, #208]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 800160e:	f006 ffbf 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001612:	200a      	movs	r0, #10
 8001614:	f006 f914 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	4830      	ldr	r0, [pc, #192]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 800161e:	f006 ffb7 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	2202      	movs	r2, #2
 8001628:	492e      	ldr	r1, [pc, #184]	@ (80016e4 <cell12_Temp_03_Set+0x158>)
 800162a:	482f      	ldr	r0, [pc, #188]	@ (80016e8 <cell12_Temp_03_Set+0x15c>)
 800162c:	f008 fd7d 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2140      	movs	r1, #64	@ 0x40
 8001634:	482a      	ldr	r0, [pc, #168]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 8001636:	f006 ffab 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f006 f900 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2140      	movs	r1, #64	@ 0x40
 8001644:	4826      	ldr	r0, [pc, #152]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 8001646:	f006 ffa3 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	2202      	movs	r2, #2
 8001650:	4926      	ldr	r1, [pc, #152]	@ (80016ec <cell12_Temp_03_Set+0x160>)
 8001652:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <cell12_Temp_03_Set+0x15c>)
 8001654:	f008 fd69 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	4820      	ldr	r0, [pc, #128]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 800165e:	f006 ff97 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001662:	200a      	movs	r0, #10
 8001664:	f006 f8ec 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2140      	movs	r1, #64	@ 0x40
 800166c:	481c      	ldr	r0, [pc, #112]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 800166e:	f006 ff8f 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001672:	f107 0108 	add.w	r1, r7, #8
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	2202      	movs	r2, #2
 800167c:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <cell12_Temp_03_Set+0x15c>)
 800167e:	f008 fd54 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2140      	movs	r1, #64	@ 0x40
 8001686:	4816      	ldr	r0, [pc, #88]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 8001688:	f006 ff82 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f006 f8d7 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2140      	movs	r1, #64	@ 0x40
 8001696:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 8001698:	f006 ff7a 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2302      	movs	r3, #2
 80016a4:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <cell12_Temp_03_Set+0x164>)
 80016a6:	4913      	ldr	r1, [pc, #76]	@ (80016f4 <cell12_Temp_03_Set+0x168>)
 80016a8:	480f      	ldr	r0, [pc, #60]	@ (80016e8 <cell12_Temp_03_Set+0x15c>)
 80016aa:	f008 ff9b 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2140      	movs	r1, #64	@ 0x40
 80016b2:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 80016b4:	f006 ff6c 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016b8:	200a      	movs	r0, #10
 80016ba:	f006 f8c1 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c4:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <cell12_Temp_03_Set+0x154>)
 80016c6:	f006 ff63 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f006 f8b8 	bl	8007840 <HAL_Delay>

}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	@ 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40490000 	.word	0x40490000
 80016dc:	40900000 	.word	0x40900000
 80016e0:	40021400 	.word	0x40021400
 80016e4:	200009c0 	.word	0x200009c0
 80016e8:	200013f4 	.word	0x200013f4
 80016ec:	20000160 	.word	0x20000160
 80016f0:	200009c4 	.word	0x200009c4
 80016f4:	20000164 	.word	0x20000164

080016f8 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	@ 0x58
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe ff30 	bl	8000568 <__aeabi_f2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b52      	ldr	r3, [pc, #328]	@ (8001858 <cell11_Temp_01_Set+0x160>)
 800170e:	f7ff f8ad 	bl	800086c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <cell11_Temp_01_Set+0x164>)
 8001720:	f7fe ff7a 	bl	8000618 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f986 	bl	8000a3c <__aeabi_d2iz>
 8001730:	4603      	mov	r3, r0
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2240      	movs	r2, #64	@ 0x40
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00a fc6d 	bl	800c01c <memset>
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800174e:	f7ff fd41 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001752:	f107 0208 	add.w	r2, r7, #8
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fd5a 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001768:	483d      	ldr	r0, [pc, #244]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 800176a:	f006 ff11 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800176e:	200a      	movs	r0, #10
 8001770:	f006 f866 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800177a:	4839      	ldr	r0, [pc, #228]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 800177c:	f006 ff08 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f006 f85d 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178c:	4834      	ldr	r0, [pc, #208]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 800178e:	f006 feff 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	2202      	movs	r2, #2
 8001798:	4932      	ldr	r1, [pc, #200]	@ (8001864 <cell11_Temp_01_Set+0x16c>)
 800179a:	4833      	ldr	r0, [pc, #204]	@ (8001868 <cell11_Temp_01_Set+0x170>)
 800179c:	f008 fcc5 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017a6:	482e      	ldr	r0, [pc, #184]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 80017a8:	f006 fef2 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017ac:	200a      	movs	r0, #10
 80017ae:	f006 f847 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b8:	4829      	ldr	r0, [pc, #164]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 80017ba:	f006 fee9 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	2202      	movs	r2, #2
 80017c4:	4929      	ldr	r1, [pc, #164]	@ (800186c <cell11_Temp_01_Set+0x174>)
 80017c6:	4828      	ldr	r0, [pc, #160]	@ (8001868 <cell11_Temp_01_Set+0x170>)
 80017c8:	f008 fcaf 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d2:	4823      	ldr	r0, [pc, #140]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 80017d4:	f006 fedc 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017d8:	200a      	movs	r0, #10
 80017da:	f006 f831 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017e4:	481e      	ldr	r0, [pc, #120]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 80017e6:	f006 fed3 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80017ea:	f107 0108 	add.w	r1, r7, #8
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	2202      	movs	r2, #2
 80017f4:	481c      	ldr	r0, [pc, #112]	@ (8001868 <cell11_Temp_01_Set+0x170>)
 80017f6:	f008 fc98 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001800:	4817      	ldr	r0, [pc, #92]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 8001802:	f006 fec5 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001806:	200a      	movs	r0, #10
 8001808:	f006 f81a 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001812:	4813      	ldr	r0, [pc, #76]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 8001814:	f006 febc 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <cell11_Temp_01_Set+0x178>)
 8001822:	4914      	ldr	r1, [pc, #80]	@ (8001874 <cell11_Temp_01_Set+0x17c>)
 8001824:	4810      	ldr	r0, [pc, #64]	@ (8001868 <cell11_Temp_01_Set+0x170>)
 8001826:	f008 fedd 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	480b      	ldr	r0, [pc, #44]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 8001832:	f006 fead 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f006 f802 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001842:	4807      	ldr	r0, [pc, #28]	@ (8001860 <cell11_Temp_01_Set+0x168>)
 8001844:	f006 fea4 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001848:	200a      	movs	r0, #10
 800184a:	f005 fff9 	bl	8007840 <HAL_Delay>

}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	@ 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40490000 	.word	0x40490000
 800185c:	40900000 	.word	0x40900000
 8001860:	40021c00 	.word	0x40021c00
 8001864:	200009c0 	.word	0x200009c0
 8001868:	2000144c 	.word	0x2000144c
 800186c:	20000160 	.word	0x20000160
 8001870:	200009c4 	.word	0x200009c4
 8001874:	20000164 	.word	0x20000164

08001878 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	@ 0x58
 800187c:	af02      	add	r7, sp, #8
 800187e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fe70 	bl	8000568 <__aeabi_f2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b52      	ldr	r3, [pc, #328]	@ (80019d8 <cell11_Temp_02_Set+0x160>)
 800188e:	f7fe ffed 	bl	800086c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b4f      	ldr	r3, [pc, #316]	@ (80019dc <cell11_Temp_02_Set+0x164>)
 80018a0:	f7fe feba 	bl	8000618 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f8c6 	bl	8000a3c <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2240      	movs	r2, #64	@ 0x40
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00a fbad 	bl	800c01c <memset>
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80018ce:	f7ff fc81 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fc9a 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e8:	483d      	ldr	r0, [pc, #244]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 80018ea:	f006 fe51 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018ee:	200a      	movs	r0, #10
 80018f0:	f005 ffa6 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fa:	4839      	ldr	r0, [pc, #228]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 80018fc:	f006 fe48 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001900:	200a      	movs	r0, #10
 8001902:	f005 ff9d 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800190c:	4834      	ldr	r0, [pc, #208]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 800190e:	f006 fe3f 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2202      	movs	r2, #2
 8001918:	4932      	ldr	r1, [pc, #200]	@ (80019e4 <cell11_Temp_02_Set+0x16c>)
 800191a:	4833      	ldr	r0, [pc, #204]	@ (80019e8 <cell11_Temp_02_Set+0x170>)
 800191c:	f008 fc05 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001926:	482e      	ldr	r0, [pc, #184]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 8001928:	f006 fe32 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800192c:	200a      	movs	r0, #10
 800192e:	f005 ff87 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001938:	4829      	ldr	r0, [pc, #164]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 800193a:	f006 fe29 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	2202      	movs	r2, #2
 8001944:	4929      	ldr	r1, [pc, #164]	@ (80019ec <cell11_Temp_02_Set+0x174>)
 8001946:	4828      	ldr	r0, [pc, #160]	@ (80019e8 <cell11_Temp_02_Set+0x170>)
 8001948:	f008 fbef 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001952:	4823      	ldr	r0, [pc, #140]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 8001954:	f006 fe1c 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001958:	200a      	movs	r0, #10
 800195a:	f005 ff71 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001964:	481e      	ldr	r0, [pc, #120]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 8001966:	f006 fe13 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800196a:	f107 0108 	add.w	r1, r7, #8
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	2202      	movs	r2, #2
 8001974:	481c      	ldr	r0, [pc, #112]	@ (80019e8 <cell11_Temp_02_Set+0x170>)
 8001976:	f008 fbd8 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001980:	4817      	ldr	r0, [pc, #92]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 8001982:	f006 fe05 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f005 ff5a 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001992:	4813      	ldr	r0, [pc, #76]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 8001994:	f006 fdfc 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2302      	movs	r3, #2
 80019a0:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <cell11_Temp_02_Set+0x178>)
 80019a2:	4914      	ldr	r1, [pc, #80]	@ (80019f4 <cell11_Temp_02_Set+0x17c>)
 80019a4:	4810      	ldr	r0, [pc, #64]	@ (80019e8 <cell11_Temp_02_Set+0x170>)
 80019a6:	f008 fe1d 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b0:	480b      	ldr	r0, [pc, #44]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 80019b2:	f006 fded 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019b6:	200a      	movs	r0, #10
 80019b8:	f005 ff42 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <cell11_Temp_02_Set+0x168>)
 80019c4:	f006 fde4 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019c8:	200a      	movs	r0, #10
 80019ca:	f005 ff39 	bl	8007840 <HAL_Delay>

}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	@ 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40490000 	.word	0x40490000
 80019dc:	40900000 	.word	0x40900000
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	200009c0 	.word	0x200009c0
 80019e8:	2000144c 	.word	0x2000144c
 80019ec:	20000160 	.word	0x20000160
 80019f0:	200009c4 	.word	0x200009c4
 80019f4:	20000164 	.word	0x20000164

080019f8 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b096      	sub	sp, #88	@ 0x58
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fdb0 	bl	8000568 <__aeabi_f2d>
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <cell11_Temp_03_Set+0x15c>)
 8001a0e:	f7fe ff2d 	bl	800086c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <cell11_Temp_03_Set+0x160>)
 8001a20:	f7fe fdfa 	bl	8000618 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f806 	bl	8000a3c <__aeabi_d2iz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00a faed 	bl	800c01c <memset>
 8001a42:	2301      	movs	r3, #1
 8001a44:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001a4e:	f7ff fbc1 	bl	80011d4 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001a52:	f107 0208 	add.w	r2, r7, #8
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fbda 	bl	8001216 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2140      	movs	r1, #64	@ 0x40
 8001a66:	483d      	ldr	r0, [pc, #244]	@ (8001b5c <cell11_Temp_03_Set+0x164>)
 8001a68:	f006 fd92 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f005 fee7 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a78:	4839      	ldr	r0, [pc, #228]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001a7a:	f006 fd89 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f005 fede 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a8a:	4835      	ldr	r0, [pc, #212]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001a8c:	f006 fd80 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	2202      	movs	r2, #2
 8001a96:	4933      	ldr	r1, [pc, #204]	@ (8001b64 <cell11_Temp_03_Set+0x16c>)
 8001a98:	4833      	ldr	r0, [pc, #204]	@ (8001b68 <cell11_Temp_03_Set+0x170>)
 8001a9a:	f008 fb46 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aa4:	482e      	ldr	r0, [pc, #184]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001aa6:	f006 fd73 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001aaa:	200a      	movs	r0, #10
 8001aac:	f005 fec8 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab6:	482a      	ldr	r0, [pc, #168]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001ab8:	f006 fd6a 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	492a      	ldr	r1, [pc, #168]	@ (8001b6c <cell11_Temp_03_Set+0x174>)
 8001ac4:	4828      	ldr	r0, [pc, #160]	@ (8001b68 <cell11_Temp_03_Set+0x170>)
 8001ac6:	f008 fb30 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ad0:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001ad2:	f006 fd5d 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f005 feb2 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ae2:	481f      	ldr	r0, [pc, #124]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001ae4:	f006 fd54 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001ae8:	f107 0108 	add.w	r1, r7, #8
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	2202      	movs	r2, #2
 8001af2:	481d      	ldr	r0, [pc, #116]	@ (8001b68 <cell11_Temp_03_Set+0x170>)
 8001af4:	f008 fb19 	bl	800a12a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001afe:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001b00:	f006 fd46 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b04:	200a      	movs	r0, #10
 8001b06:	f005 fe9b 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b10:	4813      	ldr	r0, [pc, #76]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001b12:	f006 fd3d 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <cell11_Temp_03_Set+0x178>)
 8001b20:	4914      	ldr	r1, [pc, #80]	@ (8001b74 <cell11_Temp_03_Set+0x17c>)
 8001b22:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <cell11_Temp_03_Set+0x170>)
 8001b24:	f008 fd5e 	bl	800a5e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b2e:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <cell11_Temp_03_Set+0x168>)
 8001b30:	f006 fd2e 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b34:	200a      	movs	r0, #10
 8001b36:	f005 fe83 	bl	8007840 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2140      	movs	r1, #64	@ 0x40
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <cell11_Temp_03_Set+0x164>)
 8001b40:	f006 fd26 	bl	8008590 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b44:	200a      	movs	r0, #10
 8001b46:	f005 fe7b 	bl	8007840 <HAL_Delay>

}
 8001b4a:	bf00      	nop
 8001b4c:	3750      	adds	r7, #80	@ 0x50
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40490000 	.word	0x40490000
 8001b58:	40900000 	.word	0x40900000
 8001b5c:	40021c00 	.word	0x40021c00
 8001b60:	40020400 	.word	0x40020400
 8001b64:	200009c0 	.word	0x200009c0
 8001b68:	2000144c 	.word	0x2000144c
 8001b6c:	20000160 	.word	0x20000160
 8001b70:	200009c4 	.word	0x200009c4
 8001b74:	20000164 	.word	0x20000164

08001b78 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	72fb      	strb	r3, [r7, #11]
 8001b86:	4613      	mov	r3, r2
 8001b88:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b8e:	d01a      	beq.n	8001bc6 <u8x8_stm32_gpio_and_delay+0x4e>
 8001b90:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b92:	dc1f      	bgt.n	8001bd4 <u8x8_stm32_gpio_and_delay+0x5c>
 8001b94:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b96:	d00f      	beq.n	8001bb8 <u8x8_stm32_gpio_and_delay+0x40>
 8001b98:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b9a:	dc1b      	bgt.n	8001bd4 <u8x8_stm32_gpio_and_delay+0x5c>
 8001b9c:	2b28      	cmp	r3, #40	@ 0x28
 8001b9e:	d002      	beq.n	8001ba6 <u8x8_stm32_gpio_and_delay+0x2e>
 8001ba0:	2b29      	cmp	r3, #41	@ 0x29
 8001ba2:	d004      	beq.n	8001bae <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8001ba4:	e016      	b.n	8001bd4 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f005 fe4a 	bl	8007840 <HAL_Delay>
            break;
 8001bac:	e013      	b.n	8001bd6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8001bae:	7abb      	ldrb	r3, [r7, #10]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f005 fe45 	bl	8007840 <HAL_Delay>
            break;
 8001bb6:	e00e      	b.n	8001bd6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4808      	ldr	r0, [pc, #32]	@ (8001be0 <u8x8_stm32_gpio_and_delay+0x68>)
 8001bc0:	f006 fce6 	bl	8008590 <HAL_GPIO_WritePin>
            break;
 8001bc4:	e007      	b.n	8001bd6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001bc6:	7abb      	ldrb	r3, [r7, #10]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <u8x8_stm32_gpio_and_delay+0x68>)
 8001bce:	f006 fcdf 	bl	8008590 <HAL_GPIO_WritePin>
            break;
 8001bd2:	e000      	b.n	8001bd6 <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8001bd4:	bf00      	nop
    }
    return 1U;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021800 	.word	0x40021800

08001be4 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	72fb      	strb	r3, [r7, #11]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	3b14      	subs	r3, #20
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d83e      	bhi.n	8001c80 <u8x8_byte_4wire_hw_spi+0x9c>
 8001c02:	a201      	add	r2, pc, #4	@ (adr r2, 8001c08 <u8x8_byte_4wire_hw_spi+0x24>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c87 	.word	0x08001c87
 8001c0c:	08001c81 	.word	0x08001c81
 8001c10:	08001c81 	.word	0x08001c81
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	08001c5d 	.word	0x08001c5d
 8001c1c:	08001c6f 	.word	0x08001c6f
 8001c20:	08001c81 	.word	0x08001c81
 8001c24:	08001c81 	.word	0x08001c81
 8001c28:	08001c81 	.word	0x08001c81
 8001c2c:	08001c81 	.word	0x08001c81
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c81 	.word	0x08001c81
 8001c38:	08001c4f 	.word	0x08001c4f
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001c3c:	7abb      	ldrb	r3, [r7, #10]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4813      	ldr	r0, [pc, #76]	@ (8001c94 <u8x8_byte_4wire_hw_spi+0xb0>)
 8001c48:	f008 fa6f 	bl	800a12a <HAL_SPI_Transmit>
            break;
 8001c4c:	e01c      	b.n	8001c88 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001c4e:	7abb      	ldrb	r3, [r7, #10]
 8001c50:	461a      	mov	r2, r3
 8001c52:	2108      	movs	r1, #8
 8001c54:	4810      	ldr	r0, [pc, #64]	@ (8001c98 <u8x8_byte_4wire_hw_spi+0xb4>)
 8001c56:	f006 fc9b 	bl	8008590 <HAL_GPIO_WritePin>
            break;
 8001c5a:	e015      	b.n	8001c88 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	2104      	movs	r1, #4
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <u8x8_byte_4wire_hw_spi+0xb8>)
 8001c68:	f006 fc92 	bl	8008590 <HAL_GPIO_WritePin>
            break;
 8001c6c:	e00c      	b.n	8001c88 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	461a      	mov	r2, r3
 8001c76:	2104      	movs	r1, #4
 8001c78:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <u8x8_byte_4wire_hw_spi+0xb8>)
 8001c7a:	f006 fc89 	bl	8008590 <HAL_GPIO_WritePin>
            break;
 8001c7e:	e003      	b.n	8001c88 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]
            break;
 8001c84:	e000      	b.n	8001c88 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8001c86:	bf00      	nop
    }
    return retVal;
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200014a4 	.word	0x200014a4
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40020c00 	.word	0x40020c00

08001ca0 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <Display_Init+0x3c>)
 8001caa:	f006 fc71 	bl	8008590 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001cae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <Display_Init+0x40>)
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce4 <Display_Init+0x44>)
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <Display_Init+0x48>)
 8001cb4:	480d      	ldr	r0, [pc, #52]	@ (8001cec <Display_Init+0x4c>)
 8001cb6:	f000 fa17 	bl	80020e8 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001cba:	480c      	ldr	r0, [pc, #48]	@ (8001cec <Display_Init+0x4c>)
 8001cbc:	f001 fe22 	bl	8003904 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	480a      	ldr	r0, [pc, #40]	@ (8001cec <Display_Init+0x4c>)
 8001cc4:	f001 fe2d 	bl	8003922 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001cc8:	4808      	ldr	r0, [pc, #32]	@ (8001cec <Display_Init+0x4c>)
 8001cca:	f000 f9e7 	bl	800209c <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001cce:	2178      	movs	r1, #120	@ 0x78
 8001cd0:	4806      	ldr	r0, [pc, #24]	@ (8001cec <Display_Init+0x4c>)
 8001cd2:	f001 fe37 	bl	8003944 <u8x8_SetContrast>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	08001b79 	.word	0x08001b79
 8001ce4:	08001be5 	.word	0x08001be5
 8001ce8:	0800d4bc 	.word	0x0800d4bc
 8001cec:	200009c8 	.word	0x200009c8

08001cf0 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001cf6:	4824      	ldr	r0, [pc, #144]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001cf8:	f000 f98e 	bl	8002018 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <Display_MainTitlePage+0x9c>)
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2340      	movs	r3, #64	@ 0x40
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	481f      	ldr	r0, [pc, #124]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d0c:	f000 f8b6 	bl	8001e7c <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8001d10:	481d      	ldr	r0, [pc, #116]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d12:	f000 f995 	bl	8002040 <u8g2_NextPage>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ef      	bne.n	8001cfc <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8001d1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d20:	f005 fd8e 	bl	8007840 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8001d24:	4818      	ldr	r0, [pc, #96]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d26:	f000 f8ec 	bl	8001f02 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d2a:	4919      	ldr	r1, [pc, #100]	@ (8001d90 <Display_MainTitlePage+0xa0>)
 8001d2c:	4816      	ldr	r0, [pc, #88]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d2e:	f000 ff8b 	bl	8002c48 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <Display_MainTitlePage+0xa4>)
 8001d34:	2210      	movs	r2, #16
 8001d36:	212a      	movs	r1, #42	@ 0x2a
 8001d38:	4813      	ldr	r0, [pc, #76]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d3a:	f000 fee3 	bl	8002b04 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d3e:	4914      	ldr	r1, [pc, #80]	@ (8001d90 <Display_MainTitlePage+0xa0>)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d42:	f000 ff81 	bl	8002c48 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <Display_MainTitlePage+0xa8>)
 8001d48:	2221      	movs	r2, #33	@ 0x21
 8001d4a:	2106      	movs	r1, #6
 8001d4c:	480e      	ldr	r0, [pc, #56]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d4e:	f000 fed9 	bl	8002b04 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f005 fd74 	bl	8007840 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001d58:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d5a:	f000 f8d2 	bl	8001f02 <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8001d5e:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d60:	f000 f96e 	bl	8002040 <u8g2_NextPage>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1c5      	bne.n	8001cf6 <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001d6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d6e:	f005 fd67 	bl	8007840 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <Display_MainTitlePage+0x98>)
 8001d74:	f000 f8c5 	bl	8001f02 <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4807      	ldr	r0, [pc, #28]	@ (8001d9c <Display_MainTitlePage+0xac>)
 8001d7e:	f006 fc07 	bl	8008590 <HAL_GPIO_WritePin>
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200009c8 	.word	0x200009c8
 8001d8c:	20000168 	.word	0x20000168
 8001d90:	0800c864 	.word	0x0800c864
 8001d94:	0800c7d8 	.word	0x0800c7d8
 8001d98:	0800c7e0 	.word	0x0800c7e0
 8001d9c:	40021800 	.word	0x40021800

08001da0 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001dc0:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001dc2:	7dbb      	ldrb	r3, [r7, #22]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001dd0:	897a      	ldrh	r2, [r7, #10]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b298      	uxth	r0, r3
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4603      	mov	r3, r0
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f001 f875 	bl	8002ed6 <u8g2_IsIntersection>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d040      	beq.n	8001e74 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001df6:	e035      	b.n	8001e64 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	7dba      	ldrb	r2, [r7, #22]
 8001e0a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e0e:	893a      	ldrh	r2, [r7, #8]
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 ff9e 	bl	8002d5a <u8g2_DrawHVLine>
 8001e1e:	e010      	b.n	8001e42 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10b      	bne.n	8001e42 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	7d7a      	ldrb	r2, [r7, #21]
 8001e2e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 ff8c 	bl	8002d5a <u8g2_DrawHVLine>
    }
    x++;
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	3301      	adds	r3, #1
 8001e46:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	75fb      	strb	r3, [r7, #23]
      b++;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1c6      	bne.n	8001df8 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7dba      	ldrb	r2, [r7, #22]
 8001e6e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001e72:	e000      	b.n	8001e76 <u8g2_DrawHXBM+0xd6>
    return;
 8001e74:	bf00      	nop
}
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	813b      	strh	r3, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001ea0:	8afb      	ldrh	r3, [r7, #22]
 8001ea2:	08db      	lsrs	r3, r3, #3
 8001ea4:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ea6:	897a      	ldrh	r2, [r7, #10]
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b298      	uxth	r0, r3
 8001eae:	893a      	ldrh	r2, [r7, #8]
 8001eb0:	8c3b      	ldrh	r3, [r7, #32]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	893a      	ldrh	r2, [r7, #8]
 8001eb8:	8979      	ldrh	r1, [r7, #10]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f001 f809 	bl	8002ed6 <u8g2_IsIntersection>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d017      	beq.n	8001efa <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001eca:	e012      	b.n	8001ef2 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001ecc:	88f8      	ldrh	r0, [r7, #6]
 8001ece:	893a      	ldrh	r2, [r7, #8]
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7ff ff61 	bl	8001da0 <u8g2_DrawHXBM>
    bitmap += blen;
 8001ede:	8afb      	ldrh	r3, [r7, #22]
 8001ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee2:	4413      	add	r3, r2
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001ee6:	893b      	ldrh	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	813b      	strh	r3, [r7, #8]
    h--;
 8001eec:	8c3b      	ldrh	r3, [r7, #32]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001ef2:	8c3b      	ldrh	r3, [r7, #32]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <u8g2_DrawXBM+0x50>
 8001ef8:	e000      	b.n	8001efc <u8g2_DrawXBM+0x80>
    return;
 8001efa:	bf00      	nop
  }
}
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	7c1b      	ldrb	r3, [r3, #16]
 8001f10:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00a f873 	bl	800c01c <memset>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	7c1b      	ldrb	r3, [r3, #16]
 8001f54:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	89ba      	ldrh	r2, [r7, #12]
 8001f66:	fb12 f303 	smulbb	r3, r2, r3
 8001f6a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001f6c:	89bb      	ldrh	r3, [r7, #12]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001f72:	89bb      	ldrh	r3, [r7, #12]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	4413      	add	r3, r2
 8001f78:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f7a:	7bf9      	ldrb	r1, [r7, #15]
 8001f7c:	78ba      	ldrb	r2, [r7, #2]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	460b      	mov	r3, r1
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f001 fc8b 	bl	80038a2 <u8x8_DrawTile>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fa6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fae:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	7c5b      	ldrb	r3, [r3, #17]
 8001fb6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001fb8:	7bba      	ldrb	r2, [r7, #14]
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffbd 	bl	8001f3e <u8g2_send_tile_row>
    src_row++;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d203      	bcs.n	8001fe0 <u8g2_send_buffer+0x4c>
 8001fd8:	7bba      	ldrb	r2, [r7, #14]
 8001fda:	7b3b      	ldrb	r3, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3eb      	bcc.n	8001fb8 <u8g2_send_buffer+0x24>
}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff69 	bl	8001f02 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffd8 	bl	8001fe8 <u8g2_SetBufferCurrTileRow>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffa3 	bl	8001f94 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002054:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4413      	add	r3, r2
 8002060:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	7c5b      	ldrb	r3, [r3, #17]
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	429a      	cmp	r2, r3
 800206c:	d304      	bcc.n	8002078 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f001 fc79 	bl	8003966 <u8x8_RefreshDisplay>
    return 0;
 8002074:	2300      	movs	r3, #0
 8002076:	e00d      	b.n	8002094 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff3d 	bl	8001f02 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffab 	bl	8001fe8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffb7 	bl	8002018 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffc8 	bl	8002040 <u8g2_NextPage>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80020b6:	2100      	movs	r1, #0
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff95 	bl	8001fe8 <u8g2_SetBufferCurrTileRow>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2208      	movs	r2, #8
 80020d4:	701a      	strb	r2, [r3, #0]
  return buf;
 80020d6:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	20000a5c 	.word	0x20000a5c

080020e8 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <u8g2_Setup_st7565_64128n_f+0x44>)
 80020fe:	490c      	ldr	r1, [pc, #48]	@ (8002130 <u8g2_Setup_st7565_64128n_f+0x48>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f001 fc91 	bl	8003a28 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002106:	f107 0313 	add.w	r3, r7, #19
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ffdc 	bl	80020c8 <u8g2_m_16_8_f>
 8002110:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002112:	7cfa      	ldrb	r2, [r7, #19]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <u8g2_Setup_st7565_64128n_f+0x4c>)
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 ffc4 	bl	80030aa <u8g2_SetupBuffer>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	080035bd 	.word	0x080035bd
 8002130:	0800375d 	.word	0x0800375d
 8002134:	08002f2d 	.word	0x08002f2d

08002138 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	81fb      	strh	r3, [r7, #14]
    font++;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3301      	adds	r3, #1
 800217a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4413      	add	r3, r2
 800218c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800218e:	89fb      	ldrh	r3, [r7, #14]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80021a6:	2100      	movs	r1, #0
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f7ff ffc5 	bl	8002138 <u8g2_font_get_byte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021b6:	2101      	movs	r1, #1
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f7ff ffbd 	bl	8002138 <u8g2_font_get_byte>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80021c6:	2102      	movs	r1, #2
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7ff ffb5 	bl	8002138 <u8g2_font_get_byte>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80021d6:	2103      	movs	r1, #3
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	f7ff ffad 	bl	8002138 <u8g2_font_get_byte>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80021e6:	2104      	movs	r1, #4
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f7ff ffa5 	bl	8002138 <u8g2_font_get_byte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80021f6:	2105      	movs	r1, #5
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f7ff ff9d 	bl	8002138 <u8g2_font_get_byte>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002206:	2106      	movs	r1, #6
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f7ff ff95 	bl	8002138 <u8g2_font_get_byte>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002216:	2107      	movs	r1, #7
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7ff ff8d 	bl	8002138 <u8g2_font_get_byte>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002226:	2108      	movs	r1, #8
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7ff ff85 	bl	8002138 <u8g2_font_get_byte>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002236:	2109      	movs	r1, #9
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f7ff ff7d 	bl	8002138 <u8g2_font_get_byte>
 800223e:	4603      	mov	r3, r0
 8002240:	b25a      	sxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002246:	210a      	movs	r1, #10
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f7ff ff75 	bl	8002138 <u8g2_font_get_byte>
 800224e:	4603      	mov	r3, r0
 8002250:	b25a      	sxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002256:	210b      	movs	r1, #11
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	f7ff ff6d 	bl	8002138 <u8g2_font_get_byte>
 800225e:	4603      	mov	r3, r0
 8002260:	b25a      	sxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002266:	210c      	movs	r1, #12
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	f7ff ff65 	bl	8002138 <u8g2_font_get_byte>
 800226e:	4603      	mov	r3, r0
 8002270:	b25a      	sxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002276:	210d      	movs	r1, #13
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f7ff ff5d 	bl	8002138 <u8g2_font_get_byte>
 800227e:	4603      	mov	r3, r0
 8002280:	b25a      	sxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002286:	210e      	movs	r1, #14
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f7ff ff55 	bl	8002138 <u8g2_font_get_byte>
 800228e:	4603      	mov	r3, r0
 8002290:	b25a      	sxtb	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002296:	210f      	movs	r1, #15
 8002298:	6838      	ldr	r0, [r7, #0]
 800229a:	f7ff ff4d 	bl	8002138 <u8g2_font_get_byte>
 800229e:	4603      	mov	r3, r0
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022a6:	2110      	movs	r1, #16
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f7ff ff45 	bl	8002138 <u8g2_font_get_byte>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b25a      	sxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022b6:	2111      	movs	r1, #17
 80022b8:	6838      	ldr	r0, [r7, #0]
 80022ba:	f7ff ff4f 	bl	800215c <u8g2_font_get_word>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80022c6:	2113      	movs	r1, #19
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f7ff ff47 	bl	800215c <u8g2_font_get_word>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80022d6:	2115      	movs	r1, #21
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f7ff ff3f 	bl	800215c <u8g2_font_get_word>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	82da      	strh	r2, [r3, #22]
#endif
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7b1b      	ldrb	r3, [r3, #12]
 80022fe:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	7b7b      	ldrb	r3, [r7, #13]
 800230c:	fa42 f303 	asr.w	r3, r2, r3
 8002310:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002316:	7bba      	ldrb	r2, [r7, #14]
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	4413      	add	r3, r2
 800231c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800231e:	7bbb      	ldrb	r3, [r7, #14]
 8002320:	2b07      	cmp	r3, #7
 8002322:	d91a      	bls.n	800235a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002324:	2308      	movs	r3, #8
 8002326:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002328:	7b3a      	ldrb	r2, [r7, #12]
 800232a:	7b7b      	ldrb	r3, [r7, #13]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	7b3b      	ldrb	r3, [r7, #12]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	b25a      	sxtb	r2, r3
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4313      	orrs	r3, r2
 8002350:	b25b      	sxtb	r3, r3
 8002352:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002354:	7bbb      	ldrb	r3, [r7, #14]
 8002356:	3b08      	subs	r3, #8
 8002358:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	4013      	ands	r3, r2
 800236e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7bba      	ldrb	r2, [r7, #14]
 8002374:	731a      	strb	r2, [r3, #12]
  return val;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffaa 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80023a8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	7bbb      	ldrb	r3, [r7, #14]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	73fb      	strb	r3, [r7, #15]
  return v;
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80023ca:	b490      	push	{r4, r7}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4604      	mov	r4, r0
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	80fb      	strh	r3, [r7, #6]
 80023dc:	4603      	mov	r3, r0
 80023de:	717b      	strb	r3, [r7, #5]
 80023e0:	460b      	mov	r3, r1
 80023e2:	713b      	strb	r3, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d014      	beq.n	8002418 <u8g2_add_vector_y+0x4e>
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	dc19      	bgt.n	8002426 <u8g2_add_vector_y+0x5c>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <u8g2_add_vector_y+0x32>
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <u8g2_add_vector_y+0x40>
 80023fa:	e014      	b.n	8002426 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80023fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002400:	b29a      	uxth	r2, r3
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4413      	add	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
      break;
 8002408:	e014      	b.n	8002434 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800240a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800240e:	b29a      	uxth	r2, r3
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4413      	add	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
      break;
 8002416:	e00d      	b.n	8002434 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002418:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800241c:	b29b      	uxth	r3, r3
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	80fb      	strh	r3, [r7, #6]
      break;
 8002424:	e006      	b.n	8002434 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8002426:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800242a:	b29b      	uxth	r3, r3
 800242c:	88fa      	ldrh	r2, [r7, #6]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	80fb      	strh	r3, [r7, #6]
      break;      
 8002432:	bf00      	nop
  }
  return dy;
 8002434:	88fb      	ldrh	r3, [r7, #6]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bc90      	pop	{r4, r7}
 800243e:	4770      	bx	lr

08002440 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002440:	b490      	push	{r4, r7}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4623      	mov	r3, r4
 8002450:	80fb      	strh	r3, [r7, #6]
 8002452:	4603      	mov	r3, r0
 8002454:	717b      	strb	r3, [r7, #5]
 8002456:	460b      	mov	r3, r1
 8002458:	713b      	strb	r3, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d014      	beq.n	800248e <u8g2_add_vector_x+0x4e>
 8002464:	2b02      	cmp	r3, #2
 8002466:	dc19      	bgt.n	800249c <u8g2_add_vector_x+0x5c>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <u8g2_add_vector_x+0x32>
 800246c:	2b01      	cmp	r3, #1
 800246e:	d007      	beq.n	8002480 <u8g2_add_vector_x+0x40>
 8002470:	e014      	b.n	800249c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8002472:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002476:	b29a      	uxth	r2, r3
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	4413      	add	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
      break;
 800247e:	e014      	b.n	80024aa <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8002480:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002484:	b29b      	uxth	r3, r3
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	80fb      	strh	r3, [r7, #6]
      break;
 800248c:	e00d      	b.n	80024aa <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800248e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002492:	b29b      	uxth	r3, r3
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	80fb      	strh	r3, [r7, #6]
      break;
 800249a:	e006      	b.n	80024aa <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800249c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4413      	add	r3, r2
 80024a6:	80fb      	strh	r3, [r7, #6]
      break;      
 80024a8:	bf00      	nop
  }
  return dx;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc90      	pop	{r4, r7}
 80024b4:	4770      	bx	lr

080024b6 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b088      	sub	sp, #32
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
 80024c2:	4613      	mov	r3, r2
 80024c4:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3360      	adds	r3, #96	@ 0x60
 80024ca:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024d6:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80024de:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024e6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	7d7b      	ldrb	r3, [r7, #21]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80024f4:	7dfa      	ldrb	r2, [r7, #23]
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d201      	bcs.n	8002500 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	889b      	ldrh	r3, [r3, #4]
 8002504:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	88db      	ldrh	r3, [r3, #6]
 800250a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800250c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002510:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	7c1b      	ldrb	r3, [r3, #16]
 8002518:	89b8      	ldrh	r0, [r7, #12]
 800251a:	f7ff ff91 	bl	8002440 <u8g2_add_vector_x>
 800251e:	4603      	mov	r3, r0
 8002520:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002522:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002526:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	7c1b      	ldrb	r3, [r3, #16]
 800252e:	8978      	ldrh	r0, [r7, #10]
 8002530:	f7ff ff4b 	bl	80023ca <u8g2_add_vector_y>
 8002534:	4603      	mov	r3, r0
 8002536:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002538:	78bb      	ldrb	r3, [r7, #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	7b9a      	ldrb	r2, [r3, #14]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002548:	7dbb      	ldrb	r3, [r7, #22]
 800254a:	b298      	uxth	r0, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	7c1b      	ldrb	r3, [r3, #16]
 8002550:	897a      	ldrh	r2, [r7, #10]
 8002552:	89b9      	ldrh	r1, [r7, #12]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4603      	mov	r3, r0
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fbfe 	bl	8002d5a <u8g2_DrawHVLine>
 800255e:	e013      	b.n	8002588 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	7b5b      	ldrb	r3, [r3, #13]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10f      	bne.n	8002588 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	7bda      	ldrb	r2, [r3, #15]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002572:	7dbb      	ldrb	r3, [r7, #22]
 8002574:	b298      	uxth	r0, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	7c1b      	ldrb	r3, [r3, #16]
 800257a:	897a      	ldrh	r2, [r7, #10]
 800257c:	89b9      	ldrh	r1, [r7, #12]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4603      	mov	r3, r0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fbe9 	bl	8002d5a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002588:	7dfa      	ldrb	r2, [r7, #23]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	429a      	cmp	r2, r3
 800258e:	d309      	bcc.n	80025a4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002590:	7dfa      	ldrb	r2, [r7, #23]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	757b      	strb	r3, [r7, #21]
    ly++;
 800259c:	7d3b      	ldrb	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80025a2:	e79d      	b.n	80024e0 <u8g2_font_decode_len+0x2a>
      break;
 80025a4:	bf00      	nop
  }
  lx += cnt;
 80025a6:	7d7a      	ldrb	r2, [r7, #21]
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	4413      	add	r3, r2
 80025ac:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80025ae:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80025b6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	725a      	strb	r2, [r3, #9]
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3360      	adds	r3, #96	@ 0x60
 80025d4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80025e8:	4619      	mov	r1, r3
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff fe7f 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b25a      	sxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80025fe:	4619      	mov	r1, r3
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fe74 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 8002606:	4603      	mov	r3, r0
 8002608:	b25a      	sxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	7b9b      	ldrb	r3, [r3, #14]
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	73da      	strb	r2, [r3, #15]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3360      	adds	r3, #96	@ 0x60
 8002642:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002644:	6839      	ldr	r1, [r7, #0]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffbd 	bl	80025c6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002652:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800265a:	4619      	mov	r1, r3
 800265c:	6978      	ldr	r0, [r7, #20]
 800265e:	f7ff fe91 	bl	8002384 <u8g2_font_decode_get_signed_bits>
 8002662:	4603      	mov	r3, r0
 8002664:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800266c:	4619      	mov	r1, r3
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff fe88 	bl	8002384 <u8g2_font_decode_get_signed_bits>
 8002674:	4603      	mov	r3, r0
 8002676:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800267e:	4619      	mov	r1, r3
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f7ff fe7f 	bl	8002384 <u8g2_font_decode_get_signed_bits>
 8002686:	4603      	mov	r3, r0
 8002688:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f340 80d7 	ble.w	8002844 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	8898      	ldrh	r0, [r3, #4]
 800269a:	7cfa      	ldrb	r2, [r7, #19]
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	4413      	add	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	425b      	negs	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	7c1b      	ldrb	r3, [r3, #16]
 80026ac:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026b0:	f7ff fec6 	bl	8002440 <u8g2_add_vector_x>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	88d8      	ldrh	r0, [r3, #6]
 80026c0:	7cfa      	ldrb	r2, [r7, #19]
 80026c2:	7c7b      	ldrb	r3, [r7, #17]
 80026c4:	4413      	add	r3, r2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	425b      	negs	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	b25a      	sxtb	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	7c1b      	ldrb	r3, [r3, #16]
 80026d2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026d6:	f7ff fe78 	bl	80023ca <u8g2_add_vector_y>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	88db      	ldrh	r3, [r3, #6]
 80026ec:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80026ee:	8bfb      	ldrh	r3, [r7, #30]
 80026f0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80026f2:	8b7b      	ldrh	r3, [r7, #26]
 80026f4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	7c1b      	ldrb	r3, [r3, #16]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d85a      	bhi.n	80027b4 <u8g2_font_decode_glyph+0x180>
 80026fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <u8g2_font_decode_glyph+0xd0>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	08002715 	.word	0x08002715
 8002708:	08002731 	.word	0x08002731
 800270c:	08002759 	.word	0x08002759
 8002710:	0800278d 	.word	0x0800278d
      {
	case 0:
	    x1 += decode->glyph_width;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800271a:	b29a      	uxth	r2, r3
 800271c:	8bbb      	ldrh	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002722:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002726:	b29a      	uxth	r2, r3
 8002728:	8b3b      	ldrh	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	833b      	strh	r3, [r7, #24]
	    break;
 800272e:	e041      	b.n	80027b4 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002734:	b29b      	uxth	r3, r3
 8002736:	8bfa      	ldrh	r2, [r7, #30]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800273c:	8bfb      	ldrh	r3, [r7, #30]
 800273e:	3301      	adds	r3, #1
 8002740:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002742:	8bbb      	ldrh	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800274e:	b29a      	uxth	r2, r3
 8002750:	8b3b      	ldrh	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	833b      	strh	r3, [r7, #24]
	    break;
 8002756:	e02d      	b.n	80027b4 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800275e:	b29b      	uxth	r3, r3
 8002760:	8bfa      	ldrh	r2, [r7, #30]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002766:	8bfb      	ldrh	r3, [r7, #30]
 8002768:	3301      	adds	r3, #1
 800276a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800276c:	8bbb      	ldrh	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8002772:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002776:	b29b      	uxth	r3, r3
 8002778:	8b7a      	ldrh	r2, [r7, #26]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800277e:	8b7b      	ldrh	r3, [r7, #26]
 8002780:	3301      	adds	r3, #1
 8002782:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002784:	8b3b      	ldrh	r3, [r7, #24]
 8002786:	3301      	adds	r3, #1
 8002788:	833b      	strh	r3, [r7, #24]
	    break;	  
 800278a:	e013      	b.n	80027b4 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800278c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002790:	b29a      	uxth	r2, r3
 8002792:	8bbb      	ldrh	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8b7a      	ldrh	r2, [r7, #26]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027a6:	8b7b      	ldrh	r3, [r7, #26]
 80027a8:	3301      	adds	r3, #1
 80027aa:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027ac:	8b3b      	ldrh	r3, [r7, #24]
 80027ae:	3301      	adds	r3, #1
 80027b0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027b2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80027b4:	8bb8      	ldrh	r0, [r7, #28]
 80027b6:	8b7a      	ldrh	r2, [r7, #26]
 80027b8:	8bf9      	ldrh	r1, [r7, #30]
 80027ba:	8b3b      	ldrh	r3, [r7, #24]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4603      	mov	r3, r0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb88 	bl	8002ed6 <u8g2_IsIntersection>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <u8g2_font_decode_glyph+0x19e>
	return d;
 80027cc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80027d0:	e03a      	b.n	8002848 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2200      	movs	r2, #0
 80027dc:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80027e4:	4619      	mov	r1, r3
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff fd81 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80027f6:	4619      	mov	r1, r3
 80027f8:	6978      	ldr	r0, [r7, #20]
 80027fa:	f7ff fd78 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 80027fe:	4603      	mov	r3, r0
 8002800:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2200      	movs	r2, #0
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fe54 	bl	80024b6 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	2201      	movs	r2, #1
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fe4e 	bl	80024b6 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800281a:	2101      	movs	r1, #1
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7ff fd66 	bl	80022ee <u8g2_font_decode_get_unsigned_bits>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ec      	bne.n	8002802 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800282e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002832:	429a      	cmp	r2, r3
 8002834:	dd00      	ble.n	8002838 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002836:	e7d2      	b.n	80027de <u8g2_font_decode_glyph+0x1aa>
	break;
 8002838:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	7b9a      	ldrb	r2, [r3, #14]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002844:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3317      	adds	r3, #23
 8002866:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d82a      	bhi.n	80028c4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	2b60      	cmp	r3, #96	@ 0x60
 8002872:	d907      	bls.n	8002884 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800287a:	461a      	mov	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	2b40      	cmp	r3, #64	@ 0x40
 8002888:	d906      	bls.n	8002898 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8002890:	461a      	mov	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	4413      	add	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04e      	beq.n	8002940 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d102      	bne.n	80028b4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3302      	adds	r3, #2
 80028b2:	e049      	b.n	8002948 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028c2:	e7e9      	b.n	8002898 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80028ca:	461a      	mov	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	4413      	add	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80028d6:	2100      	movs	r1, #0
 80028d8:	6938      	ldr	r0, [r7, #16]
 80028da:	f7ff fc3f 	bl	800215c <u8g2_font_get_word>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4413      	add	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80028e8:	2102      	movs	r1, #2
 80028ea:	6938      	ldr	r0, [r7, #16]
 80028ec:	f7ff fc36 	bl	800215c <u8g2_font_get_word>
 80028f0:	4603      	mov	r3, r0
 80028f2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3304      	adds	r3, #4
 80028f8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80028fa:	89fa      	ldrh	r2, [r7, #14]
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3e9      	bcc.n	80028d6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	4313      	orrs	r3, r2
 800291a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002922:	89fa      	ldrh	r2, [r7, #14]
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	429a      	cmp	r2, r3
 8002928:	d102      	bne.n	8002930 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3303      	adds	r3, #3
 800292e:	e00b      	b.n	8002948 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3302      	adds	r3, #2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800293e:	e7e0      	b.n	8002902 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002944:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	897a      	ldrh	r2, [r7, #10]
 8002972:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4619      	mov	r1, r3
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff ff64 	bl	8002850 <u8g2_font_get_glyph_data>
 8002988:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7ff fe4e 	bl	8002634 <u8g2_font_decode_glyph>
 8002998:	4603      	mov	r3, r0
 800299a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800299c:	8afb      	ldrh	r3, [r7, #22]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d833      	bhi.n	8002a34 <u8g2_DrawGlyph+0x8c>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <u8g2_DrawGlyph+0x2c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f9 	.word	0x080029f9
 80029dc:	08002a0d 	.word	0x08002a0d
 80029e0:	08002a21 	.word	0x08002a21
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	4798      	blx	r3
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	4413      	add	r3, r2
 80029f4:	813b      	strh	r3, [r7, #8]
      break;
 80029f6:	e01d      	b.n	8002a34 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	4798      	blx	r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	897b      	ldrh	r3, [r7, #10]
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	817b      	strh	r3, [r7, #10]
      break;
 8002a0a:	e013      	b.n	8002a34 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	4798      	blx	r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	813b      	strh	r3, [r7, #8]
      break;
 8002a1e:	e009      	b.n	8002a34 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	4798      	blx	r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	4413      	add	r3, r2
 8002a30:	817b      	strh	r3, [r7, #10]
      break;
 8002a32:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	893a      	ldrh	r2, [r7, #8]
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ff88 	bl	8002950 <u8g2_font_draw_glyph>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fca7 	bl	80033b2 <u8x8_utf8_init>
  sum = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	4611      	mov	r1, r2
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	4798      	blx	r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002a7a:	8abb      	ldrh	r3, [r7, #20]
 8002a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d038      	beq.n	8002af6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3301      	adds	r3, #1
 8002a88:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002a8a:	8abb      	ldrh	r3, [r7, #20]
 8002a8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d0e9      	beq.n	8002a68 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002a94:	8abb      	ldrh	r3, [r7, #20]
 8002a96:	893a      	ldrh	r2, [r7, #8]
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ff84 	bl	80029a8 <u8g2_DrawGlyph>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d81e      	bhi.n	8002aec <u8g2_draw_string+0xa0>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <u8g2_draw_string+0x68>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002acf 	.word	0x08002acf
 8002abc:	08002ad9 	.word	0x08002ad9
 8002ac0:	08002ae3 	.word	0x08002ae3
      {
	case 0:
	  x += delta;
 8002ac4:	897a      	ldrh	r2, [r7, #10]
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	4413      	add	r3, r2
 8002aca:	817b      	strh	r3, [r7, #10]
	  break;
 8002acc:	e00e      	b.n	8002aec <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002ace:	893a      	ldrh	r2, [r7, #8]
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	813b      	strh	r3, [r7, #8]
	  break;
 8002ad6:	e009      	b.n	8002aec <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002ad8:	897a      	ldrh	r2, [r7, #10]
 8002ada:	8a7b      	ldrh	r3, [r7, #18]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	817b      	strh	r3, [r7, #10]
	  break;
 8002ae0:	e004      	b.n	8002aec <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002ae2:	893a      	ldrh	r2, [r7, #8]
 8002ae4:	8a7b      	ldrh	r3, [r7, #18]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	813b      	strh	r3, [r7, #8]
	  break;
 8002aea:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002aec:	8afa      	ldrh	r2, [r7, #22]
 8002aee:	8a7b      	ldrh	r3, [r7, #18]
 8002af0:	4413      	add	r3, r2
 8002af2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002af4:	e7b8      	b.n	8002a68 <u8g2_draw_string+0x1c>
      break;
 8002af6:	bf00      	nop
    }
  }
  return sum;
 8002af8:	8afb      	ldrh	r3, [r7, #22]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop

08002b04 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	4613      	mov	r3, r2
 8002b14:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <u8g2_DrawStr+0x30>)
 8002b1a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002b1c:	893a      	ldrh	r2, [r7, #8]
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff92 	bl	8002a4c <u8g2_draw_string>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	080033cf 	.word	0x080033cf

08002b38 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05d      	beq.n	8002c04 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04d      	beq.n	8002c06 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d11c      	bne.n	8002bae <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002b80:	429a      	cmp	r2, r3
 8002b82:	da05      	bge.n	8002b90 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dd32      	ble.n	8002c06 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002bac:	e02b      	b.n	8002c06 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bc4:	440b      	add	r3, r1
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	da0d      	bge.n	8002be6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	b25a      	sxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dd07      	ble.n	8002c06 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002c02:	e000      	b.n	8002c06 <u8g2_UpdateRefHeight+0xce>
    return;
 8002c04:	bf00      	nop
  }  
}
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <u8g2_SetFontPosBaseline+0x1c>)
 8002c34:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	08002c11 	.word	0x08002c11

08002c48 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d00b      	beq.n	8002c74 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3374      	adds	r3, #116	@ 0x74
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fa97 	bl	800219c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff62 	bl	8002b38 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	80fb      	strh	r3, [r7, #6]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8002c98:	8afb      	ldrh	r3, [r7, #22]
 8002c9a:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	8abb      	ldrh	r3, [r7, #20]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8002ca6:	8afa      	ldrh	r2, [r7, #22]
 8002ca8:	8abb      	ldrh	r3, [r7, #20]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90b      	bls.n	8002cc6 <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002cae:	8afa      	ldrh	r2, [r7, #22]
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d205      	bcs.n	8002cc2 <u8g2_clip_intersection2+0x46>
			b = d;
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	82bb      	strh	r3, [r7, #20]
			b--;
 8002cba:	8abb      	ldrh	r3, [r7, #20]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	82bb      	strh	r3, [r7, #20]
 8002cc0:	e001      	b.n	8002cc6 <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8002cc6:	8afa      	ldrh	r2, [r7, #22]
 8002cc8:	88bb      	ldrh	r3, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d301      	bcc.n	8002cd2 <u8g2_clip_intersection2+0x56>
		return 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e01c      	b.n	8002d0c <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002cd2:	8aba      	ldrh	r2, [r7, #20]
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d801      	bhi.n	8002cde <u8g2_clip_intersection2+0x62>
		return 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e016      	b.n	8002d0c <u8g2_clip_intersection2+0x90>
	if (a < c)
 8002cde:	8afa      	ldrh	r2, [r7, #22]
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d201      	bcs.n	8002cea <u8g2_clip_intersection2+0x6e>
		a = c;
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8002cea:	8aba      	ldrh	r2, [r7, #20]
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d901      	bls.n	8002cf6 <u8g2_clip_intersection2+0x7a>
		b = d;
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8afa      	ldrh	r2, [r7, #22]
 8002cfa:	801a      	strh	r2, [r3, #0]
	b -= a;
 8002cfc:	8aba      	ldrh	r2, [r7, #20]
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	8aba      	ldrh	r2, [r7, #20]
 8002d08:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d36:	893a      	ldrh	r2, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d40:	88f8      	ldrh	r0, [r7, #6]
 8002d42:	893a      	ldrh	r2, [r7, #8]
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	47a0      	blx	r4
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}

08002d5a <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d5a:	b590      	push	{r4, r7, lr}
 8002d5c:	b087      	sub	sp, #28
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	4608      	mov	r0, r1
 8002d64:	4611      	mov	r1, r2
 8002d66:	461a      	mov	r2, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	813b      	strh	r3, [r7, #8]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d075      	beq.n	8002e6a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d072      	beq.n	8002e6a <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d91a      	bls.n	8002dc0 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8002d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d109      	bne.n	8002da6 <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002d92:	897a      	ldrh	r2, [r7, #10]
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	817b      	strh	r3, [r7, #10]
					x++;
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	e00c      	b.n	8002dc0 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8002da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d108      	bne.n	8002dc0 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002dae:	893a      	ldrh	r2, [r7, #8]
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	813b      	strh	r3, [r7, #8]
					y++;
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002dc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002dcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11a      	bne.n	8002e0a <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002dda:	893b      	ldrh	r3, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d83b      	bhi.n	8002e58 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002de6:	893b      	ldrh	r3, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d937      	bls.n	8002e5c <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002df8:	1db9      	adds	r1, r7, #6
 8002dfa:	f107 000a 	add.w	r0, r7, #10
 8002dfe:	f7ff ff3d 	bl	8002c7c <u8g2_clip_intersection2>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11a      	bne.n	8002e3e <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8002e08:	e02f      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e10:	897b      	ldrh	r3, [r7, #10]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d824      	bhi.n	8002e60 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d920      	bls.n	8002e64 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e2e:	1db9      	adds	r1, r7, #6
 8002e30:	f107 0008 	add.w	r0, r7, #8
 8002e34:	f7ff ff22 	bl	8002c7c <u8g2_clip_intersection2>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d014      	beq.n	8002e68 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	689c      	ldr	r4, [r3, #8]
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	893a      	ldrh	r2, [r7, #8]
 8002e48:	88f8      	ldrh	r0, [r7, #6]
 8002e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4603      	mov	r3, r0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	47a0      	blx	r4
 8002e56:	e008      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
					return;
 8002e58:	bf00      	nop
 8002e5a:	e006      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
					return;
 8002e5c:	bf00      	nop
 8002e5e:	e004      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
					return;
 8002e60:	bf00      	nop
 8002e62:	e002      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
					return;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <u8g2_DrawHVLine+0x110>
					return;
 8002e68:	bf00      	nop
		}
}
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002e70:	b490      	push	{r4, r7}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	80fb      	strh	r3, [r7, #6]
 8002e82:	4603      	mov	r3, r0
 8002e84:	80bb      	strh	r3, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	807b      	strh	r3, [r7, #2]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20d      	bcs.n	8002eb2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002e96:	883a      	ldrh	r2, [r7, #0]
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d901      	bls.n	8002ea2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e014      	b.n	8002ecc <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	883b      	ldrh	r3, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d901      	bls.n	8002eae <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00e      	b.n	8002ecc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e00c      	b.n	8002ecc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002eb2:	883a      	ldrh	r2, [r7, #0]
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d907      	bls.n	8002eca <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	883b      	ldrh	r3, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d901      	bls.n	8002ec6 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e002      	b.n	8002ecc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002eca:	2300      	movs	r3, #0
    }
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc90      	pop	{r4, r7}
 8002ed4:	4770      	bx	lr

08002ed6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	4608      	mov	r0, r1
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	817b      	strh	r3, [r7, #10]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	813b      	strh	r3, [r7, #8]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002efc:	8b3b      	ldrh	r3, [r7, #24]
 8002efe:	893a      	ldrh	r2, [r7, #8]
 8002f00:	f7ff ffb6 	bl	8002e70 <u8g2_is_intersection_decision_tree>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <u8g2_IsIntersection+0x38>
    return 0; 
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e00a      	b.n	8002f24 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	897a      	ldrh	r2, [r7, #10]
 8002f1e:	f7ff ffa7 	bl	8002e70 <u8g2_is_intersection_decision_tree>
 8002f22:	4603      	mov	r3, r0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	813b      	strh	r3, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002f4a:	7efb      	ldrb	r3, [r7, #27]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002f56:	7e3a      	ldrb	r2, [r7, #24]
 8002f58:	7efb      	ldrb	r3, [r7, #27]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d801      	bhi.n	8002f76 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002f72:	7e3b      	ldrb	r3, [r7, #24]
 8002f74:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002f80:	7e3b      	ldrb	r3, [r7, #24]
 8002f82:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002f84:	893b      	ldrh	r3, [r7, #8]
 8002f86:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002f88:	8afb      	ldrh	r3, [r7, #22]
 8002f8a:	f023 0307 	bic.w	r3, r3, #7
 8002f8e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	7c1b      	ldrb	r3, [r3, #16]
 8002f96:	461a      	mov	r2, r3
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	fb13 f302 	smulbb	r3, r3, r2
 8002f9e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002fa6:	8afb      	ldrh	r3, [r7, #22]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d117      	bne.n	8002fee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	7ebb      	ldrb	r3, [r7, #26]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	7e7b      	ldrb	r3, [r7, #25]
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
	len--;
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e8      	bne.n	8002fbe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002fec:	e038      	b.n	8003060 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	7ebb      	ldrb	r3, [r7, #26]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	7e7b      	ldrb	r3, [r7, #25]
 8003002:	4053      	eors	r3, r2
 8003004:	b2da      	uxtb	r2, r3
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800300a:	7efb      	ldrb	r3, [r7, #27]
 800300c:	3301      	adds	r3, #1
 800300e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003010:	7efb      	ldrb	r3, [r7, #27]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	76fb      	strb	r3, [r7, #27]
      len--;
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	3b01      	subs	r3, #1
 800301c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800301e:	7efb      	ldrb	r3, [r7, #27]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d114      	bne.n	800304e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003028:	461a      	mov	r2, r3
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003036:	2b01      	cmp	r3, #1
 8003038:	d801      	bhi.n	800303e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003044:	2b01      	cmp	r3, #1
 8003046:	d008      	beq.n	800305a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	767b      	strb	r3, [r7, #25]
 800304c:	e005      	b.n	800305a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800304e:	7ebb      	ldrb	r3, [r7, #26]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003054:	7e7b      	ldrb	r3, [r7, #25]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1c6      	bne.n	8002fee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003060:	bf00      	nop
 8003062:	3724      	adds	r7, #36	@ 0x24
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800308a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	79fa      	ldrb	r2, [r7, #7]
 80030d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ffa9 	bl	800306c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fd84 	bl	8002c28 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003144:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	89fa      	ldrh	r2, [r7, #14]
 8003150:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	7c1b      	ldrb	r3, [r3, #16]
 8003156:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	89fa      	ldrh	r2, [r7, #14]
 8003162:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800316a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	89fa      	ldrh	r2, [r7, #14]
 8003176:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800317e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8003188:	4413      	add	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	7c52      	ldrb	r2, [r2, #17]
 800318e:	4293      	cmp	r3, r2
 8003190:	dd07      	ble.n	80031a2 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	7c5b      	ldrb	r3, [r3, #17]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031a2:	89fb      	ldrh	r3, [r7, #14]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	4413      	add	r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	8a9a      	ldrh	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	8ada      	ldrh	r2, [r3, #22]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	4603      	mov	r3, r0
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe5e 	bl	8002ed6 <u8g2_IsIntersection>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003228:	e03b      	b.n	80032a2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323e:	429a      	cmp	r2, r3
 8003240:	d205      	bcs.n	800324e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800325a:	429a      	cmp	r2, r3
 800325c:	d905      	bls.n	800326a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003276:	429a      	cmp	r2, r3
 8003278:	d205      	bcs.n	8003286 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003292:	429a      	cmp	r2, r3
 8003294:	d905      	bls.n	80032a2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff3c 	bl	8003130 <u8g2_update_dimension_common>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d30a      	bcc.n	800330a <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff65 	bl	80031f0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af02      	add	r7, sp, #8
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	4608      	mov	r0, r1
 8003338:	4611      	mov	r1, r2
 800333a:	461a      	mov	r2, r3
 800333c:	4603      	mov	r3, r0
 800333e:	817b      	strh	r3, [r7, #10]
 8003340:	460b      	mov	r3, r1
 8003342:	813b      	strh	r3, [r7, #8]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800334e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8003350:	8aba      	ldrh	r2, [r7, #20]
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800335e:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8003360:	8afa      	ldrh	r2, [r7, #22]
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8003368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d107      	bne.n	8003380 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8003370:	8abb      	ldrh	r3, [r7, #20]
 8003372:	3b01      	subs	r3, #1
 8003374:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8003376:	8afa      	ldrh	r2, [r7, #22]
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	82fb      	strh	r3, [r7, #22]
 800337e:	e00a      	b.n	8003396 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8003380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8003388:	8afb      	ldrh	r3, [r7, #22]
 800338a:	3b01      	subs	r3, #1
 800338c:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 800338e:	8aba      	ldrh	r2, [r7, #20]
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8003396:	88f8      	ldrh	r0, [r7, #6]
 8003398:	8aba      	ldrh	r2, [r7, #20]
 800339a:	8af9      	ldrh	r1, [r7, #22]
 800339c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fcb7 	bl	8002d18 <u8g2_draw_hv_line_2dir>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <u8x8_ascii_next+0x18>
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	2b0a      	cmp	r3, #10
 80033e4:	d102      	bne.n	80033ec <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80033e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033ea:	e001      	b.n	80033f0 <u8x8_ascii_next+0x22>
  return b;
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	b29b      	uxth	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691c      	ldr	r4, [r3, #16]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	2300      	movs	r3, #0
 8003410:	2120      	movs	r1, #32
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	47a0      	blx	r4
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}

08003420 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	460b      	mov	r3, r1
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691c      	ldr	r4, [r3, #16]
 8003432:	7afa      	ldrb	r2, [r7, #11]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2117      	movs	r1, #23
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	47a0      	blx	r4
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}

08003446 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003452:	1cfb      	adds	r3, r7, #3
 8003454:	461a      	mov	r2, r3
 8003456:	2101      	movs	r1, #1
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffe1 	bl	8003420 <u8x8_byte_SendBytes>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68dc      	ldr	r4, [r3, #12]
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	2300      	movs	r3, #0
 800347c:	2115      	movs	r1, #21
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	47a0      	blx	r4
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bd90      	pop	{r4, r7, pc}

0800348c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68dc      	ldr	r4, [r3, #12]
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	2300      	movs	r3, #0
 80034a0:	2116      	movs	r1, #22
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	47a0      	blx	r4
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}

080034b0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	460b      	mov	r3, r1
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68dc      	ldr	r4, [r3, #12]
 80034c2:	7afa      	ldrb	r2, [r7, #11]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2117      	movs	r1, #23
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	47a0      	blx	r4
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd90      	pop	{r4, r7, pc}

080034d6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80034d6:	b590      	push	{r4, r7, lr}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68dc      	ldr	r4, [r3, #12]
 80034e2:	2300      	movs	r3, #0
 80034e4:	2200      	movs	r2, #0
 80034e6:	2118      	movs	r1, #24
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	47a0      	blx	r4
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68dc      	ldr	r4, [r3, #12]
 8003502:	2300      	movs	r3, #0
 8003504:	2200      	movs	r2, #0
 8003506:	2119      	movs	r1, #25
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	47a0      	blx	r4
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}

08003516 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003516:	b590      	push	{r4, r7, lr}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	73fb      	strb	r3, [r7, #15]
    data++;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003530:	d031      	beq.n	8003596 <u8x8_cad_SendSequence+0x80>
 8003532:	2bfe      	cmp	r3, #254	@ 0xfe
 8003534:	dc3d      	bgt.n	80035b2 <u8x8_cad_SendSequence+0x9c>
 8003536:	2b19      	cmp	r3, #25
 8003538:	dc3b      	bgt.n	80035b2 <u8x8_cad_SendSequence+0x9c>
 800353a:	2b18      	cmp	r3, #24
 800353c:	da23      	bge.n	8003586 <u8x8_cad_SendSequence+0x70>
 800353e:	2b16      	cmp	r3, #22
 8003540:	dc02      	bgt.n	8003548 <u8x8_cad_SendSequence+0x32>
 8003542:	2b15      	cmp	r3, #21
 8003544:	da03      	bge.n	800354e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003546:	e034      	b.n	80035b2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003548:	2b17      	cmp	r3, #23
 800354a:	d00e      	beq.n	800356a <u8x8_cad_SendSequence+0x54>
	return;
 800354c:	e031      	b.n	80035b2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68dc      	ldr	r4, [r3, #12]
 8003558:	7bba      	ldrb	r2, [r7, #14]
 800355a:	7bf9      	ldrb	r1, [r7, #15]
 800355c:	2300      	movs	r3, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	47a0      	blx	r4
	  data++;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	603b      	str	r3, [r7, #0]
	  break;
 8003568:	e022      	b.n	80035b0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003570:	f107 030e 	add.w	r3, r7, #14
 8003574:	461a      	mov	r2, r3
 8003576:	2101      	movs	r1, #1
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff99 	bl	80034b0 <u8x8_cad_SendData>
	  data++;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	603b      	str	r3, [r7, #0]
	  break;
 8003584:	e014      	b.n	80035b0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68dc      	ldr	r4, [r3, #12]
 800358a:	7bf9      	ldrb	r1, [r7, #15]
 800358c:	2300      	movs	r3, #0
 800358e:	2200      	movs	r2, #0
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	47a0      	blx	r4
	  break;
 8003594:	e00c      	b.n	80035b0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	461a      	mov	r2, r3
 80035a0:	2129      	movs	r1, #41	@ 0x29
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9ee 	bl	8003984 <u8x8_gpio_call>
	  data++;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	603b      	str	r3, [r7, #0]
	  break;
 80035ae:	bf00      	nop
    cmd = *data;
 80035b0:	e7b6      	b.n	8003520 <u8x8_cad_SendSequence+0xa>
	return;
 80035b2:	bf00      	nop
    }
  }
}
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
	...

080035bc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	72fb      	strb	r3, [r7, #11]
 80035ca:	4613      	mov	r3, r2
 80035cc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	3b14      	subs	r3, #20
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d82f      	bhi.n	8003636 <u8x8_cad_001+0x7a>
 80035d6:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <u8x8_cad_001+0x20>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003625 	.word	0x08003625
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	08003609 	.word	0x08003609
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	08003625 	.word	0x08003625
 80035f0:	08003625 	.word	0x08003625
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff ff00 	bl	80033fc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80035fc:	7abb      	ldrb	r3, [r7, #10]
 80035fe:	4619      	mov	r1, r3
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff20 	bl	8003446 <u8x8_byte_SendByte>
      break;
 8003606:	e018      	b.n	800363a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003608:	2100      	movs	r1, #0
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fef6 	bl	80033fc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003610:	7abb      	ldrb	r3, [r7, #10]
 8003612:	4619      	mov	r1, r3
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff ff16 	bl	8003446 <u8x8_byte_SendByte>
      break;
 800361a:	e00e      	b.n	800363a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800361c:	2101      	movs	r1, #1
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff feec 	bl	80033fc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691c      	ldr	r4, [r3, #16]
 8003628:	7aba      	ldrb	r2, [r7, #10]
 800362a:	7af9      	ldrb	r1, [r7, #11]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	47a0      	blx	r4
 8003632:	4603      	mov	r3, r0
 8003634:	e002      	b.n	800363c <u8x8_cad_001+0x80>
    default:
      return 0;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <u8x8_cad_001+0x80>
  }
  return 1;
 800363a:	2301      	movs	r3, #1
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}

08003644 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	72fb      	strb	r3, [r7, #11]
 8003652:	4613      	mov	r3, r2
 8003654:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d006      	beq.n	800366a <u8x8_d_st7565_common+0x26>
 800365c:	2b0f      	cmp	r3, #15
 800365e:	dc71      	bgt.n	8003744 <u8x8_d_st7565_common+0x100>
 8003660:	2b0b      	cmp	r3, #11
 8003662:	d050      	beq.n	8003706 <u8x8_d_st7565_common+0xc2>
 8003664:	2b0e      	cmp	r3, #14
 8003666:	d05b      	beq.n	8003720 <u8x8_d_st7565_common+0xdc>
 8003668:	e06c      	b.n	8003744 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff33 	bl	80034d6 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	795b      	ldrb	r3, [r3, #5]
 8003674:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8003676:	7dbb      	ldrb	r3, [r7, #22]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003682:	7dbb      	ldrb	r3, [r7, #22]
 8003684:	4413      	add	r3, r2
 8003686:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003688:	7dbb      	ldrb	r3, [r7, #22]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0310 	orr.w	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	4619      	mov	r1, r3
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff fee6 	bl	8003468 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800369c:	7dbb      	ldrb	r3, [r7, #22]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fede 	bl	8003468 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	799b      	ldrb	r3, [r3, #6]
 80036b0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	4619      	mov	r1, r3
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff fed5 	bl	8003468 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	791b      	ldrb	r3, [r3, #4]
 80036c2:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80036d0:	7dfa      	ldrb	r2, [r7, #23]
 80036d2:	7dbb      	ldrb	r3, [r7, #22]
 80036d4:	4413      	add	r3, r2
 80036d6:	2b84      	cmp	r3, #132	@ 0x84
 80036d8:	d905      	bls.n	80036e6 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80036da:	2384      	movs	r3, #132	@ 0x84
 80036dc:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80036de:	7dfa      	ldrb	r2, [r7, #23]
 80036e0:	7dbb      	ldrb	r3, [r7, #22]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fedf 	bl	80034b0 <u8x8_cad_SendData>
	arg_int--;
 80036f2:	7abb      	ldrb	r3, [r7, #10]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80036f8:	7abb      	ldrb	r3, [r7, #10]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f3      	bne.n	80036e6 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fef9 	bl	80034f6 <u8x8_cad_EndTransfer>
      break;
 8003704:	e020      	b.n	8003748 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003706:	7abb      	ldrb	r3, [r7, #10]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 800370c:	4911      	ldr	r1, [pc, #68]	@ (8003754 <u8x8_d_st7565_common+0x110>)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff ff01 	bl	8003516 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003714:	e018      	b.n	8003748 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8003716:	4910      	ldr	r1, [pc, #64]	@ (8003758 <u8x8_d_st7565_common+0x114>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff fefc 	bl	8003516 <u8x8_cad_SendSequence>
      break;
 800371e:	e013      	b.n	8003748 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fed8 	bl	80034d6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003726:	2181      	movs	r1, #129	@ 0x81
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fe9d 	bl	8003468 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 800372e:	7abb      	ldrb	r3, [r7, #10]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fea8 	bl	800348c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff feda 	bl	80034f6 <u8x8_cad_EndTransfer>
      break;
 8003742:	e001      	b.n	8003748 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8003748:	2301      	movs	r3, #1
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	0800d4c8 	.word	0x0800d4c8
 8003758:	0800d4d0 	.word	0x0800d4d0

0800375c <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	72fb      	strb	r3, [r7, #11]
 800376a:	4613      	mov	r3, r2
 800376c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800376e:	7aba      	ldrb	r2, [r7, #10]
 8003770:	7af9      	ldrb	r1, [r7, #11]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff65 	bl	8003644 <u8x8_d_st7565_common>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d131      	bne.n	80037e4 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	2b0d      	cmp	r3, #13
 8003784:	d013      	beq.n	80037ae <u8x8_d_st7565_64128n+0x52>
 8003786:	2b0d      	cmp	r3, #13
 8003788:	dc2a      	bgt.n	80037e0 <u8x8_d_st7565_64128n+0x84>
 800378a:	2b09      	cmp	r3, #9
 800378c:	d002      	beq.n	8003794 <u8x8_d_st7565_64128n+0x38>
 800378e:	2b0a      	cmp	r3, #10
 8003790:	d005      	beq.n	800379e <u8x8_d_st7565_64128n+0x42>
 8003792:	e025      	b.n	80037e0 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8003794:	4916      	ldr	r1, [pc, #88]	@ (80037f0 <u8x8_d_st7565_64128n+0x94>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f832 	bl	8003800 <u8x8_d_helper_display_setup_memory>
	break;
 800379c:	e022      	b.n	80037e4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f842 	bl	8003828 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80037a4:	4913      	ldr	r1, [pc, #76]	@ (80037f4 <u8x8_d_st7565_64128n+0x98>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff feb5 	bl	8003516 <u8x8_cad_SendSequence>
	break;
 80037ac:	e01a      	b.n	80037e4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80037ae:	7abb      	ldrb	r3, [r7, #10]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80037b4:	4910      	ldr	r1, [pc, #64]	@ (80037f8 <u8x8_d_st7565_64128n+0x9c>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fead 	bl	8003516 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	7c9a      	ldrb	r2, [r3, #18]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80037c8:	e00c      	b.n	80037e4 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80037ca:	490c      	ldr	r1, [pc, #48]	@ (80037fc <u8x8_d_st7565_64128n+0xa0>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fea2 	bl	8003516 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	7cda      	ldrb	r2, [r3, #19]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 80037de:	e001      	b.n	80037e4 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	0800d508 	.word	0x0800d508
 80037f4:	0800d4e8 	.word	0x0800d4e8
 80037f8:	0800d4d8 	.word	0x0800d4d8
 80037fc:	0800d4e0 	.word	0x0800d4e0

08003800 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	7c9a      	ldrb	r2, [r3, #18]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695c      	ldr	r4, [r3, #20]
 8003834:	2300      	movs	r3, #0
 8003836:	2200      	movs	r2, #0
 8003838:	2128      	movs	r1, #40	@ 0x28
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68dc      	ldr	r4, [r3, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	2200      	movs	r2, #0
 8003846:	2114      	movs	r1, #20
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800384c:	2201      	movs	r2, #1
 800384e:	214b      	movs	r1, #75	@ 0x4b
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f897 	bl	8003984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	791b      	ldrb	r3, [r3, #4]
 800385c:	461a      	mov	r2, r3
 800385e:	2129      	movs	r1, #41	@ 0x29
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f88f 	bl	8003984 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	214b      	movs	r1, #75	@ 0x4b
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f88a 	bl	8003984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	791b      	ldrb	r3, [r3, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	2129      	movs	r1, #41	@ 0x29
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f882 	bl	8003984 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003880:	2201      	movs	r2, #1
 8003882:	214b      	movs	r1, #75	@ 0x4b
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f87d 	bl	8003984 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	795b      	ldrb	r3, [r3, #5]
 8003890:	461a      	mov	r2, r3
 8003892:	2129      	movs	r1, #41	@ 0x29
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f875 	bl	8003984 <u8x8_gpio_call>
}    
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd90      	pop	{r4, r7, pc}

080038a2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80038a2:	b590      	push	{r4, r7, lr}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	461a      	mov	r2, r3
 80038b0:	4603      	mov	r3, r0
 80038b2:	70fb      	strb	r3, [r7, #3]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70bb      	strb	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80038c0:	78bb      	ldrb	r3, [r7, #2]
 80038c2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689c      	ldr	r4, [r3, #8]
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	2201      	movs	r2, #1
 80038d6:	210f      	movs	r1, #15
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	47a0      	blx	r4
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}

080038e6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80038e6:	b590      	push	{r4, r7, lr}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689c      	ldr	r4, [r3, #8]
 80038f2:	2300      	movs	r3, #0
 80038f4:	2200      	movs	r2, #0
 80038f6:	2109      	movs	r1, #9
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	47a0      	blx	r4
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}

08003904 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689c      	ldr	r4, [r3, #8]
 8003910:	2300      	movs	r3, #0
 8003912:	2200      	movs	r2, #0
 8003914:	210a      	movs	r1, #10
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003922:	b590      	push	{r4, r7, lr}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689c      	ldr	r4, [r3, #8]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	2300      	movs	r3, #0
 8003936:	210b      	movs	r1, #11
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	47a0      	blx	r4
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}

08003944 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689c      	ldr	r4, [r3, #8]
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	2300      	movs	r3, #0
 8003958:	210e      	movs	r1, #14
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	47a0      	blx	r4
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689c      	ldr	r4, [r3, #8]
 8003972:	2300      	movs	r3, #0
 8003974:	2200      	movs	r2, #0
 8003976:	2110      	movs	r1, #16
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	47a0      	blx	r4
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}

08003984 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
 8003990:	4613      	mov	r3, r2
 8003992:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695c      	ldr	r4, [r3, #20]
 8003998:	78ba      	ldrb	r2, [r7, #2]
 800399a:	78f9      	ldrb	r1, [r7, #3]
 800399c:	2300      	movs	r3, #0
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	47a0      	blx	r4
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}

080039aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	72fb      	strb	r3, [r7, #11]
 80039b8:	4613      	mov	r3, r2
 80039ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a11      	ldr	r2, [pc, #68]	@ (8003a24 <u8x8_SetupDefaults+0x58>)
 80039de:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <u8x8_SetupDefaults+0x58>)
 80039e4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a24 <u8x8_SetupDefaults+0x58>)
 80039ea:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003a24 <u8x8_SetupDefaults+0x58>)
 80039f0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	22ff      	movs	r2, #255	@ 0xff
 8003a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	080039ab 	.word	0x080039ab

08003a28 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ffc8 	bl	80039cc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ff46 	bl	80038e6 <u8x8_SetupMemory>
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b088      	sub	sp, #32
 8003a66:	af04      	add	r7, sp, #16
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8003a84:	7bbb      	ldrb	r3, [r7, #14]
 8003a86:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR      == PIN_INPUT) ? CELL_01_LED_01     : 0;
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8003a94:	7bbb      	ldrb	r3, [r7, #14]
 8003a96:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_02  : 0;
 8003a9c:	7b7b      	ldrb	r3, [r7, #13]
 8003a9e:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? CELL_02_LED_01 	: 0;
 8003aa0:	7b7b      	ldrb	r3, [r7, #13]
 8003aa2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? CELL_03_LED_01 	: 0;
 8003aa4:	7b7b      	ldrb	r3, [r7, #13]
 8003aa6:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? EXPANDER_FAN_CTRL 	: 0;
 8003aa8:	7b7b      	ldrb	r3, [r7, #13]
 8003aaa:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_03	: 0;
 8003aac:	7b7b      	ldrb	r3, [r7, #13]
 8003aae:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_02 : 0;
 8003ab0:	7b7b      	ldrb	r3, [r7, #13]
 8003ab2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_01 : 0;
 8003ab4:	7b7b      	ldrb	r3, [r7, #13]
 8003ab6:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_03 	: 0;
 8003ab8:	7b7b      	ldrb	r3, [r7, #13]
 8003aba:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	2364      	movs	r3, #100	@ 0x64
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	f107 030e 	add.w	r3, r7, #14
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2206      	movs	r2, #6
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f004 feea 	bl	80088b0 <HAL_I2C_Mem_Write>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <Expander_InitPinDirections+0x88>
    {
        return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	e012      	b.n	8003b10 <Expander_InitPinDirections+0xae>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	b299      	uxth	r1, r3
 8003af2:	2364      	movs	r3, #100	@ 0x64
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	2301      	movs	r3, #1
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	f107 030d 	add.w	r3, r7, #13
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2301      	movs	r3, #1
 8003b02:	2207      	movs	r2, #7
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f004 fed3 	bl	80088b0 <HAL_I2C_Mem_Write>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af04      	add	r7, sp, #16
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	70fb      	strb	r3, [r7, #3]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	803b      	strh	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d142      	bne.n	8003bc2 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	b299      	uxth	r1, r3
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	2364      	movs	r3, #100	@ 0x64
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	2301      	movs	r3, #1
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f004 ffa1 	bl	8008aa4 <HAL_I2C_Mem_Read>
 8003b62:	4603      	mov	r3, r0
 8003b64:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <Expander_SetPinState+0x58>
            return status;
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	e073      	b.n	8003c58 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 8003b70:	78bb      	ldrb	r3, [r7, #2]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d106      	bne.n	8003b84 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003b76:	883b      	ldrh	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	7b3b      	ldrb	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	733b      	strb	r3, [r7, #12]
 8003b82:	e009      	b.n	8003b98 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003b84:	883b      	ldrh	r3, [r7, #0]
 8003b86:	b25b      	sxtb	r3, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	b25a      	sxtb	r2, r3
 8003b8c:	7b3b      	ldrb	r3, [r7, #12]
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	4013      	ands	r3, r2
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	b299      	uxth	r1, r3
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	2364      	movs	r3, #100	@ 0x64
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f004 fe7b 	bl	80088b0 <HAL_I2C_Mem_Write>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	e04a      	b.n	8003c58 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8003bc2:	883b      	ldrh	r3, [r7, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d145      	bne.n	8003c56 <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	b299      	uxth	r1, r3
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	2364      	movs	r3, #100	@ 0x64
 8003bdc:	9302      	str	r3, [sp, #8]
 8003bde:	2301      	movs	r3, #1
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f107 030c 	add.w	r3, r7, #12
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2301      	movs	r3, #1
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f004 ff5a 	bl	8008aa4 <HAL_I2C_Mem_Read>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003bf4:	7bbb      	ldrb	r3, [r7, #14]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <Expander_SetPinState+0xe6>
            return status;
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	e02c      	b.n	8003c58 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8003bfe:	883b      	ldrh	r3, [r7, #0]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 8003c06:	78bb      	ldrb	r3, [r7, #2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8003c0c:	7b3a      	ldrb	r2, [r7, #12]
 8003c0e:	7b7b      	ldrb	r3, [r7, #13]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	733b      	strb	r3, [r7, #12]
 8003c16:	e009      	b.n	8003c2c <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 8003c18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	b25a      	sxtb	r2, r3
 8003c20:	7b3b      	ldrb	r3, [r7, #12]
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	4013      	ands	r3, r2
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	b299      	uxth	r1, r3
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	2364      	movs	r3, #100	@ 0x64
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2301      	movs	r3, #1
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f004 fe31 	bl	80088b0 <HAL_I2C_Mem_Write>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003c52:	7bbb      	ldrb	r3, [r7, #14]
 8003c54:	e000      	b.n	8003c58 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
    }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <Expander_InitAllDevices+0x50>)
 8003c6a:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e012      	b.n	8003c9c <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003c76:	f107 0208 	add.w	r2, r7, #8
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff feed 	bl	8003a62 <Expander_InitPinDirections>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <Expander_InitAllDevices+0x36>
        {
            return status;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	e007      	b.n	8003ca6 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3e8      	bcc.n	8003c76 <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	24232221 	.word	0x24232221

08003cb4 <get_cell_control_params>:


// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expander_Address, uint16_t *v_set_pin_01, uint16_t *v_set_pin_02, uint16_t *v_set_pin_03 ,uint16_t *LED_PIN )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b17      	cmp	r3, #23
 8003cc8:	f200 81dc 	bhi.w	8004084 <get_cell_control_params+0x3d0>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <get_cell_control_params+0x20>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d35 	.word	0x08003d35
 8003cd8:	08003d55 	.word	0x08003d55
 8003cdc:	08003d77 	.word	0x08003d77
 8003ce0:	08003d9f 	.word	0x08003d9f
 8003ce4:	08003dbf 	.word	0x08003dbf
 8003ce8:	08003de1 	.word	0x08003de1
 8003cec:	08003e09 	.word	0x08003e09
 8003cf0:	08003e29 	.word	0x08003e29
 8003cf4:	08003e4b 	.word	0x08003e4b
 8003cf8:	08003e73 	.word	0x08003e73
 8003cfc:	08003e93 	.word	0x08003e93
 8003d00:	08003eb5 	.word	0x08003eb5
 8003d04:	08003edd 	.word	0x08003edd
 8003d08:	08003efd 	.word	0x08003efd
 8003d0c:	08003f1f 	.word	0x08003f1f
 8003d10:	08003f47 	.word	0x08003f47
 8003d14:	08003f67 	.word	0x08003f67
 8003d18:	08003f89 	.word	0x08003f89
 8003d1c:	08003fb1 	.word	0x08003fb1
 8003d20:	08003fd1 	.word	0x08003fd1
 8003d24:	08003ff3 	.word	0x08003ff3
 8003d28:	0800401b 	.word	0x0800401b
 8003d2c:	0800403b 	.word	0x0800403b
 8003d30:	0800405d 	.word	0x0800405d
    {

    // for the cell 01 to 12
        case CELL_1:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2221      	movs	r2, #33	@ 0x21
 8003d38:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	801a      	strh	r2, [r3, #0]
            break;
 8003d52:	e1a7      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_2:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2221      	movs	r2, #33	@ 0x21
 8003d58:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d72:	801a      	strh	r2, [r3, #0]
            break;
 8003d74:	e196      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_3:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2221      	movs	r2, #33	@ 0x21
 8003d7a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d82:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d8a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d92:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d9a:	801a      	strh	r2, [r3, #0]
            break;
 8003d9c:	e182      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_4:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2222      	movs	r2, #34	@ 0x22
 8003da2:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2204      	movs	r2, #4
 8003dae:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2208      	movs	r2, #8
 8003db4:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2210      	movs	r2, #16
 8003dba:	801a      	strh	r2, [r3, #0]
            break;
 8003dbc:	e172      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_5:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2222      	movs	r2, #34	@ 0x22
 8003dc2:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2240      	movs	r2, #64	@ 0x40
 8003dce:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ddc:	801a      	strh	r2, [r3, #0]
            break;
 8003dde:	e161      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_6:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2222      	movs	r2, #34	@ 0x22
 8003de4:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dec:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003df4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dfc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e04:	801a      	strh	r2, [r3, #0]
            break;
 8003e06:	e14d      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_7:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2223      	movs	r2, #35	@ 0x23
 8003e0c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2204      	movs	r2, #4
 8003e18:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2210      	movs	r2, #16
 8003e24:	801a      	strh	r2, [r3, #0]
            break;
 8003e26:	e13d      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_8:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2223      	movs	r2, #35	@ 0x23
 8003e2c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2280      	movs	r2, #128	@ 0x80
 8003e32:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2240      	movs	r2, #64	@ 0x40
 8003e38:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e46:	801a      	strh	r2, [r3, #0]
            break;
 8003e48:	e12c      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_9:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2223      	movs	r2, #35	@ 0x23
 8003e4e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e56:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e5e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e66:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e6e:	801a      	strh	r2, [r3, #0]
            break;
 8003e70:	e118      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_10:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2224      	movs	r2, #36	@ 0x24
 8003e76:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2204      	movs	r2, #4
 8003e82:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2208      	movs	r2, #8
 8003e88:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	801a      	strh	r2, [r3, #0]
            break;
 8003e90:	e108      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_11:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2224      	movs	r2, #36	@ 0x24
 8003e96:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2240      	movs	r2, #64	@ 0x40
 8003ea2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb0:	801a      	strh	r2, [r3, #0]
            break;
 8003eb2:	e0f7      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_12:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ec0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ec8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ed0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ed8:	801a      	strh	r2, [r3, #0]
            break;
 8003eda:	e0e3      	b.n	80040a4 <get_cell_control_params+0x3f0>

            // for the cell 12 to 24

        case CELL_13:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2221      	movs	r2, #33	@ 0x21
 8003ee0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2204      	movs	r2, #4
 8003eec:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	801a      	strh	r2, [r3, #0]

            break;
 8003efa:	e0d3      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_14:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2221      	movs	r2, #33	@ 0x21
 8003f00:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2240      	movs	r2, #64	@ 0x40
 8003f0c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2220      	movs	r2, #32
 8003f12:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f1a:	801a      	strh	r2, [r3, #0]

            break;
 8003f1c:	e0c2      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_15:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2221      	movs	r2, #33	@ 0x21
 8003f22:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f2a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f32:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f3a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f42:	801a      	strh	r2, [r3, #0]
            break;
 8003f44:	e0ae      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_16:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2222      	movs	r2, #34	@ 0x22
 8003f4a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2204      	movs	r2, #4
 8003f56:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2210      	movs	r2, #16
 8003f62:	801a      	strh	r2, [r3, #0]
            break;
 8003f64:	e09e      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_17:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2222      	movs	r2, #34	@ 0x22
 8003f6a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f84:	801a      	strh	r2, [r3, #0]
            break;
 8003f86:	e08d      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_18:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2222      	movs	r2, #34	@ 0x22
 8003f8c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f94:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f9c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fa4:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fac:	801a      	strh	r2, [r3, #0]
            break;
 8003fae:	e079      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_19:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2223      	movs	r2, #35	@ 0x23
 8003fb4:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	801a      	strh	r2, [r3, #0]
            break;
 8003fce:	e069      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_20:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2223      	movs	r2, #35	@ 0x23
 8003fd4:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2280      	movs	r2, #128	@ 0x80
 8003fda:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2240      	movs	r2, #64	@ 0x40
 8003fe0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fee:	801a      	strh	r2, [r3, #0]
            break;
 8003ff0:	e058      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_21:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2223      	movs	r2, #35	@ 0x23
 8003ff6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ffe:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004006:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800400e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	801a      	strh	r2, [r3, #0]
            break;
 8004018:	e044      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_22:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2224      	movs	r2, #36	@ 0x24
 800401e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2204      	movs	r2, #4
 800402a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2208      	movs	r2, #8
 8004030:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2210      	movs	r2, #16
 8004036:	801a      	strh	r2, [r3, #0]
            break;
 8004038:	e034      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_23:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2224      	movs	r2, #36	@ 0x24
 800403e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2280      	movs	r2, #128	@ 0x80
 8004044:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2240      	movs	r2, #64	@ 0x40
 800404a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2220      	movs	r2, #32
 8004050:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004058:	801a      	strh	r2, [r3, #0]
            break;
 800405a:	e023      	b.n	80040a4 <get_cell_control_params+0x3f0>

        case CELL_24:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004068:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004070:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004078:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004080:	801a      	strh	r2, [r3, #0]
            break;
 8004082:	e00f      	b.n	80040a4 <get_cell_control_params+0x3f0>



        default:
            // Default to CELL_1 if an invalid cell is specified
            *expander_Address = GPIO_EXPANDER_ID_01;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2221      	movs	r2, #33	@ 0x21
 8004088:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2204      	movs	r2, #4
 8004094:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2208      	movs	r2, #8
 800409a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2210      	movs	r2, #16
 80040a0:	801a      	strh	r2, [r3, #0]
            break;
 80040a2:	bf00      	nop
    }
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08b      	sub	sp, #44	@ 0x2c
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	4603      	mov	r3, r0
 80040b8:	ed87 0a00 	vstr	s0, [r7]
 80040bc:	71fb      	strb	r3, [r7, #7]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b0b      	cmp	r3, #11
 80040c2:	d802      	bhi.n	80040ca <Set_Output_Voltage+0x1a>
        target_i2c = &hi2c2;
 80040c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <Set_Output_Voltage+0xd0>)
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e001      	b.n	80040ce <Set_Output_Voltage+0x1e>
    } else {
        target_i2c = &hi2c3;
 80040ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004184 <Set_Output_Voltage+0xd4>)
 80040cc:	61fb      	str	r3, [r7, #28]
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 80040ce:	23ff      	movs	r3, #255	@ 0xff
 80040d0:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e016      	b.n	8004106 <Set_Output_Voltage+0x56>
        if (default_map[i].voltage == voltage) {
 80040d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004188 <Set_Output_Voltage+0xd8>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	edd3 7a00 	vldr	s15, [r3]
 80040e4:	ed97 7a00 	vldr	s14, [r7]
 80040e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	d106      	bne.n	8004100 <Set_Output_Voltage+0x50>
            mux_channel = default_map[i].mux_channel;
 80040f2:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <Set_Output_Voltage+0xd8>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	76fb      	strb	r3, [r7, #27]
            break;
 80040fe:	e005      	b.n	800410c <Set_Output_Voltage+0x5c>
    for (int i = 0; i < 8; i++) {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b07      	cmp	r3, #7
 800410a:	dde5      	ble.n	80040d8 <Set_Output_Voltage+0x28>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 800410c:	7efb      	ldrb	r3, [r7, #27]
 800410e:	2bff      	cmp	r3, #255	@ 0xff
 8004110:	d032      	beq.n	8004178 <Set_Output_Voltage+0xc8>

    // Convert mux_channel into its 3 select bits.This is use for the Analog mux switch
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8004112:	7efb      	ldrb	r3, [r7, #27]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	74fb      	strb	r3, [r7, #19]
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 800411a:	7efb      	ldrb	r3, [r7, #27]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	74bb      	strb	r3, [r7, #18]
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 8004126:	7efb      	ldrb	r3, [r7, #27]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	747b      	strb	r3, [r7, #17]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN ;
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 8004132:	f107 040c 	add.w	r4, r7, #12
 8004136:	f107 020e 	add.w	r2, r7, #14
 800413a:	f107 0110 	add.w	r1, r7, #16
 800413e:	79f8      	ldrb	r0, [r7, #7]
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	f107 030a 	add.w	r3, r7, #10
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4623      	mov	r3, r4
 800414e:	f7ff fdb1 	bl	8003cb4 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 8004152:	7c39      	ldrb	r1, [r7, #16]
 8004154:	89fa      	ldrh	r2, [r7, #14]
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	69f8      	ldr	r0, [r7, #28]
 800415a:	f7ff fcdd 	bl	8003b18 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 800415e:	7c39      	ldrb	r1, [r7, #16]
 8004160:	89ba      	ldrh	r2, [r7, #12]
 8004162:	7cbb      	ldrb	r3, [r7, #18]
 8004164:	69f8      	ldr	r0, [r7, #28]
 8004166:	f7ff fcd7 	bl	8003b18 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 800416a:	7c39      	ldrb	r1, [r7, #16]
 800416c:	897a      	ldrh	r2, [r7, #10]
 800416e:	7c7b      	ldrb	r3, [r7, #17]
 8004170:	69f8      	ldr	r0, [r7, #28]
 8004172:	f7ff fcd1 	bl	8003b18 <Expander_SetPinState>
 8004176:	e000      	b.n	800417a <Set_Output_Voltage+0xca>
    if (mux_channel == 0xFF) return; // Voltage not found
 8004178:	bf00      	nop
}
 800417a:	3724      	adds	r7, #36	@ 0x24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}
 8004180:	2000134c 	.word	0x2000134c
 8004184:	200013a0 	.word	0x200013a0
 8004188:	20000568 	.word	0x20000568

0800418c <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b089      	sub	sp, #36	@ 0x24
 8004190:	af02      	add	r7, sp, #8
 8004192:	4603      	mov	r3, r0
 8004194:	460a      	mov	r2, r1
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	4613      	mov	r3, r2
 800419a:	71bb      	strb	r3, [r7, #6]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b0b      	cmp	r3, #11
 80041a0:	d802      	bhi.n	80041a8 <Set_LED_status+0x1c>
        target_i2c = &hi2c2;
 80041a2:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <Set_LED_status+0x54>)
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e001      	b.n	80041ac <Set_LED_status+0x20>
    } else {
        target_i2c = &hi2c3;
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <Set_LED_status+0x58>)
 80041aa:	617b      	str	r3, [r7, #20]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN;

    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 80041ac:	f107 040e 	add.w	r4, r7, #14
 80041b0:	f107 0210 	add.w	r2, r7, #16
 80041b4:	f107 0113 	add.w	r1, r7, #19
 80041b8:	79f8      	ldrb	r0, [r7, #7]
 80041ba:	f107 030a 	add.w	r3, r7, #10
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4623      	mov	r3, r4
 80041c8:	f7ff fd74 	bl	8003cb4 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);
 80041cc:	7cf9      	ldrb	r1, [r7, #19]
 80041ce:	897a      	ldrh	r2, [r7, #10]
 80041d0:	79bb      	ldrb	r3, [r7, #6]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff fca0 	bl	8003b18 <Expander_SetPinState>

}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	2000134c 	.word	0x2000134c
 80041e4:	200013a0 	.word	0x200013a0

080041e8 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
 80041f4:	4613      	mov	r3, r2
 80041f6:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 80041f8:	4b17      	ldr	r3, [pc, #92]	@ (8004258 <INA229_writeReg+0x70>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	81bb      	strh	r3, [r7, #12]
 80041fe:	2300      	movs	r3, #0
 8004200:	73bb      	strb	r3, [r7, #14]
    uint8_t rxBuf[3] = {0};
 8004202:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <INA229_writeReg+0x70>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	813b      	strh	r3, [r7, #8]
 8004208:	2300      	movs	r3, #0
 800420a:	72bb      	strb	r3, [r7, #10]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8004214:	883b      	ldrh	r3, [r7, #0]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7f18      	ldrb	r0, [r3, #28]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7f59      	ldrb	r1, [r3, #29]
 800422c:	f107 020c 	add.w	r2, r7, #12
 8004230:	f107 0308 	add.w	r3, r7, #8
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	2203      	movs	r2, #3
 800423a:	f000 f97b 	bl	8004534 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <INA229_writeReg+0x68>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8004244:	883b      	ldrh	r3, [r7, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	82da      	strh	r2, [r3, #22]
    }
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	0800c830 	.word	0x0800c830

0800425c <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7f1b      	ldrb	r3, [r3, #28]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 f957 	bl	800451c <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	2100      	movs	r1, #0
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ffb6 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	885b      	ldrh	r3, [r3, #2]
 8004280:	461a      	mov	r2, r3
 8004282:	2101      	movs	r1, #1
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ffaf 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	889b      	ldrh	r3, [r3, #4]
 800428e:	461a      	mov	r2, r3
 8004290:	2102      	movs	r1, #2
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ffa8 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	88db      	ldrh	r3, [r3, #6]
 800429c:	461a      	mov	r2, r3
 800429e:	2103      	movs	r1, #3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffa1 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	891b      	ldrh	r3, [r3, #8]
 80042aa:	461a      	mov	r2, r3
 80042ac:	210b      	movs	r1, #11
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff9a 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	895b      	ldrh	r3, [r3, #10]
 80042b8:	461a      	mov	r2, r3
 80042ba:	210c      	movs	r1, #12
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff93 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	899b      	ldrh	r3, [r3, #12]
 80042c6:	461a      	mov	r2, r3
 80042c8:	210d      	movs	r1, #13
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff8c 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	89db      	ldrh	r3, [r3, #14]
 80042d4:	461a      	mov	r2, r3
 80042d6:	210e      	movs	r1, #14
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff85 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8a1b      	ldrh	r3, [r3, #16]
 80042e2:	461a      	mov	r2, r3
 80042e4:	210f      	movs	r1, #15
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff7e 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8a5b      	ldrh	r3, [r3, #18]
 80042f0:	461a      	mov	r2, r3
 80042f2:	2110      	movs	r1, #16
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff77 	bl	80041e8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8a9b      	ldrh	r3, [r3, #20]
 80042fe:	461a      	mov	r2, r3
 8004300:	2111      	movs	r1, #17
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff70 	bl	80041e8 <INA229_writeReg>

}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8004310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004314:	b08b      	sub	sp, #44	@ 0x2c
 8004316:	af02      	add	r7, sp, #8
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 800431e:	2300      	movs	r3, #0
 8004320:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	2300      	movs	r3, #0
 8004328:	81bb      	strh	r3, [r7, #12]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b25b      	sxtb	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7f18      	ldrb	r0, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7f59      	ldrb	r1, [r3, #29]
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <INA229_readReg+0xb4>)
 8004346:	5cd3      	ldrb	r3, [r2, r3]
 8004348:	3301      	adds	r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	f107 0610 	add.w	r6, r7, #16
 8004350:	f107 0308 	add.w	r3, r7, #8
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	4633      	mov	r3, r6
 8004358:	f000 f8ec 	bl	8004534 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e01b      	b.n	80043a6 <INA229_readReg+0x96>
    {
        value = (value << 8) | rxBuf[i];
 800436e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	020b      	lsls	r3, r1, #8
 800437c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004380:	0202      	lsls	r2, r0, #8
 8004382:	f107 0008 	add.w	r0, r7, #8
 8004386:	6979      	ldr	r1, [r7, #20]
 8004388:	4401      	add	r1, r0
 800438a:	7809      	ldrb	r1, [r1, #0]
 800438c:	b2c9      	uxtb	r1, r1
 800438e:	2000      	movs	r0, #0
 8004390:	460c      	mov	r4, r1
 8004392:	4605      	mov	r5, r0
 8004394:	ea42 0804 	orr.w	r8, r2, r4
 8004398:	ea43 0905 	orr.w	r9, r3, r5
 800439c:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	4a06      	ldr	r2, [pc, #24]	@ (80043c4 <INA229_readReg+0xb4>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	461a      	mov	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	dddc      	ble.n	800436e <INA229_readReg+0x5e>
    }

    return value;
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	3724      	adds	r7, #36	@ 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043c4:	0800d520 	.word	0x0800d520

080043c8 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 80043d0:	2105      	movs	r1, #5
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff9c 	bl	8004310 <INA229_readReg>
 80043d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 80043dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	0902      	lsrs	r2, r0, #4
 80043ea:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80043ee:	090b      	lsrs	r3, r1, #4
 80043f0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 80043f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80043fc:	f173 0300 	sbcs.w	r3, r3, #0
 8004400:	d30c      	bcc.n	800441c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8004402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004406:	f7fc fc59 	bl	8000cbc <__aeabi_ul2f>
 800440a:	ee07 0a10 	vmov	s14, r0
 800440e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8004480 <INA229_getVBUS_V+0xb8>
 8004412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004416:	edc7 7a05 	vstr	s15, [r7, #20]
 800441a:	e005      	b.n	8004428 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 800441c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004420:	f7fc fc4c 	bl	8000cbc <__aeabi_ul2f>
 8004424:	4603      	mov	r3, r0
 8004426:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8004428:	6978      	ldr	r0, [r7, #20]
 800442a:	f7fc f89d 	bl	8000568 <__aeabi_f2d>
 800442e:	a310      	add	r3, pc, #64	@ (adr r3, 8004470 <INA229_getVBUS_V+0xa8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc f8f0 	bl	8000618 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	a30d      	add	r3, pc, #52	@ (adr r3, 8004478 <INA229_getVBUS_V+0xb0>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fc fa11 	bl	800086c <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	f7fc fb1b 	bl	8000a8c <__aeabi_d2f>
 8004456:	4603      	mov	r3, r0
 8004458:	617b      	str	r3, [r7, #20]

    return data;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	ee07 3a90 	vmov	s15, r3
}
 8004460:	eeb0 0a67 	vmov.f32	s0, s15
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w
 8004470:	00000000 	.word	0x00000000
 8004474:	40686a00 	.word	0x40686a00
 8004478:	00000000 	.word	0x00000000
 800447c:	412e8480 	.word	0x412e8480
 8004480:	49800000 	.word	0x49800000

08004484 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 800448c:	2106      	movs	r1, #6
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff3e 	bl	8004310 <INA229_readReg>
 8004494:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8004498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800449c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80044a0:	f173 0300 	sbcs.w	r3, r3, #0
 80044a4:	d30c      	bcc.n	80044c0 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 80044a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044aa:	f7fc fc07 	bl	8000cbc <__aeabi_ul2f>
 80044ae:	ee07 0a10 	vmov	s14, r0
 80044b2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004510 <INA229_getDIETEMP_C+0x8c>
 80044b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ba:	edc7 7a05 	vstr	s15, [r7, #20]
 80044be:	e005      	b.n	80044cc <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 80044c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c4:	f7fc fbfa 	bl	8000cbc <__aeabi_ul2f>
 80044c8:	4603      	mov	r3, r0
 80044ca:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7fc f84b 	bl	8000568 <__aeabi_f2d>
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <INA229_getDIETEMP_C+0x90>)
 80044d8:	f7fc f89e 	bl	8000618 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <INA229_getDIETEMP_C+0x94>)
 80044ea:	f7fc f9bf 	bl	800086c <__aeabi_ddiv>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	f7fc fac9 	bl	8000a8c <__aeabi_d2f>
 80044fa:	4603      	mov	r3, r0
 80044fc:	617b      	str	r3, [r7, #20]

    return data;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	ee07 3a90 	vmov	s15, r3
}
 8004504:	eeb0 0a67 	vmov.f32	s0, s15
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	47800000 	.word	0x47800000
 8004514:	401f4000 	.word	0x401f4000
 8004518:	408f4000 	.word	0x408f4000

0800451c <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4603      	mov	r3, r0
 800453e:	71fb      	strb	r3, [r7, #7]
 8004540:	460b      	mov	r3, r1
 8004542:	71bb      	strb	r3, [r7, #6]
 8004544:	4613      	mov	r3, r2
 8004546:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 8004552:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <mcu_spiTransfer+0x5c>)
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	e007      	b.n	8004568 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d102      	bne.n	8004564 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <mcu_spiTransfer+0x60>)
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e001      	b.n	8004568 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 8004564:	2301      	movs	r3, #1
 8004566:	e00f      	b.n	8004588 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 8004568:	797b      	ldrb	r3, [r7, #5]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	9200      	str	r2, [sp, #0]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f006 f834 	bl	800a5e4 <HAL_SPI_TransmitReceive>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200013f4 	.word	0x200013f4
 8004594:	2000144c 	.word	0x2000144c

08004598 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	e044      	b.n	8004634 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	4613      	mov	r3, r2
 80045ae:	019b      	lsls	r3, r3, #6
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	220c      	movs	r2, #12
 80045bc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	4613      	mov	r3, r2
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	2204      	movs	r2, #4
 80045d2:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	4613      	mov	r3, r2
 80045da:	019b      	lsls	r3, r3, #6
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	4413      	add	r3, r2
 80045e6:	2206      	movs	r2, #6
 80045e8:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	4613      	mov	r3, r2
 80045f0:	019b      	lsls	r3, r3, #6
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	2204      	movs	r2, #4
 80045fe:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	4613      	mov	r3, r2
 8004606:	019b      	lsls	r3, r3, #6
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4413      	add	r3, r2
 8004612:	2202      	movs	r2, #2
 8004614:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	4613      	mov	r3, r2
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	461a      	mov	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4413      	add	r3, r2
 8004628:	2203      	movs	r2, #3
 800462a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	3301      	adds	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	429a      	cmp	r2, r3
 800463a:	d3b6      	bcc.n	80045aa <LTC6811_init_reg_limits+0x12>
    }
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	6039      	str	r1, [r7, #0]
 8004654:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f976 	bl	800494c <LTC681x_wrcfg>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	460b      	mov	r3, r1
 8004674:	71bb      	strb	r3, [r7, #6]
 8004676:	4613      	mov	r3, r2
 8004678:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD, DCP, CH);
 800467a:	797a      	ldrb	r2, [r7, #5]
 800467c:	79b9      	ldrb	r1, [r7, #6]
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f9e1 	bl	8004a48 <LTC681x_adcv>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <LTC6811_rdcv>:
 */
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	603a      	str	r2, [r7, #0]
 8004698:	71fb      	strb	r3, [r7, #7]
 800469a:	460b      	mov	r3, r1
 800469c:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 80046a2:	79b9      	ldrb	r1, [r7, #6]
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f9f8 	bl	8004a9e <LTC681x_rdcv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <LTC6811_pollAdc>:
    return (LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
    return (LTC681x_pollAdc());
 80046c0:	f000 fb6e 	bl	8004da0 <LTC681x_pollAdc>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	bd80      	pop	{r7, pc}

080046ca <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	6039      	str	r1, [r7, #0]
 80046d4:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd88 	bl	80051f0 <LTC681x_reset_crc_count>
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fdeb 	bl	80052d4 <LTC681x_init_cfg>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b088      	sub	sp, #32
 800470a:	af06      	add	r7, sp, #24
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
 8004716:	460b      	mov	r3, r1
 8004718:	71bb      	strb	r3, [r7, #6]
 800471a:	4613      	mov	r3, r2
 800471c:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800471e:	7979      	ldrb	r1, [r7, #5]
 8004720:	79ba      	ldrb	r2, [r7, #6]
 8004722:	79f8      	ldrb	r0, [r7, #7]
 8004724:	8c3b      	ldrh	r3, [r7, #32]
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	8bbb      	ldrh	r3, [r7, #28]
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	460b      	mov	r3, r1
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	f000 fe00 	bl	8005340 <LTC681x_set_cfgr>
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <wakeup_sleep>:
 * @param parameters   :  Total number of BMS ICs
 * @return Value       :  none
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
    int i;
    for (i = 0; i < total_ic; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e00c      	b.n	8004772 <wakeup_sleep+0x2a>
    {
        cs_low();
 8004758:	f001 f890 	bl	800587c <cs_low>
        delay_time_us(160);
 800475c:	20a0      	movs	r0, #160	@ 0xa0
 800475e:	f001 f8b5 	bl	80058cc <delay_time_us>
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 8004762:	f001 f89f 	bl	80058a4 <cs_high>
        delay_time_us(18);
 8004766:	2012      	movs	r0, #18
 8004768:	f001 f8b0 	bl	80058cc <delay_time_us>
    for (i = 0; i < total_ic; i++)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	429a      	cmp	r2, r3
 8004778:	dbee      	blt.n	8004758 <wakeup_sleep+0x10>
//        HAL_Delay(2500);
    }
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <cmd_68>:
 * @brief Description  :  Generic function to write 68xx commands. Function calculates PEC for tx_cmd data.
 * @param parameters   :  transmit commands
 * @return Value       :  none
 */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = tx_cmd[0];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	723b      	strb	r3, [r7, #8]
    cmd[1] = tx_cmd[1];
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	785b      	ldrb	r3, [r3, #1]
 8004796:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc(2, cmd);
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4619      	mov	r1, r3
 800479e:	2002      	movs	r0, #2
 80047a0:	f000 f8a2 	bl	80048e8 <pec15_calc>
 80047a4:	4603      	mov	r3, r0
 80047a6:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	72fb      	strb	r3, [r7, #11]

    cs_low();
 80047b8:	f001 f860 	bl	800587c <cs_low>
    spi_write_array(4, cmd);
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	4619      	mov	r1, r3
 80047c2:	2004      	movs	r0, #4
 80047c4:	f001 f89e 	bl	8005904 <spi_write_array>
    cs_high();
 80047c8:	f001 f86c 	bl	80058a4 <cs_high>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 80047e2:	2306      	movs	r3, #6
 80047e4:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3304      	adds	r3, #4
 80047ee:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 80047f0:	7efb      	ldrb	r3, [r7, #27]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f007 fb34 	bl	800be60 <malloc>
 80047f8:	4603      	mov	r3, r0
 80047fa:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3301      	adds	r3, #1
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	7852      	ldrb	r2, [r2, #1]
 800480c:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 800480e:	6979      	ldr	r1, [r7, #20]
 8004810:	2002      	movs	r0, #2
 8004812:	f000 f869 	bl	80048e8 <pec15_calc>
 8004816:	4603      	mov	r3, r0
 8004818:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800481a:	8a7b      	ldrh	r3, [r7, #18]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	b29a      	uxth	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	3302      	adds	r3, #2
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	3303      	adds	r3, #3
 800482c:	8a7a      	ldrh	r2, [r7, #18]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8004832:	2304      	movs	r3, #4
 8004834:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	77bb      	strb	r3, [r7, #30]
 800483a:	e042      	b.n	80048c2 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800483c:	2300      	movs	r3, #0
 800483e:	777b      	strb	r3, [r7, #29]
 8004840:	e016      	b.n	8004870 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8004842:	7fbb      	ldrb	r3, [r7, #30]
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	461a      	mov	r2, r3
 8004850:	7f7b      	ldrb	r3, [r7, #29]
 8004852:	4413      	add	r3, r2
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	441a      	add	r2, r3
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	6979      	ldr	r1, [r7, #20]
 800485e:	440b      	add	r3, r1
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 8004864:	7ffb      	ldrb	r3, [r7, #31]
 8004866:	3301      	adds	r3, #1
 8004868:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800486a:	7f7b      	ldrb	r3, [r7, #29]
 800486c:	3301      	adds	r3, #1
 800486e:	777b      	strb	r3, [r7, #29]
 8004870:	7f7a      	ldrb	r2, [r7, #29]
 8004872:	7f3b      	ldrb	r3, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d3e4      	bcc.n	8004842 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 8004878:	7fbb      	ldrb	r3, [r7, #30]
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	441a      	add	r2, r3
 800488a:	7f3b      	ldrb	r3, [r7, #28]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f82a 	bl	80048e8 <pec15_calc>
 8004894:	4603      	mov	r3, r0
 8004896:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 8004898:	8a3b      	ldrh	r3, [r7, #16]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	b299      	uxth	r1, r3
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	b2ca      	uxtb	r2, r1
 80048a6:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80048a8:	7ffb      	ldrb	r3, [r7, #31]
 80048aa:	3301      	adds	r3, #1
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4413      	add	r3, r2
 80048b0:	8a3a      	ldrh	r2, [r7, #16]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	3302      	adds	r3, #2
 80048ba:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80048bc:	7fbb      	ldrb	r3, [r7, #30]
 80048be:	3b01      	subs	r3, #1
 80048c0:	77bb      	strb	r3, [r7, #30]
 80048c2:	7fbb      	ldrb	r3, [r7, #30]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1b9      	bne.n	800483c <write_68+0x68>
    }

    cs_low();
 80048c8:	f000 ffd8 	bl	800587c <cs_low>
    spi_write_array(CMD_LEN, cmd);
 80048cc:	7efb      	ldrb	r3, [r7, #27]
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 f817 	bl	8005904 <spi_write_array>
    cs_high();
 80048d6:	f000 ffe5 	bl	80058a4 <cs_high>

    free(cmd);
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f007 fac8 	bl	800be70 <free>
}
 80048e0:	bf00      	nop
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 80048f4:	2310      	movs	r3, #16
 80048f6:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 80048f8:	2300      	movs	r3, #0
 80048fa:	737b      	strb	r3, [r7, #13]
 80048fc:	e017      	b.n	800492e <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	b29b      	uxth	r3, r3
 8004904:	7b7a      	ldrb	r2, [r7, #13]
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	440a      	add	r2, r1
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	4053      	eors	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	b29a      	uxth	r2, r3
 800491a:	897b      	ldrh	r3, [r7, #10]
 800491c:	490a      	ldr	r1, [pc, #40]	@ (8004948 <pec15_calc+0x60>)
 800491e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004922:	b29b      	uxth	r3, r3
 8004924:	4053      	eors	r3, r2
 8004926:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8004928:	7b7b      	ldrb	r3, [r7, #13]
 800492a:	3301      	adds	r3, #1
 800492c:	737b      	strb	r3, [r7, #13]
 800492e:	7b7a      	ldrb	r2, [r7, #13]
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	d3e3      	bcc.n	80048fe <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8004936:	89fb      	ldrh	r3, [r7, #14]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	0800d5c8 	.word	0x0800d5c8

0800494c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b0c4      	sub	sp, #272	@ 0x110
 8004950:	af00      	add	r7, sp, #0
 8004952:	4602      	mov	r2, r0
 8004954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004958:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004962:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004966:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 8004968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800496c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800497c:	2300      	movs	r3, #0
 800497e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004982:	e047      	b.n	8004a14 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 8004984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004988:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 8004996:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800499a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800499e:	e00b      	b.n	80049b8 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 80049a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049a4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80049be:	e020      	b.n	8004a02 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80049c0:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80049c4:	4613      	mov	r3, r2
 80049c6:	019b      	lsls	r3, r3, #6
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	461a      	mov	r2, r3
 80049ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1899      	adds	r1, r3, r2
 80049da:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80049de:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80049e2:	5c89      	ldrb	r1, [r1, r2]
 80049e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80049e8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80049ec:	54d1      	strb	r1, [r2, r3]
            write_count++;
 80049ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80049f2:	3301      	adds	r3, #1
 80049f4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 80049f8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80049fc:	3301      	adds	r3, #1
 80049fe:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004a02:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d9da      	bls.n	80049c0 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a0a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a18:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a1c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3ae      	bcc.n	8004984 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8004a26:	f107 0208 	add.w	r2, r7, #8
 8004a2a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8004a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a32:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fecb 	bl	80047d4 <write_68>
}
 8004a3e:	bf00      	nop
 8004a40:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
 8004a52:	460b      	mov	r3, r1
 8004a54:	71bb      	strb	r3, [r7, #6]
 8004a56:	4613      	mov	r3, r2
 8004a58:	717b      	strb	r3, [r7, #5]
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	105b      	asrs	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x02;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	733b      	strb	r3, [r7, #12]
    md_bits = (MD & 0x01) << 7;
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	01db      	lsls	r3, r3, #7
 8004a72:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8004a74:	79bb      	ldrb	r3, [r7, #6]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	797b      	ldrb	r3, [r7, #5]
 8004a82:	4413      	add	r3, r2
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	3360      	adds	r3, #96	@ 0x60
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	737b      	strb	r3, [r7, #13]

    cmd_68(cmd);
 8004a8c:	f107 030c 	add.w	r3, r7, #12
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fe77 	bl	8004784 <cmd_68>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <LTC681x_rdcv>:
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 8004a9e:	b5b0      	push	{r4, r5, r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af02      	add	r7, sp, #8
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	603a      	str	r2, [r7, #0]
 8004aa8:	71fb      	strb	r3, [r7, #7]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
    uint8_t *cell_data;
    uint8_t c_ic = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75bb      	strb	r3, [r7, #22]
    uint8_t cell_reg;
    int current_ic;
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8004ab6:	79bb      	ldrb	r3, [r7, #6]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4618      	mov	r0, r3
 8004abc:	f007 f9d0 	bl	800be60 <malloc>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d14c      	bne.n	8004b64 <LTC681x_rdcv+0xc6>
    {
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004aca:	2301      	movs	r3, #1
 8004acc:	757b      	strb	r3, [r7, #21]
 8004ace:	e042      	b.n	8004b56 <LTC681x_rdcv+0xb8>
        {
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8004ad0:	79b9      	ldrb	r1, [r7, #6]
 8004ad2:	7d7b      	ldrb	r3, [r7, #21]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f897 	bl	8004c0a <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e032      	b.n	8004b48 <LTC681x_rdcv+0xaa>
            {
                if (ic->isospi_reverse == false)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <LTC681x_rdcv+0x54>
                {
                    c_ic = current_ic;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	75bb      	strb	r3, [r7, #22]
 8004af0:	e006      	b.n	8004b00 <LTC681x_rdcv+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	79ba      	ldrb	r2, [r7, #6]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	b2d8      	uxtb	r0, r3
                                                    &ic[c_ic].cells.c_codes[0],
 8004b04:	7dba      	ldrb	r2, [r7, #22]
 8004b06:	4613      	mov	r3, r2
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	461a      	mov	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b14:	f103 041e 	add.w	r4, r3, #30
                                                    &ic[c_ic].cells.pec_match[0]);;
 8004b18:	7dba      	ldrb	r2, [r7, #22]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	461a      	mov	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b28:	3342      	adds	r3, #66	@ 0x42
 8004b2a:	7d79      	ldrb	r1, [r7, #21]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4623      	mov	r3, r4
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f000 f8c5 	bl	8004cc0 <parse_cells>
 8004b36:	4603      	mov	r3, r0
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3301      	adds	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	79bb      	ldrb	r3, [r7, #6]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dbc8      	blt.n	8004ae2 <LTC681x_rdcv+0x44>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004b50:	7d7b      	ldrb	r3, [r7, #21]
 8004b52:	3301      	adds	r3, #1
 8004b54:	757b      	strb	r3, [r7, #21]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8004b5c:	7d7a      	ldrb	r2, [r7, #21]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d9b6      	bls.n	8004ad0 <LTC681x_rdcv+0x32>
 8004b62:	e044      	b.n	8004bee <LTC681x_rdcv+0x150>
        }
    }

    else
    {
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8004b64:	79b9      	ldrb	r1, [r7, #6]
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f84d 	bl	8004c0a <LTC681x_rdcv_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	e037      	b.n	8004be6 <LTC681x_rdcv+0x148>
        {
            if (ic->isospi_reverse == false)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <LTC681x_rdcv+0xe8>
            {
                c_ic = current_ic;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	75bb      	strb	r3, [r7, #22]
 8004b84:	e006      	b.n	8004b94 <LTC681x_rdcv+0xf6>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	79ba      	ldrb	r2, [r7, #6]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = pec_error
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	b2d8      	uxtb	r0, r3
 8004b98:	7dbb      	ldrb	r3, [r7, #22]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	189c      	adds	r4, r3, r2
                                  &ic[c_ic].cells.c_codes[0],
 8004ba2:	7dba      	ldrb	r2, [r7, #22]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	019b      	lsls	r3, r3, #6
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004bb2:	f103 051e 	add.w	r5, r3, #30
                                  &ic[c_ic].cells.pec_match[0]);;
 8004bb6:	7dba      	ldrb	r2, [r7, #22]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	019b      	lsls	r3, r3, #6
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004bc6:	3342      	adds	r3, #66	@ 0x42
 8004bc8:	79f9      	ldrb	r1, [r7, #7]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	462b      	mov	r3, r5
 8004bce:	4622      	mov	r2, r4
 8004bd0:	f000 f876 	bl	8004cc0 <parse_cells>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	4413      	add	r3, r2
 8004bdc:	b2db      	uxtb	r3, r3
            pec_error = pec_error
 8004bde:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3301      	adds	r3, #1
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	79bb      	ldrb	r3, [r7, #6]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	dbc3      	blt.n	8004b76 <LTC681x_rdcv+0xd8>
        }
    }
    LTC681x_check_pec(total_ic, CELL, ic);
 8004bee:	79bb      	ldrb	r3, [r7, #6]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f915 	bl	8004e24 <LTC681x_check_pec>
    free(cell_data);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f007 f938 	bl	800be70 <free>

    return (pec_error);
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bdb0      	pop	{r4, r5, r7, pc}

08004c0a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	4603      	mov	r3, r0
 8004c12:	603a      	str	r2, [r7, #0]
 8004c14:	71fb      	strb	r3, [r7, #7]
 8004c16:	460b      	mov	r3, r1
 8004c18:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //1: RDCVA
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d104      	bne.n	8004c2e <LTC681x_rdcv_reg+0x24>
    {
        cmd[1] = 0x04;
 8004c24:	2304      	movs	r3, #4
 8004c26:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	723b      	strb	r3, [r7, #8]
 8004c2c:	e026      	b.n	8004c7c <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 2) //2: RDCVB
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d104      	bne.n	8004c3e <LTC681x_rdcv_reg+0x34>
    {
        cmd[1] = 0x06;
 8004c34:	2306      	movs	r3, #6
 8004c36:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	723b      	strb	r3, [r7, #8]
 8004c3c:	e01e      	b.n	8004c7c <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 3) //3: RDCVC
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d104      	bne.n	8004c4e <LTC681x_rdcv_reg+0x44>
    {
        cmd[1] = 0x08;
 8004c44:	2308      	movs	r3, #8
 8004c46:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	723b      	strb	r3, [r7, #8]
 8004c4c:	e016      	b.n	8004c7c <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 4) //4: RDCVD
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d104      	bne.n	8004c5e <LTC681x_rdcv_reg+0x54>
    {
        cmd[1] = 0x0A;
 8004c54:	230a      	movs	r3, #10
 8004c56:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	723b      	strb	r3, [r7, #8]
 8004c5c:	e00e      	b.n	8004c7c <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 5) //4: RDCVE
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d104      	bne.n	8004c6e <LTC681x_rdcv_reg+0x64>
    {
        cmd[1] = 0x09;
 8004c64:	2309      	movs	r3, #9
 8004c66:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	723b      	strb	r3, [r7, #8]
 8004c6c:	e006      	b.n	8004c7c <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 6) //4: RDCVF
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d103      	bne.n	8004c7c <LTC681x_rdcv_reg+0x72>
    {
        cmd[1] = 0x0B;
 8004c74:	230b      	movs	r3, #11
 8004c76:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 8004c7c:	f107 0308 	add.w	r3, r7, #8
 8004c80:	4619      	mov	r1, r3
 8004c82:	2002      	movs	r0, #2
 8004c84:	f7ff fe30 	bl	80048e8 <pec15_calc>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004c96:	89bb      	ldrh	r3, [r7, #12]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004c9c:	f000 fdee 	bl	800587c <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	79ba      	ldrb	r2, [r7, #6]
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	f107 0008 	add.w	r0, r7, #8
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	2104      	movs	r1, #4
 8004cb0:	f000 fe4c 	bl	800594c <spi_write_read>
    cs_high();
 8004cb4:	f000 fdf6 	bl	80058a4 <cs_high>
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60ba      	str	r2, [r7, #8]
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	4603      	mov	r3, r0
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	73bb      	strb	r3, [r7, #14]
    const uint8_t BYT_IN_REG = 6;
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	773b      	strb	r3, [r7, #28]
    const uint8_t CELL_IN_REG = 3;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	76fb      	strb	r3, [r7, #27]
    int8_t pec_error = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	77fb      	strb	r3, [r7, #31]
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	77bb      	strb	r3, [r7, #30]
    uint8_t current_cell;

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	777b      	strb	r3, [r7, #29]
 8004ce8:	e01f      	b.n	8004d2a <parse_cells+0x6a>
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
 8004cea:	7fbb      	ldrb	r3, [r7, #30]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8004cf4:	7fbb      	ldrb	r3, [r7, #30]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	b29b      	uxth	r3, r3
        parsed_cell = cell_data[data_counter]
 8004d02:	440b      	add	r3, r1
 8004d04:	82bb      	strh	r3, [r7, #20]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8004d06:	7f7a      	ldrb	r2, [r7, #29]
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	7ef9      	ldrb	r1, [r7, #27]
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4413      	add	r3, r2
 8004d1a:	8aba      	ldrh	r2, [r7, #20]
 8004d1c:	801a      	strh	r2, [r3, #0]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8004d1e:	7fbb      	ldrb	r3, [r7, #30]
 8004d20:	3302      	adds	r3, #2
 8004d22:	77bb      	strb	r3, [r7, #30]
    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004d24:	7f7b      	ldrb	r3, [r7, #29]
 8004d26:	3301      	adds	r3, #1
 8004d28:	777b      	strb	r3, [r7, #29]
 8004d2a:	7f7a      	ldrb	r2, [r7, #29]
 8004d2c:	7efb      	ldrb	r3, [r7, #27]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d3db      	bcc.n	8004cea <parse_cells+0x2a>
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004d32:	7fbb      	ldrb	r3, [r7, #30]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	4413      	add	r3, r2
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	b21a      	sxth	r2, r3
 8004d3e:	7fbb      	ldrb	r3, [r7, #30]
 8004d40:	3301      	adds	r3, #1
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	440b      	add	r3, r1
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	833b      	strh	r3, [r7, #24]
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	441a      	add	r2, r3
 8004d5a:	7f3b      	ldrb	r3, [r7, #28]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fdc2 	bl	80048e8 <pec15_calc>
 8004d64:	4603      	mov	r3, r0
 8004d66:	82fb      	strh	r3, [r7, #22]

    if (received_pec != data_pec)
 8004d68:	8b3a      	ldrh	r2, [r7, #24]
 8004d6a:	8afb      	ldrh	r3, [r7, #22]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d008      	beq.n	8004d82 <parse_cells+0xc2>
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8004d70:	2301      	movs	r3, #1
 8004d72:	77fb      	strb	r3, [r7, #31]
        ic_pec[cell_reg - 1] = 1;
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d7a:	4413      	add	r3, r2
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e005      	b.n	8004d8e <parse_cells+0xce>
    }
    else
    {
        ic_pec[cell_reg - 1] = 0;
 8004d82:	7bbb      	ldrb	r3, [r7, #14]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d88:	4413      	add	r3, r2
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
    }
    data_counter = data_counter + 2;
 8004d8e:	7fbb      	ldrb	r3, [r7, #30]
 8004d90:	3302      	adds	r3, #2
 8004d92:	77bb      	strb	r3, [r7, #30]

    return (pec_error);
 8004d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <LTC681x_pollAdc>:
    return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
    uint32_t counter = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
    uint8_t finished = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	72fb      	strb	r3, [r7, #11]
    uint8_t current_time = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = 0x07;
 8004db2:	2307      	movs	r3, #7
 8004db4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x14;
 8004db6:	2314      	movs	r3, #20
 8004db8:	717b      	strb	r3, [r7, #5]
    cmd_pec = pec15_calc(2, cmd);
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	2002      	movs	r0, #2
 8004dc0:	f7ff fd92 	bl	80048e8 <pec15_calc>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	813b      	strh	r3, [r7, #8]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	71bb      	strb	r3, [r7, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8004dd2:	893b      	ldrh	r3, [r7, #8]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	71fb      	strb	r3, [r7, #7]

    cs_low();
 8004dd8:	f000 fd50 	bl	800587c <cs_low>
    spi_write_array(4, cmd);
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	2004      	movs	r0, #4
 8004de2:	f000 fd8f 	bl	8005904 <spi_write_array>
    while ((counter < 400000) && (finished == 0))
 8004de6:	e00d      	b.n	8004e04 <LTC681x_pollAdc+0x64>
    {
        current_time = spi_read_byte(0xFF);
 8004de8:	20ff      	movs	r0, #255	@ 0xff
 8004dea:	f000 fdeb 	bl	80059c4 <spi_read_byte>
 8004dee:	4603      	mov	r3, r0
 8004df0:	72bb      	strb	r3, [r7, #10]
        if (current_time > 0)
 8004df2:	7abb      	ldrb	r3, [r7, #10]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <LTC681x_pollAdc+0x5e>
        {
            finished = 1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	72fb      	strb	r3, [r7, #11]
 8004dfc:	e002      	b.n	8004e04 <LTC681x_pollAdc+0x64>

        }
        else
        {
            counter = counter + 10;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	330a      	adds	r3, #10
 8004e02:	60fb      	str	r3, [r7, #12]
    while ((counter < 400000) && (finished == 0))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a06      	ldr	r2, [pc, #24]	@ (8004e20 <LTC681x_pollAdc+0x80>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d802      	bhi.n	8004e12 <LTC681x_pollAdc+0x72>
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ea      	beq.n	8004de8 <LTC681x_pollAdc+0x48>
        }
    }
    cs_high();
 8004e12:	f000 fd47 	bl	80058a4 <cs_high>

    return ((uint32_t)current_time);
 8004e16:	7abb      	ldrb	r3, [r7, #10]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	00061a7f 	.word	0x00061a7f

08004e24 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
        uint8_t reg, //Type of Register
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	603a      	str	r2, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
 8004e30:	460b      	mov	r3, r1
 8004e32:	71bb      	strb	r3, [r7, #6]
    int current_ic;
    int i;
    switch (reg)
 8004e34:	79bb      	ldrb	r3, [r7, #6]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	f200 81d3 	bhi.w	80051e2 <LTC681x_check_pec+0x3be>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <LTC681x_check_pec+0x20>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e59 	.word	0x08004e59
 8004e48:	08004f85 	.word	0x08004f85
 8004e4c:	0800504f 	.word	0x0800504f
 8004e50:	08005119 	.word	0x08005119
 8004e54:	08004eef 	.word	0x08004eef
    {
    case CFGR:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e042      	b.n	8004ee4 <LTC681x_check_pec+0xc0>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4613      	mov	r3, r2
 8004e62:	019b      	lsls	r3, r3, #6
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].config.rx_pec_match;
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	019b      	lsls	r3, r3, #6
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	7b9b      	ldrb	r3, [r3, #14]
 8004e84:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	461a      	mov	r2, r3
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004e96:	180a      	adds	r2, r1, r0
 8004e98:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004e9a:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	019b      	lsls	r3, r3, #6
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4413      	add	r3, r2
 8004eae:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].config.rx_pec_match;
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	7b9b      	ldrb	r3, [r3, #14]
 8004ec4:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004ed6:	180a      	adds	r2, r1, r0
 8004ed8:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004eda:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	dbb8      	blt.n	8004e5e <LTC681x_check_pec+0x3a>
        }
        break;
 8004eec:	e17a      	b.n	80051e4 <LTC681x_check_pec+0x3c0>

    case CFGRB:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e042      	b.n	8004f7a <LTC681x_check_pec+0x156>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	461a      	mov	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].configb.rx_pec_match;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4413      	add	r3, r2
 8004f18:	7f5b      	ldrb	r3, [r3, #29]
 8004f1a:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	019b      	lsls	r3, r3, #6
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004f2c:	180a      	adds	r2, r1, r0
 8004f2e:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004f30:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4613      	mov	r3, r2
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].configb.rx_pec_match;
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	7f5b      	ldrb	r3, [r3, #29]
 8004f5a:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004f6c:	180a      	adds	r2, r1, r0
 8004f6e:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004f70:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	dbb8      	blt.n	8004ef4 <LTC681x_check_pec+0xd0>
        }
        break;
 8004f82:	e12f      	b.n	80051e4 <LTC681x_check_pec+0x3c0>
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e05c      	b.n	8005044 <LTC681x_check_pec+0x220>
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	e04f      	b.n	8005030 <LTC681x_check_pec+0x20c>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4613      	mov	r3, r2
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3342      	adds	r3, #66	@ 0x42
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	019b      	lsls	r3, r3, #6
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4413      	add	r3, r2
                                + ic[current_ic].cells.pec_match[i];
 8004fce:	180a      	adds	r2, r1, r0
 8004fd0:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8004fd2:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3360      	adds	r3, #96	@ 0x60
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	8959      	ldrh	r1, [r3, #10]
                                + ic[current_ic].cells.pec_match[i];
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	441a      	add	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4413      	add	r3, r2
 8005004:	3342      	adds	r3, #66	@ 0x42
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
                ic[current_ic].crc_count.cell_pec[i] =
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	461a      	mov	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	441a      	add	r2, r3
                                + ic[current_ic].cells.pec_match[i];
 800501a:	180b      	adds	r3, r1, r0
 800501c:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.cell_pec[i] =
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3360      	adds	r3, #96	@ 0x60
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	460a      	mov	r2, r1
 8005028:	815a      	strh	r2, [r3, #10]
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3301      	adds	r3, #1
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4293      	cmp	r3, r2
 800503c:	dba8      	blt.n	8004f90 <LTC681x_check_pec+0x16c>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	429a      	cmp	r2, r3
 800504a:	db9e      	blt.n	8004f8a <LTC681x_check_pec+0x166>
            }
        }
        break;
 800504c:	e0ca      	b.n	80051e4 <LTC681x_check_pec+0x3c0>
    case AUX:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e05c      	b.n	800510e <LTC681x_check_pec+0x2ea>
        {
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8005054:	2300      	movs	r3, #0
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	e04f      	b.n	80050fa <LTC681x_check_pec+0x2d6>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4613      	mov	r3, r2
 800505e:	019b      	lsls	r3, r3, #6
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	4413      	add	r3, r2
 800506a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + (ic[current_ic].aux.pec_match[i]);
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	019b      	lsls	r3, r3, #6
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	461a      	mov	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	441a      	add	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	3360      	adds	r3, #96	@ 0x60
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4613      	mov	r3, r2
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	461a      	mov	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4413      	add	r3, r2
                                + (ic[current_ic].aux.pec_match[i]);
 8005098:	180a      	adds	r2, r1, r0
 800509a:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 800509c:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.aux_pec[i] =
                        ic[current_ic].crc_count.aux_pec[i]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4613      	mov	r3, r2
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	461a      	mov	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	441a      	add	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3368      	adds	r3, #104	@ 0x68
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	88d9      	ldrh	r1, [r3, #6]
                                + (ic[current_ic].aux.pec_match[i]);
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	441a      	add	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	3360      	adds	r3, #96	@ 0x60
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
                ic[current_ic].crc_count.aux_pec[i] =
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	441a      	add	r2, r3
                                + (ic[current_ic].aux.pec_match[i]);
 80050e4:	180b      	adds	r3, r1, r0
 80050e6:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.aux_pec[i] =
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3368      	adds	r3, #104	@ 0x68
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	460a      	mov	r2, r1
 80050f2:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4293      	cmp	r3, r2
 8005106:	dba8      	blt.n	800505a <LTC681x_check_pec+0x236>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	429a      	cmp	r2, r3
 8005114:	db9e      	blt.n	8005054 <LTC681x_check_pec+0x230>
            }
        }

        break;
 8005116:	e065      	b.n	80051e4 <LTC681x_check_pec+0x3c0>
    case STAT:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e05c      	b.n	80051d8 <LTC681x_check_pec+0x3b4>
        {

            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	e04f      	b.n	80051c4 <LTC681x_check_pec+0x3a0>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4413      	add	r3, r2
 8005134:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].stat.pec_match[i];
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4613      	mov	r3, r2
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	461a      	mov	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	441a      	add	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4413      	add	r3, r2
 800514c:	3371      	adds	r3, #113	@ 0x71
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	019b      	lsls	r3, r3, #6
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4413      	add	r3, r2
                                + ic[current_ic].stat.pec_match[i];
 8005162:	180a      	adds	r2, r1, r0
 8005164:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8005166:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.stat_pec[i] =
                        ic[current_ic].crc_count.stat_pec[i]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	019b      	lsls	r3, r3, #6
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	461a      	mov	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	441a      	add	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	336c      	adds	r3, #108	@ 0x6c
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	4413      	add	r3, r2
 8005182:	88d9      	ldrh	r1, [r3, #6]
                                + ic[current_ic].stat.pec_match[i];
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	461a      	mov	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	441a      	add	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4413      	add	r3, r2
 8005198:	3371      	adds	r3, #113	@ 0x71
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
                ic[current_ic].crc_count.stat_pec[i] =
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4613      	mov	r3, r2
 80051a2:	019b      	lsls	r3, r3, #6
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	461a      	mov	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	441a      	add	r2, r3
                                + ic[current_ic].stat.pec_match[i];
 80051ae:	180b      	adds	r3, r1, r0
 80051b0:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.stat_pec[i] =
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	336c      	adds	r3, #108	@ 0x6c
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	460a      	mov	r2, r1
 80051bc:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80051ca:	3b01      	subs	r3, #1
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	dba8      	blt.n	8005124 <LTC681x_check_pec+0x300>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	429a      	cmp	r2, r3
 80051de:	db9e      	blt.n	800511e <LTC681x_check_pec+0x2fa>
            }
        }
        break;
 80051e0:	e000      	b.n	80051e4 <LTC681x_check_pec+0x3c0>
    default:
        break;
 80051e2:	bf00      	nop
    }
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	e05d      	b.n	80052be <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4613      	mov	r3, r2
 8005206:	019b      	lsls	r3, r3, #6
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	461a      	mov	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	4413      	add	r3, r2
 8005212:	2200      	movs	r2, #0
 8005214:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	461a      	mov	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4413      	add	r3, r2
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e010      	b.n	8005256 <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	461a      	mov	r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3360      	adds	r3, #96	@ 0x60
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	2200      	movs	r2, #0
 800524e:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b05      	cmp	r3, #5
 800525a:	ddeb      	ble.n	8005234 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e010      	b.n	8005284 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4613      	mov	r3, r2
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	461a      	mov	r2, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3368      	adds	r3, #104	@ 0x68
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	2200      	movs	r2, #0
 800527c:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b03      	cmp	r3, #3
 8005288:	ddeb      	ble.n	8005262 <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e010      	b.n	80052b2 <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	461a      	mov	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	336c      	adds	r3, #108	@ 0x6c
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	2200      	movs	r2, #0
 80052aa:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	ddeb      	ble.n	8005290 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	db9d      	blt.n	8005202 <LTC681x_reset_crc_count+0x12>
        }
    }
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e021      	b.n	800532a <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	73bb      	strb	r3, [r7, #14]
 80052ea:	e00d      	b.n	8005308 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	4613      	mov	r3, r2
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	461a      	mov	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	441a      	add	r2, r3
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	2100      	movs	r1, #0
 8005300:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	3301      	adds	r3, #1
 8005306:	73bb      	strb	r3, [r7, #14]
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d9ee      	bls.n	80052ec <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	4613      	mov	r3, r2
 8005312:	019b      	lsls	r3, r3, #6
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	461a      	mov	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4413      	add	r3, r2
 800531e:	2200      	movs	r2, #0
 8005320:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	3301      	adds	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	429a      	cmp	r2, r3
 8005330:	d3d9      	bcc.n	80052e6 <LTC681x_init_cfg+0x12>
    }
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6039      	str	r1, [r7, #0]
 8005348:	4611      	mov	r1, r2
 800534a:	461a      	mov	r2, r3
 800534c:	4603      	mov	r3, r0
 800534e:	71fb      	strb	r3, [r7, #7]
 8005350:	460b      	mov	r3, r1
 8005352:	71bb      	strb	r3, [r7, #6]
 8005354:	4613      	mov	r3, r2
 8005356:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 8005358:	79ba      	ldrb	r2, [r7, #6]
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f828 	bl	80053b4 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 8005364:	797a      	ldrb	r2, [r7, #5]
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f85e 	bl	800542c <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f894 	bl	80054a4 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f8e6 	bl	8005554 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f97f 	bl	8005692 <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 8005394:	8bba      	ldrh	r2, [r7, #28]
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f9d1 	bl	8005742 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 80053a0:	8c3a      	ldrh	r2, [r7, #32]
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fa1b 	bl	80057e2 <LTC681x_set_cfgr_ov>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	6039      	str	r1, [r7, #0]
 80053be:	71fb      	strb	r3, [r7, #7]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71bb      	strb	r3, [r7, #6]
    if (refon)
 80053c4:	79bb      	ldrb	r3, [r7, #6]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 80053ca:	79fa      	ldrb	r2, [r7, #7]
 80053cc:	4613      	mov	r3, r2
 80053ce:	019b      	lsls	r3, r3, #6
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	461a      	mov	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	7819      	ldrb	r1, [r3, #0]
 80053dc:	79fa      	ldrb	r2, [r7, #7]
 80053de:	4613      	mov	r3, r2
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	461a      	mov	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	f041 0204 	orr.w	r2, r1, #4
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 80053f4:	e014      	b.n	8005420 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 80053f6:	79fa      	ldrb	r2, [r7, #7]
 80053f8:	4613      	mov	r3, r2
 80053fa:	019b      	lsls	r3, r3, #6
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	461a      	mov	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	4413      	add	r3, r2
 8005406:	7819      	ldrb	r1, [r3, #0]
 8005408:	79fa      	ldrb	r2, [r7, #7]
 800540a:	4613      	mov	r3, r2
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	461a      	mov	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4413      	add	r3, r2
 8005418:	f021 0204 	bic.w	r2, r1, #4
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	71fb      	strb	r3, [r7, #7]
 8005438:	4613      	mov	r3, r2
 800543a:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 800543c:	79bb      	ldrb	r3, [r7, #6]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d015      	beq.n	800546e <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8005442:	79fa      	ldrb	r2, [r7, #7]
 8005444:	4613      	mov	r3, r2
 8005446:	019b      	lsls	r3, r3, #6
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	461a      	mov	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4413      	add	r3, r2
 8005452:	7819      	ldrb	r1, [r3, #0]
 8005454:	79fa      	ldrb	r2, [r7, #7]
 8005456:	4613      	mov	r3, r2
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	461a      	mov	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4413      	add	r3, r2
 8005464:	f041 0201 	orr.w	r2, r1, #1
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 800546c:	e014      	b.n	8005498 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 800546e:	79fa      	ldrb	r2, [r7, #7]
 8005470:	4613      	mov	r3, r2
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	461a      	mov	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	4413      	add	r3, r2
 800547e:	7819      	ldrb	r1, [r3, #0]
 8005480:	79fa      	ldrb	r2, [r7, #7]
 8005482:	4613      	mov	r3, r2
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	461a      	mov	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4413      	add	r3, r2
 8005490:	f021 0201 	bic.w	r2, r1, #1
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e043      	b.n	8005540 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01c      	beq.n	80054fe <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	4613      	mov	r3, r2
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4413      	add	r3, r2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3303      	adds	r3, #3
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	4613      	mov	r3, r2
 80054ec:	019b      	lsls	r3, r3, #6
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 80054f8:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e01d      	b.n	800553a <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	4613      	mov	r3, r2
 8005502:	019b      	lsls	r3, r3, #6
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	461a      	mov	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	3303      	adds	r3, #3
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	b25b      	sxtb	r3, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	b25b      	sxtb	r3, r3
 8005522:	4013      	ands	r3, r2
 8005524:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	4613      	mov	r3, r2
 800552a:	019b      	lsls	r3, r3, #6
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8005536:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005538:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3301      	adds	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b04      	cmp	r3, #4
 8005544:	ddb8      	ble.n	80054b8 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e041      	b.n	80055ec <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	4613      	mov	r3, r2
 8005578:	019b      	lsls	r3, r3, #6
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4413      	add	r3, r2
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	b25a      	sxtb	r2, r3
 8005588:	2101      	movs	r1, #1
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	b25b      	sxtb	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b259      	sxtb	r1, r3
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	4613      	mov	r3, r2
 800559a:	019b      	lsls	r3, r3, #6
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	b2ca      	uxtb	r2, r1
 80055a8:	711a      	strb	r2, [r3, #4]
 80055aa:	e01c      	b.n	80055e6 <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	4613      	mov	r3, r2
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4413      	add	r3, r2
 80055bc:	791b      	ldrb	r3, [r3, #4]
 80055be:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 80055c0:	2101      	movs	r1, #1
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	4013      	ands	r3, r2
 80055d0:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	4613      	mov	r3, r2
 80055d6:	019b      	lsls	r3, r3, #6
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80055e2:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80055e4:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	3301      	adds	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b07      	cmp	r3, #7
 80055f0:	ddba      	ble.n	8005568 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e042      	b.n	800567e <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	3308      	adds	r3, #8
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01b      	beq.n	800563e <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8005606:	7bfa      	ldrb	r2, [r7, #15]
 8005608:	4613      	mov	r3, r2
 800560a:	019b      	lsls	r3, r3, #6
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4413      	add	r3, r2
 8005616:	795b      	ldrb	r3, [r3, #5]
 8005618:	b25a      	sxtb	r2, r3
 800561a:	2101      	movs	r1, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	b25b      	sxtb	r3, r3
 8005624:	4313      	orrs	r3, r2
 8005626:	b259      	sxtb	r1, r3
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	4613      	mov	r3, r2
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4413      	add	r3, r2
 8005638:	b2ca      	uxtb	r2, r1
 800563a:	715a      	strb	r2, [r3, #5]
 800563c:	e01c      	b.n	8005678 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	4613      	mov	r3, r2
 8005642:	019b      	lsls	r3, r3, #6
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	461a      	mov	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4413      	add	r3, r2
 800564e:	795b      	ldrb	r3, [r3, #5]
 8005650:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8005652:	2101      	movs	r1, #1
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	b25b      	sxtb	r3, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	b25b      	sxtb	r3, r3
 8005660:	4013      	ands	r3, r2
 8005662:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	4613      	mov	r3, r2
 8005668:	019b      	lsls	r3, r3, #6
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8005674:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005676:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3301      	adds	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b03      	cmp	r3, #3
 8005682:	ddb9      	ble.n	80055f8 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	4603      	mov	r3, r0
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e043      	b.n	800572e <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01c      	beq.n	80056ec <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056b2:	7bfa      	ldrb	r2, [r7, #15]
 80056b4:	4613      	mov	r3, r2
 80056b6:	019b      	lsls	r3, r3, #6
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4413      	add	r3, r2
 80056c2:	795b      	ldrb	r3, [r3, #5]
 80056c4:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3304      	adds	r3, #4
 80056ca:	2101      	movs	r1, #1
 80056cc:	fa01 f303 	lsl.w	r3, r1, r3
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	4313      	orrs	r3, r2
 80056d4:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	4613      	mov	r3, r2
 80056da:	019b      	lsls	r3, r3, #6
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	461a      	mov	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 80056e6:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056e8:	715a      	strb	r2, [r3, #5]
 80056ea:	e01d      	b.n	8005728 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	4613      	mov	r3, r2
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4413      	add	r3, r2
 80056fc:	795b      	ldrb	r3, [r3, #5]
 80056fe:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3304      	adds	r3, #4
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b25b      	sxtb	r3, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	b25b      	sxtb	r3, r3
 8005710:	4013      	ands	r3, r2
 8005712:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	4613      	mov	r3, r2
 8005718:	019b      	lsls	r3, r3, #6
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	461a      	mov	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8005724:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005726:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3301      	adds	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b03      	cmp	r3, #3
 8005732:	ddb8      	ble.n	80056a6 <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	6039      	str	r1, [r7, #0]
 800574c:	71fb      	strb	r3, [r7, #7]
 800574e:	4613      	mov	r3, r2
 8005750:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 8005752:	88bb      	ldrh	r3, [r7, #4]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 800575c:	79fa      	ldrb	r2, [r7, #7]
 800575e:	4613      	mov	r3, r2
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	461a      	mov	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	4413      	add	r3, r2
 800576c:	89fa      	ldrh	r2, [r7, #14]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 8005772:	79fa      	ldrb	r2, [r7, #7]
 8005774:	4613      	mov	r3, r2
 8005776:	019b      	lsls	r3, r3, #6
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	461a      	mov	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4413      	add	r3, r2
 8005782:	7899      	ldrb	r1, [r3, #2]
 8005784:	79fa      	ldrb	r2, [r7, #7]
 8005786:	4613      	mov	r3, r2
 8005788:	019b      	lsls	r3, r3, #6
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	461a      	mov	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	4413      	add	r3, r2
 8005794:	f021 020f 	bic.w	r2, r1, #15
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	4613      	mov	r3, r2
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	461a      	mov	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	789b      	ldrb	r3, [r3, #2]
 80057ae:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 80057b0:	89fb      	ldrh	r3, [r7, #14]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	b25b      	sxtb	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057c2:	79fa      	ldrb	r2, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	019b      	lsls	r3, r3, #6
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	461a      	mov	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 80057d2:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057d4:	709a      	strb	r2, [r3, #2]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	4603      	mov	r3, r0
 80057ea:	6039      	str	r1, [r7, #0]
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 80057f2:	88bb      	ldrh	r3, [r7, #4]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 80057f8:	89fb      	ldrh	r3, [r7, #14]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	b299      	uxth	r1, r3
 80057fe:	79fa      	ldrb	r2, [r7, #7]
 8005800:	4613      	mov	r3, r2
 8005802:	019b      	lsls	r3, r3, #6
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	461a      	mov	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	4413      	add	r3, r2
 800580e:	b2ca      	uxtb	r2, r1
 8005810:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8005812:	79fa      	ldrb	r2, [r7, #7]
 8005814:	4613      	mov	r3, r2
 8005816:	019b      	lsls	r3, r3, #6
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	461a      	mov	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	4413      	add	r3, r2
 8005822:	7899      	ldrb	r1, [r3, #2]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4613      	mov	r3, r2
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	461a      	mov	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4413      	add	r3, r2
 8005834:	f001 020f 	and.w	r2, r1, #15
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800583c:	79fa      	ldrb	r2, [r7, #7]
 800583e:	4613      	mov	r3, r2
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	461a      	mov	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4413      	add	r3, r2
 800584c:	789b      	ldrb	r3, [r3, #2]
 800584e:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	b25b      	sxtb	r3, r3
 8005856:	4313      	orrs	r3, r2
 8005858:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	4613      	mov	r3, r2
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	461a      	mov	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 800586a:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800586c:	709a      	strb	r2, [r3, #2]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005886:	4805      	ldr	r0, [pc, #20]	@ (800589c <cs_low+0x20>)
 8005888:	f002 fe82 	bl	8008590 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 800588c:	2201      	movs	r2, #1
 800588e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005892:	4803      	ldr	r0, [pc, #12]	@ (80058a0 <cs_low+0x24>)
 8005894:	f002 fe7c 	bl	8008590 <HAL_GPIO_WritePin>


}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40020400 	.word	0x40020400
 80058a0:	40020c00 	.word	0x40020c00

080058a4 <cs_high>:

void cs_high() {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058ae:	4805      	ldr	r0, [pc, #20]	@ (80058c4 <cs_high+0x20>)
 80058b0:	f002 fe6e 	bl	8008590 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 80058b4:	2201      	movs	r2, #1
 80058b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058ba:	4803      	ldr	r0, [pc, #12]	@ (80058c8 <cs_high+0x24>)
 80058bc:	f002 fe68 	bl	8008590 <HAL_GPIO_WritePin>


}
 80058c0:	bf00      	nop
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40020400 	.word	0x40020400
 80058c8:	40020c00 	.word	0x40020c00

080058cc <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	60bb      	str	r3, [r7, #8]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e003      	b.n	80058ec <delay_time_us+0x20>
			time_delay_count++) {
		__NOP();
 80058e4:	bf00      	nop
			time_delay_count++) {
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d3f7      	bcc.n	80058e4 <delay_time_us+0x18>
	}
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e00f      	b.n	8005936 <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	18d1      	adds	r1, r2, r3
 800591c:	2314      	movs	r3, #20
 800591e:	2201      	movs	r2, #1
 8005920:	4809      	ldr	r0, [pc, #36]	@ (8005948 <spi_write_array+0x44>)
 8005922:	f004 fc02 	bl	800a12a <HAL_SPI_Transmit>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 800592c:	f001 fa8b 	bl	8006e46 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	3301      	adds	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
 8005936:	7bfa      	ldrb	r2, [r7, #15]
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	429a      	cmp	r2, r3
 800593c:	d3eb      	bcc.n	8005916 <spi_write_array+0x12>
		}
	}

}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200014fc 	.word	0x200014fc

0800594c <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	461a      	mov	r2, r3
 8005958:	460b      	mov	r3, r1
 800595a:	72fb      	strb	r3, [r7, #11]
 800595c:	4613      	mov	r3, r2
 800595e:	72bb      	strb	r3, [r7, #10]
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8005960:	7afb      	ldrb	r3, [r7, #11]
 8005962:	b29a      	uxth	r2, r3
 8005964:	2314      	movs	r3, #20
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	4812      	ldr	r0, [pc, #72]	@ (80059b4 <spi_write_read+0x68>)
 800596a:	f004 fbde 	bl	800a12a <HAL_SPI_Transmit>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <spi_write_read+0x6c>)
 8005974:	701a      	strb	r2, [r3, #0]
	rx_len_local = rx_len;
 8005976:	4a11      	ldr	r2, [pc, #68]	@ (80059bc <spi_write_read+0x70>)
 8005978:	7abb      	ldrb	r3, [r7, #10]
 800597a:	7013      	strb	r3, [r2, #0]
	if (status_spi_out != HAL_OK) {
 800597c:	4b0e      	ldr	r3, [pc, #56]	@ (80059b8 <spi_write_read+0x6c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <spi_write_read+0x3c>

		Error_Handler();
 8005984:	f001 fa5f 	bl	8006e46 <Error_Handler>
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 8005988:	7abb      	ldrb	r3, [r7, #10]
 800598a:	b29a      	uxth	r2, r3
 800598c:	2314      	movs	r3, #20
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4808      	ldr	r0, [pc, #32]	@ (80059b4 <spi_write_read+0x68>)
 8005992:	f004 fd0e 	bl	800a3b2 <HAL_SPI_Receive>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	4b09      	ldr	r3, [pc, #36]	@ (80059c0 <spi_write_read+0x74>)
 800599c:	701a      	strb	r2, [r3, #0]
	if (status_spi_in != HAL_OK) {
 800599e:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <spi_write_read+0x74>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <spi_write_read+0x5e>

		Error_Handler();
 80059a6:	f001 fa4e 	bl	8006e46 <Error_Handler>
	}

}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200014fc 	.word	0x200014fc
 80059b8:	20001215 	.word	0x20001215
 80059bc:	20001214 	.word	0x20001214
 80059c0:	20001216 	.word	0x20001216

080059c4 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 80059ce:	f107 020f 	add.w	r2, r7, #15
 80059d2:	1df9      	adds	r1, r7, #7
 80059d4:	2314      	movs	r3, #20
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2301      	movs	r3, #1
 80059da:	4806      	ldr	r0, [pc, #24]	@ (80059f4 <spi_read_byte+0x30>)
 80059dc:	f004 fe02 	bl	800a5e4 <HAL_SPI_TransmitReceive>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <spi_read_byte+0x26>
		Error_Handler();
 80059e6:	f001 fa2e 	bl	8006e46 <Error_Handler>
	}
	return (data);
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200014fc 	.word	0x200014fc

080059f8 <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	int8_t error = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	717b      	strb	r3, [r7, #5]
	wakeup_sleep(TOTAL_IC);
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7fe fea0 	bl	8004748 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8005a08:	2302      	movs	r3, #2
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fe2a 	bl	8004668 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8005a14:	f7fe fe52 	bl	80046bc <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8005a18:	2002      	movs	r0, #2
 8005a1a:	f7fe fe95 	bl	8004748 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <cell_voltage_read+0x90>)
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fe32 	bl	800468e <LTC6811_rdcv>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	717b      	strb	r3, [r7, #5]
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8005a2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d121      	bne.n	8005a7c <cell_voltage_read+0x84>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005a38:	2300      	movs	r3, #0
 8005a3a:	71bb      	strb	r3, [r7, #6]
 8005a3c:	e01b      	b.n	8005a76 <cell_voltage_read+0x7e>
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005a3e:	2300      	movs	r3, #0
 8005a40:	71fb      	strb	r3, [r7, #7]
 8005a42:	e00f      	b.n	8005a64 <cell_voltage_read+0x6c>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8005a44:	79ba      	ldrb	r2, [r7, #6]
 8005a46:	79f9      	ldrb	r1, [r7, #7]
 8005a48:	480f      	ldr	r0, [pc, #60]	@ (8005a88 <cell_voltage_read+0x90>)
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	440b      	add	r3, r1
 8005a54:	330c      	adds	r3, #12
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4403      	add	r3, r0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	80da      	strh	r2, [r3, #6]
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	3301      	adds	r3, #1
 8005a62:	71fb      	strb	r3, [r7, #7]
 8005a64:	4b08      	ldr	r3, [pc, #32]	@ (8005a88 <cell_voltage_read+0x90>)
 8005a66:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005a6a:	79fa      	ldrb	r2, [r7, #7]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3e9      	bcc.n	8005a44 <cell_voltage_read+0x4c>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	3301      	adds	r3, #1
 8005a74:	71bb      	strb	r3, [r7, #6]
 8005a76:	79bb      	ldrb	r3, [r7, #6]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d9e0      	bls.n	8005a3e <cell_voltage_read+0x46>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
 8005a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000ffc 	.word	0x20000ffc

08005a8c <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	1dfb      	adds	r3, r7, #7
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	21df      	movs	r1, #223	@ 0xdf
 8005aa6:	4848      	ldr	r0, [pc, #288]	@ (8005bc8 <RTC_Init+0x13c>)
 8005aa8:	f002 fffc 	bl	8008aa4 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	9302      	str	r3, [sp, #8]
 8005abc:	2301      	movs	r3, #1
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	21df      	movs	r1, #223	@ 0xdf
 8005aca:	483f      	ldr	r0, [pc, #252]	@ (8005bc8 <RTC_Init+0x13c>)
 8005acc:	f002 fef0 	bl	80088b0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	f001 feb5 	bl	8007840 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	9302      	str	r3, [sp, #8]
 8005adc:	2301      	movs	r3, #1
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	1dfb      	adds	r3, r7, #7
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	21df      	movs	r1, #223	@ 0xdf
 8005aea:	4837      	ldr	r0, [pc, #220]	@ (8005bc8 <RTC_Init+0x13c>)
 8005aec:	f002 ffda 	bl	8008aa4 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f043 0308 	orr.w	r3, r3, #8
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	2301      	movs	r3, #1
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	1dfb      	adds	r3, r7, #7
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	21df      	movs	r1, #223	@ 0xdf
 8005b0e:	482e      	ldr	r0, [pc, #184]	@ (8005bc8 <RTC_Init+0x13c>)
 8005b10:	f002 fece 	bl	80088b0 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	1dfb      	adds	r3, r7, #7
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	2301      	movs	r3, #1
 8005b24:	2200      	movs	r2, #0
 8005b26:	21df      	movs	r1, #223	@ 0xdf
 8005b28:	4827      	ldr	r0, [pc, #156]	@ (8005bc8 <RTC_Init+0x13c>)
 8005b2a:	f002 ffbb 	bl	8008aa4 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	9302      	str	r3, [sp, #8]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	1dfb      	adds	r3, r7, #7
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	2301      	movs	r3, #1
 8005b48:	2200      	movs	r2, #0
 8005b4a:	21df      	movs	r1, #223	@ 0xdf
 8005b4c:	481e      	ldr	r0, [pc, #120]	@ (8005bc8 <RTC_Init+0x13c>)
 8005b4e:	f002 feaf 	bl	80088b0 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	1dfb      	adds	r3, r7, #7
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2301      	movs	r3, #1
 8005b62:	2203      	movs	r2, #3
 8005b64:	21df      	movs	r1, #223	@ 0xdf
 8005b66:	4818      	ldr	r0, [pc, #96]	@ (8005bc8 <RTC_Init+0x13c>)
 8005b68:	f002 ff9c 	bl	8008aa4 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ed      	beq.n	8005b52 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	9302      	str	r3, [sp, #8]
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	2301      	movs	r3, #1
 8005b86:	2203      	movs	r2, #3
 8005b88:	21df      	movs	r1, #223	@ 0xdf
 8005b8a:	480f      	ldr	r0, [pc, #60]	@ (8005bc8 <RTC_Init+0x13c>)
 8005b8c:	f002 ff8a 	bl	8008aa4 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d011      	beq.n	8005bbe <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	9302      	str	r3, [sp, #8]
 8005baa:	2301      	movs	r3, #1
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	1dfb      	adds	r3, r7, #7
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	21df      	movs	r1, #223	@ 0xdf
 8005bb8:	4803      	ldr	r0, [pc, #12]	@ (8005bc8 <RTC_Init+0x13c>)
 8005bba:	f002 fe79 	bl	80088b0 <HAL_I2C_Mem_Write>
    }
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200012f8 	.word	0x200012f8

08005bcc <RS485_ProcessMessage>:
            current_message.data[current_message.length++] = byte;
        }
    }
}

void RS485_ProcessMessage(void) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
    count_1 = 1;
 8005bd2:	4b35      	ldr	r3, [pc, #212]	@ (8005ca8 <RS485_ProcessMessage+0xdc>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
    HAL_Delay(1000);
 8005bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005bdc:	f001 fe30 	bl	8007840 <HAL_Delay>

    if (current_message.data[0] == 0x04) {
 8005be0:	4b32      	ldr	r3, [pc, #200]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d15a      	bne.n	8005c9e <RS485_ProcessMessage+0xd2>
        count_1 = 2;
 8005be8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca8 <RS485_ProcessMessage+0xdc>)
 8005bea:	2202      	movs	r2, #2
 8005bec:	601a      	str	r2, [r3, #0]
        HAL_Delay(1000);
 8005bee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005bf2:	f001 fe25 	bl	8007840 <HAL_Delay>

        uint8_t num_sequences = current_message.data[1];
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	76fb      	strb	r3, [r7, #27]
        int current_pos = 1;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
        current_message.length = 10 ;
 8005c00:	4b2a      	ldr	r3, [pc, #168]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005c02:	220a      	movs	r2, #10
 8005c04:	841a      	strh	r2, [r3, #32]

        for (int i=0;i<current_message.length;i++){
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	e042      	b.n	8005c92 <RS485_ProcessMessage+0xc6>
//            float volt = (float)current_message.data[current_pos++];
//            int id_LED = current_message.data[current_pos++];
//            int LED_State = current_message.data[current_pos++];
//            int time = current_message.data[current_pos++];

          int  header = 0xAA ;
 8005c0c:	23aa      	movs	r3, #170	@ 0xaa
 8005c0e:	613b      	str	r3, [r7, #16]
            int command = 0x01;
 8005c10:	2301      	movs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]

            int id = 4 ;
 8005c14:	2304      	movs	r3, #4
 8005c16:	60bb      	str	r3, [r7, #8]
            float volt = 2;
 8005c18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c1c:	607b      	str	r3, [r7, #4]

            if (current_message.data[0] == 0x04) {
 8005c1e:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d132      	bne.n	8005c8c <RS485_ProcessMessage+0xc0>
                switch (current_message.data[1]) {
 8005c26:	4b21      	ldr	r3, [pc, #132]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d82d      	bhi.n	8005c8c <RS485_ProcessMessage+0xc0>
 8005c30:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <RS485_ProcessMessage+0x6c>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c67 	.word	0x08005c67
 8005c40:	08005c8d 	.word	0x08005c8d
 8005c44:	08005c77 	.word	0x08005c77
                    case 0x01:
                        Set_Output_Voltage(id, volt);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fa2d 	bl	80040b0 <Set_Output_Voltage>
                        count_1 = 3;
 8005c56:	4b14      	ldr	r3, [pc, #80]	@ (8005ca8 <RS485_ProcessMessage+0xdc>)
 8005c58:	2203      	movs	r2, #3
 8005c5a:	601a      	str	r2, [r3, #0]
                        HAL_Delay(1000);
 8005c5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c60:	f001 fdee 	bl	8007840 <HAL_Delay>

                        break;
 8005c64:	e012      	b.n	8005c8c <RS485_ProcessMessage+0xc0>
                    case 0x02:
//                        Set_LED_status(id_LED, LED_State);
                        count_1 = 4;
 8005c66:	4b10      	ldr	r3, [pc, #64]	@ (8005ca8 <RS485_ProcessMessage+0xdc>)
 8005c68:	2204      	movs	r2, #4
 8005c6a:	601a      	str	r2, [r3, #0]
                        HAL_Delay(1000);
 8005c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c70:	f001 fde6 	bl	8007840 <HAL_Delay>
                        break;
 8005c74:	e00a      	b.n	8005c8c <RS485_ProcessMessage+0xc0>
                    case 0x03:
//                        HAL_Delay(time);
                        break;
                    case 0x04: {
                        Get_INA_Voltage(&cell_configs[id]);
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb0 <RS485_ProcessMessage+0xe4>)
 8005c82:	4413      	add	r3, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f99b 	bl	8005fc0 <Get_INA_Voltage>
                        // You'll need to store float properly – not just one byte
                        break;
 8005c8a:	bf00      	nop
        for (int i=0;i<current_message.length;i++){
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <RS485_ProcessMessage+0xe0>)
 8005c94:	8c1b      	ldrh	r3, [r3, #32]
 8005c96:	461a      	mov	r2, r3
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	dbb6      	blt.n	8005c0c <RS485_ProcessMessage+0x40>
                }
            }
        }
//        }
    }
}
 8005c9e:	bf00      	nop
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000123c 	.word	0x2000123c
 8005cac:	20001218 	.word	0x20001218
 8005cb0:	0800d9c8 	.word	0x0800d9c8

08005cb4 <init_ina229_devices>:


void init_ina229_devices(void) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
    ina229_devices[0] = INA229_0;
 8005cb8:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <init_ina229_devices+0xe0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a36      	ldr	r2, [pc, #216]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cbe:	6013      	str	r3, [r2, #0]
    ina229_devices[1] = INA229_1;
 8005cc0:	4b36      	ldr	r3, [pc, #216]	@ (8005d9c <init_ina229_devices+0xe8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a34      	ldr	r2, [pc, #208]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cc6:	6053      	str	r3, [r2, #4]
    ina229_devices[2] = INA229_2;
 8005cc8:	4b35      	ldr	r3, [pc, #212]	@ (8005da0 <init_ina229_devices+0xec>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a32      	ldr	r2, [pc, #200]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cce:	6093      	str	r3, [r2, #8]
    ina229_devices[3] = INA229_3;
 8005cd0:	4b34      	ldr	r3, [pc, #208]	@ (8005da4 <init_ina229_devices+0xf0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a30      	ldr	r2, [pc, #192]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cd6:	60d3      	str	r3, [r2, #12]
    ina229_devices[4] = INA229_4;
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <init_ina229_devices+0xf4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cde:	6113      	str	r3, [r2, #16]
    ina229_devices[5] = INA229_5;
 8005ce0:	4b32      	ldr	r3, [pc, #200]	@ (8005dac <init_ina229_devices+0xf8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005ce6:	6153      	str	r3, [r2, #20]
    ina229_devices[6] = INA229_6;
 8005ce8:	4b31      	ldr	r3, [pc, #196]	@ (8005db0 <init_ina229_devices+0xfc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2a      	ldr	r2, [pc, #168]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cee:	6193      	str	r3, [r2, #24]
    ina229_devices[7] = INA229_7;
 8005cf0:	4b30      	ldr	r3, [pc, #192]	@ (8005db4 <init_ina229_devices+0x100>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a28      	ldr	r2, [pc, #160]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cf6:	61d3      	str	r3, [r2, #28]
    ina229_devices[8] = INA229_8;
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8005db8 <init_ina229_devices+0x104>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a26      	ldr	r2, [pc, #152]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005cfe:	6213      	str	r3, [r2, #32]
    ina229_devices[9] = INA229_9;
 8005d00:	4b2e      	ldr	r3, [pc, #184]	@ (8005dbc <init_ina229_devices+0x108>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a24      	ldr	r2, [pc, #144]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d06:	6253      	str	r3, [r2, #36]	@ 0x24
    ina229_devices[10] = INA229_10;
 8005d08:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <init_ina229_devices+0x10c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d0e:	6293      	str	r3, [r2, #40]	@ 0x28
    ina229_devices[11] = INA229_11;
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <init_ina229_devices+0x110>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a20      	ldr	r2, [pc, #128]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ina229_devices[12] = INA229_12;
 8005d18:	4b2b      	ldr	r3, [pc, #172]	@ (8005dc8 <init_ina229_devices+0x114>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d1e:	6313      	str	r3, [r2, #48]	@ 0x30
    ina229_devices[13] = INA229_13;
 8005d20:	4b2a      	ldr	r3, [pc, #168]	@ (8005dcc <init_ina229_devices+0x118>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d26:	6353      	str	r3, [r2, #52]	@ 0x34
    ina229_devices[14] = INA229_14;
 8005d28:	4b29      	ldr	r3, [pc, #164]	@ (8005dd0 <init_ina229_devices+0x11c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d2e:	6393      	str	r3, [r2, #56]	@ 0x38
    ina229_devices[15] = INA229_15;
 8005d30:	4b28      	ldr	r3, [pc, #160]	@ (8005dd4 <init_ina229_devices+0x120>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d36:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ina229_devices[16] = INA229_16;
 8005d38:	4b27      	ldr	r3, [pc, #156]	@ (8005dd8 <init_ina229_devices+0x124>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    ina229_devices[17] = INA229_17;
 8005d40:	4b26      	ldr	r3, [pc, #152]	@ (8005ddc <init_ina229_devices+0x128>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a14      	ldr	r2, [pc, #80]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d46:	6453      	str	r3, [r2, #68]	@ 0x44
    ina229_devices[18] = INA229_18;
 8005d48:	4b25      	ldr	r3, [pc, #148]	@ (8005de0 <init_ina229_devices+0x12c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d4e:	6493      	str	r3, [r2, #72]	@ 0x48
    ina229_devices[19] = INA229_19;
 8005d50:	4b24      	ldr	r3, [pc, #144]	@ (8005de4 <init_ina229_devices+0x130>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a10      	ldr	r2, [pc, #64]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ina229_devices[20] = INA229_20;
 8005d58:	4b23      	ldr	r3, [pc, #140]	@ (8005de8 <init_ina229_devices+0x134>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d5e:	6513      	str	r3, [r2, #80]	@ 0x50
    ina229_devices[21] = INA229_21;
 8005d60:	4b22      	ldr	r3, [pc, #136]	@ (8005dec <init_ina229_devices+0x138>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0c      	ldr	r2, [pc, #48]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d66:	6553      	str	r3, [r2, #84]	@ 0x54
    ina229_devices[22] = INA229_22;
 8005d68:	4b21      	ldr	r3, [pc, #132]	@ (8005df0 <init_ina229_devices+0x13c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d6e:	6593      	str	r3, [r2, #88]	@ 0x58
    ina229_devices[23] = INA229_23;
 8005d70:	4b20      	ldr	r3, [pc, #128]	@ (8005df4 <init_ina229_devices+0x140>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a08      	ldr	r2, [pc, #32]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d76:	65d3      	str	r3, [r2, #92]	@ 0x5c
    ina229_devices[24] = INA229_24;
 8005d78:	4b1f      	ldr	r3, [pc, #124]	@ (8005df8 <init_ina229_devices+0x144>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a06      	ldr	r2, [pc, #24]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d7e:	6613      	str	r3, [r2, #96]	@ 0x60
    ina229_devices[25] = INA229_25;
 8005d80:	4b1e      	ldr	r3, [pc, #120]	@ (8005dfc <init_ina229_devices+0x148>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a04      	ldr	r2, [pc, #16]	@ (8005d98 <init_ina229_devices+0xe4>)
 8005d86:	6653      	str	r3, [r2, #100]	@ 0x64
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	0800d560 	.word	0x0800d560
 8005d98:	20001240 	.word	0x20001240
 8005d9c:	0800d564 	.word	0x0800d564
 8005da0:	0800d568 	.word	0x0800d568
 8005da4:	0800d56c 	.word	0x0800d56c
 8005da8:	0800d570 	.word	0x0800d570
 8005dac:	0800d574 	.word	0x0800d574
 8005db0:	0800d578 	.word	0x0800d578
 8005db4:	0800d57c 	.word	0x0800d57c
 8005db8:	0800d580 	.word	0x0800d580
 8005dbc:	0800d584 	.word	0x0800d584
 8005dc0:	0800d588 	.word	0x0800d588
 8005dc4:	0800d58c 	.word	0x0800d58c
 8005dc8:	0800d590 	.word	0x0800d590
 8005dcc:	0800d594 	.word	0x0800d594
 8005dd0:	0800d598 	.word	0x0800d598
 8005dd4:	0800d59c 	.word	0x0800d59c
 8005dd8:	0800d5a0 	.word	0x0800d5a0
 8005ddc:	0800d5a4 	.word	0x0800d5a4
 8005de0:	0800d5a8 	.word	0x0800d5a8
 8005de4:	0800d5ac 	.word	0x0800d5ac
 8005de8:	0800d5b0 	.word	0x0800d5b0
 8005dec:	0800d5b4 	.word	0x0800d5b4
 8005df0:	0800d5b8 	.word	0x0800d5b8
 8005df4:	0800d5bc 	.word	0x0800d5bc
 8005df8:	0800d5c0 	.word	0x0800d5c0
 8005dfc:	0800d5c4 	.word	0x0800d5c4

08005e00 <get_ina_handle>:

};


// Helper function to get INA handle from index
static INA229_Handle get_ina_handle(uint8_t index) {
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <get_ina_handle+0x20>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	015b      	lsls	r3, r3, #5
 8005e12:	4413      	add	r3, r2
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	0800d560 	.word	0x0800d560

08005e24 <Voltage_Sequence_Automatic>:

void Voltage_Sequence_Automatic(void)
{
 8005e24:	b5b0      	push	{r4, r5, r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af00      	add	r7, sp, #0

    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 8005e2a:	4b20      	ldr	r3, [pc, #128]	@ (8005eac <Voltage_Sequence_Automatic+0x88>)
 8005e2c:	463c      	mov	r4, r7
 8005e2e:	461d      	mov	r5, r3
 8005e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_voltages = sizeof(test_voltages) / sizeof(test_voltages[0]);
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    const int num_cells = sizeof(cell_configs) / sizeof(cell_configs[0]);
 8005e40:	231a      	movs	r3, #26
 8005e42:	623b      	str	r3, [r7, #32]

    for(int v = 0; v < num_voltages; v++) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e48:	e027      	b.n	8005e9a <Voltage_Sequence_Automatic+0x76>
        for(int c = 0; c < num_cells; c++) {
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e4e:	e01a      	b.n	8005e86 <Voltage_Sequence_Automatic+0x62>
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8005e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4a15      	ldr	r2, [pc, #84]	@ (8005eb0 <Voltage_Sequence_Automatic+0x8c>)
 8005e5c:	441a      	add	r2, r3
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	3330      	adds	r3, #48	@ 0x30
 8005e64:	443b      	add	r3, r7
 8005e66:	3b30      	subs	r3, #48	@ 0x30
 8005e68:	edd3 7a00 	vldr	s15, [r3]
 8005e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e70:	4610      	mov	r0, r2
 8005e72:	f000 f81f 	bl	8005eb4 <Set_voltage_and_measure>

        	cell_voltage_read();
 8005e76:	f7ff fdbf 	bl	80059f8 <cell_voltage_read>

            HAL_Delay(10);  // Delay between cells
 8005e7a:	200a      	movs	r0, #10
 8005e7c:	f001 fce0 	bl	8007840 <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	3301      	adds	r3, #1
 8005e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	dbe0      	blt.n	8005e50 <Voltage_Sequence_Automatic+0x2c>
        }
        HAL_Delay(10);  // Delay between voltage levels
 8005e8e:	200a      	movs	r0, #10
 8005e90:	f001 fcd6 	bl	8007840 <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	3301      	adds	r3, #1
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	dbd3      	blt.n	8005e4a <Voltage_Sequence_Automatic+0x26>





}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	3730      	adds	r7, #48	@ 0x30
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8005eac:	0800c834 	.word	0x0800c834
 8005eb0:	0800d9c8 	.word	0x0800d9c8

08005eb4 <Set_voltage_and_measure>:

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	ed87 0a00 	vstr	s0, [r7]
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff ff9b 	bl	8005e00 <get_ina_handle>
 8005eca:	60f8      	str	r0, [r7, #12]

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b18      	cmp	r3, #24
 8005ed2:	d010      	beq.n	8005ef6 <Set_voltage_and_measure+0x42>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b19      	cmp	r3, #25
 8005eda:	d00c      	beq.n	8005ef6 <Set_voltage_and_measure+0x42>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	ed97 0a00 	vldr	s0, [r7]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f8e3 	bl	80040b0 <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f94b 	bl	800418c <Set_LED_status>

    }
    HAL_Delay(10);
 8005ef6:	200a      	movs	r0, #10
 8005ef8:	f001 fca2 	bl	8007840 <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6858      	ldr	r0, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	891b      	ldrh	r3, [r3, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	4619      	mov	r1, r3
 8005f08:	f002 fb42 	bl	8008590 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	f001 fc97 	bl	8007840 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	461c      	mov	r4, r3
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fe fa55 	bl	80043c8 <INA229_getVBUS_V>
 8005f1e:	eef0 7a40 	vmov.f32	s15, s0
 8005f22:	4a26      	ldr	r2, [pc, #152]	@ (8005fbc <Set_voltage_and_measure+0x108>)
 8005f24:	0123      	lsls	r3, r4, #4
 8005f26:	4413      	add	r3, r2
 8005f28:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f001 fc87 	bl	8007840 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6858      	ldr	r0, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	891b      	ldrh	r3, [r3, #8]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f002 fb27 	bl	8008590 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8005f42:	200a      	movs	r0, #10
 8005f44:	f001 fc7c 	bl	8007840 <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6858      	ldr	r0, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	891b      	ldrh	r3, [r3, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f002 fb1c 	bl	8008590 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8005f58:	2001      	movs	r0, #1
 8005f5a:	f001 fc71 	bl	8007840 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	461c      	mov	r4, r3
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7fe fa8d 	bl	8004484 <INA229_getDIETEMP_C>
 8005f6a:	eef0 7a40 	vmov.f32	s15, s0
 8005f6e:	4a13      	ldr	r2, [pc, #76]	@ (8005fbc <Set_voltage_and_measure+0x108>)
 8005f70:	0123      	lsls	r3, r4, #4
 8005f72:	4413      	add	r3, r2
 8005f74:	3308      	adds	r3, #8
 8005f76:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f001 fc60 	bl	8007840 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6858      	ldr	r0, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	891b      	ldrh	r3, [r3, #8]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	f002 fb00 	bl	8008590 <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8005f90:	200a      	movs	r0, #10
 8005f92:	f001 fc55 	bl	8007840 <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b18      	cmp	r3, #24
 8005f9c:	d009      	beq.n	8005fb2 <Set_voltage_and_measure+0xfe>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b19      	cmp	r3, #25
 8005fa4:	d005      	beq.n	8005fb2 <Set_voltage_and_measure+0xfe>

    {

    Set_LED_status(cell->cell_id, ON);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2100      	movs	r1, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe f8ed 	bl	800418c <Set_LED_status>

    }
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000e5c 	.word	0x20000e5c

08005fc0 <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff ff17 	bl	8005e00 <get_ina_handle>
 8005fd2:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe f8d6 	bl	800418c <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6858      	ldr	r0, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	891b      	ldrh	r3, [r3, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	f002 fad0 	bl	8008590 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f001 fc25 	bl	8007840 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	461c      	mov	r4, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7fe fa41 	bl	8004484 <INA229_getDIETEMP_C>
 8006002:	eef0 7a40 	vmov.f32	s15, s0
 8006006:	4a12      	ldr	r2, [pc, #72]	@ (8006050 <Get_INA_Voltage+0x90>)
 8006008:	0123      	lsls	r3, r4, #4
 800600a:	4413      	add	r3, r2
 800600c:	3308      	adds	r3, #8
 800600e:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8006012:	2001      	movs	r0, #1
 8006014:	f001 fc14 	bl	8007840 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6858      	ldr	r0, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	891b      	ldrh	r3, [r3, #8]
 8006020:	2201      	movs	r2, #1
 8006022:	4619      	mov	r1, r3
 8006024:	f002 fab4 	bl	8008590 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe f8ac 	bl	800418c <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	4a05      	ldr	r2, [pc, #20]	@ (8006050 <Get_INA_Voltage+0x90>)
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	4413      	add	r3, r2
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	ee07 3a90 	vmov	s15, r3
}
 8006044:	eeb0 0a67 	vmov.f32	s0, s15
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	20000e5c 	.word	0x20000e5c

08006054 <sendData>:
uint8_t Tx_Data[16];
uint8_t Rx_Data[16];
int indx = 0;

void sendData (uint8_t *data)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 800605c:	2201      	movs	r2, #1
 800605e:	2120      	movs	r1, #32
 8006060:	480b      	ldr	r0, [pc, #44]	@ (8006090 <sendData+0x3c>)
 8006062:	f002 fa95 	bl	8008590 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart1, data, strlen (data) , 1000);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fa f8c2 	bl	80001f0 <strlen>
 800606c:	4603      	mov	r3, r0
 800606e:	b29a      	uxth	r2, r3
 8006070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4807      	ldr	r0, [pc, #28]	@ (8006094 <sendData+0x40>)
 8006078:	f004 fdf0 	bl	800ac5c <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation

	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 800607c:	2200      	movs	r2, #0
 800607e:	2120      	movs	r1, #32
 8006080:	4803      	ldr	r0, [pc, #12]	@ (8006090 <sendData+0x3c>)
 8006082:	f002 fa85 	bl	8008590 <HAL_GPIO_WritePin>

}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40020400 	.word	0x40020400
 8006094:	20001554 	.word	0x20001554

08006098 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, Rx_Data, 16);
 80060a4:	2210      	movs	r2, #16
 80060a6:	490b      	ldr	r1, [pc, #44]	@ (80060d4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80060a8:	480b      	ldr	r0, [pc, #44]	@ (80060d8 <HAL_UARTEx_RxEventCallback+0x40>)
 80060aa:	f004 fe62 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rx_Data, 16);
 80060ae:	2210      	movs	r2, #16
 80060b0:	4908      	ldr	r1, [pc, #32]	@ (80060d4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80060b2:	480a      	ldr	r0, [pc, #40]	@ (80060dc <HAL_UARTEx_RxEventCallback+0x44>)
 80060b4:	f004 fe5d 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, Rx_Data, 16);
 80060b8:	2210      	movs	r2, #16
 80060ba:	4906      	ldr	r1, [pc, #24]	@ (80060d4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80060bc:	4808      	ldr	r0, [pc, #32]	@ (80060e0 <HAL_UARTEx_RxEventCallback+0x48>)
 80060be:	f004 fe58 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, Rx_Data, 16);
 80060c2:	2210      	movs	r2, #16
 80060c4:	4903      	ldr	r1, [pc, #12]	@ (80060d4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80060c6:	4807      	ldr	r0, [pc, #28]	@ (80060e4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80060c8:	f004 fe53 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20001684 	.word	0x20001684
 80060d8:	20001554 	.word	0x20001554
 80060dc:	2000159c 	.word	0x2000159c
 80060e0:	200015e4 	.word	0x200015e4
 80060e4:	2000162c 	.word	0x2000162c

080060e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b08b      	sub	sp, #44	@ 0x2c
 80060ec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060ee:	f001 fb35 	bl	800775c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060f2:	f000 f92b 	bl	800634c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060f6:	f000 fc3f 	bl	8006978 <MX_GPIO_Init>
  MX_SPI1_Init();
 80060fa:	f000 fabd 	bl	8006678 <MX_SPI1_Init>
  MX_SPI2_Init();
 80060fe:	f000 faf1 	bl	80066e4 <MX_SPI2_Init>
  MX_I2C2_Init();
 8006102:	f000 fa39 	bl	8006578 <MX_I2C2_Init>
  MX_I2C3_Init();
 8006106:	f000 fa77 	bl	80065f8 <MX_I2C3_Init>
  MX_SPI3_Init();
 800610a:	f000 fb21 	bl	8006750 <MX_SPI3_Init>
  MX_SPI4_Init();
 800610e:	f000 fb55 	bl	80067bc <MX_SPI4_Init>
  MX_CAN1_Init();
 8006112:	f000 f987 	bl	8006424 <MX_CAN1_Init>
  MX_CAN2_Init();
 8006116:	f000 f9bb 	bl	8006490 <MX_CAN2_Init>
  MX_I2C1_Init();
 800611a:	f000 f9ed 	bl	80064f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800611e:	f000 fb83 	bl	8006828 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006122:	f000 fbab 	bl	800687c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006126:	f000 fbd3 	bl	80068d0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800612a:	f000 fbfb 	bl	8006924 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800612e:	f005 fdd1 	bl	800bcd4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */



  RTC_Init();
 8006132:	f7ff fcab 	bl	8005a8c <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8006136:	f7fa ff7f 	bl	8001038 <LED_Init>

  init_ina229_devices();
 800613a:	f7ff fdbb 	bl	8005cb4 <init_ina229_devices>

  for (int i = 0; i < NUM_INA229; i++)
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e00c      	b.n	800615e <main+0x76>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8006144:	4a6e      	ldr	r2, [pc, #440]	@ (8006300 <main+0x218>)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe f885 	bl	800425c <INA229_config>
 8006152:	200a      	movs	r0, #10
 8006154:	f001 fb74 	bl	8007840 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b19      	cmp	r3, #25
 8006162:	ddef      	ble.n	8006144 <main+0x5c>



  mcu_spiInit(0);
 8006164:	2000      	movs	r0, #0
 8006166:	f7fe f9d9 	bl	800451c <mcu_spiInit>
  HAL_Delay(10);
 800616a:	200a      	movs	r0, #10
 800616c:	f001 fb68 	bl	8007840 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 8006170:	4964      	ldr	r1, [pc, #400]	@ (8006304 <main+0x21c>)
 8006172:	2002      	movs	r0, #2
 8006174:	f7fe fab8 	bl	80046e8 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8006178:	2300      	movs	r3, #0
 800617a:	72fb      	strb	r3, [r7, #11]
 800617c:	e018      	b.n	80061b0 <main+0xc8>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 800617e:	4b62      	ldr	r3, [pc, #392]	@ (8006308 <main+0x220>)
 8006180:	7819      	ldrb	r1, [r3, #0]
 8006182:	4b62      	ldr	r3, [pc, #392]	@ (800630c <main+0x224>)
 8006184:	781c      	ldrb	r4, [r3, #0]
 8006186:	4b62      	ldr	r3, [pc, #392]	@ (8006310 <main+0x228>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	4a62      	ldr	r2, [pc, #392]	@ (8006314 <main+0x22c>)
 800618c:	8812      	ldrh	r2, [r2, #0]
 800618e:	7af8      	ldrb	r0, [r7, #11]
 8006190:	9204      	str	r2, [sp, #16]
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	4b60      	ldr	r3, [pc, #384]	@ (8006318 <main+0x230>)
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	4b60      	ldr	r3, [pc, #384]	@ (800631c <main+0x234>)
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	4b60      	ldr	r3, [pc, #384]	@ (8006320 <main+0x238>)
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4623      	mov	r3, r4
 80061a2:	460a      	mov	r2, r1
 80061a4:	4957      	ldr	r1, [pc, #348]	@ (8006304 <main+0x21c>)
 80061a6:	f7fe faae 	bl	8004706 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	3301      	adds	r3, #1
 80061ae:	72fb      	strb	r3, [r7, #11]
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d9e3      	bls.n	800617e <main+0x96>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 80061b6:	4953      	ldr	r1, [pc, #332]	@ (8006304 <main+0x21c>)
 80061b8:	2002      	movs	r0, #2
 80061ba:	f7fe fa46 	bl	800464a <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 80061be:	4951      	ldr	r1, [pc, #324]	@ (8006304 <main+0x21c>)
 80061c0:	2002      	movs	r0, #2
 80061c2:	f7fe fa82 	bl	80046ca <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 80061c6:	494f      	ldr	r1, [pc, #316]	@ (8006304 <main+0x21c>)
 80061c8:	2002      	movs	r0, #2
 80061ca:	f7fe f9e5 	bl	8004598 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 80061ce:	f7fb fd67 	bl	8001ca0 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 80061d2:	f7fb fd8d 	bl	8001cf0 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 80061d6:	4853      	ldr	r0, [pc, #332]	@ (8006324 <main+0x23c>)
 80061d8:	f7fd fd42 	bl	8003c60 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 80061dc:	4852      	ldr	r0, [pc, #328]	@ (8006328 <main+0x240>)
 80061de:	f7fd fd3f 	bl	8003c60 <Expander_InitAllDevices>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, Rx_Data, 16);
 80061e2:	2210      	movs	r2, #16
 80061e4:	4951      	ldr	r1, [pc, #324]	@ (800632c <main+0x244>)
 80061e6:	4852      	ldr	r0, [pc, #328]	@ (8006330 <main+0x248>)
 80061e8:	f004 fdc3 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, Rx_Data, 16);
 80061ec:	2210      	movs	r2, #16
 80061ee:	494f      	ldr	r1, [pc, #316]	@ (800632c <main+0x244>)
 80061f0:	4850      	ldr	r0, [pc, #320]	@ (8006334 <main+0x24c>)
 80061f2:	f004 fdbe 	bl	800ad72 <HAL_UARTEx_ReceiveToIdle_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf(Tx_Data, "F103 %d", indx++);
 80061f6:	4b50      	ldr	r3, [pc, #320]	@ (8006338 <main+0x250>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	494e      	ldr	r1, [pc, #312]	@ (8006338 <main+0x250>)
 80061fe:	600a      	str	r2, [r1, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	494e      	ldr	r1, [pc, #312]	@ (800633c <main+0x254>)
 8006204:	484e      	ldr	r0, [pc, #312]	@ (8006340 <main+0x258>)
 8006206:	f005 fee9 	bl	800bfdc <siprintf>
	    sendData (Tx_Data);
 800620a:	484d      	ldr	r0, [pc, #308]	@ (8006340 <main+0x258>)
 800620c:	f7ff ff22 	bl	8006054 <sendData>
	    HAL_Delay(1000);
 8006210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006214:	f001 fb14 	bl	8007840 <HAL_Delay>

		  cell12_Temp_01_Set(resistance[0]);
 8006218:	4b4a      	ldr	r3, [pc, #296]	@ (8006344 <main+0x25c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	f7fb f83a 	bl	80012a0 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 800622c:	4b45      	ldr	r3, [pc, #276]	@ (8006344 <main+0x25c>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006238:	eeb0 0a67 	vmov.f32	s0, s15
 800623c:	f7fb f8e6 	bl	800140c <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8006240:	4b40      	ldr	r3, [pc, #256]	@ (8006344 <main+0x25c>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800624c:	eeb0 0a67 	vmov.f32	s0, s15
 8006250:	f7fb f99c 	bl	800158c <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8006254:	4b3b      	ldr	r3, [pc, #236]	@ (8006344 <main+0x25c>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006260:	eeb0 0a67 	vmov.f32	s0, s15
 8006264:	f7fb fa48 	bl	80016f8 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8006268:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <main+0x25c>)
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006274:	eeb0 0a67 	vmov.f32	s0, s15
 8006278:	f7fb fafe 	bl	8001878 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 800627c:	4b31      	ldr	r3, [pc, #196]	@ (8006344 <main+0x25c>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006288:	eeb0 0a67 	vmov.f32	s0, s15
 800628c:	f7fb fbb4 	bl	80019f8 <cell11_Temp_03_Set>
//
//		  HAL_Delay(1000);
//
//		  Set_Output_Voltage(CELL_24, 2.0f);

	        Voltage_Sequence_Automatic();
 8006290:	f7ff fdc8 	bl	8005e24 <Voltage_Sequence_Automatic>

		  current_message.data[0] = 0x04 ;
 8006294:	4b2c      	ldr	r3, [pc, #176]	@ (8006348 <main+0x260>)
 8006296:	2204      	movs	r2, #4
 8006298:	701a      	strb	r2, [r3, #0]
		  current_message.data[1] = 1 ;
 800629a:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <main+0x260>)
 800629c:	2201      	movs	r2, #1
 800629e:	705a      	strb	r2, [r3, #1]
		  current_message.data[2] = 0xAA ;
 80062a0:	4b29      	ldr	r3, [pc, #164]	@ (8006348 <main+0x260>)
 80062a2:	22aa      	movs	r2, #170	@ 0xaa
 80062a4:	709a      	strb	r2, [r3, #2]
		  current_message.data[3] = 0x01 ;
 80062a6:	4b28      	ldr	r3, [pc, #160]	@ (8006348 <main+0x260>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	70da      	strb	r2, [r3, #3]
		  current_message.data[4] = 2 ;
 80062ac:	4b26      	ldr	r3, [pc, #152]	@ (8006348 <main+0x260>)
 80062ae:	2202      	movs	r2, #2
 80062b0:	711a      	strb	r2, [r3, #4]
		  current_message.data[5] = 4 ;
 80062b2:	4b25      	ldr	r3, [pc, #148]	@ (8006348 <main+0x260>)
 80062b4:	2204      	movs	r2, #4
 80062b6:	715a      	strb	r2, [r3, #5]
		  current_message.data[6] = 1 ;
 80062b8:	4b23      	ldr	r3, [pc, #140]	@ (8006348 <main+0x260>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	719a      	strb	r2, [r3, #6]
		  current_message.data[7] = 200 ;
 80062be:	4b22      	ldr	r3, [pc, #136]	@ (8006348 <main+0x260>)
 80062c0:	22c8      	movs	r2, #200	@ 0xc8
 80062c2:	71da      	strb	r2, [r3, #7]
		  current_message.data[8] = 4 ;
 80062c4:	4b20      	ldr	r3, [pc, #128]	@ (8006348 <main+0x260>)
 80062c6:	2204      	movs	r2, #4
 80062c8:	721a      	strb	r2, [r3, #8]
		  current_message.data[9] = 4 ;
 80062ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006348 <main+0x260>)
 80062cc:	2204      	movs	r2, #4
 80062ce:	725a      	strb	r2, [r3, #9]
		  current_message.data[10] = 4 ;
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <main+0x260>)
 80062d2:	2204      	movs	r2, #4
 80062d4:	729a      	strb	r2, [r3, #10]
		  current_message.data[11] = 4 ;
 80062d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <main+0x260>)
 80062d8:	2204      	movs	r2, #4
 80062da:	72da      	strb	r2, [r3, #11]


	        RS485_ProcessMessage();
 80062dc:	f7ff fc76 	bl	8005bcc <RS485_ProcessMessage>

	        // Process battery tests
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 80062e0:	2300      	movs	r3, #0
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e008      	b.n	80062f8 <main+0x210>
	        	Set_LED_status(cell, ON);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fd ff4d 	bl	800418c <Set_LED_status>
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3301      	adds	r3, #1
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b17      	cmp	r3, #23
 80062fc:	ddf3      	ble.n	80062e6 <main+0x1fe>
  {
 80062fe:	e77a      	b.n	80061f6 <main+0x10e>
 8006300:	20001240 	.word	0x20001240
 8006304:	20000ffc 	.word	0x20000ffc
 8006308:	20000900 	.word	0x20000900
 800630c:	20001204 	.word	0x20001204
 8006310:	2000090a 	.word	0x2000090a
 8006314:	2000090c 	.word	0x2000090c
 8006318:	20000910 	.word	0x20000910
 800631c:	20001208 	.word	0x20001208
 8006320:	20000904 	.word	0x20000904
 8006324:	2000134c 	.word	0x2000134c
 8006328:	200013a0 	.word	0x200013a0
 800632c:	20001684 	.word	0x20001684
 8006330:	20001554 	.word	0x20001554
 8006334:	2000159c 	.word	0x2000159c
 8006338:	20001694 	.word	0x20001694
 800633c:	0800c854 	.word	0x0800c854
 8006340:	20001674 	.word	0x20001674
 8006344:	200008e8 	.word	0x200008e8
 8006348:	20001218 	.word	0x20001218

0800634c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b094      	sub	sp, #80	@ 0x50
 8006350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006352:	f107 0320 	add.w	r3, r7, #32
 8006356:	2230      	movs	r2, #48	@ 0x30
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f005 fe5e 	bl	800c01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	4b29      	ldr	r3, [pc, #164]	@ (800641c <SystemClock_Config+0xd0>)
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	4a28      	ldr	r2, [pc, #160]	@ (800641c <SystemClock_Config+0xd0>)
 800637a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006380:	4b26      	ldr	r3, [pc, #152]	@ (800641c <SystemClock_Config+0xd0>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800638c:	2300      	movs	r3, #0
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <SystemClock_Config+0xd4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006398:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <SystemClock_Config+0xd4>)
 800639a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <SystemClock_Config+0xd4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80063ac:	2302      	movs	r3, #2
 80063ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80063b0:	2301      	movs	r3, #1
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80063b4:	2310      	movs	r3, #16
 80063b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063b8:	2302      	movs	r3, #2
 80063ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80063bc:	2300      	movs	r3, #0
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80063c0:	230f      	movs	r3, #15
 80063c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80063c4:	2390      	movs	r3, #144	@ 0x90
 80063c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80063c8:	2302      	movs	r3, #2
 80063ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80063cc:	2305      	movs	r3, #5
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063d0:	f107 0320 	add.w	r3, r7, #32
 80063d4:	4618      	mov	r0, r3
 80063d6:	f003 f9c7 	bl	8009768 <HAL_RCC_OscConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80063e0:	f000 fd31 	bl	8006e46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063e4:	230f      	movs	r3, #15
 80063e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063e8:	2302      	movs	r3, #2
 80063ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80063f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80063fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f003 fc28 	bl	8009c58 <HAL_RCC_ClockConfig>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800640e:	f000 fd1a 	bl	8006e46 <Error_Handler>
  }
}
 8006412:	bf00      	nop
 8006414:	3750      	adds	r7, #80	@ 0x50
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40023800 	.word	0x40023800
 8006420:	40007000 	.word	0x40007000

08006424 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006428:	4b17      	ldr	r3, [pc, #92]	@ (8006488 <MX_CAN1_Init+0x64>)
 800642a:	4a18      	ldr	r2, [pc, #96]	@ (800648c <MX_CAN1_Init+0x68>)
 800642c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800642e:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006430:	220a      	movs	r2, #10
 8006432:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006434:	4b14      	ldr	r3, [pc, #80]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <MX_CAN1_Init+0x64>)
 800643c:	2200      	movs	r2, #0
 800643e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006440:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006442:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8006446:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006448:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <MX_CAN1_Init+0x64>)
 800644a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800644e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006450:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006452:	2200      	movs	r2, #0
 8006454:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006456:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006458:	2200      	movs	r2, #0
 800645a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800645c:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <MX_CAN1_Init+0x64>)
 800645e:	2200      	movs	r2, #0
 8006460:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006462:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006464:	2200      	movs	r2, #0
 8006466:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006468:	4b07      	ldr	r3, [pc, #28]	@ (8006488 <MX_CAN1_Init+0x64>)
 800646a:	2200      	movs	r2, #0
 800646c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800646e:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006470:	2200      	movs	r2, #0
 8006472:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006474:	4804      	ldr	r0, [pc, #16]	@ (8006488 <MX_CAN1_Init+0x64>)
 8006476:	f001 fa07 	bl	8007888 <HAL_CAN_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006480:	f000 fce1 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200012a8 	.word	0x200012a8
 800648c:	40006400 	.word	0x40006400

08006490 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006494:	4b16      	ldr	r3, [pc, #88]	@ (80064f0 <MX_CAN2_Init+0x60>)
 8006496:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <MX_CAN2_Init+0x64>)
 8006498:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800649a:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <MX_CAN2_Init+0x60>)
 800649c:	2210      	movs	r2, #16
 800649e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80064a0:	4b13      	ldr	r3, [pc, #76]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80064ac:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80064b8:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80064be:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80064ca:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80064d0:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064d8:	2200      	movs	r2, #0
 80064da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80064dc:	4804      	ldr	r0, [pc, #16]	@ (80064f0 <MX_CAN2_Init+0x60>)
 80064de:	f001 f9d3 	bl	8007888 <HAL_CAN_Init>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80064e8:	f000 fcad 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200012d0 	.word	0x200012d0
 80064f4:	40006800 	.word	0x40006800

080064f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80064fc:	4b1b      	ldr	r3, [pc, #108]	@ (800656c <MX_I2C1_Init+0x74>)
 80064fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <MX_I2C1_Init+0x78>)
 8006500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006502:	4b1a      	ldr	r3, [pc, #104]	@ (800656c <MX_I2C1_Init+0x74>)
 8006504:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <MX_I2C1_Init+0x7c>)
 8006506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006508:	4b18      	ldr	r3, [pc, #96]	@ (800656c <MX_I2C1_Init+0x74>)
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800650e:	4b17      	ldr	r3, [pc, #92]	@ (800656c <MX_I2C1_Init+0x74>)
 8006510:	2200      	movs	r2, #0
 8006512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006514:	4b15      	ldr	r3, [pc, #84]	@ (800656c <MX_I2C1_Init+0x74>)
 8006516:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800651a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800651c:	4b13      	ldr	r3, [pc, #76]	@ (800656c <MX_I2C1_Init+0x74>)
 800651e:	2200      	movs	r2, #0
 8006520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006522:	4b12      	ldr	r3, [pc, #72]	@ (800656c <MX_I2C1_Init+0x74>)
 8006524:	2200      	movs	r2, #0
 8006526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006528:	4b10      	ldr	r3, [pc, #64]	@ (800656c <MX_I2C1_Init+0x74>)
 800652a:	2200      	movs	r2, #0
 800652c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800652e:	4b0f      	ldr	r3, [pc, #60]	@ (800656c <MX_I2C1_Init+0x74>)
 8006530:	2200      	movs	r2, #0
 8006532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006534:	480d      	ldr	r0, [pc, #52]	@ (800656c <MX_I2C1_Init+0x74>)
 8006536:	f002 f877 	bl	8008628 <HAL_I2C_Init>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006540:	f000 fc81 	bl	8006e46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006544:	2100      	movs	r1, #0
 8006546:	4809      	ldr	r0, [pc, #36]	@ (800656c <MX_I2C1_Init+0x74>)
 8006548:	f003 f892 	bl	8009670 <HAL_I2CEx_ConfigAnalogFilter>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006552:	f000 fc78 	bl	8006e46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006556:	2100      	movs	r1, #0
 8006558:	4804      	ldr	r0, [pc, #16]	@ (800656c <MX_I2C1_Init+0x74>)
 800655a:	f003 f8c5 	bl	80096e8 <HAL_I2CEx_ConfigDigitalFilter>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006564:	f000 fc6f 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}
 800656c:	200012f8 	.word	0x200012f8
 8006570:	40005400 	.word	0x40005400
 8006574:	000186a0 	.word	0x000186a0

08006578 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800657c:	4b1b      	ldr	r3, [pc, #108]	@ (80065ec <MX_I2C2_Init+0x74>)
 800657e:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <MX_I2C2_Init+0x78>)
 8006580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006582:	4b1a      	ldr	r3, [pc, #104]	@ (80065ec <MX_I2C2_Init+0x74>)
 8006584:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <MX_I2C2_Init+0x7c>)
 8006586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006588:	4b18      	ldr	r3, [pc, #96]	@ (80065ec <MX_I2C2_Init+0x74>)
 800658a:	2200      	movs	r2, #0
 800658c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800658e:	4b17      	ldr	r3, [pc, #92]	@ (80065ec <MX_I2C2_Init+0x74>)
 8006590:	2200      	movs	r2, #0
 8006592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006594:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <MX_I2C2_Init+0x74>)
 8006596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800659a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800659c:	4b13      	ldr	r3, [pc, #76]	@ (80065ec <MX_I2C2_Init+0x74>)
 800659e:	2200      	movs	r2, #0
 80065a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065a8:	4b10      	ldr	r3, [pc, #64]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065ae:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80065b4:	480d      	ldr	r0, [pc, #52]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065b6:	f002 f837 	bl	8008628 <HAL_I2C_Init>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80065c0:	f000 fc41 	bl	8006e46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065c4:	2100      	movs	r1, #0
 80065c6:	4809      	ldr	r0, [pc, #36]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065c8:	f003 f852 	bl	8009670 <HAL_I2CEx_ConfigAnalogFilter>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80065d2:	f000 fc38 	bl	8006e46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80065d6:	2100      	movs	r1, #0
 80065d8:	4804      	ldr	r0, [pc, #16]	@ (80065ec <MX_I2C2_Init+0x74>)
 80065da:	f003 f885 	bl	80096e8 <HAL_I2CEx_ConfigDigitalFilter>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80065e4:	f000 fc2f 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	2000134c 	.word	0x2000134c
 80065f0:	40005800 	.word	0x40005800
 80065f4:	00061a80 	.word	0x00061a80

080065f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	@ (800666c <MX_I2C3_Init+0x74>)
 80065fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <MX_I2C3_Init+0x78>)
 8006600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006602:	4b1a      	ldr	r3, [pc, #104]	@ (800666c <MX_I2C3_Init+0x74>)
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <MX_I2C3_Init+0x7c>)
 8006606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006608:	4b18      	ldr	r3, [pc, #96]	@ (800666c <MX_I2C3_Init+0x74>)
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800660e:	4b17      	ldr	r3, [pc, #92]	@ (800666c <MX_I2C3_Init+0x74>)
 8006610:	2200      	movs	r2, #0
 8006612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006614:	4b15      	ldr	r3, [pc, #84]	@ (800666c <MX_I2C3_Init+0x74>)
 8006616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800661a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800661c:	4b13      	ldr	r3, [pc, #76]	@ (800666c <MX_I2C3_Init+0x74>)
 800661e:	2200      	movs	r2, #0
 8006620:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006622:	4b12      	ldr	r3, [pc, #72]	@ (800666c <MX_I2C3_Init+0x74>)
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006628:	4b10      	ldr	r3, [pc, #64]	@ (800666c <MX_I2C3_Init+0x74>)
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800662e:	4b0f      	ldr	r3, [pc, #60]	@ (800666c <MX_I2C3_Init+0x74>)
 8006630:	2200      	movs	r2, #0
 8006632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006634:	480d      	ldr	r0, [pc, #52]	@ (800666c <MX_I2C3_Init+0x74>)
 8006636:	f001 fff7 	bl	8008628 <HAL_I2C_Init>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006640:	f000 fc01 	bl	8006e46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006644:	2100      	movs	r1, #0
 8006646:	4809      	ldr	r0, [pc, #36]	@ (800666c <MX_I2C3_Init+0x74>)
 8006648:	f003 f812 	bl	8009670 <HAL_I2CEx_ConfigAnalogFilter>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006652:	f000 fbf8 	bl	8006e46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006656:	2100      	movs	r1, #0
 8006658:	4804      	ldr	r0, [pc, #16]	@ (800666c <MX_I2C3_Init+0x74>)
 800665a:	f003 f845 	bl	80096e8 <HAL_I2CEx_ConfigDigitalFilter>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006664:	f000 fbef 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}
 800666c:	200013a0 	.word	0x200013a0
 8006670:	40005c00 	.word	0x40005c00
 8006674:	00061a80 	.word	0x00061a80

08006678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800667c:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <MX_SPI1_Init+0x64>)
 800667e:	4a18      	ldr	r2, [pc, #96]	@ (80066e0 <MX_SPI1_Init+0x68>)
 8006680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006682:	4b16      	ldr	r3, [pc, #88]	@ (80066dc <MX_SPI1_Init+0x64>)
 8006684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800668a:	4b14      	ldr	r3, [pc, #80]	@ (80066dc <MX_SPI1_Init+0x64>)
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006690:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <MX_SPI1_Init+0x64>)
 8006692:	2200      	movs	r2, #0
 8006694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006696:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <MX_SPI1_Init+0x64>)
 8006698:	2200      	movs	r2, #0
 800669a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800669c:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <MX_SPI1_Init+0x64>)
 800669e:	2201      	movs	r2, #1
 80066a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80066a2:	4b0e      	ldr	r3, [pc, #56]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066ac:	2228      	movs	r2, #40	@ 0x28
 80066ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066b0:	4b0a      	ldr	r3, [pc, #40]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80066b6:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066be:	2200      	movs	r2, #0
 80066c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80066c2:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066c4:	220a      	movs	r2, #10
 80066c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80066c8:	4804      	ldr	r0, [pc, #16]	@ (80066dc <MX_SPI1_Init+0x64>)
 80066ca:	f003 fca5 	bl	800a018 <HAL_SPI_Init>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80066d4:	f000 fbb7 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80066d8:	bf00      	nop
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200013f4 	.word	0x200013f4
 80066e0:	40013000 	.word	0x40013000

080066e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80066e8:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <MX_SPI2_Init+0x64>)
 80066ea:	4a18      	ldr	r2, [pc, #96]	@ (800674c <MX_SPI2_Init+0x68>)
 80066ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80066ee:	4b16      	ldr	r3, [pc, #88]	@ (8006748 <MX_SPI2_Init+0x64>)
 80066f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80066f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80066f6:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <MX_SPI2_Init+0x64>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <MX_SPI2_Init+0x64>)
 80066fe:	2200      	movs	r2, #0
 8006700:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006702:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006704:	2200      	movs	r2, #0
 8006706:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006708:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <MX_SPI2_Init+0x64>)
 800670a:	2201      	movs	r2, #1
 800670c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800670e:	4b0e      	ldr	r3, [pc, #56]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006714:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006718:	2218      	movs	r2, #24
 800671a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800671c:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <MX_SPI2_Init+0x64>)
 800671e:	2200      	movs	r2, #0
 8006720:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006722:	4b09      	ldr	r3, [pc, #36]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006724:	2200      	movs	r2, #0
 8006726:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006728:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <MX_SPI2_Init+0x64>)
 800672a:	2200      	movs	r2, #0
 800672c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800672e:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006730:	220a      	movs	r2, #10
 8006732:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006734:	4804      	ldr	r0, [pc, #16]	@ (8006748 <MX_SPI2_Init+0x64>)
 8006736:	f003 fc6f 	bl	800a018 <HAL_SPI_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006740:	f000 fb81 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006744:	bf00      	nop
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000144c 	.word	0x2000144c
 800674c:	40003800 	.word	0x40003800

08006750 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006754:	4b17      	ldr	r3, [pc, #92]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006756:	4a18      	ldr	r2, [pc, #96]	@ (80067b8 <MX_SPI3_Init+0x68>)
 8006758:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800675a:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <MX_SPI3_Init+0x64>)
 800675c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006760:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006764:	2200      	movs	r2, #0
 8006766:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006768:	4b12      	ldr	r3, [pc, #72]	@ (80067b4 <MX_SPI3_Init+0x64>)
 800676a:	2200      	movs	r2, #0
 800676c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006770:	2200      	movs	r2, #0
 8006772:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006774:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006776:	2200      	movs	r2, #0
 8006778:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <MX_SPI3_Init+0x64>)
 800677c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006780:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006782:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006784:	2220      	movs	r2, #32
 8006786:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <MX_SPI3_Init+0x64>)
 800678a:	2200      	movs	r2, #0
 800678c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006790:	2200      	movs	r2, #0
 8006792:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006794:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <MX_SPI3_Init+0x64>)
 8006796:	2200      	movs	r2, #0
 8006798:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <MX_SPI3_Init+0x64>)
 800679c:	220a      	movs	r2, #10
 800679e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80067a0:	4804      	ldr	r0, [pc, #16]	@ (80067b4 <MX_SPI3_Init+0x64>)
 80067a2:	f003 fc39 	bl	800a018 <HAL_SPI_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80067ac:	f000 fb4b 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	200014a4 	.word	0x200014a4
 80067b8:	40003c00 	.word	0x40003c00

080067bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80067c0:	4b17      	ldr	r3, [pc, #92]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067c2:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <MX_SPI4_Init+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80067c6:	4b16      	ldr	r3, [pc, #88]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80067cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80067ce:	4b14      	ldr	r3, [pc, #80]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80067d4:	4b12      	ldr	r3, [pc, #72]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80067da:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067dc:	2200      	movs	r2, #0
 80067de:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80067e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80067ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067f0:	2230      	movs	r2, #48	@ 0x30
 80067f2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80067fa:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <MX_SPI4_Init+0x64>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <MX_SPI4_Init+0x64>)
 8006802:	2200      	movs	r2, #0
 8006804:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8006806:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <MX_SPI4_Init+0x64>)
 8006808:	220a      	movs	r2, #10
 800680a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800680c:	4804      	ldr	r0, [pc, #16]	@ (8006820 <MX_SPI4_Init+0x64>)
 800680e:	f003 fc03 	bl	800a018 <HAL_SPI_Init>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8006818:	f000 fb15 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200014fc 	.word	0x200014fc
 8006824:	40013400 	.word	0x40013400

08006828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800682c:	4b11      	ldr	r3, [pc, #68]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 800682e:	4a12      	ldr	r2, [pc, #72]	@ (8006878 <MX_USART1_UART_Init+0x50>)
 8006830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006832:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 8006834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800683a:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 800683c:	2200      	movs	r2, #0
 800683e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 8006842:	2200      	movs	r2, #0
 8006844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 8006848:	2200      	movs	r2, #0
 800684a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800684c:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 800684e:	220c      	movs	r2, #12
 8006850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006852:	4b08      	ldr	r3, [pc, #32]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800685e:	4805      	ldr	r0, [pc, #20]	@ (8006874 <MX_USART1_UART_Init+0x4c>)
 8006860:	f004 f9ac 	bl	800abbc <HAL_UART_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800686a:	f000 faec 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20001554 	.word	0x20001554
 8006878:	40011000 	.word	0x40011000

0800687c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006880:	4b11      	ldr	r3, [pc, #68]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 8006882:	4a12      	ldr	r2, [pc, #72]	@ (80068cc <MX_USART2_UART_Init+0x50>)
 8006884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006886:	4b10      	ldr	r3, [pc, #64]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 8006888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800688c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800688e:	4b0e      	ldr	r3, [pc, #56]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006894:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800689a:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068a0:	4b09      	ldr	r3, [pc, #36]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 80068a2:	220c      	movs	r2, #12
 80068a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068a6:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068b2:	4805      	ldr	r0, [pc, #20]	@ (80068c8 <MX_USART2_UART_Init+0x4c>)
 80068b4:	f004 f982 	bl	800abbc <HAL_UART_Init>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068be:	f000 fac2 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000159c 	.word	0x2000159c
 80068cc:	40004400 	.word	0x40004400

080068d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068d6:	4a12      	ldr	r2, [pc, #72]	@ (8006920 <MX_USART3_UART_Init+0x50>)
 80068d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80068e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068f4:	4b09      	ldr	r3, [pc, #36]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068f6:	220c      	movs	r2, #12
 80068f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006900:	4b06      	ldr	r3, [pc, #24]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 8006902:	2200      	movs	r2, #0
 8006904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006906:	4805      	ldr	r0, [pc, #20]	@ (800691c <MX_USART3_UART_Init+0x4c>)
 8006908:	f004 f958 	bl	800abbc <HAL_UART_Init>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006912:	f000 fa98 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006916:	bf00      	nop
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200015e4 	.word	0x200015e4
 8006920:	40004800 	.word	0x40004800

08006924 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006928:	4b11      	ldr	r3, [pc, #68]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 800692a:	4a12      	ldr	r2, [pc, #72]	@ (8006974 <MX_USART6_UART_Init+0x50>)
 800692c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 8006930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006934:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006936:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 8006938:	2200      	movs	r2, #0
 800693a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800693c:	4b0c      	ldr	r3, [pc, #48]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 800693e:	2200      	movs	r2, #0
 8006940:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006942:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 8006944:	2200      	movs	r2, #0
 8006946:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 800694a:	220c      	movs	r2, #12
 800694c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800694e:	4b08      	ldr	r3, [pc, #32]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 8006950:	2200      	movs	r2, #0
 8006952:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 8006956:	2200      	movs	r2, #0
 8006958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800695a:	4805      	ldr	r0, [pc, #20]	@ (8006970 <MX_USART6_UART_Init+0x4c>)
 800695c:	f004 f92e 	bl	800abbc <HAL_UART_Init>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006966:	f000 fa6e 	bl	8006e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000162c 	.word	0x2000162c
 8006974:	40011400 	.word	0x40011400

08006978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	@ 0x38
 800697c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	605a      	str	r2, [r3, #4]
 8006988:	609a      	str	r2, [r3, #8]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	623b      	str	r3, [r7, #32]
 8006992:	4bb6      	ldr	r3, [pc, #728]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006996:	4ab5      	ldr	r2, [pc, #724]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006998:	f043 0310 	orr.w	r3, r3, #16
 800699c:	6313      	str	r3, [r2, #48]	@ 0x30
 800699e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	623b      	str	r3, [r7, #32]
 80069a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	4baf      	ldr	r3, [pc, #700]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	4aae      	ldr	r2, [pc, #696]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80069ba:	4bac      	ldr	r3, [pc, #688]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	4ba8      	ldr	r3, [pc, #672]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	4aa7      	ldr	r2, [pc, #668]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069d6:	4ba5      	ldr	r3, [pc, #660]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	4ba1      	ldr	r3, [pc, #644]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ea:	4aa0      	ldr	r2, [pc, #640]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80069f2:	4b9e      	ldr	r3, [pc, #632]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	4b9a      	ldr	r3, [pc, #616]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	4a99      	ldr	r2, [pc, #612]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0e:	4b97      	ldr	r3, [pc, #604]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	4b93      	ldr	r3, [pc, #588]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	4a92      	ldr	r2, [pc, #584]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a2a:	4b90      	ldr	r3, [pc, #576]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	4b8c      	ldr	r3, [pc, #560]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3e:	4a8b      	ldr	r2, [pc, #556]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a40:	f043 0302 	orr.w	r3, r3, #2
 8006a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a46:	4b89      	ldr	r3, [pc, #548]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	4b85      	ldr	r3, [pc, #532]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5a:	4a84      	ldr	r2, [pc, #528]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a62:	4b82      	ldr	r3, [pc, #520]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4b7e      	ldr	r3, [pc, #504]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	4a7d      	ldr	r2, [pc, #500]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a78:	f043 0308 	orr.w	r3, r3, #8
 8006a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8006c6c <MX_GPIO_Init+0x2f4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8006a90:	4877      	ldr	r0, [pc, #476]	@ (8006c70 <MX_GPIO_Init+0x2f8>)
 8006a92:	f001 fd7d 	bl	8008590 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8006a96:	2201      	movs	r2, #1
 8006a98:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8006a9c:	4875      	ldr	r0, [pc, #468]	@ (8006c74 <MX_GPIO_Init+0x2fc>)
 8006a9e:	f001 fd77 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f242 0133 	movw	r1, #8243	@ 0x2033
 8006aa8:	4873      	ldr	r0, [pc, #460]	@ (8006c78 <MX_GPIO_Init+0x300>)
 8006aaa:	f001 fd71 	bl	8008590 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8006ab4:	486f      	ldr	r0, [pc, #444]	@ (8006c74 <MX_GPIO_Init+0x2fc>)
 8006ab6:	f001 fd6b 	bl	8008590 <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 8006aba:	2201      	movs	r2, #1
 8006abc:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8006ac0:	486e      	ldr	r0, [pc, #440]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006ac2:	f001 fd65 	bl	8008590 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8006acc:	486b      	ldr	r0, [pc, #428]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006ace:	f001 fd5f 	bl	8008590 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	486a      	ldr	r0, [pc, #424]	@ (8006c80 <MX_GPIO_Init+0x308>)
 8006ad8:	f001 fd5a 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8006adc:	2200      	movs	r2, #0
 8006ade:	2102      	movs	r1, #2
 8006ae0:	4867      	ldr	r0, [pc, #412]	@ (8006c80 <MX_GPIO_Init+0x308>)
 8006ae2:	f001 fd55 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 8006aec:	4865      	ldr	r0, [pc, #404]	@ (8006c84 <MX_GPIO_Init+0x30c>)
 8006aee:	f001 fd4f 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 8006af2:	2201      	movs	r2, #1
 8006af4:	f648 0103 	movw	r1, #34819	@ 0x8803
 8006af8:	4863      	ldr	r0, [pc, #396]	@ (8006c88 <MX_GPIO_Init+0x310>)
 8006afa:	f001 fd49 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 8006afe:	2201      	movs	r2, #1
 8006b00:	2103      	movs	r1, #3
 8006b02:	4862      	ldr	r0, [pc, #392]	@ (8006c8c <MX_GPIO_Init+0x314>)
 8006b04:	f001 fd44 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f648 0103 	movw	r1, #34819	@ 0x8803
 8006b0e:	4858      	ldr	r0, [pc, #352]	@ (8006c70 <MX_GPIO_Init+0x2f8>)
 8006b10:	f001 fd3e 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 8006b14:	2200      	movs	r2, #0
 8006b16:	f244 4138 	movw	r1, #17464	@ 0x4438
 8006b1a:	485b      	ldr	r0, [pc, #364]	@ (8006c88 <MX_GPIO_Init+0x310>)
 8006b1c:	f001 fd38 	bl	8008590 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8006b20:	2201      	movs	r2, #1
 8006b22:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8006b26:	4857      	ldr	r0, [pc, #348]	@ (8006c84 <MX_GPIO_Init+0x30c>)
 8006b28:	f001 fd32 	bl	8008590 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b32:	4857      	ldr	r0, [pc, #348]	@ (8006c90 <MX_GPIO_Init+0x318>)
 8006b34:	f001 fd2c 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f640 010c 	movw	r1, #2060	@ 0x80c
 8006b3e:	4854      	ldr	r0, [pc, #336]	@ (8006c90 <MX_GPIO_Init+0x318>)
 8006b40:	f001 fd26 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8006b44:	2200      	movs	r2, #0
 8006b46:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8006b4a:	4850      	ldr	r0, [pc, #320]	@ (8006c8c <MX_GPIO_Init+0x314>)
 8006b4c:	f001 fd20 	bl	8008590 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b56:	4848      	ldr	r0, [pc, #288]	@ (8006c78 <MX_GPIO_Init+0x300>)
 8006b58:	f001 fd1a 	bl	8008590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8006b5c:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b62:	2301      	movs	r3, #1
 8006b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b72:	4619      	mov	r1, r3
 8006b74:	483e      	ldr	r0, [pc, #248]	@ (8006c70 <MX_GPIO_Init+0x2f8>)
 8006b76:	f001 fb5f 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8006b7a:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b80:	2301      	movs	r3, #1
 8006b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b90:	4619      	mov	r1, r3
 8006b92:	4838      	ldr	r0, [pc, #224]	@ (8006c74 <MX_GPIO_Init+0x2fc>)
 8006b94:	f001 fb50 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8006b98:	f242 1330 	movw	r3, #8496	@ 0x2130
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4831      	ldr	r0, [pc, #196]	@ (8006c78 <MX_GPIO_Init+0x300>)
 8006bb2:	f001 fb41 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8006bb6:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bcc:	4619      	mov	r1, r3
 8006bce:	482b      	ldr	r0, [pc, #172]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006bd0:	f001 fb32 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006be0:	2302      	movs	r3, #2
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8006be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006be8:	4619      	mov	r1, r3
 8006bea:	4824      	ldr	r0, [pc, #144]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006bec:	f001 fb24 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8006bf0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c06:	4619      	mov	r1, r3
 8006c08:	481c      	ldr	r0, [pc, #112]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006c0a:	f001 fb15 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8006c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c14:	2301      	movs	r3, #1
 8006c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8006c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c24:	4619      	mov	r1, r3
 8006c26:	4815      	ldr	r0, [pc, #84]	@ (8006c7c <MX_GPIO_Init+0x304>)
 8006c28:	f001 fb06 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c30:	2301      	movs	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c34:	2302      	movs	r3, #2
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8006c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c40:	4619      	mov	r1, r3
 8006c42:	480d      	ldr	r0, [pc, #52]	@ (8006c78 <MX_GPIO_Init+0x300>)
 8006c44:	f001 faf8 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c50:	2301      	movs	r3, #1
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c54:	2303      	movs	r3, #3
 8006c56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8006c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4806      	ldr	r0, [pc, #24]	@ (8006c78 <MX_GPIO_Init+0x300>)
 8006c60:	f001 faea 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8006c64:	2301      	movs	r3, #1
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e013      	b.n	8006c94 <MX_GPIO_Init+0x31c>
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40021000 	.word	0x40021000
 8006c74:	40022000 	.word	0x40022000
 8006c78:	40020800 	.word	0x40020800
 8006c7c:	40021400 	.word	0x40021400
 8006c80:	40020000 	.word	0x40020000
 8006c84:	40021c00 	.word	0x40021c00
 8006c88:	40020400 	.word	0x40020400
 8006c8c:	40021800 	.word	0x40021800
 8006c90:	40020c00 	.word	0x40020c00
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c96:	2302      	movs	r3, #2
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8006c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	485c      	ldr	r0, [pc, #368]	@ (8006e18 <MX_GPIO_Init+0x4a0>)
 8006ca6:	f001 fac7 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8006caa:	2302      	movs	r3, #2
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4855      	ldr	r0, [pc, #340]	@ (8006e18 <MX_GPIO_Init+0x4a0>)
 8006cc2:	f001 fab9 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8006cc6:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cdc:	4619      	mov	r1, r3
 8006cde:	484f      	ldr	r0, [pc, #316]	@ (8006e1c <MX_GPIO_Init+0x4a4>)
 8006ce0:	f001 faaa 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8006ce4:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cea:	2301      	movs	r3, #1
 8006cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4848      	ldr	r0, [pc, #288]	@ (8006e20 <MX_GPIO_Init+0x4a8>)
 8006cfe:	f001 fa9b 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8006d02:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d10:	2300      	movs	r3, #0
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4842      	ldr	r0, [pc, #264]	@ (8006e24 <MX_GPIO_Init+0x4ac>)
 8006d1c:	f001 fa8c 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8006d20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d26:	2301      	movs	r3, #1
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8006d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d36:	4619      	mov	r1, r3
 8006d38:	4839      	ldr	r0, [pc, #228]	@ (8006e20 <MX_GPIO_Init+0x4a8>)
 8006d3a:	f001 fa7d 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8006d3e:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d44:	2301      	movs	r3, #1
 8006d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d54:	4619      	mov	r1, r3
 8006d56:	4831      	ldr	r0, [pc, #196]	@ (8006e1c <MX_GPIO_Init+0x4a4>)
 8006d58:	f001 fa6e 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8006d5c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d62:	2301      	movs	r3, #1
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d66:	2301      	movs	r3, #1
 8006d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d72:	4619      	mov	r1, r3
 8006d74:	4829      	ldr	r0, [pc, #164]	@ (8006e1c <MX_GPIO_Init+0x4a4>)
 8006d76:	f001 fa5f 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8006d7a:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d80:	2301      	movs	r3, #1
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d90:	4619      	mov	r1, r3
 8006d92:	4825      	ldr	r0, [pc, #148]	@ (8006e28 <MX_GPIO_Init+0x4b0>)
 8006d94:	f001 fa50 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8006d98:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dac:	4619      	mov	r1, r3
 8006dae:	481e      	ldr	r0, [pc, #120]	@ (8006e28 <MX_GPIO_Init+0x4b0>)
 8006db0:	f001 fa42 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8006db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8006dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4814      	ldr	r0, [pc, #80]	@ (8006e1c <MX_GPIO_Init+0x4a4>)
 8006dca:	f001 fa35 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8006dce:	23f0      	movs	r3, #240	@ 0xf0
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dde:	4619      	mov	r1, r3
 8006de0:	4811      	ldr	r0, [pc, #68]	@ (8006e28 <MX_GPIO_Init+0x4b0>)
 8006de2:	f001 fa29 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8006de6:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dec:	2300      	movs	r3, #0
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006df8:	4619      	mov	r1, r3
 8006dfa:	480a      	ldr	r0, [pc, #40]	@ (8006e24 <MX_GPIO_Init+0x4ac>)
 8006dfc:	f001 fa1c 	bl	8008238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	2028      	movs	r0, #40	@ 0x28
 8006e06:	f001 f94e 	bl	80080a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006e0a:	2028      	movs	r0, #40	@ 0x28
 8006e0c:	f001 f967 	bl	80080de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e10:	bf00      	nop
 8006e12:	3738      	adds	r7, #56	@ 0x38
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40020000 	.word	0x40020000
 8006e1c:	40021c00 	.word	0x40021c00
 8006e20:	40020400 	.word	0x40020400
 8006e24:	40021800 	.word	0x40021800
 8006e28:	40020c00 	.word	0x40020c00

08006e2c <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fa f993 	bl	8001164 <Push_ButtonHandler>
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e46:	b480      	push	{r7}
 8006e48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4a:	b672      	cpsid	i
}
 8006e4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <Error_Handler+0x8>
	...

08006e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e86:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <HAL_MspInit+0x4c>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800

08006ea4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	@ 0x30
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eac:	f107 031c 	add.w	r3, r7, #28
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8006fec <HAL_CAN_MspInit+0x148>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d145      	bne.n	8006f52 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	4a48      	ldr	r2, [pc, #288]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006ece:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006ed0:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d10d      	bne.n	8006ef4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	4b45      	ldr	r3, [pc, #276]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee0:	4a44      	ldr	r2, [pc, #272]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ee8:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006efe:	f043 0308 	orr.w	r3, r3, #8
 8006f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f04:	4b3b      	ldr	r3, [pc, #236]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006f10:	2303      	movs	r3, #3
 8006f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f14:	2302      	movs	r3, #2
 8006f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006f20:	2309      	movs	r3, #9
 8006f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4833      	ldr	r0, [pc, #204]	@ (8006ff8 <HAL_CAN_MspInit+0x154>)
 8006f2c:	f001 f984 	bl	8008238 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	2014      	movs	r0, #20
 8006f36:	f001 f8b6 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006f3a:	2014      	movs	r0, #20
 8006f3c:	f001 f8cf 	bl	80080de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2100      	movs	r1, #0
 8006f44:	2015      	movs	r0, #21
 8006f46:	f001 f8ae 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006f4a:	2015      	movs	r0, #21
 8006f4c:	f001 f8c7 	bl	80080de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8006f50:	e048      	b.n	8006fe4 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a29      	ldr	r2, [pc, #164]	@ (8006ffc <HAL_CAN_MspInit+0x158>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d143      	bne.n	8006fe4 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	4b24      	ldr	r3, [pc, #144]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	4a23      	ldr	r2, [pc, #140]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f6c:	4b21      	ldr	r3, [pc, #132]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006f78:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006f80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006f82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff0 <HAL_CAN_MspInit+0x14c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d10d      	bne.n	8006fa6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f92:	4a18      	ldr	r2, [pc, #96]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f9a:	4b16      	ldr	r3, [pc, #88]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fae:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff4 <HAL_CAN_MspInit+0x150>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006fc2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006fd4:	2309      	movs	r3, #9
 8006fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd8:	f107 031c 	add.w	r3, r7, #28
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4808      	ldr	r0, [pc, #32]	@ (8007000 <HAL_CAN_MspInit+0x15c>)
 8006fe0:	f001 f92a 	bl	8008238 <HAL_GPIO_Init>
}
 8006fe4:	bf00      	nop
 8006fe6:	3730      	adds	r7, #48	@ 0x30
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40006400 	.word	0x40006400
 8006ff0:	20001698 	.word	0x20001698
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40020c00 	.word	0x40020c00
 8006ffc:	40006800 	.word	0x40006800
 8007000:	40020400 	.word	0x40020400

08007004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08e      	sub	sp, #56	@ 0x38
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800700c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a4c      	ldr	r2, [pc, #304]	@ (8007154 <HAL_I2C_MspInit+0x150>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d12d      	bne.n	8007082 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007026:	2300      	movs	r3, #0
 8007028:	623b      	str	r3, [r7, #32]
 800702a:	4b4b      	ldr	r3, [pc, #300]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702e:	4a4a      	ldr	r2, [pc, #296]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007030:	f043 0302 	orr.w	r3, r3, #2
 8007034:	6313      	str	r3, [r2, #48]	@ 0x30
 8007036:	4b48      	ldr	r3, [pc, #288]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007042:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007048:	2312      	movs	r3, #18
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704c:	2300      	movs	r3, #0
 800704e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007050:	2303      	movs	r3, #3
 8007052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007054:	2304      	movs	r3, #4
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800705c:	4619      	mov	r1, r3
 800705e:	483f      	ldr	r0, [pc, #252]	@ (800715c <HAL_I2C_MspInit+0x158>)
 8007060:	f001 f8ea 	bl	8008238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	4b3b      	ldr	r3, [pc, #236]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	4a3a      	ldr	r2, [pc, #232]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 800706e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007072:	6413      	str	r3, [r2, #64]	@ 0x40
 8007074:	4b38      	ldr	r3, [pc, #224]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007080:	e063      	b.n	800714a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a36      	ldr	r2, [pc, #216]	@ (8007160 <HAL_I2C_MspInit+0x15c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d12c      	bne.n	80070e6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800708c:	2300      	movs	r3, #0
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	4a30      	ldr	r2, [pc, #192]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709a:	6313      	str	r3, [r2, #48]	@ 0x30
 800709c:	4b2e      	ldr	r3, [pc, #184]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80070a8:	2330      	movs	r3, #48	@ 0x30
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070ac:	2312      	movs	r3, #18
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b4:	2303      	movs	r3, #3
 80070b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80070b8:	2304      	movs	r3, #4
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80070bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070c0:	4619      	mov	r1, r3
 80070c2:	4828      	ldr	r0, [pc, #160]	@ (8007164 <HAL_I2C_MspInit+0x160>)
 80070c4:	f001 f8b8 	bl	8008238 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	4b22      	ldr	r3, [pc, #136]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	4a21      	ldr	r2, [pc, #132]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 80070d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80070d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 80070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	697b      	ldr	r3, [r7, #20]
}
 80070e4:	e031      	b.n	800714a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007168 <HAL_I2C_MspInit+0x164>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d12c      	bne.n	800714a <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	4b18      	ldr	r3, [pc, #96]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f8:	4a17      	ldr	r2, [pc, #92]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 80070fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8007100:	4b15      	ldr	r3, [pc, #84]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800710c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007112:	2312      	movs	r3, #18
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007116:	2300      	movs	r3, #0
 8007118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711a:	2303      	movs	r3, #3
 800711c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800711e:	2304      	movs	r3, #4
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007126:	4619      	mov	r1, r3
 8007128:	480e      	ldr	r0, [pc, #56]	@ (8007164 <HAL_I2C_MspInit+0x160>)
 800712a:	f001 f885 	bl	8008238 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	4a08      	ldr	r2, [pc, #32]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007138:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800713c:	6413      	str	r3, [r2, #64]	@ 0x40
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <HAL_I2C_MspInit+0x154>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	bf00      	nop
 800714c:	3738      	adds	r7, #56	@ 0x38
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40005400 	.word	0x40005400
 8007158:	40023800 	.word	0x40023800
 800715c:	40020400 	.word	0x40020400
 8007160:	40005800 	.word	0x40005800
 8007164:	40021c00 	.word	0x40021c00
 8007168:	40005c00 	.word	0x40005c00

0800716c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b090      	sub	sp, #64	@ 0x40
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a6d      	ldr	r2, [pc, #436]	@ (8007340 <HAL_SPI_MspInit+0x1d4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d12c      	bne.n	80071e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800718e:	2300      	movs	r3, #0
 8007190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007192:	4b6c      	ldr	r3, [pc, #432]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007196:	4a6b      	ldr	r2, [pc, #428]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007198:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800719c:	6453      	str	r3, [r2, #68]	@ 0x44
 800719e:	4b69      	ldr	r3, [pc, #420]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ae:	4b65      	ldr	r3, [pc, #404]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	4a64      	ldr	r2, [pc, #400]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80071ba:	4b62      	ldr	r3, [pc, #392]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071c6:	23e0      	movs	r3, #224	@ 0xe0
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ca:	2302      	movs	r3, #2
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d2:	2303      	movs	r3, #3
 80071d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80071d6:	2305      	movs	r3, #5
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80071de:	4619      	mov	r1, r3
 80071e0:	4859      	ldr	r0, [pc, #356]	@ (8007348 <HAL_SPI_MspInit+0x1dc>)
 80071e2:	f001 f829 	bl	8008238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80071e6:	e0a7      	b.n	8007338 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a57      	ldr	r2, [pc, #348]	@ (800734c <HAL_SPI_MspInit+0x1e0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d12c      	bne.n	800724c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	623b      	str	r3, [r7, #32]
 80071f6:	4b53      	ldr	r3, [pc, #332]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fa:	4a52      	ldr	r2, [pc, #328]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80071fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007200:	6413      	str	r3, [r2, #64]	@ 0x40
 8007202:	4b50      	ldr	r3, [pc, #320]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800720e:	2300      	movs	r3, #0
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	4b4c      	ldr	r3, [pc, #304]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007216:	4a4b      	ldr	r2, [pc, #300]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800721c:	6313      	str	r3, [r2, #48]	@ 0x30
 800721e:	4b49      	ldr	r3, [pc, #292]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800722a:	230e      	movs	r3, #14
 800722c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800722e:	2302      	movs	r3, #2
 8007230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007232:	2300      	movs	r3, #0
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007236:	2303      	movs	r3, #3
 8007238:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800723a:	2305      	movs	r3, #5
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800723e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007242:	4619      	mov	r1, r3
 8007244:	4842      	ldr	r0, [pc, #264]	@ (8007350 <HAL_SPI_MspInit+0x1e4>)
 8007246:	f000 fff7 	bl	8008238 <HAL_GPIO_Init>
}
 800724a:	e075      	b.n	8007338 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a40      	ldr	r2, [pc, #256]	@ (8007354 <HAL_SPI_MspInit+0x1e8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d12d      	bne.n	80072b2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007256:	2300      	movs	r3, #0
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	4b3a      	ldr	r3, [pc, #232]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	4a39      	ldr	r2, [pc, #228]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007264:	6413      	str	r3, [r2, #64]	@ 0x40
 8007266:	4b37      	ldr	r3, [pc, #220]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	4b33      	ldr	r3, [pc, #204]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	4a32      	ldr	r2, [pc, #200]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 800727c:	f043 0304 	orr.w	r3, r3, #4
 8007280:	6313      	str	r3, [r2, #48]	@ 0x30
 8007282:	4b30      	ldr	r3, [pc, #192]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800728e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007294:	2302      	movs	r3, #2
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729c:	2303      	movs	r3, #3
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072a0:	2306      	movs	r3, #6
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80072a8:	4619      	mov	r1, r3
 80072aa:	482b      	ldr	r0, [pc, #172]	@ (8007358 <HAL_SPI_MspInit+0x1ec>)
 80072ac:	f000 ffc4 	bl	8008238 <HAL_GPIO_Init>
}
 80072b0:	e042      	b.n	8007338 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a29      	ldr	r2, [pc, #164]	@ (800735c <HAL_SPI_MspInit+0x1f0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d13d      	bne.n	8007338 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	4b20      	ldr	r3, [pc, #128]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80072cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e0:	4a18      	ldr	r2, [pc, #96]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072e2:	f043 0310 	orr.w	r3, r3, #16
 80072e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80072e8:	4b16      	ldr	r3, [pc, #88]	@ (8007344 <HAL_SPI_MspInit+0x1d8>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80072f4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fa:	2302      	movs	r3, #2
 80072fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007302:	2303      	movs	r3, #3
 8007304:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007306:	2305      	movs	r3, #5
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800730a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800730e:	4619      	mov	r1, r3
 8007310:	4813      	ldr	r0, [pc, #76]	@ (8007360 <HAL_SPI_MspInit+0x1f4>)
 8007312:	f000 ff91 	bl	8008238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800731c:	2302      	movs	r3, #2
 800731e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007320:	2301      	movs	r3, #1
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007324:	2303      	movs	r3, #3
 8007326:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007328:	2305      	movs	r3, #5
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800732c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007330:	4619      	mov	r1, r3
 8007332:	480b      	ldr	r0, [pc, #44]	@ (8007360 <HAL_SPI_MspInit+0x1f4>)
 8007334:	f000 ff80 	bl	8008238 <HAL_GPIO_Init>
}
 8007338:	bf00      	nop
 800733a:	3740      	adds	r7, #64	@ 0x40
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40013000 	.word	0x40013000
 8007344:	40023800 	.word	0x40023800
 8007348:	40020000 	.word	0x40020000
 800734c:	40003800 	.word	0x40003800
 8007350:	40022000 	.word	0x40022000
 8007354:	40003c00 	.word	0x40003c00
 8007358:	40020800 	.word	0x40020800
 800735c:	40013400 	.word	0x40013400
 8007360:	40021000 	.word	0x40021000

08007364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b090      	sub	sp, #64	@ 0x40
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a74      	ldr	r2, [pc, #464]	@ (8007554 <HAL_UART_MspInit+0x1f0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d134      	bne.n	80073f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007386:	2300      	movs	r3, #0
 8007388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800738a:	4b73      	ldr	r3, [pc, #460]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	4a72      	ldr	r2, [pc, #456]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007390:	f043 0310 	orr.w	r3, r3, #16
 8007394:	6453      	str	r3, [r2, #68]	@ 0x44
 8007396:	4b70      	ldr	r3, [pc, #448]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073aa:	4a6b      	ldr	r2, [pc, #428]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80073b2:	4b69      	ldr	r3, [pc, #420]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073be:	23c0      	movs	r3, #192	@ 0xc0
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c2:	2302      	movs	r3, #2
 80073c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ca:	2303      	movs	r3, #3
 80073cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073ce:	2307      	movs	r3, #7
 80073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80073d6:	4619      	mov	r1, r3
 80073d8:	4860      	ldr	r0, [pc, #384]	@ (800755c <HAL_UART_MspInit+0x1f8>)
 80073da:	f000 ff2d 	bl	8008238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	2025      	movs	r0, #37	@ 0x25
 80073e4:	f000 fe5f 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073e8:	2025      	movs	r0, #37	@ 0x25
 80073ea:	f000 fe78 	bl	80080de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80073ee:	e0ad      	b.n	800754c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a5a      	ldr	r2, [pc, #360]	@ (8007560 <HAL_UART_MspInit+0x1fc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d134      	bne.n	8007464 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	4b56      	ldr	r3, [pc, #344]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	4a55      	ldr	r2, [pc, #340]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007408:	6413      	str	r3, [r2, #64]	@ 0x40
 800740a:	4b53      	ldr	r3, [pc, #332]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	4b4f      	ldr	r3, [pc, #316]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	4a4e      	ldr	r2, [pc, #312]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6313      	str	r3, [r2, #48]	@ 0x30
 8007426:	4b4c      	ldr	r3, [pc, #304]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007432:	230c      	movs	r3, #12
 8007434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007436:	2302      	movs	r3, #2
 8007438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	2300      	movs	r3, #0
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800743e:	2303      	movs	r3, #3
 8007440:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007442:	2307      	movs	r3, #7
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800744a:	4619      	mov	r1, r3
 800744c:	4845      	ldr	r0, [pc, #276]	@ (8007564 <HAL_UART_MspInit+0x200>)
 800744e:	f000 fef3 	bl	8008238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	2026      	movs	r0, #38	@ 0x26
 8007458:	f000 fe25 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800745c:	2026      	movs	r0, #38	@ 0x26
 800745e:	f000 fe3e 	bl	80080de <HAL_NVIC_EnableIRQ>
}
 8007462:	e073      	b.n	800754c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a3f      	ldr	r2, [pc, #252]	@ (8007568 <HAL_UART_MspInit+0x204>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d135      	bne.n	80074da <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	4b39      	ldr	r3, [pc, #228]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	4a38      	ldr	r2, [pc, #224]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800747c:	6413      	str	r3, [r2, #64]	@ 0x40
 800747e:	4b36      	ldr	r3, [pc, #216]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	4b32      	ldr	r3, [pc, #200]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	4a31      	ldr	r2, [pc, #196]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007494:	f043 0308 	orr.w	r3, r3, #8
 8007498:	6313      	str	r3, [r2, #48]	@ 0x30
 800749a:	4b2f      	ldr	r3, [pc, #188]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80074a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80074aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	2302      	movs	r3, #2
 80074ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b4:	2303      	movs	r3, #3
 80074b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80074b8:	2307      	movs	r3, #7
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074c0:	4619      	mov	r1, r3
 80074c2:	482a      	ldr	r0, [pc, #168]	@ (800756c <HAL_UART_MspInit+0x208>)
 80074c4:	f000 feb8 	bl	8008238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	2027      	movs	r0, #39	@ 0x27
 80074ce:	f000 fdea 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80074d2:	2027      	movs	r0, #39	@ 0x27
 80074d4:	f000 fe03 	bl	80080de <HAL_NVIC_EnableIRQ>
}
 80074d8:	e038      	b.n	800754c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a24      	ldr	r2, [pc, #144]	@ (8007570 <HAL_UART_MspInit+0x20c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d133      	bne.n	800754c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80074ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80074ee:	f043 0320 	orr.w	r3, r3, #32
 80074f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80074f4:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 80074f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007508:	4a13      	ldr	r2, [pc, #76]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 800750a:	f043 0304 	orr.w	r3, r3, #4
 800750e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007510:	4b11      	ldr	r3, [pc, #68]	@ (8007558 <HAL_UART_MspInit+0x1f4>)
 8007512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800751c:	23c0      	movs	r3, #192	@ 0xc0
 800751e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007520:	2302      	movs	r3, #2
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007524:	2300      	movs	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007528:	2303      	movs	r3, #3
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800752c:	2308      	movs	r3, #8
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007534:	4619      	mov	r1, r3
 8007536:	480f      	ldr	r0, [pc, #60]	@ (8007574 <HAL_UART_MspInit+0x210>)
 8007538:	f000 fe7e 	bl	8008238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800753c:	2200      	movs	r2, #0
 800753e:	2100      	movs	r1, #0
 8007540:	2047      	movs	r0, #71	@ 0x47
 8007542:	f000 fdb0 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007546:	2047      	movs	r0, #71	@ 0x47
 8007548:	f000 fdc9 	bl	80080de <HAL_NVIC_EnableIRQ>
}
 800754c:	bf00      	nop
 800754e:	3740      	adds	r7, #64	@ 0x40
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40011000 	.word	0x40011000
 8007558:	40023800 	.word	0x40023800
 800755c:	40020400 	.word	0x40020400
 8007560:	40004400 	.word	0x40004400
 8007564:	40020000 	.word	0x40020000
 8007568:	40004800 	.word	0x40004800
 800756c:	40020c00 	.word	0x40020c00
 8007570:	40011400 	.word	0x40011400
 8007574:	40020800 	.word	0x40020800

08007578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800757c:	bf00      	nop
 800757e:	e7fd      	b.n	800757c <NMI_Handler+0x4>

08007580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <HardFault_Handler+0x4>

08007588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <MemManage_Handler+0x4>

08007590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <BusFault_Handler+0x4>

08007598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <UsageFault_Handler+0x4>

080075a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075ae:	b480      	push	{r7}
 80075b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075c0:	bf00      	nop
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075ce:	f000 f917 	bl	8007800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80075dc:	4802      	ldr	r0, [pc, #8]	@ (80075e8 <CAN1_RX0_IRQHandler+0x10>)
 80075de:	f000 fa4e 	bl	8007a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80075e2:	bf00      	nop
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200012a8 	.word	0x200012a8

080075ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80075f0:	4802      	ldr	r0, [pc, #8]	@ (80075fc <CAN1_RX1_IRQHandler+0x10>)
 80075f2:	f000 fa44 	bl	8007a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80075f6:	bf00      	nop
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200012a8 	.word	0x200012a8

08007600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007604:	4802      	ldr	r0, [pc, #8]	@ (8007610 <USART1_IRQHandler+0x10>)
 8007606:	f003 fc11 	bl	800ae2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800760a:	bf00      	nop
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20001554 	.word	0x20001554

08007614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007618:	4802      	ldr	r0, [pc, #8]	@ (8007624 <USART2_IRQHandler+0x10>)
 800761a:	f003 fc07 	bl	800ae2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800761e:	bf00      	nop
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	2000159c 	.word	0x2000159c

08007628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800762c:	4802      	ldr	r0, [pc, #8]	@ (8007638 <USART3_IRQHandler+0x10>)
 800762e:	f003 fbfd 	bl	800ae2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007632:	bf00      	nop
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200015e4 	.word	0x200015e4

0800763c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8007640:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007644:	f000 ffd8 	bl	80085f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 8007648:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800764c:	f000 ffd4 	bl	80085f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8007650:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007654:	f000 ffd0 	bl	80085f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 8007658:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800765c:	f000 ffcc 	bl	80085f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007660:	bf00      	nop
 8007662:	bd80      	pop	{r7, pc}

08007664 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007668:	4802      	ldr	r0, [pc, #8]	@ (8007674 <USART6_IRQHandler+0x10>)
 800766a:	f003 fbdf 	bl	800ae2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800766e:	bf00      	nop
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000162c 	.word	0x2000162c

08007678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007680:	4a14      	ldr	r2, [pc, #80]	@ (80076d4 <_sbrk+0x5c>)
 8007682:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <_sbrk+0x60>)
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800768c:	4b13      	ldr	r3, [pc, #76]	@ (80076dc <_sbrk+0x64>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007694:	4b11      	ldr	r3, [pc, #68]	@ (80076dc <_sbrk+0x64>)
 8007696:	4a12      	ldr	r2, [pc, #72]	@ (80076e0 <_sbrk+0x68>)
 8007698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800769a:	4b10      	ldr	r3, [pc, #64]	@ (80076dc <_sbrk+0x64>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d207      	bcs.n	80076b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076a8:	f004 fcd0 	bl	800c04c <__errno>
 80076ac:	4603      	mov	r3, r0
 80076ae:	220c      	movs	r2, #12
 80076b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
 80076b6:	e009      	b.n	80076cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076b8:	4b08      	ldr	r3, [pc, #32]	@ (80076dc <_sbrk+0x64>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076be:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <_sbrk+0x64>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	4a05      	ldr	r2, [pc, #20]	@ (80076dc <_sbrk+0x64>)
 80076c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20030000 	.word	0x20030000
 80076d8:	00000400 	.word	0x00000400
 80076dc:	2000169c 	.word	0x2000169c
 80076e0:	20001800 	.word	0x20001800

080076e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80076e8:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <SystemInit+0x20>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ee:	4a05      	ldr	r2, [pc, #20]	@ (8007704 <SystemInit+0x20>)
 80076f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	e000ed00 	.word	0xe000ed00

08007708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007740 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800770c:	f7ff ffea 	bl	80076e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007710:	480c      	ldr	r0, [pc, #48]	@ (8007744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007712:	490d      	ldr	r1, [pc, #52]	@ (8007748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007714:	4a0d      	ldr	r2, [pc, #52]	@ (800774c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007718:	e002      	b.n	8007720 <LoopCopyDataInit>

0800771a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800771a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800771c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800771e:	3304      	adds	r3, #4

08007720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007724:	d3f9      	bcc.n	800771a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007726:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007728:	4c0a      	ldr	r4, [pc, #40]	@ (8007754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800772a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800772c:	e001      	b.n	8007732 <LoopFillZerobss>

0800772e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800772e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007730:	3204      	adds	r2, #4

08007732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007734:	d3fb      	bcc.n	800772e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007736:	f004 fc8f 	bl	800c058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800773a:	f7fe fcd5 	bl	80060e8 <main>
  bx  lr    
 800773e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007740:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007748:	20000984 	.word	0x20000984
  ldr r2, =_sidata
 800774c:	0800db5c 	.word	0x0800db5c
  ldr r2, =_sbss
 8007750:	20000984 	.word	0x20000984
  ldr r4, =_ebss
 8007754:	20001800 	.word	0x20001800

08007758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007758:	e7fe      	b.n	8007758 <ADC_IRQHandler>
	...

0800775c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007760:	4b0e      	ldr	r3, [pc, #56]	@ (800779c <HAL_Init+0x40>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0d      	ldr	r2, [pc, #52]	@ (800779c <HAL_Init+0x40>)
 8007766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800776a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800776c:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <HAL_Init+0x40>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0a      	ldr	r2, [pc, #40]	@ (800779c <HAL_Init+0x40>)
 8007772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007778:	4b08      	ldr	r3, [pc, #32]	@ (800779c <HAL_Init+0x40>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a07      	ldr	r2, [pc, #28]	@ (800779c <HAL_Init+0x40>)
 800777e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007784:	2003      	movs	r0, #3
 8007786:	f000 fc83 	bl	8008090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800778a:	200f      	movs	r0, #15
 800778c:	f000 f808 	bl	80077a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007790:	f7ff fb60 	bl	8006e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40023c00 	.word	0x40023c00

080077a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077a8:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <HAL_InitTick+0x54>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <HAL_InitTick+0x58>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fc9b 	bl	80080fa <HAL_SYSTICK_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e00e      	b.n	80077ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b0f      	cmp	r3, #15
 80077d2:	d80a      	bhi.n	80077ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077d4:	2200      	movs	r2, #0
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	f000 fc63 	bl	80080a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077e0:	4a06      	ldr	r2, [pc, #24]	@ (80077fc <HAL_InitTick+0x5c>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000914 	.word	0x20000914
 80077f8:	2000091c 	.word	0x2000091c
 80077fc:	20000918 	.word	0x20000918

08007800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007804:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <HAL_IncTick+0x20>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <HAL_IncTick+0x24>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4413      	add	r3, r2
 8007810:	4a04      	ldr	r2, [pc, #16]	@ (8007824 <HAL_IncTick+0x24>)
 8007812:	6013      	str	r3, [r2, #0]
}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	2000091c 	.word	0x2000091c
 8007824:	200016a0 	.word	0x200016a0

08007828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return uwTick;
 800782c:	4b03      	ldr	r3, [pc, #12]	@ (800783c <HAL_GetTick+0x14>)
 800782e:	681b      	ldr	r3, [r3, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	200016a0 	.word	0x200016a0

08007840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007848:	f7ff ffee 	bl	8007828 <HAL_GetTick>
 800784c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d005      	beq.n	8007866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800785a:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <HAL_Delay+0x44>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007866:	bf00      	nop
 8007868:	f7ff ffde 	bl	8007828 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	429a      	cmp	r2, r3
 8007876:	d8f7      	bhi.n	8007868 <HAL_Delay+0x28>
  {
  }
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	2000091c 	.word	0x2000091c

08007888 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e0ed      	b.n	8007a76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fafc 	bl	8006ea4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078bc:	f7ff ffb4 	bl	8007828 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078c2:	e012      	b.n	80078ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078c4:	f7ff ffb0 	bl	8007828 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b0a      	cmp	r3, #10
 80078d0:	d90b      	bls.n	80078ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2205      	movs	r2, #5
 80078e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e0c5      	b.n	8007a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0e5      	beq.n	80078c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0202 	bic.w	r2, r2, #2
 8007906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007908:	f7ff ff8e 	bl	8007828 <HAL_GetTick>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800790e:	e012      	b.n	8007936 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007910:	f7ff ff8a 	bl	8007828 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d90b      	bls.n	8007936 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2205      	movs	r2, #5
 800792e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e09f      	b.n	8007a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e5      	bne.n	8007910 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7e1b      	ldrb	r3, [r3, #24]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d108      	bne.n	800795e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	e007      	b.n	800796e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7e5b      	ldrb	r3, [r3, #25]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d108      	bne.n	8007988 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e007      	b.n	8007998 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7e9b      	ldrb	r3, [r3, #26]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d108      	bne.n	80079b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0220 	orr.w	r2, r2, #32
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e007      	b.n	80079c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0220 	bic.w	r2, r2, #32
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7edb      	ldrb	r3, [r3, #27]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d108      	bne.n	80079dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0210 	bic.w	r2, r2, #16
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	e007      	b.n	80079ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0210 	orr.w	r2, r2, #16
 80079ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7f1b      	ldrb	r3, [r3, #28]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d108      	bne.n	8007a06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0208 	orr.w	r2, r2, #8
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e007      	b.n	8007a16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0208 	bic.w	r2, r2, #8
 8007a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7f5b      	ldrb	r3, [r3, #29]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d108      	bne.n	8007a30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0204 	orr.w	r2, r2, #4
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e007      	b.n	8007a40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0204 	bic.w	r2, r2, #4
 8007a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	ea42 0103 	orr.w	r1, r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b08a      	sub	sp, #40	@ 0x28
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d07c      	beq.n	8007bbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d023      	beq.n	8007b16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f983 	bl	8007dec <HAL_CAN_TxMailbox0CompleteCallback>
 8007ae6:	e016      	b.n	8007b16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afa:	e00c      	b.n	8007b16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0e:	e002      	b.n	8007b16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f989 	bl	8007e28 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d024      	beq.n	8007b6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f963 	bl	8007e00 <HAL_CAN_TxMailbox1CompleteCallback>
 8007b3a:	e016      	b.n	8007b6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4e:	e00c      	b.n	8007b6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b62:	e002      	b.n	8007b6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f969 	bl	8007e3c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d024      	beq.n	8007bbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f943 	bl	8007e14 <HAL_CAN_TxMailbox2CompleteCallback>
 8007b8e:	e016      	b.n	8007bbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba2:	e00c      	b.n	8007bbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bb6:	e002      	b.n	8007bbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f949 	bl	8007e50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2210      	movs	r2, #16
 8007be0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d006      	beq.n	8007c04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f93a 	bl	8007e78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f921 	bl	8007e64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2210      	movs	r2, #16
 8007c44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d006      	beq.n	8007c68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f91c 	bl	8007ea0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f903 	bl	8007e8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d006      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f906 	bl	8007eb4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d006      	beq.n	8007cca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8ff 	bl	8007ec8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d07b      	beq.n	8007dcc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d072      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	f043 0304 	orr.w	r3, r3, #4
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d043      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d03e      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d4c:	2b60      	cmp	r3, #96	@ 0x60
 8007d4e:	d02b      	beq.n	8007da8 <HAL_CAN_IRQHandler+0x32a>
 8007d50:	2b60      	cmp	r3, #96	@ 0x60
 8007d52:	d82e      	bhi.n	8007db2 <HAL_CAN_IRQHandler+0x334>
 8007d54:	2b50      	cmp	r3, #80	@ 0x50
 8007d56:	d022      	beq.n	8007d9e <HAL_CAN_IRQHandler+0x320>
 8007d58:	2b50      	cmp	r3, #80	@ 0x50
 8007d5a:	d82a      	bhi.n	8007db2 <HAL_CAN_IRQHandler+0x334>
 8007d5c:	2b40      	cmp	r3, #64	@ 0x40
 8007d5e:	d019      	beq.n	8007d94 <HAL_CAN_IRQHandler+0x316>
 8007d60:	2b40      	cmp	r3, #64	@ 0x40
 8007d62:	d826      	bhi.n	8007db2 <HAL_CAN_IRQHandler+0x334>
 8007d64:	2b30      	cmp	r3, #48	@ 0x30
 8007d66:	d010      	beq.n	8007d8a <HAL_CAN_IRQHandler+0x30c>
 8007d68:	2b30      	cmp	r3, #48	@ 0x30
 8007d6a:	d822      	bhi.n	8007db2 <HAL_CAN_IRQHandler+0x334>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d002      	beq.n	8007d76 <HAL_CAN_IRQHandler+0x2f8>
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d005      	beq.n	8007d80 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007d74:	e01d      	b.n	8007db2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007d7e:	e019      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	f043 0310 	orr.w	r3, r3, #16
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007d88:	e014      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	f043 0320 	orr.w	r3, r3, #32
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007d92:	e00f      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007d9c:	e00a      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007da6:	e005      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007db0:	e000      	b.n	8007db4 <HAL_CAN_IRQHandler+0x336>
            break;
 8007db2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007dc2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f87c 	bl	8007edc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007de4:	bf00      	nop
 8007de6:	3728      	adds	r7, #40	@ 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f00:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <__NVIC_SetPriorityGrouping+0x44>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f22:	4a04      	ldr	r2, [pc, #16]	@ (8007f34 <__NVIC_SetPriorityGrouping+0x44>)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	60d3      	str	r3, [r2, #12]
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	e000ed00 	.word	0xe000ed00

08007f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__NVIC_GetPriorityGrouping+0x18>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	f003 0307 	and.w	r3, r3, #7
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	e000ed00 	.word	0xe000ed00

08007f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	db0b      	blt.n	8007f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	f003 021f 	and.w	r2, r3, #31
 8007f6c:	4907      	ldr	r1, [pc, #28]	@ (8007f8c <__NVIC_EnableIRQ+0x38>)
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	2001      	movs	r0, #1
 8007f76:	fa00 f202 	lsl.w	r2, r0, r2
 8007f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	e000e100 	.word	0xe000e100

08007f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	db0a      	blt.n	8007fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	490c      	ldr	r1, [pc, #48]	@ (8007fdc <__NVIC_SetPriority+0x4c>)
 8007faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fae:	0112      	lsls	r2, r2, #4
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fb8:	e00a      	b.n	8007fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	4908      	ldr	r1, [pc, #32]	@ (8007fe0 <__NVIC_SetPriority+0x50>)
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	3b04      	subs	r3, #4
 8007fc8:	0112      	lsls	r2, r2, #4
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	440b      	add	r3, r1
 8007fce:	761a      	strb	r2, [r3, #24]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	e000e100 	.word	0xe000e100
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b089      	sub	sp, #36	@ 0x24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	f1c3 0307 	rsb	r3, r3, #7
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	bf28      	it	cs
 8008002:	2304      	movcs	r3, #4
 8008004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3304      	adds	r3, #4
 800800a:	2b06      	cmp	r3, #6
 800800c:	d902      	bls.n	8008014 <NVIC_EncodePriority+0x30>
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	3b03      	subs	r3, #3
 8008012:	e000      	b.n	8008016 <NVIC_EncodePriority+0x32>
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	43da      	mvns	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	401a      	ands	r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800802c:	f04f 31ff 	mov.w	r1, #4294967295
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	fa01 f303 	lsl.w	r3, r1, r3
 8008036:	43d9      	mvns	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800803c:	4313      	orrs	r3, r2
         );
}
 800803e:	4618      	mov	r0, r3
 8008040:	3724      	adds	r7, #36	@ 0x24
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3b01      	subs	r3, #1
 8008058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800805c:	d301      	bcc.n	8008062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800805e:	2301      	movs	r3, #1
 8008060:	e00f      	b.n	8008082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008062:	4a0a      	ldr	r2, [pc, #40]	@ (800808c <SysTick_Config+0x40>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3b01      	subs	r3, #1
 8008068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800806a:	210f      	movs	r1, #15
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	f7ff ff8e 	bl	8007f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <SysTick_Config+0x40>)
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800807a:	4b04      	ldr	r3, [pc, #16]	@ (800808c <SysTick_Config+0x40>)
 800807c:	2207      	movs	r2, #7
 800807e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	e000e010 	.word	0xe000e010

08008090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff29 	bl	8007ef0 <__NVIC_SetPriorityGrouping>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	4603      	mov	r3, r0
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080b8:	f7ff ff3e 	bl	8007f38 <__NVIC_GetPriorityGrouping>
 80080bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	f7ff ff8e 	bl	8007fe4 <NVIC_EncodePriority>
 80080c8:	4602      	mov	r2, r0
 80080ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff ff5d 	bl	8007f90 <__NVIC_SetPriority>
}
 80080d6:	bf00      	nop
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	4603      	mov	r3, r0
 80080e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff31 	bl	8007f54 <__NVIC_EnableIRQ>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ffa2 	bl	800804c <SysTick_Config>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008120:	f7ff fb82 	bl	8007828 <HAL_GetTick>
 8008124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d008      	beq.n	8008144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2280      	movs	r2, #128	@ 0x80
 8008136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e052      	b.n	80081ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0216 	bic.w	r2, r2, #22
 8008152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695a      	ldr	r2, [r3, #20]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <HAL_DMA_Abort+0x62>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0208 	bic.w	r2, r2, #8
 8008182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0201 	bic.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008194:	e013      	b.n	80081be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008196:	f7ff fb47 	bl	8007828 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d90c      	bls.n	80081be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2203      	movs	r2, #3
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e015      	b.n	80081ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e4      	bne.n	8008196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081d0:	223f      	movs	r2, #63	@ 0x3f
 80081d2:	409a      	lsls	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d004      	beq.n	8008210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2280      	movs	r2, #128	@ 0x80
 800820a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e00c      	b.n	800822a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2205      	movs	r2, #5
 8008214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	@ 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800824a:	2300      	movs	r3, #0
 800824c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	e177      	b.n	8008544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008254:	2201      	movs	r2, #1
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4013      	ands	r3, r2
 8008266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	429a      	cmp	r2, r3
 800826e:	f040 8166 	bne.w	800853e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b01      	cmp	r3, #1
 800827c:	d005      	beq.n	800828a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008286:	2b02      	cmp	r3, #2
 8008288:	d130      	bne.n	80082ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	2203      	movs	r2, #3
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	43db      	mvns	r3, r3
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4013      	ands	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082c0:	2201      	movs	r2, #1
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	4013      	ands	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	091b      	lsrs	r3, r3, #4
 80082d6:	f003 0201 	and.w	r2, r3, #1
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d017      	beq.n	8008328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	2203      	movs	r2, #3
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4013      	ands	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	4313      	orrs	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d123      	bne.n	800837c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	08da      	lsrs	r2, r3, #3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3208      	adds	r2, #8
 800833c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	220f      	movs	r2, #15
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	43db      	mvns	r3, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	4313      	orrs	r3, r2
 800836c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	08da      	lsrs	r2, r3, #3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3208      	adds	r2, #8
 8008376:	69b9      	ldr	r1, [r7, #24]
 8008378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	2203      	movs	r2, #3
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	43db      	mvns	r3, r3
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	4013      	ands	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f003 0203 	and.w	r2, r3, #3
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	fa02 f303 	lsl.w	r3, r2, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80c0 	beq.w	800853e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	4b66      	ldr	r3, [pc, #408]	@ (800855c <HAL_GPIO_Init+0x324>)
 80083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c6:	4a65      	ldr	r2, [pc, #404]	@ (800855c <HAL_GPIO_Init+0x324>)
 80083c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80083ce:	4b63      	ldr	r3, [pc, #396]	@ (800855c <HAL_GPIO_Init+0x324>)
 80083d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083da:	4a61      	ldr	r2, [pc, #388]	@ (8008560 <HAL_GPIO_Init+0x328>)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	089b      	lsrs	r3, r3, #2
 80083e0:	3302      	adds	r3, #2
 80083e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	220f      	movs	r2, #15
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	43db      	mvns	r3, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4013      	ands	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a58      	ldr	r2, [pc, #352]	@ (8008564 <HAL_GPIO_Init+0x32c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d037      	beq.n	8008476 <HAL_GPIO_Init+0x23e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a57      	ldr	r2, [pc, #348]	@ (8008568 <HAL_GPIO_Init+0x330>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d031      	beq.n	8008472 <HAL_GPIO_Init+0x23a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a56      	ldr	r2, [pc, #344]	@ (800856c <HAL_GPIO_Init+0x334>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d02b      	beq.n	800846e <HAL_GPIO_Init+0x236>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a55      	ldr	r2, [pc, #340]	@ (8008570 <HAL_GPIO_Init+0x338>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d025      	beq.n	800846a <HAL_GPIO_Init+0x232>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a54      	ldr	r2, [pc, #336]	@ (8008574 <HAL_GPIO_Init+0x33c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01f      	beq.n	8008466 <HAL_GPIO_Init+0x22e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a53      	ldr	r2, [pc, #332]	@ (8008578 <HAL_GPIO_Init+0x340>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d019      	beq.n	8008462 <HAL_GPIO_Init+0x22a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a52      	ldr	r2, [pc, #328]	@ (800857c <HAL_GPIO_Init+0x344>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_GPIO_Init+0x226>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a51      	ldr	r2, [pc, #324]	@ (8008580 <HAL_GPIO_Init+0x348>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00d      	beq.n	800845a <HAL_GPIO_Init+0x222>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a50      	ldr	r2, [pc, #320]	@ (8008584 <HAL_GPIO_Init+0x34c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <HAL_GPIO_Init+0x21e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a4f      	ldr	r2, [pc, #316]	@ (8008588 <HAL_GPIO_Init+0x350>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d101      	bne.n	8008452 <HAL_GPIO_Init+0x21a>
 800844e:	2309      	movs	r3, #9
 8008450:	e012      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008452:	230a      	movs	r3, #10
 8008454:	e010      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008456:	2308      	movs	r3, #8
 8008458:	e00e      	b.n	8008478 <HAL_GPIO_Init+0x240>
 800845a:	2307      	movs	r3, #7
 800845c:	e00c      	b.n	8008478 <HAL_GPIO_Init+0x240>
 800845e:	2306      	movs	r3, #6
 8008460:	e00a      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008462:	2305      	movs	r3, #5
 8008464:	e008      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008466:	2304      	movs	r3, #4
 8008468:	e006      	b.n	8008478 <HAL_GPIO_Init+0x240>
 800846a:	2303      	movs	r3, #3
 800846c:	e004      	b.n	8008478 <HAL_GPIO_Init+0x240>
 800846e:	2302      	movs	r3, #2
 8008470:	e002      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <HAL_GPIO_Init+0x240>
 8008476:	2300      	movs	r3, #0
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	f002 0203 	and.w	r2, r2, #3
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	4093      	lsls	r3, r2
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	4313      	orrs	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008488:	4935      	ldr	r1, [pc, #212]	@ (8008560 <HAL_GPIO_Init+0x328>)
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	3302      	adds	r3, #2
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008496:	4b3d      	ldr	r3, [pc, #244]	@ (800858c <HAL_GPIO_Init+0x354>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	43db      	mvns	r3, r3
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	4013      	ands	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084ba:	4a34      	ldr	r2, [pc, #208]	@ (800858c <HAL_GPIO_Init+0x354>)
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084c0:	4b32      	ldr	r3, [pc, #200]	@ (800858c <HAL_GPIO_Init+0x354>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	43db      	mvns	r3, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4013      	ands	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80084e4:	4a29      	ldr	r2, [pc, #164]	@ (800858c <HAL_GPIO_Init+0x354>)
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80084ea:	4b28      	ldr	r3, [pc, #160]	@ (800858c <HAL_GPIO_Init+0x354>)
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	43db      	mvns	r3, r3
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	4013      	ands	r3, r2
 80084f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800850e:	4a1f      	ldr	r2, [pc, #124]	@ (800858c <HAL_GPIO_Init+0x354>)
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008514:	4b1d      	ldr	r3, [pc, #116]	@ (800858c <HAL_GPIO_Init+0x354>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	43db      	mvns	r3, r3
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4013      	ands	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008538:	4a14      	ldr	r2, [pc, #80]	@ (800858c <HAL_GPIO_Init+0x354>)
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3301      	adds	r3, #1
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b0f      	cmp	r3, #15
 8008548:	f67f ae84 	bls.w	8008254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	3724      	adds	r7, #36	@ 0x24
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40023800 	.word	0x40023800
 8008560:	40013800 	.word	0x40013800
 8008564:	40020000 	.word	0x40020000
 8008568:	40020400 	.word	0x40020400
 800856c:	40020800 	.word	0x40020800
 8008570:	40020c00 	.word	0x40020c00
 8008574:	40021000 	.word	0x40021000
 8008578:	40021400 	.word	0x40021400
 800857c:	40021800 	.word	0x40021800
 8008580:	40021c00 	.word	0x40021c00
 8008584:	40022000 	.word	0x40022000
 8008588:	40022400 	.word	0x40022400
 800858c:	40013c00 	.word	0x40013c00

08008590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	807b      	strh	r3, [r7, #2]
 800859c:	4613      	mov	r3, r2
 800859e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085a0:	787b      	ldrb	r3, [r7, #1]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085a6:	887a      	ldrh	r2, [r7, #2]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085ac:	e003      	b.n	80085b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085ae:	887b      	ldrh	r3, [r7, #2]
 80085b0:	041a      	lsls	r2, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	619a      	str	r2, [r3, #24]
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80085d4:	887a      	ldrh	r2, [r7, #2]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4013      	ands	r3, r2
 80085da:	041a      	lsls	r2, r3, #16
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	43d9      	mvns	r1, r3
 80085e0:	887b      	ldrh	r3, [r7, #2]
 80085e2:	400b      	ands	r3, r1
 80085e4:	431a      	orrs	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	619a      	str	r2, [r3, #24]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008602:	4b08      	ldr	r3, [pc, #32]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	4013      	ands	r3, r2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800860e:	4a05      	ldr	r2, [pc, #20]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fc08 	bl	8006e2c <HAL_GPIO_EXTI_Callback>
  }
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40013c00 	.word	0x40013c00

08008628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e12b      	b.n	8008892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fe fcd8 	bl	8007004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2224      	movs	r2, #36	@ 0x24
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800867a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800868a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800868c:	f001 fc9c 	bl	8009fc8 <HAL_RCC_GetPCLK1Freq>
 8008690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	4a81      	ldr	r2, [pc, #516]	@ (800889c <HAL_I2C_Init+0x274>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d807      	bhi.n	80086ac <HAL_I2C_Init+0x84>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a80      	ldr	r2, [pc, #512]	@ (80088a0 <HAL_I2C_Init+0x278>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bf94      	ite	ls
 80086a4:	2301      	movls	r3, #1
 80086a6:	2300      	movhi	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	e006      	b.n	80086ba <HAL_I2C_Init+0x92>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a7d      	ldr	r2, [pc, #500]	@ (80088a4 <HAL_I2C_Init+0x27c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bf94      	ite	ls
 80086b4:	2301      	movls	r3, #1
 80086b6:	2300      	movhi	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0e7      	b.n	8008892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4a78      	ldr	r2, [pc, #480]	@ (80088a8 <HAL_I2C_Init+0x280>)
 80086c6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ca:	0c9b      	lsrs	r3, r3, #18
 80086cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4a6a      	ldr	r2, [pc, #424]	@ (800889c <HAL_I2C_Init+0x274>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d802      	bhi.n	80086fc <HAL_I2C_Init+0xd4>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	3301      	adds	r3, #1
 80086fa:	e009      	b.n	8008710 <HAL_I2C_Init+0xe8>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	4a69      	ldr	r2, [pc, #420]	@ (80088ac <HAL_I2C_Init+0x284>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	099b      	lsrs	r3, r3, #6
 800870e:	3301      	adds	r3, #1
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	430b      	orrs	r3, r1
 8008716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	495c      	ldr	r1, [pc, #368]	@ (800889c <HAL_I2C_Init+0x274>)
 800872c:	428b      	cmp	r3, r1
 800872e:	d819      	bhi.n	8008764 <HAL_I2C_Init+0x13c>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1e59      	subs	r1, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	fbb1 f3f3 	udiv	r3, r1, r3
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008744:	400b      	ands	r3, r1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <HAL_I2C_Init+0x138>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	1e59      	subs	r1, r3, #1
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	fbb1 f3f3 	udiv	r3, r1, r3
 8008758:	3301      	adds	r3, #1
 800875a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800875e:	e051      	b.n	8008804 <HAL_I2C_Init+0x1dc>
 8008760:	2304      	movs	r3, #4
 8008762:	e04f      	b.n	8008804 <HAL_I2C_Init+0x1dc>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d111      	bne.n	8008790 <HAL_I2C_Init+0x168>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	1e58      	subs	r0, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6859      	ldr	r1, [r3, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	440b      	add	r3, r1
 800877a:	fbb0 f3f3 	udiv	r3, r0, r3
 800877e:	3301      	adds	r3, #1
 8008780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	e012      	b.n	80087b6 <HAL_I2C_Init+0x18e>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1e58      	subs	r0, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6859      	ldr	r1, [r3, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	0099      	lsls	r1, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80087a6:	3301      	adds	r3, #1
 80087a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_I2C_Init+0x196>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e022      	b.n	8008804 <HAL_I2C_Init+0x1dc>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10e      	bne.n	80087e4 <HAL_I2C_Init+0x1bc>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1e58      	subs	r0, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6859      	ldr	r1, [r3, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	440b      	add	r3, r1
 80087d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087d8:	3301      	adds	r3, #1
 80087da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e2:	e00f      	b.n	8008804 <HAL_I2C_Init+0x1dc>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1e58      	subs	r0, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6859      	ldr	r1, [r3, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	0099      	lsls	r1, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087fa:	3301      	adds	r3, #1
 80087fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	6809      	ldr	r1, [r1, #0]
 8008808:	4313      	orrs	r3, r2
 800880a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	431a      	orrs	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6911      	ldr	r1, [r2, #16]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68d2      	ldr	r2, [r2, #12]
 800883e:	4311      	orrs	r1, r2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	430b      	orrs	r3, r1
 8008846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	000186a0 	.word	0x000186a0
 80088a0:	001e847f 	.word	0x001e847f
 80088a4:	003d08ff 	.word	0x003d08ff
 80088a8:	431bde83 	.word	0x431bde83
 80088ac:	10624dd3 	.word	0x10624dd3

080088b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	817b      	strh	r3, [r7, #10]
 80088c2:	460b      	mov	r3, r1
 80088c4:	813b      	strh	r3, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088ca:	f7fe ffad 	bl	8007828 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b20      	cmp	r3, #32
 80088da:	f040 80d9 	bne.w	8008a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	2319      	movs	r3, #25
 80088e4:	2201      	movs	r2, #1
 80088e6:	496d      	ldr	r1, [pc, #436]	@ (8008a9c <HAL_I2C_Mem_Write+0x1ec>)
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fc8b 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
 80088f6:	e0cc      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <HAL_I2C_Mem_Write+0x56>
 8008902:	2302      	movs	r3, #2
 8008904:	e0c5      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d007      	beq.n	800892c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800893a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2221      	movs	r2, #33	@ 0x21
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2240      	movs	r2, #64	@ 0x40
 8008948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6a3a      	ldr	r2, [r7, #32]
 8008956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800895c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4a4d      	ldr	r2, [pc, #308]	@ (8008aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800896c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800896e:	88f8      	ldrh	r0, [r7, #6]
 8008970:	893a      	ldrh	r2, [r7, #8]
 8008972:	8979      	ldrh	r1, [r7, #10]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	4603      	mov	r3, r0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fac2 	bl	8008f08 <I2C_RequestMemoryWrite>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d052      	beq.n	8008a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e081      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fd50 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00d      	beq.n	80089ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d107      	bne.n	80089b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e06b      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089be:	781a      	ldrb	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d11b      	bne.n	8008a30 <HAL_I2C_Mem_Write+0x180>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d017      	beq.n	8008a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1aa      	bne.n	800898e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fd43 	bl	80094c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00d      	beq.n	8008a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d107      	bne.n	8008a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e016      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e000      	b.n	8008a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008a90:	2302      	movs	r3, #2
  }
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	00100002 	.word	0x00100002
 8008aa0:	ffff0000 	.word	0xffff0000

08008aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08c      	sub	sp, #48	@ 0x30
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	4608      	mov	r0, r1
 8008aae:	4611      	mov	r1, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	817b      	strh	r3, [r7, #10]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	813b      	strh	r3, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008abe:	f7fe feb3 	bl	8007828 <HAL_GetTick>
 8008ac2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	f040 8214 	bne.w	8008efa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	2319      	movs	r3, #25
 8008ad8:	2201      	movs	r2, #1
 8008ada:	497b      	ldr	r1, [pc, #492]	@ (8008cc8 <HAL_I2C_Mem_Read+0x224>)
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 fb91 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e207      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_I2C_Mem_Read+0x56>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e200      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d007      	beq.n	8008b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2222      	movs	r2, #34	@ 0x22
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2240      	movs	r2, #64	@ 0x40
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8008ccc <HAL_I2C_Mem_Read+0x228>)
 8008b60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b62:	88f8      	ldrh	r0, [r7, #6]
 8008b64:	893a      	ldrh	r2, [r7, #8]
 8008b66:	8979      	ldrh	r1, [r7, #10]
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	4603      	mov	r3, r0
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fa5e 	bl	8009034 <I2C_RequestMemoryRead>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e1bc      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d113      	bne.n	8008bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	623b      	str	r3, [r7, #32]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	623b      	str	r3, [r7, #32]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	e190      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d11b      	bne.n	8008bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e170      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d11b      	bne.n	8008c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	e150      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c48:	e144      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	f200 80f1 	bhi.w	8008e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d123      	bne.n	8008ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fc79 	bl	8009558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e145      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ca2:	e117      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d14e      	bne.n	8008d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4906      	ldr	r1, [pc, #24]	@ (8008cd0 <HAL_I2C_Mem_Read+0x22c>)
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 faa4 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e11a      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
 8008cc6:	bf00      	nop
 8008cc8:	00100002 	.word	0x00100002
 8008ccc:	ffff0000 	.word	0xffff0000
 8008cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d00:	3b01      	subs	r3, #1
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d48:	e0c4      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	2200      	movs	r2, #0
 8008d52:	496c      	ldr	r1, [pc, #432]	@ (8008f04 <HAL_I2C_Mem_Read+0x460>)
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 fa55 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0cb      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	b2d2      	uxtb	r2, r2
 8008d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	2200      	movs	r2, #0
 8008dae:	4955      	ldr	r1, [pc, #340]	@ (8008f04 <HAL_I2C_Mem_Read+0x460>)
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fa27 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e09d      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691a      	ldr	r2, [r3, #16]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e34:	e04e      	b.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fb8c 	bl	8009558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e058      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e54:	b2d2      	uxtb	r2, r2
 8008e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d124      	bne.n	8008ed4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d107      	bne.n	8008ea2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ea0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691a      	ldr	r2, [r3, #16]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f47f aeb6 	bne.w	8008c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e000      	b.n	8008efc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008efa:	2302      	movs	r3, #2
  }
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3728      	adds	r7, #40	@ 0x28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	00010004 	.word	0x00010004

08008f08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	817b      	strh	r3, [r7, #10]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	813b      	strh	r3, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f960 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f58:	d103      	bne.n	8008f62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e05f      	b.n	8009026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f66:	897b      	ldrh	r3, [r7, #10]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	6a3a      	ldr	r2, [r7, #32]
 8008f7a:	492d      	ldr	r1, [pc, #180]	@ (8009030 <I2C_RequestMemoryWrite+0x128>)
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f9bb 	bl	80092f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e04c      	b.n	8009026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa4:	6a39      	ldr	r1, [r7, #32]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fa46 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00d      	beq.n	8008fce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d107      	bne.n	8008fca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e02b      	b.n	8009026 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fce:	88fb      	ldrh	r3, [r7, #6]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d105      	bne.n	8008fe0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fd4:	893b      	ldrh	r3, [r7, #8]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	611a      	str	r2, [r3, #16]
 8008fde:	e021      	b.n	8009024 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fe0:	893b      	ldrh	r3, [r7, #8]
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff0:	6a39      	ldr	r1, [r7, #32]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fa20 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00d      	beq.n	800901a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009002:	2b04      	cmp	r3, #4
 8009004:	d107      	bne.n	8009016 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e005      	b.n	8009026 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	b2da      	uxtb	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	00010002 	.word	0x00010002

08009034 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4603      	mov	r3, r0
 8009044:	817b      	strh	r3, [r7, #10]
 8009046:	460b      	mov	r3, r1
 8009048:	813b      	strh	r3, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800905c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800906c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	2200      	movs	r2, #0
 8009076:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f8c2 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00d      	beq.n	80090a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009094:	d103      	bne.n	800909e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800909c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e0aa      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090a2:	897b      	ldrh	r3, [r7, #10]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80090b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	6a3a      	ldr	r2, [r7, #32]
 80090b6:	4952      	ldr	r1, [pc, #328]	@ (8009200 <I2C_RequestMemoryRead+0x1cc>)
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f91d 	bl	80092f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e097      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e0:	6a39      	ldr	r1, [r7, #32]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f9a8 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00d      	beq.n	800910a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d107      	bne.n	8009106 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e076      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d105      	bne.n	800911c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009110:	893b      	ldrh	r3, [r7, #8]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	611a      	str	r2, [r3, #16]
 800911a:	e021      	b.n	8009160 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800911c:	893b      	ldrh	r3, [r7, #8]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	b29b      	uxth	r3, r3
 8009122:	b2da      	uxtb	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912c:	6a39      	ldr	r1, [r7, #32]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f982 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00d      	beq.n	8009156 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	2b04      	cmp	r3, #4
 8009140:	d107      	bne.n	8009152 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e050      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009156:	893b      	ldrh	r3, [r7, #8]
 8009158:	b2da      	uxtb	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009162:	6a39      	ldr	r1, [r7, #32]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f967 	bl	8009438 <I2C_WaitOnTXEFlagUntilTimeout>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00d      	beq.n	800918c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009174:	2b04      	cmp	r3, #4
 8009176:	d107      	bne.n	8009188 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009186:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e035      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800919a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f82b 	bl	8009204 <I2C_WaitOnFlagUntilTimeout>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00d      	beq.n	80091d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c2:	d103      	bne.n	80091cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e013      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091d0:	897b      	ldrh	r3, [r7, #10]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f043 0301 	orr.w	r3, r3, #1
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	6a3a      	ldr	r2, [r7, #32]
 80091e4:	4906      	ldr	r1, [pc, #24]	@ (8009200 <I2C_RequestMemoryRead+0x1cc>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f886 	bl	80092f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	00010002 	.word	0x00010002

08009204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	4613      	mov	r3, r2
 8009212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009214:	e048      	b.n	80092a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d044      	beq.n	80092a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800921e:	f7fe fb03 	bl	8007828 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d302      	bcc.n	8009234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d139      	bne.n	80092a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	0c1b      	lsrs	r3, r3, #16
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b01      	cmp	r3, #1
 800923c:	d10d      	bne.n	800925a <I2C_WaitOnFlagUntilTimeout+0x56>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	43da      	mvns	r2, r3
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4013      	ands	r3, r2
 800924a:	b29b      	uxth	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	bf0c      	ite	eq
 8009250:	2301      	moveq	r3, #1
 8009252:	2300      	movne	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	e00c      	b.n	8009274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	43da      	mvns	r2, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4013      	ands	r3, r2
 8009266:	b29b      	uxth	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	429a      	cmp	r2, r3
 8009278:	d116      	bne.n	80092a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009294:	f043 0220 	orr.w	r2, r3, #32
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e023      	b.n	80092f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d10d      	bne.n	80092ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	43da      	mvns	r2, r3
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	4013      	ands	r3, r2
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	e00c      	b.n	80092e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	43da      	mvns	r2, r3
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4013      	ands	r3, r2
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	bf0c      	ite	eq
 80092e0:	2301      	moveq	r3, #1
 80092e2:	2300      	movne	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d093      	beq.n	8009216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009306:	e071      	b.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009316:	d123      	bne.n	8009360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934c:	f043 0204 	orr.w	r2, r3, #4
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e067      	b.n	8009430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d041      	beq.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009368:	f7fe fa5e 	bl	8007828 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d302      	bcc.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d136      	bne.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d10c      	bne.n	80093a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	43da      	mvns	r2, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4013      	ands	r3, r2
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	bf14      	ite	ne
 800939a:	2301      	movne	r3, #1
 800939c:	2300      	moveq	r3, #0
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	e00b      	b.n	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	43da      	mvns	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4013      	ands	r3, r2
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d016      	beq.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e021      	b.n	8009430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	0c1b      	lsrs	r3, r3, #16
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d10c      	bne.n	8009410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	43da      	mvns	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	b29b      	uxth	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	e00b      	b.n	8009428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	43da      	mvns	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4013      	ands	r3, r2
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	bf14      	ite	ne
 8009422:	2301      	movne	r3, #1
 8009424:	2300      	moveq	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f af6d 	bne.w	8009308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009444:	e034      	b.n	80094b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 f8e3 	bl	8009612 <I2C_IsAcknowledgeFailed>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e034      	b.n	80094c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d028      	beq.n	80094b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945e:	f7fe f9e3 	bl	8007828 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	d302      	bcc.n	8009474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d11d      	bne.n	80094b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947e:	2b80      	cmp	r3, #128	@ 0x80
 8009480:	d016      	beq.n	80094b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e007      	b.n	80094c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b80      	cmp	r3, #128	@ 0x80
 80094bc:	d1c3      	bne.n	8009446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094d4:	e034      	b.n	8009540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f89b 	bl	8009612 <I2C_IsAcknowledgeFailed>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e034      	b.n	8009550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d028      	beq.n	8009540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ee:	f7fe f99b 	bl	8007828 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d302      	bcc.n	8009504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11d      	bne.n	8009540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b04      	cmp	r3, #4
 8009510:	d016      	beq.n	8009540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952c:	f043 0220 	orr.w	r2, r3, #32
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e007      	b.n	8009550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	2b04      	cmp	r3, #4
 800954c:	d1c3      	bne.n	80094d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009564:	e049      	b.n	80095fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b10      	cmp	r3, #16
 8009572:	d119      	bne.n	80095a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f06f 0210 	mvn.w	r2, #16
 800957c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e030      	b.n	800960a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a8:	f7fe f93e 	bl	8007828 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d302      	bcc.n	80095be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d11d      	bne.n	80095fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c8:	2b40      	cmp	r3, #64	@ 0x40
 80095ca:	d016      	beq.n	80095fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e6:	f043 0220 	orr.w	r2, r3, #32
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e007      	b.n	800960a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009604:	2b40      	cmp	r3, #64	@ 0x40
 8009606:	d1ae      	bne.n	8009566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009628:	d11b      	bne.n	8009662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964e:	f043 0204 	orr.w	r2, r3, #4
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b20      	cmp	r3, #32
 8009684:	d129      	bne.n	80096da <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2224      	movs	r2, #36	@ 0x24
 800968a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0210 	bic.w	r2, r2, #16
 80096ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0201 	orr.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e000      	b.n	80096dc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80096da:	2302      	movs	r3, #2
  }
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d12a      	bne.n	8009758 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2224      	movs	r2, #36	@ 0x24
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0201 	bic.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009720:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009722:	89fb      	ldrh	r3, [r7, #14]
 8009724:	f023 030f 	bic.w	r3, r3, #15
 8009728:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	b29a      	uxth	r2, r3
 800972e:	89fb      	ldrh	r3, [r7, #14]
 8009730:	4313      	orrs	r3, r2
 8009732:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	89fa      	ldrh	r2, [r7, #14]
 800973a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e000      	b.n	800975a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009758:	2302      	movs	r3, #2
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e267      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d075      	beq.n	8009872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009786:	4b88      	ldr	r3, [pc, #544]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 030c 	and.w	r3, r3, #12
 800978e:	2b04      	cmp	r3, #4
 8009790:	d00c      	beq.n	80097ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009792:	4b85      	ldr	r3, [pc, #532]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800979a:	2b08      	cmp	r3, #8
 800979c:	d112      	bne.n	80097c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800979e:	4b82      	ldr	r3, [pc, #520]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097aa:	d10b      	bne.n	80097c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097ac:	4b7e      	ldr	r3, [pc, #504]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d05b      	beq.n	8009870 <HAL_RCC_OscConfig+0x108>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d157      	bne.n	8009870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e242      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097cc:	d106      	bne.n	80097dc <HAL_RCC_OscConfig+0x74>
 80097ce:	4b76      	ldr	r3, [pc, #472]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a75      	ldr	r2, [pc, #468]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	e01d      	b.n	8009818 <HAL_RCC_OscConfig+0xb0>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097e4:	d10c      	bne.n	8009800 <HAL_RCC_OscConfig+0x98>
 80097e6:	4b70      	ldr	r3, [pc, #448]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a6f      	ldr	r2, [pc, #444]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	4b6d      	ldr	r3, [pc, #436]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a6c      	ldr	r2, [pc, #432]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80097f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	e00b      	b.n	8009818 <HAL_RCC_OscConfig+0xb0>
 8009800:	4b69      	ldr	r3, [pc, #420]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a68      	ldr	r2, [pc, #416]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	4b66      	ldr	r3, [pc, #408]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a65      	ldr	r2, [pc, #404]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d013      	beq.n	8009848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009820:	f7fe f802 	bl	8007828 <HAL_GetTick>
 8009824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009826:	e008      	b.n	800983a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009828:	f7fd fffe 	bl	8007828 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b64      	cmp	r3, #100	@ 0x64
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e207      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800983a:	4b5b      	ldr	r3, [pc, #364]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f0      	beq.n	8009828 <HAL_RCC_OscConfig+0xc0>
 8009846:	e014      	b.n	8009872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009848:	f7fd ffee 	bl	8007828 <HAL_GetTick>
 800984c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009850:	f7fd ffea 	bl	8007828 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b64      	cmp	r3, #100	@ 0x64
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e1f3      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009862:	4b51      	ldr	r3, [pc, #324]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <HAL_RCC_OscConfig+0xe8>
 800986e:	e000      	b.n	8009872 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d063      	beq.n	8009946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800987e:	4b4a      	ldr	r3, [pc, #296]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f003 030c 	and.w	r3, r3, #12
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800988a:	4b47      	ldr	r3, [pc, #284]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009892:	2b08      	cmp	r3, #8
 8009894:	d11c      	bne.n	80098d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009896:	4b44      	ldr	r3, [pc, #272]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d116      	bne.n	80098d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098a2:	4b41      	ldr	r3, [pc, #260]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <HAL_RCC_OscConfig+0x152>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d001      	beq.n	80098ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e1c7      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ba:	4b3b      	ldr	r3, [pc, #236]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4937      	ldr	r1, [pc, #220]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ce:	e03a      	b.n	8009946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d020      	beq.n	800991a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098d8:	4b34      	ldr	r3, [pc, #208]	@ (80099ac <HAL_RCC_OscConfig+0x244>)
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098de:	f7fd ffa3 	bl	8007828 <HAL_GetTick>
 80098e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098e4:	e008      	b.n	80098f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098e6:	f7fd ff9f 	bl	8007828 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d901      	bls.n	80098f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e1a8      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f8:	4b2b      	ldr	r3, [pc, #172]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0f0      	beq.n	80098e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009904:	4b28      	ldr	r3, [pc, #160]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4925      	ldr	r1, [pc, #148]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 8009914:	4313      	orrs	r3, r2
 8009916:	600b      	str	r3, [r1, #0]
 8009918:	e015      	b.n	8009946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800991a:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <HAL_RCC_OscConfig+0x244>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009920:	f7fd ff82 	bl	8007828 <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009928:	f7fd ff7e 	bl	8007828 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e187      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800993a:	4b1b      	ldr	r3, [pc, #108]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f0      	bne.n	8009928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d036      	beq.n	80099c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800995a:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <HAL_RCC_OscConfig+0x248>)
 800995c:	2201      	movs	r2, #1
 800995e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009960:	f7fd ff62 	bl	8007828 <HAL_GetTick>
 8009964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009966:	e008      	b.n	800997a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009968:	f7fd ff5e 	bl	8007828 <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b02      	cmp	r3, #2
 8009974:	d901      	bls.n	800997a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e167      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800997a:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <HAL_RCC_OscConfig+0x240>)
 800997c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0f0      	beq.n	8009968 <HAL_RCC_OscConfig+0x200>
 8009986:	e01b      	b.n	80099c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009988:	4b09      	ldr	r3, [pc, #36]	@ (80099b0 <HAL_RCC_OscConfig+0x248>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800998e:	f7fd ff4b 	bl	8007828 <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009994:	e00e      	b.n	80099b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009996:	f7fd ff47 	bl	8007828 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d907      	bls.n	80099b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e150      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
 80099a8:	40023800 	.word	0x40023800
 80099ac:	42470000 	.word	0x42470000
 80099b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099b4:	4b88      	ldr	r3, [pc, #544]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 80099b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1ea      	bne.n	8009996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8097 	beq.w	8009afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099d2:	4b81      	ldr	r3, [pc, #516]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10f      	bne.n	80099fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
 80099e2:	4b7d      	ldr	r3, [pc, #500]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 80099e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e6:	4a7c      	ldr	r2, [pc, #496]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 80099e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80099ee:	4b7a      	ldr	r3, [pc, #488]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099f6:	60bb      	str	r3, [r7, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099fe:	4b77      	ldr	r3, [pc, #476]	@ (8009bdc <HAL_RCC_OscConfig+0x474>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d118      	bne.n	8009a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a0a:	4b74      	ldr	r3, [pc, #464]	@ (8009bdc <HAL_RCC_OscConfig+0x474>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a73      	ldr	r2, [pc, #460]	@ (8009bdc <HAL_RCC_OscConfig+0x474>)
 8009a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a16:	f7fd ff07 	bl	8007828 <HAL_GetTick>
 8009a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a1c:	e008      	b.n	8009a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a1e:	f7fd ff03 	bl	8007828 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d901      	bls.n	8009a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e10c      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a30:	4b6a      	ldr	r3, [pc, #424]	@ (8009bdc <HAL_RCC_OscConfig+0x474>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0f0      	beq.n	8009a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d106      	bne.n	8009a52 <HAL_RCC_OscConfig+0x2ea>
 8009a44:	4b64      	ldr	r3, [pc, #400]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a48:	4a63      	ldr	r2, [pc, #396]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a50:	e01c      	b.n	8009a8c <HAL_RCC_OscConfig+0x324>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	2b05      	cmp	r3, #5
 8009a58:	d10c      	bne.n	8009a74 <HAL_RCC_OscConfig+0x30c>
 8009a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a60:	f043 0304 	orr.w	r3, r3, #4
 8009a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a66:	4b5c      	ldr	r3, [pc, #368]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a72:	e00b      	b.n	8009a8c <HAL_RCC_OscConfig+0x324>
 8009a74:	4b58      	ldr	r3, [pc, #352]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a78:	4a57      	ldr	r2, [pc, #348]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a7a:	f023 0301 	bic.w	r3, r3, #1
 8009a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a80:	4b55      	ldr	r3, [pc, #340]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a84:	4a54      	ldr	r2, [pc, #336]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009a86:	f023 0304 	bic.w	r3, r3, #4
 8009a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d015      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a94:	f7fd fec8 	bl	8007828 <HAL_GetTick>
 8009a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a9a:	e00a      	b.n	8009ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a9c:	f7fd fec4 	bl	8007828 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e0cb      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab2:	4b49      	ldr	r3, [pc, #292]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0ee      	beq.n	8009a9c <HAL_RCC_OscConfig+0x334>
 8009abe:	e014      	b.n	8009aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ac0:	f7fd feb2 	bl	8007828 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ac6:	e00a      	b.n	8009ade <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ac8:	f7fd feae 	bl	8007828 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e0b5      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ade:	4b3e      	ldr	r3, [pc, #248]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1ee      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d105      	bne.n	8009afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af0:	4b39      	ldr	r3, [pc, #228]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af4:	4a38      	ldr	r2, [pc, #224]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80a1 	beq.w	8009c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b06:	4b34      	ldr	r3, [pc, #208]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d05c      	beq.n	8009bcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d141      	bne.n	8009b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1a:	4b31      	ldr	r3, [pc, #196]	@ (8009be0 <HAL_RCC_OscConfig+0x478>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b20:	f7fd fe82 	bl	8007828 <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fd fe7e 	bl	8007828 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e087      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f0      	bne.n	8009b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	69da      	ldr	r2, [r3, #28]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b54:	019b      	lsls	r3, r3, #6
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	431a      	orrs	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	491b      	ldr	r1, [pc, #108]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b70:	4b1b      	ldr	r3, [pc, #108]	@ (8009be0 <HAL_RCC_OscConfig+0x478>)
 8009b72:	2201      	movs	r2, #1
 8009b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b76:	f7fd fe57 	bl	8007828 <HAL_GetTick>
 8009b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b7c:	e008      	b.n	8009b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b7e:	f7fd fe53 	bl	8007828 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d901      	bls.n	8009b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e05c      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b90:	4b11      	ldr	r3, [pc, #68]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0f0      	beq.n	8009b7e <HAL_RCC_OscConfig+0x416>
 8009b9c:	e054      	b.n	8009c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b9e:	4b10      	ldr	r3, [pc, #64]	@ (8009be0 <HAL_RCC_OscConfig+0x478>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba4:	f7fd fe40 	bl	8007828 <HAL_GetTick>
 8009ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bac:	f7fd fe3c 	bl	8007828 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e045      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bbe:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <HAL_RCC_OscConfig+0x470>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1f0      	bne.n	8009bac <HAL_RCC_OscConfig+0x444>
 8009bca:	e03d      	b.n	8009c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d107      	bne.n	8009be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e038      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	40007000 	.word	0x40007000
 8009be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009be4:	4b1b      	ldr	r3, [pc, #108]	@ (8009c54 <HAL_RCC_OscConfig+0x4ec>)
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d028      	beq.n	8009c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d121      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d11a      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009c14:	4013      	ands	r3, r2
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d111      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d107      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d001      	beq.n	8009c48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40023800 	.word	0x40023800

08009c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e0cc      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c6c:	4b68      	ldr	r3, [pc, #416]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d90c      	bls.n	8009c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c7a:	4b65      	ldr	r3, [pc, #404]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c82:	4b63      	ldr	r3, [pc, #396]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d001      	beq.n	8009c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0b8      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d020      	beq.n	8009ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cac:	4b59      	ldr	r3, [pc, #356]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	4a58      	ldr	r2, [pc, #352]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cc4:	4b53      	ldr	r3, [pc, #332]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4a52      	ldr	r2, [pc, #328]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cd0:	4b50      	ldr	r3, [pc, #320]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	494d      	ldr	r1, [pc, #308]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d044      	beq.n	8009d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cf6:	4b47      	ldr	r3, [pc, #284]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d119      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e07f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d003      	beq.n	8009d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d107      	bne.n	8009d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d16:	4b3f      	ldr	r3, [pc, #252]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e06f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d26:	4b3b      	ldr	r3, [pc, #236]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e067      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d36:	4b37      	ldr	r3, [pc, #220]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f023 0203 	bic.w	r2, r3, #3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4934      	ldr	r1, [pc, #208]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d48:	f7fd fd6e 	bl	8007828 <HAL_GetTick>
 8009d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4e:	e00a      	b.n	8009d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d50:	f7fd fd6a 	bl	8007828 <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d901      	bls.n	8009d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e04f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d66:	4b2b      	ldr	r3, [pc, #172]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f003 020c 	and.w	r2, r3, #12
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d1eb      	bne.n	8009d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d78:	4b25      	ldr	r3, [pc, #148]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d20c      	bcs.n	8009da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d86:	4b22      	ldr	r3, [pc, #136]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8e:	4b20      	ldr	r3, [pc, #128]	@ (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d001      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e032      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dac:	4b19      	ldr	r3, [pc, #100]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4916      	ldr	r1, [pc, #88]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0308 	and.w	r3, r3, #8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dca:	4b12      	ldr	r3, [pc, #72]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	490e      	ldr	r1, [pc, #56]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009dde:	f000 f821 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	091b      	lsrs	r3, r3, #4
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	490a      	ldr	r1, [pc, #40]	@ (8009e18 <HAL_RCC_ClockConfig+0x1c0>)
 8009df0:	5ccb      	ldrb	r3, [r1, r3]
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	4a09      	ldr	r2, [pc, #36]	@ (8009e1c <HAL_RCC_ClockConfig+0x1c4>)
 8009df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009dfa:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <HAL_RCC_ClockConfig+0x1c8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd fcce 	bl	80077a0 <HAL_InitTick>

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40023c00 	.word	0x40023c00
 8009e14:	40023800 	.word	0x40023800
 8009e18:	0800db00 	.word	0x0800db00
 8009e1c:	20000914 	.word	0x20000914
 8009e20:	20000918 	.word	0x20000918

08009e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e28:	b090      	sub	sp, #64	@ 0x40
 8009e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e3c:	4b59      	ldr	r3, [pc, #356]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f003 030c 	and.w	r3, r3, #12
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d00d      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0x40>
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	f200 80a1 	bhi.w	8009f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <HAL_RCC_GetSysClockFreq+0x34>
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d003      	beq.n	8009e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8009e56:	e09b      	b.n	8009f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e58:	4b53      	ldr	r3, [pc, #332]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e5c:	e09b      	b.n	8009f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e5e:	4b53      	ldr	r3, [pc, #332]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x188>)
 8009e60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e62:	e098      	b.n	8009f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e64:	4b4f      	ldr	r3, [pc, #316]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d028      	beq.n	8009ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	099b      	lsrs	r3, r3, #6
 8009e80:	2200      	movs	r2, #0
 8009e82:	623b      	str	r3, [r7, #32]
 8009e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4b47      	ldr	r3, [pc, #284]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x188>)
 8009e90:	fb03 f201 	mul.w	r2, r3, r1
 8009e94:	2300      	movs	r3, #0
 8009e96:	fb00 f303 	mul.w	r3, r0, r3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	4a43      	ldr	r2, [pc, #268]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x188>)
 8009e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8009ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ea4:	460a      	mov	r2, r1
 8009ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eaa:	4413      	add	r3, r2
 8009eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	61fa      	str	r2, [r7, #28]
 8009eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009ebe:	f7f6 ff43 	bl	8000d48 <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eca:	e053      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ecc:	4b35      	ldr	r3, [pc, #212]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	099b      	lsrs	r3, r3, #6
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	613b      	str	r3, [r7, #16]
 8009ed6:	617a      	str	r2, [r7, #20]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009ede:	f04f 0b00 	mov.w	fp, #0
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	f04f 0000 	mov.w	r0, #0
 8009eea:	f04f 0100 	mov.w	r1, #0
 8009eee:	0159      	lsls	r1, r3, #5
 8009ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ef4:	0150      	lsls	r0, r2, #5
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	ebb2 080a 	subs.w	r8, r2, sl
 8009efe:	eb63 090b 	sbc.w	r9, r3, fp
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009f16:	ebb2 0408 	subs.w	r4, r2, r8
 8009f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8009f1e:	f04f 0200 	mov.w	r2, #0
 8009f22:	f04f 0300 	mov.w	r3, #0
 8009f26:	00eb      	lsls	r3, r5, #3
 8009f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f2c:	00e2      	lsls	r2, r4, #3
 8009f2e:	4614      	mov	r4, r2
 8009f30:	461d      	mov	r5, r3
 8009f32:	eb14 030a 	adds.w	r3, r4, sl
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	eb45 030b 	adc.w	r3, r5, fp
 8009f3c:	607b      	str	r3, [r7, #4]
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	f04f 0300 	mov.w	r3, #0
 8009f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	028b      	lsls	r3, r1, #10
 8009f4e:	4621      	mov	r1, r4
 8009f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f54:	4621      	mov	r1, r4
 8009f56:	028a      	lsls	r2, r1, #10
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5e:	2200      	movs	r2, #0
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	60fa      	str	r2, [r7, #12]
 8009f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f68:	f7f6 feee 	bl	8000d48 <__aeabi_uldivmod>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4613      	mov	r3, r2
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f74:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	3301      	adds	r3, #1
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f8e:	e002      	b.n	8009f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f90:	4b05      	ldr	r3, [pc, #20]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3740      	adds	r7, #64	@ 0x40
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fa2:	bf00      	nop
 8009fa4:	40023800 	.word	0x40023800
 8009fa8:	00f42400 	.word	0x00f42400
 8009fac:	017d7840 	.word	0x017d7840

08009fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fb4:	4b03      	ldr	r3, [pc, #12]	@ (8009fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000914 	.word	0x20000914

08009fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009fcc:	f7ff fff0 	bl	8009fb0 <HAL_RCC_GetHCLKFreq>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	4b05      	ldr	r3, [pc, #20]	@ (8009fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	0a9b      	lsrs	r3, r3, #10
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	4903      	ldr	r1, [pc, #12]	@ (8009fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fde:	5ccb      	ldrb	r3, [r1, r3]
 8009fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	40023800 	.word	0x40023800
 8009fec:	0800db10 	.word	0x0800db10

08009ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ff4:	f7ff ffdc 	bl	8009fb0 <HAL_RCC_GetHCLKFreq>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	0b5b      	lsrs	r3, r3, #13
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	4903      	ldr	r1, [pc, #12]	@ (800a014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a006:	5ccb      	ldrb	r3, [r1, r3]
 800a008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	40023800 	.word	0x40023800
 800a014:	0800db10 	.word	0x0800db10

0800a018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e07b      	b.n	800a122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d108      	bne.n	800a044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a03a:	d009      	beq.n	800a050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	61da      	str	r2, [r3, #28]
 800a042:	e005      	b.n	800a050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fd f87e 	bl	800716c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d4:	ea42 0103 	orr.w	r1, r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	0c1b      	lsrs	r3, r3, #16
 800a0ee:	f003 0104 	and.w	r1, r3, #4
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	f003 0210 	and.w	r2, r3, #16
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69da      	ldr	r2, [r3, #28]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b088      	sub	sp, #32
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a13a:	f7fd fb75 	bl	8007828 <HAL_GetTick>
 800a13e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d001      	beq.n	800a154 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a150:	2302      	movs	r3, #2
 800a152:	e12a      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_SPI_Transmit+0x36>
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e122      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_SPI_Transmit+0x48>
 800a16e:	2302      	movs	r3, #2
 800a170:	e11b      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2203      	movs	r2, #3
 800a17e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c0:	d10f      	bne.n	800a1e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ec:	2b40      	cmp	r3, #64	@ 0x40
 800a1ee:	d007      	beq.n	800a200 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a208:	d152      	bne.n	800a2b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <HAL_SPI_Transmit+0xee>
 800a212:	8b7b      	ldrh	r3, [r7, #26]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d145      	bne.n	800a2a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21c:	881a      	ldrh	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a228:	1c9a      	adds	r2, r3, #2
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a232:	b29b      	uxth	r3, r3
 800a234:	3b01      	subs	r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a23c:	e032      	b.n	800a2a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d112      	bne.n	800a272 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a250:	881a      	ldrh	r2, [r3, #0]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25c:	1c9a      	adds	r2, r3, #2
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a266:	b29b      	uxth	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a270:	e018      	b.n	800a2a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a272:	f7fd fad9 	bl	8007828 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d803      	bhi.n	800a28a <HAL_SPI_Transmit+0x160>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d102      	bne.n	800a290 <HAL_SPI_Transmit+0x166>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d109      	bne.n	800a2a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e082      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1c7      	bne.n	800a23e <HAL_SPI_Transmit+0x114>
 800a2ae:	e053      	b.n	800a358 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <HAL_SPI_Transmit+0x194>
 800a2b8:	8b7b      	ldrh	r3, [r7, #26]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d147      	bne.n	800a34e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a2e4:	e033      	b.n	800a34e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d113      	bne.n	800a31c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a310:	b29b      	uxth	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a31a:	e018      	b.n	800a34e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a31c:	f7fd fa84 	bl	8007828 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d803      	bhi.n	800a334 <HAL_SPI_Transmit+0x20a>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d102      	bne.n	800a33a <HAL_SPI_Transmit+0x210>
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e02d      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a352:	b29b      	uxth	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1c6      	bne.n	800a2e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fbd9 	bl	800ab14 <SPI_EndRxTxTransaction>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2220      	movs	r2, #32
 800a36c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a376:	2300      	movs	r3, #0
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b088      	sub	sp, #32
 800a3b6:	af02      	add	r7, sp, #8
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	603b      	str	r3, [r7, #0]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d001      	beq.n	800a3d2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e104      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3da:	d112      	bne.n	800a402 <HAL_SPI_Receive+0x50>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10e      	bne.n	800a402 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a3ec:	88fa      	ldrh	r2, [r7, #6]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f8f3 	bl	800a5e4 <HAL_SPI_TransmitReceive>
 800a3fe:	4603      	mov	r3, r0
 800a400:	e0ec      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a402:	f7fd fa11 	bl	8007828 <HAL_GetTick>
 800a406:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <HAL_SPI_Receive+0x62>
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e0e1      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_SPI_Receive+0x74>
 800a422:	2302      	movs	r3, #2
 800a424:	e0da      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2204      	movs	r2, #4
 800a432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	88fa      	ldrh	r2, [r7, #6]
 800a446:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a474:	d10f      	bne.n	800a496 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a0:	2b40      	cmp	r3, #64	@ 0x40
 800a4a2:	d007      	beq.n	800a4b4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d170      	bne.n	800a59e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a4bc:	e035      	b.n	800a52a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d115      	bne.n	800a4f8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f103 020c 	add.w	r2, r3, #12
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d8:	7812      	ldrb	r2, [r2, #0]
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a4f6:	e018      	b.n	800a52a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4f8:	f7fd f996 	bl	8007828 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d803      	bhi.n	800a510 <HAL_SPI_Receive+0x15e>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50e:	d102      	bne.n	800a516 <HAL_SPI_Receive+0x164>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e058      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1c4      	bne.n	800a4be <HAL_SPI_Receive+0x10c>
 800a534:	e038      	b.n	800a5a8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b01      	cmp	r3, #1
 800a542:	d113      	bne.n	800a56c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	b292      	uxth	r2, r2
 800a550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a556:	1c9a      	adds	r2, r3, #2
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a56a:	e018      	b.n	800a59e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a56c:	f7fd f95c 	bl	8007828 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d803      	bhi.n	800a584 <HAL_SPI_Receive+0x1d2>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d102      	bne.n	800a58a <HAL_SPI_Receive+0x1d8>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d109      	bne.n	800a59e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e01e      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1c6      	bne.n	800a536 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fa4b 	bl	800aa48 <SPI_EndRxTransaction>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800a5da:	2300      	movs	r3, #0
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	@ 0x28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5f6:	f7fd f917 	bl	8007828 <HAL_GetTick>
 800a5fa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a602:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a60a:	887b      	ldrh	r3, [r7, #2]
 800a60c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a60e:	7ffb      	ldrb	r3, [r7, #31]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d00c      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x4a>
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a61a:	d106      	bne.n	800a62a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <HAL_SPI_TransmitReceive+0x46>
 800a624:	7ffb      	ldrb	r3, [r7, #31]
 800a626:	2b04      	cmp	r3, #4
 800a628:	d001      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800a62a:	2302      	movs	r3, #2
 800a62c:	e17f      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x5c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x5c>
 800a63a:	887b      	ldrh	r3, [r7, #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e174      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_SPI_TransmitReceive+0x6e>
 800a64e:	2302      	movs	r3, #2
 800a650:	e16d      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b04      	cmp	r3, #4
 800a664:	d003      	beq.n	800a66e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2205      	movs	r2, #5
 800a66a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	887a      	ldrh	r2, [r7, #2]
 800a67e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	887a      	ldrh	r2, [r7, #2]
 800a684:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	887a      	ldrh	r2, [r7, #2]
 800a690:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	887a      	ldrh	r2, [r7, #2]
 800a696:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ae:	2b40      	cmp	r3, #64	@ 0x40
 800a6b0:	d007      	beq.n	800a6c2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6ca:	d17e      	bne.n	800a7ca <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <HAL_SPI_TransmitReceive+0xf6>
 800a6d4:	8afb      	ldrh	r3, [r7, #22]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d16c      	bne.n	800a7b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6de:	881a      	ldrh	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ea:	1c9a      	adds	r2, r3, #2
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6fe:	e059      	b.n	800a7b4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d11b      	bne.n	800a746 <HAL_SPI_TransmitReceive+0x162>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a712:	b29b      	uxth	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d016      	beq.n	800a746 <HAL_SPI_TransmitReceive+0x162>
 800a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d113      	bne.n	800a746 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a722:	881a      	ldrh	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72e:	1c9a      	adds	r2, r3, #2
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a738:	b29b      	uxth	r3, r3
 800a73a:	3b01      	subs	r3, #1
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b01      	cmp	r3, #1
 800a752:	d119      	bne.n	800a788 <HAL_SPI_TransmitReceive+0x1a4>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d014      	beq.n	800a788 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a768:	b292      	uxth	r2, r2
 800a76a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a770:	1c9a      	adds	r2, r3, #2
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	3b01      	subs	r3, #1
 800a77e:	b29a      	uxth	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a784:	2301      	movs	r3, #1
 800a786:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a788:	f7fd f84e 	bl	8007828 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a794:	429a      	cmp	r2, r3
 800a796:	d80d      	bhi.n	800a7b4 <HAL_SPI_TransmitReceive+0x1d0>
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d009      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e0bc      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1a0      	bne.n	800a700 <HAL_SPI_TransmitReceive+0x11c>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d19b      	bne.n	800a700 <HAL_SPI_TransmitReceive+0x11c>
 800a7c8:	e082      	b.n	800a8d0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d002      	beq.n	800a7d8 <HAL_SPI_TransmitReceive+0x1f4>
 800a7d2:	8afb      	ldrh	r3, [r7, #22]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d171      	bne.n	800a8bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7fe:	e05d      	b.n	800a8bc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d11c      	bne.n	800a848 <HAL_SPI_TransmitReceive+0x264>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a812:	b29b      	uxth	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d017      	beq.n	800a848 <HAL_SPI_TransmitReceive+0x264>
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d114      	bne.n	800a848 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	330c      	adds	r3, #12
 800a828:	7812      	ldrb	r2, [r2, #0]
 800a82a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b01      	cmp	r3, #1
 800a854:	d119      	bne.n	800a88a <HAL_SPI_TransmitReceive+0x2a6>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d014      	beq.n	800a88a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a886:	2301      	movs	r3, #1
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a88a:	f7fc ffcd 	bl	8007828 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a896:	429a      	cmp	r2, r3
 800a898:	d803      	bhi.n	800a8a2 <HAL_SPI_TransmitReceive+0x2be>
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d102      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x2c4>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d109      	bne.n	800a8bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e038      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d19c      	bne.n	800a800 <HAL_SPI_TransmitReceive+0x21c>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d197      	bne.n	800a800 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8d0:	6a3a      	ldr	r2, [r7, #32]
 800a8d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f91d 	bl	800ab14 <SPI_EndRxTxTransaction>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d008      	beq.n	800a8f2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e01d      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	613b      	str	r3, [r7, #16]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	613b      	str	r3, [r7, #16]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e000      	b.n	800a92e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a92c:	2300      	movs	r3, #0
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3728      	adds	r7, #40	@ 0x28
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a948:	f7fc ff6e 	bl	8007828 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	4413      	add	r3, r2
 800a956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a958:	f7fc ff66 	bl	8007828 <HAL_GetTick>
 800a95c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a95e:	4b39      	ldr	r3, [pc, #228]	@ (800aa44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	015b      	lsls	r3, r3, #5
 800a964:	0d1b      	lsrs	r3, r3, #20
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	fb02 f303 	mul.w	r3, r2, r3
 800a96c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a96e:	e054      	b.n	800aa1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d050      	beq.n	800aa1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a978:	f7fc ff56 	bl	8007828 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	429a      	cmp	r2, r3
 800a986:	d902      	bls.n	800a98e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d13d      	bne.n	800aa0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a99c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9a6:	d111      	bne.n	800a9cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9b0:	d004      	beq.n	800a9bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ba:	d107      	bne.n	800a9cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9d4:	d10f      	bne.n	800a9f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e017      	b.n	800aa3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4013      	ands	r3, r2
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	bf0c      	ite	eq
 800aa2a:	2301      	moveq	r3, #1
 800aa2c:	2300      	movne	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	461a      	mov	r2, r3
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d19b      	bne.n	800a970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3720      	adds	r7, #32
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000914 	.word	0x20000914

0800aa48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af02      	add	r7, sp, #8
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa5c:	d111      	bne.n	800aa82 <SPI_EndRxTransaction+0x3a>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa66:	d004      	beq.n	800aa72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa70:	d107      	bne.n	800aa82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa8a:	d12a      	bne.n	800aae2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa94:	d012      	beq.n	800aabc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2180      	movs	r1, #128	@ 0x80
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff ff49 	bl	800a938 <SPI_WaitFlagStateUntilTimeout>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d02d      	beq.n	800ab08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab0:	f043 0220 	orr.w	r2, r3, #32
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e026      	b.n	800ab0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2200      	movs	r2, #0
 800aac4:	2101      	movs	r1, #1
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff ff36 	bl	800a938 <SPI_WaitFlagStateUntilTimeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01a      	beq.n	800ab08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad6:	f043 0220 	orr.w	r2, r3, #32
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e013      	b.n	800ab0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2200      	movs	r2, #0
 800aaea:	2101      	movs	r1, #1
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff ff23 	bl	800a938 <SPI_WaitFlagStateUntilTimeout>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d007      	beq.n	800ab08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafc:	f043 0220 	orr.w	r2, r3, #32
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e000      	b.n	800ab0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2201      	movs	r2, #1
 800ab28:	2102      	movs	r1, #2
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff ff04 	bl	800a938 <SPI_WaitFlagStateUntilTimeout>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d007      	beq.n	800ab46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab3a:	f043 0220 	orr.w	r2, r3, #32
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e032      	b.n	800abac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab46:	4b1b      	ldr	r3, [pc, #108]	@ (800abb4 <SPI_EndRxTxTransaction+0xa0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a1b      	ldr	r2, [pc, #108]	@ (800abb8 <SPI_EndRxTxTransaction+0xa4>)
 800ab4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab50:	0d5b      	lsrs	r3, r3, #21
 800ab52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
 800ab5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab64:	d112      	bne.n	800ab8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2180      	movs	r1, #128	@ 0x80
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff fee1 	bl	800a938 <SPI_WaitFlagStateUntilTimeout>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d016      	beq.n	800abaa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab80:	f043 0220 	orr.w	r2, r3, #32
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e00f      	b.n	800abac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	3b01      	subs	r3, #1
 800ab96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba2:	2b80      	cmp	r3, #128	@ 0x80
 800aba4:	d0f2      	beq.n	800ab8c <SPI_EndRxTxTransaction+0x78>
 800aba6:	e000      	b.n	800abaa <SPI_EndRxTxTransaction+0x96>
        break;
 800aba8:	bf00      	nop
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000914 	.word	0x20000914
 800abb8:	165e9f81 	.word	0x165e9f81

0800abbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e042      	b.n	800ac54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fc fbbe 	bl	8007364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2224      	movs	r2, #36	@ 0x24
 800abec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fdf3 	bl	800b7ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	691a      	ldr	r2, [r3, #16]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	695a      	ldr	r2, [r3, #20]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ac34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08a      	sub	sp, #40	@ 0x28
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d175      	bne.n	800ad68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_UART_Transmit+0x2c>
 800ac82:	88fb      	ldrh	r3, [r7, #6]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e06e      	b.n	800ad6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2221      	movs	r2, #33	@ 0x21
 800ac96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac9a:	f7fc fdc5 	bl	8007828 <HAL_GetTick>
 800ac9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	88fa      	ldrh	r2, [r7, #6]
 800aca4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	88fa      	ldrh	r2, [r7, #6]
 800acaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acb4:	d108      	bne.n	800acc8 <HAL_UART_Transmit+0x6c>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d104      	bne.n	800acc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e003      	b.n	800acd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800accc:	2300      	movs	r3, #0
 800acce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800acd0:	e02e      	b.n	800ad30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2200      	movs	r2, #0
 800acda:	2180      	movs	r1, #128	@ 0x80
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fb55 	bl	800b38c <UART_WaitOnFlagUntilTimeout>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e03a      	b.n	800ad6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10b      	bne.n	800ad12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	61bb      	str	r3, [r7, #24]
 800ad10:	e007      	b.n	800ad22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	781a      	ldrb	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1cb      	bne.n	800acd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2200      	movs	r2, #0
 800ad42:	2140      	movs	r1, #64	@ 0x40
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 fb21 	bl	800b38c <UART_WaitOnFlagUntilTimeout>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e006      	b.n	800ad6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	e000      	b.n	800ad6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ad68:	2302      	movs	r3, #2
  }
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b08c      	sub	sp, #48	@ 0x30
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	d14a      	bne.n	800ae22 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800ad92:	88fb      	ldrh	r3, [r7, #6]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e043      	b.n	800ae24 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	461a      	mov	r2, r3
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 fb45 	bl	800b43e <UART_Start_Receive_IT>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800adba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d12c      	bne.n	800ae1c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d125      	bne.n	800ae16 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adca:	2300      	movs	r3, #0
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	613b      	str	r3, [r7, #16]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	613b      	str	r3, [r7, #16]
 800adde:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	330c      	adds	r3, #12
 800ade6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	e853 3f00 	ldrex	r3, [r3]
 800adee:	617b      	str	r3, [r7, #20]
   return(result);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f043 0310 	orr.w	r3, r3, #16
 800adf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	330c      	adds	r3, #12
 800adfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae00:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae04:	6a39      	ldr	r1, [r7, #32]
 800ae06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae08:	e841 2300 	strex	r3, r2, [r1]
 800ae0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1e5      	bne.n	800ade0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800ae14:	e002      	b.n	800ae1c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ae1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae20:	e000      	b.n	800ae24 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800ae22:	2302      	movs	r3, #2
  }
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3730      	adds	r7, #48	@ 0x30
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b0ba      	sub	sp, #232	@ 0xe8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ae6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10f      	bne.n	800ae92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <HAL_UART_IRQHandler+0x66>
 800ae7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fbf0 	bl	800b670 <UART_Receive_IT>
      return;
 800ae90:	e25b      	b.n	800b34a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 80de 	beq.w	800b058 <HAL_UART_IRQHandler+0x22c>
 800ae9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 80d1 	beq.w	800b058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <HAL_UART_IRQHandler+0xae>
 800aec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d005      	beq.n	800aeda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed2:	f043 0201 	orr.w	r2, r3, #1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aeda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aede:	f003 0304 	and.w	r3, r3, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <HAL_UART_IRQHandler+0xd2>
 800aee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aef6:	f043 0202 	orr.w	r2, r3, #2
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00b      	beq.n	800af22 <HAL_UART_IRQHandler+0xf6>
 800af0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d005      	beq.n	800af22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af1a:	f043 0204 	orr.w	r2, r3, #4
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af26:	f003 0308 	and.w	r3, r3, #8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d011      	beq.n	800af52 <HAL_UART_IRQHandler+0x126>
 800af2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af32:	f003 0320 	and.w	r3, r3, #32
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d005      	beq.n	800af52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af4a:	f043 0208 	orr.w	r2, r3, #8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 81f2 	beq.w	800b340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af60:	f003 0320 	and.w	r3, r3, #32
 800af64:	2b00      	cmp	r3, #0
 800af66:	d008      	beq.n	800af7a <HAL_UART_IRQHandler+0x14e>
 800af68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af6c:	f003 0320 	and.w	r3, r3, #32
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fb7b 	bl	800b670 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af84:	2b40      	cmp	r3, #64	@ 0x40
 800af86:	bf0c      	ite	eq
 800af88:	2301      	moveq	r3, #1
 800af8a:	2300      	movne	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af96:	f003 0308 	and.w	r3, r3, #8
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <HAL_UART_IRQHandler+0x17a>
 800af9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d04f      	beq.n	800b046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa83 	bl	800b4b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb6:	2b40      	cmp	r3, #64	@ 0x40
 800afb8:	d141      	bne.n	800b03e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3314      	adds	r3, #20
 800afc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3314      	adds	r3, #20
 800afe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aff6:	e841 2300 	strex	r3, r2, [r1]
 800affa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800affe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1d9      	bne.n	800afba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d013      	beq.n	800b036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b012:	4a7e      	ldr	r2, [pc, #504]	@ (800b20c <HAL_UART_IRQHandler+0x3e0>)
 800b014:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd f8e9 	bl	80081f2 <HAL_DMA_Abort_IT>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d016      	beq.n	800b054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b030:	4610      	mov	r0, r2
 800b032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b034:	e00e      	b.n	800b054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f99e 	bl	800b378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b03c:	e00a      	b.n	800b054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f99a 	bl	800b378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b044:	e006      	b.n	800b054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f996 	bl	800b378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b052:	e175      	b.n	800b340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b054:	bf00      	nop
    return;
 800b056:	e173      	b.n	800b340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	f040 814f 	bne.w	800b300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8148 	beq.w	800b300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8141 	beq.w	800b300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b07e:	2300      	movs	r3, #0
 800b080:	60bb      	str	r3, [r7, #8]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b09e:	2b40      	cmp	r3, #64	@ 0x40
 800b0a0:	f040 80b6 	bne.w	800b210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 8145 	beq.w	800b344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b0be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	f080 813e 	bcs.w	800b344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0da:	f000 8088 	beq.w	800b1ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	330c      	adds	r3, #12
 800b0e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b10a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b10e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1d9      	bne.n	800b0de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3314      	adds	r3, #20
 800b130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b13a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	3314      	adds	r3, #20
 800b14a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b14e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e1      	bne.n	800b12a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3314      	adds	r3, #20
 800b16c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b17c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3314      	adds	r3, #20
 800b186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b18a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b18c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b192:	e841 2300 	strex	r3, r2, [r1]
 800b196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e3      	bne.n	800b166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1be:	f023 0310 	bic.w	r3, r3, #16
 800b1c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	330c      	adds	r3, #12
 800b1cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e3      	bne.n	800b1ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fc ff92 	bl	8008112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	b29b      	uxth	r3, r3
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7fa ff47 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b20a:	e09b      	b.n	800b344 <HAL_UART_IRQHandler+0x518>
 800b20c:	0800b579 	.word	0x0800b579
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b218:	b29b      	uxth	r3, r3
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b224:	b29b      	uxth	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 808e 	beq.w	800b348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b22c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8089 	beq.w	800b348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	330c      	adds	r3, #12
 800b23c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b24c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	330c      	adds	r3, #12
 800b256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b25a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b25c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e3      	bne.n	800b236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3314      	adds	r3, #20
 800b274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	623b      	str	r3, [r7, #32]
   return(result);
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3314      	adds	r3, #20
 800b28e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b292:	633a      	str	r2, [r7, #48]	@ 0x30
 800b294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e3      	bne.n	800b26e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0310 	bic.w	r3, r3, #16
 800b2ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	330c      	adds	r3, #12
 800b2d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b2d8:	61fa      	str	r2, [r7, #28]
 800b2da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	69b9      	ldr	r1, [r7, #24]
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e3      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7fa fecd 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2fe:	e023      	b.n	800b348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d009      	beq.n	800b320 <HAL_UART_IRQHandler+0x4f4>
 800b30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f941 	bl	800b5a0 <UART_Transmit_IT>
    return;
 800b31e:	e014      	b.n	800b34a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00e      	beq.n	800b34a <HAL_UART_IRQHandler+0x51e>
 800b32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b334:	2b00      	cmp	r3, #0
 800b336:	d008      	beq.n	800b34a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f981 	bl	800b640 <UART_EndTransmit_IT>
    return;
 800b33e:	e004      	b.n	800b34a <HAL_UART_IRQHandler+0x51e>
    return;
 800b340:	bf00      	nop
 800b342:	e002      	b.n	800b34a <HAL_UART_IRQHandler+0x51e>
      return;
 800b344:	bf00      	nop
 800b346:	e000      	b.n	800b34a <HAL_UART_IRQHandler+0x51e>
      return;
 800b348:	bf00      	nop
  }
}
 800b34a:	37e8      	adds	r7, #232	@ 0xe8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4613      	mov	r3, r2
 800b39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b39c:	e03b      	b.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a4:	d037      	beq.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a6:	f7fc fa3f 	bl	8007828 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	6a3a      	ldr	r2, [r7, #32]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d302      	bcc.n	800b3bc <UART_WaitOnFlagUntilTimeout+0x30>
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	e03a      	b.n	800b436 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d023      	beq.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b80      	cmp	r3, #128	@ 0x80
 800b3d2:	d020      	beq.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b40      	cmp	r3, #64	@ 0x40
 800b3d8:	d01d      	beq.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0308 	and.w	r3, r3, #8
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d116      	bne.n	800b416 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 f857 	bl	800b4b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2208      	movs	r2, #8
 800b408:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e00f      	b.n	800b436 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4013      	ands	r3, r2
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	429a      	cmp	r2, r3
 800b424:	bf0c      	ite	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	2300      	movne	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	461a      	mov	r2, r3
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	429a      	cmp	r2, r3
 800b432:	d0b4      	beq.n	800b39e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b43e:	b480      	push	{r7}
 800b440:	b085      	sub	sp, #20
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	4613      	mov	r3, r2
 800b44a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	88fa      	ldrh	r2, [r7, #6]
 800b456:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	88fa      	ldrh	r2, [r7, #6]
 800b45c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2222      	movs	r2, #34	@ 0x22
 800b468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d007      	beq.n	800b484 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b482:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695a      	ldr	r2, [r3, #20]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0220 	orr.w	r2, r2, #32
 800b4a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b095      	sub	sp, #84	@ 0x54
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	330c      	adds	r3, #12
 800b4d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4da:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e5      	bne.n	800b4ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3314      	adds	r3, #20
 800b4f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f023 0301 	bic.w	r3, r3, #1
 800b504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3314      	adds	r3, #20
 800b50c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b50e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e5      	bne.n	800b4ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b526:	2b01      	cmp	r3, #1
 800b528:	d119      	bne.n	800b55e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	330c      	adds	r3, #12
 800b530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	60bb      	str	r3, [r7, #8]
   return(result);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f023 0310 	bic.w	r3, r3, #16
 800b540:	647b      	str	r3, [r7, #68]	@ 0x44
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	330c      	adds	r3, #12
 800b548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b54a:	61ba      	str	r2, [r7, #24]
 800b54c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6979      	ldr	r1, [r7, #20]
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	613b      	str	r3, [r7, #16]
   return(result);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e5      	bne.n	800b52a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b56c:	bf00      	nop
 800b56e:	3754      	adds	r7, #84	@ 0x54
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7ff fef0 	bl	800b378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b598:	bf00      	nop
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b21      	cmp	r3, #33	@ 0x21
 800b5b2:	d13e      	bne.n	800b632 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5bc:	d114      	bne.n	800b5e8 <UART_Transmit_IT+0x48>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d110      	bne.n	800b5e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	1c9a      	adds	r2, r3, #2
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	621a      	str	r2, [r3, #32]
 800b5e6:	e008      	b.n	800b5fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	1c59      	adds	r1, r3, #1
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6211      	str	r1, [r2, #32]
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	3b01      	subs	r3, #1
 800b602:	b29b      	uxth	r3, r3
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	4619      	mov	r1, r3
 800b608:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10f      	bne.n	800b62e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b61c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b62c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	e000      	b.n	800b634 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b632:	2302      	movs	r3, #2
  }
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b656:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fe75 	bl	800b350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08c      	sub	sp, #48	@ 0x30
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b22      	cmp	r3, #34	@ 0x22
 800b682:	f040 80ae 	bne.w	800b7e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b68e:	d117      	bne.n	800b6c0 <UART_Receive_IT+0x50>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d113      	bne.n	800b6c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b698:	2300      	movs	r3, #0
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b8:	1c9a      	adds	r2, r3, #2
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6be:	e026      	b.n	800b70e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6d2:	d007      	beq.n	800b6e4 <UART_Receive_IT+0x74>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <UART_Receive_IT+0x82>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e008      	b.n	800b704 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b702:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b712:	b29b      	uxth	r3, r3
 800b714:	3b01      	subs	r3, #1
 800b716:	b29b      	uxth	r3, r3
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	4619      	mov	r1, r3
 800b71c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d15d      	bne.n	800b7de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68da      	ldr	r2, [r3, #12]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f022 0220 	bic.w	r2, r2, #32
 800b730:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695a      	ldr	r2, [r3, #20]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b764:	2b01      	cmp	r3, #1
 800b766:	d135      	bne.n	800b7d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	330c      	adds	r3, #12
 800b774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	e853 3f00 	ldrex	r3, [r3]
 800b77c:	613b      	str	r3, [r7, #16]
   return(result);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	f023 0310 	bic.w	r3, r3, #16
 800b784:	627b      	str	r3, [r7, #36]	@ 0x24
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	330c      	adds	r3, #12
 800b78c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b78e:	623a      	str	r2, [r7, #32]
 800b790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b792:	69f9      	ldr	r1, [r7, #28]
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e5      	bne.n	800b76e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0310 	and.w	r3, r3, #16
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d10a      	bne.n	800b7c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7fa fc63 	bl	8006098 <HAL_UARTEx_RxEventCallback>
 800b7d2:	e002      	b.n	800b7da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff fdc5 	bl	800b364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e002      	b.n	800b7e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e000      	b.n	800b7e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b7e2:	2302      	movs	r3, #2
  }
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3730      	adds	r7, #48	@ 0x30
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7f0:	b0c0      	sub	sp, #256	@ 0x100
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b808:	68d9      	ldr	r1, [r3, #12]
 800b80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	ea40 0301 	orr.w	r3, r0, r1
 800b814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	431a      	orrs	r2, r3
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	4313      	orrs	r3, r2
 800b834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b844:	f021 010c 	bic.w	r1, r1, #12
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b852:	430b      	orrs	r3, r1
 800b854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b866:	6999      	ldr	r1, [r3, #24]
 800b868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	ea40 0301 	orr.w	r3, r0, r1
 800b872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4b8f      	ldr	r3, [pc, #572]	@ (800bab8 <UART_SetConfig+0x2cc>)
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d005      	beq.n	800b88c <UART_SetConfig+0xa0>
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	4b8d      	ldr	r3, [pc, #564]	@ (800babc <UART_SetConfig+0x2d0>)
 800b888:	429a      	cmp	r2, r3
 800b88a:	d104      	bne.n	800b896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b88c:	f7fe fbb0 	bl	8009ff0 <HAL_RCC_GetPCLK2Freq>
 800b890:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b894:	e003      	b.n	800b89e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b896:	f7fe fb97 	bl	8009fc8 <HAL_RCC_GetPCLK1Freq>
 800b89a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8a8:	f040 810c 	bne.w	800bac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b8ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b8be:	4622      	mov	r2, r4
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	1891      	adds	r1, r2, r2
 800b8c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b8c6:	415b      	adcs	r3, r3
 800b8c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	eb12 0801 	adds.w	r8, r2, r1
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	eb43 0901 	adc.w	r9, r3, r1
 800b8da:	f04f 0200 	mov.w	r2, #0
 800b8de:	f04f 0300 	mov.w	r3, #0
 800b8e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8ee:	4690      	mov	r8, r2
 800b8f0:	4699      	mov	r9, r3
 800b8f2:	4623      	mov	r3, r4
 800b8f4:	eb18 0303 	adds.w	r3, r8, r3
 800b8f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	eb49 0303 	adc.w	r3, r9, r3
 800b902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b912:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b91a:	460b      	mov	r3, r1
 800b91c:	18db      	adds	r3, r3, r3
 800b91e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b920:	4613      	mov	r3, r2
 800b922:	eb42 0303 	adc.w	r3, r2, r3
 800b926:	657b      	str	r3, [r7, #84]	@ 0x54
 800b928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b92c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b930:	f7f5 fa0a 	bl	8000d48 <__aeabi_uldivmod>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4b61      	ldr	r3, [pc, #388]	@ (800bac0 <UART_SetConfig+0x2d4>)
 800b93a:	fba3 2302 	umull	r2, r3, r3, r2
 800b93e:	095b      	lsrs	r3, r3, #5
 800b940:	011c      	lsls	r4, r3, #4
 800b942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b946:	2200      	movs	r2, #0
 800b948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b94c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b954:	4642      	mov	r2, r8
 800b956:	464b      	mov	r3, r9
 800b958:	1891      	adds	r1, r2, r2
 800b95a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b95c:	415b      	adcs	r3, r3
 800b95e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b964:	4641      	mov	r1, r8
 800b966:	eb12 0a01 	adds.w	sl, r2, r1
 800b96a:	4649      	mov	r1, r9
 800b96c:	eb43 0b01 	adc.w	fp, r3, r1
 800b970:	f04f 0200 	mov.w	r2, #0
 800b974:	f04f 0300 	mov.w	r3, #0
 800b978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b97c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b984:	4692      	mov	sl, r2
 800b986:	469b      	mov	fp, r3
 800b988:	4643      	mov	r3, r8
 800b98a:	eb1a 0303 	adds.w	r3, sl, r3
 800b98e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b992:	464b      	mov	r3, r9
 800b994:	eb4b 0303 	adc.w	r3, fp, r3
 800b998:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b9ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	18db      	adds	r3, r3, r3
 800b9b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	eb42 0303 	adc.w	r3, r2, r3
 800b9bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b9c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b9c6:	f7f5 f9bf 	bl	8000d48 <__aeabi_uldivmod>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	4b3b      	ldr	r3, [pc, #236]	@ (800bac0 <UART_SetConfig+0x2d4>)
 800b9d2:	fba3 2301 	umull	r2, r3, r3, r1
 800b9d6:	095b      	lsrs	r3, r3, #5
 800b9d8:	2264      	movs	r2, #100	@ 0x64
 800b9da:	fb02 f303 	mul.w	r3, r2, r3
 800b9de:	1acb      	subs	r3, r1, r3
 800b9e0:	00db      	lsls	r3, r3, #3
 800b9e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b9e6:	4b36      	ldr	r3, [pc, #216]	@ (800bac0 <UART_SetConfig+0x2d4>)
 800b9e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b9ec:	095b      	lsrs	r3, r3, #5
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9f4:	441c      	add	r4, r3
 800b9f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ba04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba08:	4642      	mov	r2, r8
 800ba0a:	464b      	mov	r3, r9
 800ba0c:	1891      	adds	r1, r2, r2
 800ba0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba10:	415b      	adcs	r3, r3
 800ba12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba18:	4641      	mov	r1, r8
 800ba1a:	1851      	adds	r1, r2, r1
 800ba1c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba1e:	4649      	mov	r1, r9
 800ba20:	414b      	adcs	r3, r1
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba24:	f04f 0200 	mov.w	r2, #0
 800ba28:	f04f 0300 	mov.w	r3, #0
 800ba2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba30:	4659      	mov	r1, fp
 800ba32:	00cb      	lsls	r3, r1, #3
 800ba34:	4651      	mov	r1, sl
 800ba36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba3a:	4651      	mov	r1, sl
 800ba3c:	00ca      	lsls	r2, r1, #3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4619      	mov	r1, r3
 800ba42:	4603      	mov	r3, r0
 800ba44:	4642      	mov	r2, r8
 800ba46:	189b      	adds	r3, r3, r2
 800ba48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	460a      	mov	r2, r1
 800ba50:	eb42 0303 	adc.w	r3, r2, r3
 800ba54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	18db      	adds	r3, r3, r3
 800ba70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba72:	4613      	mov	r3, r2
 800ba74:	eb42 0303 	adc.w	r3, r2, r3
 800ba78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba82:	f7f5 f961 	bl	8000d48 <__aeabi_uldivmod>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bac0 <UART_SetConfig+0x2d4>)
 800ba8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	2164      	movs	r1, #100	@ 0x64
 800ba94:	fb01 f303 	mul.w	r3, r1, r3
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	3332      	adds	r3, #50	@ 0x32
 800ba9e:	4a08      	ldr	r2, [pc, #32]	@ (800bac0 <UART_SetConfig+0x2d4>)
 800baa0:	fba2 2303 	umull	r2, r3, r2, r3
 800baa4:	095b      	lsrs	r3, r3, #5
 800baa6:	f003 0207 	and.w	r2, r3, #7
 800baaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4422      	add	r2, r4
 800bab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bab4:	e106      	b.n	800bcc4 <UART_SetConfig+0x4d8>
 800bab6:	bf00      	nop
 800bab8:	40011000 	.word	0x40011000
 800babc:	40011400 	.word	0x40011400
 800bac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bace:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	1891      	adds	r1, r2, r2
 800badc:	6239      	str	r1, [r7, #32]
 800bade:	415b      	adcs	r3, r3
 800bae0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bae6:	4641      	mov	r1, r8
 800bae8:	1854      	adds	r4, r2, r1
 800baea:	4649      	mov	r1, r9
 800baec:	eb43 0501 	adc.w	r5, r3, r1
 800baf0:	f04f 0200 	mov.w	r2, #0
 800baf4:	f04f 0300 	mov.w	r3, #0
 800baf8:	00eb      	lsls	r3, r5, #3
 800bafa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bafe:	00e2      	lsls	r2, r4, #3
 800bb00:	4614      	mov	r4, r2
 800bb02:	461d      	mov	r5, r3
 800bb04:	4643      	mov	r3, r8
 800bb06:	18e3      	adds	r3, r4, r3
 800bb08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb0c:	464b      	mov	r3, r9
 800bb0e:	eb45 0303 	adc.w	r3, r5, r3
 800bb12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb26:	f04f 0200 	mov.w	r2, #0
 800bb2a:	f04f 0300 	mov.w	r3, #0
 800bb2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb32:	4629      	mov	r1, r5
 800bb34:	008b      	lsls	r3, r1, #2
 800bb36:	4621      	mov	r1, r4
 800bb38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	008a      	lsls	r2, r1, #2
 800bb40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb44:	f7f5 f900 	bl	8000d48 <__aeabi_uldivmod>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4b60      	ldr	r3, [pc, #384]	@ (800bcd0 <UART_SetConfig+0x4e4>)
 800bb4e:	fba3 2302 	umull	r2, r3, r3, r2
 800bb52:	095b      	lsrs	r3, r3, #5
 800bb54:	011c      	lsls	r4, r3, #4
 800bb56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb68:	4642      	mov	r2, r8
 800bb6a:	464b      	mov	r3, r9
 800bb6c:	1891      	adds	r1, r2, r2
 800bb6e:	61b9      	str	r1, [r7, #24]
 800bb70:	415b      	adcs	r3, r3
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb78:	4641      	mov	r1, r8
 800bb7a:	1851      	adds	r1, r2, r1
 800bb7c:	6139      	str	r1, [r7, #16]
 800bb7e:	4649      	mov	r1, r9
 800bb80:	414b      	adcs	r3, r1
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	f04f 0200 	mov.w	r2, #0
 800bb88:	f04f 0300 	mov.w	r3, #0
 800bb8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb90:	4659      	mov	r1, fp
 800bb92:	00cb      	lsls	r3, r1, #3
 800bb94:	4651      	mov	r1, sl
 800bb96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb9a:	4651      	mov	r1, sl
 800bb9c:	00ca      	lsls	r2, r1, #3
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	4603      	mov	r3, r0
 800bba4:	4642      	mov	r2, r8
 800bba6:	189b      	adds	r3, r3, r2
 800bba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bbac:	464b      	mov	r3, r9
 800bbae:	460a      	mov	r2, r1
 800bbb0:	eb42 0303 	adc.w	r3, r2, r3
 800bbb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bbc4:	f04f 0200 	mov.w	r2, #0
 800bbc8:	f04f 0300 	mov.w	r3, #0
 800bbcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	008b      	lsls	r3, r1, #2
 800bbd4:	4641      	mov	r1, r8
 800bbd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbda:	4641      	mov	r1, r8
 800bbdc:	008a      	lsls	r2, r1, #2
 800bbde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bbe2:	f7f5 f8b1 	bl	8000d48 <__aeabi_uldivmod>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4611      	mov	r1, r2
 800bbec:	4b38      	ldr	r3, [pc, #224]	@ (800bcd0 <UART_SetConfig+0x4e4>)
 800bbee:	fba3 2301 	umull	r2, r3, r3, r1
 800bbf2:	095b      	lsrs	r3, r3, #5
 800bbf4:	2264      	movs	r2, #100	@ 0x64
 800bbf6:	fb02 f303 	mul.w	r3, r2, r3
 800bbfa:	1acb      	subs	r3, r1, r3
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	3332      	adds	r3, #50	@ 0x32
 800bc00:	4a33      	ldr	r2, [pc, #204]	@ (800bcd0 <UART_SetConfig+0x4e4>)
 800bc02:	fba2 2303 	umull	r2, r3, r2, r3
 800bc06:	095b      	lsrs	r3, r3, #5
 800bc08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc0c:	441c      	add	r4, r3
 800bc0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc12:	2200      	movs	r2, #0
 800bc14:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc16:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	464b      	mov	r3, r9
 800bc20:	1891      	adds	r1, r2, r2
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	415b      	adcs	r3, r3
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc2c:	4641      	mov	r1, r8
 800bc2e:	1851      	adds	r1, r2, r1
 800bc30:	6039      	str	r1, [r7, #0]
 800bc32:	4649      	mov	r1, r9
 800bc34:	414b      	adcs	r3, r1
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc44:	4659      	mov	r1, fp
 800bc46:	00cb      	lsls	r3, r1, #3
 800bc48:	4651      	mov	r1, sl
 800bc4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc4e:	4651      	mov	r1, sl
 800bc50:	00ca      	lsls	r2, r1, #3
 800bc52:	4610      	mov	r0, r2
 800bc54:	4619      	mov	r1, r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	4642      	mov	r2, r8
 800bc5a:	189b      	adds	r3, r3, r2
 800bc5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc5e:	464b      	mov	r3, r9
 800bc60:	460a      	mov	r2, r1
 800bc62:	eb42 0303 	adc.w	r3, r2, r3
 800bc66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc72:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc74:	f04f 0200 	mov.w	r2, #0
 800bc78:	f04f 0300 	mov.w	r3, #0
 800bc7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc80:	4649      	mov	r1, r9
 800bc82:	008b      	lsls	r3, r1, #2
 800bc84:	4641      	mov	r1, r8
 800bc86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc8a:	4641      	mov	r1, r8
 800bc8c:	008a      	lsls	r2, r1, #2
 800bc8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc92:	f7f5 f859 	bl	8000d48 <__aeabi_uldivmod>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd0 <UART_SetConfig+0x4e4>)
 800bc9c:	fba3 1302 	umull	r1, r3, r3, r2
 800bca0:	095b      	lsrs	r3, r3, #5
 800bca2:	2164      	movs	r1, #100	@ 0x64
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	3332      	adds	r3, #50	@ 0x32
 800bcae:	4a08      	ldr	r2, [pc, #32]	@ (800bcd0 <UART_SetConfig+0x4e4>)
 800bcb0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb4:	095b      	lsrs	r3, r3, #5
 800bcb6:	f003 020f 	and.w	r2, r3, #15
 800bcba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4422      	add	r2, r4
 800bcc2:	609a      	str	r2, [r3, #8]
}
 800bcc4:	bf00      	nop
 800bcc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bcca:	46bd      	mov	sp, r7
 800bccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcd0:	51eb851f 	.word	0x51eb851f

0800bcd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bcd8:	4904      	ldr	r1, [pc, #16]	@ (800bcec <MX_FATFS_Init+0x18>)
 800bcda:	4805      	ldr	r0, [pc, #20]	@ (800bcf0 <MX_FATFS_Init+0x1c>)
 800bcdc:	f000 f8b0 	bl	800be40 <FATFS_LinkDriver>
 800bce0:	4603      	mov	r3, r0
 800bce2:	461a      	mov	r2, r3
 800bce4:	4b03      	ldr	r3, [pc, #12]	@ (800bcf4 <MX_FATFS_Init+0x20>)
 800bce6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bce8:	bf00      	nop
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200016a8 	.word	0x200016a8
 800bcf0:	20000920 	.word	0x20000920
 800bcf4:	200016a4 	.word	0x200016a4

0800bcf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800bd02:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <USER_initialize+0x24>)
 800bd04:	2201      	movs	r2, #1
 800bd06:	701a      	strb	r2, [r3, #0]
    return Stat;
 800bd08:	4b04      	ldr	r3, [pc, #16]	@ (800bd1c <USER_initialize+0x24>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	2000091d 	.word	0x2000091d

0800bd20 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800bd2a:	4b06      	ldr	r3, [pc, #24]	@ (800bd44 <USER_status+0x24>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800bd30:	4b04      	ldr	r3, [pc, #16]	@ (800bd44 <USER_status+0x24>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2000091d 	.word	0x2000091d

0800bd48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60b9      	str	r1, [r7, #8]
 800bd50:	607a      	str	r2, [r7, #4]
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800bd58:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	603b      	str	r3, [r7, #0]
 800bd72:	4603      	mov	r3, r0
 800bd74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800bd76:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	603a      	str	r2, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
 800bd90:	460b      	mov	r3, r1
 800bd92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]
    return res;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
	...

0800bda8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bdbe:	4b1f      	ldr	r3, [pc, #124]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdc0:	7a5b      	ldrb	r3, [r3, #9]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d131      	bne.n	800be2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdca:	7a5b      	ldrb	r3, [r3, #9]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	4b1a      	ldr	r3, [pc, #104]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bdd6:	4b19      	ldr	r3, [pc, #100]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdd8:	7a5b      	ldrb	r3, [r3, #9]
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	4a17      	ldr	r2, [pc, #92]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bde6:	4b15      	ldr	r3, [pc, #84]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bde8:	7a5b      	ldrb	r3, [r3, #9]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	461a      	mov	r2, r3
 800bdee:	4b13      	ldr	r3, [pc, #76]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdf0:	4413      	add	r3, r2
 800bdf2:	79fa      	ldrb	r2, [r7, #7]
 800bdf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bdf6:	4b11      	ldr	r3, [pc, #68]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800bdf8:	7a5b      	ldrb	r3, [r3, #9]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	b2d1      	uxtb	r1, r2
 800be00:	4a0e      	ldr	r2, [pc, #56]	@ (800be3c <FATFS_LinkDriverEx+0x94>)
 800be02:	7251      	strb	r1, [r2, #9]
 800be04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be06:	7dbb      	ldrb	r3, [r7, #22]
 800be08:	3330      	adds	r3, #48	@ 0x30
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	3301      	adds	r3, #1
 800be14:	223a      	movs	r2, #58	@ 0x3a
 800be16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	3302      	adds	r3, #2
 800be1c:	222f      	movs	r2, #47	@ 0x2f
 800be1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	3303      	adds	r3, #3
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	371c      	adds	r7, #28
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	200016ac 	.word	0x200016ac

0800be40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800be4a:	2200      	movs	r2, #0
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff ffaa 	bl	800bda8 <FATFS_LinkDriverEx>
 800be54:	4603      	mov	r3, r0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <malloc>:
 800be60:	4b02      	ldr	r3, [pc, #8]	@ (800be6c <malloc+0xc>)
 800be62:	4601      	mov	r1, r0
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	f000 b82d 	b.w	800bec4 <_malloc_r>
 800be6a:	bf00      	nop
 800be6c:	20000934 	.word	0x20000934

0800be70 <free>:
 800be70:	4b02      	ldr	r3, [pc, #8]	@ (800be7c <free+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f000 b915 	b.w	800c0a4 <_free_r>
 800be7a:	bf00      	nop
 800be7c:	20000934 	.word	0x20000934

0800be80 <sbrk_aligned>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	4e0f      	ldr	r6, [pc, #60]	@ (800bec0 <sbrk_aligned+0x40>)
 800be84:	460c      	mov	r4, r1
 800be86:	6831      	ldr	r1, [r6, #0]
 800be88:	4605      	mov	r5, r0
 800be8a:	b911      	cbnz	r1, 800be92 <sbrk_aligned+0x12>
 800be8c:	f000 f8ce 	bl	800c02c <_sbrk_r>
 800be90:	6030      	str	r0, [r6, #0]
 800be92:	4621      	mov	r1, r4
 800be94:	4628      	mov	r0, r5
 800be96:	f000 f8c9 	bl	800c02c <_sbrk_r>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d103      	bne.n	800bea6 <sbrk_aligned+0x26>
 800be9e:	f04f 34ff 	mov.w	r4, #4294967295
 800bea2:	4620      	mov	r0, r4
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
 800bea6:	1cc4      	adds	r4, r0, #3
 800bea8:	f024 0403 	bic.w	r4, r4, #3
 800beac:	42a0      	cmp	r0, r4
 800beae:	d0f8      	beq.n	800bea2 <sbrk_aligned+0x22>
 800beb0:	1a21      	subs	r1, r4, r0
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f8ba 	bl	800c02c <_sbrk_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	d1f2      	bne.n	800bea2 <sbrk_aligned+0x22>
 800bebc:	e7ef      	b.n	800be9e <sbrk_aligned+0x1e>
 800bebe:	bf00      	nop
 800bec0:	200016b8 	.word	0x200016b8

0800bec4 <_malloc_r>:
 800bec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec8:	1ccd      	adds	r5, r1, #3
 800beca:	f025 0503 	bic.w	r5, r5, #3
 800bece:	3508      	adds	r5, #8
 800bed0:	2d0c      	cmp	r5, #12
 800bed2:	bf38      	it	cc
 800bed4:	250c      	movcc	r5, #12
 800bed6:	2d00      	cmp	r5, #0
 800bed8:	4606      	mov	r6, r0
 800beda:	db01      	blt.n	800bee0 <_malloc_r+0x1c>
 800bedc:	42a9      	cmp	r1, r5
 800bede:	d904      	bls.n	800beea <_malloc_r+0x26>
 800bee0:	230c      	movs	r3, #12
 800bee2:	6033      	str	r3, [r6, #0]
 800bee4:	2000      	movs	r0, #0
 800bee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfc0 <_malloc_r+0xfc>
 800beee:	f000 f869 	bl	800bfc4 <__malloc_lock>
 800bef2:	f8d8 3000 	ldr.w	r3, [r8]
 800bef6:	461c      	mov	r4, r3
 800bef8:	bb44      	cbnz	r4, 800bf4c <_malloc_r+0x88>
 800befa:	4629      	mov	r1, r5
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ffbf 	bl	800be80 <sbrk_aligned>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	4604      	mov	r4, r0
 800bf06:	d158      	bne.n	800bfba <_malloc_r+0xf6>
 800bf08:	f8d8 4000 	ldr.w	r4, [r8]
 800bf0c:	4627      	mov	r7, r4
 800bf0e:	2f00      	cmp	r7, #0
 800bf10:	d143      	bne.n	800bf9a <_malloc_r+0xd6>
 800bf12:	2c00      	cmp	r4, #0
 800bf14:	d04b      	beq.n	800bfae <_malloc_r+0xea>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	eb04 0903 	add.w	r9, r4, r3
 800bf20:	f000 f884 	bl	800c02c <_sbrk_r>
 800bf24:	4581      	cmp	r9, r0
 800bf26:	d142      	bne.n	800bfae <_malloc_r+0xea>
 800bf28:	6821      	ldr	r1, [r4, #0]
 800bf2a:	1a6d      	subs	r5, r5, r1
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ffa6 	bl	800be80 <sbrk_aligned>
 800bf34:	3001      	adds	r0, #1
 800bf36:	d03a      	beq.n	800bfae <_malloc_r+0xea>
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	442b      	add	r3, r5
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	bb62      	cbnz	r2, 800bfa0 <_malloc_r+0xdc>
 800bf46:	f8c8 7000 	str.w	r7, [r8]
 800bf4a:	e00f      	b.n	800bf6c <_malloc_r+0xa8>
 800bf4c:	6822      	ldr	r2, [r4, #0]
 800bf4e:	1b52      	subs	r2, r2, r5
 800bf50:	d420      	bmi.n	800bf94 <_malloc_r+0xd0>
 800bf52:	2a0b      	cmp	r2, #11
 800bf54:	d917      	bls.n	800bf86 <_malloc_r+0xc2>
 800bf56:	1961      	adds	r1, r4, r5
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	6025      	str	r5, [r4, #0]
 800bf5c:	bf18      	it	ne
 800bf5e:	6059      	strne	r1, [r3, #4]
 800bf60:	6863      	ldr	r3, [r4, #4]
 800bf62:	bf08      	it	eq
 800bf64:	f8c8 1000 	streq.w	r1, [r8]
 800bf68:	5162      	str	r2, [r4, r5]
 800bf6a:	604b      	str	r3, [r1, #4]
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f000 f82f 	bl	800bfd0 <__malloc_unlock>
 800bf72:	f104 000b 	add.w	r0, r4, #11
 800bf76:	1d23      	adds	r3, r4, #4
 800bf78:	f020 0007 	bic.w	r0, r0, #7
 800bf7c:	1ac2      	subs	r2, r0, r3
 800bf7e:	bf1c      	itt	ne
 800bf80:	1a1b      	subne	r3, r3, r0
 800bf82:	50a3      	strne	r3, [r4, r2]
 800bf84:	e7af      	b.n	800bee6 <_malloc_r+0x22>
 800bf86:	6862      	ldr	r2, [r4, #4]
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	bf0c      	ite	eq
 800bf8c:	f8c8 2000 	streq.w	r2, [r8]
 800bf90:	605a      	strne	r2, [r3, #4]
 800bf92:	e7eb      	b.n	800bf6c <_malloc_r+0xa8>
 800bf94:	4623      	mov	r3, r4
 800bf96:	6864      	ldr	r4, [r4, #4]
 800bf98:	e7ae      	b.n	800bef8 <_malloc_r+0x34>
 800bf9a:	463c      	mov	r4, r7
 800bf9c:	687f      	ldr	r7, [r7, #4]
 800bf9e:	e7b6      	b.n	800bf0e <_malloc_r+0x4a>
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d1fb      	bne.n	800bfa0 <_malloc_r+0xdc>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	6053      	str	r3, [r2, #4]
 800bfac:	e7de      	b.n	800bf6c <_malloc_r+0xa8>
 800bfae:	230c      	movs	r3, #12
 800bfb0:	6033      	str	r3, [r6, #0]
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f000 f80c 	bl	800bfd0 <__malloc_unlock>
 800bfb8:	e794      	b.n	800bee4 <_malloc_r+0x20>
 800bfba:	6005      	str	r5, [r0, #0]
 800bfbc:	e7d6      	b.n	800bf6c <_malloc_r+0xa8>
 800bfbe:	bf00      	nop
 800bfc0:	200016bc 	.word	0x200016bc

0800bfc4 <__malloc_lock>:
 800bfc4:	4801      	ldr	r0, [pc, #4]	@ (800bfcc <__malloc_lock+0x8>)
 800bfc6:	f000 b86b 	b.w	800c0a0 <__retarget_lock_acquire_recursive>
 800bfca:	bf00      	nop
 800bfcc:	200017fc 	.word	0x200017fc

0800bfd0 <__malloc_unlock>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	@ (800bfd8 <__malloc_unlock+0x8>)
 800bfd2:	f000 b866 	b.w	800c0a2 <__retarget_lock_release_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	200017fc 	.word	0x200017fc

0800bfdc <siprintf>:
 800bfdc:	b40e      	push	{r1, r2, r3}
 800bfde:	b500      	push	{lr}
 800bfe0:	b09c      	sub	sp, #112	@ 0x70
 800bfe2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bfe4:	9002      	str	r0, [sp, #8]
 800bfe6:	9006      	str	r0, [sp, #24]
 800bfe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bfec:	4809      	ldr	r0, [pc, #36]	@ (800c014 <siprintf+0x38>)
 800bfee:	9107      	str	r1, [sp, #28]
 800bff0:	9104      	str	r1, [sp, #16]
 800bff2:	4909      	ldr	r1, [pc, #36]	@ (800c018 <siprintf+0x3c>)
 800bff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff8:	9105      	str	r1, [sp, #20]
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	a902      	add	r1, sp, #8
 800c000:	f000 f8f6 	bl	800c1f0 <_svfiprintf_r>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
 800c00a:	b01c      	add	sp, #112	@ 0x70
 800c00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c010:	b003      	add	sp, #12
 800c012:	4770      	bx	lr
 800c014:	20000934 	.word	0x20000934
 800c018:	ffff0208 	.word	0xffff0208

0800c01c <memset>:
 800c01c:	4402      	add	r2, r0
 800c01e:	4603      	mov	r3, r0
 800c020:	4293      	cmp	r3, r2
 800c022:	d100      	bne.n	800c026 <memset+0xa>
 800c024:	4770      	bx	lr
 800c026:	f803 1b01 	strb.w	r1, [r3], #1
 800c02a:	e7f9      	b.n	800c020 <memset+0x4>

0800c02c <_sbrk_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4d06      	ldr	r5, [pc, #24]	@ (800c048 <_sbrk_r+0x1c>)
 800c030:	2300      	movs	r3, #0
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	602b      	str	r3, [r5, #0]
 800c038:	f7fb fb1e 	bl	8007678 <_sbrk>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_sbrk_r+0x1a>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_sbrk_r+0x1a>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	200017f8 	.word	0x200017f8

0800c04c <__errno>:
 800c04c:	4b01      	ldr	r3, [pc, #4]	@ (800c054 <__errno+0x8>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20000934 	.word	0x20000934

0800c058 <__libc_init_array>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	4d0d      	ldr	r5, [pc, #52]	@ (800c090 <__libc_init_array+0x38>)
 800c05c:	4c0d      	ldr	r4, [pc, #52]	@ (800c094 <__libc_init_array+0x3c>)
 800c05e:	1b64      	subs	r4, r4, r5
 800c060:	10a4      	asrs	r4, r4, #2
 800c062:	2600      	movs	r6, #0
 800c064:	42a6      	cmp	r6, r4
 800c066:	d109      	bne.n	800c07c <__libc_init_array+0x24>
 800c068:	4d0b      	ldr	r5, [pc, #44]	@ (800c098 <__libc_init_array+0x40>)
 800c06a:	4c0c      	ldr	r4, [pc, #48]	@ (800c09c <__libc_init_array+0x44>)
 800c06c:	f000 fba8 	bl	800c7c0 <_init>
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	2600      	movs	r6, #0
 800c076:	42a6      	cmp	r6, r4
 800c078:	d105      	bne.n	800c086 <__libc_init_array+0x2e>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c080:	4798      	blx	r3
 800c082:	3601      	adds	r6, #1
 800c084:	e7ee      	b.n	800c064 <__libc_init_array+0xc>
 800c086:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08a:	4798      	blx	r3
 800c08c:	3601      	adds	r6, #1
 800c08e:	e7f2      	b.n	800c076 <__libc_init_array+0x1e>
 800c090:	0800db54 	.word	0x0800db54
 800c094:	0800db54 	.word	0x0800db54
 800c098:	0800db54 	.word	0x0800db54
 800c09c:	0800db58 	.word	0x0800db58

0800c0a0 <__retarget_lock_acquire_recursive>:
 800c0a0:	4770      	bx	lr

0800c0a2 <__retarget_lock_release_recursive>:
 800c0a2:	4770      	bx	lr

0800c0a4 <_free_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	d041      	beq.n	800c130 <_free_r+0x8c>
 800c0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b0:	1f0c      	subs	r4, r1, #4
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bfb8      	it	lt
 800c0b6:	18e4      	addlt	r4, r4, r3
 800c0b8:	f7ff ff84 	bl	800bfc4 <__malloc_lock>
 800c0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c134 <_free_r+0x90>)
 800c0be:	6813      	ldr	r3, [r2, #0]
 800c0c0:	b933      	cbnz	r3, 800c0d0 <_free_r+0x2c>
 800c0c2:	6063      	str	r3, [r4, #4]
 800c0c4:	6014      	str	r4, [r2, #0]
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0cc:	f7ff bf80 	b.w	800bfd0 <__malloc_unlock>
 800c0d0:	42a3      	cmp	r3, r4
 800c0d2:	d908      	bls.n	800c0e6 <_free_r+0x42>
 800c0d4:	6820      	ldr	r0, [r4, #0]
 800c0d6:	1821      	adds	r1, r4, r0
 800c0d8:	428b      	cmp	r3, r1
 800c0da:	bf01      	itttt	eq
 800c0dc:	6819      	ldreq	r1, [r3, #0]
 800c0de:	685b      	ldreq	r3, [r3, #4]
 800c0e0:	1809      	addeq	r1, r1, r0
 800c0e2:	6021      	streq	r1, [r4, #0]
 800c0e4:	e7ed      	b.n	800c0c2 <_free_r+0x1e>
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	b10b      	cbz	r3, 800c0f0 <_free_r+0x4c>
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	d9fa      	bls.n	800c0e6 <_free_r+0x42>
 800c0f0:	6811      	ldr	r1, [r2, #0]
 800c0f2:	1850      	adds	r0, r2, r1
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d10b      	bne.n	800c110 <_free_r+0x6c>
 800c0f8:	6820      	ldr	r0, [r4, #0]
 800c0fa:	4401      	add	r1, r0
 800c0fc:	1850      	adds	r0, r2, r1
 800c0fe:	4283      	cmp	r3, r0
 800c100:	6011      	str	r1, [r2, #0]
 800c102:	d1e0      	bne.n	800c0c6 <_free_r+0x22>
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	6053      	str	r3, [r2, #4]
 800c10a:	4408      	add	r0, r1
 800c10c:	6010      	str	r0, [r2, #0]
 800c10e:	e7da      	b.n	800c0c6 <_free_r+0x22>
 800c110:	d902      	bls.n	800c118 <_free_r+0x74>
 800c112:	230c      	movs	r3, #12
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	e7d6      	b.n	800c0c6 <_free_r+0x22>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	1821      	adds	r1, r4, r0
 800c11c:	428b      	cmp	r3, r1
 800c11e:	bf04      	itt	eq
 800c120:	6819      	ldreq	r1, [r3, #0]
 800c122:	685b      	ldreq	r3, [r3, #4]
 800c124:	6063      	str	r3, [r4, #4]
 800c126:	bf04      	itt	eq
 800c128:	1809      	addeq	r1, r1, r0
 800c12a:	6021      	streq	r1, [r4, #0]
 800c12c:	6054      	str	r4, [r2, #4]
 800c12e:	e7ca      	b.n	800c0c6 <_free_r+0x22>
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	200016bc 	.word	0x200016bc

0800c138 <__ssputs_r>:
 800c138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c13c:	688e      	ldr	r6, [r1, #8]
 800c13e:	461f      	mov	r7, r3
 800c140:	42be      	cmp	r6, r7
 800c142:	680b      	ldr	r3, [r1, #0]
 800c144:	4682      	mov	sl, r0
 800c146:	460c      	mov	r4, r1
 800c148:	4690      	mov	r8, r2
 800c14a:	d82d      	bhi.n	800c1a8 <__ssputs_r+0x70>
 800c14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c154:	d026      	beq.n	800c1a4 <__ssputs_r+0x6c>
 800c156:	6965      	ldr	r5, [r4, #20]
 800c158:	6909      	ldr	r1, [r1, #16]
 800c15a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c15e:	eba3 0901 	sub.w	r9, r3, r1
 800c162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c166:	1c7b      	adds	r3, r7, #1
 800c168:	444b      	add	r3, r9
 800c16a:	106d      	asrs	r5, r5, #1
 800c16c:	429d      	cmp	r5, r3
 800c16e:	bf38      	it	cc
 800c170:	461d      	movcc	r5, r3
 800c172:	0553      	lsls	r3, r2, #21
 800c174:	d527      	bpl.n	800c1c6 <__ssputs_r+0x8e>
 800c176:	4629      	mov	r1, r5
 800c178:	f7ff fea4 	bl	800bec4 <_malloc_r>
 800c17c:	4606      	mov	r6, r0
 800c17e:	b360      	cbz	r0, 800c1da <__ssputs_r+0xa2>
 800c180:	6921      	ldr	r1, [r4, #16]
 800c182:	464a      	mov	r2, r9
 800c184:	f000 fad8 	bl	800c738 <memcpy>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	6126      	str	r6, [r4, #16]
 800c196:	6165      	str	r5, [r4, #20]
 800c198:	444e      	add	r6, r9
 800c19a:	eba5 0509 	sub.w	r5, r5, r9
 800c19e:	6026      	str	r6, [r4, #0]
 800c1a0:	60a5      	str	r5, [r4, #8]
 800c1a2:	463e      	mov	r6, r7
 800c1a4:	42be      	cmp	r6, r7
 800c1a6:	d900      	bls.n	800c1aa <__ssputs_r+0x72>
 800c1a8:	463e      	mov	r6, r7
 800c1aa:	6820      	ldr	r0, [r4, #0]
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	4641      	mov	r1, r8
 800c1b0:	f000 faa8 	bl	800c704 <memmove>
 800c1b4:	68a3      	ldr	r3, [r4, #8]
 800c1b6:	1b9b      	subs	r3, r3, r6
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	4433      	add	r3, r6
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	f000 fac4 	bl	800c754 <_realloc_r>
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d1e0      	bne.n	800c194 <__ssputs_r+0x5c>
 800c1d2:	6921      	ldr	r1, [r4, #16]
 800c1d4:	4650      	mov	r0, sl
 800c1d6:	f7ff ff65 	bl	800c0a4 <_free_r>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	f8ca 3000 	str.w	r3, [sl]
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ec:	e7e9      	b.n	800c1c2 <__ssputs_r+0x8a>
	...

0800c1f0 <_svfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	898b      	ldrh	r3, [r1, #12]
 800c1f8:	061b      	lsls	r3, r3, #24
 800c1fa:	b09d      	sub	sp, #116	@ 0x74
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	4614      	mov	r4, r2
 800c202:	d510      	bpl.n	800c226 <_svfiprintf_r+0x36>
 800c204:	690b      	ldr	r3, [r1, #16]
 800c206:	b973      	cbnz	r3, 800c226 <_svfiprintf_r+0x36>
 800c208:	2140      	movs	r1, #64	@ 0x40
 800c20a:	f7ff fe5b 	bl	800bec4 <_malloc_r>
 800c20e:	6028      	str	r0, [r5, #0]
 800c210:	6128      	str	r0, [r5, #16]
 800c212:	b930      	cbnz	r0, 800c222 <_svfiprintf_r+0x32>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	b01d      	add	sp, #116	@ 0x74
 800c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c222:	2340      	movs	r3, #64	@ 0x40
 800c224:	616b      	str	r3, [r5, #20]
 800c226:	2300      	movs	r3, #0
 800c228:	9309      	str	r3, [sp, #36]	@ 0x24
 800c22a:	2320      	movs	r3, #32
 800c22c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c230:	f8cd 800c 	str.w	r8, [sp, #12]
 800c234:	2330      	movs	r3, #48	@ 0x30
 800c236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3d4 <_svfiprintf_r+0x1e4>
 800c23a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c23e:	f04f 0901 	mov.w	r9, #1
 800c242:	4623      	mov	r3, r4
 800c244:	469a      	mov	sl, r3
 800c246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c24a:	b10a      	cbz	r2, 800c250 <_svfiprintf_r+0x60>
 800c24c:	2a25      	cmp	r2, #37	@ 0x25
 800c24e:	d1f9      	bne.n	800c244 <_svfiprintf_r+0x54>
 800c250:	ebba 0b04 	subs.w	fp, sl, r4
 800c254:	d00b      	beq.n	800c26e <_svfiprintf_r+0x7e>
 800c256:	465b      	mov	r3, fp
 800c258:	4622      	mov	r2, r4
 800c25a:	4629      	mov	r1, r5
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7ff ff6b 	bl	800c138 <__ssputs_r>
 800c262:	3001      	adds	r0, #1
 800c264:	f000 80a7 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c26a:	445a      	add	r2, fp
 800c26c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c26e:	f89a 3000 	ldrb.w	r3, [sl]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 809f 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c278:	2300      	movs	r3, #0
 800c27a:	f04f 32ff 	mov.w	r2, #4294967295
 800c27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c282:	f10a 0a01 	add.w	sl, sl, #1
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	9307      	str	r3, [sp, #28]
 800c28a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c290:	4654      	mov	r4, sl
 800c292:	2205      	movs	r2, #5
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	484e      	ldr	r0, [pc, #312]	@ (800c3d4 <_svfiprintf_r+0x1e4>)
 800c29a:	f7f3 ffb1 	bl	8000200 <memchr>
 800c29e:	9a04      	ldr	r2, [sp, #16]
 800c2a0:	b9d8      	cbnz	r0, 800c2da <_svfiprintf_r+0xea>
 800c2a2:	06d0      	lsls	r0, r2, #27
 800c2a4:	bf44      	itt	mi
 800c2a6:	2320      	movmi	r3, #32
 800c2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ac:	0711      	lsls	r1, r2, #28
 800c2ae:	bf44      	itt	mi
 800c2b0:	232b      	movmi	r3, #43	@ 0x2b
 800c2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2bc:	d015      	beq.n	800c2ea <_svfiprintf_r+0xfa>
 800c2be:	9a07      	ldr	r2, [sp, #28]
 800c2c0:	4654      	mov	r4, sl
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	f04f 0c0a 	mov.w	ip, #10
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ce:	3b30      	subs	r3, #48	@ 0x30
 800c2d0:	2b09      	cmp	r3, #9
 800c2d2:	d94b      	bls.n	800c36c <_svfiprintf_r+0x17c>
 800c2d4:	b1b0      	cbz	r0, 800c304 <_svfiprintf_r+0x114>
 800c2d6:	9207      	str	r2, [sp, #28]
 800c2d8:	e014      	b.n	800c304 <_svfiprintf_r+0x114>
 800c2da:	eba0 0308 	sub.w	r3, r0, r8
 800c2de:	fa09 f303 	lsl.w	r3, r9, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	46a2      	mov	sl, r4
 800c2e8:	e7d2      	b.n	800c290 <_svfiprintf_r+0xa0>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	1d19      	adds	r1, r3, #4
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	9103      	str	r1, [sp, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfbb      	ittet	lt
 800c2f6:	425b      	neglt	r3, r3
 800c2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c2fc:	9307      	strge	r3, [sp, #28]
 800c2fe:	9307      	strlt	r3, [sp, #28]
 800c300:	bfb8      	it	lt
 800c302:	9204      	strlt	r2, [sp, #16]
 800c304:	7823      	ldrb	r3, [r4, #0]
 800c306:	2b2e      	cmp	r3, #46	@ 0x2e
 800c308:	d10a      	bne.n	800c320 <_svfiprintf_r+0x130>
 800c30a:	7863      	ldrb	r3, [r4, #1]
 800c30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c30e:	d132      	bne.n	800c376 <_svfiprintf_r+0x186>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	1d1a      	adds	r2, r3, #4
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	9203      	str	r2, [sp, #12]
 800c318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c31c:	3402      	adds	r4, #2
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3e4 <_svfiprintf_r+0x1f4>
 800c324:	7821      	ldrb	r1, [r4, #0]
 800c326:	2203      	movs	r2, #3
 800c328:	4650      	mov	r0, sl
 800c32a:	f7f3 ff69 	bl	8000200 <memchr>
 800c32e:	b138      	cbz	r0, 800c340 <_svfiprintf_r+0x150>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	eba0 000a 	sub.w	r0, r0, sl
 800c336:	2240      	movs	r2, #64	@ 0x40
 800c338:	4082      	lsls	r2, r0
 800c33a:	4313      	orrs	r3, r2
 800c33c:	3401      	adds	r4, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	4824      	ldr	r0, [pc, #144]	@ (800c3d8 <_svfiprintf_r+0x1e8>)
 800c346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c34a:	2206      	movs	r2, #6
 800c34c:	f7f3 ff58 	bl	8000200 <memchr>
 800c350:	2800      	cmp	r0, #0
 800c352:	d036      	beq.n	800c3c2 <_svfiprintf_r+0x1d2>
 800c354:	4b21      	ldr	r3, [pc, #132]	@ (800c3dc <_svfiprintf_r+0x1ec>)
 800c356:	bb1b      	cbnz	r3, 800c3a0 <_svfiprintf_r+0x1b0>
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	3307      	adds	r3, #7
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c366:	4433      	add	r3, r6
 800c368:	9309      	str	r3, [sp, #36]	@ 0x24
 800c36a:	e76a      	b.n	800c242 <_svfiprintf_r+0x52>
 800c36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c370:	460c      	mov	r4, r1
 800c372:	2001      	movs	r0, #1
 800c374:	e7a8      	b.n	800c2c8 <_svfiprintf_r+0xd8>
 800c376:	2300      	movs	r3, #0
 800c378:	3401      	adds	r4, #1
 800c37a:	9305      	str	r3, [sp, #20]
 800c37c:	4619      	mov	r1, r3
 800c37e:	f04f 0c0a 	mov.w	ip, #10
 800c382:	4620      	mov	r0, r4
 800c384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c388:	3a30      	subs	r2, #48	@ 0x30
 800c38a:	2a09      	cmp	r2, #9
 800c38c:	d903      	bls.n	800c396 <_svfiprintf_r+0x1a6>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c6      	beq.n	800c320 <_svfiprintf_r+0x130>
 800c392:	9105      	str	r1, [sp, #20]
 800c394:	e7c4      	b.n	800c320 <_svfiprintf_r+0x130>
 800c396:	fb0c 2101 	mla	r1, ip, r1, r2
 800c39a:	4604      	mov	r4, r0
 800c39c:	2301      	movs	r3, #1
 800c39e:	e7f0      	b.n	800c382 <_svfiprintf_r+0x192>
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e0 <_svfiprintf_r+0x1f0>)
 800c3a8:	a904      	add	r1, sp, #16
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	1c42      	adds	r2, r0, #1
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	d1d6      	bne.n	800c364 <_svfiprintf_r+0x174>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	065b      	lsls	r3, r3, #25
 800c3ba:	f53f af2d 	bmi.w	800c218 <_svfiprintf_r+0x28>
 800c3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3c0:	e72c      	b.n	800c21c <_svfiprintf_r+0x2c>
 800c3c2:	ab03      	add	r3, sp, #12
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	462a      	mov	r2, r5
 800c3c8:	4b05      	ldr	r3, [pc, #20]	@ (800c3e0 <_svfiprintf_r+0x1f0>)
 800c3ca:	a904      	add	r1, sp, #16
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f000 f879 	bl	800c4c4 <_printf_i>
 800c3d2:	e7ed      	b.n	800c3b0 <_svfiprintf_r+0x1c0>
 800c3d4:	0800db18 	.word	0x0800db18
 800c3d8:	0800db22 	.word	0x0800db22
 800c3dc:	00000000 	.word	0x00000000
 800c3e0:	0800c139 	.word	0x0800c139
 800c3e4:	0800db1e 	.word	0x0800db1e

0800c3e8 <_printf_common>:
 800c3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ec:	4616      	mov	r6, r2
 800c3ee:	4698      	mov	r8, r3
 800c3f0:	688a      	ldr	r2, [r1, #8]
 800c3f2:	690b      	ldr	r3, [r1, #16]
 800c3f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	bfb8      	it	lt
 800c3fc:	4613      	movlt	r3, r2
 800c3fe:	6033      	str	r3, [r6, #0]
 800c400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c404:	4607      	mov	r7, r0
 800c406:	460c      	mov	r4, r1
 800c408:	b10a      	cbz	r2, 800c40e <_printf_common+0x26>
 800c40a:	3301      	adds	r3, #1
 800c40c:	6033      	str	r3, [r6, #0]
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	0699      	lsls	r1, r3, #26
 800c412:	bf42      	ittt	mi
 800c414:	6833      	ldrmi	r3, [r6, #0]
 800c416:	3302      	addmi	r3, #2
 800c418:	6033      	strmi	r3, [r6, #0]
 800c41a:	6825      	ldr	r5, [r4, #0]
 800c41c:	f015 0506 	ands.w	r5, r5, #6
 800c420:	d106      	bne.n	800c430 <_printf_common+0x48>
 800c422:	f104 0a19 	add.w	sl, r4, #25
 800c426:	68e3      	ldr	r3, [r4, #12]
 800c428:	6832      	ldr	r2, [r6, #0]
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	42ab      	cmp	r3, r5
 800c42e:	dc26      	bgt.n	800c47e <_printf_common+0x96>
 800c430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c434:	6822      	ldr	r2, [r4, #0]
 800c436:	3b00      	subs	r3, #0
 800c438:	bf18      	it	ne
 800c43a:	2301      	movne	r3, #1
 800c43c:	0692      	lsls	r2, r2, #26
 800c43e:	d42b      	bmi.n	800c498 <_printf_common+0xb0>
 800c440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c444:	4641      	mov	r1, r8
 800c446:	4638      	mov	r0, r7
 800c448:	47c8      	blx	r9
 800c44a:	3001      	adds	r0, #1
 800c44c:	d01e      	beq.n	800c48c <_printf_common+0xa4>
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	6922      	ldr	r2, [r4, #16]
 800c452:	f003 0306 	and.w	r3, r3, #6
 800c456:	2b04      	cmp	r3, #4
 800c458:	bf02      	ittt	eq
 800c45a:	68e5      	ldreq	r5, [r4, #12]
 800c45c:	6833      	ldreq	r3, [r6, #0]
 800c45e:	1aed      	subeq	r5, r5, r3
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	bf0c      	ite	eq
 800c464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c468:	2500      	movne	r5, #0
 800c46a:	4293      	cmp	r3, r2
 800c46c:	bfc4      	itt	gt
 800c46e:	1a9b      	subgt	r3, r3, r2
 800c470:	18ed      	addgt	r5, r5, r3
 800c472:	2600      	movs	r6, #0
 800c474:	341a      	adds	r4, #26
 800c476:	42b5      	cmp	r5, r6
 800c478:	d11a      	bne.n	800c4b0 <_printf_common+0xc8>
 800c47a:	2000      	movs	r0, #0
 800c47c:	e008      	b.n	800c490 <_printf_common+0xa8>
 800c47e:	2301      	movs	r3, #1
 800c480:	4652      	mov	r2, sl
 800c482:	4641      	mov	r1, r8
 800c484:	4638      	mov	r0, r7
 800c486:	47c8      	blx	r9
 800c488:	3001      	adds	r0, #1
 800c48a:	d103      	bne.n	800c494 <_printf_common+0xac>
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295
 800c490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c494:	3501      	adds	r5, #1
 800c496:	e7c6      	b.n	800c426 <_printf_common+0x3e>
 800c498:	18e1      	adds	r1, r4, r3
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	2030      	movs	r0, #48	@ 0x30
 800c49e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c4a2:	4422      	add	r2, r4
 800c4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c4a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c4ac:	3302      	adds	r3, #2
 800c4ae:	e7c7      	b.n	800c440 <_printf_common+0x58>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	4641      	mov	r1, r8
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	47c8      	blx	r9
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d0e6      	beq.n	800c48c <_printf_common+0xa4>
 800c4be:	3601      	adds	r6, #1
 800c4c0:	e7d9      	b.n	800c476 <_printf_common+0x8e>
	...

0800c4c4 <_printf_i>:
 800c4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c8:	7e0f      	ldrb	r7, [r1, #24]
 800c4ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4cc:	2f78      	cmp	r7, #120	@ 0x78
 800c4ce:	4691      	mov	r9, r2
 800c4d0:	4680      	mov	r8, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	469a      	mov	sl, r3
 800c4d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4da:	d807      	bhi.n	800c4ec <_printf_i+0x28>
 800c4dc:	2f62      	cmp	r7, #98	@ 0x62
 800c4de:	d80a      	bhi.n	800c4f6 <_printf_i+0x32>
 800c4e0:	2f00      	cmp	r7, #0
 800c4e2:	f000 80d2 	beq.w	800c68a <_printf_i+0x1c6>
 800c4e6:	2f58      	cmp	r7, #88	@ 0x58
 800c4e8:	f000 80b9 	beq.w	800c65e <_printf_i+0x19a>
 800c4ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4f4:	e03a      	b.n	800c56c <_printf_i+0xa8>
 800c4f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4fa:	2b15      	cmp	r3, #21
 800c4fc:	d8f6      	bhi.n	800c4ec <_printf_i+0x28>
 800c4fe:	a101      	add	r1, pc, #4	@ (adr r1, 800c504 <_printf_i+0x40>)
 800c500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c504:	0800c55d 	.word	0x0800c55d
 800c508:	0800c571 	.word	0x0800c571
 800c50c:	0800c4ed 	.word	0x0800c4ed
 800c510:	0800c4ed 	.word	0x0800c4ed
 800c514:	0800c4ed 	.word	0x0800c4ed
 800c518:	0800c4ed 	.word	0x0800c4ed
 800c51c:	0800c571 	.word	0x0800c571
 800c520:	0800c4ed 	.word	0x0800c4ed
 800c524:	0800c4ed 	.word	0x0800c4ed
 800c528:	0800c4ed 	.word	0x0800c4ed
 800c52c:	0800c4ed 	.word	0x0800c4ed
 800c530:	0800c671 	.word	0x0800c671
 800c534:	0800c59b 	.word	0x0800c59b
 800c538:	0800c62b 	.word	0x0800c62b
 800c53c:	0800c4ed 	.word	0x0800c4ed
 800c540:	0800c4ed 	.word	0x0800c4ed
 800c544:	0800c693 	.word	0x0800c693
 800c548:	0800c4ed 	.word	0x0800c4ed
 800c54c:	0800c59b 	.word	0x0800c59b
 800c550:	0800c4ed 	.word	0x0800c4ed
 800c554:	0800c4ed 	.word	0x0800c4ed
 800c558:	0800c633 	.word	0x0800c633
 800c55c:	6833      	ldr	r3, [r6, #0]
 800c55e:	1d1a      	adds	r2, r3, #4
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6032      	str	r2, [r6, #0]
 800c564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c56c:	2301      	movs	r3, #1
 800c56e:	e09d      	b.n	800c6ac <_printf_i+0x1e8>
 800c570:	6833      	ldr	r3, [r6, #0]
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	1d19      	adds	r1, r3, #4
 800c576:	6031      	str	r1, [r6, #0]
 800c578:	0606      	lsls	r6, r0, #24
 800c57a:	d501      	bpl.n	800c580 <_printf_i+0xbc>
 800c57c:	681d      	ldr	r5, [r3, #0]
 800c57e:	e003      	b.n	800c588 <_printf_i+0xc4>
 800c580:	0645      	lsls	r5, r0, #25
 800c582:	d5fb      	bpl.n	800c57c <_printf_i+0xb8>
 800c584:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c588:	2d00      	cmp	r5, #0
 800c58a:	da03      	bge.n	800c594 <_printf_i+0xd0>
 800c58c:	232d      	movs	r3, #45	@ 0x2d
 800c58e:	426d      	negs	r5, r5
 800c590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c594:	4859      	ldr	r0, [pc, #356]	@ (800c6fc <_printf_i+0x238>)
 800c596:	230a      	movs	r3, #10
 800c598:	e011      	b.n	800c5be <_printf_i+0xfa>
 800c59a:	6821      	ldr	r1, [r4, #0]
 800c59c:	6833      	ldr	r3, [r6, #0]
 800c59e:	0608      	lsls	r0, r1, #24
 800c5a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c5a4:	d402      	bmi.n	800c5ac <_printf_i+0xe8>
 800c5a6:	0649      	lsls	r1, r1, #25
 800c5a8:	bf48      	it	mi
 800c5aa:	b2ad      	uxthmi	r5, r5
 800c5ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c5ae:	4853      	ldr	r0, [pc, #332]	@ (800c6fc <_printf_i+0x238>)
 800c5b0:	6033      	str	r3, [r6, #0]
 800c5b2:	bf14      	ite	ne
 800c5b4:	230a      	movne	r3, #10
 800c5b6:	2308      	moveq	r3, #8
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5be:	6866      	ldr	r6, [r4, #4]
 800c5c0:	60a6      	str	r6, [r4, #8]
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	bfa2      	ittt	ge
 800c5c6:	6821      	ldrge	r1, [r4, #0]
 800c5c8:	f021 0104 	bicge.w	r1, r1, #4
 800c5cc:	6021      	strge	r1, [r4, #0]
 800c5ce:	b90d      	cbnz	r5, 800c5d4 <_printf_i+0x110>
 800c5d0:	2e00      	cmp	r6, #0
 800c5d2:	d04b      	beq.n	800c66c <_printf_i+0x1a8>
 800c5d4:	4616      	mov	r6, r2
 800c5d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5da:	fb03 5711 	mls	r7, r3, r1, r5
 800c5de:	5dc7      	ldrb	r7, [r0, r7]
 800c5e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5e4:	462f      	mov	r7, r5
 800c5e6:	42bb      	cmp	r3, r7
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	d9f4      	bls.n	800c5d6 <_printf_i+0x112>
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d10b      	bne.n	800c608 <_printf_i+0x144>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	07df      	lsls	r7, r3, #31
 800c5f4:	d508      	bpl.n	800c608 <_printf_i+0x144>
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	6861      	ldr	r1, [r4, #4]
 800c5fa:	4299      	cmp	r1, r3
 800c5fc:	bfde      	ittt	le
 800c5fe:	2330      	movle	r3, #48	@ 0x30
 800c600:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c604:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c608:	1b92      	subs	r2, r2, r6
 800c60a:	6122      	str	r2, [r4, #16]
 800c60c:	f8cd a000 	str.w	sl, [sp]
 800c610:	464b      	mov	r3, r9
 800c612:	aa03      	add	r2, sp, #12
 800c614:	4621      	mov	r1, r4
 800c616:	4640      	mov	r0, r8
 800c618:	f7ff fee6 	bl	800c3e8 <_printf_common>
 800c61c:	3001      	adds	r0, #1
 800c61e:	d14a      	bne.n	800c6b6 <_printf_i+0x1f2>
 800c620:	f04f 30ff 	mov.w	r0, #4294967295
 800c624:	b004      	add	sp, #16
 800c626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	f043 0320 	orr.w	r3, r3, #32
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	4833      	ldr	r0, [pc, #204]	@ (800c700 <_printf_i+0x23c>)
 800c634:	2778      	movs	r7, #120	@ 0x78
 800c636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	6831      	ldr	r1, [r6, #0]
 800c63e:	061f      	lsls	r7, r3, #24
 800c640:	f851 5b04 	ldr.w	r5, [r1], #4
 800c644:	d402      	bmi.n	800c64c <_printf_i+0x188>
 800c646:	065f      	lsls	r7, r3, #25
 800c648:	bf48      	it	mi
 800c64a:	b2ad      	uxthmi	r5, r5
 800c64c:	6031      	str	r1, [r6, #0]
 800c64e:	07d9      	lsls	r1, r3, #31
 800c650:	bf44      	itt	mi
 800c652:	f043 0320 	orrmi.w	r3, r3, #32
 800c656:	6023      	strmi	r3, [r4, #0]
 800c658:	b11d      	cbz	r5, 800c662 <_printf_i+0x19e>
 800c65a:	2310      	movs	r3, #16
 800c65c:	e7ac      	b.n	800c5b8 <_printf_i+0xf4>
 800c65e:	4827      	ldr	r0, [pc, #156]	@ (800c6fc <_printf_i+0x238>)
 800c660:	e7e9      	b.n	800c636 <_printf_i+0x172>
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	f023 0320 	bic.w	r3, r3, #32
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	e7f6      	b.n	800c65a <_printf_i+0x196>
 800c66c:	4616      	mov	r6, r2
 800c66e:	e7bd      	b.n	800c5ec <_printf_i+0x128>
 800c670:	6833      	ldr	r3, [r6, #0]
 800c672:	6825      	ldr	r5, [r4, #0]
 800c674:	6961      	ldr	r1, [r4, #20]
 800c676:	1d18      	adds	r0, r3, #4
 800c678:	6030      	str	r0, [r6, #0]
 800c67a:	062e      	lsls	r6, r5, #24
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	d501      	bpl.n	800c684 <_printf_i+0x1c0>
 800c680:	6019      	str	r1, [r3, #0]
 800c682:	e002      	b.n	800c68a <_printf_i+0x1c6>
 800c684:	0668      	lsls	r0, r5, #25
 800c686:	d5fb      	bpl.n	800c680 <_printf_i+0x1bc>
 800c688:	8019      	strh	r1, [r3, #0]
 800c68a:	2300      	movs	r3, #0
 800c68c:	6123      	str	r3, [r4, #16]
 800c68e:	4616      	mov	r6, r2
 800c690:	e7bc      	b.n	800c60c <_printf_i+0x148>
 800c692:	6833      	ldr	r3, [r6, #0]
 800c694:	1d1a      	adds	r2, r3, #4
 800c696:	6032      	str	r2, [r6, #0]
 800c698:	681e      	ldr	r6, [r3, #0]
 800c69a:	6862      	ldr	r2, [r4, #4]
 800c69c:	2100      	movs	r1, #0
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7f3 fdae 	bl	8000200 <memchr>
 800c6a4:	b108      	cbz	r0, 800c6aa <_printf_i+0x1e6>
 800c6a6:	1b80      	subs	r0, r0, r6
 800c6a8:	6060      	str	r0, [r4, #4]
 800c6aa:	6863      	ldr	r3, [r4, #4]
 800c6ac:	6123      	str	r3, [r4, #16]
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6b4:	e7aa      	b.n	800c60c <_printf_i+0x148>
 800c6b6:	6923      	ldr	r3, [r4, #16]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	4640      	mov	r0, r8
 800c6be:	47d0      	blx	sl
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	d0ad      	beq.n	800c620 <_printf_i+0x15c>
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	079b      	lsls	r3, r3, #30
 800c6c8:	d413      	bmi.n	800c6f2 <_printf_i+0x22e>
 800c6ca:	68e0      	ldr	r0, [r4, #12]
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	4298      	cmp	r0, r3
 800c6d0:	bfb8      	it	lt
 800c6d2:	4618      	movlt	r0, r3
 800c6d4:	e7a6      	b.n	800c624 <_printf_i+0x160>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4632      	mov	r2, r6
 800c6da:	4649      	mov	r1, r9
 800c6dc:	4640      	mov	r0, r8
 800c6de:	47d0      	blx	sl
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d09d      	beq.n	800c620 <_printf_i+0x15c>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	68e3      	ldr	r3, [r4, #12]
 800c6e8:	9903      	ldr	r1, [sp, #12]
 800c6ea:	1a5b      	subs	r3, r3, r1
 800c6ec:	42ab      	cmp	r3, r5
 800c6ee:	dcf2      	bgt.n	800c6d6 <_printf_i+0x212>
 800c6f0:	e7eb      	b.n	800c6ca <_printf_i+0x206>
 800c6f2:	2500      	movs	r5, #0
 800c6f4:	f104 0619 	add.w	r6, r4, #25
 800c6f8:	e7f5      	b.n	800c6e6 <_printf_i+0x222>
 800c6fa:	bf00      	nop
 800c6fc:	0800db29 	.word	0x0800db29
 800c700:	0800db3a 	.word	0x0800db3a

0800c704 <memmove>:
 800c704:	4288      	cmp	r0, r1
 800c706:	b510      	push	{r4, lr}
 800c708:	eb01 0402 	add.w	r4, r1, r2
 800c70c:	d902      	bls.n	800c714 <memmove+0x10>
 800c70e:	4284      	cmp	r4, r0
 800c710:	4623      	mov	r3, r4
 800c712:	d807      	bhi.n	800c724 <memmove+0x20>
 800c714:	1e43      	subs	r3, r0, #1
 800c716:	42a1      	cmp	r1, r4
 800c718:	d008      	beq.n	800c72c <memmove+0x28>
 800c71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c722:	e7f8      	b.n	800c716 <memmove+0x12>
 800c724:	4402      	add	r2, r0
 800c726:	4601      	mov	r1, r0
 800c728:	428a      	cmp	r2, r1
 800c72a:	d100      	bne.n	800c72e <memmove+0x2a>
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c736:	e7f7      	b.n	800c728 <memmove+0x24>

0800c738 <memcpy>:
 800c738:	440a      	add	r2, r1
 800c73a:	4291      	cmp	r1, r2
 800c73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c740:	d100      	bne.n	800c744 <memcpy+0xc>
 800c742:	4770      	bx	lr
 800c744:	b510      	push	{r4, lr}
 800c746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c74e:	4291      	cmp	r1, r2
 800c750:	d1f9      	bne.n	800c746 <memcpy+0xe>
 800c752:	bd10      	pop	{r4, pc}

0800c754 <_realloc_r>:
 800c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c758:	4680      	mov	r8, r0
 800c75a:	4615      	mov	r5, r2
 800c75c:	460c      	mov	r4, r1
 800c75e:	b921      	cbnz	r1, 800c76a <_realloc_r+0x16>
 800c760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	4611      	mov	r1, r2
 800c766:	f7ff bbad 	b.w	800bec4 <_malloc_r>
 800c76a:	b92a      	cbnz	r2, 800c778 <_realloc_r+0x24>
 800c76c:	f7ff fc9a 	bl	800c0a4 <_free_r>
 800c770:	2400      	movs	r4, #0
 800c772:	4620      	mov	r0, r4
 800c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c778:	f000 f81a 	bl	800c7b0 <_malloc_usable_size_r>
 800c77c:	4285      	cmp	r5, r0
 800c77e:	4606      	mov	r6, r0
 800c780:	d802      	bhi.n	800c788 <_realloc_r+0x34>
 800c782:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c786:	d8f4      	bhi.n	800c772 <_realloc_r+0x1e>
 800c788:	4629      	mov	r1, r5
 800c78a:	4640      	mov	r0, r8
 800c78c:	f7ff fb9a 	bl	800bec4 <_malloc_r>
 800c790:	4607      	mov	r7, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d0ec      	beq.n	800c770 <_realloc_r+0x1c>
 800c796:	42b5      	cmp	r5, r6
 800c798:	462a      	mov	r2, r5
 800c79a:	4621      	mov	r1, r4
 800c79c:	bf28      	it	cs
 800c79e:	4632      	movcs	r2, r6
 800c7a0:	f7ff ffca 	bl	800c738 <memcpy>
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7ff fc7c 	bl	800c0a4 <_free_r>
 800c7ac:	463c      	mov	r4, r7
 800c7ae:	e7e0      	b.n	800c772 <_realloc_r+0x1e>

0800c7b0 <_malloc_usable_size_r>:
 800c7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7b4:	1f18      	subs	r0, r3, #4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bfbc      	itt	lt
 800c7ba:	580b      	ldrlt	r3, [r1, r0]
 800c7bc:	18c0      	addlt	r0, r0, r3
 800c7be:	4770      	bx	lr

0800c7c0 <_init>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	bf00      	nop
 800c7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c6:	bc08      	pop	{r3}
 800c7c8:	469e      	mov	lr, r3
 800c7ca:	4770      	bx	lr

0800c7cc <_fini>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr
