
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f80  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014cc  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5fc  0800a5fc  0000c620  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5fc  0800a5fc  0000b5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a604  0800a604  0000c620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a604  0800a604  0000b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000620  20000000  0800a60c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c620  2**0
                  CONTENTS
 10 .bss          00000ca0  20000620  20000620  0000c620  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200012c0  200012c0  0000c620  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY
 13 .debug_info   00058a59  00000000  00000000  0000c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005af4  00000000  00000000  000650a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003df8  00000000  00000000  0006aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002ee1  00000000  00000000  0006e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285bb  00000000  00000000  00071879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d583  00000000  00000000  00099e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8015  00000000  00000000  000c73b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bf3cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011250  00000000  00000000  001bf410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001d0660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000620 	.word	0x20000620
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009118 	.word	0x08009118

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000624 	.word	0x20000624
 80001ec:	08009118 	.word	0x08009118

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e00f      	b.n	80005ac <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4a33      	ldr	r2, [pc, #204]	@ (800065c <LED_Init+0xdc>)
 8000590:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	4a31      	ldr	r2, [pc, #196]	@ (800065c <LED_Init+0xdc>)
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	4413      	add	r3, r2
 800059c:	889b      	ldrh	r3, [r3, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	f004 ffa5 	bl	80054f0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	3301      	adds	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2b09      	cmp	r3, #9
 80005b0:	d9ec      	bls.n	800058c <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	73bb      	strb	r3, [r7, #14]
 80005b6:	e00f      	b.n	80005d8 <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	4a29      	ldr	r2, [pc, #164]	@ (8000660 <LED_Init+0xe0>)
 80005bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <LED_Init+0xe0>)
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4413      	add	r3, r2
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	f004 ff8f 	bl	80054f0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	3301      	adds	r3, #1
 80005d6:	73bb      	strb	r3, [r7, #14]
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d9ec      	bls.n	80005b8 <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	737b      	strb	r3, [r7, #13]
 80005e2:	e00f      	b.n	8000604 <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <LED_Init+0xe4>)
 80005e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000664 <LED_Init+0xe4>)
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	4413      	add	r3, r2
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f004 ff79 	bl	80054f0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 80005fe:	7b7b      	ldrb	r3, [r7, #13]
 8000600:	3301      	adds	r3, #1
 8000602:	737b      	strb	r3, [r7, #13]
 8000604:	7b7b      	ldrb	r3, [r7, #13]
 8000606:	2b05      	cmp	r3, #5
 8000608:	d9ec      	bls.n	80005e4 <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	733b      	strb	r3, [r7, #12]
 800060e:	e01d      	b.n	800064c <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8000610:	7b3b      	ldrb	r3, [r7, #12]
 8000612:	4a15      	ldr	r2, [pc, #84]	@ (8000668 <LED_Init+0xe8>)
 8000614:	2101      	movs	r1, #1
 8000616:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 8000618:	7b3b      	ldrb	r3, [r7, #12]
 800061a:	4a14      	ldr	r2, [pc, #80]	@ (800066c <LED_Init+0xec>)
 800061c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000620:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 8000622:	7b3b      	ldrb	r3, [r7, #12]
 8000624:	4a11      	ldr	r2, [pc, #68]	@ (800066c <LED_Init+0xec>)
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 800062e:	7b3b      	ldrb	r3, [r7, #12]
 8000630:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <LED_Init+0xec>)
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
 8000636:	88db      	ldrh	r3, [r3, #6]
 8000638:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 800063a:	88ba      	ldrh	r2, [r7, #4]
 800063c:	79f9      	ldrb	r1, [r7, #7]
 800063e:	2301      	movs	r3, #1
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f002 f84f 	bl	80026e4 <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8000646:	7b3b      	ldrb	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	733b      	strb	r3, [r7, #12]
 800064c:	7b3b      	ldrb	r3, [r7, #12]
 800064e:	2b17      	cmp	r3, #23
 8000650:	d9de      	bls.n	8000610 <LED_Init+0x90>
    }

}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000050 	.word	0x20000050
 8000664:	20000070 	.word	0x20000070
 8000668:	20000644 	.word	0x20000644
 800066c:	200000a0 	.word	0x200000a0

08000670 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d80e      	bhi.n	800069e <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	3b01      	subs	r3, #1
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <LED_Toggle+0x38>)
 8000686:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	3b01      	subs	r3, #1
 800068e:	4906      	ldr	r1, [pc, #24]	@ (80006a8 <LED_Toggle+0x38>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	440b      	add	r3, r1
 8000694:	889b      	ldrh	r3, [r3, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	4610      	mov	r0, r2
 800069a:	f004 ff42 	bl	8005522 <HAL_GPIO_TogglePin>
    }
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000000 	.word	0x20000000

080006ac <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80006b6:	f004 f867 	bl	8004788 <HAL_GetTick>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <Push_ButtonHandler+0x64>)
 80006be:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e01c      	b.n	8000700 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <Push_ButtonHandler+0x68>)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ce:	88fa      	ldrh	r2, [r7, #6]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d112      	bne.n	80006fa <Push_ButtonHandler+0x4e>
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <Push_ButtonHandler+0x64>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <Push_ButtonHandler+0x6c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b96      	cmp	r3, #150	@ 0x96
 80006e0:	d90b      	bls.n	80006fa <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffc0 	bl	8000670 <LED_Toggle>
            previousTime = currentTime;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <Push_ButtonHandler+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <Push_ButtonHandler+0x6c>)
 80006f6:	6013      	str	r3, [r2, #0]
            break;
 80006f8:	e006      	b.n	8000708 <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b03      	cmp	r3, #3
 8000704:	dddf      	ble.n	80006c6 <Push_ButtonHandler+0x1a>
        }
    }
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000063c 	.word	0x2000063c
 8000714:	080091c8 	.word	0x080091c8
 8000718:	20000640 	.word	0x20000640

0800071c <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	72fb      	strb	r3, [r7, #11]
 800072a:	4613      	mov	r3, r2
 800072c:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 800072e:	7afb      	ldrb	r3, [r7, #11]
 8000730:	2b4b      	cmp	r3, #75	@ 0x4b
 8000732:	d01a      	beq.n	800076a <u8x8_stm32_gpio_and_delay+0x4e>
 8000734:	2b4b      	cmp	r3, #75	@ 0x4b
 8000736:	dc1f      	bgt.n	8000778 <u8x8_stm32_gpio_and_delay+0x5c>
 8000738:	2b4a      	cmp	r3, #74	@ 0x4a
 800073a:	d00f      	beq.n	800075c <u8x8_stm32_gpio_and_delay+0x40>
 800073c:	2b4a      	cmp	r3, #74	@ 0x4a
 800073e:	dc1b      	bgt.n	8000778 <u8x8_stm32_gpio_and_delay+0x5c>
 8000740:	2b28      	cmp	r3, #40	@ 0x28
 8000742:	d002      	beq.n	800074a <u8x8_stm32_gpio_and_delay+0x2e>
 8000744:	2b29      	cmp	r3, #41	@ 0x29
 8000746:	d004      	beq.n	8000752 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8000748:	e016      	b.n	8000778 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 800074a:	2002      	movs	r0, #2
 800074c:	f004 f828 	bl	80047a0 <HAL_Delay>
            break;
 8000750:	e013      	b.n	800077a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8000752:	7abb      	ldrb	r3, [r7, #10]
 8000754:	4618      	mov	r0, r3
 8000756:	f004 f823 	bl	80047a0 <HAL_Delay>
            break;
 800075a:	e00e      	b.n	800077a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 800075c:	7abb      	ldrb	r3, [r7, #10]
 800075e:	461a      	mov	r2, r3
 8000760:	2108      	movs	r1, #8
 8000762:	4808      	ldr	r0, [pc, #32]	@ (8000784 <u8x8_stm32_gpio_and_delay+0x68>)
 8000764:	f004 fec4 	bl	80054f0 <HAL_GPIO_WritePin>
            break;
 8000768:	e007      	b.n	800077a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 800076a:	7abb      	ldrb	r3, [r7, #10]
 800076c:	461a      	mov	r2, r3
 800076e:	2104      	movs	r1, #4
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <u8x8_stm32_gpio_and_delay+0x68>)
 8000772:	f004 febd 	bl	80054f0 <HAL_GPIO_WritePin>
            break;
 8000776:	e000      	b.n	800077a <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8000778:	bf00      	nop
    }
    return 1U;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021800 	.word	0x40021800

08000788 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	72fb      	strb	r3, [r7, #11]
 8000796:	4613      	mov	r3, r2
 8000798:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 800079a:	2301      	movs	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	3b14      	subs	r3, #20
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d83e      	bhi.n	8000824 <u8x8_byte_4wire_hw_spi+0x9c>
 80007a6:	a201      	add	r2, pc, #4	@ (adr r2, 80007ac <u8x8_byte_4wire_hw_spi+0x24>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	0800082b 	.word	0x0800082b
 80007b0:	08000825 	.word	0x08000825
 80007b4:	08000825 	.word	0x08000825
 80007b8:	080007e1 	.word	0x080007e1
 80007bc:	08000801 	.word	0x08000801
 80007c0:	08000813 	.word	0x08000813
 80007c4:	08000825 	.word	0x08000825
 80007c8:	08000825 	.word	0x08000825
 80007cc:	08000825 	.word	0x08000825
 80007d0:	08000825 	.word	0x08000825
 80007d4:	08000825 	.word	0x08000825
 80007d8:	08000825 	.word	0x08000825
 80007dc:	080007f3 	.word	0x080007f3
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 80007e0:	7abb      	ldrb	r3, [r7, #10]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4813      	ldr	r0, [pc, #76]	@ (8000838 <u8x8_byte_4wire_hw_spi+0xb0>)
 80007ec:	f006 fc4d 	bl	800708a <HAL_SPI_Transmit>
            break;
 80007f0:	e01c      	b.n	800082c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80007f2:	7abb      	ldrb	r3, [r7, #10]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2108      	movs	r1, #8
 80007f8:	4810      	ldr	r0, [pc, #64]	@ (800083c <u8x8_byte_4wire_hw_spi+0xb4>)
 80007fa:	f004 fe79 	bl	80054f0 <HAL_GPIO_WritePin>
            break;
 80007fe:	e015      	b.n	800082c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	2104      	movs	r1, #4
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <u8x8_byte_4wire_hw_spi+0xb8>)
 800080c:	f004 fe70 	bl	80054f0 <HAL_GPIO_WritePin>
            break;
 8000810:	e00c      	b.n	800082c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	461a      	mov	r2, r3
 800081a:	2104      	movs	r1, #4
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <u8x8_byte_4wire_hw_spi+0xb8>)
 800081e:	f004 fe67 	bl	80054f0 <HAL_GPIO_WritePin>
            break;
 8000822:	e003      	b.n	800082c <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	75fb      	strb	r3, [r7, #23]
            break;
 8000828:	e000      	b.n	800082c <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 800082a:	bf00      	nop
    }
    return retVal;
 800082c:	7dfb      	ldrb	r3, [r7, #23]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000f88 	.word	0x20000f88
 800083c:	40021800 	.word	0x40021800
 8000840:	40020c00 	.word	0x40020c00

08000844 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2110      	movs	r1, #16
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <Display_Init+0x3c>)
 800084e:	f004 fe4f 	bl	80054f0 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <Display_Init+0x40>)
 8000854:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <Display_Init+0x44>)
 8000856:	490d      	ldr	r1, [pc, #52]	@ (800088c <Display_Init+0x48>)
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <Display_Init+0x4c>)
 800085a:	f000 fa25 	bl	8000ca8 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <Display_Init+0x4c>)
 8000860:	f001 fe30 	bl	80024c4 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000864:	2100      	movs	r1, #0
 8000866:	480a      	ldr	r0, [pc, #40]	@ (8000890 <Display_Init+0x4c>)
 8000868:	f001 fe3b 	bl	80024e2 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <Display_Init+0x4c>)
 800086e:	f000 f9f5 	bl	8000c5c <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8000872:	2178      	movs	r1, #120	@ 0x78
 8000874:	4806      	ldr	r0, [pc, #24]	@ (8000890 <Display_Init+0x4c>)
 8000876:	f001 fe45 	bl	8002504 <u8x8_SetContrast>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021800 	.word	0x40021800
 8000884:	0800071d 	.word	0x0800071d
 8000888:	08000789 	.word	0x08000789
 800088c:	0800a14c 	.word	0x0800a14c
 8000890:	2000065c 	.word	0x2000065c

08000894 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 800089a:	4824      	ldr	r0, [pc, #144]	@ (800092c <Display_MainTitlePage+0x98>)
 800089c:	f000 f99c 	bl	8000bd8 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <Display_MainTitlePage+0x9c>)
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	481f      	ldr	r0, [pc, #124]	@ (800092c <Display_MainTitlePage+0x98>)
 80008b0:	f000 f8b6 	bl	8000a20 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 80008b4:	481d      	ldr	r0, [pc, #116]	@ (800092c <Display_MainTitlePage+0x98>)
 80008b6:	f000 f9a3 	bl	8000c00 <u8g2_NextPage>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1ef      	bne.n	80008a0 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 80008c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c4:	f003 ff6c 	bl	80047a0 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 80008c8:	4818      	ldr	r0, [pc, #96]	@ (800092c <Display_MainTitlePage+0x98>)
 80008ca:	f000 f8ec 	bl	8000aa6 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80008ce:	4919      	ldr	r1, [pc, #100]	@ (8000934 <Display_MainTitlePage+0xa0>)
 80008d0:	4816      	ldr	r0, [pc, #88]	@ (800092c <Display_MainTitlePage+0x98>)
 80008d2:	f000 ff99 	bl	8001808 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <Display_MainTitlePage+0xa4>)
 80008d8:	2210      	movs	r2, #16
 80008da:	212a      	movs	r1, #42	@ 0x2a
 80008dc:	4813      	ldr	r0, [pc, #76]	@ (800092c <Display_MainTitlePage+0x98>)
 80008de:	f000 fef1 	bl	80016c4 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80008e2:	4914      	ldr	r1, [pc, #80]	@ (8000934 <Display_MainTitlePage+0xa0>)
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <Display_MainTitlePage+0x98>)
 80008e6:	f000 ff8f 	bl	8001808 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <Display_MainTitlePage+0xa8>)
 80008ec:	2221      	movs	r2, #33	@ 0x21
 80008ee:	2106      	movs	r1, #6
 80008f0:	480e      	ldr	r0, [pc, #56]	@ (800092c <Display_MainTitlePage+0x98>)
 80008f2:	f000 fee7 	bl	80016c4 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 80008f6:	200a      	movs	r0, #10
 80008f8:	f003 ff52 	bl	80047a0 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <Display_MainTitlePage+0x98>)
 80008fe:	f000 f8d2 	bl	8000aa6 <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8000902:	480a      	ldr	r0, [pc, #40]	@ (800092c <Display_MainTitlePage+0x98>)
 8000904:	f000 f97c 	bl	8000c00 <u8g2_NextPage>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1c5      	bne.n	800089a <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 800090e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000912:	f003 ff45 	bl	80047a0 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <Display_MainTitlePage+0x98>)
 8000918:	f000 f8c5 	bl	8000aa6 <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4807      	ldr	r0, [pc, #28]	@ (8000940 <Display_MainTitlePage+0xac>)
 8000922:	f004 fde5 	bl	80054f0 <HAL_GPIO_WritePin>
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000065c 	.word	0x2000065c
 8000930:	20000160 	.word	0x20000160
 8000934:	080094f4 	.word	0x080094f4
 8000938:	08009130 	.word	0x08009130
 800093c:	08009138 	.word	0x08009138
 8000940:	40021800 	.word	0x40021800

08000944 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af02      	add	r7, sp, #8
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4603      	mov	r3, r0
 8000954:	817b      	strh	r3, [r7, #10]
 8000956:	460b      	mov	r3, r1
 8000958:	813b      	strh	r3, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000964:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000966:	7dbb      	ldrb	r3, [r7, #22]
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf0c      	ite	eq
 800096c:	2301      	moveq	r3, #1
 800096e:	2300      	movne	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000974:	897a      	ldrh	r2, [r7, #10]
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	4413      	add	r3, r2
 800097a:	b298      	uxth	r0, r3
 800097c:	893b      	ldrh	r3, [r7, #8]
 800097e:	3301      	adds	r3, #1
 8000980:	b29b      	uxth	r3, r3
 8000982:	893a      	ldrh	r2, [r7, #8]
 8000984:	8979      	ldrh	r1, [r7, #10]
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4603      	mov	r3, r0
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f001 f883 	bl	8001a96 <u8g2_IsIntersection>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d040      	beq.n	8000a18 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 800099a:	e035      	b.n	8000a08 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	4013      	ands	r3, r2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00c      	beq.n	80009c4 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	7dba      	ldrb	r2, [r7, #22]
 80009ae:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80009b2:	893a      	ldrh	r2, [r7, #8]
 80009b4:	8979      	ldrh	r1, [r7, #10]
 80009b6:	2300      	movs	r3, #0
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f000 ffac 	bl	800191a <u8g2_DrawHVLine>
 80009c2:	e010      	b.n	80009e6 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10b      	bne.n	80009e6 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	7d7a      	ldrb	r2, [r7, #21]
 80009d2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80009d6:	893a      	ldrh	r2, [r7, #8]
 80009d8:	8979      	ldrh	r1, [r7, #10]
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f000 ff9a 	bl	800191a <u8g2_DrawHVLine>
    }
    x++;
 80009e6:	897b      	ldrh	r3, [r7, #10]
 80009e8:	3301      	adds	r3, #1
 80009ea:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	75fb      	strb	r3, [r7, #23]
      b++;
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	3301      	adds	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1c6      	bne.n	800099c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	7dba      	ldrb	r2, [r7, #22]
 8000a12:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8000a16:	e000      	b.n	8000a1a <u8g2_DrawHXBM+0xd6>
    return;
 8000a18:	bf00      	nop
}
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	817b      	strh	r3, [r7, #10]
 8000a32:	460b      	mov	r3, r1
 8000a34:	813b      	strh	r3, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	3307      	adds	r3, #7
 8000a42:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000a44:	8afb      	ldrh	r3, [r7, #22]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000a4a:	897a      	ldrh	r2, [r7, #10]
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b298      	uxth	r0, r3
 8000a52:	893a      	ldrh	r2, [r7, #8]
 8000a54:	8c3b      	ldrh	r3, [r7, #32]
 8000a56:	4413      	add	r3, r2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	893a      	ldrh	r2, [r7, #8]
 8000a5c:	8979      	ldrh	r1, [r7, #10]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f001 f817 	bl	8001a96 <u8g2_IsIntersection>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d017      	beq.n	8000a9e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000a6e:	e012      	b.n	8000a96 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000a70:	88f8      	ldrh	r0, [r7, #6]
 8000a72:	893a      	ldrh	r2, [r7, #8]
 8000a74:	8979      	ldrh	r1, [r7, #10]
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff ff61 	bl	8000944 <u8g2_DrawHXBM>
    bitmap += blen;
 8000a82:	8afb      	ldrh	r3, [r7, #22]
 8000a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a86:	4413      	add	r3, r2
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8000a8a:	893b      	ldrh	r3, [r7, #8]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	813b      	strh	r3, [r7, #8]
    h--;
 8000a90:	8c3b      	ldrh	r3, [r7, #32]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000a96:	8c3b      	ldrh	r3, [r7, #32]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1e9      	bne.n	8000a70 <u8g2_DrawXBM+0x50>
 8000a9c:	e000      	b.n	8000aa0 <u8g2_DrawXBM+0x80>
    return;
 8000a9e:	bf00      	nop
  }
}
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	7c1b      	ldrb	r3, [r3, #16]
 8000ab4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	fb02 f303 	mul.w	r3, r2, r3
 8000ac4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 ff3d 	bl	8008954 <memset>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	70fb      	strb	r3, [r7, #3]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	7c1b      	ldrb	r3, [r3, #16]
 8000af8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b02:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	89ba      	ldrh	r2, [r7, #12]
 8000b0a:	fb12 f303 	smulbb	r3, r2, r3
 8000b0e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000b10:	89bb      	ldrh	r3, [r7, #12]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000b1e:	7bf9      	ldrb	r1, [r7, #15]
 8000b20:	78ba      	ldrb	r2, [r7, #2]
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	460b      	mov	r3, r1
 8000b28:	2100      	movs	r1, #0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f001 fc99 	bl	8002462 <u8x8_DrawTile>
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b4a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b52:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	7c5b      	ldrb	r3, [r3, #17]
 8000b5a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000b5c:	7bba      	ldrb	r2, [r7, #14]
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffbd 	bl	8000ae2 <u8g2_send_tile_row>
    src_row++;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	3301      	adds	r3, #1
 8000b72:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d203      	bcs.n	8000b84 <u8g2_send_buffer+0x4c>
 8000b7c:	7bba      	ldrb	r2, [r7, #14]
 8000b7e:	7b3b      	ldrb	r3, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3eb      	bcc.n	8000b5c <u8g2_send_buffer+0x24>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ffcf 	bl	8000b38 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f001 fcc3 	bl	8002526 <u8x8_RefreshDisplay>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	78fa      	ldrb	r2, [r7, #3]
 8000bb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	4798      	blx	r3
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff5b 	bl	8000aa6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffd8 	bl	8000ba8 <u8g2_SetBufferCurrTileRow>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff95 	bl	8000b38 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000c14:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4413      	add	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	7c5b      	ldrb	r3, [r3, #17]
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d304      	bcc.n	8000c38 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f001 fc79 	bl	8002526 <u8x8_RefreshDisplay>
    return 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e00d      	b.n	8000c54 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff2f 	bl	8000aa6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffab 	bl	8000ba8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ffb7 	bl	8000bd8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffc8 	bl	8000c00 <u8g2_NextPage>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f9      	bne.n	8000c6a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8000c76:	2100      	movs	r1, #0
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff95 	bl	8000ba8 <u8g2_SetBufferCurrTileRow>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2208      	movs	r2, #8
 8000c94:	701a      	strb	r2, [r3, #0]
  return buf;
 8000c96:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	200006f0 	.word	0x200006f0

08000ca8 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <u8g2_Setup_st7565_64128n_f+0x44>)
 8000cbe:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <u8g2_Setup_st7565_64128n_f+0x48>)
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f001 fc91 	bl	80025e8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000cc6:	f107 0313 	add.w	r3, r7, #19
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffdc 	bl	8000c88 <u8g2_m_16_8_f>
 8000cd0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000cd2:	7cfa      	ldrb	r2, [r7, #19]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <u8g2_Setup_st7565_64128n_f+0x4c>)
 8000cda:	6979      	ldr	r1, [r7, #20]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 ffc4 	bl	8001c6a <u8g2_SetupBuffer>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	0800217d 	.word	0x0800217d
 8000cf0:	0800231d 	.word	0x0800231d
 8000cf4:	08001aed 	.word	0x08001aed

08000cf8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	81fb      	strh	r3, [r7, #14]
    font++;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000d3c:	89fb      	ldrh	r3, [r7, #14]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f7ff ffc5 	bl	8000cf8 <u8g2_font_get_byte>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f7ff ffbd 	bl	8000cf8 <u8g2_font_get_byte>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000d86:	2102      	movs	r1, #2
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f7ff ffb5 	bl	8000cf8 <u8g2_font_get_byte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000d96:	2103      	movs	r1, #3
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f7ff ffad 	bl	8000cf8 <u8g2_font_get_byte>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000da6:	2104      	movs	r1, #4
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f7ff ffa5 	bl	8000cf8 <u8g2_font_get_byte>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000db6:	2105      	movs	r1, #5
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff ff9d 	bl	8000cf8 <u8g2_font_get_byte>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000dc6:	2106      	movs	r1, #6
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f7ff ff95 	bl	8000cf8 <u8g2_font_get_byte>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000dd6:	2107      	movs	r1, #7
 8000dd8:	6838      	ldr	r0, [r7, #0]
 8000dda:	f7ff ff8d 	bl	8000cf8 <u8g2_font_get_byte>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000de6:	2108      	movs	r1, #8
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f7ff ff85 	bl	8000cf8 <u8g2_font_get_byte>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000df6:	2109      	movs	r1, #9
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff ff7d 	bl	8000cf8 <u8g2_font_get_byte>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000e06:	210a      	movs	r1, #10
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f7ff ff75 	bl	8000cf8 <u8g2_font_get_byte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000e16:	210b      	movs	r1, #11
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f7ff ff6d 	bl	8000cf8 <u8g2_font_get_byte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000e26:	210c      	movs	r1, #12
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f7ff ff65 	bl	8000cf8 <u8g2_font_get_byte>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000e36:	210d      	movs	r1, #13
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f7ff ff5d 	bl	8000cf8 <u8g2_font_get_byte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000e46:	210e      	movs	r1, #14
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f7ff ff55 	bl	8000cf8 <u8g2_font_get_byte>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000e56:	210f      	movs	r1, #15
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	f7ff ff4d 	bl	8000cf8 <u8g2_font_get_byte>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000e66:	2110      	movs	r1, #16
 8000e68:	6838      	ldr	r0, [r7, #0]
 8000e6a:	f7ff ff45 	bl	8000cf8 <u8g2_font_get_byte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000e76:	2111      	movs	r1, #17
 8000e78:	6838      	ldr	r0, [r7, #0]
 8000e7a:	f7ff ff4f 	bl	8000d1c <u8g2_font_get_word>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000e86:	2113      	movs	r1, #19
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f7ff ff47 	bl	8000d1c <u8g2_font_get_word>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000e96:	2115      	movs	r1, #21
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff ff3f 	bl	8000d1c <u8g2_font_get_word>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	82da      	strh	r2, [r3, #22]
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7b1b      	ldrb	r3, [r3, #12]
 8000ebe:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	7b7b      	ldrb	r3, [r7, #13]
 8000ecc:	fa42 f303 	asr.w	r3, r2, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000ed2:	7b7b      	ldrb	r3, [r7, #13]
 8000ed4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000ed6:	7bba      	ldrb	r2, [r7, #14]
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	4413      	add	r3, r2
 8000edc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	d91a      	bls.n	8000f1a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000ee8:	7b3a      	ldrb	r2, [r7, #12]
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	7b3b      	ldrb	r3, [r7, #12]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	b25a      	sxtb	r2, r3
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	3b08      	subs	r3, #8
 8000f18:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7bba      	ldrb	r2, [r7, #14]
 8000f34:	731a      	strb	r2, [r3, #12]
  return val;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffaa 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000f68:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
  return v;
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000f8a:	b490      	push	{r4, r7}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4604      	mov	r4, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4611      	mov	r1, r2
 8000f96:	461a      	mov	r2, r3
 8000f98:	4623      	mov	r3, r4
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	717b      	strb	r3, [r7, #5]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	713b      	strb	r3, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d014      	beq.n	8000fd8 <u8g2_add_vector_y+0x4e>
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	dc19      	bgt.n	8000fe6 <u8g2_add_vector_y+0x5c>
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <u8g2_add_vector_y+0x32>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d007      	beq.n	8000fca <u8g2_add_vector_y+0x40>
 8000fba:	e014      	b.n	8000fe6 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000fbc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	80fb      	strh	r3, [r7, #6]
      break;
 8000fc8:	e014      	b.n	8000ff4 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000fca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	80fb      	strh	r3, [r7, #6]
      break;
 8000fd6:	e00d      	b.n	8000ff4 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000fd8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	80fb      	strh	r3, [r7, #6]
      break;
 8000fe4:	e006      	b.n	8000ff4 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000fe6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	88fa      	ldrh	r2, [r7, #6]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	80fb      	strh	r3, [r7, #6]
      break;      
 8000ff2:	bf00      	nop
  }
  return dy;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc90      	pop	{r4, r7}
 8000ffe:	4770      	bx	lr

08001000 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001000:	b490      	push	{r4, r7}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4623      	mov	r3, r4
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	4603      	mov	r3, r0
 8001014:	717b      	strb	r3, [r7, #5]
 8001016:	460b      	mov	r3, r1
 8001018:	713b      	strb	r3, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d014      	beq.n	800104e <u8g2_add_vector_x+0x4e>
 8001024:	2b02      	cmp	r3, #2
 8001026:	dc19      	bgt.n	800105c <u8g2_add_vector_x+0x5c>
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <u8g2_add_vector_x+0x32>
 800102c:	2b01      	cmp	r3, #1
 800102e:	d007      	beq.n	8001040 <u8g2_add_vector_x+0x40>
 8001030:	e014      	b.n	800105c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001032:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001036:	b29a      	uxth	r2, r3
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
      break;
 800103e:	e014      	b.n	800106a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001040:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001044:	b29b      	uxth	r3, r3
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	80fb      	strh	r3, [r7, #6]
      break;
 800104c:	e00d      	b.n	800106a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800104e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001052:	b29b      	uxth	r3, r3
 8001054:	88fa      	ldrh	r2, [r7, #6]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	80fb      	strh	r3, [r7, #6]
      break;
 800105a:	e006      	b.n	800106a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800105c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001060:	b29a      	uxth	r2, r3
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4413      	add	r3, r2
 8001066:	80fb      	strh	r3, [r7, #6]
      break;      
 8001068:	bf00      	nop
  }
  return dx;
 800106a:	88fb      	ldrh	r3, [r7, #6]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bc90      	pop	{r4, r7}
 8001074:	4770      	bx	lr

08001076 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b088      	sub	sp, #32
 800107a:	af02      	add	r7, sp, #8
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
 8001082:	4613      	mov	r3, r2
 8001084:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3360      	adds	r3, #96	@ 0x60
 800108a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001096:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800109e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80010a6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	7d7b      	ldrb	r3, [r7, #21]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80010b4:	7dfa      	ldrb	r2, [r7, #23]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d201      	bcs.n	80010c0 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	889b      	ldrh	r3, [r3, #4]
 80010c4:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	88db      	ldrh	r3, [r3, #6]
 80010ca:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80010cc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80010d0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	7c1b      	ldrb	r3, [r3, #16]
 80010d8:	89b8      	ldrh	r0, [r7, #12]
 80010da:	f7ff ff91 	bl	8001000 <u8g2_add_vector_x>
 80010de:	4603      	mov	r3, r0
 80010e0:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80010e2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80010e6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	7c1b      	ldrb	r3, [r3, #16]
 80010ee:	8978      	ldrh	r0, [r7, #10]
 80010f0:	f7ff ff4b 	bl	8000f8a <u8g2_add_vector_y>
 80010f4:	4603      	mov	r3, r0
 80010f6:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d010      	beq.n	8001120 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	7b9a      	ldrb	r2, [r3, #14]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b298      	uxth	r0, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	7c1b      	ldrb	r3, [r3, #16]
 8001110:	897a      	ldrh	r2, [r7, #10]
 8001112:	89b9      	ldrh	r1, [r7, #12]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4603      	mov	r3, r0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fbfe 	bl	800191a <u8g2_DrawHVLine>
 800111e:	e013      	b.n	8001148 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	7b5b      	ldrb	r3, [r3, #13]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10f      	bne.n	8001148 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	7bda      	ldrb	r2, [r3, #15]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001132:	7dbb      	ldrb	r3, [r7, #22]
 8001134:	b298      	uxth	r0, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	7c1b      	ldrb	r3, [r3, #16]
 800113a:	897a      	ldrh	r2, [r7, #10]
 800113c:	89b9      	ldrh	r1, [r7, #12]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4603      	mov	r3, r0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fbe9 	bl	800191a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001148:	7dfa      	ldrb	r2, [r7, #23]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	429a      	cmp	r2, r3
 800114e:	d309      	bcc.n	8001164 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	757b      	strb	r3, [r7, #21]
    ly++;
 800115c:	7d3b      	ldrb	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001162:	e79d      	b.n	80010a0 <u8g2_font_decode_len+0x2a>
      break;
 8001164:	bf00      	nop
  }
  lx += cnt;
 8001166:	7d7a      	ldrb	r2, [r7, #21]
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4413      	add	r3, r2
 800116c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800116e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001176:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	725a      	strb	r2, [r3, #9]
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3360      	adds	r3, #96	@ 0x60
 8001194:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80011a8:	4619      	mov	r1, r3
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff fe7f 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80011be:	4619      	mov	r1, r3
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fe74 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	7b9b      	ldrb	r3, [r3, #14]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	73da      	strb	r2, [r3, #15]
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3360      	adds	r3, #96	@ 0x60
 8001202:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffbd 	bl	8001186 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001212:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800121a:	4619      	mov	r1, r3
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff fe91 	bl	8000f44 <u8g2_font_decode_get_signed_bits>
 8001222:	4603      	mov	r3, r0
 8001224:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800122c:	4619      	mov	r1, r3
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff fe88 	bl	8000f44 <u8g2_font_decode_get_signed_bits>
 8001234:	4603      	mov	r3, r0
 8001236:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800123e:	4619      	mov	r1, r3
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff fe7f 	bl	8000f44 <u8g2_font_decode_get_signed_bits>
 8001246:	4603      	mov	r3, r0
 8001248:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f340 80d7 	ble.w	8001404 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	8898      	ldrh	r0, [r3, #4]
 800125a:	7cfa      	ldrb	r2, [r7, #19]
 800125c:	7c7b      	ldrb	r3, [r7, #17]
 800125e:	4413      	add	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	425b      	negs	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	b25a      	sxtb	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	7c1b      	ldrb	r3, [r3, #16]
 800126c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001270:	f7ff fec6 	bl	8001000 <u8g2_add_vector_x>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	88d8      	ldrh	r0, [r3, #6]
 8001280:	7cfa      	ldrb	r2, [r7, #19]
 8001282:	7c7b      	ldrb	r3, [r7, #17]
 8001284:	4413      	add	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	425b      	negs	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	b25a      	sxtb	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	7c1b      	ldrb	r3, [r3, #16]
 8001292:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001296:	f7ff fe78 	bl	8000f8a <u8g2_add_vector_y>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	88db      	ldrh	r3, [r3, #6]
 80012ac:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80012ae:	8bfb      	ldrh	r3, [r7, #30]
 80012b0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80012b2:	8b7b      	ldrh	r3, [r7, #26]
 80012b4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	7c1b      	ldrb	r3, [r3, #16]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d85a      	bhi.n	8001374 <u8g2_font_decode_glyph+0x180>
 80012be:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <u8g2_font_decode_glyph+0xd0>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012f1 	.word	0x080012f1
 80012cc:	08001319 	.word	0x08001319
 80012d0:	0800134d 	.word	0x0800134d
      {
	case 0:
	    x1 += decode->glyph_width;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	8bbb      	ldrh	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80012e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	833b      	strh	r3, [r7, #24]
	    break;
 80012ee:	e041      	b.n	8001374 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80012f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	8bfa      	ldrh	r2, [r7, #30]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80012fc:	8bfb      	ldrh	r3, [r7, #30]
 80012fe:	3301      	adds	r3, #1
 8001300:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001302:	8bbb      	ldrh	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800130e:	b29a      	uxth	r2, r3
 8001310:	8b3b      	ldrh	r3, [r7, #24]
 8001312:	4413      	add	r3, r2
 8001314:	833b      	strh	r3, [r7, #24]
	    break;
 8001316:	e02d      	b.n	8001374 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800131e:	b29b      	uxth	r3, r3
 8001320:	8bfa      	ldrh	r2, [r7, #30]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001326:	8bfb      	ldrh	r3, [r7, #30]
 8001328:	3301      	adds	r3, #1
 800132a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001336:	b29b      	uxth	r3, r3
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800133e:	8b7b      	ldrh	r3, [r7, #26]
 8001340:	3301      	adds	r3, #1
 8001342:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001344:	8b3b      	ldrh	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	833b      	strh	r3, [r7, #24]
	    break;	  
 800134a:	e013      	b.n	8001374 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800134c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8bbb      	ldrh	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800135e:	b29b      	uxth	r3, r3
 8001360:	8b7a      	ldrh	r2, [r7, #26]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001366:	8b7b      	ldrh	r3, [r7, #26]
 8001368:	3301      	adds	r3, #1
 800136a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800136c:	8b3b      	ldrh	r3, [r7, #24]
 800136e:	3301      	adds	r3, #1
 8001370:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001372:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001374:	8bb8      	ldrh	r0, [r7, #28]
 8001376:	8b7a      	ldrh	r2, [r7, #26]
 8001378:	8bf9      	ldrh	r1, [r7, #30]
 800137a:	8b3b      	ldrh	r3, [r7, #24]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4603      	mov	r3, r0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fb88 	bl	8001a96 <u8g2_IsIntersection>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <u8g2_font_decode_glyph+0x19e>
	return d;
 800138c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001390:	e03a      	b.n	8001408 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2200      	movs	r2, #0
 8001396:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2200      	movs	r2, #0
 800139c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80013a4:	4619      	mov	r1, r3
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff fd81 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80013b6:	4619      	mov	r1, r3
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff fd78 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 80013be:	4603      	mov	r3, r0
 80013c0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe54 	bl	8001076 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe4e 	bl	8001076 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80013da:	2101      	movs	r1, #1
 80013dc:	6978      	ldr	r0, [r7, #20]
 80013de:	f7ff fd66 	bl	8000eae <u8g2_font_decode_get_unsigned_bits>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ec      	bne.n	80013c2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80013ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dd00      	ble.n	80013f8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80013f6:	e7d2      	b.n	800139e <u8g2_font_decode_glyph+0x1aa>
	break;
 80013f8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	7b9a      	ldrb	r2, [r3, #14]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001404:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3317      	adds	r3, #23
 8001426:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	2bff      	cmp	r3, #255	@ 0xff
 800142c:	d82a      	bhi.n	8001484 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	2b60      	cmp	r3, #96	@ 0x60
 8001432:	d907      	bls.n	8001444 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800143a:	461a      	mov	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e009      	b.n	8001458 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	2b40      	cmp	r3, #64	@ 0x40
 8001448:	d906      	bls.n	8001458 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001450:	461a      	mov	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d04e      	beq.n	8001500 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	4293      	cmp	r3, r2
 800146c:	d102      	bne.n	8001474 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3302      	adds	r3, #2
 8001472:	e049      	b.n	8001508 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4413      	add	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001482:	e7e9      	b.n	8001458 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800148a:	461a      	mov	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001496:	2100      	movs	r1, #0
 8001498:	6938      	ldr	r0, [r7, #16]
 800149a:	f7ff fc3f 	bl	8000d1c <u8g2_font_get_word>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4413      	add	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80014a8:	2102      	movs	r1, #2
 80014aa:	6938      	ldr	r0, [r7, #16]
 80014ac:	f7ff fc36 	bl	8000d1c <u8g2_font_get_word>
 80014b0:	4603      	mov	r3, r0
 80014b2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3304      	adds	r3, #4
 80014b8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80014ba:	89fa      	ldrh	r2, [r7, #14]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3e9      	bcc.n	8001496 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4313      	orrs	r3, r2
 80014da:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80014e2:	89fa      	ldrh	r2, [r7, #14]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d102      	bne.n	80014f0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3303      	adds	r3, #3
 80014ee:	e00b      	b.n	8001508 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3302      	adds	r3, #2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4413      	add	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80014fe:	e7e0      	b.n	80014c2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001504:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	817b      	strh	r3, [r7, #10]
 8001522:	460b      	mov	r3, r1
 8001524:	813b      	strh	r3, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	897a      	ldrh	r2, [r7, #10]
 8001532:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	893a      	ldrh	r2, [r7, #8]
 800153a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4619      	mov	r1, r3
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff64 	bl	8001410 <u8g2_font_get_glyph_data>
 8001548:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fe4e 	bl	80011f4 <u8g2_font_decode_glyph>
 8001558:	4603      	mov	r3, r0
 800155a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800155c:	8afb      	ldrh	r3, [r7, #22]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	817b      	strh	r3, [r7, #10]
 800157a:	460b      	mov	r3, r1
 800157c:	813b      	strh	r3, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001588:	2b03      	cmp	r3, #3
 800158a:	d833      	bhi.n	80015f4 <u8g2_DrawGlyph+0x8c>
 800158c:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <u8g2_DrawGlyph+0x2c>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015b9 	.word	0x080015b9
 800159c:	080015cd 	.word	0x080015cd
 80015a0:	080015e1 	.word	0x080015e1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	4798      	blx	r3
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	893b      	ldrh	r3, [r7, #8]
 80015b2:	4413      	add	r3, r2
 80015b4:	813b      	strh	r3, [r7, #8]
      break;
 80015b6:	e01d      	b.n	80015f4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	4798      	blx	r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	897b      	ldrh	r3, [r7, #10]
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	817b      	strh	r3, [r7, #10]
      break;
 80015ca:	e013      	b.n	80015f4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	4798      	blx	r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	813b      	strh	r3, [r7, #8]
      break;
 80015de:	e009      	b.n	80015f4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	4798      	blx	r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	4413      	add	r3, r2
 80015f0:	817b      	strh	r3, [r7, #10]
      break;
 80015f2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	893a      	ldrh	r2, [r7, #8]
 80015f8:	8979      	ldrh	r1, [r7, #10]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff ff88 	bl	8001510 <u8g2_font_draw_glyph>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop

0800160c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	817b      	strh	r3, [r7, #10]
 800161a:	4613      	mov	r3, r2
 800161c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fca7 	bl	8001f72 <u8x8_utf8_init>
  sum = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	4611      	mov	r1, r2
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	4798      	blx	r3
 8001636:	4603      	mov	r3, r0
 8001638:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800163a:	8abb      	ldrh	r3, [r7, #20]
 800163c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001640:	4293      	cmp	r3, r2
 8001642:	d038      	beq.n	80016b6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800164a:	8abb      	ldrh	r3, [r7, #20]
 800164c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001650:	4293      	cmp	r3, r2
 8001652:	d0e9      	beq.n	8001628 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001654:	8abb      	ldrh	r3, [r7, #20]
 8001656:	893a      	ldrh	r2, [r7, #8]
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff ff84 	bl	8001568 <u8g2_DrawGlyph>
 8001660:	4603      	mov	r3, r0
 8001662:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800166a:	2b03      	cmp	r3, #3
 800166c:	d81e      	bhi.n	80016ac <u8g2_draw_string+0xa0>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <u8g2_draw_string+0x68>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001685 	.word	0x08001685
 8001678:	0800168f 	.word	0x0800168f
 800167c:	08001699 	.word	0x08001699
 8001680:	080016a3 	.word	0x080016a3
      {
	case 0:
	  x += delta;
 8001684:	897a      	ldrh	r2, [r7, #10]
 8001686:	8a7b      	ldrh	r3, [r7, #18]
 8001688:	4413      	add	r3, r2
 800168a:	817b      	strh	r3, [r7, #10]
	  break;
 800168c:	e00e      	b.n	80016ac <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800168e:	893a      	ldrh	r2, [r7, #8]
 8001690:	8a7b      	ldrh	r3, [r7, #18]
 8001692:	4413      	add	r3, r2
 8001694:	813b      	strh	r3, [r7, #8]
	  break;
 8001696:	e009      	b.n	80016ac <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001698:	897a      	ldrh	r2, [r7, #10]
 800169a:	8a7b      	ldrh	r3, [r7, #18]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	817b      	strh	r3, [r7, #10]
	  break;
 80016a0:	e004      	b.n	80016ac <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80016a2:	893a      	ldrh	r2, [r7, #8]
 80016a4:	8a7b      	ldrh	r3, [r7, #18]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	813b      	strh	r3, [r7, #8]
	  break;
 80016aa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80016ac:	8afa      	ldrh	r2, [r7, #22]
 80016ae:	8a7b      	ldrh	r3, [r7, #18]
 80016b0:	4413      	add	r3, r2
 80016b2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80016b4:	e7b8      	b.n	8001628 <u8g2_draw_string+0x1c>
      break;
 80016b6:	bf00      	nop
    }
  }
  return sum;
 80016b8:	8afb      	ldrh	r3, [r7, #22]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop

080016c4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	817b      	strh	r3, [r7, #10]
 80016d2:	4613      	mov	r3, r2
 80016d4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <u8g2_DrawStr+0x30>)
 80016da:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80016dc:	893a      	ldrh	r2, [r7, #8]
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff ff92 	bl	800160c <u8g2_draw_string>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08001f8f 	.word	0x08001f8f

080016f8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	2b00      	cmp	r3, #0
 8001706:	d05d      	beq.n	80017c4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001726:	2b00      	cmp	r3, #0
 8001728:	d04d      	beq.n	80017c6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001730:	2b01      	cmp	r3, #1
 8001732:	d11c      	bne.n	800176e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001740:	429a      	cmp	r2, r3
 8001742:	da05      	bge.n	8001750 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 800175c:	429a      	cmp	r2, r3
 800175e:	dd32      	ble.n	80017c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800176c:	e02b      	b.n	80017c6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800177c:	4619      	mov	r1, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001784:	440b      	add	r3, r1
 8001786:	429a      	cmp	r2, r3
 8001788:	da0d      	bge.n	80017a6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4413      	add	r3, r2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dd07      	ble.n	80017c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80017c2:	e000      	b.n	80017c6 <u8g2_UpdateRefHeight+0xce>
    return;
 80017c4:	bf00      	nop
  }  
}
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <u8g2_SetFontPosBaseline+0x1c>)
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	080017d1 	.word	0x080017d1

08001808 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d00b      	beq.n	8001834 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3374      	adds	r3, #116	@ 0x74
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fa97 	bl	8000d5c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff62 	bl	80016f8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	460b      	mov	r3, r1
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4613      	mov	r3, r2
 8001850:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	82bb      	strh	r3, [r7, #20]
	b += *len;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	8abb      	ldrh	r3, [r7, #20]
 8001862:	4413      	add	r3, r2
 8001864:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8001866:	8afa      	ldrh	r2, [r7, #22]
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90b      	bls.n	8001886 <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 800186e:	8afa      	ldrh	r2, [r7, #22]
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d205      	bcs.n	8001882 <u8g2_clip_intersection2+0x46>
			b = d;
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	82bb      	strh	r3, [r7, #20]
			b--;
 800187a:	8abb      	ldrh	r3, [r7, #20]
 800187c:	3b01      	subs	r3, #1
 800187e:	82bb      	strh	r3, [r7, #20]
 8001880:	e001      	b.n	8001886 <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001886:	8afa      	ldrh	r2, [r7, #22]
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d301      	bcc.n	8001892 <u8g2_clip_intersection2+0x56>
		return 0;
 800188e:	2300      	movs	r3, #0
 8001890:	e01c      	b.n	80018cc <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8001892:	8aba      	ldrh	r2, [r7, #20]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	429a      	cmp	r2, r3
 8001898:	d801      	bhi.n	800189e <u8g2_clip_intersection2+0x62>
		return 0;
 800189a:	2300      	movs	r3, #0
 800189c:	e016      	b.n	80018cc <u8g2_clip_intersection2+0x90>
	if (a < c)
 800189e:	8afa      	ldrh	r2, [r7, #22]
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d201      	bcs.n	80018aa <u8g2_clip_intersection2+0x6e>
		a = c;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 80018aa:	8aba      	ldrh	r2, [r7, #20]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d901      	bls.n	80018b6 <u8g2_clip_intersection2+0x7a>
		b = d;
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8afa      	ldrh	r2, [r7, #22]
 80018ba:	801a      	strh	r2, [r3, #0]
	b -= a;
 80018bc:	8aba      	ldrh	r2, [r7, #20]
 80018be:	8afb      	ldrh	r3, [r7, #22]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	82bb      	strh	r3, [r7, #20]
	*len = b;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	8aba      	ldrh	r2, [r7, #20]
 80018c8:	801a      	strh	r2, [r3, #0]
	return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b087      	sub	sp, #28
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	460b      	mov	r3, r1
 80018ec:	813b      	strh	r3, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80018f6:	893a      	ldrh	r2, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001900:	88f8      	ldrh	r0, [r7, #6]
 8001902:	893a      	ldrh	r2, [r7, #8]
 8001904:	8979      	ldrh	r1, [r7, #10]
 8001906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4603      	mov	r3, r0
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	47a0      	blx	r4
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}

0800191a <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 800191a:	b590      	push	{r4, r7, lr}
 800191c:	b087      	sub	sp, #28
 800191e:	af02      	add	r7, sp, #8
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	4608      	mov	r0, r1
 8001924:	4611      	mov	r1, r2
 8001926:	461a      	mov	r2, r3
 8001928:	4603      	mov	r3, r0
 800192a:	817b      	strh	r3, [r7, #10]
 800192c:	460b      	mov	r3, r1
 800192e:	813b      	strh	r3, [r7, #8]
 8001930:	4613      	mov	r3, r2
 8001932:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d075      	beq.n	8001a2a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d072      	beq.n	8001a2a <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d91a      	bls.n	8001980 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 800194a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d109      	bne.n	8001966 <u8g2_DrawHVLine+0x4c>
					x -= len;
 8001952:	897a      	ldrh	r2, [r7, #10]
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	817b      	strh	r3, [r7, #10]
					x++;
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	3301      	adds	r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	817b      	strh	r3, [r7, #10]
 8001964:	e00c      	b.n	8001980 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8001966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d108      	bne.n	8001980 <u8g2_DrawHVLine+0x66>
					y -= len;
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	813b      	strh	r3, [r7, #8]
					y++;
 8001978:	893b      	ldrh	r3, [r7, #8]
 800197a:	3301      	adds	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8001980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11a      	bne.n	80019ca <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800199a:	893b      	ldrh	r3, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	d83b      	bhi.n	8001a18 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80019a6:	893b      	ldrh	r3, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d937      	bls.n	8001a1c <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80019b8:	1db9      	adds	r1, r7, #6
 80019ba:	f107 000a 	add.w	r0, r7, #10
 80019be:	f7ff ff3d 	bl	800183c <u8g2_clip_intersection2>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11a      	bne.n	80019fe <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 80019c8:	e02f      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d824      	bhi.n	8001a20 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d920      	bls.n	8001a24 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80019ee:	1db9      	adds	r1, r7, #6
 80019f0:	f107 0008 	add.w	r0, r7, #8
 80019f4:	f7ff ff22 	bl	800183c <u8g2_clip_intersection2>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d014      	beq.n	8001a28 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	689c      	ldr	r4, [r3, #8]
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	893a      	ldrh	r2, [r7, #8]
 8001a08:	88f8      	ldrh	r0, [r7, #6]
 8001a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4603      	mov	r3, r0
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	47a0      	blx	r4
 8001a16:	e008      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
					return;
 8001a18:	bf00      	nop
 8001a1a:	e006      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
					return;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
					return;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
					return;
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <u8g2_DrawHVLine+0x110>
					return;
 8001a28:	bf00      	nop
		}
}
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001a30:	b490      	push	{r4, r7}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4604      	mov	r4, r0
 8001a38:	4608      	mov	r0, r1
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	80fb      	strh	r3, [r7, #6]
 8001a42:	4603      	mov	r3, r0
 8001a44:	80bb      	strh	r3, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	807b      	strh	r3, [r7, #2]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20d      	bcs.n	8001a72 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001a56:	883a      	ldrh	r2, [r7, #0]
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d901      	bls.n	8001a62 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e014      	b.n	8001a8c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d901      	bls.n	8001a6e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e00c      	b.n	8001a8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001a72:	883a      	ldrh	r2, [r7, #0]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d907      	bls.n	8001a8a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	883b      	ldrh	r3, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d901      	bls.n	8001a86 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e002      	b.n	8001a8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001a8a:	2300      	movs	r3, #0
    }
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc90      	pop	{r4, r7}
 8001a94:	4770      	bx	lr

08001a96 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	817b      	strh	r3, [r7, #10]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	813b      	strh	r3, [r7, #8]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001abc:	8b3b      	ldrh	r3, [r7, #24]
 8001abe:	893a      	ldrh	r2, [r7, #8]
 8001ac0:	f7ff ffb6 	bl	8001a30 <u8g2_is_intersection_decision_tree>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <u8g2_IsIntersection+0x38>
    return 0; 
 8001aca:	2300      	movs	r3, #0
 8001acc:	e00a      	b.n	8001ae4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	897a      	ldrh	r2, [r7, #10]
 8001ade:	f7ff ffa7 	bl	8001a30 <u8g2_is_intersection_decision_tree>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	817b      	strh	r3, [r7, #10]
 8001afe:	460b      	mov	r3, r1
 8001b00:	813b      	strh	r3, [r7, #8]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001b06:	893b      	ldrh	r3, [r7, #8]
 8001b08:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001b0a:	7efb      	ldrb	r3, [r7, #27]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001b16:	7e3a      	ldrb	r2, [r7, #24]
 8001b18:	7efb      	ldrb	r3, [r7, #27]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d801      	bhi.n	8001b36 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001b32:	7e3b      	ldrb	r3, [r7, #24]
 8001b34:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d001      	beq.n	8001b44 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001b40:	7e3b      	ldrb	r3, [r7, #24]
 8001b42:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	f023 0307 	bic.w	r3, r3, #7
 8001b4e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	7c1b      	ldrb	r3, [r3, #16]
 8001b56:	461a      	mov	r2, r3
 8001b58:	8afb      	ldrh	r3, [r7, #22]
 8001b5a:	fb13 f302 	smulbb	r3, r3, r2
 8001b5e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001b66:	8afb      	ldrh	r3, [r7, #22]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001b6e:	897b      	ldrh	r3, [r7, #10]
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001b76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d117      	bne.n	8001bae <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	7ebb      	ldrb	r3, [r7, #26]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	7e7b      	ldrb	r3, [r7, #25]
 8001b92:	4053      	eors	r3, r2
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
	len--;
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001bac:	e038      	b.n	8001c20 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	7ebb      	ldrb	r3, [r7, #26]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	7e7b      	ldrb	r3, [r7, #25]
 8001bc2:	4053      	eors	r3, r2
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001bca:	7efb      	ldrb	r3, [r7, #27]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001bd0:	7efb      	ldrb	r3, [r7, #27]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	76fb      	strb	r3, [r7, #27]
      len--;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d114      	bne.n	8001c0e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001be8:	461a      	mov	r2, r3
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d801      	bhi.n	8001bfe <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d008      	beq.n	8001c1a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	767b      	strb	r3, [r7, #25]
 8001c0c:	e005      	b.n	8001c1a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001c0e:	7ebb      	ldrb	r3, [r7, #26]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001c14:	7e7b      	ldrb	r3, [r7, #25]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1c6      	bne.n	8001bae <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001c20:	bf00      	nop
 8001c22:	3724      	adds	r7, #36	@ 0x24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4613      	mov	r3, r2
 8001c78:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	79fa      	ldrb	r2, [r7, #7]
 8001c90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ffa9 	bl	8001c2c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff fd84 	bl	80017e8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d04:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	89fa      	ldrh	r2, [r7, #14]
 8001d10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	7c1b      	ldrb	r3, [r3, #16]
 8001d16:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	89fa      	ldrh	r2, [r7, #14]
 8001d22:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d2a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	89fa      	ldrh	r2, [r7, #14]
 8001d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d3e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001d48:	4413      	add	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	7c52      	ldrb	r2, [r2, #17]
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	dd07      	ble.n	8001d62 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	7c5b      	ldrb	r3, [r3, #17]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	4413      	add	r3, r2
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	8a9a      	ldrh	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	8ada      	ldrh	r2, [r3, #22]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fe5e 	bl	8001a96 <u8g2_IsIntersection>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001de8:	e03b      	b.n	8001e62 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d205      	bcs.n	8001e0e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d905      	bls.n	8001e2a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d205      	bcs.n	8001e46 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d905      	bls.n	8001e62 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff3c 	bl	8001cf0 <u8g2_update_dimension_common>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d30a      	bcc.n	8001eca <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff65 	bl	8001db0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b088      	sub	sp, #32
 8001ef2:	af02      	add	r7, sp, #8
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	817b      	strh	r3, [r7, #10]
 8001f00:	460b      	mov	r3, r1
 8001f02:	813b      	strh	r3, [r7, #8]
 8001f04:	4613      	mov	r3, r2
 8001f06:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f0e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001f10:	8aba      	ldrh	r2, [r7, #20]
 8001f12:	893b      	ldrh	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f1e:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001f20:	8afa      	ldrh	r2, [r7, #22]
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001f28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001f30:	8abb      	ldrh	r3, [r7, #20]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001f36:	8afa      	ldrh	r2, [r7, #22]
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	82fb      	strh	r3, [r7, #22]
 8001f3e:	e00a      	b.n	8001f56 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001f40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001f48:	8afb      	ldrh	r3, [r7, #22]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001f4e:	8aba      	ldrh	r2, [r7, #20]
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001f56:	88f8      	ldrh	r0, [r7, #6]
 8001f58:	8aba      	ldrh	r2, [r7, #20]
 8001f5a:	8af9      	ldrh	r1, [r7, #22]
 8001f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4603      	mov	r3, r0
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fcb7 	bl	80018d8 <u8g2_draw_hv_line_2dir>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <u8x8_ascii_next+0x18>
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b0a      	cmp	r3, #10
 8001fa4:	d102      	bne.n	8001fac <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001faa:	e001      	b.n	8001fb0 <u8x8_ascii_next+0x22>
  return b;
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	b29b      	uxth	r3, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691c      	ldr	r4, [r3, #16]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	47a0      	blx	r4
 8001fd6:	4603      	mov	r3, r0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}

08001fe0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	691c      	ldr	r4, [r3, #16]
 8001ff2:	7afa      	ldrb	r2, [r7, #11]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2117      	movs	r1, #23
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	47a0      	blx	r4
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}

08002006 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002012:	1cfb      	adds	r3, r7, #3
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe1 	bl	8001fe0 <u8x8_byte_SendBytes>
 800201e:	4603      	mov	r3, r0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68dc      	ldr	r4, [r3, #12]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	2300      	movs	r3, #0
 800203c:	2115      	movs	r1, #21
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	47a0      	blx	r4
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}

0800204c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68dc      	ldr	r4, [r3, #12]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	2300      	movs	r3, #0
 8002060:	2116      	movs	r1, #22
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	47a0      	blx	r4
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}

08002070 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	460b      	mov	r3, r1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68dc      	ldr	r4, [r3, #12]
 8002082:	7afa      	ldrb	r2, [r7, #11]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2117      	movs	r1, #23
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	47a0      	blx	r4
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}

08002096 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002096:	b590      	push	{r4, r7, lr}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68dc      	ldr	r4, [r3, #12]
 80020a2:	2300      	movs	r3, #0
 80020a4:	2200      	movs	r2, #0
 80020a6:	2118      	movs	r1, #24
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	47a0      	blx	r4
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}

080020b6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68dc      	ldr	r4, [r3, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	2119      	movs	r1, #25
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	47a0      	blx	r4
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}

080020d6 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	73fb      	strb	r3, [r7, #15]
    data++;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80020f0:	d031      	beq.n	8002156 <u8x8_cad_SendSequence+0x80>
 80020f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80020f4:	dc3d      	bgt.n	8002172 <u8x8_cad_SendSequence+0x9c>
 80020f6:	2b19      	cmp	r3, #25
 80020f8:	dc3b      	bgt.n	8002172 <u8x8_cad_SendSequence+0x9c>
 80020fa:	2b18      	cmp	r3, #24
 80020fc:	da23      	bge.n	8002146 <u8x8_cad_SendSequence+0x70>
 80020fe:	2b16      	cmp	r3, #22
 8002100:	dc02      	bgt.n	8002108 <u8x8_cad_SendSequence+0x32>
 8002102:	2b15      	cmp	r3, #21
 8002104:	da03      	bge.n	800210e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002106:	e034      	b.n	8002172 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002108:	2b17      	cmp	r3, #23
 800210a:	d00e      	beq.n	800212a <u8x8_cad_SendSequence+0x54>
	return;
 800210c:	e031      	b.n	8002172 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68dc      	ldr	r4, [r3, #12]
 8002118:	7bba      	ldrb	r2, [r7, #14]
 800211a:	7bf9      	ldrb	r1, [r7, #15]
 800211c:	2300      	movs	r3, #0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	47a0      	blx	r4
	  data++;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	603b      	str	r3, [r7, #0]
	  break;
 8002128:	e022      	b.n	8002170 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002130:	f107 030e 	add.w	r3, r7, #14
 8002134:	461a      	mov	r2, r3
 8002136:	2101      	movs	r1, #1
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff99 	bl	8002070 <u8x8_cad_SendData>
	  data++;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	603b      	str	r3, [r7, #0]
	  break;
 8002144:	e014      	b.n	8002170 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68dc      	ldr	r4, [r3, #12]
 800214a:	7bf9      	ldrb	r1, [r7, #15]
 800214c:	2300      	movs	r3, #0
 800214e:	2200      	movs	r2, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	47a0      	blx	r4
	  break;
 8002154:	e00c      	b.n	8002170 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	461a      	mov	r2, r3
 8002160:	2129      	movs	r1, #41	@ 0x29
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9ee 	bl	8002544 <u8x8_gpio_call>
	  data++;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	603b      	str	r3, [r7, #0]
	  break;
 800216e:	bf00      	nop
    cmd = *data;
 8002170:	e7b6      	b.n	80020e0 <u8x8_cad_SendSequence+0xa>
	return;
 8002172:	bf00      	nop
    }
  }
}
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
	...

0800217c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	72fb      	strb	r3, [r7, #11]
 800218a:	4613      	mov	r3, r2
 800218c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	3b14      	subs	r3, #20
 8002192:	2b05      	cmp	r3, #5
 8002194:	d82f      	bhi.n	80021f6 <u8x8_cad_001+0x7a>
 8002196:	a201      	add	r2, pc, #4	@ (adr r2, 800219c <u8x8_cad_001+0x20>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021e5 	.word	0x080021e5
 80021a0:	080021b5 	.word	0x080021b5
 80021a4:	080021c9 	.word	0x080021c9
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080021e5 	.word	0x080021e5
 80021b0:	080021e5 	.word	0x080021e5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80021b4:	2100      	movs	r1, #0
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff ff00 	bl	8001fbc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80021bc:	7abb      	ldrb	r3, [r7, #10]
 80021be:	4619      	mov	r1, r3
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff ff20 	bl	8002006 <u8x8_byte_SendByte>
      break;
 80021c6:	e018      	b.n	80021fa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80021c8:	2100      	movs	r1, #0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff fef6 	bl	8001fbc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80021d0:	7abb      	ldrb	r3, [r7, #10]
 80021d2:	4619      	mov	r1, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff ff16 	bl	8002006 <u8x8_byte_SendByte>
      break;
 80021da:	e00e      	b.n	80021fa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80021dc:	2101      	movs	r1, #1
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff feec 	bl	8001fbc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691c      	ldr	r4, [r3, #16]
 80021e8:	7aba      	ldrb	r2, [r7, #10]
 80021ea:	7af9      	ldrb	r1, [r7, #11]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	47a0      	blx	r4
 80021f2:	4603      	mov	r3, r0
 80021f4:	e002      	b.n	80021fc <u8x8_cad_001+0x80>
    default:
      return 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <u8x8_cad_001+0x80>
  }
  return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}

08002204 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	72fb      	strb	r3, [r7, #11]
 8002212:	4613      	mov	r3, r2
 8002214:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d006      	beq.n	800222a <u8x8_d_st7565_common+0x26>
 800221c:	2b0f      	cmp	r3, #15
 800221e:	dc71      	bgt.n	8002304 <u8x8_d_st7565_common+0x100>
 8002220:	2b0b      	cmp	r3, #11
 8002222:	d050      	beq.n	80022c6 <u8x8_d_st7565_common+0xc2>
 8002224:	2b0e      	cmp	r3, #14
 8002226:	d05b      	beq.n	80022e0 <u8x8_d_st7565_common+0xdc>
 8002228:	e06c      	b.n	8002304 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff ff33 	bl	8002096 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002236:	7dbb      	ldrb	r3, [r7, #22]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002242:	7dbb      	ldrb	r3, [r7, #22]
 8002244:	4413      	add	r3, r2
 8002246:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002248:	7dbb      	ldrb	r3, [r7, #22]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fee6 	bl	8002028 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800225c:	7dbb      	ldrb	r3, [r7, #22]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff fede 	bl	8002028 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	799b      	ldrb	r3, [r3, #6]
 8002270:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fed5 	bl	8002028 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002290:	7dfa      	ldrb	r2, [r7, #23]
 8002292:	7dbb      	ldrb	r3, [r7, #22]
 8002294:	4413      	add	r3, r2
 8002296:	2b84      	cmp	r3, #132	@ 0x84
 8002298:	d905      	bls.n	80022a6 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 800229a:	2384      	movs	r3, #132	@ 0x84
 800229c:	75fb      	strb	r3, [r7, #23]
	c -= x;
 800229e:	7dfa      	ldrb	r2, [r7, #23]
 80022a0:	7dbb      	ldrb	r3, [r7, #22]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff fedf 	bl	8002070 <u8x8_cad_SendData>
	arg_int--;
 80022b2:	7abb      	ldrb	r3, [r7, #10]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80022b8:	7abb      	ldrb	r3, [r7, #10]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f3      	bne.n	80022a6 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fef9 	bl	80020b6 <u8x8_cad_EndTransfer>
      break;
 80022c4:	e020      	b.n	8002308 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80022c6:	7abb      	ldrb	r3, [r7, #10]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80022cc:	4911      	ldr	r1, [pc, #68]	@ (8002314 <u8x8_d_st7565_common+0x110>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff ff01 	bl	80020d6 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80022d4:	e018      	b.n	8002308 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80022d6:	4910      	ldr	r1, [pc, #64]	@ (8002318 <u8x8_d_st7565_common+0x114>)
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fefc 	bl	80020d6 <u8x8_cad_SendSequence>
      break;
 80022de:	e013      	b.n	8002308 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fed8 	bl	8002096 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80022e6:	2181      	movs	r1, #129	@ 0x81
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f7ff fe9d 	bl	8002028 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff fea8 	bl	800204c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff feda 	bl	80020b6 <u8x8_cad_EndTransfer>
      break;
 8002302:	e001      	b.n	8002308 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	0800a158 	.word	0x0800a158
 8002318:	0800a160 	.word	0x0800a160

0800231c <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	72fb      	strb	r3, [r7, #11]
 800232a:	4613      	mov	r3, r2
 800232c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800232e:	7aba      	ldrb	r2, [r7, #10]
 8002330:	7af9      	ldrb	r1, [r7, #11]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ff65 	bl	8002204 <u8x8_d_st7565_common>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d131      	bne.n	80023a4 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	2b0d      	cmp	r3, #13
 8002344:	d013      	beq.n	800236e <u8x8_d_st7565_64128n+0x52>
 8002346:	2b0d      	cmp	r3, #13
 8002348:	dc2a      	bgt.n	80023a0 <u8x8_d_st7565_64128n+0x84>
 800234a:	2b09      	cmp	r3, #9
 800234c:	d002      	beq.n	8002354 <u8x8_d_st7565_64128n+0x38>
 800234e:	2b0a      	cmp	r3, #10
 8002350:	d005      	beq.n	800235e <u8x8_d_st7565_64128n+0x42>
 8002352:	e025      	b.n	80023a0 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8002354:	4916      	ldr	r1, [pc, #88]	@ (80023b0 <u8x8_d_st7565_64128n+0x94>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f832 	bl	80023c0 <u8x8_d_helper_display_setup_memory>
	break;
 800235c:	e022      	b.n	80023a4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f842 	bl	80023e8 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8002364:	4913      	ldr	r1, [pc, #76]	@ (80023b4 <u8x8_d_st7565_64128n+0x98>)
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff feb5 	bl	80020d6 <u8x8_cad_SendSequence>
	break;
 800236c:	e01a      	b.n	80023a4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800236e:	7abb      	ldrb	r3, [r7, #10]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10a      	bne.n	800238a <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002374:	4910      	ldr	r1, [pc, #64]	@ (80023b8 <u8x8_d_st7565_64128n+0x9c>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff fead 	bl	80020d6 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	7c9a      	ldrb	r2, [r3, #18]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002388:	e00c      	b.n	80023a4 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800238a:	490c      	ldr	r1, [pc, #48]	@ (80023bc <u8x8_d_st7565_64128n+0xa0>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fea2 	bl	80020d6 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	7cda      	ldrb	r2, [r3, #19]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 800239e:	e001      	b.n	80023a4 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	0800a198 	.word	0x0800a198
 80023b4:	0800a178 	.word	0x0800a178
 80023b8:	0800a168 	.word	0x0800a168
 80023bc:	0800a170 	.word	0x0800a170

080023c0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	7c9a      	ldrb	r2, [r3, #18]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695c      	ldr	r4, [r3, #20]
 80023f4:	2300      	movs	r3, #0
 80023f6:	2200      	movs	r2, #0
 80023f8:	2128      	movs	r1, #40	@ 0x28
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68dc      	ldr	r4, [r3, #12]
 8002402:	2300      	movs	r3, #0
 8002404:	2200      	movs	r2, #0
 8002406:	2114      	movs	r1, #20
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800240c:	2201      	movs	r2, #1
 800240e:	214b      	movs	r1, #75	@ 0x4b
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f897 	bl	8002544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	2129      	movs	r1, #41	@ 0x29
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f88f 	bl	8002544 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	214b      	movs	r1, #75	@ 0x4b
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f88a 	bl	8002544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	2129      	movs	r1, #41	@ 0x29
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f882 	bl	8002544 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002440:	2201      	movs	r2, #1
 8002442:	214b      	movs	r1, #75	@ 0x4b
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f87d 	bl	8002544 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	795b      	ldrb	r3, [r3, #5]
 8002450:	461a      	mov	r2, r3
 8002452:	2129      	movs	r1, #41	@ 0x29
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f875 	bl	8002544 <u8x8_gpio_call>
}    
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bd90      	pop	{r4, r7, pc}

08002462 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	461a      	mov	r2, r3
 8002470:	4603      	mov	r3, r0
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	460b      	mov	r3, r1
 8002476:	70bb      	strb	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002480:	78bb      	ldrb	r3, [r7, #2]
 8002482:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689c      	ldr	r4, [r3, #8]
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	2201      	movs	r2, #1
 8002496:	210f      	movs	r1, #15
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	47a0      	blx	r4
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}

080024a6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689c      	ldr	r4, [r3, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2200      	movs	r2, #0
 80024b6:	2109      	movs	r1, #9
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	47a0      	blx	r4
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689c      	ldr	r4, [r3, #8]
 80024d0:	2300      	movs	r3, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	210a      	movs	r1, #10
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}

080024e2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80024e2:	b590      	push	{r4, r7, lr}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689c      	ldr	r4, [r3, #8]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	2300      	movs	r3, #0
 80024f6:	210b      	movs	r1, #11
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	47a0      	blx	r4
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689c      	ldr	r4, [r3, #8]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	2300      	movs	r3, #0
 8002518:	210e      	movs	r1, #14
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	47a0      	blx	r4
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bd90      	pop	{r4, r7, pc}

08002526 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689c      	ldr	r4, [r3, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	2110      	movs	r1, #16
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	47a0      	blx	r4
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	4613      	mov	r3, r2
 8002552:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695c      	ldr	r4, [r3, #20]
 8002558:	78ba      	ldrb	r2, [r7, #2]
 800255a:	78f9      	ldrb	r1, [r7, #3]
 800255c:	2300      	movs	r3, #0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	47a0      	blx	r4
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}

0800256a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	72fb      	strb	r3, [r7, #11]
 8002578:	4613      	mov	r3, r2
 800257a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <u8x8_SetupDefaults+0x58>)
 800259e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a10      	ldr	r2, [pc, #64]	@ (80025e4 <u8x8_SetupDefaults+0x58>)
 80025a4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <u8x8_SetupDefaults+0x58>)
 80025aa:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <u8x8_SetupDefaults+0x58>)
 80025b0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	0800256b 	.word	0x0800256b

080025e8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ffc8 	bl	800258c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ff46 	bl	80024a6 <u8x8_SetupMemory>
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af04      	add	r7, sp, #16
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR == PIN_INPUT) ? ALERT_PIN_CELL_01 : 0;
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR       == PIN_INPUT) ? CELL_01_LED_01       : 0;
 8002648:	7bbb      	ldrb	r3, [r7, #14]
 800264a:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? (1U << 0) : 0;
 800265c:	7b7b      	ldrb	r3, [r7, #13]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? (1U << 1) : 0;
 8002666:	7b7b      	ldrb	r3, [r7, #13]
 8002668:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? (1U << 2) : 0;
 800266a:	7b7b      	ldrb	r3, [r7, #13]
 800266c:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? (1U << 3) : 0;
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	b2db      	uxtb	r3, r3
 8002676:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? (1U << 4) : 0;
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? (1U << 5) : 0;
 800267c:	7b7b      	ldrb	r3, [r7, #13]
 800267e:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? (1U << 6) : 0;
 8002680:	7b7b      	ldrb	r3, [r7, #13]
 8002682:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? (1U << 7) : 0;
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	b29b      	uxth	r3, r3
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	b299      	uxth	r1, r3
 8002690:	2364      	movs	r3, #100	@ 0x64
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	f107 030e 	add.w	r3, r7, #14
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2301      	movs	r3, #1
 80026a0:	2206      	movs	r2, #6
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f003 f8b4 	bl	8005810 <HAL_I2C_Mem_Write>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <Expander_InitPinDirections+0x94>
    {
        return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	e012      	b.n	80026dc <Expander_InitPinDirections+0xba>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b299      	uxth	r1, r3
 80026be:	2364      	movs	r3, #100	@ 0x64
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	f107 030d 	add.w	r3, r7, #13
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2301      	movs	r3, #1
 80026ce:	2207      	movs	r2, #7
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f003 f89d 	bl	8005810 <HAL_I2C_Mem_Write>
 80026d6:	4603      	mov	r3, r0
 80026d8:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	70fb      	strb	r3, [r7, #3]
 80026f6:	460b      	mov	r3, r1
 80026f8:	803b      	strh	r3, [r7, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 80026fe:	883b      	ldrh	r3, [r7, #0]
 8002700:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002704:	2b00      	cmp	r3, #0
 8002706:	d142      	bne.n	800278e <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8002708:	2302      	movs	r3, #2
 800270a:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	b29b      	uxth	r3, r3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	b299      	uxth	r1, r3
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2364      	movs	r3, #100	@ 0x64
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2301      	movs	r3, #1
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2301      	movs	r3, #1
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f003 f96b 	bl	8005a04 <HAL_I2C_Mem_Read>
 800272e:	4603      	mov	r3, r0
 8002730:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8002732:	7bbb      	ldrb	r3, [r7, #14]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <Expander_SetPinState+0x58>
            return status;
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	e073      	b.n	8002824 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 800273c:	78bb      	ldrb	r3, [r7, #2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d106      	bne.n	8002750 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8002742:	883b      	ldrh	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	7b3b      	ldrb	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	b2db      	uxtb	r3, r3
 800274c:	733b      	strb	r3, [r7, #12]
 800274e:	e009      	b.n	8002764 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8002750:	883b      	ldrh	r3, [r7, #0]
 8002752:	b25b      	sxtb	r3, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	b25a      	sxtb	r2, r3
 8002758:	7b3b      	ldrb	r3, [r7, #12]
 800275a:	b25b      	sxtb	r3, r3
 800275c:	4013      	ands	r3, r2
 800275e:	b25b      	sxtb	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	b29b      	uxth	r3, r3
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	b299      	uxth	r1, r3
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	b29a      	uxth	r2, r3
 8002770:	2364      	movs	r3, #100	@ 0x64
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f003 f845 	bl	8005810 <HAL_I2C_Mem_Write>
 8002786:	4603      	mov	r3, r0
 8002788:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	e04a      	b.n	8002824 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 800278e:	883b      	ldrh	r3, [r7, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d145      	bne.n	8002822 <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	b29b      	uxth	r3, r3
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	b299      	uxth	r1, r3
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	2364      	movs	r3, #100	@ 0x64
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	2301      	movs	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2301      	movs	r3, #1
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f003 f924 	bl	8005a04 <HAL_I2C_Mem_Read>
 80027bc:	4603      	mov	r3, r0
 80027be:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 80027c0:	7bbb      	ldrb	r3, [r7, #14]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <Expander_SetPinState+0xe6>
            return status;
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	e02c      	b.n	8002824 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 80027ca:	883b      	ldrh	r3, [r7, #0]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 80027d2:	78bb      	ldrb	r3, [r7, #2]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 80027d8:	7b3a      	ldrb	r2, [r7, #12]
 80027da:	7b7b      	ldrb	r3, [r7, #13]
 80027dc:	4313      	orrs	r3, r2
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	733b      	strb	r3, [r7, #12]
 80027e2:	e009      	b.n	80027f8 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 80027e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	b25a      	sxtb	r2, r3
 80027ec:	7b3b      	ldrb	r3, [r7, #12]
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	b299      	uxth	r1, r3
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	b29a      	uxth	r2, r3
 8002804:	2364      	movs	r3, #100	@ 0x64
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2301      	movs	r3, #1
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f002 fffb 	bl	8005810 <HAL_I2C_Mem_Write>
 800281a:	4603      	mov	r3, r0
 800281c:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	e000      	b.n	8002824 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
    }
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <Expander_InitAllDevices+0x50>)
 8002836:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8002838:	2304      	movs	r3, #4
 800283a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e012      	b.n	8002868 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8002842:	f107 0208 	add.w	r2, r7, #8
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fee7 	bl	8002622 <Expander_InitPinDirections>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <Expander_InitAllDevices+0x36>
        {
            return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	e007      	b.n	8002872 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3e8      	bcc.n	8002842 <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	24232221 	.word	0x24232221

08002880 <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	6039      	str	r1, [r7, #0]
 80028a0:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e044      	b.n	8002932 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	4613      	mov	r3, r2
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	220c      	movs	r2, #12
 80028ba:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	4613      	mov	r3, r2
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	2204      	movs	r2, #4
 80028d0:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	4613      	mov	r3, r2
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	461a      	mov	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	2206      	movs	r2, #6
 80028e6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	4613      	mov	r3, r2
 80028ee:	019b      	lsls	r3, r3, #6
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	461a      	mov	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	2204      	movs	r2, #4
 80028fc:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	4613      	mov	r3, r2
 8002904:	019b      	lsls	r3, r3, #6
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	461a      	mov	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	2202      	movs	r2, #2
 8002912:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	4613      	mov	r3, r2
 800291a:	019b      	lsls	r3, r3, #6
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	2203      	movs	r2, #3
 8002928:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	3301      	adds	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3b6      	bcc.n	80028a8 <LTC6811_init_reg_limits+0x12>
    }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f8df 	bl	8002b1c <LTC681x_wrcfg>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	6039      	str	r1, [r7, #0]
 8002970:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f94e 	bl	8002c18 <LTC681x_reset_crc_count>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f9b1 	bl	8002cfc <LTC681x_init_cfg>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b088      	sub	sp, #32
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 80029b0:	2306      	movs	r3, #6
 80029b2:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3304      	adds	r3, #4
 80029bc:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 80029be:	7efb      	ldrb	r3, [r7, #27]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f005 fed5 	bl	8008770 <malloc>
 80029c6:	4603      	mov	r3, r0
 80029c8:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	7852      	ldrb	r2, [r2, #1]
 80029da:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	2002      	movs	r0, #2
 80029e0:	f000 f86a 	bl	8002ab8 <pec15_calc>
 80029e4:	4603      	mov	r3, r0
 80029e6:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80029e8:	8a7b      	ldrh	r3, [r7, #18]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3302      	adds	r3, #2
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3303      	adds	r3, #3
 80029fa:	8a7a      	ldrh	r2, [r7, #18]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8002a00:	2304      	movs	r3, #4
 8002a02:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	77bb      	strb	r3, [r7, #30]
 8002a08:	e042      	b.n	8002a90 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	777b      	strb	r3, [r7, #29]
 8002a0e:	e016      	b.n	8002a3e <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8002a10:	7fbb      	ldrb	r3, [r7, #30]
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	7f7b      	ldrb	r3, [r7, #29]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	441a      	add	r2, r3
 8002a28:	7ffb      	ldrb	r3, [r7, #31]
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	440b      	add	r3, r1
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
 8002a34:	3301      	adds	r3, #1
 8002a36:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002a38:	7f7b      	ldrb	r3, [r7, #29]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	777b      	strb	r3, [r7, #29]
 8002a3e:	7f7a      	ldrb	r2, [r7, #29]
 8002a40:	7f3b      	ldrb	r3, [r7, #28]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d3e4      	bcc.n	8002a10 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 8002a46:	7fbb      	ldrb	r3, [r7, #30]
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	441a      	add	r2, r3
 8002a58:	7f3b      	ldrb	r3, [r7, #28]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f82b 	bl	8002ab8 <pec15_calc>
 8002a62:	4603      	mov	r3, r0
 8002a64:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 8002a66:	8a3b      	ldrh	r3, [r7, #16]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	b299      	uxth	r1, r3
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4413      	add	r3, r2
 8002a72:	b2ca      	uxtb	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	8a3a      	ldrh	r2, [r7, #16]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
 8002a86:	3302      	adds	r3, #2
 8002a88:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002a8a:	7fbb      	ldrb	r3, [r7, #30]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	77bb      	strb	r3, [r7, #30]
 8002a90:	7fbb      	ldrb	r3, [r7, #30]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1b9      	bne.n	8002a0a <write_68+0x68>
    }

    cs_low();
 8002a96:	f000 f967 	bl	8002d68 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 8002a9a:	7efb      	ldrb	r3, [r7, #27]
 8002a9c:	6979      	ldr	r1, [r7, #20]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f98a 	bl	8002db8 <spi_write_array>
    cs_high();
 8002aa4:	f000 f974 	bl	8002d90 <cs_high>

    free(cmd);
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f005 fe69 	bl	8008780 <free>
}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8002ac8:	2300      	movs	r3, #0
 8002aca:	737b      	strb	r3, [r7, #13]
 8002acc:	e017      	b.n	8002afe <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	09db      	lsrs	r3, r3, #7
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	7b7a      	ldrb	r2, [r7, #13]
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	440a      	add	r2, r1
 8002ada:	7812      	ldrb	r2, [r2, #0]
 8002adc:	4053      	eors	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <pec15_calc+0x60>)
 8002aee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4053      	eors	r3, r2
 8002af6:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	3301      	adds	r3, #1
 8002afc:	737b      	strb	r3, [r7, #13]
 8002afe:	7b7a      	ldrb	r2, [r7, #13]
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d3e3      	bcc.n	8002ace <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	b29b      	uxth	r3, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	0800a1b0 	.word	0x0800a1b0

08002b1c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0c4      	sub	sp, #272	@ 0x110
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4602      	mov	r2, r0
 8002b24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b2c:	6019      	str	r1, [r3, #0]
 8002b2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b32:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002b36:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 8002b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b3c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002b52:	e047      	b.n	8002be4 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 8002b54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 8002b66:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002b6a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002b6e:	e00b      	b.n	8002b88 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 8002b70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b74:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002b8e:	e020      	b.n	8002bd2 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002b90:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8002b94:	4613      	mov	r3, r2
 8002b96:	019b      	lsls	r3, r3, #6
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1899      	adds	r1, r3, r2
 8002baa:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002bae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002bb2:	5c89      	ldrb	r1, [r1, r2]
 8002bb4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002bb8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002bbc:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8002bbe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8002bc8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002bd2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d9da      	bls.n	8002b90 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002bda:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002bde:	3301      	adds	r3, #1
 8002be0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002be4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002be8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002bec:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d3ae      	bcc.n	8002b54 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8002bf6:	f107 0208 	add.w	r2, r7, #8
 8002bfa:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002bfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff feca 	bl	80029a2 <write_68>
}
 8002c0e:	bf00      	nop
 8002c10:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	e05d      	b.n	8002ce6 <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	019b      	lsls	r3, r3, #6
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e010      	b.n	8002c7e <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	441a      	add	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3360      	adds	r3, #96	@ 0x60
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	2200      	movs	r2, #0
 8002c76:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	ddeb      	ble.n	8002c5c <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e010      	b.n	8002cac <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	019b      	lsls	r3, r3, #6
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	461a      	mov	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	441a      	add	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3368      	adds	r3, #104	@ 0x68
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	ddeb      	ble.n	8002c8a <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e010      	b.n	8002cda <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	336c      	adds	r3, #108	@ 0x6c
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	ddeb      	ble.n	8002cb8 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	db9d      	blt.n	8002c2a <LTC681x_reset_crc_count+0x12>
        }
    }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e021      	b.n	8002d52 <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73bb      	strb	r3, [r7, #14]
 8002d12:	e00d      	b.n	8002d30 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	4613      	mov	r3, r2
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	441a      	add	r2, r3
 8002d24:	7bbb      	ldrb	r3, [r7, #14]
 8002d26:	2100      	movs	r1, #0
 8002d28:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	73bb      	strb	r3, [r7, #14]
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d9ee      	bls.n	8002d14 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3d9      	bcc.n	8002d0e <LTC681x_init_cfg+0x12>
    }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d72:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <cs_low+0x20>)
 8002d74:	f002 fbbc 	bl	80054f0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d7e:	4803      	ldr	r0, [pc, #12]	@ (8002d8c <cs_low+0x24>)
 8002d80:	f002 fbb6 	bl	80054f0 <HAL_GPIO_WritePin>


}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020c00 	.word	0x40020c00

08002d90 <cs_high>:

void cs_high() {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002d94:	2201      	movs	r2, #1
 8002d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d9a:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <cs_high+0x20>)
 8002d9c:	f002 fba8 	bl	80054f0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002da6:	4803      	ldr	r0, [pc, #12]	@ (8002db4 <cs_high+0x24>)
 8002da8:	f002 fba2 	bl	80054f0 <HAL_GPIO_WritePin>


}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020c00 	.word	0x40020c00

08002db8 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e00f      	b.n	8002dea <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	18d1      	adds	r1, r2, r3
 8002dd0:	2314      	movs	r3, #20
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4809      	ldr	r0, [pc, #36]	@ (8002dfc <spi_write_array+0x44>)
 8002dd6:	f004 f958 	bl	800708a <HAL_SPI_Transmit>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8002de0:	f000 ffe1 	bl	8003da6 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3eb      	bcc.n	8002dca <spi_write_array+0x12>
		}
	}

}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000fe0 	.word	0x20000fe0

08002e00 <MODBUS_Init>:
    {&huart2, USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin},
    {&huart3, USART3_ENABLE_GPIO_Port, USART3_ENABLE_Pin},
    {&huart6, USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin}
};

void MODBUS_Init(MODBUS_Channel channel) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
    if (channel >= MODBUS_CHANNEL_COUNT) return;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d818      	bhi.n	8002e42 <MODBUS_Init+0x42>

    MODBUS_Handle* ch = &modbusChannels[channel];
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <MODBUS_Init+0x4c>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    // Set DE/RE to receive mode
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_RESET);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6858      	ldr	r0, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	891b      	ldrh	r3, [r3, #8]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f002 fb60 	bl	80054f0 <HAL_GPIO_WritePin>

    // Start reception
    HAL_UARTEx_ReceiveToIdle_IT(ch->huart, ch->rxBuffer, MODBUS_BUFFER_SIZE);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	330a      	adds	r3, #10
 8002e38:	2208      	movs	r2, #8
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f004 fc21 	bl	8007682 <HAL_UARTEx_ReceiveToIdle_IT>
 8002e40:	e000      	b.n	8002e44 <MODBUS_Init+0x44>
    if (channel >= MODBUS_CHANNEL_COUNT) return;
 8002e42:	bf00      	nop
}
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000560 	.word	0x20000560

08002e50 <MODBUS_Send>:

void MODBUS_Send(MODBUS_Channel channel, const uint8_t* data, uint16_t size) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80bb      	strh	r3, [r7, #4]
    if (channel >= MODBUS_CHANNEL_COUNT || size == 0) return;
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d836      	bhi.n	8002ed4 <MODBUS_Send+0x84>
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d033      	beq.n	8002ed4 <MODBUS_Send+0x84>

    MODBUS_Handle* ch = &modbusChannels[channel];
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <MODBUS_Send+0x8c>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    // Set DE/RE to transmit mode
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_SET);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6858      	ldr	r0, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	891b      	ldrh	r3, [r3, #8]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4619      	mov	r1, r3
 8002e88:	f002 fb32 	bl	80054f0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f001 fc87 	bl	80047a0 <HAL_Delay>

    // Send data
    HAL_UART_Transmit(ch->huart, (uint8_t*)data, size, 100);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	88ba      	ldrh	r2, [r7, #4]
 8002e98:	2364      	movs	r3, #100	@ 0x64
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	f004 fb66 	bl	800756c <HAL_UART_Transmit>
    while (__HAL_UART_GET_FLAG(ch->huart, UART_FLAG_TC) == RESET);
 8002ea0:	bf00      	nop
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d1f7      	bne.n	8002ea2 <MODBUS_Send+0x52>

    // Return to receive mode
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_RESET);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6858      	ldr	r0, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	891b      	ldrh	r3, [r3, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f002 fb17 	bl	80054f0 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle_IT(ch->huart, ch->rxBuffer, MODBUS_BUFFER_SIZE);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	330a      	adds	r3, #10
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f004 fbd8 	bl	8007682 <HAL_UARTEx_ReceiveToIdle_IT>
 8002ed2:	e000      	b.n	8002ed6 <MODBUS_Send+0x86>
    if (channel >= MODBUS_CHANNEL_COUNT || size == 0) return;
 8002ed4:	bf00      	nop
}
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000560 	.word	0x20000560

08002ee0 <MODBUS_UpdateDisplay>:

void MODBUS_UpdateDisplay(MODBUS_Channel channel, const uint8_t* data, uint16_t size) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b094      	sub	sp, #80	@ 0x50
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80bb      	strh	r3, [r7, #4]
    char buffer[64] = {0};
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	223c      	movs	r2, #60	@ 0x3c
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 fd29 	bl	8008954 <memset>
    char hex[4];
    snprintf(buffer, sizeof(buffer), "CH%d: ", channel + 1);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	3301      	adds	r3, #1
 8002f06:	f107 000c 	add.w	r0, r7, #12
 8002f0a:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <MODBUS_UpdateDisplay+0xb4>)
 8002f0c:	2140      	movs	r1, #64	@ 0x40
 8002f0e:	f005 fced 	bl	80088ec <sniprintf>

    for (uint16_t i = 0; i < size && i < MODBUS_BUFFER_SIZE; i++) {
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f18:	e017      	b.n	8002f4a <MODBUS_UpdateDisplay+0x6a>
        snprintf(hex, sizeof(hex), "%02X ", data[i]);
 8002f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f107 0008 	add.w	r0, r7, #8
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <MODBUS_UpdateDisplay+0xb8>)
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	f005 fcde 	bl	80088ec <sniprintf>
        strcat(buffer, hex);
 8002f30:	f107 0208 	add.w	r2, r7, #8
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f005 fd12 	bl	8008964 <strcat>
    for (uint16_t i = 0; i < size && i < MODBUS_BUFFER_SIZE; i++) {
 8002f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f44:	3301      	adds	r3, #1
 8002f46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d203      	bcs.n	8002f5c <MODBUS_UpdateDisplay+0x7c>
 8002f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	d9de      	bls.n	8002f1a <MODBUS_UpdateDisplay+0x3a>
    }

    u8g2_ClearBuffer(&u8g2);
 8002f5c:	480f      	ldr	r0, [pc, #60]	@ (8002f9c <MODBUS_UpdateDisplay+0xbc>)
 8002f5e:	f7fd fda2 	bl	8000aa6 <u8g2_ClearBuffer>
    u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 8002f62:	490f      	ldr	r1, [pc, #60]	@ (8002fa0 <MODBUS_UpdateDisplay+0xc0>)
 8002f64:	480d      	ldr	r0, [pc, #52]	@ (8002f9c <MODBUS_UpdateDisplay+0xbc>)
 8002f66:	f7fe fc4f 	bl	8001808 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 0, (channel + 1) * 10, buffer);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4806      	ldr	r0, [pc, #24]	@ (8002f9c <MODBUS_UpdateDisplay+0xbc>)
 8002f82:	f7fe fb9f 	bl	80016c4 <u8g2_DrawStr>
    u8g2_SendBuffer(&u8g2);
 8002f86:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <MODBUS_UpdateDisplay+0xbc>)
 8002f88:	f7fd fe00 	bl	8000b8c <u8g2_SendBuffer>
}
 8002f8c:	bf00      	nop
 8002f8e:	3750      	adds	r7, #80	@ 0x50
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	08009194 	.word	0x08009194
 8002f98:	0800919c 	.word	0x0800919c
 8002f9c:	20000cf8 	.word	0x20000cf8
 8002fa0:	080091d0 	.word	0x080091d0

08002fa4 <HAL_UARTEx_RxEventCallback>:
void MODBUS_ProcessData(MODBUS_Channel channel) {
    // Placeholder: Implement user-defined logic here
}

// Callback for receiving data
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < MODBUS_CHANNEL_COUNT; i++) {
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e028      	b.n	8003008 <HAL_UARTEx_RxEventCallback+0x64>
        if (huart == modbusChannels[i].huart) {
 8002fb6:	4918      	ldr	r1, [pc, #96]	@ (8003018 <HAL_UARTEx_RxEventCallback+0x74>)
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d11a      	bne.n	8003002 <HAL_UARTEx_RxEventCallback+0x5e>
            MODBUS_Handle* ch = &modbusChannels[i];
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4a10      	ldr	r2, [pc, #64]	@ (8003018 <HAL_UARTEx_RxEventCallback+0x74>)
 8002fd8:	4413      	add	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
            ch->rxSize = Size;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	825a      	strh	r2, [r3, #18]

            // Optional: Process received data or update display
            MODBUS_UpdateDisplay(i, ch->rxBuffer, Size);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	b2d8      	uxtb	r0, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	330a      	adds	r3, #10
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7ff ff77 	bl	8002ee0 <MODBUS_UpdateDisplay>

            // Restart reception
            HAL_UARTEx_ReceiveToIdle_IT(huart, ch->rxBuffer, MODBUS_BUFFER_SIZE);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	330a      	adds	r3, #10
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f004 fb41 	bl	8007682 <HAL_UARTEx_ReceiveToIdle_IT>
            break;
 8003000:	e006      	b.n	8003010 <HAL_UARTEx_RxEventCallback+0x6c>
    for (int i = 0; i < MODBUS_CHANNEL_COUNT; i++) {
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b03      	cmp	r3, #3
 800300c:	ddd3      	ble.n	8002fb6 <HAL_UARTEx_RxEventCallback+0x12>
        }
    }
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000560 	.word	0x20000560

0800301c <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	9302      	str	r3, [sp, #8]
 8003028:	2301      	movs	r3, #1
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	2200      	movs	r2, #0
 8003034:	21df      	movs	r1, #223	@ 0xdf
 8003036:	4848      	ldr	r0, [pc, #288]	@ (8003158 <RTC_Init+0x13c>)
 8003038:	f002 fce4 	bl	8005a04 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003042:	b2db      	uxtb	r3, r3
 8003044:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	2301      	movs	r3, #1
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2301      	movs	r3, #1
 8003056:	2200      	movs	r2, #0
 8003058:	21df      	movs	r1, #223	@ 0xdf
 800305a:	483f      	ldr	r0, [pc, #252]	@ (8003158 <RTC_Init+0x13c>)
 800305c:	f002 fbd8 	bl	8005810 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8003060:	200a      	movs	r0, #10
 8003062:	f001 fb9d 	bl	80047a0 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	2301      	movs	r3, #1
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2301      	movs	r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	21df      	movs	r1, #223	@ 0xdf
 800307a:	4837      	ldr	r0, [pc, #220]	@ (8003158 <RTC_Init+0x13c>)
 800307c:	f002 fcc2 	bl	8005a04 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f043 0308 	orr.w	r3, r3, #8
 8003086:	b2db      	uxtb	r3, r3
 8003088:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	2301      	movs	r3, #1
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2301      	movs	r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	21df      	movs	r1, #223	@ 0xdf
 800309e:	482e      	ldr	r0, [pc, #184]	@ (8003158 <RTC_Init+0x13c>)
 80030a0:	f002 fbb6 	bl	8005810 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2301      	movs	r3, #1
 80030b4:	2200      	movs	r2, #0
 80030b6:	21df      	movs	r1, #223	@ 0xdf
 80030b8:	4827      	ldr	r0, [pc, #156]	@ (8003158 <RTC_Init+0x13c>)
 80030ba:	f002 fca3 	bl	8005a04 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	2301      	movs	r3, #1
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2301      	movs	r3, #1
 80030d8:	2200      	movs	r2, #0
 80030da:	21df      	movs	r1, #223	@ 0xdf
 80030dc:	481e      	ldr	r0, [pc, #120]	@ (8003158 <RTC_Init+0x13c>)
 80030de:	f002 fb97 	bl	8005810 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	2301      	movs	r3, #1
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2301      	movs	r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	21df      	movs	r1, #223	@ 0xdf
 80030f6:	4818      	ldr	r0, [pc, #96]	@ (8003158 <RTC_Init+0x13c>)
 80030f8:	f002 fc84 	bl	8005a04 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ed      	beq.n	80030e2 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	2301      	movs	r3, #1
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	21df      	movs	r1, #223	@ 0xdf
 800311a:	480f      	ldr	r0, [pc, #60]	@ (8003158 <RTC_Init+0x13c>)
 800311c:	f002 fc72 	bl	8005a04 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f023 0310 	bic.w	r3, r3, #16
 8003130:	b2db      	uxtb	r3, r3
 8003132:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	2301      	movs	r3, #1
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2301      	movs	r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	21df      	movs	r1, #223	@ 0xdf
 8003148:	4803      	ldr	r0, [pc, #12]	@ (8003158 <RTC_Init+0x13c>)
 800314a:	f002 fb61 	bl	8005810 <HAL_I2C_Mem_Write>
    }
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000ddc 	.word	0x20000ddc

0800315c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003162:	f001 faab 	bl	80046bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003166:	f000 f873 	bl	8003250 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800316a:	f000 fb87 	bl	800387c <MX_GPIO_Init>
  MX_SPI1_Init();
 800316e:	f000 fa05 	bl	800357c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003172:	f000 fa39 	bl	80035e8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8003176:	f000 f981 	bl	800347c <MX_I2C2_Init>
  MX_I2C3_Init();
 800317a:	f000 f9bf 	bl	80034fc <MX_I2C3_Init>
  MX_SPI3_Init();
 800317e:	f000 fa69 	bl	8003654 <MX_SPI3_Init>
  MX_SPI4_Init();
 8003182:	f000 fa9d 	bl	80036c0 <MX_SPI4_Init>
  MX_CAN1_Init();
 8003186:	f000 f8cf 	bl	8003328 <MX_CAN1_Init>
  MX_CAN2_Init();
 800318a:	f000 f903 	bl	8003394 <MX_CAN2_Init>
  MX_I2C1_Init();
 800318e:	f000 f935 	bl	80033fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003192:	f000 facb 	bl	800372c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003196:	f000 faf3 	bl	8003780 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800319a:	f000 fb1b 	bl	80037d4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800319e:	f000 fb43 	bl	8003828 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80031a2:	f005 fa1f 	bl	80085e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  RTC_Init();
 80031a6:	f7ff ff39 	bl	800301c <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 80031aa:	f7fd f9e9 	bl	8000580 <LED_Init>
  MODBUS_Init(MODBUS_PC);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7ff fe26 	bl	8002e00 <MODBUS_Init>
  MODBUS_Init(MODBUS_DC);
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7ff fe23 	bl	8002e00 <MODBUS_Init>
  MODBUS_Init(MODBUS_CH3);
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7ff fe20 	bl	8002e00 <MODBUS_Init>
  MODBUS_Init(MODBUS_CH4);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f7ff fe1d 	bl	8002e00 <MODBUS_Init>
//  for (int i = 0; i < NUM_INA229; i++)
//  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
//


  mcu_spiInit(0);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff fb5a 	bl	8002880 <mcu_spiInit>
  HAL_Delay(10);
 80031cc:	200a      	movs	r0, #10
 80031ce:	f001 fae7 	bl	80047a0 <HAL_Delay>
  HAL_Delay(10);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f001 fae4 	bl	80047a0 <HAL_Delay>

//

  HAL_Delay(10);
 80031d8:	200a      	movs	r0, #10
 80031da:	f001 fae1 	bl	80047a0 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80031de:	4918      	ldr	r1, [pc, #96]	@ (8003240 <main+0xe4>)
 80031e0:	2002      	movs	r0, #2
 80031e2:	f7ff fbcf 	bl	8002984 <LTC6811_init_cfg>
	uint8_t main_current_ic;
//	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
//		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
//				DCCBITS_A, DCTOBITS, UV, OV);
//	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 80031e6:	4916      	ldr	r1, [pc, #88]	@ (8003240 <main+0xe4>)
 80031e8:	2002      	movs	r0, #2
 80031ea:	f7ff fbad 	bl	8002948 <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 80031ee:	4914      	ldr	r1, [pc, #80]	@ (8003240 <main+0xe4>)
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7ff fbb8 	bl	8002966 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 80031f6:	4912      	ldr	r1, [pc, #72]	@ (8003240 <main+0xe4>)
 80031f8:	2002      	movs	r0, #2
 80031fa:	f7ff fb4c 	bl	8002896 <LTC6811_init_reg_limits>

//	HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
//	HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buffer, RS485_BUFFER_SIZE);

  /* Initialize the display module */
  Display_Init();
 80031fe:	f7fd fb21 	bl	8000844 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8003202:	f7fd fb47 	bl	8000894 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8003206:	480f      	ldr	r0, [pc, #60]	@ (8003244 <main+0xe8>)
 8003208:	f7ff fb10 	bl	800282c <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 800320c:	480e      	ldr	r0, [pc, #56]	@ (8003248 <main+0xec>)
 800320e:	f7ff fb0d 	bl	800282c <Expander_InitAllDevices>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint8_t command[] = {0x10, 0x20, 0x30};
 8003212:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <main+0xf0>)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	4611      	mov	r1, r2
 800321a:	8019      	strh	r1, [r3, #0]
 800321c:	3302      	adds	r3, #2
 800321e:	0c12      	lsrs	r2, r2, #16
 8003220:	701a      	strb	r2, [r3, #0]
      MODBUS_Send(MODBUS_PC, command, sizeof(command));
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2203      	movs	r2, #3
 8003226:	4619      	mov	r1, r3
 8003228:	2000      	movs	r0, #0
 800322a:	f7ff fe11 	bl	8002e50 <MODBUS_Send>
//	  char dateStr[16];
////	  sprintf(timeStr, "%02d:%02d:%02d", time.hour, time.minute, time.second);
//	  sprintf(dateStr, "%02d/%02d/%02d", time.day, time.month, time.year);
//	  display_lcd(timeStr);
////	  LED_Set(7, 0);
	  LED_Toggle(1);
 800322e:	2001      	movs	r0, #1
 8003230:	f7fd fa1e 	bl	8000670 <LED_Toggle>
	  HAL_Delay(500);
 8003234:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003238:	f001 fab2 	bl	80047a0 <HAL_Delay>
  {
 800323c:	bf00      	nop
 800323e:	e7e8      	b.n	8003212 <main+0xb6>
 8003240:	20000af0 	.word	0x20000af0
 8003244:	20000e30 	.word	0x20000e30
 8003248:	20000e84 	.word	0x20000e84
 800324c:	080091a4 	.word	0x080091a4

08003250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b094      	sub	sp, #80	@ 0x50
 8003254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003256:	f107 0320 	add.w	r3, r7, #32
 800325a:	2230      	movs	r2, #48	@ 0x30
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fb78 	bl	8008954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	4b29      	ldr	r3, [pc, #164]	@ (8003320 <SystemClock_Config+0xd0>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	4a28      	ldr	r2, [pc, #160]	@ (8003320 <SystemClock_Config+0xd0>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	@ 0x40
 8003284:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <SystemClock_Config+0xd0>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003290:	2300      	movs	r3, #0
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <SystemClock_Config+0xd4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800329c:	4a21      	ldr	r2, [pc, #132]	@ (8003324 <SystemClock_Config+0xd4>)
 800329e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <SystemClock_Config+0xd4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032b0:	2302      	movs	r3, #2
 80032b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032b4:	2301      	movs	r3, #1
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032b8:	2310      	movs	r3, #16
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032bc:	2302      	movs	r3, #2
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80032c4:	230f      	movs	r3, #15
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80032c8:	2390      	movs	r3, #144	@ 0x90
 80032ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032cc:	2302      	movs	r3, #2
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80032d0:	2305      	movs	r3, #5
 80032d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d4:	f107 0320 	add.w	r3, r7, #32
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 f9f5 	bl	80066c8 <HAL_RCC_OscConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80032e4:	f000 fd5f 	bl	8003da6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032e8:	230f      	movs	r3, #15
 80032ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ec:	2302      	movs	r3, #2
 80032ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	2102      	movs	r1, #2
 8003306:	4618      	mov	r0, r3
 8003308:	f003 fc56 	bl	8006bb8 <HAL_RCC_ClockConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003312:	f000 fd48 	bl	8003da6 <Error_Handler>
  }
}
 8003316:	bf00      	nop
 8003318:	3750      	adds	r7, #80	@ 0x50
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000

08003328 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <MX_CAN1_Init+0x64>)
 800332e:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <MX_CAN1_Init+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8003332:	4b16      	ldr	r3, [pc, #88]	@ (800338c <MX_CAN1_Init+0x64>)
 8003334:	220a      	movs	r2, #10
 8003336:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <MX_CAN1_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800333e:	4b13      	ldr	r3, [pc, #76]	@ (800338c <MX_CAN1_Init+0x64>)
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <MX_CAN1_Init+0x64>)
 8003346:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800334a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <MX_CAN1_Init+0x64>)
 800334e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8003352:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <MX_CAN1_Init+0x64>)
 8003356:	2200      	movs	r2, #0
 8003358:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <MX_CAN1_Init+0x64>)
 800335c:	2200      	movs	r2, #0
 800335e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <MX_CAN1_Init+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003366:	4b09      	ldr	r3, [pc, #36]	@ (800338c <MX_CAN1_Init+0x64>)
 8003368:	2200      	movs	r2, #0
 800336a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800336c:	4b07      	ldr	r3, [pc, #28]	@ (800338c <MX_CAN1_Init+0x64>)
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <MX_CAN1_Init+0x64>)
 8003374:	2200      	movs	r2, #0
 8003376:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003378:	4804      	ldr	r0, [pc, #16]	@ (800338c <MX_CAN1_Init+0x64>)
 800337a:	f001 fa35 	bl	80047e8 <HAL_CAN_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003384:	f000 fd0f 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000d8c 	.word	0x20000d8c
 8003390:	40006400 	.word	0x40006400

08003394 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003398:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <MX_CAN2_Init+0x60>)
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <MX_CAN2_Init+0x64>)
 800339c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033a0:	2210      	movs	r2, #16
 80033a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80033a4:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80033b0:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80033b6:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033be:	2200      	movs	r2, #0
 80033c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80033ce:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80033d4:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033dc:	2200      	movs	r2, #0
 80033de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80033e0:	4804      	ldr	r0, [pc, #16]	@ (80033f4 <MX_CAN2_Init+0x60>)
 80033e2:	f001 fa01 	bl	80047e8 <HAL_CAN_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80033ec:	f000 fcdb 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000db4 	.word	0x20000db4
 80033f8:	40006800 	.word	0x40006800

080033fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003402:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <MX_I2C1_Init+0x78>)
 8003404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003408:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <MX_I2C1_Init+0x7c>)
 800340a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800340c:	4b18      	ldr	r3, [pc, #96]	@ (8003470 <MX_I2C1_Init+0x74>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003412:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003414:	2200      	movs	r2, #0
 8003416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <MX_I2C1_Init+0x74>)
 800341a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800341e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <MX_I2C1_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003432:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <MX_I2C1_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003438:	480d      	ldr	r0, [pc, #52]	@ (8003470 <MX_I2C1_Init+0x74>)
 800343a:	f002 f8a5 	bl	8005588 <HAL_I2C_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003444:	f000 fcaf 	bl	8003da6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003448:	2100      	movs	r1, #0
 800344a:	4809      	ldr	r0, [pc, #36]	@ (8003470 <MX_I2C1_Init+0x74>)
 800344c:	f003 f8c0 	bl	80065d0 <HAL_I2CEx_ConfigAnalogFilter>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003456:	f000 fca6 	bl	8003da6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800345a:	2100      	movs	r1, #0
 800345c:	4804      	ldr	r0, [pc, #16]	@ (8003470 <MX_I2C1_Init+0x74>)
 800345e:	f003 f8f3 	bl	8006648 <HAL_I2CEx_ConfigDigitalFilter>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003468:	f000 fc9d 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000ddc 	.word	0x20000ddc
 8003474:	40005400 	.word	0x40005400
 8003478:	000186a0 	.word	0x000186a0

0800347c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003480:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <MX_I2C2_Init+0x74>)
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <MX_I2C2_Init+0x78>)
 8003484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003486:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <MX_I2C2_Init+0x74>)
 8003488:	4a1b      	ldr	r2, [pc, #108]	@ (80034f8 <MX_I2C2_Init+0x7c>)
 800348a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800348c:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <MX_I2C2_Init+0x74>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003492:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <MX_I2C2_Init+0x74>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003498:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <MX_I2C2_Init+0x74>)
 800349a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800349e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80034a6:	4b12      	ldr	r3, [pc, #72]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ac:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b2:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034b8:	480d      	ldr	r0, [pc, #52]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034ba:	f002 f865 	bl	8005588 <HAL_I2C_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80034c4:	f000 fc6f 	bl	8003da6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034c8:	2100      	movs	r1, #0
 80034ca:	4809      	ldr	r0, [pc, #36]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034cc:	f003 f880 	bl	80065d0 <HAL_I2CEx_ConfigAnalogFilter>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80034d6:	f000 fc66 	bl	8003da6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80034da:	2100      	movs	r1, #0
 80034dc:	4804      	ldr	r0, [pc, #16]	@ (80034f0 <MX_I2C2_Init+0x74>)
 80034de:	f003 f8b3 	bl	8006648 <HAL_I2CEx_ConfigDigitalFilter>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80034e8:	f000 fc5d 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000e30 	.word	0x20000e30
 80034f4:	40005800 	.word	0x40005800
 80034f8:	00061a80 	.word	0x00061a80

080034fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003502:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <MX_I2C3_Init+0x78>)
 8003504:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003508:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <MX_I2C3_Init+0x7c>)
 800350a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <MX_I2C3_Init+0x74>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003512:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003518:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <MX_I2C3_Init+0x74>)
 800351a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800351e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003520:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003522:	2200      	movs	r2, #0
 8003524:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800352c:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <MX_I2C3_Init+0x74>)
 800352e:	2200      	movs	r2, #0
 8003530:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <MX_I2C3_Init+0x74>)
 8003534:	2200      	movs	r2, #0
 8003536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003538:	480d      	ldr	r0, [pc, #52]	@ (8003570 <MX_I2C3_Init+0x74>)
 800353a:	f002 f825 	bl	8005588 <HAL_I2C_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003544:	f000 fc2f 	bl	8003da6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003548:	2100      	movs	r1, #0
 800354a:	4809      	ldr	r0, [pc, #36]	@ (8003570 <MX_I2C3_Init+0x74>)
 800354c:	f003 f840 	bl	80065d0 <HAL_I2CEx_ConfigAnalogFilter>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003556:	f000 fc26 	bl	8003da6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800355a:	2100      	movs	r1, #0
 800355c:	4804      	ldr	r0, [pc, #16]	@ (8003570 <MX_I2C3_Init+0x74>)
 800355e:	f003 f873 	bl	8006648 <HAL_I2CEx_ConfigDigitalFilter>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003568:	f000 fc1d 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000e84 	.word	0x20000e84
 8003574:	40005c00 	.word	0x40005c00
 8003578:	00061a80 	.word	0x00061a80

0800357c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003580:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <MX_SPI1_Init+0x64>)
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <MX_SPI1_Init+0x68>)
 8003584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <MX_SPI1_Init+0x64>)
 8003588:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800358c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800358e:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <MX_SPI1_Init+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003594:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <MX_SPI1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <MX_SPI1_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035b0:	2228      	movs	r2, #40	@ 0x28
 80035b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035bc:	2200      	movs	r2, #0
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c0:	4b07      	ldr	r3, [pc, #28]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035c8:	220a      	movs	r2, #10
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035cc:	4804      	ldr	r0, [pc, #16]	@ (80035e0 <MX_SPI1_Init+0x64>)
 80035ce:	f003 fcd3 	bl	8006f78 <HAL_SPI_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035d8:	f000 fbe5 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000ed8 	.word	0x20000ed8
 80035e4:	40013000 	.word	0x40013000

080035e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035ec:	4b17      	ldr	r3, [pc, #92]	@ (800364c <MX_SPI2_Init+0x64>)
 80035ee:	4a18      	ldr	r2, [pc, #96]	@ (8003650 <MX_SPI2_Init+0x68>)
 80035f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035f2:	4b16      	ldr	r3, [pc, #88]	@ (800364c <MX_SPI2_Init+0x64>)
 80035f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <MX_SPI2_Init+0x64>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <MX_SPI2_Init+0x64>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <MX_SPI2_Init+0x64>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800360c:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <MX_SPI2_Init+0x64>)
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003612:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <MX_SPI2_Init+0x64>)
 8003614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003618:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <MX_SPI2_Init+0x64>)
 800361c:	2218      	movs	r2, #24
 800361e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <MX_SPI2_Init+0x64>)
 8003622:	2200      	movs	r2, #0
 8003624:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <MX_SPI2_Init+0x64>)
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <MX_SPI2_Init+0x64>)
 800362e:	2200      	movs	r2, #0
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <MX_SPI2_Init+0x64>)
 8003634:	220a      	movs	r2, #10
 8003636:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003638:	4804      	ldr	r0, [pc, #16]	@ (800364c <MX_SPI2_Init+0x64>)
 800363a:	f003 fc9d 	bl	8006f78 <HAL_SPI_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003644:	f000 fbaf 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000f30 	.word	0x20000f30
 8003650:	40003800 	.word	0x40003800

08003654 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003658:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <MX_SPI3_Init+0x64>)
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <MX_SPI3_Init+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800365e:	4b16      	ldr	r3, [pc, #88]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003664:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <MX_SPI3_Init+0x64>)
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003672:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003678:	4b0f      	ldr	r3, [pc, #60]	@ (80036b8 <MX_SPI3_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800367e:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003684:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003686:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003688:	2220      	movs	r2, #32
 800368a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <MX_SPI3_Init+0x64>)
 800368e:	2200      	movs	r2, #0
 8003690:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003692:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <MX_SPI3_Init+0x64>)
 8003694:	2200      	movs	r2, #0
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <MX_SPI3_Init+0x64>)
 800369a:	2200      	movs	r2, #0
 800369c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <MX_SPI3_Init+0x64>)
 80036a0:	220a      	movs	r2, #10
 80036a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036a4:	4804      	ldr	r0, [pc, #16]	@ (80036b8 <MX_SPI3_Init+0x64>)
 80036a6:	f003 fc67 	bl	8006f78 <HAL_SPI_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80036b0:	f000 fb79 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000f88 	.word	0x20000f88
 80036bc:	40003c00 	.word	0x40003c00

080036c0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <MX_SPI4_Init+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036d0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036de:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036f4:	2230      	movs	r2, #48	@ 0x30
 80036f6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <MX_SPI4_Init+0x64>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80036fe:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <MX_SPI4_Init+0x64>)
 8003700:	2200      	movs	r2, #0
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <MX_SPI4_Init+0x64>)
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <MX_SPI4_Init+0x64>)
 800370c:	220a      	movs	r2, #10
 800370e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003710:	4804      	ldr	r0, [pc, #16]	@ (8003724 <MX_SPI4_Init+0x64>)
 8003712:	f003 fc31 	bl	8006f78 <HAL_SPI_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800371c:	f000 fb43 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000fe0 	.word	0x20000fe0
 8003728:	40013400 	.word	0x40013400

0800372c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003732:	4a12      	ldr	r2, [pc, #72]	@ (800377c <MX_USART1_UART_Init+0x50>)
 8003734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800373c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003752:	220c      	movs	r2, #12
 8003754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003756:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003762:	4805      	ldr	r0, [pc, #20]	@ (8003778 <MX_USART1_UART_Init+0x4c>)
 8003764:	f003 feb2 	bl	80074cc <HAL_UART_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800376e:	f000 fb1a 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20001038 	.word	0x20001038
 800377c:	40011000 	.word	0x40011000

08003780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003784:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 8003786:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <MX_USART2_UART_Init+0x50>)
 8003788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 800378c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003792:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 800379a:	2200      	movs	r2, #0
 800379c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037a4:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037a6:	220c      	movs	r2, #12
 80037a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037aa:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037b6:	4805      	ldr	r0, [pc, #20]	@ (80037cc <MX_USART2_UART_Init+0x4c>)
 80037b8:	f003 fe88 	bl	80074cc <HAL_UART_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037c2:	f000 faf0 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20001080 	.word	0x20001080
 80037d0:	40004400 	.word	0x40004400

080037d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <MX_USART3_UART_Init+0x50>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800380a:	4805      	ldr	r0, [pc, #20]	@ (8003820 <MX_USART3_UART_Init+0x4c>)
 800380c:	f003 fe5e 	bl	80074cc <HAL_UART_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003816:	f000 fac6 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200010c8 	.word	0x200010c8
 8003824:	40004800 	.word	0x40004800

08003828 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <MX_USART6_UART_Init+0x50>)
 8003830:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003832:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 8003834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003838:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003846:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 800384e:	220c      	movs	r2, #12
 8003850:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003858:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800385e:	4805      	ldr	r0, [pc, #20]	@ (8003874 <MX_USART6_UART_Init+0x4c>)
 8003860:	f003 fe34 	bl	80074cc <HAL_UART_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800386a:	f000 fa9c 	bl	8003da6 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20001110 	.word	0x20001110
 8003878:	40011400 	.word	0x40011400

0800387c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	@ 0x38
 8003880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	4bb6      	ldr	r3, [pc, #728]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4ab5      	ldr	r2, [pc, #724]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 800389c:	f043 0310 	orr.w	r3, r3, #16
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4bb3      	ldr	r3, [pc, #716]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	4baf      	ldr	r3, [pc, #700]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	4aae      	ldr	r2, [pc, #696]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038be:	4bac      	ldr	r3, [pc, #688]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	4aa7      	ldr	r2, [pc, #668]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038da:	4ba5      	ldr	r3, [pc, #660]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	4ba1      	ldr	r3, [pc, #644]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	4aa0      	ldr	r2, [pc, #640]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038f0:	f043 0320 	orr.w	r3, r3, #32
 80038f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	4b9a      	ldr	r3, [pc, #616]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a99      	ldr	r2, [pc, #612]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 800390c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b97      	ldr	r3, [pc, #604]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b93      	ldr	r3, [pc, #588]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	4a92      	ldr	r2, [pc, #584]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	@ 0x30
 800392e:	4b90      	ldr	r3, [pc, #576]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b8c      	ldr	r3, [pc, #560]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	4a8b      	ldr	r2, [pc, #556]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	@ 0x30
 800394a:	4b89      	ldr	r3, [pc, #548]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	4b85      	ldr	r3, [pc, #532]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a84      	ldr	r2, [pc, #528]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b82      	ldr	r3, [pc, #520]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4b7e      	ldr	r3, [pc, #504]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b7b      	ldr	r3, [pc, #492]	@ (8003b70 <MX_GPIO_Init+0x2f4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800398e:	2201      	movs	r2, #1
 8003990:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8003994:	4877      	ldr	r0, [pc, #476]	@ (8003b74 <MX_GPIO_Init+0x2f8>)
 8003996:	f001 fdab 	bl	80054f0 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80039a0:	4875      	ldr	r0, [pc, #468]	@ (8003b78 <MX_GPIO_Init+0x2fc>)
 80039a2:	f001 fda5 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 80039a6:	2201      	movs	r2, #1
 80039a8:	f242 0133 	movw	r1, #8243	@ 0x2033
 80039ac:	4873      	ldr	r0, [pc, #460]	@ (8003b7c <MX_GPIO_Init+0x300>)
 80039ae:	f001 fd9f 	bl	80054f0 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80039b8:	486f      	ldr	r0, [pc, #444]	@ (8003b78 <MX_GPIO_Init+0x2fc>)
 80039ba:	f001 fd99 	bl	80054f0 <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 80039be:	2201      	movs	r2, #1
 80039c0:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 80039c4:	486e      	ldr	r0, [pc, #440]	@ (8003b80 <MX_GPIO_Init+0x304>)
 80039c6:	f001 fd93 	bl	80054f0 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 80039ca:	2200      	movs	r2, #0
 80039cc:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 80039d0:	486b      	ldr	r0, [pc, #428]	@ (8003b80 <MX_GPIO_Init+0x304>)
 80039d2:	f001 fd8d 	bl	80054f0 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80039d6:	2201      	movs	r2, #1
 80039d8:	2101      	movs	r1, #1
 80039da:	486a      	ldr	r0, [pc, #424]	@ (8003b84 <MX_GPIO_Init+0x308>)
 80039dc:	f001 fd88 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2102      	movs	r1, #2
 80039e4:	4867      	ldr	r0, [pc, #412]	@ (8003b84 <MX_GPIO_Init+0x308>)
 80039e6:	f001 fd83 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80039f0:	4865      	ldr	r0, [pc, #404]	@ (8003b88 <MX_GPIO_Init+0x30c>)
 80039f2:	f001 fd7d 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80039f6:	2201      	movs	r2, #1
 80039f8:	f648 0103 	movw	r1, #34819	@ 0x8803
 80039fc:	4863      	ldr	r0, [pc, #396]	@ (8003b8c <MX_GPIO_Init+0x310>)
 80039fe:	f001 fd77 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 8003a02:	2201      	movs	r2, #1
 8003a04:	2103      	movs	r1, #3
 8003a06:	4862      	ldr	r0, [pc, #392]	@ (8003b90 <MX_GPIO_Init+0x314>)
 8003a08:	f001 fd72 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f648 0103 	movw	r1, #34819	@ 0x8803
 8003a12:	4858      	ldr	r0, [pc, #352]	@ (8003b74 <MX_GPIO_Init+0x2f8>)
 8003a14:	f001 fd6c 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f244 4138 	movw	r1, #17464	@ 0x4438
 8003a1e:	485b      	ldr	r0, [pc, #364]	@ (8003b8c <MX_GPIO_Init+0x310>)
 8003a20:	f001 fd66 	bl	80054f0 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003a2a:	4857      	ldr	r0, [pc, #348]	@ (8003b88 <MX_GPIO_Init+0x30c>)
 8003a2c:	f001 fd60 	bl	80054f0 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003a30:	2201      	movs	r2, #1
 8003a32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a36:	4857      	ldr	r0, [pc, #348]	@ (8003b94 <MX_GPIO_Init+0x318>)
 8003a38:	f001 fd5a 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f640 010c 	movw	r1, #2060	@ 0x80c
 8003a42:	4854      	ldr	r0, [pc, #336]	@ (8003b94 <MX_GPIO_Init+0x318>)
 8003a44:	f001 fd54 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8003a4e:	4850      	ldr	r0, [pc, #320]	@ (8003b90 <MX_GPIO_Init+0x314>)
 8003a50:	f001 fd4e 	bl	80054f0 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a5a:	4848      	ldr	r0, [pc, #288]	@ (8003b7c <MX_GPIO_Init+0x300>)
 8003a5c:	f001 fd48 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003a60:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a66:	2301      	movs	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a76:	4619      	mov	r1, r3
 8003a78:	483e      	ldr	r0, [pc, #248]	@ (8003b74 <MX_GPIO_Init+0x2f8>)
 8003a7a:	f001 fb8d 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8003a7e:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	4838      	ldr	r0, [pc, #224]	@ (8003b78 <MX_GPIO_Init+0x2fc>)
 8003a98:	f001 fb7e 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin;
 8003a9c:	f242 0330 	movw	r3, #8240	@ 0x2030
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4831      	ldr	r0, [pc, #196]	@ (8003b7c <MX_GPIO_Init+0x300>)
 8003ab6:	f001 fb6f 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8003aba:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	482b      	ldr	r0, [pc, #172]	@ (8003b80 <MX_GPIO_Init+0x304>)
 8003ad4:	f001 fb60 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8003ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aec:	4619      	mov	r1, r3
 8003aee:	4824      	ldr	r0, [pc, #144]	@ (8003b80 <MX_GPIO_Init+0x304>)
 8003af0:	f001 fb52 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8003af4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b02:	2303      	movs	r3, #3
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	481c      	ldr	r0, [pc, #112]	@ (8003b80 <MX_GPIO_Init+0x304>)
 8003b0e:	f001 fb43 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8003b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b20:	2303      	movs	r3, #3
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8003b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4815      	ldr	r0, [pc, #84]	@ (8003b80 <MX_GPIO_Init+0x304>)
 8003b2c:	f001 fb34 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b34:	2301      	movs	r3, #1
 8003b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8003b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b44:	4619      	mov	r1, r3
 8003b46:	480d      	ldr	r0, [pc, #52]	@ (8003b7c <MX_GPIO_Init+0x300>)
 8003b48:	f001 fb26 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b50:	2301      	movs	r3, #1
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8003b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b60:	4619      	mov	r1, r3
 8003b62:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <MX_GPIO_Init+0x300>)
 8003b64:	f001 fb18 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e013      	b.n	8003b98 <MX_GPIO_Init+0x31c>
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	40021400 	.word	0x40021400
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40021c00 	.word	0x40021c00
 8003b8c:	40020400 	.word	0x40020400
 8003b90:	40021800 	.word	0x40021800
 8003b94:	40020c00 	.word	0x40020c00
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4872      	ldr	r0, [pc, #456]	@ (8003d74 <MX_GPIO_Init+0x4f8>)
 8003baa:	f001 faf5 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	486b      	ldr	r0, [pc, #428]	@ (8003d74 <MX_GPIO_Init+0x4f8>)
 8003bc6:	f001 fae7 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8003bca:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	4865      	ldr	r0, [pc, #404]	@ (8003d78 <MX_GPIO_Init+0x4fc>)
 8003be4:	f001 fad8 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8003be8:	f24c 431b 	movw	r3, #50203	@ 0xc41b
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bfe:	4619      	mov	r1, r3
 8003c00:	485e      	ldr	r0, [pc, #376]	@ (8003d7c <MX_GPIO_Init+0x500>)
 8003c02:	f001 fac9 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8003c06:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4858      	ldr	r0, [pc, #352]	@ (8003d80 <MX_GPIO_Init+0x504>)
 8003c20:	f001 faba 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8003c24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8003c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	484f      	ldr	r0, [pc, #316]	@ (8003d7c <MX_GPIO_Init+0x500>)
 8003c3e:	f001 faab 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8003c42:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c50:	2303      	movs	r3, #3
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4847      	ldr	r0, [pc, #284]	@ (8003d78 <MX_GPIO_Init+0x4fc>)
 8003c5c:	f001 fa9c 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8003c60:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c66:	2301      	movs	r3, #1
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c76:	4619      	mov	r1, r3
 8003c78:	483f      	ldr	r0, [pc, #252]	@ (8003d78 <MX_GPIO_Init+0x4fc>)
 8003c7a:	f001 fa8d 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8003c7e:	f240 430c 	movw	r3, #1036	@ 0x40c
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c84:	2301      	movs	r3, #1
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c94:	4619      	mov	r1, r3
 8003c96:	483b      	ldr	r0, [pc, #236]	@ (8003d84 <MX_GPIO_Init+0x508>)
 8003c98:	f001 fa7e 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART3_ENABLE_Pin;
 8003c9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003caa:	2302      	movs	r3, #2
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART3_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4833      	ldr	r0, [pc, #204]	@ (8003d84 <MX_GPIO_Init+0x508>)
 8003cb6:	f001 fa6f 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8003cba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	482c      	ldr	r0, [pc, #176]	@ (8003d84 <MX_GPIO_Init+0x508>)
 8003cd2:	f001 fa61 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART6_ENABLE_Pin;
 8003cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART6_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cec:	4619      	mov	r1, r3
 8003cee:	4826      	ldr	r0, [pc, #152]	@ (8003d88 <MX_GPIO_Init+0x50c>)
 8003cf0:	f001 fa52 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8003cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8003d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	481b      	ldr	r0, [pc, #108]	@ (8003d78 <MX_GPIO_Init+0x4fc>)
 8003d0a:	f001 fa45 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8003d0e:	23f0      	movs	r3, #240	@ 0xf0
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4818      	ldr	r0, [pc, #96]	@ (8003d84 <MX_GPIO_Init+0x508>)
 8003d22:	f001 fa39 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8003d26:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4811      	ldr	r0, [pc, #68]	@ (8003d80 <MX_GPIO_Init+0x504>)
 8003d3c:	f001 fa2c 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART1_ENABLE_Pin;
 8003d40:	2320      	movs	r3, #32
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d44:	2301      	movs	r3, #1
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART1_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d54:	4619      	mov	r1, r3
 8003d56:	4809      	ldr	r0, [pc, #36]	@ (8003d7c <MX_GPIO_Init+0x500>)
 8003d58:	f001 fa1e 	bl	8005198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2100      	movs	r1, #0
 8003d60:	2028      	movs	r0, #40	@ 0x28
 8003d62:	f001 f950 	bl	8005006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d66:	2028      	movs	r0, #40	@ 0x28
 8003d68:	f001 f969 	bl	800503e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d6c:	bf00      	nop
 8003d6e:	3738      	adds	r7, #56	@ 0x38
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40021c00 	.word	0x40021c00
 8003d7c:	40020400 	.word	0x40020400
 8003d80:	40021800 	.word	0x40021800
 8003d84:	40020c00 	.word	0x40020c00
 8003d88:	40020800 	.word	0x40020800

08003d8c <HAL_GPIO_EXTI_Callback>:
                        cell->led_pin,
                        LOW);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fc87 	bl	80006ac <Push_ButtonHandler>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003daa:	b672      	cpsid	i
}
 8003dac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <Error_Handler+0x8>
	...

08003db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	4a08      	ldr	r2, [pc, #32]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_MspInit+0x4c>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	@ 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4a      	ldr	r2, [pc, #296]	@ (8003f4c <HAL_CAN_MspInit+0x148>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d145      	bne.n	8003eb2 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003e26:	4b4a      	ldr	r3, [pc, #296]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a48      	ldr	r2, [pc, #288]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003e2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003e30:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10d      	bne.n	8003e54 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	4b45      	ldr	r3, [pc, #276]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4a44      	ldr	r2, [pc, #272]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e48:	4b42      	ldr	r3, [pc, #264]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e5e:	f043 0308 	orr.w	r3, r3, #8
 8003e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e64:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e70:	2303      	movs	r3, #3
 8003e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003e80:	2309      	movs	r3, #9
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4833      	ldr	r0, [pc, #204]	@ (8003f58 <HAL_CAN_MspInit+0x154>)
 8003e8c:	f001 f984 	bl	8005198 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	2014      	movs	r0, #20
 8003e96:	f001 f8b6 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003e9a:	2014      	movs	r0, #20
 8003e9c:	f001 f8cf 	bl	800503e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2015      	movs	r0, #21
 8003ea6:	f001 f8ae 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003eaa:	2015      	movs	r0, #21
 8003eac:	f001 f8c7 	bl	800503e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003eb0:	e048      	b.n	8003f44 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <HAL_CAN_MspInit+0x158>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d143      	bne.n	8003f44 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	4b24      	ldr	r3, [pc, #144]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a23      	ldr	r2, [pc, #140]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003ec6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ecc:	4b21      	ldr	r3, [pc, #132]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003ee0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_CAN_MspInit+0x14c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efa:	4b16      	ldr	r3, [pc, #88]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f16:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <HAL_CAN_MspInit+0x150>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003f22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003f34:	2309      	movs	r3, #9
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4808      	ldr	r0, [pc, #32]	@ (8003f60 <HAL_CAN_MspInit+0x15c>)
 8003f40:	f001 f92a 	bl	8005198 <HAL_GPIO_Init>
}
 8003f44:	bf00      	nop
 8003f46:	3730      	adds	r7, #48	@ 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40006400 	.word	0x40006400
 8003f50:	20001158 	.word	0x20001158
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	40006800 	.word	0x40006800
 8003f60:	40020400 	.word	0x40020400

08003f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08e      	sub	sp, #56	@ 0x38
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4c      	ldr	r2, [pc, #304]	@ (80040b4 <HAL_I2C_MspInit+0x150>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d12d      	bne.n	8003fe2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f96:	4b48      	ldr	r3, [pc, #288]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa8:	2312      	movs	r3, #18
 8003faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	483f      	ldr	r0, [pc, #252]	@ (80040bc <HAL_I2C_MspInit+0x158>)
 8003fc0:	f001 f8ea 	bl	8005198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003fce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd4:	4b38      	ldr	r3, [pc, #224]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fe0:	e063      	b.n	80040aa <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a36      	ldr	r2, [pc, #216]	@ (80040c0 <HAL_I2C_MspInit+0x15c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d12c      	bne.n	8004046 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004008:	2330      	movs	r3, #48	@ 0x30
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400c:	2312      	movs	r3, #18
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004018:	2304      	movs	r3, #4
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800401c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004020:	4619      	mov	r1, r3
 8004022:	4828      	ldr	r0, [pc, #160]	@ (80040c4 <HAL_I2C_MspInit+0x160>)
 8004024:	f001 f8b8 	bl	8005198 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	4b22      	ldr	r3, [pc, #136]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	4a21      	ldr	r2, [pc, #132]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8004032:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004036:	6413      	str	r3, [r2, #64]	@ 0x40
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	e031      	b.n	80040aa <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_I2C_MspInit+0x164>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d12c      	bne.n	80040aa <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 800405a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800406c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004072:	2312      	movs	r3, #18
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800407e:	2304      	movs	r3, #4
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004086:	4619      	mov	r1, r3
 8004088:	480e      	ldr	r0, [pc, #56]	@ (80040c4 <HAL_I2C_MspInit+0x160>)
 800408a:	f001 f885 	bl	8005198 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 8004098:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_I2C_MspInit+0x154>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	bf00      	nop
 80040ac:	3738      	adds	r7, #56	@ 0x38
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40005400 	.word	0x40005400
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40005800 	.word	0x40005800
 80040c4:	40021c00 	.word	0x40021c00
 80040c8:	40005c00 	.word	0x40005c00

080040cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b090      	sub	sp, #64	@ 0x40
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6d      	ldr	r2, [pc, #436]	@ (80042a0 <HAL_SPI_MspInit+0x1d4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d12c      	bne.n	8004148 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040f2:	4b6c      	ldr	r3, [pc, #432]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	4a6b      	ldr	r2, [pc, #428]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80040f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fe:	4b69      	ldr	r3, [pc, #420]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
 800410e:	4b65      	ldr	r3, [pc, #404]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	4a64      	ldr	r2, [pc, #400]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6313      	str	r3, [r2, #48]	@ 0x30
 800411a:	4b62      	ldr	r3, [pc, #392]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004126:	23e0      	movs	r3, #224	@ 0xe0
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004136:	2305      	movs	r3, #5
 8004138:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800413e:	4619      	mov	r1, r3
 8004140:	4859      	ldr	r0, [pc, #356]	@ (80042a8 <HAL_SPI_MspInit+0x1dc>)
 8004142:	f001 f829 	bl	8005198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004146:	e0a7      	b.n	8004298 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a57      	ldr	r2, [pc, #348]	@ (80042ac <HAL_SPI_MspInit+0x1e0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d12c      	bne.n	80041ac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	4a52      	ldr	r2, [pc, #328]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 800415c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004160:	6413      	str	r3, [r2, #64]	@ 0x40
 8004162:	4b50      	ldr	r3, [pc, #320]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	4b4c      	ldr	r3, [pc, #304]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	4a4b      	ldr	r2, [pc, #300]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417c:	6313      	str	r3, [r2, #48]	@ 0x30
 800417e:	4b49      	ldr	r3, [pc, #292]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800418a:	230e      	movs	r3, #14
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418e:	2302      	movs	r3, #2
 8004190:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004196:	2303      	movs	r3, #3
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800419a:	2305      	movs	r3, #5
 800419c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800419e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041a2:	4619      	mov	r1, r3
 80041a4:	4842      	ldr	r0, [pc, #264]	@ (80042b0 <HAL_SPI_MspInit+0x1e4>)
 80041a6:	f000 fff7 	bl	8005198 <HAL_GPIO_Init>
}
 80041aa:	e075      	b.n	8004298 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a40      	ldr	r2, [pc, #256]	@ (80042b4 <HAL_SPI_MspInit+0x1e8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d12d      	bne.n	8004212 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	4b3a      	ldr	r3, [pc, #232]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	4a39      	ldr	r2, [pc, #228]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041c6:	4b37      	ldr	r3, [pc, #220]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	4a32      	ldr	r2, [pc, #200]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041e2:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80041ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004200:	2306      	movs	r3, #6
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004204:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004208:	4619      	mov	r1, r3
 800420a:	482b      	ldr	r0, [pc, #172]	@ (80042b8 <HAL_SPI_MspInit+0x1ec>)
 800420c:	f000 ffc4 	bl	8005198 <HAL_GPIO_Init>
}
 8004210:	e042      	b.n	8004298 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_SPI_MspInit+0x1f0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d13d      	bne.n	8004298 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004226:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800422a:	6453      	str	r3, [r2, #68]	@ 0x44
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 8004242:	f043 0310 	orr.w	r3, r3, #16
 8004246:	6313      	str	r3, [r2, #48]	@ 0x30
 8004248:	4b16      	ldr	r3, [pc, #88]	@ (80042a4 <HAL_SPI_MspInit+0x1d8>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004254:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004262:	2303      	movs	r3, #3
 8004264:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004266:	2305      	movs	r3, #5
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800426a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800426e:	4619      	mov	r1, r3
 8004270:	4813      	ldr	r0, [pc, #76]	@ (80042c0 <HAL_SPI_MspInit+0x1f4>)
 8004272:	f000 ff91 	bl	8005198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427c:	2302      	movs	r3, #2
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004280:	2301      	movs	r3, #1
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004284:	2303      	movs	r3, #3
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004288:	2305      	movs	r3, #5
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800428c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004290:	4619      	mov	r1, r3
 8004292:	480b      	ldr	r0, [pc, #44]	@ (80042c0 <HAL_SPI_MspInit+0x1f4>)
 8004294:	f000 ff80 	bl	8005198 <HAL_GPIO_Init>
}
 8004298:	bf00      	nop
 800429a:	3740      	adds	r7, #64	@ 0x40
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40013000 	.word	0x40013000
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40020000 	.word	0x40020000
 80042ac:	40003800 	.word	0x40003800
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40003c00 	.word	0x40003c00
 80042b8:	40020800 	.word	0x40020800
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40021000 	.word	0x40021000

080042c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	@ 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a74      	ldr	r2, [pc, #464]	@ (80044b4 <HAL_UART_MspInit+0x1f0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d134      	bne.n	8004350 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ea:	4b73      	ldr	r3, [pc, #460]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	4a72      	ldr	r2, [pc, #456]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80042f0:	f043 0310 	orr.w	r3, r3, #16
 80042f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042f6:	4b70      	ldr	r3, [pc, #448]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
 8004306:	4b6c      	ldr	r3, [pc, #432]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4a6b      	ldr	r2, [pc, #428]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4b69      	ldr	r3, [pc, #420]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
 800431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800431e:	23c0      	movs	r3, #192	@ 0xc0
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004322:	2302      	movs	r3, #2
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004326:	2300      	movs	r3, #0
 8004328:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432a:	2303      	movs	r3, #3
 800432c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800432e:	2307      	movs	r3, #7
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004336:	4619      	mov	r1, r3
 8004338:	4860      	ldr	r0, [pc, #384]	@ (80044bc <HAL_UART_MspInit+0x1f8>)
 800433a:	f000 ff2d 	bl	8005198 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	2025      	movs	r0, #37	@ 0x25
 8004344:	f000 fe5f 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004348:	2025      	movs	r0, #37	@ 0x25
 800434a:	f000 fe78 	bl	800503e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800434e:	e0ad      	b.n	80044ac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5a      	ldr	r2, [pc, #360]	@ (80044c0 <HAL_UART_MspInit+0x1fc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d134      	bne.n	80043c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	4b56      	ldr	r3, [pc, #344]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	4a55      	ldr	r2, [pc, #340]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004368:	6413      	str	r3, [r2, #64]	@ 0x40
 800436a:	4b53      	ldr	r3, [pc, #332]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	4b4f      	ldr	r3, [pc, #316]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4a4e      	ldr	r2, [pc, #312]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6313      	str	r3, [r2, #48]	@ 0x30
 8004386:	4b4c      	ldr	r3, [pc, #304]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004392:	230c      	movs	r3, #12
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043a2:	2307      	movs	r3, #7
 80043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043aa:	4619      	mov	r1, r3
 80043ac:	4845      	ldr	r0, [pc, #276]	@ (80044c4 <HAL_UART_MspInit+0x200>)
 80043ae:	f000 fef3 	bl	8005198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	2026      	movs	r0, #38	@ 0x26
 80043b8:	f000 fe25 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043bc:	2026      	movs	r0, #38	@ 0x26
 80043be:	f000 fe3e 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 80043c2:	e073      	b.n	80044ac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_UART_MspInit+0x204>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d135      	bne.n	800443a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	4b39      	ldr	r3, [pc, #228]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	4a38      	ldr	r2, [pc, #224]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043de:	4b36      	ldr	r3, [pc, #216]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	4b32      	ldr	r3, [pc, #200]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	4a31      	ldr	r2, [pc, #196]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043f4:	f043 0308 	orr.w	r3, r3, #8
 80043f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043fa:	4b2f      	ldr	r3, [pc, #188]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004406:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440c:	2302      	movs	r3, #2
 800440e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004414:	2303      	movs	r3, #3
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004418:	2307      	movs	r3, #7
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800441c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004420:	4619      	mov	r1, r3
 8004422:	482a      	ldr	r0, [pc, #168]	@ (80044cc <HAL_UART_MspInit+0x208>)
 8004424:	f000 feb8 	bl	8005198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	2027      	movs	r0, #39	@ 0x27
 800442e:	f000 fdea 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004432:	2027      	movs	r0, #39	@ 0x27
 8004434:	f000 fe03 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 8004438:	e038      	b.n	80044ac <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <HAL_UART_MspInit+0x20c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d133      	bne.n	80044ac <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	4a1a      	ldr	r2, [pc, #104]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6453      	str	r3, [r2, #68]	@ 0x44
 8004454:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004470:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <HAL_UART_MspInit+0x1f4>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800447c:	23c0      	movs	r3, #192	@ 0xc0
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004480:	2302      	movs	r3, #2
 8004482:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800448c:	2308      	movs	r3, #8
 800448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004494:	4619      	mov	r1, r3
 8004496:	480f      	ldr	r0, [pc, #60]	@ (80044d4 <HAL_UART_MspInit+0x210>)
 8004498:	f000 fe7e 	bl	8005198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	2047      	movs	r0, #71	@ 0x47
 80044a2:	f000 fdb0 	bl	8005006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80044a6:	2047      	movs	r0, #71	@ 0x47
 80044a8:	f000 fdc9 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 80044ac:	bf00      	nop
 80044ae:	3740      	adds	r7, #64	@ 0x40
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40011000 	.word	0x40011000
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40004400 	.word	0x40004400
 80044c4:	40020000 	.word	0x40020000
 80044c8:	40004800 	.word	0x40004800
 80044cc:	40020c00 	.word	0x40020c00
 80044d0:	40011400 	.word	0x40011400
 80044d4:	40020800 	.word	0x40020800

080044d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <NMI_Handler+0x4>

080044e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <HardFault_Handler+0x4>

080044e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <MemManage_Handler+0x4>

080044f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <BusFault_Handler+0x4>

080044f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <UsageFault_Handler+0x4>

08004500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800452e:	f000 f917 	bl	8004760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800453c:	4802      	ldr	r0, [pc, #8]	@ (8004548 <CAN1_RX0_IRQHandler+0x10>)
 800453e:	f000 fa4e 	bl	80049de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000d8c 	.word	0x20000d8c

0800454c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004550:	4802      	ldr	r0, [pc, #8]	@ (800455c <CAN1_RX1_IRQHandler+0x10>)
 8004552:	f000 fa44 	bl	80049de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000d8c 	.word	0x20000d8c

08004560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004564:	4802      	ldr	r0, [pc, #8]	@ (8004570 <USART1_IRQHandler+0x10>)
 8004566:	f003 f8e9 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20001038 	.word	0x20001038

08004574 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004578:	4802      	ldr	r0, [pc, #8]	@ (8004584 <USART2_IRQHandler+0x10>)
 800457a:	f003 f8df 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20001080 	.word	0x20001080

08004588 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800458c:	4802      	ldr	r0, [pc, #8]	@ (8004598 <USART3_IRQHandler+0x10>)
 800458e:	f003 f8d5 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200010c8 	.word	0x200010c8

0800459c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 80045a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80045a4:	f000 ffd8 	bl	8005558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 80045a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80045ac:	f000 ffd4 	bl	8005558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 80045b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80045b4:	f000 ffd0 	bl	8005558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 80045b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80045bc:	f000 ffcc 	bl	8005558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80045c8:	4802      	ldr	r0, [pc, #8]	@ (80045d4 <USART6_IRQHandler+0x10>)
 80045ca:	f003 f8b7 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20001110 	.word	0x20001110

080045d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e0:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <_sbrk+0x5c>)
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <_sbrk+0x60>)
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <_sbrk+0x64>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <_sbrk+0x64>)
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <_sbrk+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <_sbrk+0x64>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d207      	bcs.n	8004618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004608:	f004 f9cc 	bl	80089a4 <__errno>
 800460c:	4603      	mov	r3, r0
 800460e:	220c      	movs	r2, #12
 8004610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	e009      	b.n	800462c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004618:	4b08      	ldr	r3, [pc, #32]	@ (800463c <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	4a05      	ldr	r2, [pc, #20]	@ (800463c <_sbrk+0x64>)
 8004628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20030000 	.word	0x20030000
 8004638:	00000400 	.word	0x00000400
 800463c:	2000115c 	.word	0x2000115c
 8004640:	200012c0 	.word	0x200012c0

08004644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <SystemInit+0x20>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	4a05      	ldr	r2, [pc, #20]	@ (8004664 <SystemInit+0x20>)
 8004650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800466c:	f7ff ffea 	bl	8004644 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004670:	480c      	ldr	r0, [pc, #48]	@ (80046a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004672:	490d      	ldr	r1, [pc, #52]	@ (80046a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004674:	4a0d      	ldr	r2, [pc, #52]	@ (80046ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004678:	e002      	b.n	8004680 <LoopCopyDataInit>

0800467a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800467a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800467c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467e:	3304      	adds	r3, #4

08004680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004684:	d3f9      	bcc.n	800467a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004686:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004688:	4c0a      	ldr	r4, [pc, #40]	@ (80046b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800468a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800468c:	e001      	b.n	8004692 <LoopFillZerobss>

0800468e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004690:	3204      	adds	r2, #4

08004692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004694:	d3fb      	bcc.n	800468e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004696:	f004 f98b 	bl	80089b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800469a:	f7fe fd5f 	bl	800315c <main>
  bx  lr    
 800469e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80046a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80046a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a8:	20000620 	.word	0x20000620
  ldr r2, =_sidata
 80046ac:	0800a60c 	.word	0x0800a60c
  ldr r2, =_sbss
 80046b0:	20000620 	.word	0x20000620
  ldr r4, =_ebss
 80046b4:	200012c0 	.word	0x200012c0

080046b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b8:	e7fe      	b.n	80046b8 <ADC_IRQHandler>
	...

080046bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <HAL_Init+0x40>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <HAL_Init+0x40>)
 80046c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_Init+0x40>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <HAL_Init+0x40>)
 80046d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d8:	4b08      	ldr	r3, [pc, #32]	@ (80046fc <HAL_Init+0x40>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <HAL_Init+0x40>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e4:	2003      	movs	r0, #3
 80046e6:	f000 fc83 	bl	8004ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ea:	200f      	movs	r0, #15
 80046ec:	f000 f808 	bl	8004700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f0:	f7ff fb60 	bl	8003db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023c00 	.word	0x40023c00

08004700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_InitTick+0x54>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_InitTick+0x58>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004716:	fbb3 f3f1 	udiv	r3, r3, r1
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc9b 	bl	800505a <HAL_SYSTICK_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e00e      	b.n	800474c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d80a      	bhi.n	800474a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004734:	2200      	movs	r2, #0
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	f000 fc63 	bl	8005006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004740:	4a06      	ldr	r2, [pc, #24]	@ (800475c <HAL_InitTick+0x5c>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	200005b0 	.word	0x200005b0
 8004758:	200005b8 	.word	0x200005b8
 800475c:	200005b4 	.word	0x200005b4

08004760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_IncTick+0x20>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_IncTick+0x24>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4413      	add	r3, r2
 8004770:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <HAL_IncTick+0x24>)
 8004772:	6013      	str	r3, [r2, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	200005b8 	.word	0x200005b8
 8004784:	20001160 	.word	0x20001160

08004788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_GetTick+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20001160 	.word	0x20001160

080047a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff ffee 	bl	8004788 <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d005      	beq.n	80047c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ba:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_Delay+0x44>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047c6:	bf00      	nop
 80047c8:	f7ff ffde 	bl	8004788 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d8f7      	bhi.n	80047c8 <HAL_Delay+0x28>
  {
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200005b8 	.word	0x200005b8

080047e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0ed      	b.n	80049d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fafc 	bl	8003e04 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800481c:	f7ff ffb4 	bl	8004788 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004822:	e012      	b.n	800484a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004824:	f7ff ffb0 	bl	8004788 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b0a      	cmp	r3, #10
 8004830:	d90b      	bls.n	800484a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2205      	movs	r2, #5
 8004842:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0c5      	b.n	80049d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0e5      	beq.n	8004824 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0202 	bic.w	r2, r2, #2
 8004866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004868:	f7ff ff8e 	bl	8004788 <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800486e:	e012      	b.n	8004896 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004870:	f7ff ff8a 	bl	8004788 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b0a      	cmp	r3, #10
 800487c:	d90b      	bls.n	8004896 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2205      	movs	r2, #5
 800488e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e09f      	b.n	80049d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7e1b      	ldrb	r3, [r3, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d108      	bne.n	80048be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e007      	b.n	80048ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	7e5b      	ldrb	r3, [r3, #25]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d108      	bne.n	80048e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7e9b      	ldrb	r3, [r3, #26]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d108      	bne.n	8004912 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0220 	orr.w	r2, r2, #32
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e007      	b.n	8004922 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0220 	bic.w	r2, r2, #32
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7edb      	ldrb	r3, [r3, #27]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0210 	bic.w	r2, r2, #16
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e007      	b.n	800494c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0210 	orr.w	r2, r2, #16
 800494a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7f1b      	ldrb	r3, [r3, #28]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d108      	bne.n	8004966 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e007      	b.n	8004976 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0208 	bic.w	r2, r2, #8
 8004974:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	7f5b      	ldrb	r3, [r3, #29]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d108      	bne.n	8004990 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0204 	orr.w	r2, r2, #4
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e007      	b.n	80049a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	ea42 0103 	orr.w	r1, r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08a      	sub	sp, #40	@ 0x28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d07c      	beq.n	8004b1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d023      	beq.n	8004a76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f983 	bl	8004d4c <HAL_CAN_TxMailbox0CompleteCallback>
 8004a46:	e016      	b.n	8004a76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5a:	e00c      	b.n	8004a76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6e:	e002      	b.n	8004a76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f989 	bl	8004d88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d024      	beq.n	8004aca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f963 	bl	8004d60 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a9a:	e016      	b.n	8004aca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aae:	e00c      	b.n	8004aca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac2:	e002      	b.n	8004aca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f969 	bl	8004d9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d024      	beq.n	8004b1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004adc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f943 	bl	8004d74 <HAL_CAN_TxMailbox2CompleteCallback>
 8004aee:	e016      	b.n	8004b1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b02:	e00c      	b.n	8004b1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b16:	e002      	b.n	8004b1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f949 	bl	8004db0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2210      	movs	r2, #16
 8004b40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00b      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f93a 	bl	8004dd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f921 	bl	8004dc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f91c 	bl	8004e00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f903 	bl	8004dec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2210      	movs	r2, #16
 8004c00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f906 	bl	8004e14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8ff 	bl	8004e28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d07b      	beq.n	8004d2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d072      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d043      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03e      	beq.n	8004d24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d02b      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x32a>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d82e      	bhi.n	8004d12 <HAL_CAN_IRQHandler+0x334>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d022      	beq.n	8004cfe <HAL_CAN_IRQHandler+0x320>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d82a      	bhi.n	8004d12 <HAL_CAN_IRQHandler+0x334>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d019      	beq.n	8004cf4 <HAL_CAN_IRQHandler+0x316>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d826      	bhi.n	8004d12 <HAL_CAN_IRQHandler+0x334>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d010      	beq.n	8004cea <HAL_CAN_IRQHandler+0x30c>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d822      	bhi.n	8004d12 <HAL_CAN_IRQHandler+0x334>
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d002      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0x2f8>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d005      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004cd4:	e01d      	b.n	8004d12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004cde:	e019      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	f043 0310 	orr.w	r3, r3, #16
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ce8:	e014      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004cf2:	e00f      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004cfc:	e00a      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d06:	e005      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d10:	e000      	b.n	8004d14 <HAL_CAN_IRQHandler+0x336>
            break;
 8004d12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f87c 	bl	8004e3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d44:	bf00      	nop
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <__NVIC_SetPriorityGrouping+0x44>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e82:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <__NVIC_SetPriorityGrouping+0x44>)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	60d3      	str	r3, [r2, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e9c:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	f003 0307 	and.w	r3, r3, #7
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db0b      	blt.n	8004ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	f003 021f 	and.w	r2, r3, #31
 8004ecc:	4907      	ldr	r1, [pc, #28]	@ (8004eec <__NVIC_EnableIRQ+0x38>)
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000e100 	.word	0xe000e100

08004ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	6039      	str	r1, [r7, #0]
 8004efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db0a      	blt.n	8004f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	490c      	ldr	r1, [pc, #48]	@ (8004f3c <__NVIC_SetPriority+0x4c>)
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	0112      	lsls	r2, r2, #4
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	440b      	add	r3, r1
 8004f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f18:	e00a      	b.n	8004f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	4908      	ldr	r1, [pc, #32]	@ (8004f40 <__NVIC_SetPriority+0x50>)
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	3b04      	subs	r3, #4
 8004f28:	0112      	lsls	r2, r2, #4
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	761a      	strb	r2, [r3, #24]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000e100 	.word	0xe000e100
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	@ 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f1c3 0307 	rsb	r3, r3, #7
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	bf28      	it	cs
 8004f62:	2304      	movcs	r3, #4
 8004f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d902      	bls.n	8004f74 <NVIC_EncodePriority+0x30>
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3b03      	subs	r3, #3
 8004f72:	e000      	b.n	8004f76 <NVIC_EncodePriority+0x32>
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43da      	mvns	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	401a      	ands	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	43d9      	mvns	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	4313      	orrs	r3, r2
         );
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3724      	adds	r7, #36	@ 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fbc:	d301      	bcc.n	8004fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e00f      	b.n	8004fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004fec <SysTick_Config+0x40>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fca:	210f      	movs	r1, #15
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	f7ff ff8e 	bl	8004ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <SysTick_Config+0x40>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fda:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <SysTick_Config+0x40>)
 8004fdc:	2207      	movs	r2, #7
 8004fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	e000e010 	.word	0xe000e010

08004ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff29 	bl	8004e50 <__NVIC_SetPriorityGrouping>
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	4603      	mov	r3, r0
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005018:	f7ff ff3e 	bl	8004e98 <__NVIC_GetPriorityGrouping>
 800501c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff ff8e 	bl	8004f44 <NVIC_EncodePriority>
 8005028:	4602      	mov	r2, r0
 800502a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff5d 	bl	8004ef0 <__NVIC_SetPriority>
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff31 	bl	8004eb4 <__NVIC_EnableIRQ>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ffa2 	bl	8004fac <SysTick_Config>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7ff fb82 	bl	8004788 <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d008      	beq.n	80050a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2280      	movs	r2, #128	@ 0x80
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e052      	b.n	800514a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0216 	bic.w	r2, r2, #22
 80050b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <HAL_DMA_Abort+0x62>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0208 	bic.w	r2, r2, #8
 80050e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f4:	e013      	b.n	800511e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f6:	f7ff fb47 	bl	8004788 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b05      	cmp	r3, #5
 8005102:	d90c      	bls.n	800511e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2203      	movs	r2, #3
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e015      	b.n	800514a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e4      	bne.n	80050f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	223f      	movs	r2, #63	@ 0x3f
 8005132:	409a      	lsls	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d004      	beq.n	8005170 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2280      	movs	r2, #128	@ 0x80
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e00c      	b.n	800518a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2205      	movs	r2, #5
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005198:	b480      	push	{r7}
 800519a:	b089      	sub	sp, #36	@ 0x24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e177      	b.n	80054a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051b4:	2201      	movs	r2, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f040 8166 	bne.w	800549e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d005      	beq.n	80051ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d130      	bne.n	800524c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	2203      	movs	r2, #3
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005220:	2201      	movs	r2, #1
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 0201 	and.w	r2, r3, #1
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d017      	beq.n	8005288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d123      	bne.n	80052dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	08da      	lsrs	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3208      	adds	r2, #8
 800529c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	220f      	movs	r2, #15
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	08da      	lsrs	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3208      	adds	r2, #8
 80052d6:	69b9      	ldr	r1, [r7, #24]
 80052d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2203      	movs	r2, #3
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0203 	and.w	r2, r3, #3
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80c0 	beq.w	800549e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b66      	ldr	r3, [pc, #408]	@ (80054bc <HAL_GPIO_Init+0x324>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	4a65      	ldr	r2, [pc, #404]	@ (80054bc <HAL_GPIO_Init+0x324>)
 8005328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800532c:	6453      	str	r3, [r2, #68]	@ 0x44
 800532e:	4b63      	ldr	r3, [pc, #396]	@ (80054bc <HAL_GPIO_Init+0x324>)
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800533a:	4a61      	ldr	r2, [pc, #388]	@ (80054c0 <HAL_GPIO_Init+0x328>)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	3302      	adds	r3, #2
 8005342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	220f      	movs	r2, #15
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a58      	ldr	r2, [pc, #352]	@ (80054c4 <HAL_GPIO_Init+0x32c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d037      	beq.n	80053d6 <HAL_GPIO_Init+0x23e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a57      	ldr	r2, [pc, #348]	@ (80054c8 <HAL_GPIO_Init+0x330>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d031      	beq.n	80053d2 <HAL_GPIO_Init+0x23a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_GPIO_Init+0x334>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <HAL_GPIO_Init+0x236>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a55      	ldr	r2, [pc, #340]	@ (80054d0 <HAL_GPIO_Init+0x338>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d025      	beq.n	80053ca <HAL_GPIO_Init+0x232>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a54      	ldr	r2, [pc, #336]	@ (80054d4 <HAL_GPIO_Init+0x33c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <HAL_GPIO_Init+0x22e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a53      	ldr	r2, [pc, #332]	@ (80054d8 <HAL_GPIO_Init+0x340>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d019      	beq.n	80053c2 <HAL_GPIO_Init+0x22a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <HAL_GPIO_Init+0x344>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_GPIO_Init+0x226>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a51      	ldr	r2, [pc, #324]	@ (80054e0 <HAL_GPIO_Init+0x348>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00d      	beq.n	80053ba <HAL_GPIO_Init+0x222>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a50      	ldr	r2, [pc, #320]	@ (80054e4 <HAL_GPIO_Init+0x34c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <HAL_GPIO_Init+0x21e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a4f      	ldr	r2, [pc, #316]	@ (80054e8 <HAL_GPIO_Init+0x350>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <HAL_GPIO_Init+0x21a>
 80053ae:	2309      	movs	r3, #9
 80053b0:	e012      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053b2:	230a      	movs	r3, #10
 80053b4:	e010      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053b6:	2308      	movs	r3, #8
 80053b8:	e00e      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053ba:	2307      	movs	r3, #7
 80053bc:	e00c      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053be:	2306      	movs	r3, #6
 80053c0:	e00a      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053c2:	2305      	movs	r3, #5
 80053c4:	e008      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053c6:	2304      	movs	r3, #4
 80053c8:	e006      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053ca:	2303      	movs	r3, #3
 80053cc:	e004      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e002      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_GPIO_Init+0x240>
 80053d6:	2300      	movs	r3, #0
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f002 0203 	and.w	r2, r2, #3
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	4093      	lsls	r3, r2
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053e8:	4935      	ldr	r1, [pc, #212]	@ (80054c0 <HAL_GPIO_Init+0x328>)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	089b      	lsrs	r3, r3, #2
 80053ee:	3302      	adds	r3, #2
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053f6:	4b3d      	ldr	r3, [pc, #244]	@ (80054ec <HAL_GPIO_Init+0x354>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	43db      	mvns	r3, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4013      	ands	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800541a:	4a34      	ldr	r2, [pc, #208]	@ (80054ec <HAL_GPIO_Init+0x354>)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005420:	4b32      	ldr	r3, [pc, #200]	@ (80054ec <HAL_GPIO_Init+0x354>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	43db      	mvns	r3, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4013      	ands	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005444:	4a29      	ldr	r2, [pc, #164]	@ (80054ec <HAL_GPIO_Init+0x354>)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800544a:	4b28      	ldr	r3, [pc, #160]	@ (80054ec <HAL_GPIO_Init+0x354>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800546e:	4a1f      	ldr	r2, [pc, #124]	@ (80054ec <HAL_GPIO_Init+0x354>)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005474:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <HAL_GPIO_Init+0x354>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005498:	4a14      	ldr	r2, [pc, #80]	@ (80054ec <HAL_GPIO_Init+0x354>)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b0f      	cmp	r3, #15
 80054a8:	f67f ae84 	bls.w	80051b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3724      	adds	r7, #36	@ 0x24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40013800 	.word	0x40013800
 80054c4:	40020000 	.word	0x40020000
 80054c8:	40020400 	.word	0x40020400
 80054cc:	40020800 	.word	0x40020800
 80054d0:	40020c00 	.word	0x40020c00
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40021400 	.word	0x40021400
 80054dc:	40021800 	.word	0x40021800
 80054e0:	40021c00 	.word	0x40021c00
 80054e4:	40022000 	.word	0x40022000
 80054e8:	40022400 	.word	0x40022400
 80054ec:	40013c00 	.word	0x40013c00

080054f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	807b      	strh	r3, [r7, #2]
 80054fc:	4613      	mov	r3, r2
 80054fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005500:	787b      	ldrb	r3, [r7, #1]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005506:	887a      	ldrh	r2, [r7, #2]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800550c:	e003      	b.n	8005516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	041a      	lsls	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	619a      	str	r2, [r3, #24]
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4013      	ands	r3, r2
 800553a:	041a      	lsls	r2, r3, #16
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	43d9      	mvns	r1, r3
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	400b      	ands	r3, r1
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005562:	4b08      	ldr	r3, [pc, #32]	@ (8005584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800556e:	4a05      	ldr	r2, [pc, #20]	@ (8005584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fc08 	bl	8003d8c <HAL_GPIO_EXTI_Callback>
  }
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40013c00 	.word	0x40013c00

08005588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e12b      	b.n	80057f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fe fcd8 	bl	8003f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055ec:	f001 fc9c 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 80055f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4a81      	ldr	r2, [pc, #516]	@ (80057fc <HAL_I2C_Init+0x274>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d807      	bhi.n	800560c <HAL_I2C_Init+0x84>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a80      	ldr	r2, [pc, #512]	@ (8005800 <HAL_I2C_Init+0x278>)
 8005600:	4293      	cmp	r3, r2
 8005602:	bf94      	ite	ls
 8005604:	2301      	movls	r3, #1
 8005606:	2300      	movhi	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e006      	b.n	800561a <HAL_I2C_Init+0x92>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4a7d      	ldr	r2, [pc, #500]	@ (8005804 <HAL_I2C_Init+0x27c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	bf94      	ite	ls
 8005614:	2301      	movls	r3, #1
 8005616:	2300      	movhi	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0e7      	b.n	80057f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a78      	ldr	r2, [pc, #480]	@ (8005808 <HAL_I2C_Init+0x280>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	0c9b      	lsrs	r3, r3, #18
 800562c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a6a      	ldr	r2, [pc, #424]	@ (80057fc <HAL_I2C_Init+0x274>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d802      	bhi.n	800565c <HAL_I2C_Init+0xd4>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3301      	adds	r3, #1
 800565a:	e009      	b.n	8005670 <HAL_I2C_Init+0xe8>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	4a69      	ldr	r2, [pc, #420]	@ (800580c <HAL_I2C_Init+0x284>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	099b      	lsrs	r3, r3, #6
 800566e:	3301      	adds	r3, #1
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	430b      	orrs	r3, r1
 8005676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005682:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	495c      	ldr	r1, [pc, #368]	@ (80057fc <HAL_I2C_Init+0x274>)
 800568c:	428b      	cmp	r3, r1
 800568e:	d819      	bhi.n	80056c4 <HAL_I2C_Init+0x13c>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1e59      	subs	r1, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	fbb1 f3f3 	udiv	r3, r1, r3
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056a4:	400b      	ands	r3, r1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_I2C_Init+0x138>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1e59      	subs	r1, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056b8:	3301      	adds	r3, #1
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056be:	e051      	b.n	8005764 <HAL_I2C_Init+0x1dc>
 80056c0:	2304      	movs	r3, #4
 80056c2:	e04f      	b.n	8005764 <HAL_I2C_Init+0x1dc>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <HAL_I2C_Init+0x168>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1e58      	subs	r0, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	440b      	add	r3, r1
 80056da:	fbb0 f3f3 	udiv	r3, r0, r3
 80056de:	3301      	adds	r3, #1
 80056e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e012      	b.n	8005716 <HAL_I2C_Init+0x18e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1e58      	subs	r0, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	0099      	lsls	r1, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	fbb0 f3f3 	udiv	r3, r0, r3
 8005706:	3301      	adds	r3, #1
 8005708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_Init+0x196>
 800571a:	2301      	movs	r3, #1
 800571c:	e022      	b.n	8005764 <HAL_I2C_Init+0x1dc>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10e      	bne.n	8005744 <HAL_I2C_Init+0x1bc>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1e58      	subs	r0, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6859      	ldr	r1, [r3, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	440b      	add	r3, r1
 8005734:	fbb0 f3f3 	udiv	r3, r0, r3
 8005738:	3301      	adds	r3, #1
 800573a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005742:	e00f      	b.n	8005764 <HAL_I2C_Init+0x1dc>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1e58      	subs	r0, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	0099      	lsls	r1, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	fbb0 f3f3 	udiv	r3, r0, r3
 800575a:	3301      	adds	r3, #1
 800575c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	6809      	ldr	r1, [r1, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6911      	ldr	r1, [r2, #16]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68d2      	ldr	r2, [r2, #12]
 800579e:	4311      	orrs	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	000186a0 	.word	0x000186a0
 8005800:	001e847f 	.word	0x001e847f
 8005804:	003d08ff 	.word	0x003d08ff
 8005808:	431bde83 	.word	0x431bde83
 800580c:	10624dd3 	.word	0x10624dd3

08005810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4603      	mov	r3, r0
 8005820:	817b      	strh	r3, [r7, #10]
 8005822:	460b      	mov	r3, r1
 8005824:	813b      	strh	r3, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800582a:	f7fe ffad 	bl	8004788 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b20      	cmp	r3, #32
 800583a:	f040 80d9 	bne.w	80059f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2319      	movs	r3, #25
 8005844:	2201      	movs	r2, #1
 8005846:	496d      	ldr	r1, [pc, #436]	@ (80059fc <HAL_I2C_Mem_Write+0x1ec>)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fc8b 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
 8005856:	e0cc      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_I2C_Mem_Write+0x56>
 8005862:	2302      	movs	r3, #2
 8005864:	e0c5      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d007      	beq.n	800588c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800589a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2221      	movs	r2, #33	@ 0x21
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2240      	movs	r2, #64	@ 0x40
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80058bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005a00 <HAL_I2C_Mem_Write+0x1f0>)
 80058cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ce:	88f8      	ldrh	r0, [r7, #6]
 80058d0:	893a      	ldrh	r2, [r7, #8]
 80058d2:	8979      	ldrh	r1, [r7, #10]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	4603      	mov	r3, r0
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fac2 	bl	8005e68 <I2C_RequestMemoryWrite>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d052      	beq.n	8005990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e081      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fd50 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00d      	beq.n	800591a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	2b04      	cmp	r3, #4
 8005904:	d107      	bne.n	8005916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e06b      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b04      	cmp	r3, #4
 8005956:	d11b      	bne.n	8005990 <HAL_I2C_Mem_Write+0x180>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1aa      	bne.n	80058ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fd43 	bl	8006428 <I2C_WaitOnBTFFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d107      	bne.n	80059c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e016      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	00100002 	.word	0x00100002
 8005a00:	ffff0000 	.word	0xffff0000

08005a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	@ 0x30
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a1e:	f7fe feb3 	bl	8004788 <HAL_GetTick>
 8005a22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	f040 8214 	bne.w	8005e5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	2319      	movs	r3, #25
 8005a38:	2201      	movs	r2, #1
 8005a3a:	497b      	ldr	r1, [pc, #492]	@ (8005c28 <HAL_I2C_Mem_Read+0x224>)
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fb91 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e207      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_I2C_Mem_Read+0x56>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e200      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d007      	beq.n	8005a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2222      	movs	r2, #34	@ 0x22
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2240      	movs	r2, #64	@ 0x40
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a5b      	ldr	r2, [pc, #364]	@ (8005c2c <HAL_I2C_Mem_Read+0x228>)
 8005ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ac2:	88f8      	ldrh	r0, [r7, #6]
 8005ac4:	893a      	ldrh	r2, [r7, #8]
 8005ac6:	8979      	ldrh	r1, [r7, #10]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fa5e 	bl	8005f94 <I2C_RequestMemoryRead>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e1bc      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d113      	bne.n	8005b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	623b      	str	r3, [r7, #32]
 8005afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e190      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d11b      	bne.n	8005b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e170      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d11b      	bne.n	8005b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	e150      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ba8:	e144      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	f200 80f1 	bhi.w	8005d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d123      	bne.n	8005c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fc79 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e145      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c02:	e117      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d14e      	bne.n	8005caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	2200      	movs	r2, #0
 8005c14:	4906      	ldr	r1, [pc, #24]	@ (8005c30 <HAL_I2C_Mem_Read+0x22c>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 faa4 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e11a      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
 8005c26:	bf00      	nop
 8005c28:	00100002 	.word	0x00100002
 8005c2c:	ffff0000 	.word	0xffff0000
 8005c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ca8:	e0c4      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	496c      	ldr	r1, [pc, #432]	@ (8005e64 <HAL_I2C_Mem_Read+0x460>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa55 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cb      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4955      	ldr	r1, [pc, #340]	@ (8005e64 <HAL_I2C_Mem_Read+0x460>)
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fa27 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e09d      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d94:	e04e      	b.n	8005e34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fb8c 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e058      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d124      	bne.n	8005e34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d107      	bne.n	8005e02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f47f aeb6 	bne.w	8005baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e000      	b.n	8005e5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	@ 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	00010004 	.word	0x00010004

08005e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f960 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb8:	d103      	bne.n	8005ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e05f      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ec6:	897b      	ldrh	r3, [r7, #10]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	6a3a      	ldr	r2, [r7, #32]
 8005eda:	492d      	ldr	r1, [pc, #180]	@ (8005f90 <I2C_RequestMemoryWrite+0x128>)
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f9bb 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e04c      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f04:	6a39      	ldr	r1, [r7, #32]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa46 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d107      	bne.n	8005f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e02b      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f34:	893b      	ldrh	r3, [r7, #8]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]
 8005f3e:	e021      	b.n	8005f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f40:	893b      	ldrh	r3, [r7, #8]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f50:	6a39      	ldr	r1, [r7, #32]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fa20 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d107      	bne.n	8005f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e005      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f7a:	893b      	ldrh	r3, [r7, #8]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	00010002 	.word	0x00010002

08005f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	817b      	strh	r3, [r7, #10]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	813b      	strh	r3, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f8c2 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff4:	d103      	bne.n	8005ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0aa      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	4952      	ldr	r1, [pc, #328]	@ (8006160 <I2C_RequestMemoryRead+0x1cc>)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f91d 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e097      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006040:	6a39      	ldr	r1, [r7, #32]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f9a8 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2b04      	cmp	r3, #4
 8006054:	d107      	bne.n	8006066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e076      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d105      	bne.n	800607c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006070:	893b      	ldrh	r3, [r7, #8]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	e021      	b.n	80060c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	b29b      	uxth	r3, r3
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800608a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800608c:	6a39      	ldr	r1, [r7, #32]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f982 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d107      	bne.n	80060b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e050      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c2:	6a39      	ldr	r1, [r7, #32]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f967 	bl	8006398 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d107      	bne.n	80060e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e035      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2200      	movs	r2, #0
 8006104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f82b 	bl	8006164 <I2C_WaitOnFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006122:	d103      	bne.n	800612c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800612a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e013      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006130:	897b      	ldrh	r3, [r7, #10]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	4906      	ldr	r1, [pc, #24]	@ (8006160 <I2C_RequestMemoryRead+0x1cc>)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f886 	bl	8006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	00010002 	.word	0x00010002

08006164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006174:	e048      	b.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d044      	beq.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617e:	f7fe fb03 	bl	8004788 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d139      	bne.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10d      	bne.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	43da      	mvns	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	e00c      	b.n	80061d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	43da      	mvns	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d116      	bne.n	8006208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e023      	b.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10d      	bne.n	800622e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	e00c      	b.n	8006248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	43da      	mvns	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	d093      	beq.n	8006176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006266:	e071      	b.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006276:	d123      	bne.n	80062c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e067      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d041      	beq.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c8:	f7fe fa5e 	bl	8004788 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d136      	bne.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10c      	bne.n	8006302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	43da      	mvns	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4013      	ands	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e00b      	b.n	800631a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	43da      	mvns	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e021      	b.n	8006390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10c      	bne.n	8006370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	43da      	mvns	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e00b      	b.n	8006388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	43da      	mvns	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4013      	ands	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf14      	ite	ne
 8006382:	2301      	movne	r3, #1
 8006384:	2300      	moveq	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f af6d 	bne.w	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a4:	e034      	b.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8e3 	bl	8006572 <I2C_IsAcknowledgeFailed>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e034      	b.n	8006420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d028      	beq.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063be:	f7fe f9e3 	bl	8004788 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11d      	bne.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d016      	beq.n	8006410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e007      	b.n	8006420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641a:	2b80      	cmp	r3, #128	@ 0x80
 800641c:	d1c3      	bne.n	80063a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006434:	e034      	b.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f89b 	bl	8006572 <I2C_IsAcknowledgeFailed>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e034      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d028      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fe f99b 	bl	8004788 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11d      	bne.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b04      	cmp	r3, #4
 8006470:	d016      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d1c3      	bne.n	8006436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064c4:	e049      	b.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d119      	bne.n	8006508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0210 	mvn.w	r2, #16
 80064dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e030      	b.n	800656a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fe f93e 	bl	8004788 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d016      	beq.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e007      	b.n	800656a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b40      	cmp	r3, #64	@ 0x40
 8006566:	d1ae      	bne.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006588:	d11b      	bne.n	80065c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006592:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d129      	bne.n	800663a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2224      	movs	r2, #36	@ 0x24
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0210 	bic.w	r2, r2, #16
 800660c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b20      	cmp	r3, #32
 8006660:	d12a      	bne.n	80066b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2224      	movs	r2, #36	@ 0x24
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006682:	89fb      	ldrh	r3, [r7, #14]
 8006684:	f023 030f 	bic.w	r3, r3, #15
 8006688:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	b29a      	uxth	r2, r3
 800668e:	89fb      	ldrh	r3, [r7, #14]
 8006690:	4313      	orrs	r3, r2
 8006692:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	89fa      	ldrh	r2, [r7, #14]
 800669a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e267      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d075      	beq.n	80067d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066e6:	4b88      	ldr	r3, [pc, #544]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00c      	beq.n	800670c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b85      	ldr	r3, [pc, #532]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d112      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fe:	4b82      	ldr	r3, [pc, #520]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670a:	d10b      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	4b7e      	ldr	r3, [pc, #504]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05b      	beq.n	80067d0 <HAL_RCC_OscConfig+0x108>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d157      	bne.n	80067d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e242      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x74>
 800672e:	4b76      	ldr	r3, [pc, #472]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a75      	ldr	r2, [pc, #468]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x98>
 8006746:	4b70      	ldr	r3, [pc, #448]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6f      	ldr	r2, [pc, #444]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b6d      	ldr	r3, [pc, #436]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6c      	ldr	r2, [pc, #432]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 8006760:	4b69      	ldr	r3, [pc, #420]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b66      	ldr	r3, [pc, #408]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a65      	ldr	r2, [pc, #404]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fe f802 	bl	8004788 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006788:	f7fd fffe 	bl	8004788 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	@ 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e207      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b5b      	ldr	r3, [pc, #364]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xc0>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fd ffee 	bl	8004788 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fd ffea 	bl	8004788 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	@ 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1f3      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b51      	ldr	r3, [pc, #324]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0xe8>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d063      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067de:	4b4a      	ldr	r3, [pc, #296]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f6:	4b44      	ldr	r3, [pc, #272]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b41      	ldr	r3, [pc, #260]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1c7      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4937      	ldr	r1, [pc, #220]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e03a      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b34      	ldr	r3, [pc, #208]	@ (800690c <HAL_RCC_OscConfig+0x244>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fd ffa3 	bl	8004788 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006846:	f7fd ff9f 	bl	8004788 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1a8      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4925      	ldr	r1, [pc, #148]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687a:	4b24      	ldr	r3, [pc, #144]	@ (800690c <HAL_RCC_OscConfig+0x244>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fd ff82 	bl	8004788 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006888:	f7fd ff7e 	bl	8004788 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e187      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ba:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <HAL_RCC_OscConfig+0x248>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fd ff62 	bl	8004788 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fd ff5e 	bl	8004788 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e167      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x200>
 80068e6:	e01b      	b.n	8006920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <HAL_RCC_OscConfig+0x248>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ee:	f7fd ff4b 	bl	8004788 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e00e      	b.n	8006914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fd ff47 	bl	8004788 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d907      	bls.n	8006914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e150      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006908:	40023800 	.word	0x40023800
 800690c:	42470000 	.word	0x42470000
 8006910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b88      	ldr	r3, [pc, #544]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ea      	bne.n	80068f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8097 	beq.w	8006a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006932:	4b81      	ldr	r3, [pc, #516]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	4b7d      	ldr	r3, [pc, #500]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	4a7c      	ldr	r2, [pc, #496]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694c:	6413      	str	r3, [r2, #64]	@ 0x40
 800694e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695e:	4b77      	ldr	r3, [pc, #476]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d118      	bne.n	800699c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800696a:	4b74      	ldr	r3, [pc, #464]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a73      	ldr	r2, [pc, #460]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006976:	f7fd ff07 	bl	8004788 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697e:	f7fd ff03 	bl	8004788 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e10c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2ea>
 80069a4:	4b64      	ldr	r3, [pc, #400]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a8:	4a63      	ldr	r2, [pc, #396]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b0:	e01c      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x30c>
 80069ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	4a5e      	ldr	r2, [pc, #376]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d2:	e00b      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069d4:	4b58      	ldr	r3, [pc, #352]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d8:	4a57      	ldr	r2, [pc, #348]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e0:	4b55      	ldr	r3, [pc, #340]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e4:	4a54      	ldr	r2, [pc, #336]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fd fec8 	bl	8004788 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fd fec4 	bl	8004788 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e0cb      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ee      	beq.n	80069fc <HAL_RCC_OscConfig+0x334>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a20:	f7fd feb2 	bl	8004788 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a26:	e00a      	b.n	8006a3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a28:	f7fd feae 	bl	8004788 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0b5      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ee      	bne.n	8006a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a50:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	4a38      	ldr	r2, [pc, #224]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a1 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a66:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d05c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d141      	bne.n	8006afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b31      	ldr	r3, [pc, #196]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fd fe82 	bl	8004788 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fd fe7e 	bl	8004788 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e087      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab4:	019b      	lsls	r3, r3, #6
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	491b      	ldr	r1, [pc, #108]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad6:	f7fd fe57 	bl	8004788 <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ade:	f7fd fe53 	bl	8004788 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e05c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	4b11      	ldr	r3, [pc, #68]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x416>
 8006afc:	e054      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fd fe40 	bl	8004788 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fd fe3c 	bl	8004788 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e045      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x444>
 8006b2a:	e03d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e038      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb4 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d121      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800

08006bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0cc      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b68      	ldr	r3, [pc, #416]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90c      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b65      	ldr	r3, [pc, #404]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b63      	ldr	r3, [pc, #396]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0b8      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c0c:	4b59      	ldr	r3, [pc, #356]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a58      	ldr	r2, [pc, #352]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c24:	4b53      	ldr	r3, [pc, #332]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a52      	ldr	r2, [pc, #328]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c30:	4b50      	ldr	r3, [pc, #320]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	494d      	ldr	r1, [pc, #308]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d044      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b47      	ldr	r3, [pc, #284]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d119      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e07f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	4b3f      	ldr	r3, [pc, #252]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e06f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c86:	4b3b      	ldr	r3, [pc, #236]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e067      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c96:	4b37      	ldr	r3, [pc, #220]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4934      	ldr	r1, [pc, #208]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ca8:	f7fd fd6e 	bl	8004788 <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb0:	f7fd fd6a 	bl	8004788 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 020c 	and.w	r2, r3, #12
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1eb      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b25      	ldr	r3, [pc, #148]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20c      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b22      	ldr	r3, [pc, #136]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b20      	ldr	r3, [pc, #128]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e032      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4916      	ldr	r1, [pc, #88]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	490e      	ldr	r1, [pc, #56]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d3e:	f000 f821 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490a      	ldr	r1, [pc, #40]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c0>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d5a:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd fcce 	bl	8004700 <HAL_InitTick>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023c00 	.word	0x40023c00
 8006d74:	40023800 	.word	0x40023800
 8006d78:	0800a5b0 	.word	0x0800a5b0
 8006d7c:	200005b0 	.word	0x200005b0
 8006d80:	200005b4 	.word	0x200005b4

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b090      	sub	sp, #64	@ 0x40
 8006d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9c:	4b59      	ldr	r3, [pc, #356]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d00d      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	f200 80a1 	bhi.w	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x34>
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8006db6:	e09b      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db8:	4b53      	ldr	r3, [pc, #332]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dbc:	e09b      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dbe:	4b53      	ldr	r3, [pc, #332]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dc2:	e098      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dce:	4b4d      	ldr	r3, [pc, #308]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dda:	4b4a      	ldr	r3, [pc, #296]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	2200      	movs	r2, #0
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dec:	2100      	movs	r1, #0
 8006dee:	4b47      	ldr	r3, [pc, #284]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006df0:	fb03 f201 	mul.w	r2, r3, r1
 8006df4:	2300      	movs	r3, #0
 8006df6:	fb00 f303 	mul.w	r3, r0, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4a43      	ldr	r2, [pc, #268]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8006e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e04:	460a      	mov	r2, r1
 8006e06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e10:	2200      	movs	r2, #0
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006e1e:	f7f9 fa37 	bl	8000290 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4613      	mov	r3, r2
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2a:	e053      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2c:	4b35      	ldr	r3, [pc, #212]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	099b      	lsrs	r3, r3, #6
 8006e32:	2200      	movs	r2, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	617a      	str	r2, [r7, #20]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	4652      	mov	r2, sl
 8006e44:	465b      	mov	r3, fp
 8006e46:	f04f 0000 	mov.w	r0, #0
 8006e4a:	f04f 0100 	mov.w	r1, #0
 8006e4e:	0159      	lsls	r1, r3, #5
 8006e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e54:	0150      	lsls	r0, r2, #5
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e76:	ebb2 0408 	subs.w	r4, r2, r8
 8006e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	00eb      	lsls	r3, r5, #3
 8006e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e8c:	00e2      	lsls	r2, r4, #3
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	eb14 030a 	adds.w	r3, r4, sl
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	eb45 030b 	adc.w	r3, r5, fp
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eaa:	4629      	mov	r1, r5
 8006eac:	028b      	lsls	r3, r1, #10
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	028a      	lsls	r2, r1, #10
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	60fa      	str	r2, [r7, #12]
 8006ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec8:	f7f9 f9e2 	bl	8000290 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	3301      	adds	r3, #1
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3740      	adds	r7, #64	@ 0x40
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	017d7840 	.word	0x017d7840

08006f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f14:	4b03      	ldr	r3, [pc, #12]	@ (8006f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f16:	681b      	ldr	r3, [r3, #0]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200005b0 	.word	0x200005b0

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f2c:	f7ff fff0 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4903      	ldr	r1, [pc, #12]	@ (8006f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	0800a5c0 	.word	0x0800a5c0

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f54:	f7ff ffdc 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	0b5b      	lsrs	r3, r3, #13
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4903      	ldr	r1, [pc, #12]	@ (8006f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40023800 	.word	0x40023800
 8006f74:	0800a5c0 	.word	0x0800a5c0

08006f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e07b      	b.n	8007082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f9a:	d009      	beq.n	8006fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61da      	str	r2, [r3, #28]
 8006fa2:	e005      	b.n	8006fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fd f87e 	bl	80040cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	ea42 0103 	orr.w	r1, r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	f003 0104 	and.w	r1, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	f003 0210 	and.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b088      	sub	sp, #32
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709a:	f7fd fb75 	bl	8004788 <HAL_GetTick>
 800709e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e12a      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_SPI_Transmit+0x36>
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e122      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_SPI_Transmit+0x48>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e11b      	b.n	800730a <HAL_SPI_Transmit+0x280>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2203      	movs	r2, #3
 80070de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007120:	d10f      	bne.n	8007142 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714c:	2b40      	cmp	r3, #64	@ 0x40
 800714e:	d007      	beq.n	8007160 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800715e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007168:	d152      	bne.n	8007210 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_Transmit+0xee>
 8007172:	8b7b      	ldrh	r3, [r7, #26]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d145      	bne.n	8007204 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800719c:	e032      	b.n	8007204 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d112      	bne.n	80071d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071d0:	e018      	b.n	8007204 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d2:	f7fd fad9 	bl	8004788 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d803      	bhi.n	80071ea <HAL_SPI_Transmit+0x160>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d102      	bne.n	80071f0 <HAL_SPI_Transmit+0x166>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e082      	b.n	800730a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1c7      	bne.n	800719e <HAL_SPI_Transmit+0x114>
 800720e:	e053      	b.n	80072b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_SPI_Transmit+0x194>
 8007218:	8b7b      	ldrh	r3, [r7, #26]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d147      	bne.n	80072ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007244:	e033      	b.n	80072ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d113      	bne.n	800727c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	86da      	strh	r2, [r3, #54]	@ 0x36
 800727a:	e018      	b.n	80072ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727c:	f7fd fa84 	bl	8004788 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d803      	bhi.n	8007294 <HAL_SPI_Transmit+0x20a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d102      	bne.n	800729a <HAL_SPI_Transmit+0x210>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e02d      	b.n	800730a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1c6      	bne.n	8007246 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f8b1 	bl	8007424 <SPI_EndRxTxTransaction>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007324:	f7fd fa30 	bl	8004788 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4413      	add	r3, r2
 8007332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007334:	f7fd fa28 	bl	8004788 <HAL_GetTick>
 8007338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	015b      	lsls	r3, r3, #5
 8007340:	0d1b      	lsrs	r3, r3, #20
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	fb02 f303 	mul.w	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800734a:	e054      	b.n	80073f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d050      	beq.n	80073f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007354:	f7fd fa18 	bl	8004788 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	429a      	cmp	r2, r3
 8007362:	d902      	bls.n	800736a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d13d      	bne.n	80073e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007382:	d111      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800738c:	d004      	beq.n	8007398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007396:	d107      	bne.n	80073a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b0:	d10f      	bne.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e017      	b.n	8007416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d19b      	bne.n	800734c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	200005b0 	.word	0x200005b0

08007424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2201      	movs	r2, #1
 8007438:	2102      	movs	r1, #2
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff ff6a 	bl	8007314 <SPI_WaitFlagStateUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744a:	f043 0220 	orr.w	r2, r3, #32
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e032      	b.n	80074bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007456:	4b1b      	ldr	r3, [pc, #108]	@ (80074c4 <SPI_EndRxTxTransaction+0xa0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1b      	ldr	r2, [pc, #108]	@ (80074c8 <SPI_EndRxTxTransaction+0xa4>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	0d5b      	lsrs	r3, r3, #21
 8007462:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007474:	d112      	bne.n	800749c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2200      	movs	r2, #0
 800747e:	2180      	movs	r1, #128	@ 0x80
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff ff47 	bl	8007314 <SPI_WaitFlagStateUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d016      	beq.n	80074ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e00f      	b.n	80074bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b2:	2b80      	cmp	r3, #128	@ 0x80
 80074b4:	d0f2      	beq.n	800749c <SPI_EndRxTxTransaction+0x78>
 80074b6:	e000      	b.n	80074ba <SPI_EndRxTxTransaction+0x96>
        break;
 80074b8:	bf00      	nop
  }

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200005b0 	.word	0x200005b0
 80074c8:	165e9f81 	.word	0x165e9f81

080074cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e042      	b.n	8007564 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fc fee6 	bl	80042c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2224      	movs	r2, #36	@ 0x24
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800750e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fdf3 	bl	80080fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	@ 0x28
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b20      	cmp	r3, #32
 800758a:	d175      	bne.n	8007678 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_UART_Transmit+0x2c>
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e06e      	b.n	800767a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2221      	movs	r2, #33	@ 0x21
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075aa:	f7fd f8ed 	bl	8004788 <HAL_GetTick>
 80075ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c4:	d108      	bne.n	80075d8 <HAL_UART_Transmit+0x6c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d104      	bne.n	80075d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e003      	b.n	80075e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075e0:	e02e      	b.n	8007640 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	@ 0x80
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fb55 	bl	8007c9c <UART_WaitOnFlagUntilTimeout>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e03a      	b.n	800767a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	3302      	adds	r3, #2
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	e007      	b.n	8007632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1cb      	bne.n	80075e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	2140      	movs	r1, #64	@ 0x40
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fb21 	bl	8007c9c <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e006      	b.n	800767a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	4618      	mov	r0, r3
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b08c      	sub	sp, #48	@ 0x30
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	4613      	mov	r3, r2
 800768e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b20      	cmp	r3, #32
 800769a:	d14a      	bne.n	8007732 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e043      	b.n	8007734 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fb45 	bl	8007d4e <UART_Start_Receive_IT>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80076ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d12c      	bne.n	800772c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d125      	bne.n	8007726 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f043 0310 	orr.w	r3, r3, #16
 8007706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	330c      	adds	r3, #12
 800770e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007710:	627a      	str	r2, [r7, #36]	@ 0x24
 8007712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6a39      	ldr	r1, [r7, #32]
 8007716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	61fb      	str	r3, [r7, #28]
   return(result);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8007724:	e002      	b.n	800772c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800772c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007730:	e000      	b.n	8007734 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
  }
}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	@ 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b0ba      	sub	sp, #232	@ 0xe8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007762:	2300      	movs	r3, #0
 8007764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800777a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10f      	bne.n	80077a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_UART_IRQHandler+0x66>
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fbf0 	bl	8007f80 <UART_Receive_IT>
      return;
 80077a0:	e25b      	b.n	8007c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 80de 	beq.w	8007968 <HAL_UART_IRQHandler+0x22c>
 80077ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80d1 	beq.w	8007968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <HAL_UART_IRQHandler+0xae>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e2:	f043 0201 	orr.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <HAL_UART_IRQHandler+0xd2>
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007806:	f043 0202 	orr.w	r2, r3, #2
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <HAL_UART_IRQHandler+0xf6>
 800781a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	f043 0204 	orr.w	r2, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d011      	beq.n	8007862 <HAL_UART_IRQHandler+0x126>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800784a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785a:	f043 0208 	orr.w	r2, r3, #8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 81f2 	beq.w	8007c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800786c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <HAL_UART_IRQHandler+0x14e>
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb7b 	bl	8007f80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <HAL_UART_IRQHandler+0x17a>
 80078ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04f      	beq.n	8007956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa83 	bl	8007dc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d141      	bne.n	800794e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800790e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1d9      	bne.n	80078ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007922:	4a7e      	ldr	r2, [pc, #504]	@ (8007b1c <HAL_UART_IRQHandler+0x3e0>)
 8007924:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792a:	4618      	mov	r0, r3
 800792c:	f7fd fc11 	bl	8005152 <HAL_DMA_Abort_IT>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e00e      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f99e 	bl	8007c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	e00a      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f99a 	bl	8007c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e006      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f996 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007962:	e175      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007964:	bf00      	nop
    return;
 8007966:	e173      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 814f 	bne.w	8007c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8148 	beq.w	8007c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8141 	beq.w	8007c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ae:	2b40      	cmp	r3, #64	@ 0x40
 80079b0:	f040 80b6 	bne.w	8007b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8145 	beq.w	8007c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f080 813e 	bcs.w	8007c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ea:	f000 8088 	beq.w	8007afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1d9      	bne.n	80079ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e1      	bne.n	8007a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ace:	f023 0310 	bic.w	r3, r3, #16
 8007ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ae0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ae2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e3      	bne.n	8007abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fd faba 	bl	8005072 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fb fa45 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b1a:	e09b      	b.n	8007c54 <HAL_UART_IRQHandler+0x518>
 8007b1c:	08007e89 	.word	0x08007e89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 808e 	beq.w	8007c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8089 	beq.w	8007c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e3      	bne.n	8007b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0310 	bic.w	r3, r3, #16
 8007bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007be8:	61fa      	str	r2, [r7, #28]
 8007bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	69b9      	ldr	r1, [r7, #24]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e3      	bne.n	8007bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fb f9cb 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c0e:	e023      	b.n	8007c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_UART_IRQHandler+0x4f4>
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f941 	bl	8007eb0 <UART_Transmit_IT>
    return;
 8007c2e:	e014      	b.n	8007c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00e      	beq.n	8007c5a <HAL_UART_IRQHandler+0x51e>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f981 	bl	8007f50 <UART_EndTransmit_IT>
    return;
 8007c4e:	e004      	b.n	8007c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8007c50:	bf00      	nop
 8007c52:	e002      	b.n	8007c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8007c58:	bf00      	nop
  }
}
 8007c5a:	37e8      	adds	r7, #232	@ 0xe8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cac:	e03b      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb4:	d037      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb6:	f7fc fd67 	bl	8004788 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d302      	bcc.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e03a      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d023      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b80      	cmp	r3, #128	@ 0x80
 8007ce2:	d020      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b40      	cmp	r3, #64	@ 0x40
 8007ce8:	d01d      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d116      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f857 	bl	8007dc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2208      	movs	r2, #8
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00f      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d0b4      	beq.n	8007cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2222      	movs	r2, #34	@ 0x22
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0220 	orr.w	r2, r2, #32
 8007db2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b095      	sub	sp, #84	@ 0x54
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dea:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007df0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3314      	adds	r3, #20
 8007e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d119      	bne.n	8007e6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e5a:	61ba      	str	r2, [r7, #24]
 8007e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6979      	ldr	r1, [r7, #20]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	613b      	str	r3, [r7, #16]
   return(result);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e5      	bne.n	8007e3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e7c:	bf00      	nop
 8007e7e:	3754      	adds	r7, #84	@ 0x54
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fef0 	bl	8007c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b21      	cmp	r3, #33	@ 0x21
 8007ec2:	d13e      	bne.n	8007f42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ecc:	d114      	bne.n	8007ef8 <UART_Transmit_IT+0x48>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d110      	bne.n	8007ef8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	1c9a      	adds	r2, r3, #2
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	621a      	str	r2, [r3, #32]
 8007ef6:	e008      	b.n	8007f0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	1c59      	adds	r1, r3, #1
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6211      	str	r1, [r2, #32]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4619      	mov	r1, r3
 8007f18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fe75 	bl	8007c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08c      	sub	sp, #48	@ 0x30
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b22      	cmp	r3, #34	@ 0x22
 8007f92:	f040 80ae 	bne.w	80080f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9e:	d117      	bne.n	8007fd0 <UART_Receive_IT+0x50>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d113      	bne.n	8007fd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	1c9a      	adds	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fce:	e026      	b.n	800801e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe2:	d007      	beq.n	8007ff4 <UART_Receive_IT+0x74>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <UART_Receive_IT+0x82>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e008      	b.n	8008014 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800800e:	b2da      	uxtb	r2, r3
 8008010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008012:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29b      	uxth	r3, r3
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4619      	mov	r1, r3
 800802c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800802e:	2b00      	cmp	r3, #0
 8008030:	d15d      	bne.n	80080ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0220 	bic.w	r2, r2, #32
 8008040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008074:	2b01      	cmp	r3, #1
 8008076:	d135      	bne.n	80080e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	330c      	adds	r3, #12
 8008084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	613b      	str	r3, [r7, #16]
   return(result);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f023 0310 	bic.w	r3, r3, #16
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800809e:	623a      	str	r2, [r7, #32]
 80080a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	69f9      	ldr	r1, [r7, #28]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e5      	bne.n	800807e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d10a      	bne.n	80080d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7fa ff61 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
 80080e2:	e002      	b.n	80080ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fdc5 	bl	8007c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	e002      	b.n	80080f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e000      	b.n	80080f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080f2:	2302      	movs	r3, #2
  }
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3730      	adds	r7, #48	@ 0x30
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008100:	b0c0      	sub	sp, #256	@ 0x100
 8008102:	af00      	add	r7, sp, #0
 8008104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008118:	68d9      	ldr	r1, [r3, #12]
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	ea40 0301 	orr.w	r3, r0, r1
 8008124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	431a      	orrs	r2, r3
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	431a      	orrs	r2, r3
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008154:	f021 010c 	bic.w	r1, r1, #12
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008162:	430b      	orrs	r3, r1
 8008164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008176:	6999      	ldr	r1, [r3, #24]
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	ea40 0301 	orr.w	r3, r0, r1
 8008182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b8f      	ldr	r3, [pc, #572]	@ (80083c8 <UART_SetConfig+0x2cc>)
 800818c:	429a      	cmp	r2, r3
 800818e:	d005      	beq.n	800819c <UART_SetConfig+0xa0>
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4b8d      	ldr	r3, [pc, #564]	@ (80083cc <UART_SetConfig+0x2d0>)
 8008198:	429a      	cmp	r2, r3
 800819a:	d104      	bne.n	80081a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fe fed8 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 80081a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081a4:	e003      	b.n	80081ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081a6:	f7fe febf 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 80081aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b8:	f040 810c 	bne.w	80083d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081d6:	415b      	adcs	r3, r3
 80081d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081de:	4621      	mov	r1, r4
 80081e0:	eb12 0801 	adds.w	r8, r2, r1
 80081e4:	4629      	mov	r1, r5
 80081e6:	eb43 0901 	adc.w	r9, r3, r1
 80081ea:	f04f 0200 	mov.w	r2, #0
 80081ee:	f04f 0300 	mov.w	r3, #0
 80081f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081fe:	4690      	mov	r8, r2
 8008200:	4699      	mov	r9, r3
 8008202:	4623      	mov	r3, r4
 8008204:	eb18 0303 	adds.w	r3, r8, r3
 8008208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800820c:	462b      	mov	r3, r5
 800820e:	eb49 0303 	adc.w	r3, r9, r3
 8008212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800822a:	460b      	mov	r3, r1
 800822c:	18db      	adds	r3, r3, r3
 800822e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008230:	4613      	mov	r3, r2
 8008232:	eb42 0303 	adc.w	r3, r2, r3
 8008236:	657b      	str	r3, [r7, #84]	@ 0x54
 8008238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800823c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008240:	f7f8 f826 	bl	8000290 <__aeabi_uldivmod>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4b61      	ldr	r3, [pc, #388]	@ (80083d0 <UART_SetConfig+0x2d4>)
 800824a:	fba3 2302 	umull	r2, r3, r3, r2
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	011c      	lsls	r4, r3, #4
 8008252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008256:	2200      	movs	r2, #0
 8008258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800825c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	1891      	adds	r1, r2, r2
 800826a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800826c:	415b      	adcs	r3, r3
 800826e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008274:	4641      	mov	r1, r8
 8008276:	eb12 0a01 	adds.w	sl, r2, r1
 800827a:	4649      	mov	r1, r9
 800827c:	eb43 0b01 	adc.w	fp, r3, r1
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800828c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008294:	4692      	mov	sl, r2
 8008296:	469b      	mov	fp, r3
 8008298:	4643      	mov	r3, r8
 800829a:	eb1a 0303 	adds.w	r3, sl, r3
 800829e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082a2:	464b      	mov	r3, r9
 80082a4:	eb4b 0303 	adc.w	r3, fp, r3
 80082a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082c0:	460b      	mov	r3, r1
 80082c2:	18db      	adds	r3, r3, r3
 80082c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082c6:	4613      	mov	r3, r2
 80082c8:	eb42 0303 	adc.w	r3, r2, r3
 80082cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082d6:	f7f7 ffdb 	bl	8000290 <__aeabi_uldivmod>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	4b3b      	ldr	r3, [pc, #236]	@ (80083d0 <UART_SetConfig+0x2d4>)
 80082e2:	fba3 2301 	umull	r2, r3, r3, r1
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2264      	movs	r2, #100	@ 0x64
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	1acb      	subs	r3, r1, r3
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082f6:	4b36      	ldr	r3, [pc, #216]	@ (80083d0 <UART_SetConfig+0x2d4>)
 80082f8:	fba3 2302 	umull	r2, r3, r3, r2
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008304:	441c      	add	r4, r3
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008320:	415b      	adcs	r3, r3
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008328:	4641      	mov	r1, r8
 800832a:	1851      	adds	r1, r2, r1
 800832c:	6339      	str	r1, [r7, #48]	@ 0x30
 800832e:	4649      	mov	r1, r9
 8008330:	414b      	adcs	r3, r1
 8008332:	637b      	str	r3, [r7, #52]	@ 0x34
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008340:	4659      	mov	r1, fp
 8008342:	00cb      	lsls	r3, r1, #3
 8008344:	4651      	mov	r1, sl
 8008346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834a:	4651      	mov	r1, sl
 800834c:	00ca      	lsls	r2, r1, #3
 800834e:	4610      	mov	r0, r2
 8008350:	4619      	mov	r1, r3
 8008352:	4603      	mov	r3, r0
 8008354:	4642      	mov	r2, r8
 8008356:	189b      	adds	r3, r3, r2
 8008358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800835c:	464b      	mov	r3, r9
 800835e:	460a      	mov	r2, r1
 8008360:	eb42 0303 	adc.w	r3, r2, r3
 8008364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800837c:	460b      	mov	r3, r1
 800837e:	18db      	adds	r3, r3, r3
 8008380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008382:	4613      	mov	r3, r2
 8008384:	eb42 0303 	adc.w	r3, r2, r3
 8008388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800838a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800838e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008392:	f7f7 ff7d 	bl	8000290 <__aeabi_uldivmod>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <UART_SetConfig+0x2d4>)
 800839c:	fba3 1302 	umull	r1, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2164      	movs	r1, #100	@ 0x64
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	3332      	adds	r3, #50	@ 0x32
 80083ae:	4a08      	ldr	r2, [pc, #32]	@ (80083d0 <UART_SetConfig+0x2d4>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 0207 	and.w	r2, r3, #7
 80083ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4422      	add	r2, r4
 80083c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083c4:	e106      	b.n	80085d4 <UART_SetConfig+0x4d8>
 80083c6:	bf00      	nop
 80083c8:	40011000 	.word	0x40011000
 80083cc:	40011400 	.word	0x40011400
 80083d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083e6:	4642      	mov	r2, r8
 80083e8:	464b      	mov	r3, r9
 80083ea:	1891      	adds	r1, r2, r2
 80083ec:	6239      	str	r1, [r7, #32]
 80083ee:	415b      	adcs	r3, r3
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083f6:	4641      	mov	r1, r8
 80083f8:	1854      	adds	r4, r2, r1
 80083fa:	4649      	mov	r1, r9
 80083fc:	eb43 0501 	adc.w	r5, r3, r1
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	00eb      	lsls	r3, r5, #3
 800840a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800840e:	00e2      	lsls	r2, r4, #3
 8008410:	4614      	mov	r4, r2
 8008412:	461d      	mov	r5, r3
 8008414:	4643      	mov	r3, r8
 8008416:	18e3      	adds	r3, r4, r3
 8008418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800841c:	464b      	mov	r3, r9
 800841e:	eb45 0303 	adc.w	r3, r5, r3
 8008422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008442:	4629      	mov	r1, r5
 8008444:	008b      	lsls	r3, r1, #2
 8008446:	4621      	mov	r1, r4
 8008448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800844c:	4621      	mov	r1, r4
 800844e:	008a      	lsls	r2, r1, #2
 8008450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008454:	f7f7 ff1c 	bl	8000290 <__aeabi_uldivmod>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4b60      	ldr	r3, [pc, #384]	@ (80085e0 <UART_SetConfig+0x4e4>)
 800845e:	fba3 2302 	umull	r2, r3, r3, r2
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	011c      	lsls	r4, r3, #4
 8008466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846a:	2200      	movs	r2, #0
 800846c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008478:	4642      	mov	r2, r8
 800847a:	464b      	mov	r3, r9
 800847c:	1891      	adds	r1, r2, r2
 800847e:	61b9      	str	r1, [r7, #24]
 8008480:	415b      	adcs	r3, r3
 8008482:	61fb      	str	r3, [r7, #28]
 8008484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008488:	4641      	mov	r1, r8
 800848a:	1851      	adds	r1, r2, r1
 800848c:	6139      	str	r1, [r7, #16]
 800848e:	4649      	mov	r1, r9
 8008490:	414b      	adcs	r3, r1
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084a0:	4659      	mov	r1, fp
 80084a2:	00cb      	lsls	r3, r1, #3
 80084a4:	4651      	mov	r1, sl
 80084a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084aa:	4651      	mov	r1, sl
 80084ac:	00ca      	lsls	r2, r1, #3
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	4603      	mov	r3, r0
 80084b4:	4642      	mov	r2, r8
 80084b6:	189b      	adds	r3, r3, r2
 80084b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084bc:	464b      	mov	r3, r9
 80084be:	460a      	mov	r2, r1
 80084c0:	eb42 0303 	adc.w	r3, r2, r3
 80084c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084e0:	4649      	mov	r1, r9
 80084e2:	008b      	lsls	r3, r1, #2
 80084e4:	4641      	mov	r1, r8
 80084e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ea:	4641      	mov	r1, r8
 80084ec:	008a      	lsls	r2, r1, #2
 80084ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084f2:	f7f7 fecd 	bl	8000290 <__aeabi_uldivmod>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	4b38      	ldr	r3, [pc, #224]	@ (80085e0 <UART_SetConfig+0x4e4>)
 80084fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	2264      	movs	r2, #100	@ 0x64
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	1acb      	subs	r3, r1, r3
 800850c:	011b      	lsls	r3, r3, #4
 800850e:	3332      	adds	r3, #50	@ 0x32
 8008510:	4a33      	ldr	r2, [pc, #204]	@ (80085e0 <UART_SetConfig+0x4e4>)
 8008512:	fba2 2303 	umull	r2, r3, r2, r3
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800851c:	441c      	add	r4, r3
 800851e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008522:	2200      	movs	r2, #0
 8008524:	673b      	str	r3, [r7, #112]	@ 0x70
 8008526:	677a      	str	r2, [r7, #116]	@ 0x74
 8008528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800852c:	4642      	mov	r2, r8
 800852e:	464b      	mov	r3, r9
 8008530:	1891      	adds	r1, r2, r2
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	415b      	adcs	r3, r3
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800853c:	4641      	mov	r1, r8
 800853e:	1851      	adds	r1, r2, r1
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	4649      	mov	r1, r9
 8008544:	414b      	adcs	r3, r1
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008554:	4659      	mov	r1, fp
 8008556:	00cb      	lsls	r3, r1, #3
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855e:	4651      	mov	r1, sl
 8008560:	00ca      	lsls	r2, r1, #3
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	4603      	mov	r3, r0
 8008568:	4642      	mov	r2, r8
 800856a:	189b      	adds	r3, r3, r2
 800856c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800856e:	464b      	mov	r3, r9
 8008570:	460a      	mov	r2, r1
 8008572:	eb42 0303 	adc.w	r3, r2, r3
 8008576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	663b      	str	r3, [r7, #96]	@ 0x60
 8008582:	667a      	str	r2, [r7, #100]	@ 0x64
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008590:	4649      	mov	r1, r9
 8008592:	008b      	lsls	r3, r1, #2
 8008594:	4641      	mov	r1, r8
 8008596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800859a:	4641      	mov	r1, r8
 800859c:	008a      	lsls	r2, r1, #2
 800859e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085a2:	f7f7 fe75 	bl	8000290 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <UART_SetConfig+0x4e4>)
 80085ac:	fba3 1302 	umull	r1, r3, r3, r2
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	2164      	movs	r1, #100	@ 0x64
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	3332      	adds	r3, #50	@ 0x32
 80085be:	4a08      	ldr	r2, [pc, #32]	@ (80085e0 <UART_SetConfig+0x4e4>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	f003 020f 	and.w	r2, r3, #15
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4422      	add	r2, r4
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085da:	46bd      	mov	sp, r7
 80085dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e0:	51eb851f 	.word	0x51eb851f

080085e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80085e8:	4904      	ldr	r1, [pc, #16]	@ (80085fc <MX_FATFS_Init+0x18>)
 80085ea:	4805      	ldr	r0, [pc, #20]	@ (8008600 <MX_FATFS_Init+0x1c>)
 80085ec:	f000 f8b0 	bl	8008750 <FATFS_LinkDriver>
 80085f0:	4603      	mov	r3, r0
 80085f2:	461a      	mov	r2, r3
 80085f4:	4b03      	ldr	r3, [pc, #12]	@ (8008604 <MX_FATFS_Init+0x20>)
 80085f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085f8:	bf00      	nop
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20001168 	.word	0x20001168
 8008600:	200005bc 	.word	0x200005bc
 8008604:	20001164 	.word	0x20001164

08008608 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008612:	4b06      	ldr	r3, [pc, #24]	@ (800862c <USER_initialize+0x24>)
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <USER_initialize+0x24>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	200005b9 	.word	0x200005b9

08008630 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800863a:	4b06      	ldr	r3, [pc, #24]	@ (8008654 <USER_status+0x24>)
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008640:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <USER_status+0x24>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200005b9 	.word	0x200005b9

08008658 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008668:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008686:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	603a      	str	r2, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	460b      	mov	r3, r1
 80086a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
    return res;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086c6:	2301      	movs	r3, #1
 80086c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086ce:	4b1f      	ldr	r3, [pc, #124]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086d0:	7a5b      	ldrb	r3, [r3, #9]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d131      	bne.n	800873c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086d8:	4b1c      	ldr	r3, [pc, #112]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086da:	7a5b      	ldrb	r3, [r3, #9]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	4b1a      	ldr	r3, [pc, #104]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086e2:	2100      	movs	r1, #0
 80086e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086e6:	4b19      	ldr	r3, [pc, #100]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086e8:	7a5b      	ldrb	r3, [r3, #9]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4a17      	ldr	r2, [pc, #92]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086f6:	4b15      	ldr	r3, [pc, #84]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 80086f8:	7a5b      	ldrb	r3, [r3, #9]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	4b13      	ldr	r3, [pc, #76]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 8008700:	4413      	add	r3, r2
 8008702:	79fa      	ldrb	r2, [r7, #7]
 8008704:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008706:	4b11      	ldr	r3, [pc, #68]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 8008708:	7a5b      	ldrb	r3, [r3, #9]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	b2d1      	uxtb	r1, r2
 8008710:	4a0e      	ldr	r2, [pc, #56]	@ (800874c <FATFS_LinkDriverEx+0x94>)
 8008712:	7251      	strb	r1, [r2, #9]
 8008714:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008716:	7dbb      	ldrb	r3, [r7, #22]
 8008718:	3330      	adds	r3, #48	@ 0x30
 800871a:	b2da      	uxtb	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3301      	adds	r3, #1
 8008724:	223a      	movs	r2, #58	@ 0x3a
 8008726:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3302      	adds	r3, #2
 800872c:	222f      	movs	r2, #47	@ 0x2f
 800872e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	3303      	adds	r3, #3
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	2000116c 	.word	0x2000116c

08008750 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800875a:	2200      	movs	r2, #0
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ffaa 	bl	80086b8 <FATFS_LinkDriverEx>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <malloc>:
 8008770:	4b02      	ldr	r3, [pc, #8]	@ (800877c <malloc+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f000 b82d 	b.w	80087d4 <_malloc_r>
 800877a:	bf00      	nop
 800877c:	200005d0 	.word	0x200005d0

08008780 <free>:
 8008780:	4b02      	ldr	r3, [pc, #8]	@ (800878c <free+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f000 b939 	b.w	80089fc <_free_r>
 800878a:	bf00      	nop
 800878c:	200005d0 	.word	0x200005d0

08008790 <sbrk_aligned>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4e0f      	ldr	r6, [pc, #60]	@ (80087d0 <sbrk_aligned+0x40>)
 8008794:	460c      	mov	r4, r1
 8008796:	6831      	ldr	r1, [r6, #0]
 8008798:	4605      	mov	r5, r0
 800879a:	b911      	cbnz	r1, 80087a2 <sbrk_aligned+0x12>
 800879c:	f000 f8f2 	bl	8008984 <_sbrk_r>
 80087a0:	6030      	str	r0, [r6, #0]
 80087a2:	4621      	mov	r1, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 f8ed 	bl	8008984 <_sbrk_r>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	d103      	bne.n	80087b6 <sbrk_aligned+0x26>
 80087ae:	f04f 34ff 	mov.w	r4, #4294967295
 80087b2:	4620      	mov	r0, r4
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	1cc4      	adds	r4, r0, #3
 80087b8:	f024 0403 	bic.w	r4, r4, #3
 80087bc:	42a0      	cmp	r0, r4
 80087be:	d0f8      	beq.n	80087b2 <sbrk_aligned+0x22>
 80087c0:	1a21      	subs	r1, r4, r0
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f8de 	bl	8008984 <_sbrk_r>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d1f2      	bne.n	80087b2 <sbrk_aligned+0x22>
 80087cc:	e7ef      	b.n	80087ae <sbrk_aligned+0x1e>
 80087ce:	bf00      	nop
 80087d0:	20001178 	.word	0x20001178

080087d4 <_malloc_r>:
 80087d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d8:	1ccd      	adds	r5, r1, #3
 80087da:	f025 0503 	bic.w	r5, r5, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	2d0c      	cmp	r5, #12
 80087e2:	bf38      	it	cc
 80087e4:	250c      	movcc	r5, #12
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	4606      	mov	r6, r0
 80087ea:	db01      	blt.n	80087f0 <_malloc_r+0x1c>
 80087ec:	42a9      	cmp	r1, r5
 80087ee:	d904      	bls.n	80087fa <_malloc_r+0x26>
 80087f0:	230c      	movs	r3, #12
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	2000      	movs	r0, #0
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088d0 <_malloc_r+0xfc>
 80087fe:	f000 f869 	bl	80088d4 <__malloc_lock>
 8008802:	f8d8 3000 	ldr.w	r3, [r8]
 8008806:	461c      	mov	r4, r3
 8008808:	bb44      	cbnz	r4, 800885c <_malloc_r+0x88>
 800880a:	4629      	mov	r1, r5
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff ffbf 	bl	8008790 <sbrk_aligned>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	4604      	mov	r4, r0
 8008816:	d158      	bne.n	80088ca <_malloc_r+0xf6>
 8008818:	f8d8 4000 	ldr.w	r4, [r8]
 800881c:	4627      	mov	r7, r4
 800881e:	2f00      	cmp	r7, #0
 8008820:	d143      	bne.n	80088aa <_malloc_r+0xd6>
 8008822:	2c00      	cmp	r4, #0
 8008824:	d04b      	beq.n	80088be <_malloc_r+0xea>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	4639      	mov	r1, r7
 800882a:	4630      	mov	r0, r6
 800882c:	eb04 0903 	add.w	r9, r4, r3
 8008830:	f000 f8a8 	bl	8008984 <_sbrk_r>
 8008834:	4581      	cmp	r9, r0
 8008836:	d142      	bne.n	80088be <_malloc_r+0xea>
 8008838:	6821      	ldr	r1, [r4, #0]
 800883a:	1a6d      	subs	r5, r5, r1
 800883c:	4629      	mov	r1, r5
 800883e:	4630      	mov	r0, r6
 8008840:	f7ff ffa6 	bl	8008790 <sbrk_aligned>
 8008844:	3001      	adds	r0, #1
 8008846:	d03a      	beq.n	80088be <_malloc_r+0xea>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	442b      	add	r3, r5
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	f8d8 3000 	ldr.w	r3, [r8]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	bb62      	cbnz	r2, 80088b0 <_malloc_r+0xdc>
 8008856:	f8c8 7000 	str.w	r7, [r8]
 800885a:	e00f      	b.n	800887c <_malloc_r+0xa8>
 800885c:	6822      	ldr	r2, [r4, #0]
 800885e:	1b52      	subs	r2, r2, r5
 8008860:	d420      	bmi.n	80088a4 <_malloc_r+0xd0>
 8008862:	2a0b      	cmp	r2, #11
 8008864:	d917      	bls.n	8008896 <_malloc_r+0xc2>
 8008866:	1961      	adds	r1, r4, r5
 8008868:	42a3      	cmp	r3, r4
 800886a:	6025      	str	r5, [r4, #0]
 800886c:	bf18      	it	ne
 800886e:	6059      	strne	r1, [r3, #4]
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	bf08      	it	eq
 8008874:	f8c8 1000 	streq.w	r1, [r8]
 8008878:	5162      	str	r2, [r4, r5]
 800887a:	604b      	str	r3, [r1, #4]
 800887c:	4630      	mov	r0, r6
 800887e:	f000 f82f 	bl	80088e0 <__malloc_unlock>
 8008882:	f104 000b 	add.w	r0, r4, #11
 8008886:	1d23      	adds	r3, r4, #4
 8008888:	f020 0007 	bic.w	r0, r0, #7
 800888c:	1ac2      	subs	r2, r0, r3
 800888e:	bf1c      	itt	ne
 8008890:	1a1b      	subne	r3, r3, r0
 8008892:	50a3      	strne	r3, [r4, r2]
 8008894:	e7af      	b.n	80087f6 <_malloc_r+0x22>
 8008896:	6862      	ldr	r2, [r4, #4]
 8008898:	42a3      	cmp	r3, r4
 800889a:	bf0c      	ite	eq
 800889c:	f8c8 2000 	streq.w	r2, [r8]
 80088a0:	605a      	strne	r2, [r3, #4]
 80088a2:	e7eb      	b.n	800887c <_malloc_r+0xa8>
 80088a4:	4623      	mov	r3, r4
 80088a6:	6864      	ldr	r4, [r4, #4]
 80088a8:	e7ae      	b.n	8008808 <_malloc_r+0x34>
 80088aa:	463c      	mov	r4, r7
 80088ac:	687f      	ldr	r7, [r7, #4]
 80088ae:	e7b6      	b.n	800881e <_malloc_r+0x4a>
 80088b0:	461a      	mov	r2, r3
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d1fb      	bne.n	80088b0 <_malloc_r+0xdc>
 80088b8:	2300      	movs	r3, #0
 80088ba:	6053      	str	r3, [r2, #4]
 80088bc:	e7de      	b.n	800887c <_malloc_r+0xa8>
 80088be:	230c      	movs	r3, #12
 80088c0:	6033      	str	r3, [r6, #0]
 80088c2:	4630      	mov	r0, r6
 80088c4:	f000 f80c 	bl	80088e0 <__malloc_unlock>
 80088c8:	e794      	b.n	80087f4 <_malloc_r+0x20>
 80088ca:	6005      	str	r5, [r0, #0]
 80088cc:	e7d6      	b.n	800887c <_malloc_r+0xa8>
 80088ce:	bf00      	nop
 80088d0:	2000117c 	.word	0x2000117c

080088d4 <__malloc_lock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	@ (80088dc <__malloc_lock+0x8>)
 80088d6:	f000 b88f 	b.w	80089f8 <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	200012bc 	.word	0x200012bc

080088e0 <__malloc_unlock>:
 80088e0:	4801      	ldr	r0, [pc, #4]	@ (80088e8 <__malloc_unlock+0x8>)
 80088e2:	f000 b88a 	b.w	80089fa <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	200012bc 	.word	0x200012bc

080088ec <sniprintf>:
 80088ec:	b40c      	push	{r2, r3}
 80088ee:	b530      	push	{r4, r5, lr}
 80088f0:	4b17      	ldr	r3, [pc, #92]	@ (8008950 <sniprintf+0x64>)
 80088f2:	1e0c      	subs	r4, r1, #0
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	b09d      	sub	sp, #116	@ 0x74
 80088f8:	da08      	bge.n	800890c <sniprintf+0x20>
 80088fa:	238b      	movs	r3, #139	@ 0x8b
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008902:	b01d      	add	sp, #116	@ 0x74
 8008904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008908:	b002      	add	sp, #8
 800890a:	4770      	bx	lr
 800890c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008914:	bf14      	ite	ne
 8008916:	f104 33ff 	addne.w	r3, r4, #4294967295
 800891a:	4623      	moveq	r3, r4
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008924:	9002      	str	r0, [sp, #8]
 8008926:	9006      	str	r0, [sp, #24]
 8008928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800892c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800892e:	ab21      	add	r3, sp, #132	@ 0x84
 8008930:	a902      	add	r1, sp, #8
 8008932:	4628      	mov	r0, r5
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	f000 f907 	bl	8008b48 <_svfiprintf_r>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	bfbc      	itt	lt
 800893e:	238b      	movlt	r3, #139	@ 0x8b
 8008940:	602b      	strlt	r3, [r5, #0]
 8008942:	2c00      	cmp	r4, #0
 8008944:	d0dd      	beq.n	8008902 <sniprintf+0x16>
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e7d9      	b.n	8008902 <sniprintf+0x16>
 800894e:	bf00      	nop
 8008950:	200005d0 	.word	0x200005d0

08008954 <memset>:
 8008954:	4402      	add	r2, r0
 8008956:	4603      	mov	r3, r0
 8008958:	4293      	cmp	r3, r2
 800895a:	d100      	bne.n	800895e <memset+0xa>
 800895c:	4770      	bx	lr
 800895e:	f803 1b01 	strb.w	r1, [r3], #1
 8008962:	e7f9      	b.n	8008958 <memset+0x4>

08008964 <strcat>:
 8008964:	b510      	push	{r4, lr}
 8008966:	4602      	mov	r2, r0
 8008968:	7814      	ldrb	r4, [r2, #0]
 800896a:	4613      	mov	r3, r2
 800896c:	3201      	adds	r2, #1
 800896e:	2c00      	cmp	r4, #0
 8008970:	d1fa      	bne.n	8008968 <strcat+0x4>
 8008972:	3b01      	subs	r3, #1
 8008974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1f9      	bne.n	8008974 <strcat+0x10>
 8008980:	bd10      	pop	{r4, pc}
	...

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7fb fe22 	bl	80045d8 <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	200012b8 	.word	0x200012b8

080089a4 <__errno>:
 80089a4:	4b01      	ldr	r3, [pc, #4]	@ (80089ac <__errno+0x8>)
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	200005d0 	.word	0x200005d0

080089b0 <__libc_init_array>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	4d0d      	ldr	r5, [pc, #52]	@ (80089e8 <__libc_init_array+0x38>)
 80089b4:	4c0d      	ldr	r4, [pc, #52]	@ (80089ec <__libc_init_array+0x3c>)
 80089b6:	1b64      	subs	r4, r4, r5
 80089b8:	10a4      	asrs	r4, r4, #2
 80089ba:	2600      	movs	r6, #0
 80089bc:	42a6      	cmp	r6, r4
 80089be:	d109      	bne.n	80089d4 <__libc_init_array+0x24>
 80089c0:	4d0b      	ldr	r5, [pc, #44]	@ (80089f0 <__libc_init_array+0x40>)
 80089c2:	4c0c      	ldr	r4, [pc, #48]	@ (80089f4 <__libc_init_array+0x44>)
 80089c4:	f000 fba8 	bl	8009118 <_init>
 80089c8:	1b64      	subs	r4, r4, r5
 80089ca:	10a4      	asrs	r4, r4, #2
 80089cc:	2600      	movs	r6, #0
 80089ce:	42a6      	cmp	r6, r4
 80089d0:	d105      	bne.n	80089de <__libc_init_array+0x2e>
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d8:	4798      	blx	r3
 80089da:	3601      	adds	r6, #1
 80089dc:	e7ee      	b.n	80089bc <__libc_init_array+0xc>
 80089de:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e2:	4798      	blx	r3
 80089e4:	3601      	adds	r6, #1
 80089e6:	e7f2      	b.n	80089ce <__libc_init_array+0x1e>
 80089e8:	0800a604 	.word	0x0800a604
 80089ec:	0800a604 	.word	0x0800a604
 80089f0:	0800a604 	.word	0x0800a604
 80089f4:	0800a608 	.word	0x0800a608

080089f8 <__retarget_lock_acquire_recursive>:
 80089f8:	4770      	bx	lr

080089fa <__retarget_lock_release_recursive>:
 80089fa:	4770      	bx	lr

080089fc <_free_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4605      	mov	r5, r0
 8008a00:	2900      	cmp	r1, #0
 8008a02:	d041      	beq.n	8008a88 <_free_r+0x8c>
 8008a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a08:	1f0c      	subs	r4, r1, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	bfb8      	it	lt
 8008a0e:	18e4      	addlt	r4, r4, r3
 8008a10:	f7ff ff60 	bl	80088d4 <__malloc_lock>
 8008a14:	4a1d      	ldr	r2, [pc, #116]	@ (8008a8c <_free_r+0x90>)
 8008a16:	6813      	ldr	r3, [r2, #0]
 8008a18:	b933      	cbnz	r3, 8008a28 <_free_r+0x2c>
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	6014      	str	r4, [r2, #0]
 8008a1e:	4628      	mov	r0, r5
 8008a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a24:	f7ff bf5c 	b.w	80088e0 <__malloc_unlock>
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d908      	bls.n	8008a3e <_free_r+0x42>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	1821      	adds	r1, r4, r0
 8008a30:	428b      	cmp	r3, r1
 8008a32:	bf01      	itttt	eq
 8008a34:	6819      	ldreq	r1, [r3, #0]
 8008a36:	685b      	ldreq	r3, [r3, #4]
 8008a38:	1809      	addeq	r1, r1, r0
 8008a3a:	6021      	streq	r1, [r4, #0]
 8008a3c:	e7ed      	b.n	8008a1a <_free_r+0x1e>
 8008a3e:	461a      	mov	r2, r3
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	b10b      	cbz	r3, 8008a48 <_free_r+0x4c>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d9fa      	bls.n	8008a3e <_free_r+0x42>
 8008a48:	6811      	ldr	r1, [r2, #0]
 8008a4a:	1850      	adds	r0, r2, r1
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d10b      	bne.n	8008a68 <_free_r+0x6c>
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	4401      	add	r1, r0
 8008a54:	1850      	adds	r0, r2, r1
 8008a56:	4283      	cmp	r3, r0
 8008a58:	6011      	str	r1, [r2, #0]
 8008a5a:	d1e0      	bne.n	8008a1e <_free_r+0x22>
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	6053      	str	r3, [r2, #4]
 8008a62:	4408      	add	r0, r1
 8008a64:	6010      	str	r0, [r2, #0]
 8008a66:	e7da      	b.n	8008a1e <_free_r+0x22>
 8008a68:	d902      	bls.n	8008a70 <_free_r+0x74>
 8008a6a:	230c      	movs	r3, #12
 8008a6c:	602b      	str	r3, [r5, #0]
 8008a6e:	e7d6      	b.n	8008a1e <_free_r+0x22>
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	1821      	adds	r1, r4, r0
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf04      	itt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	6063      	str	r3, [r4, #4]
 8008a7e:	bf04      	itt	eq
 8008a80:	1809      	addeq	r1, r1, r0
 8008a82:	6021      	streq	r1, [r4, #0]
 8008a84:	6054      	str	r4, [r2, #4]
 8008a86:	e7ca      	b.n	8008a1e <_free_r+0x22>
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000117c 	.word	0x2000117c

08008a90 <__ssputs_r>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	688e      	ldr	r6, [r1, #8]
 8008a96:	461f      	mov	r7, r3
 8008a98:	42be      	cmp	r6, r7
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4690      	mov	r8, r2
 8008aa2:	d82d      	bhi.n	8008b00 <__ssputs_r+0x70>
 8008aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008aac:	d026      	beq.n	8008afc <__ssputs_r+0x6c>
 8008aae:	6965      	ldr	r5, [r4, #20]
 8008ab0:	6909      	ldr	r1, [r1, #16]
 8008ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab6:	eba3 0901 	sub.w	r9, r3, r1
 8008aba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008abe:	1c7b      	adds	r3, r7, #1
 8008ac0:	444b      	add	r3, r9
 8008ac2:	106d      	asrs	r5, r5, #1
 8008ac4:	429d      	cmp	r5, r3
 8008ac6:	bf38      	it	cc
 8008ac8:	461d      	movcc	r5, r3
 8008aca:	0553      	lsls	r3, r2, #21
 8008acc:	d527      	bpl.n	8008b1e <__ssputs_r+0x8e>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	f7ff fe80 	bl	80087d4 <_malloc_r>
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	b360      	cbz	r0, 8008b32 <__ssputs_r+0xa2>
 8008ad8:	6921      	ldr	r1, [r4, #16]
 8008ada:	464a      	mov	r2, r9
 8008adc:	f000 fad8 	bl	8009090 <memcpy>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	6126      	str	r6, [r4, #16]
 8008aee:	6165      	str	r5, [r4, #20]
 8008af0:	444e      	add	r6, r9
 8008af2:	eba5 0509 	sub.w	r5, r5, r9
 8008af6:	6026      	str	r6, [r4, #0]
 8008af8:	60a5      	str	r5, [r4, #8]
 8008afa:	463e      	mov	r6, r7
 8008afc:	42be      	cmp	r6, r7
 8008afe:	d900      	bls.n	8008b02 <__ssputs_r+0x72>
 8008b00:	463e      	mov	r6, r7
 8008b02:	6820      	ldr	r0, [r4, #0]
 8008b04:	4632      	mov	r2, r6
 8008b06:	4641      	mov	r1, r8
 8008b08:	f000 faa8 	bl	800905c <memmove>
 8008b0c:	68a3      	ldr	r3, [r4, #8]
 8008b0e:	1b9b      	subs	r3, r3, r6
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4433      	add	r3, r6
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1e:	462a      	mov	r2, r5
 8008b20:	f000 fac4 	bl	80090ac <_realloc_r>
 8008b24:	4606      	mov	r6, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d1e0      	bne.n	8008aec <__ssputs_r+0x5c>
 8008b2a:	6921      	ldr	r1, [r4, #16]
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	f7ff ff65 	bl	80089fc <_free_r>
 8008b32:	230c      	movs	r3, #12
 8008b34:	f8ca 3000 	str.w	r3, [sl]
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e7e9      	b.n	8008b1a <__ssputs_r+0x8a>
	...

08008b48 <_svfiprintf_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4698      	mov	r8, r3
 8008b4e:	898b      	ldrh	r3, [r1, #12]
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	b09d      	sub	sp, #116	@ 0x74
 8008b54:	4607      	mov	r7, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	4614      	mov	r4, r2
 8008b5a:	d510      	bpl.n	8008b7e <_svfiprintf_r+0x36>
 8008b5c:	690b      	ldr	r3, [r1, #16]
 8008b5e:	b973      	cbnz	r3, 8008b7e <_svfiprintf_r+0x36>
 8008b60:	2140      	movs	r1, #64	@ 0x40
 8008b62:	f7ff fe37 	bl	80087d4 <_malloc_r>
 8008b66:	6028      	str	r0, [r5, #0]
 8008b68:	6128      	str	r0, [r5, #16]
 8008b6a:	b930      	cbnz	r0, 8008b7a <_svfiprintf_r+0x32>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	b01d      	add	sp, #116	@ 0x74
 8008b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7a:	2340      	movs	r3, #64	@ 0x40
 8008b7c:	616b      	str	r3, [r5, #20]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b82:	2320      	movs	r3, #32
 8008b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8c:	2330      	movs	r3, #48	@ 0x30
 8008b8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d2c <_svfiprintf_r+0x1e4>
 8008b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b96:	f04f 0901 	mov.w	r9, #1
 8008b9a:	4623      	mov	r3, r4
 8008b9c:	469a      	mov	sl, r3
 8008b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba2:	b10a      	cbz	r2, 8008ba8 <_svfiprintf_r+0x60>
 8008ba4:	2a25      	cmp	r2, #37	@ 0x25
 8008ba6:	d1f9      	bne.n	8008b9c <_svfiprintf_r+0x54>
 8008ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bac:	d00b      	beq.n	8008bc6 <_svfiprintf_r+0x7e>
 8008bae:	465b      	mov	r3, fp
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7ff ff6b 	bl	8008a90 <__ssputs_r>
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f000 80a7 	beq.w	8008d0e <_svfiprintf_r+0x1c6>
 8008bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc2:	445a      	add	r2, fp
 8008bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 809f 	beq.w	8008d0e <_svfiprintf_r+0x1c6>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bda:	f10a 0a01 	add.w	sl, sl, #1
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008be8:	4654      	mov	r4, sl
 8008bea:	2205      	movs	r2, #5
 8008bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf0:	484e      	ldr	r0, [pc, #312]	@ (8008d2c <_svfiprintf_r+0x1e4>)
 8008bf2:	f7f7 fafd 	bl	80001f0 <memchr>
 8008bf6:	9a04      	ldr	r2, [sp, #16]
 8008bf8:	b9d8      	cbnz	r0, 8008c32 <_svfiprintf_r+0xea>
 8008bfa:	06d0      	lsls	r0, r2, #27
 8008bfc:	bf44      	itt	mi
 8008bfe:	2320      	movmi	r3, #32
 8008c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c04:	0711      	lsls	r1, r2, #28
 8008c06:	bf44      	itt	mi
 8008c08:	232b      	movmi	r3, #43	@ 0x2b
 8008c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c14:	d015      	beq.n	8008c42 <_svfiprintf_r+0xfa>
 8008c16:	9a07      	ldr	r2, [sp, #28]
 8008c18:	4654      	mov	r4, sl
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f04f 0c0a 	mov.w	ip, #10
 8008c20:	4621      	mov	r1, r4
 8008c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c26:	3b30      	subs	r3, #48	@ 0x30
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	d94b      	bls.n	8008cc4 <_svfiprintf_r+0x17c>
 8008c2c:	b1b0      	cbz	r0, 8008c5c <_svfiprintf_r+0x114>
 8008c2e:	9207      	str	r2, [sp, #28]
 8008c30:	e014      	b.n	8008c5c <_svfiprintf_r+0x114>
 8008c32:	eba0 0308 	sub.w	r3, r0, r8
 8008c36:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	46a2      	mov	sl, r4
 8008c40:	e7d2      	b.n	8008be8 <_svfiprintf_r+0xa0>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	1d19      	adds	r1, r3, #4
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	9103      	str	r1, [sp, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bfbb      	ittet	lt
 8008c4e:	425b      	neglt	r3, r3
 8008c50:	f042 0202 	orrlt.w	r2, r2, #2
 8008c54:	9307      	strge	r3, [sp, #28]
 8008c56:	9307      	strlt	r3, [sp, #28]
 8008c58:	bfb8      	it	lt
 8008c5a:	9204      	strlt	r2, [sp, #16]
 8008c5c:	7823      	ldrb	r3, [r4, #0]
 8008c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c60:	d10a      	bne.n	8008c78 <_svfiprintf_r+0x130>
 8008c62:	7863      	ldrb	r3, [r4, #1]
 8008c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c66:	d132      	bne.n	8008cce <_svfiprintf_r+0x186>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	9203      	str	r2, [sp, #12]
 8008c70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c74:	3402      	adds	r4, #2
 8008c76:	9305      	str	r3, [sp, #20]
 8008c78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d3c <_svfiprintf_r+0x1f4>
 8008c7c:	7821      	ldrb	r1, [r4, #0]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7f7 fab5 	bl	80001f0 <memchr>
 8008c86:	b138      	cbz	r0, 8008c98 <_svfiprintf_r+0x150>
 8008c88:	9b04      	ldr	r3, [sp, #16]
 8008c8a:	eba0 000a 	sub.w	r0, r0, sl
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	4082      	lsls	r2, r0
 8008c92:	4313      	orrs	r3, r2
 8008c94:	3401      	adds	r4, #1
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9c:	4824      	ldr	r0, [pc, #144]	@ (8008d30 <_svfiprintf_r+0x1e8>)
 8008c9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	f7f7 faa4 	bl	80001f0 <memchr>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d036      	beq.n	8008d1a <_svfiprintf_r+0x1d2>
 8008cac:	4b21      	ldr	r3, [pc, #132]	@ (8008d34 <_svfiprintf_r+0x1ec>)
 8008cae:	bb1b      	cbnz	r3, 8008cf8 <_svfiprintf_r+0x1b0>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	f023 0307 	bic.w	r3, r3, #7
 8008cb8:	3308      	adds	r3, #8
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cbe:	4433      	add	r3, r6
 8008cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc2:	e76a      	b.n	8008b9a <_svfiprintf_r+0x52>
 8008cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc8:	460c      	mov	r4, r1
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7a8      	b.n	8008c20 <_svfiprintf_r+0xd8>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	3401      	adds	r4, #1
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f04f 0c0a 	mov.w	ip, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce0:	3a30      	subs	r2, #48	@ 0x30
 8008ce2:	2a09      	cmp	r2, #9
 8008ce4:	d903      	bls.n	8008cee <_svfiprintf_r+0x1a6>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0c6      	beq.n	8008c78 <_svfiprintf_r+0x130>
 8008cea:	9105      	str	r1, [sp, #20]
 8008cec:	e7c4      	b.n	8008c78 <_svfiprintf_r+0x130>
 8008cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e7f0      	b.n	8008cda <_svfiprintf_r+0x192>
 8008cf8:	ab03      	add	r3, sp, #12
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <_svfiprintf_r+0x1f0>)
 8008d00:	a904      	add	r1, sp, #16
 8008d02:	4638      	mov	r0, r7
 8008d04:	f3af 8000 	nop.w
 8008d08:	1c42      	adds	r2, r0, #1
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	d1d6      	bne.n	8008cbc <_svfiprintf_r+0x174>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	065b      	lsls	r3, r3, #25
 8008d12:	f53f af2d 	bmi.w	8008b70 <_svfiprintf_r+0x28>
 8008d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d18:	e72c      	b.n	8008b74 <_svfiprintf_r+0x2c>
 8008d1a:	ab03      	add	r3, sp, #12
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <_svfiprintf_r+0x1f0>)
 8008d22:	a904      	add	r1, sp, #16
 8008d24:	4638      	mov	r0, r7
 8008d26:	f000 f879 	bl	8008e1c <_printf_i>
 8008d2a:	e7ed      	b.n	8008d08 <_svfiprintf_r+0x1c0>
 8008d2c:	0800a5c8 	.word	0x0800a5c8
 8008d30:	0800a5d2 	.word	0x0800a5d2
 8008d34:	00000000 	.word	0x00000000
 8008d38:	08008a91 	.word	0x08008a91
 8008d3c:	0800a5ce 	.word	0x0800a5ce

08008d40 <_printf_common>:
 8008d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d44:	4616      	mov	r6, r2
 8008d46:	4698      	mov	r8, r3
 8008d48:	688a      	ldr	r2, [r1, #8]
 8008d4a:	690b      	ldr	r3, [r1, #16]
 8008d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d50:	4293      	cmp	r3, r2
 8008d52:	bfb8      	it	lt
 8008d54:	4613      	movlt	r3, r2
 8008d56:	6033      	str	r3, [r6, #0]
 8008d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	b10a      	cbz	r2, 8008d66 <_printf_common+0x26>
 8008d62:	3301      	adds	r3, #1
 8008d64:	6033      	str	r3, [r6, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	0699      	lsls	r1, r3, #26
 8008d6a:	bf42      	ittt	mi
 8008d6c:	6833      	ldrmi	r3, [r6, #0]
 8008d6e:	3302      	addmi	r3, #2
 8008d70:	6033      	strmi	r3, [r6, #0]
 8008d72:	6825      	ldr	r5, [r4, #0]
 8008d74:	f015 0506 	ands.w	r5, r5, #6
 8008d78:	d106      	bne.n	8008d88 <_printf_common+0x48>
 8008d7a:	f104 0a19 	add.w	sl, r4, #25
 8008d7e:	68e3      	ldr	r3, [r4, #12]
 8008d80:	6832      	ldr	r2, [r6, #0]
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	42ab      	cmp	r3, r5
 8008d86:	dc26      	bgt.n	8008dd6 <_printf_common+0x96>
 8008d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	3b00      	subs	r3, #0
 8008d90:	bf18      	it	ne
 8008d92:	2301      	movne	r3, #1
 8008d94:	0692      	lsls	r2, r2, #26
 8008d96:	d42b      	bmi.n	8008df0 <_printf_common+0xb0>
 8008d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	4638      	mov	r0, r7
 8008da0:	47c8      	blx	r9
 8008da2:	3001      	adds	r0, #1
 8008da4:	d01e      	beq.n	8008de4 <_printf_common+0xa4>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	f003 0306 	and.w	r3, r3, #6
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	bf02      	ittt	eq
 8008db2:	68e5      	ldreq	r5, [r4, #12]
 8008db4:	6833      	ldreq	r3, [r6, #0]
 8008db6:	1aed      	subeq	r5, r5, r3
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	bf0c      	ite	eq
 8008dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dc0:	2500      	movne	r5, #0
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	bfc4      	itt	gt
 8008dc6:	1a9b      	subgt	r3, r3, r2
 8008dc8:	18ed      	addgt	r5, r5, r3
 8008dca:	2600      	movs	r6, #0
 8008dcc:	341a      	adds	r4, #26
 8008dce:	42b5      	cmp	r5, r6
 8008dd0:	d11a      	bne.n	8008e08 <_printf_common+0xc8>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e008      	b.n	8008de8 <_printf_common+0xa8>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4641      	mov	r1, r8
 8008ddc:	4638      	mov	r0, r7
 8008dde:	47c8      	blx	r9
 8008de0:	3001      	adds	r0, #1
 8008de2:	d103      	bne.n	8008dec <_printf_common+0xac>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dec:	3501      	adds	r5, #1
 8008dee:	e7c6      	b.n	8008d7e <_printf_common+0x3e>
 8008df0:	18e1      	adds	r1, r4, r3
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	2030      	movs	r0, #48	@ 0x30
 8008df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dfa:	4422      	add	r2, r4
 8008dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e04:	3302      	adds	r3, #2
 8008e06:	e7c7      	b.n	8008d98 <_printf_common+0x58>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4641      	mov	r1, r8
 8008e0e:	4638      	mov	r0, r7
 8008e10:	47c8      	blx	r9
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0e6      	beq.n	8008de4 <_printf_common+0xa4>
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7d9      	b.n	8008dce <_printf_common+0x8e>
	...

08008e1c <_printf_i>:
 8008e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e20:	7e0f      	ldrb	r7, [r1, #24]
 8008e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e24:	2f78      	cmp	r7, #120	@ 0x78
 8008e26:	4691      	mov	r9, r2
 8008e28:	4680      	mov	r8, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	469a      	mov	sl, r3
 8008e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e32:	d807      	bhi.n	8008e44 <_printf_i+0x28>
 8008e34:	2f62      	cmp	r7, #98	@ 0x62
 8008e36:	d80a      	bhi.n	8008e4e <_printf_i+0x32>
 8008e38:	2f00      	cmp	r7, #0
 8008e3a:	f000 80d2 	beq.w	8008fe2 <_printf_i+0x1c6>
 8008e3e:	2f58      	cmp	r7, #88	@ 0x58
 8008e40:	f000 80b9 	beq.w	8008fb6 <_printf_i+0x19a>
 8008e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e4c:	e03a      	b.n	8008ec4 <_printf_i+0xa8>
 8008e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e52:	2b15      	cmp	r3, #21
 8008e54:	d8f6      	bhi.n	8008e44 <_printf_i+0x28>
 8008e56:	a101      	add	r1, pc, #4	@ (adr r1, 8008e5c <_printf_i+0x40>)
 8008e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e5c:	08008eb5 	.word	0x08008eb5
 8008e60:	08008ec9 	.word	0x08008ec9
 8008e64:	08008e45 	.word	0x08008e45
 8008e68:	08008e45 	.word	0x08008e45
 8008e6c:	08008e45 	.word	0x08008e45
 8008e70:	08008e45 	.word	0x08008e45
 8008e74:	08008ec9 	.word	0x08008ec9
 8008e78:	08008e45 	.word	0x08008e45
 8008e7c:	08008e45 	.word	0x08008e45
 8008e80:	08008e45 	.word	0x08008e45
 8008e84:	08008e45 	.word	0x08008e45
 8008e88:	08008fc9 	.word	0x08008fc9
 8008e8c:	08008ef3 	.word	0x08008ef3
 8008e90:	08008f83 	.word	0x08008f83
 8008e94:	08008e45 	.word	0x08008e45
 8008e98:	08008e45 	.word	0x08008e45
 8008e9c:	08008feb 	.word	0x08008feb
 8008ea0:	08008e45 	.word	0x08008e45
 8008ea4:	08008ef3 	.word	0x08008ef3
 8008ea8:	08008e45 	.word	0x08008e45
 8008eac:	08008e45 	.word	0x08008e45
 8008eb0:	08008f8b 	.word	0x08008f8b
 8008eb4:	6833      	ldr	r3, [r6, #0]
 8008eb6:	1d1a      	adds	r2, r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6032      	str	r2, [r6, #0]
 8008ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e09d      	b.n	8009004 <_printf_i+0x1e8>
 8008ec8:	6833      	ldr	r3, [r6, #0]
 8008eca:	6820      	ldr	r0, [r4, #0]
 8008ecc:	1d19      	adds	r1, r3, #4
 8008ece:	6031      	str	r1, [r6, #0]
 8008ed0:	0606      	lsls	r6, r0, #24
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_i+0xbc>
 8008ed4:	681d      	ldr	r5, [r3, #0]
 8008ed6:	e003      	b.n	8008ee0 <_printf_i+0xc4>
 8008ed8:	0645      	lsls	r5, r0, #25
 8008eda:	d5fb      	bpl.n	8008ed4 <_printf_i+0xb8>
 8008edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	da03      	bge.n	8008eec <_printf_i+0xd0>
 8008ee4:	232d      	movs	r3, #45	@ 0x2d
 8008ee6:	426d      	negs	r5, r5
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eec:	4859      	ldr	r0, [pc, #356]	@ (8009054 <_printf_i+0x238>)
 8008eee:	230a      	movs	r3, #10
 8008ef0:	e011      	b.n	8008f16 <_printf_i+0xfa>
 8008ef2:	6821      	ldr	r1, [r4, #0]
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	0608      	lsls	r0, r1, #24
 8008ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008efc:	d402      	bmi.n	8008f04 <_printf_i+0xe8>
 8008efe:	0649      	lsls	r1, r1, #25
 8008f00:	bf48      	it	mi
 8008f02:	b2ad      	uxthmi	r5, r5
 8008f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f06:	4853      	ldr	r0, [pc, #332]	@ (8009054 <_printf_i+0x238>)
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	bf14      	ite	ne
 8008f0c:	230a      	movne	r3, #10
 8008f0e:	2308      	moveq	r3, #8
 8008f10:	2100      	movs	r1, #0
 8008f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f16:	6866      	ldr	r6, [r4, #4]
 8008f18:	60a6      	str	r6, [r4, #8]
 8008f1a:	2e00      	cmp	r6, #0
 8008f1c:	bfa2      	ittt	ge
 8008f1e:	6821      	ldrge	r1, [r4, #0]
 8008f20:	f021 0104 	bicge.w	r1, r1, #4
 8008f24:	6021      	strge	r1, [r4, #0]
 8008f26:	b90d      	cbnz	r5, 8008f2c <_printf_i+0x110>
 8008f28:	2e00      	cmp	r6, #0
 8008f2a:	d04b      	beq.n	8008fc4 <_printf_i+0x1a8>
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f32:	fb03 5711 	mls	r7, r3, r1, r5
 8008f36:	5dc7      	ldrb	r7, [r0, r7]
 8008f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f3c:	462f      	mov	r7, r5
 8008f3e:	42bb      	cmp	r3, r7
 8008f40:	460d      	mov	r5, r1
 8008f42:	d9f4      	bls.n	8008f2e <_printf_i+0x112>
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d10b      	bne.n	8008f60 <_printf_i+0x144>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07df      	lsls	r7, r3, #31
 8008f4c:	d508      	bpl.n	8008f60 <_printf_i+0x144>
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4299      	cmp	r1, r3
 8008f54:	bfde      	ittt	le
 8008f56:	2330      	movle	r3, #48	@ 0x30
 8008f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f60:	1b92      	subs	r2, r2, r6
 8008f62:	6122      	str	r2, [r4, #16]
 8008f64:	f8cd a000 	str.w	sl, [sp]
 8008f68:	464b      	mov	r3, r9
 8008f6a:	aa03      	add	r2, sp, #12
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7ff fee6 	bl	8008d40 <_printf_common>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d14a      	bne.n	800900e <_printf_i+0x1f2>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	b004      	add	sp, #16
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f043 0320 	orr.w	r3, r3, #32
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	4833      	ldr	r0, [pc, #204]	@ (8009058 <_printf_i+0x23c>)
 8008f8c:	2778      	movs	r7, #120	@ 0x78
 8008f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	6831      	ldr	r1, [r6, #0]
 8008f96:	061f      	lsls	r7, r3, #24
 8008f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f9c:	d402      	bmi.n	8008fa4 <_printf_i+0x188>
 8008f9e:	065f      	lsls	r7, r3, #25
 8008fa0:	bf48      	it	mi
 8008fa2:	b2ad      	uxthmi	r5, r5
 8008fa4:	6031      	str	r1, [r6, #0]
 8008fa6:	07d9      	lsls	r1, r3, #31
 8008fa8:	bf44      	itt	mi
 8008faa:	f043 0320 	orrmi.w	r3, r3, #32
 8008fae:	6023      	strmi	r3, [r4, #0]
 8008fb0:	b11d      	cbz	r5, 8008fba <_printf_i+0x19e>
 8008fb2:	2310      	movs	r3, #16
 8008fb4:	e7ac      	b.n	8008f10 <_printf_i+0xf4>
 8008fb6:	4827      	ldr	r0, [pc, #156]	@ (8009054 <_printf_i+0x238>)
 8008fb8:	e7e9      	b.n	8008f8e <_printf_i+0x172>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f023 0320 	bic.w	r3, r3, #32
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	e7f6      	b.n	8008fb2 <_printf_i+0x196>
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	e7bd      	b.n	8008f44 <_printf_i+0x128>
 8008fc8:	6833      	ldr	r3, [r6, #0]
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	6961      	ldr	r1, [r4, #20]
 8008fce:	1d18      	adds	r0, r3, #4
 8008fd0:	6030      	str	r0, [r6, #0]
 8008fd2:	062e      	lsls	r6, r5, #24
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	d501      	bpl.n	8008fdc <_printf_i+0x1c0>
 8008fd8:	6019      	str	r1, [r3, #0]
 8008fda:	e002      	b.n	8008fe2 <_printf_i+0x1c6>
 8008fdc:	0668      	lsls	r0, r5, #25
 8008fde:	d5fb      	bpl.n	8008fd8 <_printf_i+0x1bc>
 8008fe0:	8019      	strh	r1, [r3, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	4616      	mov	r6, r2
 8008fe8:	e7bc      	b.n	8008f64 <_printf_i+0x148>
 8008fea:	6833      	ldr	r3, [r6, #0]
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	6032      	str	r2, [r6, #0]
 8008ff0:	681e      	ldr	r6, [r3, #0]
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7f7 f8fa 	bl	80001f0 <memchr>
 8008ffc:	b108      	cbz	r0, 8009002 <_printf_i+0x1e6>
 8008ffe:	1b80      	subs	r0, r0, r6
 8009000:	6060      	str	r0, [r4, #4]
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2300      	movs	r3, #0
 8009008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800900c:	e7aa      	b.n	8008f64 <_printf_i+0x148>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	4632      	mov	r2, r6
 8009012:	4649      	mov	r1, r9
 8009014:	4640      	mov	r0, r8
 8009016:	47d0      	blx	sl
 8009018:	3001      	adds	r0, #1
 800901a:	d0ad      	beq.n	8008f78 <_printf_i+0x15c>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	079b      	lsls	r3, r3, #30
 8009020:	d413      	bmi.n	800904a <_printf_i+0x22e>
 8009022:	68e0      	ldr	r0, [r4, #12]
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	4298      	cmp	r0, r3
 8009028:	bfb8      	it	lt
 800902a:	4618      	movlt	r0, r3
 800902c:	e7a6      	b.n	8008f7c <_printf_i+0x160>
 800902e:	2301      	movs	r3, #1
 8009030:	4632      	mov	r2, r6
 8009032:	4649      	mov	r1, r9
 8009034:	4640      	mov	r0, r8
 8009036:	47d0      	blx	sl
 8009038:	3001      	adds	r0, #1
 800903a:	d09d      	beq.n	8008f78 <_printf_i+0x15c>
 800903c:	3501      	adds	r5, #1
 800903e:	68e3      	ldr	r3, [r4, #12]
 8009040:	9903      	ldr	r1, [sp, #12]
 8009042:	1a5b      	subs	r3, r3, r1
 8009044:	42ab      	cmp	r3, r5
 8009046:	dcf2      	bgt.n	800902e <_printf_i+0x212>
 8009048:	e7eb      	b.n	8009022 <_printf_i+0x206>
 800904a:	2500      	movs	r5, #0
 800904c:	f104 0619 	add.w	r6, r4, #25
 8009050:	e7f5      	b.n	800903e <_printf_i+0x222>
 8009052:	bf00      	nop
 8009054:	0800a5d9 	.word	0x0800a5d9
 8009058:	0800a5ea 	.word	0x0800a5ea

0800905c <memmove>:
 800905c:	4288      	cmp	r0, r1
 800905e:	b510      	push	{r4, lr}
 8009060:	eb01 0402 	add.w	r4, r1, r2
 8009064:	d902      	bls.n	800906c <memmove+0x10>
 8009066:	4284      	cmp	r4, r0
 8009068:	4623      	mov	r3, r4
 800906a:	d807      	bhi.n	800907c <memmove+0x20>
 800906c:	1e43      	subs	r3, r0, #1
 800906e:	42a1      	cmp	r1, r4
 8009070:	d008      	beq.n	8009084 <memmove+0x28>
 8009072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800907a:	e7f8      	b.n	800906e <memmove+0x12>
 800907c:	4402      	add	r2, r0
 800907e:	4601      	mov	r1, r0
 8009080:	428a      	cmp	r2, r1
 8009082:	d100      	bne.n	8009086 <memmove+0x2a>
 8009084:	bd10      	pop	{r4, pc}
 8009086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800908a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908e:	e7f7      	b.n	8009080 <memmove+0x24>

08009090 <memcpy>:
 8009090:	440a      	add	r2, r1
 8009092:	4291      	cmp	r1, r2
 8009094:	f100 33ff 	add.w	r3, r0, #4294967295
 8009098:	d100      	bne.n	800909c <memcpy+0xc>
 800909a:	4770      	bx	lr
 800909c:	b510      	push	{r4, lr}
 800909e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090a6:	4291      	cmp	r1, r2
 80090a8:	d1f9      	bne.n	800909e <memcpy+0xe>
 80090aa:	bd10      	pop	{r4, pc}

080090ac <_realloc_r>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	4680      	mov	r8, r0
 80090b2:	4615      	mov	r5, r2
 80090b4:	460c      	mov	r4, r1
 80090b6:	b921      	cbnz	r1, 80090c2 <_realloc_r+0x16>
 80090b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	4611      	mov	r1, r2
 80090be:	f7ff bb89 	b.w	80087d4 <_malloc_r>
 80090c2:	b92a      	cbnz	r2, 80090d0 <_realloc_r+0x24>
 80090c4:	f7ff fc9a 	bl	80089fc <_free_r>
 80090c8:	2400      	movs	r4, #0
 80090ca:	4620      	mov	r0, r4
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	f000 f81a 	bl	8009108 <_malloc_usable_size_r>
 80090d4:	4285      	cmp	r5, r0
 80090d6:	4606      	mov	r6, r0
 80090d8:	d802      	bhi.n	80090e0 <_realloc_r+0x34>
 80090da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090de:	d8f4      	bhi.n	80090ca <_realloc_r+0x1e>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4640      	mov	r0, r8
 80090e4:	f7ff fb76 	bl	80087d4 <_malloc_r>
 80090e8:	4607      	mov	r7, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0ec      	beq.n	80090c8 <_realloc_r+0x1c>
 80090ee:	42b5      	cmp	r5, r6
 80090f0:	462a      	mov	r2, r5
 80090f2:	4621      	mov	r1, r4
 80090f4:	bf28      	it	cs
 80090f6:	4632      	movcs	r2, r6
 80090f8:	f7ff ffca 	bl	8009090 <memcpy>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff fc7c 	bl	80089fc <_free_r>
 8009104:	463c      	mov	r4, r7
 8009106:	e7e0      	b.n	80090ca <_realloc_r+0x1e>

08009108 <_malloc_usable_size_r>:
 8009108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910c:	1f18      	subs	r0, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfbc      	itt	lt
 8009112:	580b      	ldrlt	r3, [r1, r0]
 8009114:	18c0      	addlt	r0, r0, r3
 8009116:	4770      	bx	lr

08009118 <_init>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr

08009124 <_fini>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr
