
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b8  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0800ca68  0800ca68  0000da68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df9c  0800df9c  0000f984  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df9c  0800df9c  0000ef9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfa4  0800dfa4  0000f984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfa4  0800dfa4  0000efa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfa8  0800dfa8  0000efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000984  20000000  0800dfac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f984  2**0
                  CONTENTS
 10 .bss          00001334  20000984  20000984  0000f984  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cb8  20001cb8  0000f984  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f984  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a58b  00000000  00000000  0000f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006367  00000000  00000000  00069f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004030  00000000  00000000  000702a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000030ac  00000000  00000000  000742d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002945a  00000000  00000000  00077384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ec26  00000000  00000000  000a07de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89af  00000000  00000000  000cf404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c7db3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011a34  00000000  00000000  001c7df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001d982c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000984 	.word	0x20000984
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ca50 	.word	0x0800ca50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000988 	.word	0x20000988
 80001ec:	0800ca50 	.word	0x0800ca50

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_frsub>:
 8000a7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a80:	e002      	b.n	8000a88 <__addsf3>
 8000a82:	bf00      	nop

08000a84 <__aeabi_fsub>:
 8000a84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a88 <__addsf3>:
 8000a88:	0042      	lsls	r2, r0, #1
 8000a8a:	bf1f      	itttt	ne
 8000a8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a90:	ea92 0f03 	teqne	r2, r3
 8000a94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9c:	d06a      	beq.n	8000b74 <__addsf3+0xec>
 8000a9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa6:	bfc1      	itttt	gt
 8000aa8:	18d2      	addgt	r2, r2, r3
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	4048      	eorgt	r0, r1
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	2b19      	cmp	r3, #25
 8000ab6:	bf88      	it	hi
 8000ab8:	4770      	bxhi	lr
 8000aba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000abe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ad2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4249      	negne	r1, r1
 8000ada:	ea92 0f03 	teq	r2, r3
 8000ade:	d03f      	beq.n	8000b60 <__addsf3+0xd8>
 8000ae0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae8:	eb10 000c 	adds.w	r0, r0, ip
 8000aec:	f1c3 0320 	rsb	r3, r3, #32
 8000af0:	fa01 f103 	lsl.w	r1, r1, r3
 8000af4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__addsf3+0x78>
 8000afa:	4249      	negs	r1, r1
 8000afc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b04:	d313      	bcc.n	8000b2e <__addsf3+0xa6>
 8000b06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b0a:	d306      	bcc.n	8000b1a <__addsf3+0x92>
 8000b0c:	0840      	lsrs	r0, r0, #1
 8000b0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b12:	f102 0201 	add.w	r2, r2, #1
 8000b16:	2afe      	cmp	r2, #254	@ 0xfe
 8000b18:	d251      	bcs.n	8000bbe <__addsf3+0x136>
 8000b1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b22:	bf08      	it	eq
 8000b24:	f020 0001 	biceq.w	r0, r0, #1
 8000b28:	ea40 0003 	orr.w	r0, r0, r3
 8000b2c:	4770      	bx	lr
 8000b2e:	0049      	lsls	r1, r1, #1
 8000b30:	eb40 0000 	adc.w	r0, r0, r0
 8000b34:	3a01      	subs	r2, #1
 8000b36:	bf28      	it	cs
 8000b38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b3c:	d2ed      	bcs.n	8000b1a <__addsf3+0x92>
 8000b3e:	fab0 fc80 	clz	ip, r0
 8000b42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b46:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4e:	bfaa      	itet	ge
 8000b50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b54:	4252      	neglt	r2, r2
 8000b56:	4318      	orrge	r0, r3
 8000b58:	bfbc      	itt	lt
 8000b5a:	40d0      	lsrlt	r0, r2
 8000b5c:	4318      	orrlt	r0, r3
 8000b5e:	4770      	bx	lr
 8000b60:	f092 0f00 	teq	r2, #0
 8000b64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b68:	bf06      	itte	eq
 8000b6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	3201      	addeq	r2, #1
 8000b70:	3b01      	subne	r3, #1
 8000b72:	e7b5      	b.n	8000ae0 <__addsf3+0x58>
 8000b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	bf18      	it	ne
 8000b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b82:	d021      	beq.n	8000bc8 <__addsf3+0x140>
 8000b84:	ea92 0f03 	teq	r2, r3
 8000b88:	d004      	beq.n	8000b94 <__addsf3+0x10c>
 8000b8a:	f092 0f00 	teq	r2, #0
 8000b8e:	bf08      	it	eq
 8000b90:	4608      	moveq	r0, r1
 8000b92:	4770      	bx	lr
 8000b94:	ea90 0f01 	teq	r0, r1
 8000b98:	bf1c      	itt	ne
 8000b9a:	2000      	movne	r0, #0
 8000b9c:	4770      	bxne	lr
 8000b9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ba2:	d104      	bne.n	8000bae <__addsf3+0x126>
 8000ba4:	0040      	lsls	r0, r0, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	4770      	bx	lr
 8000bae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bb2:	bf3c      	itt	cc
 8000bb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bxcc	lr
 8000bba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	4770      	bx	lr
 8000bc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bcc:	bf16      	itet	ne
 8000bce:	4608      	movne	r0, r1
 8000bd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd4:	4601      	movne	r1, r0
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	bf06      	itte	eq
 8000bda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bde:	ea90 0f01 	teqeq	r0, r1
 8000be2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ui2f>:
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e004      	b.n	8000bf8 <__aeabi_i2f+0x8>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_i2f>:
 8000bf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bf4:	bf48      	it	mi
 8000bf6:	4240      	negmi	r0, r0
 8000bf8:	ea5f 0c00 	movs.w	ip, r0
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c04:	4601      	mov	r1, r0
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	e01c      	b.n	8000c46 <__aeabi_l2f+0x2a>

08000c0c <__aeabi_ul2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e00a      	b.n	8000c30 <__aeabi_l2f+0x14>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_l2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__aeabi_l2f+0x14>
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	ea5f 0c01 	movs.w	ip, r1
 8000c34:	bf02      	ittt	eq
 8000c36:	4684      	moveq	ip, r0
 8000c38:	4601      	moveq	r1, r0
 8000c3a:	2000      	moveq	r0, #0
 8000c3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c40:	bf08      	it	eq
 8000c42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c4a:	fabc f28c 	clz	r2, ip
 8000c4e:	3a08      	subs	r2, #8
 8000c50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c54:	db10      	blt.n	8000c78 <__aeabi_l2f+0x5c>
 8000c56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c68:	fa20 f202 	lsr.w	r2, r0, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f102 0220 	add.w	r2, r2, #32
 8000c7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c88:	fa21 f202 	lsr.w	r2, r1, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e00f      	b.n	8000ff0 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <LED_Init+0xdc>)
 8000fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <LED_Init+0xdc>)
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f007 ff69 	bl	8008ebc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b09      	cmp	r3, #9
 8000ff4:	d9ec      	bls.n	8000fd0 <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	e00f      	b.n	800101c <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <LED_Init+0xe0>)
 8001000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <LED_Init+0xe0>)
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f007 ff53 	bl	8008ebc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	3301      	adds	r3, #1
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9ec      	bls.n	8000ffc <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	737b      	strb	r3, [r7, #13]
 8001026:	e00f      	b.n	8001048 <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <LED_Init+0xe4>)
 800102c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <LED_Init+0xe4>)
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f007 ff3d 	bl	8008ebc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	3301      	adds	r3, #1
 8001046:	737b      	strb	r3, [r7, #13]
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d9ec      	bls.n	8001028 <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	733b      	strb	r3, [r7, #12]
 8001052:	e01d      	b.n	8001090 <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <LED_Init+0xe8>)
 8001058:	2101      	movs	r1, #1
 800105a:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <LED_Init+0xec>)
 8001060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001064:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <LED_Init+0xec>)
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	791b      	ldrb	r3, [r3, #4]
 8001070:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <LED_Init+0xec>)
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	88db      	ldrh	r3, [r3, #6]
 800107c:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 800107e:	88ba      	ldrh	r2, [r7, #4]
 8001080:	79f9      	ldrb	r1, [r7, #7]
 8001082:	2301      	movs	r3, #1
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f002 fd63 	bl	8003b50 <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	733b      	strb	r3, [r7, #12]
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	2b17      	cmp	r3, #23
 8001094:	d9de      	bls.n	8001054 <LED_Init+0x90>
    }

}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000050 	.word	0x20000050
 80010a8:	20000070 	.word	0x20000070
 80010ac:	200009a8 	.word	0x200009a8
 80010b0:	200000a0 	.word	0x200000a0

080010b4 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d80e      	bhi.n	80010e2 <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <LED_Toggle+0x38>)
 80010ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4906      	ldr	r1, [pc, #24]	@ (80010ec <LED_Toggle+0x38>)
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f007 ff06 	bl	8008eee <HAL_GPIO_TogglePin>
    }
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80010fa:	f007 f82b 	bl	8008154 <HAL_GetTick>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <Push_ButtonHandler+0x64>)
 8001102:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e01c      	b.n	8001144 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <Push_ButtonHandler+0x68>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	88fa      	ldrh	r2, [r7, #6]
 8001114:	429a      	cmp	r2, r3
 8001116:	d112      	bne.n	800113e <Push_ButtonHandler+0x4e>
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <Push_ButtonHandler+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <Push_ButtonHandler+0x6c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b96      	cmp	r3, #150	@ 0x96
 8001124:	d90b      	bls.n	800113e <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3301      	adds	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc0 	bl	80010b4 <LED_Toggle>
            previousTime = currentTime;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <Push_ButtonHandler+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a08      	ldr	r2, [pc, #32]	@ (800115c <Push_ButtonHandler+0x6c>)
 800113a:	6013      	str	r3, [r2, #0]
            break;
 800113c:	e006      	b.n	800114c <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b03      	cmp	r3, #3
 8001148:	dddf      	ble.n	800110a <Push_ButtonHandler+0x1a>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200009a0 	.word	0x200009a0
 8001158:	0800cae0 	.word	0x0800cae0
 800115c:	200009a4 	.word	0x200009a4

08001160 <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	e00e      	b.n	800118e <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	411a      	asrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1c3 030f 	rsb	r3, r3, #15
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	440b      	add	r3, r1
 8001182:	f002 0201 	and.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b09      	cmp	r3, #9
 8001192:	dded      	ble.n	8001170 <intToBinary+0x10>
		    }
		}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e02b      	b.n	8001218 <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	440b      	add	r3, r1
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3308      	adds	r3, #8
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	440b      	add	r3, r1
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1c3 0307 	rsb	r3, r3, #7
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25a      	sxtb	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b07      	cmp	r3, #7
 800121c:	ddd0      	ble.n	80011c0 <assignBytes+0x1e>
		    }
		}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	af02      	add	r7, sp, #8
 8001232:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff f93e 	bl	80004b8 <__aeabi_f2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <cell12_Temp_01_Set+0x148>)
 8001242:	f7ff fabb 	bl	80007bc <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <cell12_Temp_01_Set+0x14c>)
 8001254:	f7ff f988 	bl	8000568 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fb94 	bl	800098c <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2240      	movs	r2, #64	@ 0x40
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00b fb5f 	bl	800c934 <memset>
 8001276:	2301      	movs	r3, #1
 8001278:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001282:	f7ff ff6d 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001286:	f107 0208 	add.w	r2, r7, #8
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff86 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	4838      	ldr	r0, [pc, #224]	@ (800137c <cell12_Temp_01_Set+0x150>)
 800129c:	f007 fe0e 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f006 ff63 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2102      	movs	r1, #2
 80012aa:	4835      	ldr	r0, [pc, #212]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012ac:	f007 fe06 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f006 ff5b 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4831      	ldr	r0, [pc, #196]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012bc:	f007 fdfe 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2202      	movs	r2, #2
 80012c6:	492f      	ldr	r1, [pc, #188]	@ (8001384 <cell12_Temp_01_Set+0x158>)
 80012c8:	482f      	ldr	r0, [pc, #188]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 80012ca:	f009 fbc4 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2102      	movs	r1, #2
 80012d2:	482b      	ldr	r0, [pc, #172]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012d4:	f007 fdf2 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f006 ff47 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2102      	movs	r1, #2
 80012e2:	4827      	ldr	r0, [pc, #156]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012e4:	f007 fdea 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	2202      	movs	r2, #2
 80012ee:	4927      	ldr	r1, [pc, #156]	@ (800138c <cell12_Temp_01_Set+0x160>)
 80012f0:	4825      	ldr	r0, [pc, #148]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 80012f2:	f009 fbb0 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2102      	movs	r1, #2
 80012fa:	4821      	ldr	r0, [pc, #132]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012fc:	f007 fdde 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f006 ff33 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2102      	movs	r1, #2
 800130a:	481d      	ldr	r0, [pc, #116]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 800130c:	f007 fdd6 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	2202      	movs	r2, #2
 800131a:	481b      	ldr	r0, [pc, #108]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 800131c:	f009 fb9b 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2102      	movs	r1, #2
 8001324:	4816      	ldr	r0, [pc, #88]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001326:	f007 fdc9 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f006 ff1e 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	4812      	ldr	r0, [pc, #72]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001336:	f007 fdc1 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <cell12_Temp_01_Set+0x164>)
 8001344:	4913      	ldr	r1, [pc, #76]	@ (8001394 <cell12_Temp_01_Set+0x168>)
 8001346:	4810      	ldr	r0, [pc, #64]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 8001348:	f009 fde2 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2102      	movs	r1, #2
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001352:	f007 fdb3 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f006 ff08 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	4806      	ldr	r0, [pc, #24]	@ (800137c <cell12_Temp_01_Set+0x150>)
 8001362:	f007 fdab 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001366:	200a      	movs	r0, #10
 8001368:	f006 ff00 	bl	800816c <HAL_Delay>

}
 800136c:	bf00      	nop
 800136e:	3750      	adds	r7, #80	@ 0x50
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40490000 	.word	0x40490000
 8001378:	40900000 	.word	0x40900000
 800137c:	40020000 	.word	0x40020000
 8001380:	40020800 	.word	0x40020800
 8001384:	200009c0 	.word	0x200009c0
 8001388:	200018d0 	.word	0x200018d0
 800138c:	20000160 	.word	0x20000160
 8001390:	200009c4 	.word	0x200009c4
 8001394:	20000164 	.word	0x20000164

08001398 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	@ 0x58
 800139c:	af02      	add	r7, sp, #8
 800139e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f888 	bl	80004b8 <__aeabi_f2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <cell12_Temp_02_Set+0x15c>)
 80013ae:	f7ff fa05 	bl	80007bc <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <cell12_Temp_02_Set+0x160>)
 80013c0:	f7ff f8d2 	bl	8000568 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fade 	bl	800098c <__aeabi_d2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b faa9 	bl	800c934 <memset>
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013ee:	f7ff feb7 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fed0 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2101      	movs	r1, #1
 8001406:	483d      	ldr	r0, [pc, #244]	@ (80014fc <cell12_Temp_02_Set+0x164>)
 8001408:	f007 fd58 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f006 fead 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001418:	4839      	ldr	r0, [pc, #228]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 800141a:	f007 fd4f 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141e:	200a      	movs	r0, #10
 8001420:	f006 fea4 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800142a:	4835      	ldr	r0, [pc, #212]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 800142c:	f007 fd46 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2202      	movs	r2, #2
 8001436:	4933      	ldr	r1, [pc, #204]	@ (8001504 <cell12_Temp_02_Set+0x16c>)
 8001438:	4833      	ldr	r0, [pc, #204]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 800143a:	f009 fb0c 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001444:	482e      	ldr	r0, [pc, #184]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001446:	f007 fd39 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f006 fe8e 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	482a      	ldr	r0, [pc, #168]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001458:	f007 fd30 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2202      	movs	r2, #2
 8001462:	492a      	ldr	r1, [pc, #168]	@ (800150c <cell12_Temp_02_Set+0x174>)
 8001464:	4828      	ldr	r0, [pc, #160]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 8001466:	f009 faf6 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001470:	4823      	ldr	r0, [pc, #140]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001472:	f007 fd23 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f006 fe78 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001482:	481f      	ldr	r0, [pc, #124]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001484:	f007 fd1a 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2202      	movs	r2, #2
 8001492:	481d      	ldr	r0, [pc, #116]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 8001494:	f009 fadf 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149e:	4818      	ldr	r0, [pc, #96]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014a0:	f007 fd0c 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f006 fe61 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014b2:	f007 fd03 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2302      	movs	r3, #2
 80014be:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <cell12_Temp_02_Set+0x178>)
 80014c0:	4914      	ldr	r1, [pc, #80]	@ (8001514 <cell12_Temp_02_Set+0x17c>)
 80014c2:	4811      	ldr	r0, [pc, #68]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 80014c4:	f009 fd24 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ce:	480c      	ldr	r0, [pc, #48]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014d0:	f007 fcf4 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f006 fe49 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <cell12_Temp_02_Set+0x164>)
 80014e0:	f007 fcec 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f006 fe41 	bl	800816c <HAL_Delay>

}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	@ 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40490000 	.word	0x40490000
 80014f8:	40900000 	.word	0x40900000
 80014fc:	40020800 	.word	0x40020800
 8001500:	40021400 	.word	0x40021400
 8001504:	200009c0 	.word	0x200009c0
 8001508:	200018d0 	.word	0x200018d0
 800150c:	20000160 	.word	0x20000160
 8001510:	200009c4 	.word	0x200009c4
 8001514:	20000164 	.word	0x20000164

08001518 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 8001518:	b580      	push	{r7, lr}
 800151a:	b096      	sub	sp, #88	@ 0x58
 800151c:	af02      	add	r7, sp, #8
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe ffc8 	bl	80004b8 <__aeabi_f2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <cell12_Temp_03_Set+0x14c>)
 800152e:	f7ff f945 	bl	80007bc <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <cell12_Temp_03_Set+0x150>)
 8001540:	f7ff f812 	bl	8000568 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa1e 	bl	800098c <__aeabi_d2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00b f9e9 	bl	800c934 <memset>
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800156e:	f7ff fdf7 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001572:	f107 0208 	add.w	r2, r7, #8
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe10 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001588:	4838      	ldr	r0, [pc, #224]	@ (800166c <cell12_Temp_03_Set+0x154>)
 800158a:	f007 fc97 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158e:	200a      	movs	r0, #10
 8001590:	f006 fdec 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	4834      	ldr	r0, [pc, #208]	@ (800166c <cell12_Temp_03_Set+0x154>)
 800159a:	f007 fc8f 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800159e:	200a      	movs	r0, #10
 80015a0:	f006 fde4 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	@ 0x40
 80015a8:	4830      	ldr	r0, [pc, #192]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015aa:	f007 fc87 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2202      	movs	r2, #2
 80015b4:	492e      	ldr	r1, [pc, #184]	@ (8001670 <cell12_Temp_03_Set+0x158>)
 80015b6:	482f      	ldr	r0, [pc, #188]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 80015b8:	f009 fa4d 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	482a      	ldr	r0, [pc, #168]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015c2:	f007 fc7b 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015c6:	200a      	movs	r0, #10
 80015c8:	f006 fdd0 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	4826      	ldr	r0, [pc, #152]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015d2:	f007 fc73 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	2202      	movs	r2, #2
 80015dc:	4926      	ldr	r1, [pc, #152]	@ (8001678 <cell12_Temp_03_Set+0x160>)
 80015de:	4825      	ldr	r0, [pc, #148]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 80015e0:	f009 fa39 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	4820      	ldr	r0, [pc, #128]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015ea:	f007 fc67 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f006 fdbc 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	481c      	ldr	r0, [pc, #112]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015fa:	f007 fc5f 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80015fe:	f107 0108 	add.w	r1, r7, #8
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2202      	movs	r2, #2
 8001608:	481a      	ldr	r0, [pc, #104]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 800160a:	f009 fa24 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	@ 0x40
 8001612:	4816      	ldr	r0, [pc, #88]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001614:	f007 fc52 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f006 fda7 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2140      	movs	r1, #64	@ 0x40
 8001622:	4812      	ldr	r0, [pc, #72]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001624:	f007 fc4a 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <cell12_Temp_03_Set+0x164>)
 8001632:	4913      	ldr	r1, [pc, #76]	@ (8001680 <cell12_Temp_03_Set+0x168>)
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 8001636:	f009 fc6b 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2140      	movs	r1, #64	@ 0x40
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001640:	f007 fc3c 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001644:	200a      	movs	r0, #10
 8001646:	f006 fd91 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001652:	f007 fc33 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001656:	200a      	movs	r0, #10
 8001658:	f006 fd88 	bl	800816c <HAL_Delay>

}
 800165c:	bf00      	nop
 800165e:	3750      	adds	r7, #80	@ 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40490000 	.word	0x40490000
 8001668:	40900000 	.word	0x40900000
 800166c:	40021400 	.word	0x40021400
 8001670:	200009c0 	.word	0x200009c0
 8001674:	200018d0 	.word	0x200018d0
 8001678:	20000160 	.word	0x20000160
 800167c:	200009c4 	.word	0x200009c4
 8001680:	20000164 	.word	0x20000164

08001684 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af02      	add	r7, sp, #8
 800168a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff12 	bl	80004b8 <__aeabi_f2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <cell11_Temp_01_Set+0x160>)
 800169a:	f7ff f88f 	bl	80007bc <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <cell11_Temp_01_Set+0x164>)
 80016ac:	f7fe ff5c 	bl	8000568 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f968 	bl	800098c <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2240      	movs	r2, #64	@ 0x40
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b f933 	bl	800c934 <memset>
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016da:	f7ff fd41 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80016de:	f107 0208 	add.w	r2, r7, #8
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd5a 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f4:	483d      	ldr	r0, [pc, #244]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80016f6:	f007 fbe1 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f006 fd36 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	4839      	ldr	r0, [pc, #228]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001708:	f007 fbd8 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f006 fd2d 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001718:	4834      	ldr	r0, [pc, #208]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 800171a:	f007 fbcf 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	2202      	movs	r2, #2
 8001724:	4932      	ldr	r1, [pc, #200]	@ (80017f0 <cell11_Temp_01_Set+0x16c>)
 8001726:	4833      	ldr	r0, [pc, #204]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001728:	f009 f995 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001732:	482e      	ldr	r0, [pc, #184]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001734:	f007 fbc2 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f006 fd17 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001744:	4829      	ldr	r0, [pc, #164]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001746:	f007 fbb9 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	2202      	movs	r2, #2
 8001750:	4929      	ldr	r1, [pc, #164]	@ (80017f8 <cell11_Temp_01_Set+0x174>)
 8001752:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001754:	f009 f97f 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175e:	4823      	ldr	r0, [pc, #140]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001760:	f007 fbac 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f006 fd01 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001772:	f007 fba3 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001776:	f107 0108 	add.w	r1, r7, #8
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2202      	movs	r2, #2
 8001780:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001782:	f009 f968 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 800178e:	f007 fb95 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001792:	200a      	movs	r0, #10
 8001794:	f006 fcea 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800179e:	4813      	ldr	r0, [pc, #76]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017a0:	f007 fb8c 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2302      	movs	r3, #2
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <cell11_Temp_01_Set+0x178>)
 80017ae:	4914      	ldr	r1, [pc, #80]	@ (8001800 <cell11_Temp_01_Set+0x17c>)
 80017b0:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 80017b2:	f009 fbad 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017be:	f007 fb7d 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f006 fcd2 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017d0:	f007 fb74 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f006 fcc9 	bl	800816c <HAL_Delay>

}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	@ 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40490000 	.word	0x40490000
 80017e8:	40900000 	.word	0x40900000
 80017ec:	40021c00 	.word	0x40021c00
 80017f0:	200009c0 	.word	0x200009c0
 80017f4:	20001928 	.word	0x20001928
 80017f8:	20000160 	.word	0x20000160
 80017fc:	200009c4 	.word	0x200009c4
 8001800:	20000164 	.word	0x20000164

08001804 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001804:	b580      	push	{r7, lr}
 8001806:	b096      	sub	sp, #88	@ 0x58
 8001808:	af02      	add	r7, sp, #8
 800180a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe52 	bl	80004b8 <__aeabi_f2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <cell11_Temp_02_Set+0x160>)
 800181a:	f7fe ffcf 	bl	80007bc <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <cell11_Temp_02_Set+0x164>)
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f8a8 	bl	800098c <__aeabi_d2iz>
 800183c:	4603      	mov	r3, r0
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b f873 	bl	800c934 <memset>
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4619      	mov	r1, r3
 8001858:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800185a:	f7ff fc81 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc9a 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001874:	483d      	ldr	r0, [pc, #244]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001876:	f007 fb21 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f006 fc76 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001886:	4839      	ldr	r0, [pc, #228]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001888:	f007 fb18 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800188c:	200a      	movs	r0, #10
 800188e:	f006 fc6d 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001898:	4834      	ldr	r0, [pc, #208]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800189a:	f007 fb0f 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	2202      	movs	r2, #2
 80018a4:	4932      	ldr	r1, [pc, #200]	@ (8001970 <cell11_Temp_02_Set+0x16c>)
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 80018a8:	f009 f8d5 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b2:	482e      	ldr	r0, [pc, #184]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018b4:	f007 fb02 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f006 fc57 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c4:	4829      	ldr	r0, [pc, #164]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018c6:	f007 faf9 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	2202      	movs	r2, #2
 80018d0:	4929      	ldr	r1, [pc, #164]	@ (8001978 <cell11_Temp_02_Set+0x174>)
 80018d2:	4828      	ldr	r0, [pc, #160]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 80018d4:	f009 f8bf 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018de:	4823      	ldr	r0, [pc, #140]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018e0:	f007 faec 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018e4:	200a      	movs	r0, #10
 80018e6:	f006 fc41 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f0:	481e      	ldr	r0, [pc, #120]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018f2:	f007 fae3 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80018f6:	f107 0108 	add.w	r1, r7, #8
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	2202      	movs	r2, #2
 8001900:	481c      	ldr	r0, [pc, #112]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 8001902:	f009 f8a8 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800190e:	f007 fad5 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001912:	200a      	movs	r0, #10
 8001914:	f006 fc2a 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	4813      	ldr	r0, [pc, #76]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001920:	f007 facc 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2302      	movs	r3, #2
 800192c:	4a13      	ldr	r2, [pc, #76]	@ (800197c <cell11_Temp_02_Set+0x178>)
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <cell11_Temp_02_Set+0x17c>)
 8001930:	4810      	ldr	r0, [pc, #64]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 8001932:	f009 faed 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800193c:	480b      	ldr	r0, [pc, #44]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800193e:	f007 fabd 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f006 fc12 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001950:	f007 fab4 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f006 fc09 	bl	800816c <HAL_Delay>

}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	@ 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40490000 	.word	0x40490000
 8001968:	40900000 	.word	0x40900000
 800196c:	40021c00 	.word	0x40021c00
 8001970:	200009c0 	.word	0x200009c0
 8001974:	20001928 	.word	0x20001928
 8001978:	20000160 	.word	0x20000160
 800197c:	200009c4 	.word	0x200009c4
 8001980:	20000164 	.word	0x20000164

08001984 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8001984:	b580      	push	{r7, lr}
 8001986:	b096      	sub	sp, #88	@ 0x58
 8001988:	af02      	add	r7, sp, #8
 800198a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fd92 	bl	80004b8 <__aeabi_f2d>
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <cell11_Temp_03_Set+0x15c>)
 800199a:	f7fe ff0f 	bl	80007bc <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <cell11_Temp_03_Set+0x160>)
 80019ac:	f7fe fddc 	bl	8000568 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7fe ffe8 	bl	800098c <__aeabi_d2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2240      	movs	r2, #64	@ 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00a ffb3 	bl	800c934 <memset>
 80019ce:	2301      	movs	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80019da:	f7ff fbc1 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80019de:	f107 0208 	add.w	r2, r7, #8
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fbda 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2140      	movs	r1, #64	@ 0x40
 80019f2:	483d      	ldr	r0, [pc, #244]	@ (8001ae8 <cell11_Temp_03_Set+0x164>)
 80019f4:	f007 fa62 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f006 fbb7 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a04:	4839      	ldr	r0, [pc, #228]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a06:	f007 fa59 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f006 fbae 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a16:	4835      	ldr	r0, [pc, #212]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a18:	f007 fa50 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	2202      	movs	r2, #2
 8001a22:	4933      	ldr	r1, [pc, #204]	@ (8001af0 <cell11_Temp_03_Set+0x16c>)
 8001a24:	4833      	ldr	r0, [pc, #204]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a26:	f009 f816 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a30:	482e      	ldr	r0, [pc, #184]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a32:	f007 fa43 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a36:	200a      	movs	r0, #10
 8001a38:	f006 fb98 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a42:	482a      	ldr	r0, [pc, #168]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a44:	f007 fa3a 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	492a      	ldr	r1, [pc, #168]	@ (8001af8 <cell11_Temp_03_Set+0x174>)
 8001a50:	4828      	ldr	r0, [pc, #160]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a52:	f009 f800 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a5c:	4823      	ldr	r0, [pc, #140]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a5e:	f007 fa2d 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f006 fb82 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6e:	481f      	ldr	r0, [pc, #124]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a70:	f007 fa24 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001a74:	f107 0108 	add.w	r1, r7, #8
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	481d      	ldr	r0, [pc, #116]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a80:	f008 ffe9 	bl	800aa56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a8c:	f007 fa16 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a90:	200a      	movs	r0, #10
 8001a92:	f006 fb6b 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a9c:	4813      	ldr	r0, [pc, #76]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a9e:	f007 fa0d 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <cell11_Temp_03_Set+0x178>)
 8001aac:	4914      	ldr	r1, [pc, #80]	@ (8001b00 <cell11_Temp_03_Set+0x17c>)
 8001aae:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001ab0:	f009 fa2e 	bl	800af10 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aba:	480c      	ldr	r0, [pc, #48]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001abc:	f007 f9fe 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f006 fb53 	bl	800816c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <cell11_Temp_03_Set+0x164>)
 8001acc:	f007 f9f6 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ad0:	200a      	movs	r0, #10
 8001ad2:	f006 fb4b 	bl	800816c <HAL_Delay>

}
 8001ad6:	bf00      	nop
 8001ad8:	3750      	adds	r7, #80	@ 0x50
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40490000 	.word	0x40490000
 8001ae4:	40900000 	.word	0x40900000
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	40020400 	.word	0x40020400
 8001af0:	200009c0 	.word	0x200009c0
 8001af4:	20001928 	.word	0x20001928
 8001af8:	20000160 	.word	0x20000160
 8001afc:	200009c4 	.word	0x200009c4
 8001b00:	20000164 	.word	0x20000164

08001b04 <Set_Resistance>:
	HAL_Delay(10);

}


void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
	switch (tempCardId){
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d845      	bhi.n	8001ba8 <Set_Resistance+0xa4>
 8001b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <Set_Resistance+0x20>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b4f 	.word	0x08001b4f
 8001b2c:	08001b61 	.word	0x08001b61
 8001b30:	08001b73 	.word	0x08001b73
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b97 	.word	0x08001b97


	case 0x01:
		cell12_Temp_01_Set(temperature);
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f7ff fb6f 	bl	800122c <cell12_Temp_01_Set>

	case 0x02:
		cell12_Temp_02_Set(temperature);
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	f7ff fc1c 	bl	8001398 <cell12_Temp_02_Set>

	case 0x03:
		cell12_Temp_03_Set(temperature);
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6e:	f7ff fcd3 	bl	8001518 <cell12_Temp_03_Set>

	case 0x04:
		cell11_Temp_01_Set(temperature);
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b80:	f7ff fd80 	bl	8001684 <cell11_Temp_01_Set>

	case 0x05:
		cell11_Temp_02_Set(temperature);
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	f7ff fe37 	bl	8001804 <cell11_Temp_02_Set>

	case 0x06:
		cell11_Temp_03_Set(temperature);
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	f7ff feee 	bl	8001984 <cell11_Temp_03_Set>


	}


}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	72fb      	strb	r3, [r7, #11]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bc6:	d01a      	beq.n	8001bfe <u8x8_stm32_gpio_and_delay+0x4e>
 8001bc8:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bca:	dc1f      	bgt.n	8001c0c <u8x8_stm32_gpio_and_delay+0x5c>
 8001bcc:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bce:	d00f      	beq.n	8001bf0 <u8x8_stm32_gpio_and_delay+0x40>
 8001bd0:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bd2:	dc1b      	bgt.n	8001c0c <u8x8_stm32_gpio_and_delay+0x5c>
 8001bd4:	2b28      	cmp	r3, #40	@ 0x28
 8001bd6:	d002      	beq.n	8001bde <u8x8_stm32_gpio_and_delay+0x2e>
 8001bd8:	2b29      	cmp	r3, #41	@ 0x29
 8001bda:	d004      	beq.n	8001be6 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8001bdc:	e016      	b.n	8001c0c <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f006 fac4 	bl	800816c <HAL_Delay>
            break;
 8001be4:	e013      	b.n	8001c0e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8001be6:	7abb      	ldrb	r3, [r7, #10]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 fabf 	bl	800816c <HAL_Delay>
            break;
 8001bee:	e00e      	b.n	8001c0e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <u8x8_stm32_gpio_and_delay+0x68>)
 8001bf8:	f007 f960 	bl	8008ebc <HAL_GPIO_WritePin>
            break;
 8001bfc:	e007      	b.n	8001c0e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001bfe:	7abb      	ldrb	r3, [r7, #10]
 8001c00:	461a      	mov	r2, r3
 8001c02:	2104      	movs	r1, #4
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <u8x8_stm32_gpio_and_delay+0x68>)
 8001c06:	f007 f959 	bl	8008ebc <HAL_GPIO_WritePin>
            break;
 8001c0a:	e000      	b.n	8001c0e <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8001c0c:	bf00      	nop
    }
    return 1U;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021800 	.word	0x40021800

08001c1c <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	72fb      	strb	r3, [r7, #11]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	3b14      	subs	r3, #20
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d83e      	bhi.n	8001cb8 <u8x8_byte_4wire_hw_spi+0x9c>
 8001c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <u8x8_byte_4wire_hw_spi+0x24>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbf 	.word	0x08001cbf
 8001c44:	08001cb9 	.word	0x08001cb9
 8001c48:	08001cb9 	.word	0x08001cb9
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	08001c95 	.word	0x08001c95
 8001c54:	08001ca7 	.word	0x08001ca7
 8001c58:	08001cb9 	.word	0x08001cb9
 8001c5c:	08001cb9 	.word	0x08001cb9
 8001c60:	08001cb9 	.word	0x08001cb9
 8001c64:	08001cb9 	.word	0x08001cb9
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001cb9 	.word	0x08001cb9
 8001c70:	08001c87 	.word	0x08001c87
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001c74:	7abb      	ldrb	r3, [r7, #10]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <u8x8_byte_4wire_hw_spi+0xb0>)
 8001c80:	f008 fee9 	bl	800aa56 <HAL_SPI_Transmit>
            break;
 8001c84:	e01c      	b.n	8001cc0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001c86:	7abb      	ldrb	r3, [r7, #10]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	4810      	ldr	r0, [pc, #64]	@ (8001cd0 <u8x8_byte_4wire_hw_spi+0xb4>)
 8001c8e:	f007 f915 	bl	8008ebc <HAL_GPIO_WritePin>
            break;
 8001c92:	e015      	b.n	8001cc0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001ca0:	f007 f90c 	bl	8008ebc <HAL_GPIO_WritePin>
            break;
 8001ca4:	e00c      	b.n	8001cc0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	461a      	mov	r2, r3
 8001cae:	2104      	movs	r1, #4
 8001cb0:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001cb2:	f007 f903 	bl	8008ebc <HAL_GPIO_WritePin>
            break;
 8001cb6:	e003      	b.n	8001cc0 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
            break;
 8001cbc:	e000      	b.n	8001cc0 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8001cbe:	bf00      	nop
    }
    return retVal;
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20001980 	.word	0x20001980
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40020c00 	.word	0x40020c00

08001cd8 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2110      	movs	r1, #16
 8001ce0:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <Display_Init+0x3c>)
 8001ce2:	f007 f8eb 	bl	8008ebc <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <Display_Init+0x40>)
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <Display_Init+0x44>)
 8001cea:	490d      	ldr	r1, [pc, #52]	@ (8001d20 <Display_Init+0x48>)
 8001cec:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <Display_Init+0x4c>)
 8001cee:	f000 fa17 	bl	8002120 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001cf2:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <Display_Init+0x4c>)
 8001cf4:	f001 fe22 	bl	800393c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	480a      	ldr	r0, [pc, #40]	@ (8001d24 <Display_Init+0x4c>)
 8001cfc:	f001 fe2d 	bl	800395a <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <Display_Init+0x4c>)
 8001d02:	f000 f9e7 	bl	80020d4 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001d06:	2178      	movs	r1, #120	@ 0x78
 8001d08:	4806      	ldr	r0, [pc, #24]	@ (8001d24 <Display_Init+0x4c>)
 8001d0a:	f001 fe37 	bl	800397c <u8x8_SetContrast>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021800 	.word	0x40021800
 8001d18:	08001bb1 	.word	0x08001bb1
 8001d1c:	08001c1d 	.word	0x08001c1d
 8001d20:	0800d740 	.word	0x0800d740
 8001d24:	200009c8 	.word	0x200009c8

08001d28 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001d2e:	4824      	ldr	r0, [pc, #144]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d30:	f000 f98e 	bl	8002050 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001d34:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <Display_MainTitlePage+0x9c>)
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2340      	movs	r3, #64	@ 0x40
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	481f      	ldr	r0, [pc, #124]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d44:	f000 f8b6 	bl	8001eb4 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8001d48:	481d      	ldr	r0, [pc, #116]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d4a:	f000 f995 	bl	8002078 <u8g2_NextPage>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ef      	bne.n	8001d34 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8001d54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d58:	f006 fa08 	bl	800816c <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8001d5c:	4818      	ldr	r0, [pc, #96]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d5e:	f000 f8ec 	bl	8001f3a <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d62:	4919      	ldr	r1, [pc, #100]	@ (8001dc8 <Display_MainTitlePage+0xa0>)
 8001d64:	4816      	ldr	r0, [pc, #88]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d66:	f000 ff8b 	bl	8002c80 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <Display_MainTitlePage+0xa4>)
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	212a      	movs	r1, #42	@ 0x2a
 8001d70:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d72:	f000 fee3 	bl	8002b3c <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d76:	4914      	ldr	r1, [pc, #80]	@ (8001dc8 <Display_MainTitlePage+0xa0>)
 8001d78:	4811      	ldr	r0, [pc, #68]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d7a:	f000 ff81 	bl	8002c80 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <Display_MainTitlePage+0xa8>)
 8001d80:	2221      	movs	r2, #33	@ 0x21
 8001d82:	2106      	movs	r1, #6
 8001d84:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d86:	f000 fed9 	bl	8002b3c <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f006 f9ee 	bl	800816c <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001d90:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d92:	f000 f8d2 	bl	8001f3a <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8001d96:	480a      	ldr	r0, [pc, #40]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001d98:	f000 f96e 	bl	8002078 <u8g2_NextPage>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1c5      	bne.n	8001d2e <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001da2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001da6:	f006 f9e1 	bl	800816c <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <Display_MainTitlePage+0x98>)
 8001dac:	f000 f8c5 	bl	8001f3a <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2110      	movs	r1, #16
 8001db4:	4807      	ldr	r0, [pc, #28]	@ (8001dd4 <Display_MainTitlePage+0xac>)
 8001db6:	f007 f881 	bl	8008ebc <HAL_GPIO_WritePin>
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200009c8 	.word	0x200009c8
 8001dc4:	20000168 	.word	0x20000168
 8001dc8:	0800cae8 	.word	0x0800cae8
 8001dcc:	0800ca68 	.word	0x0800ca68
 8001dd0:	0800ca70 	.word	0x0800ca70
 8001dd4:	40021800 	.word	0x40021800

08001dd8 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	817b      	strh	r3, [r7, #10]
 8001dea:	460b      	mov	r3, r1
 8001dec:	813b      	strh	r3, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001df8:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001dfa:	7dbb      	ldrb	r3, [r7, #22]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001e08:	897a      	ldrh	r2, [r7, #10]
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b298      	uxth	r0, r3
 8001e10:	893b      	ldrh	r3, [r7, #8]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 f875 	bl	8002f0e <u8g2_IsIntersection>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d040      	beq.n	8001eac <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001e2e:	e035      	b.n	8001e9c <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	4013      	ands	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	7dba      	ldrb	r2, [r7, #22]
 8001e42:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e46:	893a      	ldrh	r2, [r7, #8]
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 ff9e 	bl	8002d92 <u8g2_DrawHVLine>
 8001e56:	e010      	b.n	8001e7a <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	7d7a      	ldrb	r2, [r7, #21]
 8001e66:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e6a:	893a      	ldrh	r2, [r7, #8]
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2301      	movs	r3, #1
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 ff8c 	bl	8002d92 <u8g2_DrawHVLine>
    }
    x++;
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
      b++;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	3301      	adds	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1c6      	bne.n	8001e30 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	7dba      	ldrb	r2, [r7, #22]
 8001ea6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001eaa:	e000      	b.n	8001eae <u8g2_DrawHXBM+0xd6>
    return;
 8001eac:	bf00      	nop
}
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001ed2:	8afb      	ldrh	r3, [r7, #22]
 8001ed4:	3307      	adds	r3, #7
 8001ed6:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001ed8:	8afb      	ldrh	r3, [r7, #22]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ede:	897a      	ldrh	r2, [r7, #10]
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	893a      	ldrh	r2, [r7, #8]
 8001ee8:	8c3b      	ldrh	r3, [r7, #32]
 8001eea:	4413      	add	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	893a      	ldrh	r2, [r7, #8]
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f001 f809 	bl	8002f0e <u8g2_IsIntersection>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001f02:	e012      	b.n	8001f2a <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001f04:	88f8      	ldrh	r0, [r7, #6]
 8001f06:	893a      	ldrh	r2, [r7, #8]
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff ff61 	bl	8001dd8 <u8g2_DrawHXBM>
    bitmap += blen;
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1a:	4413      	add	r3, r2
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001f1e:	893b      	ldrh	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	813b      	strh	r3, [r7, #8]
    h--;
 8001f24:	8c3b      	ldrh	r3, [r7, #32]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001f2a:	8c3b      	ldrh	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e9      	bne.n	8001f04 <u8g2_DrawXBM+0x50>
 8001f30:	e000      	b.n	8001f34 <u8g2_DrawXBM+0x80>
    return;
 8001f32:	bf00      	nop
  }
}
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	7c1b      	ldrb	r3, [r3, #16]
 8001f48:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f50:	461a      	mov	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00a fce3 	bl	800c934 <memset>
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
 8001f82:	4613      	mov	r3, r2
 8001f84:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	7c1b      	ldrb	r3, [r3, #16]
 8001f8c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f96:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	89ba      	ldrh	r2, [r7, #12]
 8001f9e:	fb12 f303 	smulbb	r3, r2, r3
 8001fa2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001fa4:	89bb      	ldrh	r3, [r7, #12]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001faa:	89bb      	ldrh	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001fb2:	7bf9      	ldrb	r1, [r7, #15]
 8001fb4:	78ba      	ldrb	r2, [r7, #2]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f001 fc8b 	bl	80038da <u8x8_DrawTile>
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fde:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fe6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	7c5b      	ldrb	r3, [r3, #17]
 8001fee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001ff0:	7bba      	ldrb	r2, [r7, #14]
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffbd 	bl	8001f76 <u8g2_send_tile_row>
    src_row++;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	3301      	adds	r3, #1
 8002006:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	7b7b      	ldrb	r3, [r7, #13]
 800200c:	429a      	cmp	r2, r3
 800200e:	d203      	bcs.n	8002018 <u8g2_send_buffer+0x4c>
 8002010:	7bba      	ldrb	r2, [r7, #14]
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3eb      	bcc.n	8001ff0 <u8g2_send_buffer+0x24>
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff69 	bl	8001f3a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffd8 	bl	8002020 <u8g2_SetBufferCurrTileRow>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffa3 	bl	8001fcc <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800208c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	4413      	add	r3, r2
 8002098:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	7c5b      	ldrb	r3, [r3, #17]
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d304      	bcc.n	80020b0 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 fc79 	bl	800399e <u8x8_RefreshDisplay>
    return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e00d      	b.n	80020cc <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff3d 	bl	8001f3a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffab 	bl	8002020 <u8g2_SetBufferCurrTileRow>
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffb7 	bl	8002050 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffc8 	bl	8002078 <u8g2_NextPage>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff95 	bl	8002020 <u8g2_SetBufferCurrTileRow>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2208      	movs	r2, #8
 800210c:	701a      	strb	r2, [r3, #0]
  return buf;
 800210e:	4b03      	ldr	r3, [pc, #12]	@ (800211c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	20000a5c 	.word	0x20000a5c

08002120 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <u8g2_Setup_st7565_64128n_f+0x44>)
 8002136:	490c      	ldr	r1, [pc, #48]	@ (8002168 <u8g2_Setup_st7565_64128n_f+0x48>)
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f001 fc91 	bl	8003a60 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800213e:	f107 0313 	add.w	r3, r7, #19
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffdc 	bl	8002100 <u8g2_m_16_8_f>
 8002148:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800214a:	7cfa      	ldrb	r2, [r7, #19]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <u8g2_Setup_st7565_64128n_f+0x4c>)
 8002152:	6979      	ldr	r1, [r7, #20]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 ffc4 	bl	80030e2 <u8g2_SetupBuffer>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	080035f5 	.word	0x080035f5
 8002168:	08003795 	.word	0x08003795
 800216c:	08002f65 	.word	0x08002f65

08002170 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	81fb      	strh	r3, [r7, #14]
    font++;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3301      	adds	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	4413      	add	r3, r2
 80021c4:	81fb      	strh	r3, [r7, #14]
    return pos;
 80021c6:	89fb      	ldrh	r3, [r7, #14]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80021de:	2100      	movs	r1, #0
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f7ff ffc5 	bl	8002170 <u8g2_font_get_byte>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021ee:	2101      	movs	r1, #1
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	f7ff ffbd 	bl	8002170 <u8g2_font_get_byte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80021fe:	2102      	movs	r1, #2
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f7ff ffb5 	bl	8002170 <u8g2_font_get_byte>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800220e:	2103      	movs	r1, #3
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f7ff ffad 	bl	8002170 <u8g2_font_get_byte>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800221e:	2104      	movs	r1, #4
 8002220:	6838      	ldr	r0, [r7, #0]
 8002222:	f7ff ffa5 	bl	8002170 <u8g2_font_get_byte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800222e:	2105      	movs	r1, #5
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	f7ff ff9d 	bl	8002170 <u8g2_font_get_byte>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800223e:	2106      	movs	r1, #6
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f7ff ff95 	bl	8002170 <u8g2_font_get_byte>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800224e:	2107      	movs	r1, #7
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f7ff ff8d 	bl	8002170 <u8g2_font_get_byte>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800225e:	2108      	movs	r1, #8
 8002260:	6838      	ldr	r0, [r7, #0]
 8002262:	f7ff ff85 	bl	8002170 <u8g2_font_get_byte>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800226e:	2109      	movs	r1, #9
 8002270:	6838      	ldr	r0, [r7, #0]
 8002272:	f7ff ff7d 	bl	8002170 <u8g2_font_get_byte>
 8002276:	4603      	mov	r3, r0
 8002278:	b25a      	sxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800227e:	210a      	movs	r1, #10
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f7ff ff75 	bl	8002170 <u8g2_font_get_byte>
 8002286:	4603      	mov	r3, r0
 8002288:	b25a      	sxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800228e:	210b      	movs	r1, #11
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f7ff ff6d 	bl	8002170 <u8g2_font_get_byte>
 8002296:	4603      	mov	r3, r0
 8002298:	b25a      	sxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800229e:	210c      	movs	r1, #12
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f7ff ff65 	bl	8002170 <u8g2_font_get_byte>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b25a      	sxtb	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80022ae:	210d      	movs	r1, #13
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	f7ff ff5d 	bl	8002170 <u8g2_font_get_byte>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b25a      	sxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80022be:	210e      	movs	r1, #14
 80022c0:	6838      	ldr	r0, [r7, #0]
 80022c2:	f7ff ff55 	bl	8002170 <u8g2_font_get_byte>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b25a      	sxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80022ce:	210f      	movs	r1, #15
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	f7ff ff4d 	bl	8002170 <u8g2_font_get_byte>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b25a      	sxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022de:	2110      	movs	r1, #16
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f7ff ff45 	bl	8002170 <u8g2_font_get_byte>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022ee:	2111      	movs	r1, #17
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f7ff ff4f 	bl	8002194 <u8g2_font_get_word>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80022fe:	2113      	movs	r1, #19
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f7ff ff47 	bl	8002194 <u8g2_font_get_word>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800230e:	2115      	movs	r1, #21
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f7ff ff3f 	bl	8002194 <u8g2_font_get_word>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	82da      	strh	r2, [r3, #22]
#endif
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7b1b      	ldrb	r3, [r3, #12]
 8002336:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	7b7b      	ldrb	r3, [r7, #13]
 8002344:	fa42 f303 	asr.w	r3, r2, r3
 8002348:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800234a:	7b7b      	ldrb	r3, [r7, #13]
 800234c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800234e:	7bba      	ldrb	r2, [r7, #14]
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	4413      	add	r3, r2
 8002354:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	2b07      	cmp	r3, #7
 800235a:	d91a      	bls.n	8002392 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800235c:	2308      	movs	r3, #8
 800235e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002360:	7b3a      	ldrb	r2, [r7, #12]
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	b25a      	sxtb	r2, r3
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4313      	orrs	r3, r2
 8002388:	b25b      	sxtb	r3, r3
 800238a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	3b08      	subs	r3, #8
 8002390:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	4013      	ands	r3, r2
 80023a6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7bba      	ldrb	r2, [r7, #14]
 80023ac:	731a      	strb	r2, [r3, #12]
  return val;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffaa 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 80023d2:	4603      	mov	r3, r0
 80023d4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	3b01      	subs	r3, #1
 80023de:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80023e0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	73fb      	strb	r3, [r7, #15]
  return v;
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8002402:	b490      	push	{r4, r7}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4604      	mov	r4, r0
 800240a:	4608      	mov	r0, r1
 800240c:	4611      	mov	r1, r2
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	80fb      	strh	r3, [r7, #6]
 8002414:	4603      	mov	r3, r0
 8002416:	717b      	strb	r3, [r7, #5]
 8002418:	460b      	mov	r3, r1
 800241a:	713b      	strb	r3, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d014      	beq.n	8002450 <u8g2_add_vector_y+0x4e>
 8002426:	2b02      	cmp	r3, #2
 8002428:	dc19      	bgt.n	800245e <u8g2_add_vector_y+0x5c>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <u8g2_add_vector_y+0x32>
 800242e:	2b01      	cmp	r3, #1
 8002430:	d007      	beq.n	8002442 <u8g2_add_vector_y+0x40>
 8002432:	e014      	b.n	800245e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8002434:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002438:	b29a      	uxth	r2, r3
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	4413      	add	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
      break;
 8002440:	e014      	b.n	800246c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8002442:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002446:	b29a      	uxth	r2, r3
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4413      	add	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
      break;
 800244e:	e00d      	b.n	800246c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002450:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002454:	b29b      	uxth	r3, r3
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	80fb      	strh	r3, [r7, #6]
      break;
 800245c:	e006      	b.n	800246c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800245e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002462:	b29b      	uxth	r3, r3
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	80fb      	strh	r3, [r7, #6]
      break;      
 800246a:	bf00      	nop
  }
  return dy;
 800246c:	88fb      	ldrh	r3, [r7, #6]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bc90      	pop	{r4, r7}
 8002476:	4770      	bx	lr

08002478 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002478:	b490      	push	{r4, r7}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4604      	mov	r4, r0
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4623      	mov	r3, r4
 8002488:	80fb      	strh	r3, [r7, #6]
 800248a:	4603      	mov	r3, r0
 800248c:	717b      	strb	r3, [r7, #5]
 800248e:	460b      	mov	r3, r1
 8002490:	713b      	strb	r3, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d014      	beq.n	80024c6 <u8g2_add_vector_x+0x4e>
 800249c:	2b02      	cmp	r3, #2
 800249e:	dc19      	bgt.n	80024d4 <u8g2_add_vector_x+0x5c>
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <u8g2_add_vector_x+0x32>
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d007      	beq.n	80024b8 <u8g2_add_vector_x+0x40>
 80024a8:	e014      	b.n	80024d4 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80024aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4413      	add	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
      break;
 80024b6:	e014      	b.n	80024e2 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80024b8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	80fb      	strh	r3, [r7, #6]
      break;
 80024c4:	e00d      	b.n	80024e2 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80024c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	80fb      	strh	r3, [r7, #6]
      break;
 80024d2:	e006      	b.n	80024e2 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80024d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	4413      	add	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
      break;      
 80024e0:	bf00      	nop
  }
  return dx;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc90      	pop	{r4, r7}
 80024ec:	4770      	bx	lr

080024ee <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b088      	sub	sp, #32
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70fb      	strb	r3, [r7, #3]
 80024fa:	4613      	mov	r3, r2
 80024fc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3360      	adds	r3, #96	@ 0x60
 8002502:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800250e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002516:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800251e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	7d7b      	ldrb	r3, [r7, #21]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800252c:	7dfa      	ldrb	r2, [r7, #23]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	429a      	cmp	r2, r3
 8002532:	d201      	bcs.n	8002538 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	889b      	ldrh	r3, [r3, #4]
 800253c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	88db      	ldrh	r3, [r3, #6]
 8002542:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002544:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002548:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	7c1b      	ldrb	r3, [r3, #16]
 8002550:	89b8      	ldrh	r0, [r7, #12]
 8002552:	f7ff ff91 	bl	8002478 <u8g2_add_vector_x>
 8002556:	4603      	mov	r3, r0
 8002558:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800255a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800255e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	7c1b      	ldrb	r3, [r3, #16]
 8002566:	8978      	ldrh	r0, [r7, #10]
 8002568:	f7ff ff4b 	bl	8002402 <u8g2_add_vector_y>
 800256c:	4603      	mov	r3, r0
 800256e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002570:	78bb      	ldrb	r3, [r7, #2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	7b9a      	ldrb	r2, [r3, #14]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002580:	7dbb      	ldrb	r3, [r7, #22]
 8002582:	b298      	uxth	r0, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	7c1b      	ldrb	r3, [r3, #16]
 8002588:	897a      	ldrh	r2, [r7, #10]
 800258a:	89b9      	ldrh	r1, [r7, #12]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4603      	mov	r3, r0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fbfe 	bl	8002d92 <u8g2_DrawHVLine>
 8002596:	e013      	b.n	80025c0 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	7b5b      	ldrb	r3, [r3, #13]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	7bda      	ldrb	r2, [r3, #15]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80025aa:	7dbb      	ldrb	r3, [r7, #22]
 80025ac:	b298      	uxth	r0, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	7c1b      	ldrb	r3, [r3, #16]
 80025b2:	897a      	ldrh	r2, [r7, #10]
 80025b4:	89b9      	ldrh	r1, [r7, #12]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4603      	mov	r3, r0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fbe9 	bl	8002d92 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80025c0:	7dfa      	ldrb	r2, [r7, #23]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d309      	bcc.n	80025dc <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80025c8:	7dfa      	ldrb	r2, [r7, #23]
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	757b      	strb	r3, [r7, #21]
    ly++;
 80025d4:	7d3b      	ldrb	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80025da:	e79d      	b.n	8002518 <u8g2_font_decode_len+0x2a>
      break;
 80025dc:	bf00      	nop
  }
  lx += cnt;
 80025de:	7d7a      	ldrb	r2, [r7, #21]
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	4413      	add	r3, r2
 80025e4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80025e6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80025ee:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	725a      	strb	r2, [r3, #9]
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3360      	adds	r3, #96	@ 0x60
 800260c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002620:	4619      	mov	r1, r3
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff fe7f 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 8002628:	4603      	mov	r3, r0
 800262a:	b25a      	sxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002636:	4619      	mov	r1, r3
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe74 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 800263e:	4603      	mov	r3, r0
 8002640:	b25a      	sxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	7b9b      	ldrb	r3, [r3, #14]
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	73da      	strb	r2, [r3, #15]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3360      	adds	r3, #96	@ 0x60
 800267a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffbd 	bl	80025fe <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800268a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8002692:	4619      	mov	r1, r3
 8002694:	6978      	ldr	r0, [r7, #20]
 8002696:	f7ff fe91 	bl	80023bc <u8g2_font_decode_get_signed_bits>
 800269a:	4603      	mov	r3, r0
 800269c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80026a4:	4619      	mov	r1, r3
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff fe88 	bl	80023bc <u8g2_font_decode_get_signed_bits>
 80026ac:	4603      	mov	r3, r0
 80026ae:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80026b6:	4619      	mov	r1, r3
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff fe7f 	bl	80023bc <u8g2_font_decode_get_signed_bits>
 80026be:	4603      	mov	r3, r0
 80026c0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f340 80d7 	ble.w	800287c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	8898      	ldrh	r0, [r3, #4]
 80026d2:	7cfa      	ldrb	r2, [r7, #19]
 80026d4:	7c7b      	ldrb	r3, [r7, #17]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	425b      	negs	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	b25a      	sxtb	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	7c1b      	ldrb	r3, [r3, #16]
 80026e4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026e8:	f7ff fec6 	bl	8002478 <u8g2_add_vector_x>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	88d8      	ldrh	r0, [r3, #6]
 80026f8:	7cfa      	ldrb	r2, [r7, #19]
 80026fa:	7c7b      	ldrb	r3, [r7, #17]
 80026fc:	4413      	add	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	425b      	negs	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	b25a      	sxtb	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	7c1b      	ldrb	r3, [r3, #16]
 800270a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800270e:	f7ff fe78 	bl	8002402 <u8g2_add_vector_y>
 8002712:	4603      	mov	r3, r0
 8002714:	461a      	mov	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	889b      	ldrh	r3, [r3, #4]
 800271e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	88db      	ldrh	r3, [r3, #6]
 8002724:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8002726:	8bfb      	ldrh	r3, [r7, #30]
 8002728:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800272a:	8b7b      	ldrh	r3, [r7, #26]
 800272c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	7c1b      	ldrb	r3, [r3, #16]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d85a      	bhi.n	80027ec <u8g2_font_decode_glyph+0x180>
 8002736:	a201      	add	r2, pc, #4	@ (adr r2, 800273c <u8g2_font_decode_glyph+0xd0>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	0800274d 	.word	0x0800274d
 8002740:	08002769 	.word	0x08002769
 8002744:	08002791 	.word	0x08002791
 8002748:	080027c5 	.word	0x080027c5
      {
	case 0:
	    x1 += decode->glyph_width;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002752:	b29a      	uxth	r2, r3
 8002754:	8bbb      	ldrh	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800275a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800275e:	b29a      	uxth	r2, r3
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	833b      	strh	r3, [r7, #24]
	    break;
 8002766:	e041      	b.n	80027ec <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002768:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800276c:	b29b      	uxth	r3, r3
 800276e:	8bfa      	ldrh	r2, [r7, #30]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002774:	8bfb      	ldrh	r3, [r7, #30]
 8002776:	3301      	adds	r3, #1
 8002778:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800277a:	8bbb      	ldrh	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002786:	b29a      	uxth	r2, r3
 8002788:	8b3b      	ldrh	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	833b      	strh	r3, [r7, #24]
	    break;
 800278e:	e02d      	b.n	80027ec <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002796:	b29b      	uxth	r3, r3
 8002798:	8bfa      	ldrh	r2, [r7, #30]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800279e:	8bfb      	ldrh	r3, [r7, #30]
 80027a0:	3301      	adds	r3, #1
 80027a2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80027a4:	8bbb      	ldrh	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80027aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	8b7a      	ldrh	r2, [r7, #26]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027b6:	8b7b      	ldrh	r3, [r7, #26]
 80027b8:	3301      	adds	r3, #1
 80027ba:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027bc:	8b3b      	ldrh	r3, [r7, #24]
 80027be:	3301      	adds	r3, #1
 80027c0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027c2:	e013      	b.n	80027ec <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80027c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	8bbb      	ldrh	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8b7a      	ldrh	r2, [r7, #26]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027de:	8b7b      	ldrh	r3, [r7, #26]
 80027e0:	3301      	adds	r3, #1
 80027e2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027e4:	8b3b      	ldrh	r3, [r7, #24]
 80027e6:	3301      	adds	r3, #1
 80027e8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027ea:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80027ec:	8bb8      	ldrh	r0, [r7, #28]
 80027ee:	8b7a      	ldrh	r2, [r7, #26]
 80027f0:	8bf9      	ldrh	r1, [r7, #30]
 80027f2:	8b3b      	ldrh	r3, [r7, #24]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4603      	mov	r3, r0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fb88 	bl	8002f0e <u8g2_IsIntersection>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <u8g2_font_decode_glyph+0x19e>
	return d;
 8002804:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002808:	e03a      	b.n	8002880 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2200      	movs	r2, #0
 8002814:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800281c:	4619      	mov	r1, r3
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff fd81 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800282e:	4619      	mov	r1, r3
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff fd78 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 8002836:	4603      	mov	r3, r0
 8002838:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2200      	movs	r2, #0
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fe54 	bl	80024ee <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002846:	7bbb      	ldrb	r3, [r7, #14]
 8002848:	2201      	movs	r2, #1
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fe4e 	bl	80024ee <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002852:	2101      	movs	r1, #1
 8002854:	6978      	ldr	r0, [r7, #20]
 8002856:	f7ff fd66 	bl	8002326 <u8g2_font_decode_get_unsigned_bits>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ec      	bne.n	800283a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002866:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800286a:	429a      	cmp	r2, r3
 800286c:	dd00      	ble.n	8002870 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800286e:	e7d2      	b.n	8002816 <u8g2_font_decode_glyph+0x1aa>
	break;
 8002870:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	7b9a      	ldrb	r2, [r3, #14]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 800287c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3317      	adds	r3, #23
 800289e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	2bff      	cmp	r3, #255	@ 0xff
 80028a4:	d82a      	bhi.n	80028fc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	2b60      	cmp	r3, #96	@ 0x60
 80028aa:	d907      	bls.n	80028bc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80028b2:	461a      	mov	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e009      	b.n	80028d0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d906      	bls.n	80028d0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80028c8:	461a      	mov	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4413      	add	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04e      	beq.n	8002978 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d102      	bne.n	80028ec <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3302      	adds	r3, #2
 80028ea:	e049      	b.n	8002980 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3301      	adds	r3, #1
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4413      	add	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028fa:	e7e9      	b.n	80028d0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8002902:	461a      	mov	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800290e:	2100      	movs	r1, #0
 8002910:	6938      	ldr	r0, [r7, #16]
 8002912:	f7ff fc3f 	bl	8002194 <u8g2_font_get_word>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002920:	2102      	movs	r1, #2
 8002922:	6938      	ldr	r0, [r7, #16]
 8002924:	f7ff fc36 	bl	8002194 <u8g2_font_get_word>
 8002928:	4603      	mov	r3, r0
 800292a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	3304      	adds	r3, #4
 8002930:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002932:	89fa      	ldrh	r2, [r7, #14]
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3e9      	bcc.n	800290e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	4313      	orrs	r3, r2
 8002952:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800295a:	89fa      	ldrh	r2, [r7, #14]
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	429a      	cmp	r2, r3
 8002960:	d102      	bne.n	8002968 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3303      	adds	r3, #3
 8002966:	e00b      	b.n	8002980 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3302      	adds	r3, #2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002976:	e7e0      	b.n	800293a <u8g2_font_get_glyph_data+0xb2>
	break;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <u8g2_font_get_glyph_data+0xf6>
	break;
 800297c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	897a      	ldrh	r2, [r7, #10]
 80029aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	893a      	ldrh	r2, [r7, #8]
 80029b2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4619      	mov	r1, r3
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff ff64 	bl	8002888 <u8g2_font_get_glyph_data>
 80029c0:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80029c8:	6939      	ldr	r1, [r7, #16]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff fe4e 	bl	800266c <u8g2_font_decode_glyph>
 80029d0:	4603      	mov	r3, r0
 80029d2:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80029d4:	8afb      	ldrh	r3, [r7, #22]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d833      	bhi.n	8002a6c <u8g2_DrawGlyph+0x8c>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <u8g2_DrawGlyph+0x2c>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a31 	.word	0x08002a31
 8002a14:	08002a45 	.word	0x08002a45
 8002a18:	08002a59 	.word	0x08002a59
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	4798      	blx	r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	893b      	ldrh	r3, [r7, #8]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	813b      	strh	r3, [r7, #8]
      break;
 8002a2e:	e01d      	b.n	8002a6c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	4798      	blx	r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	817b      	strh	r3, [r7, #10]
      break;
 8002a42:	e013      	b.n	8002a6c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	4798      	blx	r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	813b      	strh	r3, [r7, #8]
      break;
 8002a56:	e009      	b.n	8002a6c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	4798      	blx	r3
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	4413      	add	r3, r2
 8002a68:	817b      	strh	r3, [r7, #10]
      break;
 8002a6a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	8979      	ldrh	r1, [r7, #10]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff88 	bl	8002988 <u8g2_font_draw_glyph>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	4613      	mov	r3, r2
 8002a94:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fca7 	bl	80033ea <u8x8_utf8_init>
  sum = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	4798      	blx	r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002ab2:	8abb      	ldrh	r3, [r7, #20]
 8002ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d038      	beq.n	8002b2e <u8g2_draw_string+0xaa>
      break;
    str++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002ac2:	8abb      	ldrh	r3, [r7, #20]
 8002ac4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d0e9      	beq.n	8002aa0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002acc:	8abb      	ldrh	r3, [r7, #20]
 8002ace:	893a      	ldrh	r2, [r7, #8]
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff84 	bl	80029e0 <u8g2_DrawGlyph>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d81e      	bhi.n	8002b24 <u8g2_draw_string+0xa0>
 8002ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <u8g2_draw_string+0x68>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b07 	.word	0x08002b07
 8002af4:	08002b11 	.word	0x08002b11
 8002af8:	08002b1b 	.word	0x08002b1b
      {
	case 0:
	  x += delta;
 8002afc:	897a      	ldrh	r2, [r7, #10]
 8002afe:	8a7b      	ldrh	r3, [r7, #18]
 8002b00:	4413      	add	r3, r2
 8002b02:	817b      	strh	r3, [r7, #10]
	  break;
 8002b04:	e00e      	b.n	8002b24 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002b06:	893a      	ldrh	r2, [r7, #8]
 8002b08:	8a7b      	ldrh	r3, [r7, #18]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	813b      	strh	r3, [r7, #8]
	  break;
 8002b0e:	e009      	b.n	8002b24 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002b10:	897a      	ldrh	r2, [r7, #10]
 8002b12:	8a7b      	ldrh	r3, [r7, #18]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	817b      	strh	r3, [r7, #10]
	  break;
 8002b18:	e004      	b.n	8002b24 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002b1a:	893a      	ldrh	r2, [r7, #8]
 8002b1c:	8a7b      	ldrh	r3, [r7, #18]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	813b      	strh	r3, [r7, #8]
	  break;
 8002b22:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002b24:	8afa      	ldrh	r2, [r7, #22]
 8002b26:	8a7b      	ldrh	r3, [r7, #18]
 8002b28:	4413      	add	r3, r2
 8002b2a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002b2c:	e7b8      	b.n	8002aa0 <u8g2_draw_string+0x1c>
      break;
 8002b2e:	bf00      	nop
    }
  }
  return sum;
 8002b30:	8afb      	ldrh	r3, [r7, #22]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop

08002b3c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <u8g2_DrawStr+0x30>)
 8002b52:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002b54:	893a      	ldrh	r2, [r7, #8]
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff ff92 	bl	8002a84 <u8g2_draw_string>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08003407 	.word	0x08003407

08002b70 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05d      	beq.n	8002c3c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04d      	beq.n	8002c3e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d11c      	bne.n	8002be6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	da05      	bge.n	8002bc8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dd32      	ble.n	8002c3e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002be4:	e02b      	b.n	8002c3e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002bec:	461a      	mov	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bfc:	440b      	add	r3, r1
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	da0d      	bge.n	8002c1e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	dd07      	ble.n	8002c3e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002c3a:	e000      	b.n	8002c3e <u8g2_UpdateRefHeight+0xce>
    return;
 8002c3c:	bf00      	nop
  }  
}
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <u8g2_SetFontPosBaseline+0x1c>)
 8002c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	08002c49 	.word	0x08002c49

08002c80 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d00b      	beq.n	8002cac <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3374      	adds	r3, #116	@ 0x74
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fa97 	bl	80021d4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff62 	bl	8002b70 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	80fb      	strh	r3, [r7, #6]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8002cd0:	8afb      	ldrh	r3, [r7, #22]
 8002cd2:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	8abb      	ldrh	r3, [r7, #20]
 8002cda:	4413      	add	r3, r2
 8002cdc:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8002cde:	8afa      	ldrh	r2, [r7, #22]
 8002ce0:	8abb      	ldrh	r3, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90b      	bls.n	8002cfe <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002ce6:	8afa      	ldrh	r2, [r7, #22]
 8002ce8:	88bb      	ldrh	r3, [r7, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d205      	bcs.n	8002cfa <u8g2_clip_intersection2+0x46>
			b = d;
 8002cee:	88bb      	ldrh	r3, [r7, #4]
 8002cf0:	82bb      	strh	r3, [r7, #20]
			b--;
 8002cf2:	8abb      	ldrh	r3, [r7, #20]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	82bb      	strh	r3, [r7, #20]
 8002cf8:	e001      	b.n	8002cfe <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8002cfe:	8afa      	ldrh	r2, [r7, #22]
 8002d00:	88bb      	ldrh	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d301      	bcc.n	8002d0a <u8g2_clip_intersection2+0x56>
		return 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e01c      	b.n	8002d44 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002d0a:	8aba      	ldrh	r2, [r7, #20]
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d801      	bhi.n	8002d16 <u8g2_clip_intersection2+0x62>
		return 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e016      	b.n	8002d44 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8002d16:	8afa      	ldrh	r2, [r7, #22]
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d201      	bcs.n	8002d22 <u8g2_clip_intersection2+0x6e>
		a = c;
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8002d22:	8aba      	ldrh	r2, [r7, #20]
 8002d24:	88bb      	ldrh	r3, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d901      	bls.n	8002d2e <u8g2_clip_intersection2+0x7a>
		b = d;
 8002d2a:	88bb      	ldrh	r3, [r7, #4]
 8002d2c:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8afa      	ldrh	r2, [r7, #22]
 8002d32:	801a      	strh	r2, [r3, #0]
	b -= a;
 8002d34:	8aba      	ldrh	r2, [r7, #20]
 8002d36:	8afb      	ldrh	r3, [r7, #22]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	8aba      	ldrh	r2, [r7, #20]
 8002d40:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6e:	893a      	ldrh	r2, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d78:	88f8      	ldrh	r0, [r7, #6]
 8002d7a:	893a      	ldrh	r2, [r7, #8]
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4603      	mov	r3, r0
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	47a0      	blx	r4
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	4608      	mov	r0, r1
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4603      	mov	r3, r0
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	460b      	mov	r3, r1
 8002da6:	813b      	strh	r3, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d075      	beq.n	8002ea2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d072      	beq.n	8002ea2 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d91a      	bls.n	8002df8 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8002dc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d109      	bne.n	8002dde <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002dca:	897a      	ldrh	r2, [r7, #10]
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	817b      	strh	r3, [r7, #10]
					x++;
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	817b      	strh	r3, [r7, #10]
 8002ddc:	e00c      	b.n	8002df8 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8002dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d108      	bne.n	8002df8 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002de6:	893a      	ldrh	r2, [r7, #8]
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	813b      	strh	r3, [r7, #8]
					y++;
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11a      	bne.n	8002e42 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e12:	893b      	ldrh	r3, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d83b      	bhi.n	8002e90 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d937      	bls.n	8002e94 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002e30:	1db9      	adds	r1, r7, #6
 8002e32:	f107 000a 	add.w	r0, r7, #10
 8002e36:	f7ff ff3d 	bl	8002cb4 <u8g2_clip_intersection2>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11a      	bne.n	8002e76 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8002e40:	e02f      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d824      	bhi.n	8002e98 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d920      	bls.n	8002e9c <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e66:	1db9      	adds	r1, r7, #6
 8002e68:	f107 0008 	add.w	r0, r7, #8
 8002e6c:	f7ff ff22 	bl	8002cb4 <u8g2_clip_intersection2>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d014      	beq.n	8002ea0 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	689c      	ldr	r4, [r3, #8]
 8002e7c:	8979      	ldrh	r1, [r7, #10]
 8002e7e:	893a      	ldrh	r2, [r7, #8]
 8002e80:	88f8      	ldrh	r0, [r7, #6]
 8002e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	47a0      	blx	r4
 8002e8e:	e008      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
					return;
 8002e90:	bf00      	nop
 8002e92:	e006      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
					return;
 8002e94:	bf00      	nop
 8002e96:	e004      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
					return;
 8002e98:	bf00      	nop
 8002e9a:	e002      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
					return;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <u8g2_DrawHVLine+0x110>
					return;
 8002ea0:	bf00      	nop
		}
}
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002ea8:	b490      	push	{r4, r7}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4623      	mov	r3, r4
 8002eb8:	80fb      	strh	r3, [r7, #6]
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80bb      	strh	r3, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	807b      	strh	r3, [r7, #2]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d20d      	bcs.n	8002eea <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002ece:	883a      	ldrh	r2, [r7, #0]
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d901      	bls.n	8002eda <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e014      	b.n	8002f04 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	883b      	ldrh	r3, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d901      	bls.n	8002ee6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00e      	b.n	8002f04 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e00c      	b.n	8002f04 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002eea:	883a      	ldrh	r2, [r7, #0]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d907      	bls.n	8002f02 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	883b      	ldrh	r3, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d901      	bls.n	8002efe <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e002      	b.n	8002f04 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002f02:	2300      	movs	r3, #0
    }
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc90      	pop	{r4, r7}
 8002f0c:	4770      	bx	lr

08002f0e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	4608      	mov	r0, r1
 8002f18:	4611      	mov	r1, r2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	817b      	strh	r3, [r7, #10]
 8002f20:	460b      	mov	r3, r1
 8002f22:	813b      	strh	r3, [r7, #8]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002f34:	8b3b      	ldrh	r3, [r7, #24]
 8002f36:	893a      	ldrh	r2, [r7, #8]
 8002f38:	f7ff ffb6 	bl	8002ea8 <u8g2_is_intersection_decision_tree>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <u8g2_IsIntersection+0x38>
    return 0; 
 8002f42:	2300      	movs	r3, #0
 8002f44:	e00a      	b.n	8002f5c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	897a      	ldrh	r2, [r7, #10]
 8002f56:	f7ff ffa7 	bl	8002ea8 <u8g2_is_intersection_decision_tree>
 8002f5a:	4603      	mov	r3, r0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	460b      	mov	r3, r1
 8002f78:	813b      	strh	r3, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f7e:	893b      	ldrh	r3, [r7, #8]
 8002f80:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002f82:	7efb      	ldrb	r3, [r7, #27]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002f8e:	7e3a      	ldrb	r2, [r7, #24]
 8002f90:	7efb      	ldrb	r3, [r7, #27]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d801      	bhi.n	8002fae <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002faa:	7e3b      	ldrb	r3, [r7, #24]
 8002fac:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002fb8:	7e3b      	ldrb	r3, [r7, #24]
 8002fba:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002fc0:	8afb      	ldrh	r3, [r7, #22]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	7c1b      	ldrb	r3, [r3, #16]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	8afb      	ldrh	r3, [r7, #22]
 8002fd2:	fb13 f302 	smulbb	r3, r3, r2
 8002fd6:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fdc:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002fde:	8afb      	ldrh	r3, [r7, #22]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d117      	bne.n	8003026 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	7ebb      	ldrb	r3, [r7, #26]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	7e7b      	ldrb	r3, [r7, #25]
 800300a:	4053      	eors	r3, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
	len--;
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	3b01      	subs	r3, #1
 800301c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003024:	e038      	b.n	8003098 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	7ebb      	ldrb	r3, [r7, #26]
 800302c:	4313      	orrs	r3, r2
 800302e:	b2da      	uxtb	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	7e7b      	ldrb	r3, [r7, #25]
 800303a:	4053      	eors	r3, r2
 800303c:	b2da      	uxtb	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003042:	7efb      	ldrb	r3, [r7, #27]
 8003044:	3301      	adds	r3, #1
 8003046:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003048:	7efb      	ldrb	r3, [r7, #27]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	76fb      	strb	r3, [r7, #27]
      len--;
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	3b01      	subs	r3, #1
 8003054:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003056:	7efb      	ldrb	r3, [r7, #27]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d114      	bne.n	8003086 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8003060:	461a      	mov	r2, r3
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800306e:	2b01      	cmp	r3, #1
 8003070:	d801      	bhi.n	8003076 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800307c:	2b01      	cmp	r3, #1
 800307e:	d008      	beq.n	8003092 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003080:	2301      	movs	r3, #1
 8003082:	767b      	strb	r3, [r7, #25]
 8003084:	e005      	b.n	8003092 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003086:	7ebb      	ldrb	r3, [r7, #26]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800308c:	7e7b      	ldrb	r3, [r7, #25]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1c6      	bne.n	8003026 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003098:	bf00      	nop
 800309a:	3724      	adds	r7, #36	@ 0x24
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff ffa9 	bl	80030a4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fd84 	bl	8002c60 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800317c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	89fa      	ldrh	r2, [r7, #14]
 8003188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	7c1b      	ldrb	r3, [r3, #16]
 800318e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	89fa      	ldrh	r2, [r7, #14]
 800319a:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031a2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	89fa      	ldrh	r2, [r7, #14]
 80031ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031b6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80031c0:	4413      	add	r3, r2
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	7c52      	ldrb	r2, [r2, #17]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	dd07      	ble.n	80031da <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	7c5b      	ldrb	r3, [r3, #17]
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031da:	89fb      	ldrh	r3, [r7, #14]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80031fc:	89fb      	ldrh	r3, [r7, #14]
 80031fe:	4413      	add	r3, r2
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	8a9a      	ldrh	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	8ada      	ldrh	r2, [r3, #22]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af02      	add	r7, sp, #8
 800322e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4603      	mov	r3, r0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fe5e 	bl	8002f0e <u8g2_IsIntersection>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003260:	e03b      	b.n	80032da <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003276:	429a      	cmp	r2, r3
 8003278:	d205      	bcs.n	8003286 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003292:	429a      	cmp	r2, r3
 8003294:	d905      	bls.n	80032a2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d205      	bcs.n	80032be <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d905      	bls.n	80032da <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff3c 	bl	8003168 <u8g2_update_dimension_common>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003328:	429a      	cmp	r2, r3
 800332a:	d30a      	bcc.n	8003342 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff65 	bl	8003228 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b088      	sub	sp, #32
 800336a:	af02      	add	r7, sp, #8
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	461a      	mov	r2, r3
 8003374:	4603      	mov	r3, r0
 8003376:	817b      	strh	r3, [r7, #10]
 8003378:	460b      	mov	r3, r1
 800337a:	813b      	strh	r3, [r7, #8]
 800337c:	4613      	mov	r3, r2
 800337e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003386:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8003388:	8aba      	ldrh	r2, [r7, #20]
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003396:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8003398:	8afa      	ldrh	r2, [r7, #22]
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80033a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80033a8:	8abb      	ldrh	r3, [r7, #20]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80033ae:	8afa      	ldrh	r2, [r7, #22]
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	82fb      	strh	r3, [r7, #22]
 80033b6:	e00a      	b.n	80033ce <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80033b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80033c0:	8afb      	ldrh	r3, [r7, #22]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80033c6:	8aba      	ldrh	r2, [r7, #20]
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80033ce:	88f8      	ldrh	r0, [r7, #6]
 80033d0:	8aba      	ldrh	r2, [r7, #20]
 80033d2:	8af9      	ldrh	r1, [r7, #22]
 80033d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4603      	mov	r3, r0
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff fcb7 	bl	8002d50 <u8g2_draw_hv_line_2dir>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <u8x8_ascii_next+0x18>
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b0a      	cmp	r3, #10
 800341c:	d102      	bne.n	8003424 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800341e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003422:	e001      	b.n	8003428 <u8x8_ascii_next+0x22>
  return b;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	b29b      	uxth	r3, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691c      	ldr	r4, [r3, #16]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	2300      	movs	r3, #0
 8003448:	2120      	movs	r1, #32
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	47a0      	blx	r4
 800344e:	4603      	mov	r3, r0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	460b      	mov	r3, r1
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691c      	ldr	r4, [r3, #16]
 800346a:	7afa      	ldrb	r2, [r7, #11]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2117      	movs	r1, #23
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	47a0      	blx	r4
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}

0800347e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800348a:	1cfb      	adds	r3, r7, #3
 800348c:	461a      	mov	r2, r3
 800348e:	2101      	movs	r1, #1
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ffe1 	bl	8003458 <u8x8_byte_SendBytes>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68dc      	ldr	r4, [r3, #12]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	2300      	movs	r3, #0
 80034b4:	2115      	movs	r1, #21
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	47a0      	blx	r4
 80034ba:	4603      	mov	r3, r0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}

080034c4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68dc      	ldr	r4, [r3, #12]
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2116      	movs	r1, #22
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	47a0      	blx	r4
 80034de:	4603      	mov	r3, r0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}

080034e8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	460b      	mov	r3, r1
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68dc      	ldr	r4, [r3, #12]
 80034fa:	7afa      	ldrb	r2, [r7, #11]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2117      	movs	r1, #23
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	47a0      	blx	r4
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}

0800350e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800350e:	b590      	push	{r4, r7, lr}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68dc      	ldr	r4, [r3, #12]
 800351a:	2300      	movs	r3, #0
 800351c:	2200      	movs	r2, #0
 800351e:	2118      	movs	r1, #24
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	47a0      	blx	r4
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}

0800352e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800352e:	b590      	push	{r4, r7, lr}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68dc      	ldr	r4, [r3, #12]
 800353a:	2300      	movs	r3, #0
 800353c:	2200      	movs	r2, #0
 800353e:	2119      	movs	r1, #25
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	47a0      	blx	r4
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}

0800354e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800354e:	b590      	push	{r4, r7, lr}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	73fb      	strb	r3, [r7, #15]
    data++;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2bfe      	cmp	r3, #254	@ 0xfe
 8003568:	d031      	beq.n	80035ce <u8x8_cad_SendSequence+0x80>
 800356a:	2bfe      	cmp	r3, #254	@ 0xfe
 800356c:	dc3d      	bgt.n	80035ea <u8x8_cad_SendSequence+0x9c>
 800356e:	2b19      	cmp	r3, #25
 8003570:	dc3b      	bgt.n	80035ea <u8x8_cad_SendSequence+0x9c>
 8003572:	2b18      	cmp	r3, #24
 8003574:	da23      	bge.n	80035be <u8x8_cad_SendSequence+0x70>
 8003576:	2b16      	cmp	r3, #22
 8003578:	dc02      	bgt.n	8003580 <u8x8_cad_SendSequence+0x32>
 800357a:	2b15      	cmp	r3, #21
 800357c:	da03      	bge.n	8003586 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800357e:	e034      	b.n	80035ea <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003580:	2b17      	cmp	r3, #23
 8003582:	d00e      	beq.n	80035a2 <u8x8_cad_SendSequence+0x54>
	return;
 8003584:	e031      	b.n	80035ea <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68dc      	ldr	r4, [r3, #12]
 8003590:	7bba      	ldrb	r2, [r7, #14]
 8003592:	7bf9      	ldrb	r1, [r7, #15]
 8003594:	2300      	movs	r3, #0
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	47a0      	blx	r4
	  data++;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	603b      	str	r3, [r7, #0]
	  break;
 80035a0:	e022      	b.n	80035e8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80035a8:	f107 030e 	add.w	r3, r7, #14
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff99 	bl	80034e8 <u8x8_cad_SendData>
	  data++;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	603b      	str	r3, [r7, #0]
	  break;
 80035bc:	e014      	b.n	80035e8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68dc      	ldr	r4, [r3, #12]
 80035c2:	7bf9      	ldrb	r1, [r7, #15]
 80035c4:	2300      	movs	r3, #0
 80035c6:	2200      	movs	r2, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	47a0      	blx	r4
	  break;
 80035cc:	e00c      	b.n	80035e8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2129      	movs	r1, #41	@ 0x29
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9ee 	bl	80039bc <u8x8_gpio_call>
	  data++;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3301      	adds	r3, #1
 80035e4:	603b      	str	r3, [r7, #0]
	  break;
 80035e6:	bf00      	nop
    cmd = *data;
 80035e8:	e7b6      	b.n	8003558 <u8x8_cad_SendSequence+0xa>
	return;
 80035ea:	bf00      	nop
    }
  }
}
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}
	...

080035f4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	72fb      	strb	r3, [r7, #11]
 8003602:	4613      	mov	r3, r2
 8003604:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	3b14      	subs	r3, #20
 800360a:	2b05      	cmp	r3, #5
 800360c:	d82f      	bhi.n	800366e <u8x8_cad_001+0x7a>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <u8x8_cad_001+0x20>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800362d 	.word	0x0800362d
 800361c:	08003641 	.word	0x08003641
 8003620:	08003655 	.word	0x08003655
 8003624:	0800365d 	.word	0x0800365d
 8003628:	0800365d 	.word	0x0800365d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800362c:	2100      	movs	r1, #0
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff ff00 	bl	8003434 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003634:	7abb      	ldrb	r3, [r7, #10]
 8003636:	4619      	mov	r1, r3
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff20 	bl	800347e <u8x8_byte_SendByte>
      break;
 800363e:	e018      	b.n	8003672 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003640:	2100      	movs	r1, #0
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fef6 	bl	8003434 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003648:	7abb      	ldrb	r3, [r7, #10]
 800364a:	4619      	mov	r1, r3
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff ff16 	bl	800347e <u8x8_byte_SendByte>
      break;
 8003652:	e00e      	b.n	8003672 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003654:	2101      	movs	r1, #1
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff feec 	bl	8003434 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691c      	ldr	r4, [r3, #16]
 8003660:	7aba      	ldrb	r2, [r7, #10]
 8003662:	7af9      	ldrb	r1, [r7, #11]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	47a0      	blx	r4
 800366a:	4603      	mov	r3, r0
 800366c:	e002      	b.n	8003674 <u8x8_cad_001+0x80>
    default:
      return 0;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <u8x8_cad_001+0x80>
  }
  return 1;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	72fb      	strb	r3, [r7, #11]
 800368a:	4613      	mov	r3, r2
 800368c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d006      	beq.n	80036a2 <u8x8_d_st7565_common+0x26>
 8003694:	2b0f      	cmp	r3, #15
 8003696:	dc71      	bgt.n	800377c <u8x8_d_st7565_common+0x100>
 8003698:	2b0b      	cmp	r3, #11
 800369a:	d050      	beq.n	800373e <u8x8_d_st7565_common+0xc2>
 800369c:	2b0e      	cmp	r3, #14
 800369e:	d05b      	beq.n	8003758 <u8x8_d_st7565_common+0xdc>
 80036a0:	e06c      	b.n	800377c <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff ff33 	bl	800350e <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	795b      	ldrb	r3, [r3, #5]
 80036ac:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80036ae:	7dbb      	ldrb	r3, [r7, #22]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80036ba:	7dbb      	ldrb	r3, [r7, #22]
 80036bc:	4413      	add	r3, r2
 80036be:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80036c0:	7dbb      	ldrb	r3, [r7, #22]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0310 	orr.w	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4619      	mov	r1, r3
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fee6 	bl	80034a0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80036d4:	7dbb      	ldrb	r3, [r7, #22]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff fede 	bl	80034a0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	799b      	ldrb	r3, [r3, #6]
 80036e8:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fed5 	bl	80034a0 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	791b      	ldrb	r3, [r3, #4]
 80036fa:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003708:	7dfa      	ldrb	r2, [r7, #23]
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	4413      	add	r3, r2
 800370e:	2b84      	cmp	r3, #132	@ 0x84
 8003710:	d905      	bls.n	800371e <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8003712:	2384      	movs	r3, #132	@ 0x84
 8003714:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003716:	7dfa      	ldrb	r2, [r7, #23]
 8003718:	7dbb      	ldrb	r3, [r7, #22]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4619      	mov	r1, r3
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fedf 	bl	80034e8 <u8x8_cad_SendData>
	arg_int--;
 800372a:	7abb      	ldrb	r3, [r7, #10]
 800372c:	3b01      	subs	r3, #1
 800372e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003730:	7abb      	ldrb	r3, [r7, #10]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f3      	bne.n	800371e <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fef9 	bl	800352e <u8x8_cad_EndTransfer>
      break;
 800373c:	e020      	b.n	8003780 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800373e:	7abb      	ldrb	r3, [r7, #10]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003744:	4911      	ldr	r1, [pc, #68]	@ (800378c <u8x8_d_st7565_common+0x110>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ff01 	bl	800354e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800374c:	e018      	b.n	8003780 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800374e:	4910      	ldr	r1, [pc, #64]	@ (8003790 <u8x8_d_st7565_common+0x114>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fefc 	bl	800354e <u8x8_cad_SendSequence>
      break;
 8003756:	e013      	b.n	8003780 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fed8 	bl	800350e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800375e:	2181      	movs	r1, #129	@ 0x81
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fe9d 	bl	80034a0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003766:	7abb      	ldrb	r3, [r7, #10]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4619      	mov	r1, r3
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff fea8 	bl	80034c4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff feda 	bl	800352e <u8x8_cad_EndTransfer>
      break;
 800377a:	e001      	b.n	8003780 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8003780:	2301      	movs	r3, #1
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	0800d74c 	.word	0x0800d74c
 8003790:	0800d754 	.word	0x0800d754

08003794 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	72fb      	strb	r3, [r7, #11]
 80037a2:	4613      	mov	r3, r2
 80037a4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80037a6:	7aba      	ldrb	r2, [r7, #10]
 80037a8:	7af9      	ldrb	r1, [r7, #11]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff ff65 	bl	800367c <u8x8_d_st7565_common>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d131      	bne.n	800381c <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	2b0d      	cmp	r3, #13
 80037bc:	d013      	beq.n	80037e6 <u8x8_d_st7565_64128n+0x52>
 80037be:	2b0d      	cmp	r3, #13
 80037c0:	dc2a      	bgt.n	8003818 <u8x8_d_st7565_64128n+0x84>
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d002      	beq.n	80037cc <u8x8_d_st7565_64128n+0x38>
 80037c6:	2b0a      	cmp	r3, #10
 80037c8:	d005      	beq.n	80037d6 <u8x8_d_st7565_64128n+0x42>
 80037ca:	e025      	b.n	8003818 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80037cc:	4916      	ldr	r1, [pc, #88]	@ (8003828 <u8x8_d_st7565_64128n+0x94>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f832 	bl	8003838 <u8x8_d_helper_display_setup_memory>
	break;
 80037d4:	e022      	b.n	800381c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f842 	bl	8003860 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80037dc:	4913      	ldr	r1, [pc, #76]	@ (800382c <u8x8_d_st7565_64128n+0x98>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff feb5 	bl	800354e <u8x8_cad_SendSequence>
	break;
 80037e4:	e01a      	b.n	800381c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80037e6:	7abb      	ldrb	r3, [r7, #10]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80037ec:	4910      	ldr	r1, [pc, #64]	@ (8003830 <u8x8_d_st7565_64128n+0x9c>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fead 	bl	800354e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	7c9a      	ldrb	r2, [r3, #18]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8003800:	e00c      	b.n	800381c <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8003802:	490c      	ldr	r1, [pc, #48]	@ (8003834 <u8x8_d_st7565_64128n+0xa0>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fea2 	bl	800354e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	7cda      	ldrb	r2, [r3, #19]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8003816:	e001      	b.n	800381c <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	0800d78c 	.word	0x0800d78c
 800382c:	0800d76c 	.word	0x0800d76c
 8003830:	0800d75c 	.word	0x0800d75c
 8003834:	0800d764 	.word	0x0800d764

08003838 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	7c9a      	ldrb	r2, [r3, #18]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695c      	ldr	r4, [r3, #20]
 800386c:	2300      	movs	r3, #0
 800386e:	2200      	movs	r2, #0
 8003870:	2128      	movs	r1, #40	@ 0x28
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68dc      	ldr	r4, [r3, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	2200      	movs	r2, #0
 800387e:	2114      	movs	r1, #20
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003884:	2201      	movs	r2, #1
 8003886:	214b      	movs	r1, #75	@ 0x4b
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f897 	bl	80039bc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	791b      	ldrb	r3, [r3, #4]
 8003894:	461a      	mov	r2, r3
 8003896:	2129      	movs	r1, #41	@ 0x29
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f88f 	bl	80039bc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	214b      	movs	r1, #75	@ 0x4b
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f88a 	bl	80039bc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	791b      	ldrb	r3, [r3, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	2129      	movs	r1, #41	@ 0x29
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f882 	bl	80039bc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80038b8:	2201      	movs	r2, #1
 80038ba:	214b      	movs	r1, #75	@ 0x4b
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f87d 	bl	80039bc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	795b      	ldrb	r3, [r3, #5]
 80038c8:	461a      	mov	r2, r3
 80038ca:	2129      	movs	r1, #41	@ 0x29
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f875 	bl	80039bc <u8x8_gpio_call>
}    
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}

080038da <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80038da:	b590      	push	{r4, r7, lr}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	4608      	mov	r0, r1
 80038e4:	4611      	mov	r1, r2
 80038e6:	461a      	mov	r2, r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70bb      	strb	r3, [r7, #2]
 80038f0:	4613      	mov	r3, r2
 80038f2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80038f8:	78bb      	ldrb	r3, [r7, #2]
 80038fa:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689c      	ldr	r4, [r3, #8]
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	2201      	movs	r2, #1
 800390e:	210f      	movs	r1, #15
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	47a0      	blx	r4
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}

0800391e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800391e:	b590      	push	{r4, r7, lr}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689c      	ldr	r4, [r3, #8]
 800392a:	2300      	movs	r3, #0
 800392c:	2200      	movs	r2, #0
 800392e:	2109      	movs	r1, #9
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	47a0      	blx	r4
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bd90      	pop	{r4, r7, pc}

0800393c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689c      	ldr	r4, [r3, #8]
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	210a      	movs	r1, #10
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bd90      	pop	{r4, r7, pc}

0800395a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800395a:	b590      	push	{r4, r7, lr}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689c      	ldr	r4, [r3, #8]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	2300      	movs	r3, #0
 800396e:	210b      	movs	r1, #11
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	47a0      	blx	r4
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}

0800397c <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689c      	ldr	r4, [r3, #8]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	2300      	movs	r3, #0
 8003990:	210e      	movs	r1, #14
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	47a0      	blx	r4
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bd90      	pop	{r4, r7, pc}

0800399e <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800399e:	b590      	push	{r4, r7, lr}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689c      	ldr	r4, [r3, #8]
 80039aa:	2300      	movs	r3, #0
 80039ac:	2200      	movs	r2, #0
 80039ae:	2110      	movs	r1, #16
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	47a0      	blx	r4
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	4613      	mov	r3, r2
 80039ca:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695c      	ldr	r4, [r3, #20]
 80039d0:	78ba      	ldrb	r2, [r7, #2]
 80039d2:	78f9      	ldrb	r1, [r7, #3]
 80039d4:	2300      	movs	r3, #0
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	47a0      	blx	r4
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}

080039e2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	72fb      	strb	r3, [r7, #11]
 80039f0:	4613      	mov	r3, r2
 80039f2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <u8x8_SetupDefaults+0x58>)
 8003a16:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a10      	ldr	r2, [pc, #64]	@ (8003a5c <u8x8_SetupDefaults+0x58>)
 8003a1c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0e      	ldr	r2, [pc, #56]	@ (8003a5c <u8x8_SetupDefaults+0x58>)
 8003a22:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <u8x8_SetupDefaults+0x58>)
 8003a28:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	22ff      	movs	r2, #255	@ 0xff
 8003a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	22ff      	movs	r2, #255	@ 0xff
 8003a4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	080039e3 	.word	0x080039e3

08003a60 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ffc8 	bl	8003a04 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff ff46 	bl	800391e <u8x8_SetupMemory>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af04      	add	r7, sp, #16
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR      == PIN_INPUT) ? CELL_01_LED_01     : 0;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_02  : 0;
 8003ad4:	7b7b      	ldrb	r3, [r7, #13]
 8003ad6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? CELL_02_LED_01 	: 0;
 8003ad8:	7b7b      	ldrb	r3, [r7, #13]
 8003ada:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? CELL_03_LED_01 	: 0;
 8003adc:	7b7b      	ldrb	r3, [r7, #13]
 8003ade:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? EXPANDER_FAN_CTRL 	: 0;
 8003ae0:	7b7b      	ldrb	r3, [r7, #13]
 8003ae2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_03	: 0;
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_02 : 0;
 8003ae8:	7b7b      	ldrb	r3, [r7, #13]
 8003aea:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_01 : 0;
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_03 	: 0;
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	b299      	uxth	r1, r3
 8003afc:	2364      	movs	r3, #100	@ 0x64
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	2301      	movs	r3, #1
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	f107 030e 	add.w	r3, r7, #14
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f005 fb64 	bl	80091dc <HAL_I2C_Mem_Write>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <Expander_InitPinDirections+0x88>
    {
        return status;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	e012      	b.n	8003b48 <Expander_InitPinDirections+0xae>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	b299      	uxth	r1, r3
 8003b2a:	2364      	movs	r3, #100	@ 0x64
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	f107 030d 	add.w	r3, r7, #13
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f005 fb4d 	bl	80091dc <HAL_I2C_Mem_Write>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af04      	add	r7, sp, #16
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	70fb      	strb	r3, [r7, #3]
 8003b62:	460b      	mov	r3, r1
 8003b64:	803b      	strh	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003b6a:	883b      	ldrh	r3, [r7, #0]
 8003b6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d142      	bne.n	8003bfa <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8003b74:	2302      	movs	r3, #2
 8003b76:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	2364      	movs	r3, #100	@ 0x64
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2301      	movs	r3, #1
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f005 fc1b 	bl	80093d0 <HAL_I2C_Mem_Read>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003b9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <Expander_SetPinState+0x58>
            return status;
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	e073      	b.n	8003c90 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 8003ba8:	78bb      	ldrb	r3, [r7, #2]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d106      	bne.n	8003bbc <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003bae:	883b      	ldrh	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	7b3b      	ldrb	r3, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	733b      	strb	r3, [r7, #12]
 8003bba:	e009      	b.n	8003bd0 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	b25a      	sxtb	r2, r3
 8003bc4:	7b3b      	ldrb	r3, [r7, #12]
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	2364      	movs	r3, #100	@ 0x64
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	2301      	movs	r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2301      	movs	r3, #1
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f005 faf5 	bl	80091dc <HAL_I2C_Mem_Write>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003bf6:	7bbb      	ldrb	r3, [r7, #14]
 8003bf8:	e04a      	b.n	8003c90 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8003bfa:	883b      	ldrh	r3, [r7, #0]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d145      	bne.n	8003c8e <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	b299      	uxth	r1, r3
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	2364      	movs	r3, #100	@ 0x64
 8003c14:	9302      	str	r3, [sp, #8]
 8003c16:	2301      	movs	r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f005 fbd4 	bl	80093d0 <HAL_I2C_Mem_Read>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003c2c:	7bbb      	ldrb	r3, [r7, #14]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <Expander_SetPinState+0xe6>
            return status;
 8003c32:	7bbb      	ldrb	r3, [r7, #14]
 8003c34:	e02c      	b.n	8003c90 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8003c36:	883b      	ldrh	r3, [r7, #0]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 8003c3e:	78bb      	ldrb	r3, [r7, #2]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8003c44:	7b3a      	ldrb	r2, [r7, #12]
 8003c46:	7b7b      	ldrb	r3, [r7, #13]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	733b      	strb	r3, [r7, #12]
 8003c4e:	e009      	b.n	8003c64 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 8003c50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	b25a      	sxtb	r2, r3
 8003c58:	7b3b      	ldrb	r3, [r7, #12]
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	b25b      	sxtb	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	b299      	uxth	r1, r3
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	2364      	movs	r3, #100	@ 0x64
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	2301      	movs	r3, #1
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2301      	movs	r3, #1
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f005 faab 	bl	80091dc <HAL_I2C_Mem_Write>
 8003c86:	4603      	mov	r3, r0
 8003c88:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003c8a:	7bbb      	ldrb	r3, [r7, #14]
 8003c8c:	e000      	b.n	8003c90 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
    }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003ca0:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <Expander_InitAllDevices+0x50>)
 8003ca2:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e012      	b.n	8003cd4 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003cae:	f107 0208 	add.w	r2, r7, #8
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff feed 	bl	8003a9a <Expander_InitPinDirections>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <Expander_InitAllDevices+0x36>
        {
            return status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	e007      	b.n	8003cde <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d3e8      	bcc.n	8003cae <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	24232221 	.word	0x24232221

08003cec <get_cell_control_params>:


// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expander_Address, uint16_t *v_set_pin_01, uint16_t *v_set_pin_02, uint16_t *v_set_pin_03 ,uint16_t *LED_PIN )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b17      	cmp	r3, #23
 8003d00:	f200 81dc 	bhi.w	80040bc <get_cell_control_params+0x3d0>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <get_cell_control_params+0x20>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d6d 	.word	0x08003d6d
 8003d10:	08003d8d 	.word	0x08003d8d
 8003d14:	08003daf 	.word	0x08003daf
 8003d18:	08003dd7 	.word	0x08003dd7
 8003d1c:	08003df7 	.word	0x08003df7
 8003d20:	08003e19 	.word	0x08003e19
 8003d24:	08003e41 	.word	0x08003e41
 8003d28:	08003e61 	.word	0x08003e61
 8003d2c:	08003e83 	.word	0x08003e83
 8003d30:	08003eab 	.word	0x08003eab
 8003d34:	08003ecb 	.word	0x08003ecb
 8003d38:	08003eed 	.word	0x08003eed
 8003d3c:	08003f15 	.word	0x08003f15
 8003d40:	08003f35 	.word	0x08003f35
 8003d44:	08003f57 	.word	0x08003f57
 8003d48:	08003f7f 	.word	0x08003f7f
 8003d4c:	08003f9f 	.word	0x08003f9f
 8003d50:	08003fc1 	.word	0x08003fc1
 8003d54:	08003fe9 	.word	0x08003fe9
 8003d58:	08004009 	.word	0x08004009
 8003d5c:	0800402b 	.word	0x0800402b
 8003d60:	08004053 	.word	0x08004053
 8003d64:	08004073 	.word	0x08004073
 8003d68:	08004095 	.word	0x08004095
    {

    // for the cell 01 to 12
        case CELL_1:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2221      	movs	r2, #33	@ 0x21
 8003d70:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2208      	movs	r2, #8
 8003d82:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2210      	movs	r2, #16
 8003d88:	801a      	strh	r2, [r3, #0]
            break;
 8003d8a:	e1a7      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_2:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2221      	movs	r2, #33	@ 0x21
 8003d90:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2280      	movs	r2, #128	@ 0x80
 8003d96:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2220      	movs	r2, #32
 8003da2:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003daa:	801a      	strh	r2, [r3, #0]
            break;
 8003dac:	e196      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_3:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2221      	movs	r2, #33	@ 0x21
 8003db2:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dba:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dc2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dca:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd2:	801a      	strh	r2, [r3, #0]
            break;
 8003dd4:	e182      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_4:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2222      	movs	r2, #34	@ 0x22
 8003dda:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2204      	movs	r2, #4
 8003de6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2208      	movs	r2, #8
 8003dec:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2210      	movs	r2, #16
 8003df2:	801a      	strh	r2, [r3, #0]
            break;
 8003df4:	e172      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_5:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2222      	movs	r2, #34	@ 0x22
 8003dfa:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2280      	movs	r2, #128	@ 0x80
 8003e00:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2240      	movs	r2, #64	@ 0x40
 8003e06:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e14:	801a      	strh	r2, [r3, #0]
            break;
 8003e16:	e161      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_6:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2222      	movs	r2, #34	@ 0x22
 8003e1c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e24:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e2c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e34:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e3c:	801a      	strh	r2, [r3, #0]
            break;
 8003e3e:	e14d      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_7:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2223      	movs	r2, #35	@ 0x23
 8003e44:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2208      	movs	r2, #8
 8003e56:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	801a      	strh	r2, [r3, #0]
            break;
 8003e5e:	e13d      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_8:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2223      	movs	r2, #35	@ 0x23
 8003e64:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2240      	movs	r2, #64	@ 0x40
 8003e70:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2220      	movs	r2, #32
 8003e76:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	801a      	strh	r2, [r3, #0]
            break;
 8003e80:	e12c      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_9:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2223      	movs	r2, #35	@ 0x23
 8003e86:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e8e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e96:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e9e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea6:	801a      	strh	r2, [r3, #0]
            break;
 8003ea8:	e118      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_10:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2224      	movs	r2, #36	@ 0x24
 8003eae:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	801a      	strh	r2, [r3, #0]
            break;
 8003ec8:	e108      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_11:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2224      	movs	r2, #36	@ 0x24
 8003ece:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2280      	movs	r2, #128	@ 0x80
 8003ed4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2240      	movs	r2, #64	@ 0x40
 8003eda:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee8:	801a      	strh	r2, [r3, #0]
            break;
 8003eea:	e0f7      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_12:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2224      	movs	r2, #36	@ 0x24
 8003ef0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ef8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f00:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f08:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f10:	801a      	strh	r2, [r3, #0]
            break;
 8003f12:	e0e3      	b.n	80040dc <get_cell_control_params+0x3f0>

            // for the cell 12 to 24

        case CELL_13:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2221      	movs	r2, #33	@ 0x21
 8003f18:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2204      	movs	r2, #4
 8003f24:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	801a      	strh	r2, [r3, #0]

            break;
 8003f32:	e0d3      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_14:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2221      	movs	r2, #33	@ 0x21
 8003f38:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2280      	movs	r2, #128	@ 0x80
 8003f3e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2240      	movs	r2, #64	@ 0x40
 8003f44:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f52:	801a      	strh	r2, [r3, #0]

            break;
 8003f54:	e0c2      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_15:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2221      	movs	r2, #33	@ 0x21
 8003f5a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f62:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f6a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f72:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f7a:	801a      	strh	r2, [r3, #0]
            break;
 8003f7c:	e0ae      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_16:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2222      	movs	r2, #34	@ 0x22
 8003f82:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2208      	movs	r2, #8
 8003f94:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	801a      	strh	r2, [r3, #0]
            break;
 8003f9c:	e09e      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_17:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2222      	movs	r2, #34	@ 0x22
 8003fa2:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	@ 0x80
 8003fa8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2240      	movs	r2, #64	@ 0x40
 8003fae:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fbc:	801a      	strh	r2, [r3, #0]
            break;
 8003fbe:	e08d      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_18:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2222      	movs	r2, #34	@ 0x22
 8003fc4:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fcc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fdc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe4:	801a      	strh	r2, [r3, #0]
            break;
 8003fe6:	e079      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_19:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2223      	movs	r2, #35	@ 0x23
 8003fec:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2210      	movs	r2, #16
 8004004:	801a      	strh	r2, [r3, #0]
            break;
 8004006:	e069      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_20:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2223      	movs	r2, #35	@ 0x23
 800400c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2280      	movs	r2, #128	@ 0x80
 8004012:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2240      	movs	r2, #64	@ 0x40
 8004018:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2220      	movs	r2, #32
 800401e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004026:	801a      	strh	r2, [r3, #0]
            break;
 8004028:	e058      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_21:
            *expander_Address = GPIO_EXPANDER_ID_03;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2223      	movs	r2, #35	@ 0x23
 800402e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004036:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800403e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004046:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800404e:	801a      	strh	r2, [r3, #0]
            break;
 8004050:	e044      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_22:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2224      	movs	r2, #36	@ 0x24
 8004056:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2204      	movs	r2, #4
 8004062:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2208      	movs	r2, #8
 8004068:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2210      	movs	r2, #16
 800406e:	801a      	strh	r2, [r3, #0]
            break;
 8004070:	e034      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_23:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2224      	movs	r2, #36	@ 0x24
 8004076:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2280      	movs	r2, #128	@ 0x80
 800407c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2240      	movs	r2, #64	@ 0x40
 8004082:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2220      	movs	r2, #32
 8004088:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004090:	801a      	strh	r2, [r3, #0]
            break;
 8004092:	e023      	b.n	80040dc <get_cell_control_params+0x3f0>

        case CELL_24:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2224      	movs	r2, #36	@ 0x24
 8004098:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040a0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040a8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040b0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040b8:	801a      	strh	r2, [r3, #0]
            break;
 80040ba:	e00f      	b.n	80040dc <get_cell_control_params+0x3f0>



        default:
            // Default to CELL_1 if an invalid cell is specified
            *expander_Address = GPIO_EXPANDER_ID_01;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2221      	movs	r2, #33	@ 0x21
 80040c0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2204      	movs	r2, #4
 80040cc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2208      	movs	r2, #8
 80040d2:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2210      	movs	r2, #16
 80040d8:	801a      	strh	r2, [r3, #0]
            break;
 80040da:	bf00      	nop
    }
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b08b      	sub	sp, #44	@ 0x2c
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	4603      	mov	r3, r0
 80040f0:	ed87 0a00 	vstr	s0, [r7]
 80040f4:	71fb      	strb	r3, [r7, #7]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	2b0b      	cmp	r3, #11
 80040fa:	d802      	bhi.n	8004102 <Set_Output_Voltage+0x1a>
        target_i2c = &hi2c2;
 80040fc:	4b2e      	ldr	r3, [pc, #184]	@ (80041b8 <Set_Output_Voltage+0xd0>)
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e001      	b.n	8004106 <Set_Output_Voltage+0x1e>
    } else {
        target_i2c = &hi2c3;
 8004102:	4b2e      	ldr	r3, [pc, #184]	@ (80041bc <Set_Output_Voltage+0xd4>)
 8004104:	61fb      	str	r3, [r7, #28]
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 8004106:	23ff      	movs	r3, #255	@ 0xff
 8004108:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e016      	b.n	800413e <Set_Output_Voltage+0x56>
        if (default_map[i].voltage == voltage) {
 8004110:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <Set_Output_Voltage+0xd8>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	edd3 7a00 	vldr	s15, [r3]
 800411c:	ed97 7a00 	vldr	s14, [r7]
 8004120:	eeb4 7a67 	vcmp.f32	s14, s15
 8004124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004128:	d106      	bne.n	8004138 <Set_Output_Voltage+0x50>
            mux_channel = default_map[i].mux_channel;
 800412a:	4a25      	ldr	r2, [pc, #148]	@ (80041c0 <Set_Output_Voltage+0xd8>)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	791b      	ldrb	r3, [r3, #4]
 8004134:	76fb      	strb	r3, [r7, #27]
            break;
 8004136:	e005      	b.n	8004144 <Set_Output_Voltage+0x5c>
    for (int i = 0; i < 8; i++) {
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b07      	cmp	r3, #7
 8004142:	dde5      	ble.n	8004110 <Set_Output_Voltage+0x28>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 8004144:	7efb      	ldrb	r3, [r7, #27]
 8004146:	2bff      	cmp	r3, #255	@ 0xff
 8004148:	d032      	beq.n	80041b0 <Set_Output_Voltage+0xc8>

    // Convert mux_channel into its 3 select bits.This is use for the Analog mux switch
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 800414a:	7efb      	ldrb	r3, [r7, #27]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	74fb      	strb	r3, [r7, #19]
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 8004152:	7efb      	ldrb	r3, [r7, #27]
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	74bb      	strb	r3, [r7, #18]
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 800415e:	7efb      	ldrb	r3, [r7, #27]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	747b      	strb	r3, [r7, #17]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN ;
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 800416a:	f107 040c 	add.w	r4, r7, #12
 800416e:	f107 020e 	add.w	r2, r7, #14
 8004172:	f107 0110 	add.w	r1, r7, #16
 8004176:	79f8      	ldrb	r0, [r7, #7]
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	f107 030a 	add.w	r3, r7, #10
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4623      	mov	r3, r4
 8004186:	f7ff fdb1 	bl	8003cec <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 800418a:	7c39      	ldrb	r1, [r7, #16]
 800418c:	89fa      	ldrh	r2, [r7, #14]
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	69f8      	ldr	r0, [r7, #28]
 8004192:	f7ff fcdd 	bl	8003b50 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 8004196:	7c39      	ldrb	r1, [r7, #16]
 8004198:	89ba      	ldrh	r2, [r7, #12]
 800419a:	7cbb      	ldrb	r3, [r7, #18]
 800419c:	69f8      	ldr	r0, [r7, #28]
 800419e:	f7ff fcd7 	bl	8003b50 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 80041a2:	7c39      	ldrb	r1, [r7, #16]
 80041a4:	897a      	ldrh	r2, [r7, #10]
 80041a6:	7c7b      	ldrb	r3, [r7, #17]
 80041a8:	69f8      	ldr	r0, [r7, #28]
 80041aa:	f7ff fcd1 	bl	8003b50 <Expander_SetPinState>
 80041ae:	e000      	b.n	80041b2 <Set_Output_Voltage+0xca>
    if (mux_channel == 0xFF) return; // Voltage not found
 80041b0:	bf00      	nop
}
 80041b2:	3724      	adds	r7, #36	@ 0x24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}
 80041b8:	20001828 	.word	0x20001828
 80041bc:	2000187c 	.word	0x2000187c
 80041c0:	20000568 	.word	0x20000568

080041c4 <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b089      	sub	sp, #36	@ 0x24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	4603      	mov	r3, r0
 80041cc:	460a      	mov	r2, r1
 80041ce:	71fb      	strb	r3, [r7, #7]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71bb      	strb	r3, [r7, #6]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	2b0b      	cmp	r3, #11
 80041d8:	d802      	bhi.n	80041e0 <Set_LED_status+0x1c>
        target_i2c = &hi2c2;
 80041da:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <Set_LED_status+0x54>)
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e001      	b.n	80041e4 <Set_LED_status+0x20>
    } else {
        target_i2c = &hi2c3;
 80041e0:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <Set_LED_status+0x58>)
 80041e2:	617b      	str	r3, [r7, #20]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN;

    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 80041e4:	f107 040e 	add.w	r4, r7, #14
 80041e8:	f107 0210 	add.w	r2, r7, #16
 80041ec:	f107 0113 	add.w	r1, r7, #19
 80041f0:	79f8      	ldrb	r0, [r7, #7]
 80041f2:	f107 030a 	add.w	r3, r7, #10
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4623      	mov	r3, r4
 8004200:	f7ff fd74 	bl	8003cec <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);
 8004204:	7cf9      	ldrb	r1, [r7, #19]
 8004206:	897a      	ldrh	r2, [r7, #10]
 8004208:	79bb      	ldrb	r3, [r7, #6]
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f7ff fca0 	bl	8003b50 <Expander_SetPinState>

}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}
 8004218:	20001828 	.word	0x20001828
 800421c:	2000187c 	.word	0x2000187c

08004220 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
 800422c:	4613      	mov	r3, r2
 800422e:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	2100      	movs	r1, #0
 8004236:	460a      	mov	r2, r1
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	460a      	mov	r2, r1
 800423c:	709a      	strb	r2, [r3, #2]
    uint8_t rxBuf[3] = {0};
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	2100      	movs	r1, #0
 8004244:	460a      	mov	r2, r1
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	460a      	mov	r2, r1
 800424a:	709a      	strb	r2, [r3, #2]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	b2db      	uxtb	r3, r3
 8004252:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8004254:	883b      	ldrh	r3, [r7, #0]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 800425e:	883b      	ldrh	r3, [r7, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7f18      	ldrb	r0, [r3, #28]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7f59      	ldrb	r1, [r3, #29]
 800426c:	f107 020c 	add.w	r2, r7, #12
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	2203      	movs	r2, #3
 800427a:	f000 f97b 	bl	8004574 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <INA229_writeReg+0x70>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8004284:	883b      	ldrh	r3, [r7, #0]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	82da      	strh	r2, [r3, #22]
    }
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7f1b      	ldrb	r3, [r3, #28]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f959 	bl	800455c <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	2100      	movs	r1, #0
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ffb4 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	885b      	ldrh	r3, [r3, #2]
 80042bc:	461a      	mov	r2, r3
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ffad 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	889b      	ldrh	r3, [r3, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	2102      	movs	r1, #2
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffa6 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	88db      	ldrh	r3, [r3, #6]
 80042d8:	461a      	mov	r2, r3
 80042da:	2103      	movs	r1, #3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff9f 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	891b      	ldrh	r3, [r3, #8]
 80042e6:	461a      	mov	r2, r3
 80042e8:	210b      	movs	r1, #11
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff98 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	895b      	ldrh	r3, [r3, #10]
 80042f4:	461a      	mov	r2, r3
 80042f6:	210c      	movs	r1, #12
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff91 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	899b      	ldrh	r3, [r3, #12]
 8004302:	461a      	mov	r2, r3
 8004304:	210d      	movs	r1, #13
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff8a 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	89db      	ldrh	r3, [r3, #14]
 8004310:	461a      	mov	r2, r3
 8004312:	210e      	movs	r1, #14
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff83 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8a1b      	ldrh	r3, [r3, #16]
 800431e:	461a      	mov	r2, r3
 8004320:	210f      	movs	r1, #15
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff7c 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8a5b      	ldrh	r3, [r3, #18]
 800432c:	461a      	mov	r2, r3
 800432e:	2110      	movs	r1, #16
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff75 	bl	8004220 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8a9b      	ldrh	r3, [r3, #20]
 800433a:	461a      	mov	r2, r3
 800433c:	2111      	movs	r1, #17
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff6e 	bl	8004220 <INA229_writeReg>

}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 800434c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004350:	b08b      	sub	sp, #44	@ 0x2c
 8004352:	af02      	add	r7, sp, #8
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 800435a:	2300      	movs	r3, #0
 800435c:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	809a      	strh	r2, [r3, #4]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8004368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	b25b      	sxtb	r3, r3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b25b      	sxtb	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7f18      	ldrb	r0, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7f59      	ldrb	r1, [r3, #29]
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <INA229_readReg+0xb8>)
 8004386:	5cd3      	ldrb	r3, [r2, r3]
 8004388:	3301      	adds	r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	f107 0610 	add.w	r6, r7, #16
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4633      	mov	r3, r6
 8004398:	f000 f8ec 	bl	8004574 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043a8:	2301      	movs	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e01b      	b.n	80043e6 <INA229_readReg+0x9a>
    {
        value = (value << 8) | rxBuf[i];
 80043ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	020b      	lsls	r3, r1, #8
 80043bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043c0:	0202      	lsls	r2, r0, #8
 80043c2:	f107 0008 	add.w	r0, r7, #8
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	4401      	add	r1, r0
 80043ca:	7809      	ldrb	r1, [r1, #0]
 80043cc:	b2c9      	uxtb	r1, r1
 80043ce:	2000      	movs	r0, #0
 80043d0:	460c      	mov	r4, r1
 80043d2:	4605      	mov	r5, r0
 80043d4:	ea42 0804 	orr.w	r8, r2, r4
 80043d8:	ea43 0905 	orr.w	r9, r3, r5
 80043dc:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	4a06      	ldr	r2, [pc, #24]	@ (8004404 <INA229_readReg+0xb8>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	461a      	mov	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	dddc      	ble.n	80043ae <INA229_readReg+0x62>
    }

    return value;
 80043f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	3724      	adds	r7, #36	@ 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004404:	0800d7a4 	.word	0x0800d7a4

08004408 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8004410:	2105      	movs	r1, #5
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ff9a 	bl	800434c <INA229_readReg>
 8004418:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800441c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	0902      	lsrs	r2, r0, #4
 800442a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800442e:	090b      	lsrs	r3, r1, #4
 8004430:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8004434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004438:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800443c:	f173 0300 	sbcs.w	r3, r3, #0
 8004440:	d30c      	bcc.n	800445c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8004442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004446:	f7fc fbe1 	bl	8000c0c <__aeabi_ul2f>
 800444a:	ee07 0a10 	vmov	s14, r0
 800444e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80044c0 <INA229_getVBUS_V+0xb8>
 8004452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004456:	edc7 7a05 	vstr	s15, [r7, #20]
 800445a:	e005      	b.n	8004468 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 800445c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004460:	f7fc fbd4 	bl	8000c0c <__aeabi_ul2f>
 8004464:	4603      	mov	r3, r0
 8004466:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f7fc f825 	bl	80004b8 <__aeabi_f2d>
 800446e:	a310      	add	r3, pc, #64	@ (adr r3, 80044b0 <INA229_getVBUS_V+0xa8>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f878 	bl	8000568 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	a30d      	add	r3, pc, #52	@ (adr r3, 80044b8 <INA229_getVBUS_V+0xb0>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f999 	bl	80007bc <__aeabi_ddiv>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f7fc faa3 	bl	80009dc <__aeabi_d2f>
 8004496:	4603      	mov	r3, r0
 8004498:	617b      	str	r3, [r7, #20]

    return data;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	ee07 3a90 	vmov	s15, r3
}
 80044a0:	eeb0 0a67 	vmov.f32	s0, s15
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w
 80044b0:	00000000 	.word	0x00000000
 80044b4:	40686a00 	.word	0x40686a00
 80044b8:	00000000 	.word	0x00000000
 80044bc:	412e8480 	.word	0x412e8480
 80044c0:	49800000 	.word	0x49800000

080044c4 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 80044cc:	2106      	movs	r1, #6
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff3c 	bl	800434c <INA229_readReg>
 80044d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 80044d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044dc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80044e0:	f173 0300 	sbcs.w	r3, r3, #0
 80044e4:	d30c      	bcc.n	8004500 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 80044e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ea:	f7fc fb8f 	bl	8000c0c <__aeabi_ul2f>
 80044ee:	ee07 0a10 	vmov	s14, r0
 80044f2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004550 <INA229_getDIETEMP_C+0x8c>
 80044f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044fa:	edc7 7a05 	vstr	s15, [r7, #20]
 80044fe:	e005      	b.n	800450c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8004500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004504:	f7fc fb82 	bl	8000c0c <__aeabi_ul2f>
 8004508:	4603      	mov	r3, r0
 800450a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7fb ffd3 	bl	80004b8 <__aeabi_f2d>
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <INA229_getDIETEMP_C+0x90>)
 8004518:	f7fc f826 	bl	8000568 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <INA229_getDIETEMP_C+0x94>)
 800452a:	f7fc f947 	bl	80007bc <__aeabi_ddiv>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	f7fc fa51 	bl	80009dc <__aeabi_d2f>
 800453a:	4603      	mov	r3, r0
 800453c:	617b      	str	r3, [r7, #20]

    return data;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	ee07 3a90 	vmov	s15, r3
}
 8004544:	eeb0 0a67 	vmov.f32	s0, s15
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	47800000 	.word	0x47800000
 8004554:	401f4000 	.word	0x401f4000
 8004558:	408f4000 	.word	0x408f4000

0800455c <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4603      	mov	r3, r0
 800457e:	71fb      	strb	r3, [r7, #7]
 8004580:	460b      	mov	r3, r1
 8004582:	71bb      	strb	r3, [r7, #6]
 8004584:	4613      	mov	r3, r2
 8004586:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <mcu_spiTransfer+0x5c>)
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e007      	b.n	80045a8 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 800459e:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <mcu_spiTransfer+0x60>)
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e001      	b.n	80045a8 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e00f      	b.n	80045c8 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80045a8:	797b      	ldrb	r3, [r7, #5]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	9200      	str	r2, [sp, #0]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f006 fcaa 	bl	800af10 <HAL_SPI_TransmitReceive>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200018d0 	.word	0x200018d0
 80045d4:	20001928 	.word	0x20001928

080045d8 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
 80045e8:	e044      	b.n	8004674 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	4613      	mov	r3, r2
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	220c      	movs	r2, #12
 80045fc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	4613      	mov	r3, r2
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	461a      	mov	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	4413      	add	r3, r2
 8004610:	2204      	movs	r2, #4
 8004612:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	4613      	mov	r3, r2
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	461a      	mov	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4413      	add	r3, r2
 8004626:	2206      	movs	r2, #6
 8004628:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	4613      	mov	r3, r2
 8004630:	019b      	lsls	r3, r3, #6
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	461a      	mov	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4413      	add	r3, r2
 800463c:	2204      	movs	r2, #4
 800463e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	4613      	mov	r3, r2
 8004646:	019b      	lsls	r3, r3, #6
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4413      	add	r3, r2
 8004652:	2202      	movs	r2, #2
 8004654:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	4613      	mov	r3, r2
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4413      	add	r3, r2
 8004668:	2203      	movs	r2, #3
 800466a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	3301      	adds	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3b6      	bcc.n	80045ea <LTC6811_init_reg_limits+0x12>
    }
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	6039      	str	r1, [r7, #0]
 8004694:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f976 	bl	800498c <LTC681x_wrcfg>
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
 80046b2:	460b      	mov	r3, r1
 80046b4:	71bb      	strb	r3, [r7, #6]
 80046b6:	4613      	mov	r3, r2
 80046b8:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD, DCP, CH);
 80046ba:	797a      	ldrb	r2, [r7, #5]
 80046bc:	79b9      	ldrb	r1, [r7, #6]
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f9e1 	bl	8004a88 <LTC681x_adcv>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <LTC6811_rdcv>:
 */
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	603a      	str	r2, [r7, #0]
 80046d8:	71fb      	strb	r3, [r7, #7]
 80046da:	460b      	mov	r3, r1
 80046dc:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 80046e2:	79b9      	ldrb	r1, [r7, #6]
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f9f8 	bl	8004ade <LTC681x_rdcv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <LTC6811_pollAdc>:
    return (LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
    return (LTC681x_pollAdc());
 8004700:	f000 fb70 	bl	8004de4 <LTC681x_pollAdc>
 8004704:	4603      	mov	r3, r0
}
 8004706:	4618      	mov	r0, r3
 8004708:	bd80      	pop	{r7, pc}

0800470a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	6039      	str	r1, [r7, #0]
 8004714:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fd8a 	bl	8005234 <LTC681x_reset_crc_count>
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	6039      	str	r1, [r7, #0]
 8004732:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fded 	bl	8005318 <LTC681x_init_cfg>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af06      	add	r7, sp, #24
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
 8004756:	460b      	mov	r3, r1
 8004758:	71bb      	strb	r3, [r7, #6]
 800475a:	4613      	mov	r3, r2
 800475c:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800475e:	7979      	ldrb	r1, [r7, #5]
 8004760:	79ba      	ldrb	r2, [r7, #6]
 8004762:	79f8      	ldrb	r0, [r7, #7]
 8004764:	8c3b      	ldrh	r3, [r7, #32]
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	8bbb      	ldrh	r3, [r7, #28]
 800476a:	9303      	str	r3, [sp, #12]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	9302      	str	r3, [sp, #8]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	460b      	mov	r3, r1
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	f000 fe02 	bl	8005384 <LTC681x_set_cfgr>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <wakeup_sleep>:
 * @param parameters   :  Total number of BMS ICs
 * @return Value       :  none
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
    int i;
    for (i = 0; i < total_ic; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e00c      	b.n	80047b2 <wakeup_sleep+0x2a>
    {
        cs_low();
 8004798:	f001 f892 	bl	80058c0 <cs_low>
        delay_time_us(160);
 800479c:	20a0      	movs	r0, #160	@ 0xa0
 800479e:	f001 f8b7 	bl	8005910 <delay_time_us>
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 80047a2:	f001 f8a1 	bl	80058e8 <cs_high>
        delay_time_us(18);
 80047a6:	2012      	movs	r0, #18
 80047a8:	f001 f8b2 	bl	8005910 <delay_time_us>
    for (i = 0; i < total_ic; i++)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	dbee      	blt.n	8004798 <wakeup_sleep+0x10>
//        HAL_Delay(2500);
    }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <cmd_68>:
 * @brief Description  :  Generic function to write 68xx commands. Function calculates PEC for tx_cmd data.
 * @param parameters   :  transmit commands
 * @return Value       :  none
 */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = tx_cmd[0];
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	723b      	strb	r3, [r7, #8]
    cmd[1] = tx_cmd[1];
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc(2, cmd);
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4619      	mov	r1, r3
 80047de:	2002      	movs	r0, #2
 80047e0:	f000 f8a2 	bl	8004928 <pec15_calc>
 80047e4:	4603      	mov	r3, r0
 80047e6:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80047e8:	89fb      	ldrh	r3, [r7, #14]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 80047f2:	89fb      	ldrh	r3, [r7, #14]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	72fb      	strb	r3, [r7, #11]

    cs_low();
 80047f8:	f001 f862 	bl	80058c0 <cs_low>
    spi_write_array(4, cmd);
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	4619      	mov	r1, r3
 8004802:	2004      	movs	r0, #4
 8004804:	f001 f8a0 	bl	8005948 <spi_write_array>
    cs_high();
 8004808:	f001 f86e 	bl	80058e8 <cs_high>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8004822:	2306      	movs	r3, #6
 8004824:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	3304      	adds	r3, #4
 800482e:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8004830:	7efb      	ldrb	r3, [r7, #27]
 8004832:	4618      	mov	r0, r3
 8004834:	f007 ffc0 	bl	800c7b8 <malloc>
 8004838:	4603      	mov	r3, r0
 800483a:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781a      	ldrb	r2, [r3, #0]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	7852      	ldrb	r2, [r2, #1]
 800484c:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 800484e:	6979      	ldr	r1, [r7, #20]
 8004850:	2002      	movs	r0, #2
 8004852:	f000 f869 	bl	8004928 <pec15_calc>
 8004856:	4603      	mov	r3, r0
 8004858:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800485a:	8a7b      	ldrh	r3, [r7, #18]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29a      	uxth	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	3302      	adds	r3, #2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3303      	adds	r3, #3
 800486c:	8a7a      	ldrh	r2, [r7, #18]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8004872:	2304      	movs	r3, #4
 8004874:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	77bb      	strb	r3, [r7, #30]
 800487a:	e042      	b.n	8004902 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800487c:	2300      	movs	r3, #0
 800487e:	777b      	strb	r3, [r7, #29]
 8004880:	e016      	b.n	80048b0 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8004882:	7fbb      	ldrb	r3, [r7, #30]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	461a      	mov	r2, r3
 8004890:	7f7b      	ldrb	r3, [r7, #29]
 8004892:	4413      	add	r3, r2
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	441a      	add	r2, r3
 800489a:	7ffb      	ldrb	r3, [r7, #31]
 800489c:	6979      	ldr	r1, [r7, #20]
 800489e:	440b      	add	r3, r1
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	3301      	adds	r3, #1
 80048a8:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80048aa:	7f7b      	ldrb	r3, [r7, #29]
 80048ac:	3301      	adds	r3, #1
 80048ae:	777b      	strb	r3, [r7, #29]
 80048b0:	7f7a      	ldrb	r2, [r7, #29]
 80048b2:	7f3b      	ldrb	r3, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3e4      	bcc.n	8004882 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 80048b8:	7fbb      	ldrb	r3, [r7, #30]
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	441a      	add	r2, r3
 80048ca:	7f3b      	ldrb	r3, [r7, #28]
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f82a 	bl	8004928 <pec15_calc>
 80048d4:	4603      	mov	r3, r0
 80048d6:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80048d8:	8a3b      	ldrh	r3, [r7, #16]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b299      	uxth	r1, r3
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	b2ca      	uxtb	r2, r1
 80048e6:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80048e8:	7ffb      	ldrb	r3, [r7, #31]
 80048ea:	3301      	adds	r3, #1
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4413      	add	r3, r2
 80048f0:	8a3a      	ldrh	r2, [r7, #16]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	3302      	adds	r3, #2
 80048fa:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80048fc:	7fbb      	ldrb	r3, [r7, #30]
 80048fe:	3b01      	subs	r3, #1
 8004900:	77bb      	strb	r3, [r7, #30]
 8004902:	7fbb      	ldrb	r3, [r7, #30]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1b9      	bne.n	800487c <write_68+0x68>
    }

    cs_low();
 8004908:	f000 ffda 	bl	80058c0 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800490c:	7efb      	ldrb	r3, [r7, #27]
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	4618      	mov	r0, r3
 8004912:	f001 f819 	bl	8005948 <spi_write_array>
    cs_high();
 8004916:	f000 ffe7 	bl	80058e8 <cs_high>

    free(cmd);
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f007 ff54 	bl	800c7c8 <free>
}
 8004920:	bf00      	nop
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	6039      	str	r1, [r7, #0]
 8004932:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8004934:	2310      	movs	r3, #16
 8004936:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8004938:	2300      	movs	r3, #0
 800493a:	737b      	strb	r3, [r7, #13]
 800493c:	e017      	b.n	800496e <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	b29b      	uxth	r3, r3
 8004944:	7b7a      	ldrb	r2, [r7, #13]
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	440a      	add	r2, r1
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	4053      	eors	r3, r2
 800494e:	b29b      	uxth	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8004954:	89fb      	ldrh	r3, [r7, #14]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	b29a      	uxth	r2, r3
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	490a      	ldr	r1, [pc, #40]	@ (8004988 <pec15_calc+0x60>)
 800495e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4053      	eors	r3, r2
 8004966:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8004968:	7b7b      	ldrb	r3, [r7, #13]
 800496a:	3301      	adds	r3, #1
 800496c:	737b      	strb	r3, [r7, #13]
 800496e:	7b7a      	ldrb	r2, [r7, #13]
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	429a      	cmp	r2, r3
 8004974:	d3e3      	bcc.n	800493e <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8004976:	89fb      	ldrh	r3, [r7, #14]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	0800d84c 	.word	0x0800d84c

0800498c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b0c4      	sub	sp, #272	@ 0x110
 8004990:	af00      	add	r7, sp, #0
 8004992:	4602      	mov	r2, r0
 8004994:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004998:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800499c:	6019      	str	r1, [r3, #0]
 800499e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049a2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80049a6:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 80049a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049ac:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80049c2:	e047      	b.n	8004a54 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 80049c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 80049d6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80049da:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80049de:	e00b      	b.n	80049f8 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 80049e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049e4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80049fe:	e020      	b.n	8004a42 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8004a00:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8004a04:	4613      	mov	r3, r2
 8004a06:	019b      	lsls	r3, r3, #6
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1899      	adds	r1, r3, r2
 8004a1a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8004a1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004a22:	5c89      	ldrb	r1, [r1, r2]
 8004a24:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004a28:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8004a2c:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8004a2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004a32:	3301      	adds	r3, #1
 8004a34:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8004a38:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004a42:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d9da      	bls.n	8004a00 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a4a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a58:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a5c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3ae      	bcc.n	80049c4 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8004a66:	f107 0208 	add.w	r2, r7, #8
 8004a6a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8004a6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a72:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fecb 	bl	8004814 <write_68>
}
 8004a7e:	bf00      	nop
 8004a80:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
 8004a92:	460b      	mov	r3, r1
 8004a94:	71bb      	strb	r3, [r7, #6]
 8004a96:	4613      	mov	r3, r2
 8004a98:	717b      	strb	r3, [r7, #5]
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	105b      	asrs	r3, r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x02;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	733b      	strb	r3, [r7, #12]
    md_bits = (MD & 0x01) << 7;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8004ab4:	79bb      	ldrb	r3, [r7, #6]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	4413      	add	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	797b      	ldrb	r3, [r7, #5]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3360      	adds	r3, #96	@ 0x60
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	737b      	strb	r3, [r7, #13]

    cmd_68(cmd);
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fe77 	bl	80047c4 <cmd_68>
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <LTC681x_rdcv>:
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 8004ade:	b5b0      	push	{r4, r5, r7, lr}
 8004ae0:	b088      	sub	sp, #32
 8004ae2:	af02      	add	r7, sp, #8
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	603a      	str	r2, [r7, #0]
 8004ae8:	71fb      	strb	r3, [r7, #7]
 8004aea:	460b      	mov	r3, r1
 8004aec:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	75fb      	strb	r3, [r7, #23]
    uint8_t *cell_data;
    uint8_t c_ic = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75bb      	strb	r3, [r7, #22]
    uint8_t cell_reg;
    int current_ic;
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8004af6:	79bb      	ldrb	r3, [r7, #6]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4618      	mov	r0, r3
 8004afc:	f007 fe5c 	bl	800c7b8 <malloc>
 8004b00:	4603      	mov	r3, r0
 8004b02:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d14c      	bne.n	8004ba4 <LTC681x_rdcv+0xc6>
    {
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	757b      	strb	r3, [r7, #21]
 8004b0e:	e042      	b.n	8004b96 <LTC681x_rdcv+0xb8>
        {
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8004b10:	79b9      	ldrb	r1, [r7, #6]
 8004b12:	7d7b      	ldrb	r3, [r7, #21]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f897 	bl	8004c4a <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e032      	b.n	8004b88 <LTC681x_rdcv+0xaa>
            {
                if (ic->isospi_reverse == false)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <LTC681x_rdcv+0x54>
                {
                    c_ic = current_ic;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	75bb      	strb	r3, [r7, #22]
 8004b30:	e006      	b.n	8004b40 <LTC681x_rdcv+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	79ba      	ldrb	r2, [r7, #6]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	b2d8      	uxtb	r0, r3
                                                    &ic[c_ic].cells.c_codes[0],
 8004b44:	7dba      	ldrb	r2, [r7, #22]
 8004b46:	4613      	mov	r3, r2
 8004b48:	019b      	lsls	r3, r3, #6
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b54:	f103 041e 	add.w	r4, r3, #30
                                                    &ic[c_ic].cells.pec_match[0]);;
 8004b58:	7dba      	ldrb	r2, [r7, #22]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	461a      	mov	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b68:	3342      	adds	r3, #66	@ 0x42
 8004b6a:	7d79      	ldrb	r1, [r7, #21]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4623      	mov	r3, r4
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f000 f8c5 	bl	8004d00 <parse_cells>
 8004b76:	4603      	mov	r3, r0
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dbc8      	blt.n	8004b22 <LTC681x_rdcv+0x44>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004b90:	7d7b      	ldrb	r3, [r7, #21]
 8004b92:	3301      	adds	r3, #1
 8004b94:	757b      	strb	r3, [r7, #21]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8004b9c:	7d7a      	ldrb	r2, [r7, #21]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d9b6      	bls.n	8004b10 <LTC681x_rdcv+0x32>
 8004ba2:	e044      	b.n	8004c2e <LTC681x_rdcv+0x150>
        }
    }

    else
    {
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8004ba4:	79b9      	ldrb	r1, [r7, #6]
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f84d 	bl	8004c4a <LTC681x_rdcv_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e037      	b.n	8004c26 <LTC681x_rdcv+0x148>
        {
            if (ic->isospi_reverse == false)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <LTC681x_rdcv+0xe8>
            {
                c_ic = current_ic;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	75bb      	strb	r3, [r7, #22]
 8004bc4:	e006      	b.n	8004bd4 <LTC681x_rdcv+0xf6>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	79ba      	ldrb	r2, [r7, #6]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = pec_error
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	b2d8      	uxtb	r0, r3
 8004bd8:	7dbb      	ldrb	r3, [r7, #22]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	189c      	adds	r4, r3, r2
                                  &ic[c_ic].cells.c_codes[0],
 8004be2:	7dba      	ldrb	r2, [r7, #22]
 8004be4:	4613      	mov	r3, r2
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	461a      	mov	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004bf2:	f103 051e 	add.w	r5, r3, #30
                                  &ic[c_ic].cells.pec_match[0]);;
 8004bf6:	7dba      	ldrb	r2, [r7, #22]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	019b      	lsls	r3, r3, #6
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	461a      	mov	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004c06:	3342      	adds	r3, #66	@ 0x42
 8004c08:	79f9      	ldrb	r1, [r7, #7]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	4622      	mov	r2, r4
 8004c10:	f000 f876 	bl	8004d00 <parse_cells>
 8004c14:	4603      	mov	r3, r0
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	b2db      	uxtb	r3, r3
            pec_error = pec_error
 8004c1e:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3301      	adds	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	79bb      	ldrb	r3, [r7, #6]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	dbc3      	blt.n	8004bb6 <LTC681x_rdcv+0xd8>
        }
    }
    LTC681x_check_pec(total_ic, CELL, ic);
 8004c2e:	79bb      	ldrb	r3, [r7, #6]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f917 	bl	8004e68 <LTC681x_check_pec>
    free(cell_data);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f007 fdc4 	bl	800c7c8 <free>

    return (pec_error);
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bdb0      	pop	{r4, r5, r7, pc}

08004c4a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	603a      	str	r2, [r7, #0]
 8004c54:	71fb      	strb	r3, [r7, #7]
 8004c56:	460b      	mov	r3, r1
 8004c58:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //1: RDCVA
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d104      	bne.n	8004c6e <LTC681x_rdcv_reg+0x24>
    {
        cmd[1] = 0x04;
 8004c64:	2304      	movs	r3, #4
 8004c66:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	723b      	strb	r3, [r7, #8]
 8004c6c:	e026      	b.n	8004cbc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 2) //2: RDCVB
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d104      	bne.n	8004c7e <LTC681x_rdcv_reg+0x34>
    {
        cmd[1] = 0x06;
 8004c74:	2306      	movs	r3, #6
 8004c76:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	723b      	strb	r3, [r7, #8]
 8004c7c:	e01e      	b.n	8004cbc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 3) //3: RDCVC
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d104      	bne.n	8004c8e <LTC681x_rdcv_reg+0x44>
    {
        cmd[1] = 0x08;
 8004c84:	2308      	movs	r3, #8
 8004c86:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	723b      	strb	r3, [r7, #8]
 8004c8c:	e016      	b.n	8004cbc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 4) //4: RDCVD
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d104      	bne.n	8004c9e <LTC681x_rdcv_reg+0x54>
    {
        cmd[1] = 0x0A;
 8004c94:	230a      	movs	r3, #10
 8004c96:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	723b      	strb	r3, [r7, #8]
 8004c9c:	e00e      	b.n	8004cbc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 5) //4: RDCVE
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d104      	bne.n	8004cae <LTC681x_rdcv_reg+0x64>
    {
        cmd[1] = 0x09;
 8004ca4:	2309      	movs	r3, #9
 8004ca6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	723b      	strb	r3, [r7, #8]
 8004cac:	e006      	b.n	8004cbc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 6) //4: RDCVF
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d103      	bne.n	8004cbc <LTC681x_rdcv_reg+0x72>
    {
        cmd[1] = 0x0B;
 8004cb4:	230b      	movs	r3, #11
 8004cb6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f7ff fe30 	bl	8004928 <pec15_calc>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004ccc:	89bb      	ldrh	r3, [r7, #12]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004cd6:	89bb      	ldrh	r3, [r7, #12]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004cdc:	f000 fdf0 	bl	80058c0 <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	79ba      	ldrb	r2, [r7, #6]
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	f107 0008 	add.w	r0, r7, #8
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	2104      	movs	r1, #4
 8004cf0:	f000 fe4e 	bl	8005990 <spi_write_read>
    cs_high();
 8004cf4:	f000 fdf8 	bl	80058e8 <cs_high>
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60ba      	str	r2, [r7, #8]
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	73bb      	strb	r3, [r7, #14]
    const uint8_t BYT_IN_REG = 6;
 8004d12:	2306      	movs	r3, #6
 8004d14:	773b      	strb	r3, [r7, #28]
    const uint8_t CELL_IN_REG = 3;
 8004d16:	2303      	movs	r3, #3
 8004d18:	76fb      	strb	r3, [r7, #27]
    int8_t pec_error = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	77fb      	strb	r3, [r7, #31]
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	77bb      	strb	r3, [r7, #30]
    uint8_t current_cell;

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004d24:	2300      	movs	r3, #0
 8004d26:	777b      	strb	r3, [r7, #29]
 8004d28:	e01f      	b.n	8004d6a <parse_cells+0x6a>
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
 8004d2a:	7fbb      	ldrb	r3, [r7, #30]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	4413      	add	r3, r2
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8004d34:	7fbb      	ldrb	r3, [r7, #30]
 8004d36:	3301      	adds	r3, #1
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	b29b      	uxth	r3, r3
        parsed_cell = cell_data[data_counter]
 8004d42:	440b      	add	r3, r1
 8004d44:	82bb      	strh	r3, [r7, #20]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8004d46:	7f7a      	ldrb	r2, [r7, #29]
 8004d48:	7bbb      	ldrb	r3, [r7, #14]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	7ef9      	ldrb	r1, [r7, #27]
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	8aba      	ldrh	r2, [r7, #20]
 8004d5c:	801a      	strh	r2, [r3, #0]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8004d5e:	7fbb      	ldrb	r3, [r7, #30]
 8004d60:	3302      	adds	r3, #2
 8004d62:	77bb      	strb	r3, [r7, #30]
    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004d64:	7f7b      	ldrb	r3, [r7, #29]
 8004d66:	3301      	adds	r3, #1
 8004d68:	777b      	strb	r3, [r7, #29]
 8004d6a:	7f7a      	ldrb	r2, [r7, #29]
 8004d6c:	7efb      	ldrb	r3, [r7, #27]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d3db      	bcc.n	8004d2a <parse_cells+0x2a>
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004d72:	7fbb      	ldrb	r3, [r7, #30]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	b21a      	sxth	r2, r3
 8004d80:	7fbb      	ldrb	r3, [r7, #30]
 8004d82:	3301      	adds	r3, #1
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	440b      	add	r3, r1
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	833b      	strh	r3, [r7, #24]
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	461a      	mov	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	7f3b      	ldrb	r3, [r7, #28]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fdc1 	bl	8004928 <pec15_calc>
 8004da6:	4603      	mov	r3, r0
 8004da8:	82fb      	strh	r3, [r7, #22]

    if (received_pec != data_pec)
 8004daa:	8b3a      	ldrh	r2, [r7, #24]
 8004dac:	8afb      	ldrh	r3, [r7, #22]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d008      	beq.n	8004dc4 <parse_cells+0xc4>
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8004db2:	2301      	movs	r3, #1
 8004db4:	77fb      	strb	r3, [r7, #31]
        ic_pec[cell_reg - 1] = 1;
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e005      	b.n	8004dd0 <parse_cells+0xd0>
    }
    else
    {
        ic_pec[cell_reg - 1] = 0;
 8004dc4:	7bbb      	ldrb	r3, [r7, #14]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dca:	4413      	add	r3, r2
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
    }
    data_counter = data_counter + 2;
 8004dd0:	7fbb      	ldrb	r3, [r7, #30]
 8004dd2:	3302      	adds	r3, #2
 8004dd4:	77bb      	strb	r3, [r7, #30]

    return (pec_error);
 8004dd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <LTC681x_pollAdc>:
    return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
    uint32_t counter = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
    uint8_t finished = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	72fb      	strb	r3, [r7, #11]
    uint8_t current_time = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = 0x07;
 8004df6:	2307      	movs	r3, #7
 8004df8:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x14;
 8004dfa:	2314      	movs	r3, #20
 8004dfc:	717b      	strb	r3, [r7, #5]
    cmd_pec = pec15_calc(2, cmd);
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	2002      	movs	r0, #2
 8004e04:	f7ff fd90 	bl	8004928 <pec15_calc>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	813b      	strh	r3, [r7, #8]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004e0c:	893b      	ldrh	r3, [r7, #8]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	71bb      	strb	r3, [r7, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8004e16:	893b      	ldrh	r3, [r7, #8]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	71fb      	strb	r3, [r7, #7]

    cs_low();
 8004e1c:	f000 fd50 	bl	80058c0 <cs_low>
    spi_write_array(4, cmd);
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	2004      	movs	r0, #4
 8004e26:	f000 fd8f 	bl	8005948 <spi_write_array>
    while ((counter < 400000) && (finished == 0))
 8004e2a:	e00d      	b.n	8004e48 <LTC681x_pollAdc+0x64>
    {
        current_time = spi_read_byte(0xFF);
 8004e2c:	20ff      	movs	r0, #255	@ 0xff
 8004e2e:	f000 fdeb 	bl	8005a08 <spi_read_byte>
 8004e32:	4603      	mov	r3, r0
 8004e34:	72bb      	strb	r3, [r7, #10]
        if (current_time > 0)
 8004e36:	7abb      	ldrb	r3, [r7, #10]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <LTC681x_pollAdc+0x5e>
        {
            finished = 1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	72fb      	strb	r3, [r7, #11]
 8004e40:	e002      	b.n	8004e48 <LTC681x_pollAdc+0x64>

        }
        else
        {
            counter = counter + 10;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	330a      	adds	r3, #10
 8004e46:	60fb      	str	r3, [r7, #12]
    while ((counter < 400000) && (finished == 0))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a06      	ldr	r2, [pc, #24]	@ (8004e64 <LTC681x_pollAdc+0x80>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d802      	bhi.n	8004e56 <LTC681x_pollAdc+0x72>
 8004e50:	7afb      	ldrb	r3, [r7, #11]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ea      	beq.n	8004e2c <LTC681x_pollAdc+0x48>
        }
    }
    cs_high();
 8004e56:	f000 fd47 	bl	80058e8 <cs_high>

    return ((uint32_t)current_time);
 8004e5a:	7abb      	ldrb	r3, [r7, #10]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	00061a7f 	.word	0x00061a7f

08004e68 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
        uint8_t reg, //Type of Register
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	603a      	str	r2, [r7, #0]
 8004e72:	71fb      	strb	r3, [r7, #7]
 8004e74:	460b      	mov	r3, r1
 8004e76:	71bb      	strb	r3, [r7, #6]
    int current_ic;
    int i;
    switch (reg)
 8004e78:	79bb      	ldrb	r3, [r7, #6]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	f200 81d3 	bhi.w	8005226 <LTC681x_check_pec+0x3be>
 8004e80:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <LTC681x_check_pec+0x20>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004e9d 	.word	0x08004e9d
 8004e8c:	08004fc9 	.word	0x08004fc9
 8004e90:	08005093 	.word	0x08005093
 8004e94:	0800515d 	.word	0x0800515d
 8004e98:	08004f33 	.word	0x08004f33
    {
    case CFGR:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e042      	b.n	8004f28 <LTC681x_check_pec+0xc0>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	461a      	mov	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].config.rx_pec_match;
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	019b      	lsls	r3, r3, #6
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	7b9b      	ldrb	r3, [r3, #14]
 8004ec8:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	019b      	lsls	r3, r3, #6
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004eda:	180a      	adds	r2, r1, r0
 8004edc:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004ede:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	019b      	lsls	r3, r3, #6
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	461a      	mov	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].config.rx_pec_match;
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	019b      	lsls	r3, r3, #6
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	7b9b      	ldrb	r3, [r3, #14]
 8004f08:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	019b      	lsls	r3, r3, #6
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	461a      	mov	r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004f1a:	180a      	adds	r2, r1, r0
 8004f1c:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004f1e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	dbb8      	blt.n	8004ea2 <LTC681x_check_pec+0x3a>
        }
        break;
 8004f30:	e17a      	b.n	8005228 <LTC681x_check_pec+0x3c0>

    case CFGRB:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e042      	b.n	8004fbe <LTC681x_check_pec+0x156>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4413      	add	r3, r2
 8004f48:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].configb.rx_pec_match;
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	461a      	mov	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	7f5b      	ldrb	r3, [r3, #29]
 8004f5e:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4613      	mov	r3, r2
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004f70:	180a      	adds	r2, r1, r0
 8004f72:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004f74:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4413      	add	r3, r2
 8004f88:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].configb.rx_pec_match;
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	461a      	mov	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	7f5b      	ldrb	r3, [r3, #29]
 8004f9e:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004fb0:	180a      	adds	r2, r1, r0
 8004fb2:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004fb4:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	dbb8      	blt.n	8004f38 <LTC681x_check_pec+0xd0>
        }
        break;
 8004fc6:	e12f      	b.n	8005228 <LTC681x_check_pec+0x3c0>
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e05c      	b.n	8005088 <LTC681x_check_pec+0x220>
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	e04f      	b.n	8005074 <LTC681x_check_pec+0x20c>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4613      	mov	r3, r2
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3342      	adds	r3, #66	@ 0x42
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4613      	mov	r3, r2
 8005006:	019b      	lsls	r3, r3, #6
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	461a      	mov	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4413      	add	r3, r2
                                + ic[current_ic].cells.pec_match[i];
 8005012:	180a      	adds	r2, r1, r0
 8005014:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8005016:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4613      	mov	r3, r2
 800501e:	019b      	lsls	r3, r3, #6
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	461a      	mov	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	441a      	add	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3360      	adds	r3, #96	@ 0x60
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	8959      	ldrh	r1, [r3, #10]
                                + ic[current_ic].cells.pec_match[i];
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	461a      	mov	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	441a      	add	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4413      	add	r3, r2
 8005048:	3342      	adds	r3, #66	@ 0x42
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
                ic[current_ic].crc_count.cell_pec[i] =
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4613      	mov	r3, r2
 8005052:	019b      	lsls	r3, r3, #6
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	461a      	mov	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	441a      	add	r2, r3
                                + ic[current_ic].cells.pec_match[i];
 800505e:	180b      	adds	r3, r1, r0
 8005060:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	3360      	adds	r3, #96	@ 0x60
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4413      	add	r3, r2
 800506a:	460a      	mov	r2, r1
 800506c:	815a      	strh	r2, [r3, #10]
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3301      	adds	r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4293      	cmp	r3, r2
 8005080:	dba8      	blt.n	8004fd4 <LTC681x_check_pec+0x16c>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	db9e      	blt.n	8004fce <LTC681x_check_pec+0x166>
            }
        }
        break;
 8005090:	e0ca      	b.n	8005228 <LTC681x_check_pec+0x3c0>
    case AUX:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e05c      	b.n	8005152 <LTC681x_check_pec+0x2ea>
        {
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	e04f      	b.n	800513e <LTC681x_check_pec+0x2d6>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	019b      	lsls	r3, r3, #6
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	461a      	mov	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + (ic[current_ic].aux.pec_match[i]);
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	019b      	lsls	r3, r3, #6
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	461a      	mov	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	441a      	add	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	3360      	adds	r3, #96	@ 0x60
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	461a      	mov	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4413      	add	r3, r2
                                + (ic[current_ic].aux.pec_match[i]);
 80050dc:	180a      	adds	r2, r1, r0
 80050de:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 80050e0:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.aux_pec[i] =
                        ic[current_ic].crc_count.aux_pec[i]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	441a      	add	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3368      	adds	r3, #104	@ 0x68
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	88d9      	ldrh	r1, [r3, #6]
                                + (ic[current_ic].aux.pec_match[i]);
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4613      	mov	r3, r2
 8005102:	019b      	lsls	r3, r3, #6
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	461a      	mov	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	441a      	add	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	4413      	add	r3, r2
 8005112:	3360      	adds	r3, #96	@ 0x60
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4613      	mov	r3, r2
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	441a      	add	r2, r3
                                + (ic[current_ic].aux.pec_match[i]);
 8005128:	180b      	adds	r3, r1, r0
 800512a:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.aux_pec[i] =
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3368      	adds	r3, #104	@ 0x68
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	4413      	add	r3, r2
 8005134:	460a      	mov	r2, r1
 8005136:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3301      	adds	r3, #1
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4293      	cmp	r3, r2
 800514a:	dba8      	blt.n	800509e <LTC681x_check_pec+0x236>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	db9e      	blt.n	8005098 <LTC681x_check_pec+0x230>
            }
        }

        break;
 800515a:	e065      	b.n	8005228 <LTC681x_check_pec+0x3c0>
    case STAT:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e05c      	b.n	800521c <LTC681x_check_pec+0x3b4>
        {

            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	e04f      	b.n	8005208 <LTC681x_check_pec+0x3a0>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4613      	mov	r3, r2
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	461a      	mov	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4413      	add	r3, r2
 8005178:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].stat.pec_match[i];
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4613      	mov	r3, r2
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	461a      	mov	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	441a      	add	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	3371      	adds	r3, #113	@ 0x71
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	019b      	lsls	r3, r3, #6
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	461a      	mov	r2, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	4413      	add	r3, r2
                                + ic[current_ic].stat.pec_match[i];
 80051a6:	180a      	adds	r2, r1, r0
 80051a8:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 80051aa:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.stat_pec[i] =
                        ic[current_ic].crc_count.stat_pec[i]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	019b      	lsls	r3, r3, #6
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	461a      	mov	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	441a      	add	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	336c      	adds	r3, #108	@ 0x6c
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	88d9      	ldrh	r1, [r3, #6]
                                + ic[current_ic].stat.pec_match[i];
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4613      	mov	r3, r2
 80051cc:	019b      	lsls	r3, r3, #6
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	461a      	mov	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	441a      	add	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4413      	add	r3, r2
 80051dc:	3371      	adds	r3, #113	@ 0x71
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
                ic[current_ic].crc_count.stat_pec[i] =
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	461a      	mov	r2, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	441a      	add	r2, r3
                                + ic[current_ic].stat.pec_match[i];
 80051f2:	180b      	adds	r3, r1, r0
 80051f4:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.stat_pec[i] =
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	336c      	adds	r3, #108	@ 0x6c
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	460a      	mov	r2, r1
 8005200:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	3301      	adds	r3, #1
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800520e:	3b01      	subs	r3, #1
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	dba8      	blt.n	8005168 <LTC681x_check_pec+0x300>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	db9e      	blt.n	8005162 <LTC681x_check_pec+0x2fa>
            }
        }
        break;
 8005224:	e000      	b.n	8005228 <LTC681x_check_pec+0x3c0>
    default:
        break;
 8005226:	bf00      	nop
    }
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e05d      	b.n	8005302 <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	019b      	lsls	r3, r3, #6
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	461a      	mov	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4413      	add	r3, r2
 8005256:	2200      	movs	r2, #0
 8005258:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	461a      	mov	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4413      	add	r3, r2
 800526c:	2200      	movs	r2, #0
 800526e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e010      	b.n	800529a <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	461a      	mov	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	441a      	add	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3360      	adds	r3, #96	@ 0x60
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	2200      	movs	r2, #0
 8005292:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b05      	cmp	r3, #5
 800529e:	ddeb      	ble.n	8005278 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e010      	b.n	80052c8 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4613      	mov	r3, r2
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	461a      	mov	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3368      	adds	r3, #104	@ 0x68
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	ddeb      	ble.n	80052a6 <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e010      	b.n	80052f6 <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	461a      	mov	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	441a      	add	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	336c      	adds	r3, #108	@ 0x6c
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	2200      	movs	r2, #0
 80052ee:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	ddeb      	ble.n	80052d4 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3301      	adds	r3, #1
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	db9d      	blt.n	8005246 <LTC681x_reset_crc_count+0x12>
        }
    }
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e021      	b.n	800536e <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 800532a:	2300      	movs	r3, #0
 800532c:	73bb      	strb	r3, [r7, #14]
 800532e:	e00d      	b.n	800534c <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	4613      	mov	r3, r2
 8005334:	019b      	lsls	r3, r3, #6
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	461a      	mov	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	441a      	add	r2, r3
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2100      	movs	r1, #0
 8005344:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	3301      	adds	r3, #1
 800534a:	73bb      	strb	r3, [r7, #14]
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	2b05      	cmp	r3, #5
 8005350:	d9ee      	bls.n	8005330 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	4613      	mov	r3, r2
 8005356:	019b      	lsls	r3, r3, #6
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	461a      	mov	r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	4413      	add	r3, r2
 8005362:	2200      	movs	r2, #0
 8005364:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	3301      	adds	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d3d9      	bcc.n	800532a <LTC681x_init_cfg+0x12>
    }
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6039      	str	r1, [r7, #0]
 800538c:	4611      	mov	r1, r2
 800538e:	461a      	mov	r2, r3
 8005390:	4603      	mov	r3, r0
 8005392:	71fb      	strb	r3, [r7, #7]
 8005394:	460b      	mov	r3, r1
 8005396:	71bb      	strb	r3, [r7, #6]
 8005398:	4613      	mov	r3, r2
 800539a:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 800539c:	79ba      	ldrb	r2, [r7, #6]
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f828 	bl	80053f8 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 80053a8:	797a      	ldrb	r2, [r7, #5]
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f85e 	bl	8005470 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f894 	bl	80054e8 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f8e6 	bl	8005598 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f97f 	bl	80056d6 <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 80053d8:	8bba      	ldrh	r2, [r7, #28]
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f9d1 	bl	8005786 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 80053e4:	8c3a      	ldrh	r2, [r7, #32]
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fa1b 	bl	8005826 <LTC681x_set_cfgr_ov>
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	6039      	str	r1, [r7, #0]
 8005402:	71fb      	strb	r3, [r7, #7]
 8005404:	4613      	mov	r3, r2
 8005406:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8005408:	79bb      	ldrb	r3, [r7, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d015      	beq.n	800543a <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 800540e:	79fa      	ldrb	r2, [r7, #7]
 8005410:	4613      	mov	r3, r2
 8005412:	019b      	lsls	r3, r3, #6
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	461a      	mov	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4413      	add	r3, r2
 800541e:	7819      	ldrb	r1, [r3, #0]
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	4613      	mov	r3, r2
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	461a      	mov	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	f041 0204 	orr.w	r2, r1, #4
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8005438:	e014      	b.n	8005464 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 800543a:	79fa      	ldrb	r2, [r7, #7]
 800543c:	4613      	mov	r3, r2
 800543e:	019b      	lsls	r3, r3, #6
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4413      	add	r3, r2
 800544a:	7819      	ldrb	r1, [r3, #0]
 800544c:	79fa      	ldrb	r2, [r7, #7]
 800544e:	4613      	mov	r3, r2
 8005450:	019b      	lsls	r3, r3, #6
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	461a      	mov	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4413      	add	r3, r2
 800545c:	f021 0204 	bic.w	r2, r1, #4
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	71fb      	strb	r3, [r7, #7]
 800547c:	4613      	mov	r3, r2
 800547e:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 8005480:	79bb      	ldrb	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d015      	beq.n	80054b2 <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8005486:	79fa      	ldrb	r2, [r7, #7]
 8005488:	4613      	mov	r3, r2
 800548a:	019b      	lsls	r3, r3, #6
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	461a      	mov	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4413      	add	r3, r2
 8005496:	7819      	ldrb	r1, [r3, #0]
 8005498:	79fa      	ldrb	r2, [r7, #7]
 800549a:	4613      	mov	r3, r2
 800549c:	019b      	lsls	r3, r3, #6
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4413      	add	r3, r2
 80054a8:	f041 0201 	orr.w	r2, r1, #1
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 80054b0:	e014      	b.n	80054dc <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 80054b2:	79fa      	ldrb	r2, [r7, #7]
 80054b4:	4613      	mov	r3, r2
 80054b6:	019b      	lsls	r3, r3, #6
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	4413      	add	r3, r2
 80054c2:	7819      	ldrb	r1, [r3, #0]
 80054c4:	79fa      	ldrb	r2, [r7, #7]
 80054c6:	4613      	mov	r3, r2
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	461a      	mov	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	f021 0201 	bic.w	r2, r1, #1
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e043      	b.n	8005584 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005508:	7bfa      	ldrb	r2, [r7, #15]
 800550a:	4613      	mov	r3, r2
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	461a      	mov	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4413      	add	r3, r2
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	3303      	adds	r3, #3
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	b25b      	sxtb	r3, r3
 8005528:	4313      	orrs	r3, r2
 800552a:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800552c:	7bfa      	ldrb	r2, [r7, #15]
 800552e:	4613      	mov	r3, r2
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	461a      	mov	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 800553c:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e01d      	b.n	800557e <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	4613      	mov	r3, r2
 8005546:	019b      	lsls	r3, r3, #6
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	3303      	adds	r3, #3
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	b25b      	sxtb	r3, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	b25b      	sxtb	r3, r3
 8005566:	4013      	ands	r3, r2
 8005568:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	4613      	mov	r3, r2
 800556e:	019b      	lsls	r3, r3, #6
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	461a      	mov	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 800557a:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800557c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3301      	adds	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b04      	cmp	r3, #4
 8005588:	ddb8      	ble.n	80054fc <LTC681x_set_cfgr_gpio+0x14>
    }
}
 800558a:	bf00      	nop
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e041      	b.n	8005630 <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	4613      	mov	r3, r2
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4413      	add	r3, r2
 80055c8:	791b      	ldrb	r3, [r3, #4]
 80055ca:	b25a      	sxtb	r2, r3
 80055cc:	2101      	movs	r1, #1
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b259      	sxtb	r1, r3
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	4613      	mov	r3, r2
 80055de:	019b      	lsls	r3, r3, #6
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	b2ca      	uxtb	r2, r1
 80055ec:	711a      	strb	r2, [r3, #4]
 80055ee:	e01c      	b.n	800562a <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	4613      	mov	r3, r2
 80055f4:	019b      	lsls	r3, r3, #6
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4413      	add	r3, r2
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8005604:	2101      	movs	r1, #1
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	b25b      	sxtb	r3, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	b25b      	sxtb	r3, r3
 8005612:	4013      	ands	r3, r2
 8005614:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	4613      	mov	r3, r2
 800561a:	019b      	lsls	r3, r3, #6
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	461a      	mov	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8005626:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005628:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	3301      	adds	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b07      	cmp	r3, #7
 8005634:	ddba      	ble.n	80055ac <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e042      	b.n	80056c2 <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3308      	adds	r3, #8
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01b      	beq.n	8005682 <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 800564a:	7bfa      	ldrb	r2, [r7, #15]
 800564c:	4613      	mov	r3, r2
 800564e:	019b      	lsls	r3, r3, #6
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	795b      	ldrb	r3, [r3, #5]
 800565c:	b25a      	sxtb	r2, r3
 800565e:	2101      	movs	r1, #1
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	b25b      	sxtb	r3, r3
 8005668:	4313      	orrs	r3, r2
 800566a:	b259      	sxtb	r1, r3
 800566c:	7bfa      	ldrb	r2, [r7, #15]
 800566e:	4613      	mov	r3, r2
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4413      	add	r3, r2
 800567c:	b2ca      	uxtb	r2, r1
 800567e:	715a      	strb	r2, [r3, #5]
 8005680:	e01c      	b.n	80056bc <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	4613      	mov	r3, r2
 8005686:	019b      	lsls	r3, r3, #6
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	795b      	ldrb	r3, [r3, #5]
 8005694:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8005696:	2101      	movs	r1, #1
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	4013      	ands	r3, r2
 80056a6:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	4613      	mov	r3, r2
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	461a      	mov	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80056b8:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056ba:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3301      	adds	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	ddb9      	ble.n	800563c <LTC681x_set_cfgr_dis+0xa4>
    }
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 80056d6:	b480      	push	{r7}
 80056d8:	b087      	sub	sp, #28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4603      	mov	r3, r0
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e043      	b.n	8005772 <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01c      	beq.n	8005730 <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	4613      	mov	r3, r2
 80056fa:	019b      	lsls	r3, r3, #6
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4413      	add	r3, r2
 8005706:	795b      	ldrb	r3, [r3, #5]
 8005708:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	3304      	adds	r3, #4
 800570e:	2101      	movs	r1, #1
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	b25b      	sxtb	r3, r3
 8005716:	4313      	orrs	r3, r2
 8005718:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	4613      	mov	r3, r2
 800571e:	019b      	lsls	r3, r3, #6
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	461a      	mov	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 800572a:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800572c:	715a      	strb	r2, [r3, #5]
 800572e:	e01d      	b.n	800576c <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	4613      	mov	r3, r2
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4413      	add	r3, r2
 8005740:	795b      	ldrb	r3, [r3, #5]
 8005742:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3304      	adds	r3, #4
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	b25b      	sxtb	r3, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	b25b      	sxtb	r3, r3
 8005754:	4013      	ands	r3, r2
 8005756:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005758:	7bfa      	ldrb	r2, [r7, #15]
 800575a:	4613      	mov	r3, r2
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8005768:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800576a:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b03      	cmp	r3, #3
 8005776:	ddb8      	ble.n	80056ea <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	4603      	mov	r3, r0
 800578e:	6039      	str	r1, [r7, #0]
 8005790:	71fb      	strb	r3, [r7, #7]
 8005792:	4613      	mov	r3, r2
 8005794:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 8005796:	88bb      	ldrh	r3, [r7, #4]
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80057a0:	79fa      	ldrb	r2, [r7, #7]
 80057a2:	4613      	mov	r3, r2
 80057a4:	019b      	lsls	r3, r3, #6
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	461a      	mov	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	4413      	add	r3, r2
 80057b0:	89fa      	ldrh	r2, [r7, #14]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 80057b6:	79fa      	ldrb	r2, [r7, #7]
 80057b8:	4613      	mov	r3, r2
 80057ba:	019b      	lsls	r3, r3, #6
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	461a      	mov	r2, r3
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	4413      	add	r3, r2
 80057c6:	7899      	ldrb	r1, [r3, #2]
 80057c8:	79fa      	ldrb	r2, [r7, #7]
 80057ca:	4613      	mov	r3, r2
 80057cc:	019b      	lsls	r3, r3, #6
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	f021 020f 	bic.w	r2, r1, #15
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	4613      	mov	r3, r2
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	461a      	mov	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 80057f4:	89fb      	ldrh	r3, [r7, #14]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	b25b      	sxtb	r3, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005806:	79fa      	ldrb	r2, [r7, #7]
 8005808:	4613      	mov	r3, r2
 800580a:	019b      	lsls	r3, r3, #6
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	461a      	mov	r2, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 8005816:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005818:	709a      	strb	r2, [r3, #2]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	6039      	str	r1, [r7, #0]
 8005830:	71fb      	strb	r3, [r7, #7]
 8005832:	4613      	mov	r3, r2
 8005834:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	b299      	uxth	r1, r3
 8005842:	79fa      	ldrb	r2, [r7, #7]
 8005844:	4613      	mov	r3, r2
 8005846:	019b      	lsls	r3, r3, #6
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	461a      	mov	r2, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	4413      	add	r3, r2
 8005852:	b2ca      	uxtb	r2, r1
 8005854:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8005856:	79fa      	ldrb	r2, [r7, #7]
 8005858:	4613      	mov	r3, r2
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	461a      	mov	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4413      	add	r3, r2
 8005866:	7899      	ldrb	r1, [r3, #2]
 8005868:	79fa      	ldrb	r2, [r7, #7]
 800586a:	4613      	mov	r3, r2
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	461a      	mov	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	4413      	add	r3, r2
 8005878:	f001 020f 	and.w	r2, r1, #15
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005880:	79fa      	ldrb	r2, [r7, #7]
 8005882:	4613      	mov	r3, r2
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	4413      	add	r3, r2
 8005890:	789b      	ldrb	r3, [r3, #2]
 8005892:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	b25b      	sxtb	r3, r3
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	b25b      	sxtb	r3, r3
 800589c:	4313      	orrs	r3, r2
 800589e:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80058a0:	79fa      	ldrb	r2, [r7, #7]
 80058a2:	4613      	mov	r3, r2
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	461a      	mov	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 80058b0:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80058b2:	709a      	strb	r2, [r3, #2]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058ca:	4805      	ldr	r0, [pc, #20]	@ (80058e0 <cs_low+0x20>)
 80058cc:	f003 faf6 	bl	8008ebc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 80058d0:	2201      	movs	r2, #1
 80058d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058d6:	4803      	ldr	r0, [pc, #12]	@ (80058e4 <cs_low+0x24>)
 80058d8:	f003 faf0 	bl	8008ebc <HAL_GPIO_WritePin>


}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40020400 	.word	0x40020400
 80058e4:	40020c00 	.word	0x40020c00

080058e8 <cs_high>:

void cs_high() {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058f2:	4805      	ldr	r0, [pc, #20]	@ (8005908 <cs_high+0x20>)
 80058f4:	f003 fae2 	bl	8008ebc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 80058f8:	2201      	movs	r2, #1
 80058fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058fe:	4803      	ldr	r0, [pc, #12]	@ (800590c <cs_high+0x24>)
 8005900:	f003 fadc 	bl	8008ebc <HAL_GPIO_WritePin>


}
 8005904:	bf00      	nop
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40020400 	.word	0x40020400
 800590c:	40020c00 	.word	0x40020c00

08005910 <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4413      	add	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e003      	b.n	8005930 <delay_time_us+0x20>
			time_delay_count++) {
		__NOP();
 8005928:	bf00      	nop
			time_delay_count++) {
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	d3f7      	bcc.n	8005928 <delay_time_us+0x18>
	}
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e00f      	b.n	800597a <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	18d1      	adds	r1, r2, r3
 8005960:	2314      	movs	r3, #20
 8005962:	2201      	movs	r2, #1
 8005964:	4809      	ldr	r0, [pc, #36]	@ (800598c <spi_write_array+0x44>)
 8005966:	f005 f876 	bl	800aa56 <HAL_SPI_Transmit>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8005970:	f001 feff 	bl	8007772 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	3301      	adds	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	429a      	cmp	r2, r3
 8005980:	d3eb      	bcc.n	800595a <spi_write_array+0x12>
		}
	}

}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200019d8 	.word	0x200019d8

08005990 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	461a      	mov	r2, r3
 800599c:	460b      	mov	r3, r1
 800599e:	72fb      	strb	r3, [r7, #11]
 80059a0:	4613      	mov	r3, r2
 80059a2:	72bb      	strb	r3, [r7, #10]
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	2314      	movs	r3, #20
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	4812      	ldr	r0, [pc, #72]	@ (80059f8 <spi_write_read+0x68>)
 80059ae:	f005 f852 	bl	800aa56 <HAL_SPI_Transmit>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	4b11      	ldr	r3, [pc, #68]	@ (80059fc <spi_write_read+0x6c>)
 80059b8:	701a      	strb	r2, [r3, #0]
	rx_len_local = rx_len;
 80059ba:	4a11      	ldr	r2, [pc, #68]	@ (8005a00 <spi_write_read+0x70>)
 80059bc:	7abb      	ldrb	r3, [r7, #10]
 80059be:	7013      	strb	r3, [r2, #0]
	if (status_spi_out != HAL_OK) {
 80059c0:	4b0e      	ldr	r3, [pc, #56]	@ (80059fc <spi_write_read+0x6c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <spi_write_read+0x3c>

		Error_Handler();
 80059c8:	f001 fed3 	bl	8007772 <Error_Handler>
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 80059cc:	7abb      	ldrb	r3, [r7, #10]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	2314      	movs	r3, #20
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4808      	ldr	r0, [pc, #32]	@ (80059f8 <spi_write_read+0x68>)
 80059d6:	f005 f982 	bl	800acde <HAL_SPI_Receive>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <spi_write_read+0x74>)
 80059e0:	701a      	strb	r2, [r3, #0]
	if (status_spi_in != HAL_OK) {
 80059e2:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <spi_write_read+0x74>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <spi_write_read+0x5e>

		Error_Handler();
 80059ea:	f001 fec2 	bl	8007772 <Error_Handler>
	}

}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	200019d8 	.word	0x200019d8
 80059fc:	20001215 	.word	0x20001215
 8005a00:	20001214 	.word	0x20001214
 8005a04:	20001216 	.word	0x20001216

08005a08 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8005a12:	f107 020f 	add.w	r2, r7, #15
 8005a16:	1df9      	adds	r1, r7, #7
 8005a18:	2314      	movs	r3, #20
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4806      	ldr	r0, [pc, #24]	@ (8005a38 <spi_read_byte+0x30>)
 8005a20:	f005 fa76 	bl	800af10 <HAL_SPI_TransmitReceive>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <spi_read_byte+0x26>
		Error_Handler();
 8005a2a:	f001 fea2 	bl	8007772 <Error_Handler>
	}
	return (data);
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	200019d8 	.word	0x200019d8

08005a3c <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
	int8_t error = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	717b      	strb	r3, [r7, #5]
	wakeup_sleep(TOTAL_IC);
 8005a46:	2002      	movs	r0, #2
 8005a48:	f7fe fe9e 	bl	8004788 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2200      	movs	r2, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fe28 	bl	80046a8 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8005a58:	f7fe fe50 	bl	80046fc <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	f7fe fe93 	bl	8004788 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8005a62:	2300      	movs	r3, #0
 8005a64:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <cell_voltage_read+0x90>)
 8005a66:	2102      	movs	r1, #2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fe30 	bl	80046ce <LTC6811_rdcv>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	717b      	strb	r3, [r7, #5]
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8005a72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d121      	bne.n	8005ac0 <cell_voltage_read+0x84>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	71bb      	strb	r3, [r7, #6]
 8005a80:	e01b      	b.n	8005aba <cell_voltage_read+0x7e>
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005a82:	2300      	movs	r3, #0
 8005a84:	71fb      	strb	r3, [r7, #7]
 8005a86:	e00f      	b.n	8005aa8 <cell_voltage_read+0x6c>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8005a88:	79ba      	ldrb	r2, [r7, #6]
 8005a8a:	79f9      	ldrb	r1, [r7, #7]
 8005a8c:	480f      	ldr	r0, [pc, #60]	@ (8005acc <cell_voltage_read+0x90>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	4413      	add	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	440b      	add	r3, r1
 8005a98:	330c      	adds	r3, #12
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4403      	add	r3, r0
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	80da      	strh	r2, [r3, #6]
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	71fb      	strb	r3, [r7, #7]
 8005aa8:	4b08      	ldr	r3, [pc, #32]	@ (8005acc <cell_voltage_read+0x90>)
 8005aaa:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005aae:	79fa      	ldrb	r2, [r7, #7]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d3e9      	bcc.n	8005a88 <cell_voltage_read+0x4c>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005ab4:	79bb      	ldrb	r3, [r7, #6]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	71bb      	strb	r3, [r7, #6]
 8005aba:	79bb      	ldrb	r3, [r7, #6]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d9e0      	bls.n	8005a82 <cell_voltage_read+0x46>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
 8005ac0:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000ffc 	.word	0x20000ffc

08005ad0 <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]



	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f82d 	bl	8005b40 <crc16>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	89fa      	ldrh	r2, [r7, #14]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8005af6:	89fb      	ldrh	r3, [r7, #14]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	b299      	uxth	r1, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	b2ca      	uxtb	r2, r1
 8005b06:	701a      	strb	r2, [r3, #0]

	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	480a      	ldr	r0, [pc, #40]	@ (8005b38 <sendData+0x68>)
 8005b0e:	f003 f9d5 	bl	8008ebc <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3302      	adds	r3, #2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4806      	ldr	r0, [pc, #24]	@ (8005b3c <sendData+0x6c>)
 8005b22:	f005 fd31 	bl	800b588 <HAL_UART_Transmit>

	// Pull RE Low to enable RX operation

	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2120      	movs	r1, #32
 8005b2a:	4803      	ldr	r0, [pc, #12]	@ (8005b38 <sendData+0x68>)
 8005b2c:	f003 f9c6 	bl	8008ebc <HAL_GPIO_WritePin>
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40020400 	.word	0x40020400
 8005b3c:	20001a30 	.word	0x20001a30

08005b40 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8005b4c:	23ff      	movs	r3, #255	@ 0xff
 8005b4e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8005b50:	23ff      	movs	r3, #255	@ 0xff
 8005b52:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8005b54:	e013      	b.n	8005b7e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	4053      	eors	r3, r2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8005b66:	4a10      	ldr	r2, [pc, #64]	@ (8005ba8 <crc16+0x68>)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	4053      	eors	r3, r2
 8005b72:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8005b74:	4a0d      	ldr	r2, [pc, #52]	@ (8005bac <crc16+0x6c>)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	807a      	strh	r2, [r7, #2]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	b21a      	sxth	r2, r3
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	b21b      	sxth	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	b29b      	uxth	r3, r3
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	0800dc4c 	.word	0x0800dc4c
 8005bac:	0800dd4c 	.word	0x0800dd4c

08005bb0 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	9302      	str	r3, [sp, #8]
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	1dfb      	adds	r3, r7, #7
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	21df      	movs	r1, #223	@ 0xdf
 8005bca:	4848      	ldr	r0, [pc, #288]	@ (8005cec <RTC_Init+0x13c>)
 8005bcc:	f003 fc00 	bl	80093d0 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	9302      	str	r3, [sp, #8]
 8005be0:	2301      	movs	r3, #1
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	1dfb      	adds	r3, r7, #7
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	2301      	movs	r3, #1
 8005bea:	2200      	movs	r2, #0
 8005bec:	21df      	movs	r1, #223	@ 0xdf
 8005bee:	483f      	ldr	r0, [pc, #252]	@ (8005cec <RTC_Init+0x13c>)
 8005bf0:	f003 faf4 	bl	80091dc <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f002 fab9 	bl	800816c <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	2301      	movs	r3, #1
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	1dfb      	adds	r3, r7, #7
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2301      	movs	r3, #1
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	21df      	movs	r1, #223	@ 0xdf
 8005c0e:	4837      	ldr	r0, [pc, #220]	@ (8005cec <RTC_Init+0x13c>)
 8005c10:	f003 fbde 	bl	80093d0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	f043 0308 	orr.w	r3, r3, #8
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	2301      	movs	r3, #1
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	1dfb      	adds	r3, r7, #7
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	2203      	movs	r2, #3
 8005c30:	21df      	movs	r1, #223	@ 0xdf
 8005c32:	482e      	ldr	r0, [pc, #184]	@ (8005cec <RTC_Init+0x13c>)
 8005c34:	f003 fad2 	bl	80091dc <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	2301      	movs	r3, #1
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	1dfb      	adds	r3, r7, #7
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2301      	movs	r3, #1
 8005c48:	2200      	movs	r2, #0
 8005c4a:	21df      	movs	r1, #223	@ 0xdf
 8005c4c:	4827      	ldr	r0, [pc, #156]	@ (8005cec <RTC_Init+0x13c>)
 8005c4e:	f003 fbbf 	bl	80093d0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	2301      	movs	r3, #1
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	1dfb      	adds	r3, r7, #7
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	21df      	movs	r1, #223	@ 0xdf
 8005c70:	481e      	ldr	r0, [pc, #120]	@ (8005cec <RTC_Init+0x13c>)
 8005c72:	f003 fab3 	bl	80091dc <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2301      	movs	r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	21df      	movs	r1, #223	@ 0xdf
 8005c8a:	4818      	ldr	r0, [pc, #96]	@ (8005cec <RTC_Init+0x13c>)
 8005c8c:	f003 fba0 	bl	80093d0 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ed      	beq.n	8005c76 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	2203      	movs	r2, #3
 8005cac:	21df      	movs	r1, #223	@ 0xdf
 8005cae:	480f      	ldr	r0, [pc, #60]	@ (8005cec <RTC_Init+0x13c>)
 8005cb0:	f003 fb8e 	bl	80093d0 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d011      	beq.n	8005ce2 <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	f023 0310 	bic.w	r3, r3, #16
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	9302      	str	r3, [sp, #8]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	1dfb      	adds	r3, r7, #7
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	21df      	movs	r1, #223	@ 0xdf
 8005cdc:	4803      	ldr	r0, [pc, #12]	@ (8005cec <RTC_Init+0x13c>)
 8005cde:	f003 fa7d 	bl	80091dc <HAL_I2C_Mem_Write>
    }
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200017d4 	.word	0x200017d4

08005cf0 <tester_setup>:

extern flag_1 ;


void tester_setup(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	@ 0x40
 8005cf4:	af00      	add	r7, sp, #0
    if(RxData_modbus_01[0] == 0x7)  // Slave ID check
 8005cf6:	4bb6      	ldr	r3, [pc, #728]	@ (8005fd0 <tester_setup+0x2e0>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	f040 8327 	bne.w	800634e <tester_setup+0x65e>
    {
    	flag_1 = 0 ;
 8005d00:	4bb4      	ldr	r3, [pc, #720]	@ (8005fd4 <tester_setup+0x2e4>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8005d06:	4bb2      	ldr	r3, [pc, #712]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	f040 8117 	bne.w	8005f3e <tester_setup+0x24e>
        {
            uint8_t number_of_cells_and_temps = RxData_modbus_01[1];
 8005d10:	4baf      	ldr	r3, [pc, #700]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	76fb      	strb	r3, [r7, #27]
            uint8_t number_of_status = RxData_modbus_01[2];
 8005d16:	4bae      	ldr	r3, [pc, #696]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d18:	789b      	ldrb	r3, [r3, #2]
 8005d1a:	76bb      	strb	r3, [r7, #26]
            uint8_t commnd = RxData_modbus_01[3];
 8005d1c:	4bac      	ldr	r3, [pc, #688]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	767b      	strb	r3, [r7, #25]

            uint8_t id_LED = RxData_modbus_01[6];
 8005d22:	4bab      	ldr	r3, [pc, #684]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d24:	799b      	ldrb	r3, [r3, #6]
 8005d26:	763b      	strb	r3, [r7, #24]
            uint8_t LED_State = RxData_modbus_01[7];
 8005d28:	4ba9      	ldr	r3, [pc, #676]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d2a:	79db      	ldrb	r3, [r3, #7]
 8005d2c:	75fb      	strb	r3, [r7, #23]
            uint8_t time = RxData_modbus_01[8];
 8005d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d30:	7a1b      	ldrb	r3, [r3, #8]
 8005d32:	75bb      	strb	r3, [r7, #22]
            uint8_t temp_set = RxData_modbus_01[9];
 8005d34:	4ba6      	ldr	r3, [pc, #664]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d36:	7a5b      	ldrb	r3, [r3, #9]
 8005d38:	757b      	strb	r3, [r7, #21]
            uint8_t temp_get = RxData_modbus_01[10];
 8005d3a:	4ba5      	ldr	r3, [pc, #660]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d3c:	7a9b      	ldrb	r3, [r3, #10]
 8005d3e:	753b      	strb	r3, [r7, #20]
            uint8_t iso_spi_reading_cell = RxData_modbus_01[11];
 8005d40:	4ba3      	ldr	r3, [pc, #652]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d42:	7adb      	ldrb	r3, [r3, #11]
 8005d44:	74fb      	strb	r3, [r7, #19]

            // Declare variables at function scope to avoid scope issues
            uint8_t id = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	74bb      	strb	r3, [r7, #18]
            float volt = 0.0;  // Changed to float to handle decimal values
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uint8_t tempCardId = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	747b      	strb	r3, [r7, #17]
            uint8_t res = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	743b      	strb	r3, [r7, #16]

            switch (RxData_modbus_01[2])  // Function code from table
 8005d58:	4b9d      	ldr	r3, [pc, #628]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d5a:	789b      	ldrb	r3, [r3, #2]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	2b07      	cmp	r3, #7
 8005d60:	f200 82c6 	bhi.w	80062f0 <tester_setup+0x600>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <tester_setup+0x7c>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005e1b 	.word	0x08005e1b
 8005d74:	08005e59 	.word	0x08005e59
 8005d78:	08005e91 	.word	0x08005e91
 8005d7c:	08005ec9 	.word	0x08005ec9
 8005d80:	08005ee7 	.word	0x08005ee7
 8005d84:	08005f07 	.word	0x08005f07
 8005d88:	08005f21 	.word	0x08005f21
            {
                case 0x01:  // Voltage function (Range: 1-23, Value: 1-8)
                    id = RxData_modbus_01[3];  // Cell ID (1-23)
 8005d8c:	4b90      	ldr	r3, [pc, #576]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d8e:	78db      	ldrb	r3, [r3, #3]
 8005d90:	74bb      	strb	r3, [r7, #18]
                    uint8_t volt_code = RxData_modbus_01[4];  // Voltage code (1-8)
 8005d92:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd0 <tester_setup+0x2e0>)
 8005d94:	791b      	ldrb	r3, [r3, #4]
 8005d96:	71bb      	strb	r3, [r7, #6]

                    // Validate range (1-23 for cell ID)
                    if (id >= 0 && id <= 23)
 8005d98:	7cbb      	ldrb	r3, [r7, #18]
 8005d9a:	2b17      	cmp	r3, #23
 8005d9c:	f200 82aa 	bhi.w	80062f4 <tester_setup+0x604>
                    {
                        switch (volt_code)
 8005da0:	79bb      	ldrb	r3, [r7, #6]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2b07      	cmp	r3, #7
 8005da6:	d82d      	bhi.n	8005e04 <tester_setup+0x114>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <tester_setup+0xc0>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dd1 	.word	0x08005dd1
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005ddf 	.word	0x08005ddf
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005deb 	.word	0x08005deb
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005dff 	.word	0x08005dff
                        {
                            case 0x01:
                                volt = 2.0;
 8005dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005dd6:	e019      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x02:
                                volt = 2.5;
 8005dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8005fd8 <tester_setup+0x2e8>)
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005ddc:	e016      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x03:
                                volt = 2.8;
 8005dde:	4b7f      	ldr	r3, [pc, #508]	@ (8005fdc <tester_setup+0x2ec>)
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005de2:	e013      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x04:
                                volt = 3.3;
 8005de4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe0 <tester_setup+0x2f0>)
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005de8:	e010      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x05:
                                volt = 3.4;
 8005dea:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe4 <tester_setup+0x2f4>)
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005dee:	e00d      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x06:
                                volt = 3.6;
 8005df0:	4b7d      	ldr	r3, [pc, #500]	@ (8005fe8 <tester_setup+0x2f8>)
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005df4:	e00a      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x07:
                                volt = 4.0;
 8005df6:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005dfc:	e006      	b.n	8005e0c <tester_setup+0x11c>
                            case 0x08:
                                volt = 4.2;
 8005dfe:	4b7b      	ldr	r3, [pc, #492]	@ (8005fec <tester_setup+0x2fc>)
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e02:	e003      	b.n	8005e0c <tester_setup+0x11c>
                            default:
                                volt = 0.0;
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e0a:	bf00      	nop
                        }
                        Set_Output_Voltage(id, volt);
 8005e0c:	7cbb      	ldrb	r3, [r7, #18]
 8005e0e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe f968 	bl	80040e8 <Set_Output_Voltage>
                    }
                    break;
 8005e18:	e26c      	b.n	80062f4 <tester_setup+0x604>

                case 0x02:  // Temperature function (Range: 1-6, Value: 0-256)
                    tempCardId = RxData_modbus_01[3];  // Temp card ID (1-6)
 8005e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e1c:	78db      	ldrb	r3, [r3, #3]
 8005e1e:	747b      	strb	r3, [r7, #17]
                    res = RxData_modbus_01[4];  // Resistance value (0-256)
 8005e20:	4b6b      	ldr	r3, [pc, #428]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e22:	791b      	ldrb	r3, [r3, #4]
 8005e24:	743b      	strb	r3, [r7, #16]

                    // Validate range (1-6 for temp card ID)
                    if (tempCardId >= 1 && tempCardId <= 6)
 8005e26:	7c7b      	ldrb	r3, [r7, #17]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8265 	beq.w	80062f8 <tester_setup+0x608>
 8005e2e:	7c7b      	ldrb	r3, [r7, #17]
 8005e30:	2b06      	cmp	r3, #6
 8005e32:	f200 8261 	bhi.w	80062f8 <tester_setup+0x608>
                    {
                        Set_Resistance(tempCardId, res);
 8005e36:	7c3a      	ldrb	r2, [r7, #16]
 8005e38:	7c7b      	ldrb	r3, [r7, #17]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fb fe61 	bl	8001b04 <Set_Resistance>
                        Set_LED_status(id_LED, LED_State);
 8005e42:	7dfa      	ldrb	r2, [r7, #23]
 8005e44:	7e3b      	ldrb	r3, [r7, #24]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe f9bb 	bl	80041c4 <Set_LED_status>
                        HAL_Delay(1000);
 8005e4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e52:	f002 f98b 	bl	800816c <HAL_Delay>
                    }
                    break;
 8005e56:	e24f      	b.n	80062f8 <tester_setup+0x608>

                case 0x03:  // Balance function (Range: 1-23, Value: 1/0)
                    id = RxData_modbus_01[3];  // Cell ID (1-23)
 8005e58:	4b5d      	ldr	r3, [pc, #372]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e5a:	78db      	ldrb	r3, [r3, #3]
 8005e5c:	74bb      	strb	r3, [r7, #18]
                    uint8_t balance_state = RxData_modbus_01[4];  // 1 = on, 0 = off
 8005e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	71fb      	strb	r3, [r7, #7]

                    // Validate range and value
                    if (id >= 1 && id <= 23 && (balance_state == 0 || balance_state == 1))
 8005e64:	7cbb      	ldrb	r3, [r7, #18]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8248 	beq.w	80062fc <tester_setup+0x60c>
 8005e6c:	7cbb      	ldrb	r3, [r7, #18]
 8005e6e:	2b17      	cmp	r3, #23
 8005e70:	f200 8244 	bhi.w	80062fc <tester_setup+0x60c>
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <tester_setup+0x192>
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	f040 823d 	bne.w	80062fc <tester_setup+0x60c>
                    {
                        Set_Balance_State(id, balance_state);
 8005e82:	79fa      	ldrb	r2, [r7, #7]
 8005e84:	7cbb      	ldrb	r3, [r7, #18]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fcd3 	bl	8006834 <Set_Balance_State>
                    }
                    break;
 8005e8e:	e235      	b.n	80062fc <tester_setup+0x60c>

                case 0x04:  // Open wire test (Range: 1-24, Value: 1/0)
                    id = RxData_modbus_01[3];  // Wire ID (1-24)
 8005e90:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	74bb      	strb	r3, [r7, #18]
                    uint8_t test_enable = RxData_modbus_01[4];  // 1 = enable, 0 = disable
 8005e96:	4b4e      	ldr	r3, [pc, #312]	@ (8005fd0 <tester_setup+0x2e0>)
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	723b      	strb	r3, [r7, #8]

                    // Validate range and value
                    if (id >= 1 && id <= 24 && (test_enable == 0 || test_enable == 1))
 8005e9c:	7cbb      	ldrb	r3, [r7, #18]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8234 	beq.w	800630c <tester_setup+0x61c>
 8005ea4:	7cbb      	ldrb	r3, [r7, #18]
 8005ea6:	2b18      	cmp	r3, #24
 8005ea8:	f200 8230 	bhi.w	800630c <tester_setup+0x61c>
 8005eac:	7a3b      	ldrb	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <tester_setup+0x1ca>
 8005eb2:	7a3b      	ldrb	r3, [r7, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	f040 8229 	bne.w	800630c <tester_setup+0x61c>
                    {
                        Open_Wire_Test(id, test_enable);
 8005eba:	7a3a      	ldrb	r2, [r7, #8]
 8005ebc:	7cbb      	ldrb	r3, [r7, #18]
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fcc5 	bl	8006850 <Open_Wire_Test>
                    }
                    break;
 8005ec6:	e221      	b.n	800630c <tester_setup+0x61c>

                case 0x05:  // Daisy chain function (Range: 1, Value: 1/0)
                    uint8_t chain_state = RxData_modbus_01[4];  // 1 = enable, 0 = disable
 8005ec8:	4b41      	ldr	r3, [pc, #260]	@ (8005fd0 <tester_setup+0x2e0>)
 8005eca:	791b      	ldrb	r3, [r3, #4]
 8005ecc:	727b      	strb	r3, [r7, #9]

                    if (chain_state == 0 || chain_state == 1)
 8005ece:	7a7b      	ldrb	r3, [r7, #9]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <tester_setup+0x1ec>
 8005ed4:	7a7b      	ldrb	r3, [r7, #9]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	f040 821a 	bne.w	8006310 <tester_setup+0x620>
                    {
                        Set_Daisy_Chain(chain_state);
 8005edc:	7a7b      	ldrb	r3, [r7, #9]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fcc4 	bl	800686c <Set_Daisy_Chain>
                    }
                    break;
 8005ee4:	e214      	b.n	8006310 <tester_setup+0x620>

                case 0x06:  // Delay function
                    uint16_t delay_time = (RxData_modbus_01[3] << 8) | RxData_modbus_01[4];  // Combine bytes for delay time
 8005ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd0 <tester_setup+0x2e0>)
 8005ee8:	78db      	ldrb	r3, [r3, #3]
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	b21a      	sxth	r2, r3
 8005ef0:	4b37      	ldr	r3, [pc, #220]	@ (8005fd0 <tester_setup+0x2e0>)
 8005ef2:	791b      	ldrb	r3, [r3, #4]
 8005ef4:	b21b      	sxth	r3, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b21b      	sxth	r3, r3
 8005efa:	817b      	strh	r3, [r7, #10]
                    HAL_Delay(delay_time);
 8005efc:	897b      	ldrh	r3, [r7, #10]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f002 f934 	bl	800816c <HAL_Delay>
                    break;
 8005f04:	e223      	b.n	800634e <tester_setup+0x65e>

                case 0x07:  // Cell LED function
                    id = RxData_modbus_01[3];  // LED ID
 8005f06:	4b32      	ldr	r3, [pc, #200]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f08:	78db      	ldrb	r3, [r3, #3]
 8005f0a:	74bb      	strb	r3, [r7, #18]
                    uint8_t led_state = RxData_modbus_01[4];  // LED state
 8005f0c:	4b30      	ldr	r3, [pc, #192]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f0e:	791b      	ldrb	r3, [r3, #4]
 8005f10:	737b      	strb	r3, [r7, #13]

                    Set_LED_status(id, led_state);
 8005f12:	7b7a      	ldrb	r2, [r7, #13]
 8005f14:	7cbb      	ldrb	r3, [r7, #18]
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f953 	bl	80041c4 <Set_LED_status>
                    break;
 8005f1e:	e216      	b.n	800634e <tester_setup+0x65e>

                case 0x08:  // Automatic sequence function
                    uint8_t sequence_id = RxData_modbus_01[3];  // Sequence ID
 8005f20:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f22:	78db      	ldrb	r3, [r3, #3]
 8005f24:	73fb      	strb	r3, [r7, #15]
                    uint8_t sequence_state = RxData_modbus_01[4];  // Sequence state
 8005f26:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f28:	791b      	ldrb	r3, [r3, #4]
 8005f2a:	73bb      	strb	r3, [r7, #14]

                    Run_Automatic_Sequence(sequence_id, sequence_state);
 8005f2c:	7bba      	ldrb	r2, [r7, #14]
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fca5 	bl	8006882 <Run_Automatic_Sequence>
                    Voltage_Sequence_Automatic();
 8005f38:	f000 fad4 	bl	80064e4 <Voltage_Sequence_Automatic>
                    break;
 8005f3c:	e207      	b.n	800634e <tester_setup+0x65e>
            // setting_test_arrangement[]={};  // Fixed typo in comment
        }



        else if(RxData_modbus_01[1] == 0x4)  // GET function (0x4)
 8005f3e:	4b24      	ldr	r3, [pc, #144]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	f040 8203 	bne.w	800634e <tester_setup+0x65e>
        {
        	flag_1 = 2 ;
 8005f48:	4b22      	ldr	r3, [pc, #136]	@ (8005fd4 <tester_setup+0x2e4>)
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	601a      	str	r2, [r3, #0]
            uint8_t function_code = RxData_modbus_01[2];
 8005f4e:	4b20      	ldr	r3, [pc, #128]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f50:	789b      	ldrb	r3, [r3, #2]
 8005f52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            uint8_t id = RxData_modbus_01[3];
 8005f56:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <tester_setup+0x2e0>)
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            //SET Voltage Card LEDs on for the SPI bus Data Request

	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f62:	e008      	b.n	8005f76 <tester_setup+0x286>
	        	Set_LED_status(cell, ON);
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f92a 	bl	80041c4 <Set_LED_status>
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	3301      	adds	r3, #1
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	2b17      	cmp	r3, #23
 8005f7a:	ddf3      	ble.n	8005f64 <tester_setup+0x274>

	        //	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
	        //	        	Set_LED_status(cell, OFF);
	        //	        }

            switch (function_code)
 8005f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f80:	3b01      	subs	r3, #1
 8005f82:	2b0f      	cmp	r3, #15
 8005f84:	f200 81c6 	bhi.w	8006314 <tester_setup+0x624>
 8005f88:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <tester_setup+0x2a0>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005ff1 	.word	0x08005ff1
 8005f94:	08006081 	.word	0x08006081
 8005f98:	08006111 	.word	0x08006111
 8005f9c:	08006315 	.word	0x08006315
 8005fa0:	08006315 	.word	0x08006315
 8005fa4:	080061ab 	.word	0x080061ab
 8005fa8:	080061cb 	.word	0x080061cb
 8005fac:	080061eb 	.word	0x080061eb
 8005fb0:	0800620b 	.word	0x0800620b
 8005fb4:	0800622b 	.word	0x0800622b
 8005fb8:	08006249 	.word	0x08006249
 8005fbc:	08006265 	.word	0x08006265
 8005fc0:	08006281 	.word	0x08006281
 8005fc4:	0800629d 	.word	0x0800629d
 8005fc8:	080062b9 	.word	0x080062b9
 8005fcc:	080062d5 	.word	0x080062d5
 8005fd0:	2000121c 	.word	0x2000121c
 8005fd4:	20001218 	.word	0x20001218
 8005fd8:	40200000 	.word	0x40200000
 8005fdc:	40333333 	.word	0x40333333
 8005fe0:	40533333 	.word	0x40533333
 8005fe4:	4059999a 	.word	0x4059999a
 8005fe8:	40666666 	.word	0x40666666
 8005fec:	40866666 	.word	0x40866666
            {
                case 0x01:  // Cell-voltage (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 0 && id <= 23)
 8005ff0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005ff4:	2b17      	cmp	r3, #23
 8005ff6:	f200 818f 	bhi.w	8006318 <tester_setup+0x628>
                    {
//                    	Voltage_Sequence_Automatic();
                    	float get_voltage = Get_INA_Voltage(&cell_configs[id]);
 8005ffa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4abe      	ldr	r2, [pc, #760]	@ (8006300 <tester_setup+0x610>)
 8006008:	4413      	add	r3, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fb38 	bl	8006680 <Get_INA_Voltage>
 8006010:	ed87 0a08 	vstr	s0, [r7, #32]
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8006014:	edd7 7a08 	vldr	s15, [r7, #32]
 8006018:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8006304 <tester_setup+0x614>
 800601c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006024:	ee17 3a90 	vmov	r3, s15
 8006028:	83fb      	strh	r3, [r7, #30]

                    	TxData_modbus_01[0] = 0x07;  // slave address
 800602a:	4bb7      	ldr	r3, [pc, #732]	@ (8006308 <tester_setup+0x618>)
 800602c:	2207      	movs	r2, #7
 800602e:	701a      	strb	r2, [r3, #0]
                    	TxData_modbus_01[1] = voltage_scaled >> 8;
 8006030:	8bfb      	ldrh	r3, [r7, #30]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b29b      	uxth	r3, r3
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4bb3      	ldr	r3, [pc, #716]	@ (8006308 <tester_setup+0x618>)
 800603a:	705a      	strb	r2, [r3, #1]

                    	TxData_modbus_01[2] = voltage_scaled & 0xFF;
 800603c:	8bfb      	ldrh	r3, [r7, #30]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	4bb1      	ldr	r3, [pc, #708]	@ (8006308 <tester_setup+0x618>)
 8006042:	709a      	strb	r2, [r3, #2]
                    	TxData_modbus_01[3] = 0;
 8006044:	4bb0      	ldr	r3, [pc, #704]	@ (8006308 <tester_setup+0x618>)
 8006046:	2200      	movs	r2, #0
 8006048:	70da      	strb	r2, [r3, #3]
                    	//The coil address will be 00000000 00000000 = 0 + 1 = 1

                    	TxData_modbus_01[4] = 0;  // force data high
 800604a:	4baf      	ldr	r3, [pc, #700]	@ (8006308 <tester_setup+0x618>)
 800604c:	2200      	movs	r2, #0
 800604e:	711a      	strb	r2, [r3, #4]
                    	TxData_modbus_01[5] = 0;  // force data low
 8006050:	4bad      	ldr	r3, [pc, #692]	@ (8006308 <tester_setup+0x618>)
 8006052:	2200      	movs	r2, #0
 8006054:	715a      	strb	r2, [r3, #5]

                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 8006056:	2106      	movs	r1, #6
 8006058:	48ab      	ldr	r0, [pc, #684]	@ (8006308 <tester_setup+0x618>)
 800605a:	f7ff fd71 	bl	8005b40 <crc16>
 800605e:	4603      	mov	r3, r0
 8006060:	83bb      	strh	r3, [r7, #28]
                    	TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 8006062:	8bbb      	ldrh	r3, [r7, #28]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4ba8      	ldr	r3, [pc, #672]	@ (8006308 <tester_setup+0x618>)
 8006068:	719a      	strb	r2, [r3, #6]
                    	TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 800606a:	8bbb      	ldrh	r3, [r7, #28]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	b29b      	uxth	r3, r3
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4ba5      	ldr	r3, [pc, #660]	@ (8006308 <tester_setup+0x618>)
 8006074:	71da      	strb	r2, [r3, #7]

                    	sendData(TxData_modbus_01,6);
 8006076:	2106      	movs	r1, #6
 8006078:	48a3      	ldr	r0, [pc, #652]	@ (8006308 <tester_setup+0x618>)
 800607a:	f7ff fd29 	bl	8005ad0 <sendData>



                    }
                    break;
 800607e:	e14b      	b.n	8006318 <tester_setup+0x628>

                case 0x02:  // Cell-temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 0 && id <= 23)
 8006080:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006084:	2b17      	cmp	r3, #23
 8006086:	f200 8149 	bhi.w	800631c <tester_setup+0x62c>
                    {

						float get_Temp = Get_INA_Temp(&cell_configs[id]);
 800608a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800608e:	4613      	mov	r3, r2
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a9a      	ldr	r2, [pc, #616]	@ (8006300 <tester_setup+0x610>)
 8006098:	4413      	add	r3, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fb80 	bl	80067a0 <Get_INA_Temp>
 80060a0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
						uint16_t Temp_scaled = (uint16_t)(get_Temp * 10000); // Scale as needed
 80060a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060a8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8006304 <tester_setup+0x614>
 80060ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 3a90 	vmov	r3, s15
 80060b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

						TxData_modbus_01[0] = 0x07;  // slave address
 80060ba:	4b93      	ldr	r3, [pc, #588]	@ (8006308 <tester_setup+0x618>)
 80060bc:	2207      	movs	r2, #7
 80060be:	701a      	strb	r2, [r3, #0]
						TxData_modbus_01[1] = Temp_scaled >> 8;
 80060c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006308 <tester_setup+0x618>)
 80060ca:	705a      	strb	r2, [r3, #1]

						TxData_modbus_01[2] = Temp_scaled & 0xFF;
 80060cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006308 <tester_setup+0x618>)
 80060d2:	709a      	strb	r2, [r3, #2]
						TxData_modbus_01[3] = 0;
 80060d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006308 <tester_setup+0x618>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	70da      	strb	r2, [r3, #3]
													//The coil address will be 00000000 00000000 = 0 + 1 = 1

						TxData_modbus_01[4] = 0;  // force data high
 80060da:	4b8b      	ldr	r3, [pc, #556]	@ (8006308 <tester_setup+0x618>)
 80060dc:	2200      	movs	r2, #0
 80060de:	711a      	strb	r2, [r3, #4]
						TxData_modbus_01[5] = 0;  // force data low
 80060e0:	4b89      	ldr	r3, [pc, #548]	@ (8006308 <tester_setup+0x618>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	715a      	strb	r2, [r3, #5]

						uint16_t crc = crc16(TxData_modbus_01, 6);
 80060e6:	2106      	movs	r1, #6
 80060e8:	4887      	ldr	r0, [pc, #540]	@ (8006308 <tester_setup+0x618>)
 80060ea:	f7ff fd29 	bl	8005b40 <crc16>
 80060ee:	4603      	mov	r3, r0
 80060f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
						TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 80060f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4b84      	ldr	r3, [pc, #528]	@ (8006308 <tester_setup+0x618>)
 80060f8:	719a      	strb	r2, [r3, #6]
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 80060fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b2da      	uxtb	r2, r3
 8006102:	4b81      	ldr	r3, [pc, #516]	@ (8006308 <tester_setup+0x618>)
 8006104:	71da      	strb	r2, [r3, #7]

						sendData(TxData_modbus_01,6);
 8006106:	2106      	movs	r1, #6
 8006108:	487f      	ldr	r0, [pc, #508]	@ (8006308 <tester_setup+0x618>)
 800610a:	f7ff fce1 	bl	8005ad0 <sendData>
                    }
                    break;
 800610e:	e105      	b.n	800631c <tester_setup+0x62c>

                case 0x03:  // Cell-current (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 8006110:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8103 	beq.w	8006320 <tester_setup+0x630>
 800611a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800611e:	2b17      	cmp	r3, #23
 8006120:	f200 80fe 	bhi.w	8006320 <tester_setup+0x630>
                    {


						float get_current = Get_INA_Current(&cell_configs[id]);
 8006124:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8006128:	4613      	mov	r3, r2
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4a73      	ldr	r2, [pc, #460]	@ (8006300 <tester_setup+0x610>)
 8006132:	4413      	add	r3, r2
 8006134:	4618      	mov	r0, r3
 8006136:	f000 faeb 	bl	8006710 <Get_INA_Current>
 800613a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
						uint16_t Current_scaled = (uint16_t)(get_current * 10000); // Scale as needed
 800613e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006142:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8006304 <tester_setup+0x614>
 8006146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614e:	ee17 3a90 	vmov	r3, s15
 8006152:	85fb      	strh	r3, [r7, #46]	@ 0x2e

						TxData_modbus_01[0] = 0x07;  // slave address
 8006154:	4b6c      	ldr	r3, [pc, #432]	@ (8006308 <tester_setup+0x618>)
 8006156:	2207      	movs	r2, #7
 8006158:	701a      	strb	r2, [r3, #0]
						TxData_modbus_01[1] = Current_scaled >> 8;
 800615a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	b29b      	uxth	r3, r3
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b69      	ldr	r3, [pc, #420]	@ (8006308 <tester_setup+0x618>)
 8006164:	705a      	strb	r2, [r3, #1]

						TxData_modbus_01[2] = Current_scaled & 0xFF;
 8006166:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006168:	b2da      	uxtb	r2, r3
 800616a:	4b67      	ldr	r3, [pc, #412]	@ (8006308 <tester_setup+0x618>)
 800616c:	709a      	strb	r2, [r3, #2]
						TxData_modbus_01[3] = 0;
 800616e:	4b66      	ldr	r3, [pc, #408]	@ (8006308 <tester_setup+0x618>)
 8006170:	2200      	movs	r2, #0
 8006172:	70da      	strb	r2, [r3, #3]
													//The coil address will be 00000000 00000000 = 0 + 1 = 1

						TxData_modbus_01[4] = 0;  // force data high
 8006174:	4b64      	ldr	r3, [pc, #400]	@ (8006308 <tester_setup+0x618>)
 8006176:	2200      	movs	r2, #0
 8006178:	711a      	strb	r2, [r3, #4]
						TxData_modbus_01[5] = 0;  // force data low
 800617a:	4b63      	ldr	r3, [pc, #396]	@ (8006308 <tester_setup+0x618>)
 800617c:	2200      	movs	r2, #0
 800617e:	715a      	strb	r2, [r3, #5]

						uint16_t crc = crc16(TxData_modbus_01, 6);
 8006180:	2106      	movs	r1, #6
 8006182:	4861      	ldr	r0, [pc, #388]	@ (8006308 <tester_setup+0x618>)
 8006184:	f7ff fcdc 	bl	8005b40 <crc16>
 8006188:	4603      	mov	r3, r0
 800618a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
						TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 800618c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800618e:	b2da      	uxtb	r2, r3
 8006190:	4b5d      	ldr	r3, [pc, #372]	@ (8006308 <tester_setup+0x618>)
 8006192:	719a      	strb	r2, [r3, #6]
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 8006194:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b5a      	ldr	r3, [pc, #360]	@ (8006308 <tester_setup+0x618>)
 800619e:	71da      	strb	r2, [r3, #7]

						sendData(TxData_modbus_01,6);
 80061a0:	2106      	movs	r1, #6
 80061a2:	4859      	ldr	r0, [pc, #356]	@ (8006308 <tester_setup+0x618>)
 80061a4:	f7ff fc94 	bl	8005ad0 <sendData>
                    }
                    break;
 80061a8:	e0ba      	b.n	8006320 <tester_setup+0x630>

                    }
                    break;

                case 0x06:  // DC-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 80061aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80b8 	beq.w	8006324 <tester_setup+0x634>
 80061b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	f200 80b3 	bhi.w	8006324 <tester_setup+0x634>
                    {
                        Get_DC_CSU_Temperature(id);
 80061be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb6b 	bl	800689e <Get_DC_CSU_Temperature>
                    }
                    break;
 80061c8:	e0ac      	b.n	8006324 <tester_setup+0x634>

                case 0x07:  // DC-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 80061ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80aa 	beq.w	8006328 <tester_setup+0x638>
 80061d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061d8:	2b17      	cmp	r3, #23
 80061da:	f200 80a5 	bhi.w	8006328 <tester_setup+0x638>
                    {
                        Get_DC_CSU_Balance_Register(id);
 80061de:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fb68 	bl	80068b8 <Get_DC_CSU_Balance_Register>
                    }
                    break;
 80061e8:	e09e      	b.n	8006328 <tester_setup+0x638>

                case 0x08:  // DC-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 80061ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 809c 	beq.w	800632c <tester_setup+0x63c>
 80061f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061f8:	2b18      	cmp	r3, #24
 80061fa:	f200 8097 	bhi.w	800632c <tester_setup+0x63c>
                    {
                        Get_DC_CSU_Open_Wire(id);
 80061fe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fb64 	bl	80068d0 <Get_DC_CSU_Open_Wire>
                    }
                    break;
 8006208:	e090      	b.n	800632c <tester_setup+0x63c>

                case 0x09:  // 11-CSU-Volt (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 1 && id <= 23)
 800620a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 808e 	beq.w	8006330 <tester_setup+0x640>
 8006214:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006218:	2b17      	cmp	r3, #23
 800621a:	f200 8089 	bhi.w	8006330 <tester_setup+0x640>
                    {
                        Get_11_CSU_Voltage(id);
 800621e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fb60 	bl	80068e8 <Get_11_CSU_Voltage>
                    }
                    break;
 8006228:	e082      	b.n	8006330 <tester_setup+0x640>

                case 0x0A:  // 11-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 800622a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8080 	beq.w	8006334 <tester_setup+0x644>
 8006234:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006238:	2b06      	cmp	r3, #6
 800623a:	d87b      	bhi.n	8006334 <tester_setup+0x644>
                    {
                        Get_11_CSU_Temperature(id);
 800623c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fb5e 	bl	8006902 <Get_11_CSU_Temperature>
                    }
                    break;
 8006246:	e075      	b.n	8006334 <tester_setup+0x644>

                case 0x0B:  // 11-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 8006248:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800624c:	2b00      	cmp	r3, #0
 800624e:	d073      	beq.n	8006338 <tester_setup+0x648>
 8006250:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006254:	2b17      	cmp	r3, #23
 8006256:	d86f      	bhi.n	8006338 <tester_setup+0x648>
                    {
                        Get_11_CSU_Balance_Register(id);
 8006258:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fb5d 	bl	800691c <Get_11_CSU_Balance_Register>
                    }
                    break;
 8006262:	e069      	b.n	8006338 <tester_setup+0x648>

                case 0x0C:  // 11-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 8006264:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006268:	2b00      	cmp	r3, #0
 800626a:	d067      	beq.n	800633c <tester_setup+0x64c>
 800626c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006270:	2b18      	cmp	r3, #24
 8006272:	d863      	bhi.n	800633c <tester_setup+0x64c>
                    {
                        Get_11_CSU_Open_Wire(id);
 8006274:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fb5b 	bl	8006934 <Get_11_CSU_Open_Wire>
                    }
                    break;
 800627e:	e05d      	b.n	800633c <tester_setup+0x64c>

                case 0x0D:  // 12-CSU-Volt (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 1 && id <= 23)
 8006280:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006284:	2b00      	cmp	r3, #0
 8006286:	d05b      	beq.n	8006340 <tester_setup+0x650>
 8006288:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800628c:	2b17      	cmp	r3, #23
 800628e:	d857      	bhi.n	8006340 <tester_setup+0x650>
                    {
                        Get_12_CSU_Voltage(id);
 8006290:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fb59 	bl	800694c <Get_12_CSU_Voltage>
                    }
                    break;
 800629a:	e051      	b.n	8006340 <tester_setup+0x650>

                case 0x0E:  // 12-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 800629c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d04f      	beq.n	8006344 <tester_setup+0x654>
 80062a4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	d84b      	bhi.n	8006344 <tester_setup+0x654>
                    {
                        Get_12_CSU_Temperature(id);
 80062ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fb58 	bl	8006966 <Get_12_CSU_Temperature>
                    }
                    break;
 80062b6:	e045      	b.n	8006344 <tester_setup+0x654>

                case 0x0F:  // 12-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 80062b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d043      	beq.n	8006348 <tester_setup+0x658>
 80062c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062c4:	2b17      	cmp	r3, #23
 80062c6:	d83f      	bhi.n	8006348 <tester_setup+0x658>
                    {
                        Get_12_CSU_Balance_Register(id);
 80062c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fb57 	bl	8006980 <Get_12_CSU_Balance_Register>
                    }
                    break;
 80062d2:	e039      	b.n	8006348 <tester_setup+0x658>

                case 0x10:  // 12-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 80062d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d037      	beq.n	800634c <tester_setup+0x65c>
 80062dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062e0:	2b18      	cmp	r3, #24
 80062e2:	d833      	bhi.n	800634c <tester_setup+0x65c>
                    {
                        Get_12_CSU_Open_Wire(id);
 80062e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fb55 	bl	8006998 <Get_12_CSU_Open_Wire>
                    }
                    break;
 80062ee:	e02d      	b.n	800634c <tester_setup+0x65c>
                    break;
 80062f0:	bf00      	nop
 80062f2:	e02c      	b.n	800634e <tester_setup+0x65e>
                    break;
 80062f4:	bf00      	nop
 80062f6:	e02a      	b.n	800634e <tester_setup+0x65e>
                    break;
 80062f8:	bf00      	nop
 80062fa:	e028      	b.n	800634e <tester_setup+0x65e>
                    break;
 80062fc:	bf00      	nop
 80062fe:	e026      	b.n	800634e <tester_setup+0x65e>
 8006300:	0800de4c 	.word	0x0800de4c
 8006304:	461c4000 	.word	0x461c4000
 8006308:	2000131c 	.word	0x2000131c
                    break;
 800630c:	bf00      	nop
 800630e:	e01e      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006310:	bf00      	nop
 8006312:	e01c      	b.n	800634e <tester_setup+0x65e>

                default:
                    // Handle unknown GET function code
                    break;
 8006314:	bf00      	nop
 8006316:	e01a      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006318:	bf00      	nop
 800631a:	e018      	b.n	800634e <tester_setup+0x65e>
                    break;
 800631c:	bf00      	nop
 800631e:	e016      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006320:	bf00      	nop
 8006322:	e014      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006324:	bf00      	nop
 8006326:	e012      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006328:	bf00      	nop
 800632a:	e010      	b.n	800634e <tester_setup+0x65e>
                    break;
 800632c:	bf00      	nop
 800632e:	e00e      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006330:	bf00      	nop
 8006332:	e00c      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006334:	bf00      	nop
 8006336:	e00a      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006338:	bf00      	nop
 800633a:	e008      	b.n	800634e <tester_setup+0x65e>
                    break;
 800633c:	bf00      	nop
 800633e:	e006      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006340:	bf00      	nop
 8006342:	e004      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006344:	bf00      	nop
 8006346:	e002      	b.n	800634e <tester_setup+0x65e>
                    break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <tester_setup+0x65e>
                    break;
 800634c:	bf00      	nop
    else
    {

    }

	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 800634e:	2280      	movs	r2, #128	@ 0x80
 8006350:	2100      	movs	r1, #0
 8006352:	4806      	ldr	r0, [pc, #24]	@ (800636c <tester_setup+0x67c>)
 8006354:	f006 faee 	bl	800c934 <memset>
	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8006358:	2280      	movs	r2, #128	@ 0x80
 800635a:	2100      	movs	r1, #0
 800635c:	4804      	ldr	r0, [pc, #16]	@ (8006370 <tester_setup+0x680>)
 800635e:	f006 fae9 	bl	800c934 <memset>
}
 8006362:	bf00      	nop
 8006364:	3740      	adds	r7, #64	@ 0x40
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	2000121c 	.word	0x2000121c
 8006370:	2000131c 	.word	0x2000131c

08006374 <init_ina229_devices>:


void init_ina229_devices(void) {
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
    ina229_devices[0] = INA229_0;
 8006378:	4b36      	ldr	r3, [pc, #216]	@ (8006454 <init_ina229_devices+0xe0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a36      	ldr	r2, [pc, #216]	@ (8006458 <init_ina229_devices+0xe4>)
 800637e:	6013      	str	r3, [r2, #0]
    ina229_devices[1] = INA229_1;
 8006380:	4b36      	ldr	r3, [pc, #216]	@ (800645c <init_ina229_devices+0xe8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a34      	ldr	r2, [pc, #208]	@ (8006458 <init_ina229_devices+0xe4>)
 8006386:	6053      	str	r3, [r2, #4]
    ina229_devices[2] = INA229_2;
 8006388:	4b35      	ldr	r3, [pc, #212]	@ (8006460 <init_ina229_devices+0xec>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a32      	ldr	r2, [pc, #200]	@ (8006458 <init_ina229_devices+0xe4>)
 800638e:	6093      	str	r3, [r2, #8]
    ina229_devices[3] = INA229_3;
 8006390:	4b34      	ldr	r3, [pc, #208]	@ (8006464 <init_ina229_devices+0xf0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a30      	ldr	r2, [pc, #192]	@ (8006458 <init_ina229_devices+0xe4>)
 8006396:	60d3      	str	r3, [r2, #12]
    ina229_devices[4] = INA229_4;
 8006398:	4b33      	ldr	r3, [pc, #204]	@ (8006468 <init_ina229_devices+0xf4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2e      	ldr	r2, [pc, #184]	@ (8006458 <init_ina229_devices+0xe4>)
 800639e:	6113      	str	r3, [r2, #16]
    ina229_devices[5] = INA229_5;
 80063a0:	4b32      	ldr	r3, [pc, #200]	@ (800646c <init_ina229_devices+0xf8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006458 <init_ina229_devices+0xe4>)
 80063a6:	6153      	str	r3, [r2, #20]
    ina229_devices[6] = INA229_6;
 80063a8:	4b31      	ldr	r3, [pc, #196]	@ (8006470 <init_ina229_devices+0xfc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006458 <init_ina229_devices+0xe4>)
 80063ae:	6193      	str	r3, [r2, #24]
    ina229_devices[7] = INA229_7;
 80063b0:	4b30      	ldr	r3, [pc, #192]	@ (8006474 <init_ina229_devices+0x100>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a28      	ldr	r2, [pc, #160]	@ (8006458 <init_ina229_devices+0xe4>)
 80063b6:	61d3      	str	r3, [r2, #28]
    ina229_devices[8] = INA229_8;
 80063b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006478 <init_ina229_devices+0x104>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <init_ina229_devices+0xe4>)
 80063be:	6213      	str	r3, [r2, #32]
    ina229_devices[9] = INA229_9;
 80063c0:	4b2e      	ldr	r3, [pc, #184]	@ (800647c <init_ina229_devices+0x108>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <init_ina229_devices+0xe4>)
 80063c6:	6253      	str	r3, [r2, #36]	@ 0x24
    ina229_devices[10] = INA229_10;
 80063c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006480 <init_ina229_devices+0x10c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a22      	ldr	r2, [pc, #136]	@ (8006458 <init_ina229_devices+0xe4>)
 80063ce:	6293      	str	r3, [r2, #40]	@ 0x28
    ina229_devices[11] = INA229_11;
 80063d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006484 <init_ina229_devices+0x110>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a20      	ldr	r2, [pc, #128]	@ (8006458 <init_ina229_devices+0xe4>)
 80063d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ina229_devices[12] = INA229_12;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006488 <init_ina229_devices+0x114>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <init_ina229_devices+0xe4>)
 80063de:	6313      	str	r3, [r2, #48]	@ 0x30
    ina229_devices[13] = INA229_13;
 80063e0:	4b2a      	ldr	r3, [pc, #168]	@ (800648c <init_ina229_devices+0x118>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <init_ina229_devices+0xe4>)
 80063e6:	6353      	str	r3, [r2, #52]	@ 0x34
    ina229_devices[14] = INA229_14;
 80063e8:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <init_ina229_devices+0x11c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006458 <init_ina229_devices+0xe4>)
 80063ee:	6393      	str	r3, [r2, #56]	@ 0x38
    ina229_devices[15] = INA229_15;
 80063f0:	4b28      	ldr	r3, [pc, #160]	@ (8006494 <init_ina229_devices+0x120>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <init_ina229_devices+0xe4>)
 80063f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ina229_devices[16] = INA229_16;
 80063f8:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <init_ina229_devices+0x124>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <init_ina229_devices+0xe4>)
 80063fe:	6413      	str	r3, [r2, #64]	@ 0x40
    ina229_devices[17] = INA229_17;
 8006400:	4b26      	ldr	r3, [pc, #152]	@ (800649c <init_ina229_devices+0x128>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <init_ina229_devices+0xe4>)
 8006406:	6453      	str	r3, [r2, #68]	@ 0x44
    ina229_devices[18] = INA229_18;
 8006408:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <init_ina229_devices+0x12c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a12      	ldr	r2, [pc, #72]	@ (8006458 <init_ina229_devices+0xe4>)
 800640e:	6493      	str	r3, [r2, #72]	@ 0x48
    ina229_devices[19] = INA229_19;
 8006410:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <init_ina229_devices+0x130>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a10      	ldr	r2, [pc, #64]	@ (8006458 <init_ina229_devices+0xe4>)
 8006416:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ina229_devices[20] = INA229_20;
 8006418:	4b23      	ldr	r3, [pc, #140]	@ (80064a8 <init_ina229_devices+0x134>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a0e      	ldr	r2, [pc, #56]	@ (8006458 <init_ina229_devices+0xe4>)
 800641e:	6513      	str	r3, [r2, #80]	@ 0x50
    ina229_devices[21] = INA229_21;
 8006420:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <init_ina229_devices+0x138>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0c      	ldr	r2, [pc, #48]	@ (8006458 <init_ina229_devices+0xe4>)
 8006426:	6553      	str	r3, [r2, #84]	@ 0x54
    ina229_devices[22] = INA229_22;
 8006428:	4b21      	ldr	r3, [pc, #132]	@ (80064b0 <init_ina229_devices+0x13c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a0a      	ldr	r2, [pc, #40]	@ (8006458 <init_ina229_devices+0xe4>)
 800642e:	6593      	str	r3, [r2, #88]	@ 0x58
    ina229_devices[23] = INA229_23;
 8006430:	4b20      	ldr	r3, [pc, #128]	@ (80064b4 <init_ina229_devices+0x140>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <init_ina229_devices+0xe4>)
 8006436:	65d3      	str	r3, [r2, #92]	@ 0x5c
    ina229_devices[24] = INA229_24;
 8006438:	4b1f      	ldr	r3, [pc, #124]	@ (80064b8 <init_ina229_devices+0x144>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a06      	ldr	r2, [pc, #24]	@ (8006458 <init_ina229_devices+0xe4>)
 800643e:	6613      	str	r3, [r2, #96]	@ 0x60
    ina229_devices[25] = INA229_25;
 8006440:	4b1e      	ldr	r3, [pc, #120]	@ (80064bc <init_ina229_devices+0x148>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a04      	ldr	r2, [pc, #16]	@ (8006458 <init_ina229_devices+0xe4>)
 8006446:	6653      	str	r3, [r2, #100]	@ 0x64
}
 8006448:	bf00      	nop
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	0800d7e4 	.word	0x0800d7e4
 8006458:	2000171c 	.word	0x2000171c
 800645c:	0800d7e8 	.word	0x0800d7e8
 8006460:	0800d7ec 	.word	0x0800d7ec
 8006464:	0800d7f0 	.word	0x0800d7f0
 8006468:	0800d7f4 	.word	0x0800d7f4
 800646c:	0800d7f8 	.word	0x0800d7f8
 8006470:	0800d7fc 	.word	0x0800d7fc
 8006474:	0800d800 	.word	0x0800d800
 8006478:	0800d804 	.word	0x0800d804
 800647c:	0800d808 	.word	0x0800d808
 8006480:	0800d80c 	.word	0x0800d80c
 8006484:	0800d810 	.word	0x0800d810
 8006488:	0800d814 	.word	0x0800d814
 800648c:	0800d818 	.word	0x0800d818
 8006490:	0800d81c 	.word	0x0800d81c
 8006494:	0800d820 	.word	0x0800d820
 8006498:	0800d824 	.word	0x0800d824
 800649c:	0800d828 	.word	0x0800d828
 80064a0:	0800d82c 	.word	0x0800d82c
 80064a4:	0800d830 	.word	0x0800d830
 80064a8:	0800d834 	.word	0x0800d834
 80064ac:	0800d838 	.word	0x0800d838
 80064b0:	0800d83c 	.word	0x0800d83c
 80064b4:	0800d840 	.word	0x0800d840
 80064b8:	0800d844 	.word	0x0800d844
 80064bc:	0800d848 	.word	0x0800d848

080064c0 <get_ina_handle>:

};


// Helper function to get INA handle from index
static INA229_Handle get_ina_handle(uint8_t index) {
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	71fb      	strb	r3, [r7, #7]
    return INA229_0 + index;  // Assuming INA handles are sequential
 80064ca:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <get_ina_handle+0x20>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	015b      	lsls	r3, r3, #5
 80064d2:	4413      	add	r3, r2
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	0800d7e4 	.word	0x0800d7e4

080064e4 <Voltage_Sequence_Automatic>:

void Voltage_Sequence_Automatic(void)
{
 80064e4:	b5b0      	push	{r4, r5, r7, lr}
 80064e6:	b08c      	sub	sp, #48	@ 0x30
 80064e8:	af00      	add	r7, sp, #0

    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 80064ea:	4b20      	ldr	r3, [pc, #128]	@ (800656c <Voltage_Sequence_Automatic+0x88>)
 80064ec:	463c      	mov	r4, r7
 80064ee:	461d      	mov	r5, r3
 80064f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80064f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_voltages = sizeof(test_voltages) / sizeof(test_voltages[0]);
 80064fc:	2308      	movs	r3, #8
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
    const int num_cells = sizeof(cell_configs) / sizeof(cell_configs[0]);
 8006500:	231a      	movs	r3, #26
 8006502:	623b      	str	r3, [r7, #32]

    for(int v = 0; v < num_voltages; v++) {
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006508:	e027      	b.n	800655a <Voltage_Sequence_Automatic+0x76>
        for(int c = 0; c < num_cells; c++) {
 800650a:	2300      	movs	r3, #0
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650e:	e01a      	b.n	8006546 <Voltage_Sequence_Automatic+0x62>
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8006510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <Voltage_Sequence_Automatic+0x8c>)
 800651c:	441a      	add	r2, r3
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	3330      	adds	r3, #48	@ 0x30
 8006524:	443b      	add	r3, r7
 8006526:	3b30      	subs	r3, #48	@ 0x30
 8006528:	edd3 7a00 	vldr	s15, [r3]
 800652c:	eeb0 0a67 	vmov.f32	s0, s15
 8006530:	4610      	mov	r0, r2
 8006532:	f000 f81f 	bl	8006574 <Set_voltage_and_measure>

        	cell_voltage_read();
 8006536:	f7ff fa81 	bl	8005a3c <cell_voltage_read>

            HAL_Delay(10);  // Delay between cells
 800653a:	200a      	movs	r0, #10
 800653c:	f001 fe16 	bl	800816c <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	3301      	adds	r3, #1
 8006544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	429a      	cmp	r2, r3
 800654c:	dbe0      	blt.n	8006510 <Voltage_Sequence_Automatic+0x2c>
        }
        HAL_Delay(10);  // Delay between voltage levels
 800654e:	200a      	movs	r0, #10
 8006550:	f001 fe0c 	bl	800816c <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	3301      	adds	r3, #1
 8006558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	429a      	cmp	r2, r3
 8006560:	dbd3      	blt.n	800650a <Voltage_Sequence_Automatic+0x26>





}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	3730      	adds	r7, #48	@ 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	bdb0      	pop	{r4, r5, r7, pc}
 800656c:	0800cac0 	.word	0x0800cac0
 8006570:	0800de4c 	.word	0x0800de4c

08006574 <Set_voltage_and_measure>:

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	ed87 0a00 	vstr	s0, [r7]
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff ff9b 	bl	80064c0 <get_ina_handle>
 800658a:	60f8      	str	r0, [r7, #12]

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b18      	cmp	r3, #24
 8006592:	d010      	beq.n	80065b6 <Set_voltage_and_measure+0x42>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b19      	cmp	r3, #25
 800659a:	d00c      	beq.n	80065b6 <Set_voltage_and_measure+0x42>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	ed97 0a00 	vldr	s0, [r7]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd fd9f 	bl	80040e8 <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd fe07 	bl	80041c4 <Set_LED_status>

    }
    HAL_Delay(10);
 80065b6:	200a      	movs	r0, #10
 80065b8:	f001 fdd8 	bl	800816c <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6858      	ldr	r0, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	891b      	ldrh	r3, [r3, #8]
 80065c4:	2200      	movs	r2, #0
 80065c6:	4619      	mov	r1, r3
 80065c8:	f002 fc78 	bl	8008ebc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80065cc:	2001      	movs	r0, #1
 80065ce:	f001 fdcd 	bl	800816c <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	461c      	mov	r4, r3
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7fd ff15 	bl	8004408 <INA229_getVBUS_V>
 80065de:	eef0 7a40 	vmov.f32	s15, s0
 80065e2:	4a26      	ldr	r2, [pc, #152]	@ (800667c <Set_voltage_and_measure+0x108>)
 80065e4:	0123      	lsls	r3, r4, #4
 80065e6:	4413      	add	r3, r2
 80065e8:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80065ec:	2001      	movs	r0, #1
 80065ee:	f001 fdbd 	bl	800816c <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6858      	ldr	r0, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	891b      	ldrh	r3, [r3, #8]
 80065fa:	2201      	movs	r2, #1
 80065fc:	4619      	mov	r1, r3
 80065fe:	f002 fc5d 	bl	8008ebc <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8006602:	200a      	movs	r0, #10
 8006604:	f001 fdb2 	bl	800816c <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6858      	ldr	r0, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	891b      	ldrh	r3, [r3, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	4619      	mov	r1, r3
 8006614:	f002 fc52 	bl	8008ebc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006618:	2001      	movs	r0, #1
 800661a:	f001 fda7 	bl	800816c <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	461c      	mov	r4, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7fd ff4d 	bl	80044c4 <INA229_getDIETEMP_C>
 800662a:	eef0 7a40 	vmov.f32	s15, s0
 800662e:	4a13      	ldr	r2, [pc, #76]	@ (800667c <Set_voltage_and_measure+0x108>)
 8006630:	0123      	lsls	r3, r4, #4
 8006632:	4413      	add	r3, r2
 8006634:	3308      	adds	r3, #8
 8006636:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 800663a:	2001      	movs	r0, #1
 800663c:	f001 fd96 	bl	800816c <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6858      	ldr	r0, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	891b      	ldrh	r3, [r3, #8]
 8006648:	2201      	movs	r2, #1
 800664a:	4619      	mov	r1, r3
 800664c:	f002 fc36 	bl	8008ebc <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8006650:	200a      	movs	r0, #10
 8006652:	f001 fd8b 	bl	800816c <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b18      	cmp	r3, #24
 800665c:	d009      	beq.n	8006672 <Set_voltage_and_measure+0xfe>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b19      	cmp	r3, #25
 8006664:	d005      	beq.n	8006672 <Set_voltage_and_measure+0xfe>

    {

    Set_LED_status(cell->cell_id, ON);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f7fd fda9 	bl	80041c4 <Set_LED_status>

    }
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bd90      	pop	{r4, r7, pc}
 800667a:	bf00      	nop
 800667c:	20000e5c 	.word	0x20000e5c

08006680 <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff ff17 	bl	80064c0 <get_ina_handle>
 8006692:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f7fd fd92 	bl	80041c4 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6858      	ldr	r0, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	891b      	ldrh	r3, [r3, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	4619      	mov	r1, r3
 80066ac:	f002 fc06 	bl	8008ebc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80066b0:	2001      	movs	r0, #1
 80066b2:	f001 fd5b 	bl	800816c <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	461c      	mov	r4, r3
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7fd fea3 	bl	8004408 <INA229_getVBUS_V>
 80066c2:	eef0 7a40 	vmov.f32	s15, s0
 80066c6:	4a11      	ldr	r2, [pc, #68]	@ (800670c <Get_INA_Voltage+0x8c>)
 80066c8:	0123      	lsls	r3, r4, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80066d0:	2001      	movs	r0, #1
 80066d2:	f001 fd4b 	bl	800816c <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6858      	ldr	r0, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	891b      	ldrh	r3, [r3, #8]
 80066de:	2201      	movs	r2, #1
 80066e0:	4619      	mov	r1, r3
 80066e2:	f002 fbeb 	bl	8008ebc <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fd fd69 	bl	80041c4 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	4a05      	ldr	r2, [pc, #20]	@ (800670c <Get_INA_Voltage+0x8c>)
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	4413      	add	r3, r2
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	ee07 3a90 	vmov	s15, r3
}
 8006702:	eeb0 0a67 	vmov.f32	s0, s15
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bd90      	pop	{r4, r7, pc}
 800670c:	20000e5c 	.word	0x20000e5c

08006710 <Get_INA_Current>:


float Get_INA_Current(const Cell_Config* cell)
{
 8006710:	b590      	push	{r4, r7, lr}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fecf 	bl	80064c0 <get_ina_handle>
 8006722:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd fd4a 	bl	80041c4 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6858      	ldr	r0, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	891b      	ldrh	r3, [r3, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	4619      	mov	r1, r3
 800673c:	f002 fbbe 	bl	8008ebc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006740:	2001      	movs	r0, #1
 8006742:	f001 fd13 	bl	800816c <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	461c      	mov	r4, r3
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7fd fe5b 	bl	8004408 <INA229_getVBUS_V>
 8006752:	eef0 7a40 	vmov.f32	s15, s0
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <Get_INA_Current+0x8c>)
 8006758:	0123      	lsls	r3, r4, #4
 800675a:	4413      	add	r3, r2
 800675c:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8006760:	2001      	movs	r0, #1
 8006762:	f001 fd03 	bl	800816c <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6858      	ldr	r0, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	891b      	ldrh	r3, [r3, #8]
 800676e:	2201      	movs	r2, #1
 8006770:	4619      	mov	r1, r3
 8006772:	f002 fba3 	bl	8008ebc <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f7fd fd21 	bl	80041c4 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	4a05      	ldr	r2, [pc, #20]	@ (800679c <Get_INA_Current+0x8c>)
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	4413      	add	r3, r2
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	ee07 3a90 	vmov	s15, r3
}
 8006792:	eeb0 0a67 	vmov.f32	s0, s15
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}
 800679c:	20000e5c 	.word	0x20000e5c

080067a0 <Get_INA_Temp>:

float Get_INA_Temp(const Cell_Config* cell)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fe87 	bl	80064c0 <get_ina_handle>
 80067b2:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2101      	movs	r1, #1
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fd fd02 	bl	80041c4 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6858      	ldr	r0, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	4619      	mov	r1, r3
 80067cc:	f002 fb76 	bl	8008ebc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80067d0:	2001      	movs	r0, #1
 80067d2:	f001 fccb 	bl	800816c <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	461c      	mov	r4, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7fd fe71 	bl	80044c4 <INA229_getDIETEMP_C>
 80067e2:	eef0 7a40 	vmov.f32	s15, s0
 80067e6:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <Get_INA_Temp+0x90>)
 80067e8:	0123      	lsls	r3, r4, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	3308      	adds	r3, #8
 80067ee:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80067f2:	2001      	movs	r0, #1
 80067f4:	f001 fcba 	bl	800816c <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6858      	ldr	r0, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	891b      	ldrh	r3, [r3, #8]
 8006800:	2201      	movs	r2, #1
 8006802:	4619      	mov	r1, r3
 8006804:	f002 fb5a 	bl	8008ebc <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f7fd fcd8 	bl	80041c4 <Set_LED_status>

	return INA229_Readings[cell->ina_index].temperature_C;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <Get_INA_Temp+0x90>)
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4413      	add	r3, r2
 800681e:	3308      	adds	r3, #8
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	ee07 3a90 	vmov	s15, r3
}
 8006826:	eeb0 0a67 	vmov.f32	s0, s15
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bd90      	pop	{r4, r7, pc}
 8006830:	20000e5c 	.word	0x20000e5c

08006834 <Set_Balance_State>:
}



void Set_Balance_State(uint8_t id, uint8_t balance_state)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	460a      	mov	r2, r1
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	4613      	mov	r3, r2
 8006842:	71bb      	strb	r3, [r7, #6]

}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <Open_Wire_Test>:
void Open_Wire_Test(uint8_t id, uint8_t test_enable)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	460a      	mov	r2, r1
 800685a:	71fb      	strb	r3, [r7, #7]
 800685c:	4613      	mov	r3, r2
 800685e:	71bb      	strb	r3, [r7, #6]

}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <Set_Daisy_Chain>:
void Set_Daisy_Chain(uint8_t chain_state)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]

}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <Run_Automatic_Sequence>:
void Run_Automatic_Sequence(uint8_t sequence_id, uint8_t sequence_state)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	4603      	mov	r3, r0
 800688a:	460a      	mov	r2, r1
 800688c:	71fb      	strb	r3, [r7, #7]
 800688e:	4613      	mov	r3, r2
 8006890:	71bb      	strb	r3, [r7, #6]

}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <Get_DC_CSU_Temperature>:
float Get_DC_CSU_Voltage(uint8_t id)
{

}
float Get_DC_CSU_Temperature(uint8_t id)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	71fb      	strb	r3, [r7, #7]

}
 80068a8:	bf00      	nop
 80068aa:	eeb0 0a67 	vmov.f32	s0, s15
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <Get_DC_CSU_Balance_Register>:
uint8_t Get_DC_CSU_Balance_Register(uint8_t id)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	71fb      	strb	r3, [r7, #7]

}
 80068c2:	bf00      	nop
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <Get_DC_CSU_Open_Wire>:
uint8_t Get_DC_CSU_Open_Wire(uint8_t id)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]

}
 80068da:	bf00      	nop
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <Get_11_CSU_Voltage>:

// GET functions - 11-CSU measurements
float Get_11_CSU_Voltage(uint8_t id)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]

}
 80068f2:	bf00      	nop
 80068f4:	eeb0 0a67 	vmov.f32	s0, s15
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <Get_11_CSU_Temperature>:
float Get_11_CSU_Temperature(uint8_t id)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	4603      	mov	r3, r0
 800690a:	71fb      	strb	r3, [r7, #7]

}
 800690c:	bf00      	nop
 800690e:	eeb0 0a67 	vmov.f32	s0, s15
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <Get_11_CSU_Balance_Register>:
uint8_t Get_11_CSU_Balance_Register(uint8_t id)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	71fb      	strb	r3, [r7, #7]

}
 8006926:	bf00      	nop
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <Get_11_CSU_Open_Wire>:
uint8_t Get_11_CSU_Open_Wire(uint8_t id)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]

}
 800693e:	bf00      	nop
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <Get_12_CSU_Voltage>:

// GET functions - 12-CSU measurements
float Get_12_CSU_Voltage(uint8_t id)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]

}
 8006956:	bf00      	nop
 8006958:	eeb0 0a67 	vmov.f32	s0, s15
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <Get_12_CSU_Temperature>:
float Get_12_CSU_Temperature(uint8_t id)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]

}
 8006970:	bf00      	nop
 8006972:	eeb0 0a67 	vmov.f32	s0, s15
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <Get_12_CSU_Balance_Register>:
uint8_t Get_12_CSU_Balance_Register(uint8_t id)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]

}
 800698a:	bf00      	nop
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <Get_12_CSU_Open_Wire>:
uint8_t Get_12_CSU_Open_Wire(uint8_t id)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]

}
 80069a2:	bf00      	nop
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b089      	sub	sp, #36	@ 0x24
 80069b4:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 80069b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069ba:	2100      	movs	r1, #0
 80069bc:	4879      	ldr	r0, [pc, #484]	@ (8006ba4 <main+0x1f4>)
 80069be:	f005 ffb9 	bl	800c934 <memset>
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 80069c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069c6:	2100      	movs	r1, #0
 80069c8:	4877      	ldr	r0, [pc, #476]	@ (8006ba8 <main+0x1f8>)
 80069ca:	f005 ffb3 	bl	800c934 <memset>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069ce:	f001 fb5b 	bl	8008088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069d2:	f000 f915 	bl	8006c00 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069d6:	f000 fc29 	bl	800722c <MX_GPIO_Init>
  MX_SPI1_Init();
 80069da:	f000 faa7 	bl	8006f2c <MX_SPI1_Init>
  MX_SPI2_Init();
 80069de:	f000 fadb 	bl	8006f98 <MX_SPI2_Init>
  MX_I2C2_Init();
 80069e2:	f000 fa23 	bl	8006e2c <MX_I2C2_Init>
  MX_I2C3_Init();
 80069e6:	f000 fa61 	bl	8006eac <MX_I2C3_Init>
  MX_SPI3_Init();
 80069ea:	f000 fb0b 	bl	8007004 <MX_SPI3_Init>
  MX_SPI4_Init();
 80069ee:	f000 fb3f 	bl	8007070 <MX_SPI4_Init>
  MX_CAN1_Init();
 80069f2:	f000 f971 	bl	8006cd8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80069f6:	f000 f9a5 	bl	8006d44 <MX_CAN2_Init>
  MX_I2C1_Init();
 80069fa:	f000 f9d7 	bl	8006dac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80069fe:	f000 fb6d 	bl	80070dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006a02:	f000 fb95 	bl	8007130 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006a06:	f000 fbbd 	bl	8007184 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006a0a:	f000 fbe5 	bl	80071d8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8006a0e:	f005 fe0d 	bl	800c62c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  RTC_Init();
 8006a12:	f7ff f8cd 	bl	8005bb0 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8006a16:	f7fa fad5 	bl	8000fc4 <LED_Init>

  init_ina229_devices();
 8006a1a:	f7ff fcab 	bl	8006374 <init_ina229_devices>

  for (int i = 0; i < NUM_INA229; i++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00c      	b.n	8006a3e <main+0x8e>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8006a24:	4a61      	ldr	r2, [pc, #388]	@ (8006bac <main+0x1fc>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fd fc33 	bl	8004298 <INA229_config>
 8006a32:	200a      	movs	r0, #10
 8006a34:	f001 fb9a 	bl	800816c <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b19      	cmp	r3, #25
 8006a42:	ddef      	ble.n	8006a24 <main+0x74>



  mcu_spiInit(0);
 8006a44:	2000      	movs	r0, #0
 8006a46:	f7fd fd89 	bl	800455c <mcu_spiInit>
  HAL_Delay(10);
 8006a4a:	200a      	movs	r0, #10
 8006a4c:	f001 fb8e 	bl	800816c <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 8006a50:	4957      	ldr	r1, [pc, #348]	@ (8006bb0 <main+0x200>)
 8006a52:	2002      	movs	r0, #2
 8006a54:	f7fd fe68 	bl	8004728 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	70fb      	strb	r3, [r7, #3]
 8006a5c:	e018      	b.n	8006a90 <main+0xe0>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8006a5e:	4b55      	ldr	r3, [pc, #340]	@ (8006bb4 <main+0x204>)
 8006a60:	7819      	ldrb	r1, [r3, #0]
 8006a62:	4b55      	ldr	r3, [pc, #340]	@ (8006bb8 <main+0x208>)
 8006a64:	781c      	ldrb	r4, [r3, #0]
 8006a66:	4b55      	ldr	r3, [pc, #340]	@ (8006bbc <main+0x20c>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	4a55      	ldr	r2, [pc, #340]	@ (8006bc0 <main+0x210>)
 8006a6c:	8812      	ldrh	r2, [r2, #0]
 8006a6e:	78f8      	ldrb	r0, [r7, #3]
 8006a70:	9204      	str	r2, [sp, #16]
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	4b53      	ldr	r3, [pc, #332]	@ (8006bc4 <main+0x214>)
 8006a76:	9302      	str	r3, [sp, #8]
 8006a78:	4b53      	ldr	r3, [pc, #332]	@ (8006bc8 <main+0x218>)
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	4b53      	ldr	r3, [pc, #332]	@ (8006bcc <main+0x21c>)
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4623      	mov	r3, r4
 8006a82:	460a      	mov	r2, r1
 8006a84:	494a      	ldr	r1, [pc, #296]	@ (8006bb0 <main+0x200>)
 8006a86:	f7fd fe5e 	bl	8004746 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	70fb      	strb	r3, [r7, #3]
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d9e3      	bls.n	8006a5e <main+0xae>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8006a96:	4946      	ldr	r1, [pc, #280]	@ (8006bb0 <main+0x200>)
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f7fd fdf6 	bl	800468a <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8006a9e:	4944      	ldr	r1, [pc, #272]	@ (8006bb0 <main+0x200>)
 8006aa0:	2002      	movs	r0, #2
 8006aa2:	f7fd fe32 	bl	800470a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8006aa6:	4942      	ldr	r1, [pc, #264]	@ (8006bb0 <main+0x200>)
 8006aa8:	2002      	movs	r0, #2
 8006aaa:	f7fd fd95 	bl	80045d8 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8006aae:	f7fb f913 	bl	8001cd8 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8006ab2:	f7fb f939 	bl	8001d28 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8006ab6:	4846      	ldr	r0, [pc, #280]	@ (8006bd0 <main+0x220>)
 8006ab8:	f7fd f8ee 	bl	8003c98 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8006abc:	4845      	ldr	r0, [pc, #276]	@ (8006bd4 <main+0x224>)
 8006abe:	f7fd f8eb 	bl	8003c98 <Expander_InitAllDevices>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8006ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ac6:	4937      	ldr	r1, [pc, #220]	@ (8006ba4 <main+0x1f4>)
 8006ac8:	4843      	ldr	r0, [pc, #268]	@ (8006bd8 <main+0x228>)
 8006aca:	f004 fde8 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8006ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ad2:	4942      	ldr	r1, [pc, #264]	@ (8006bdc <main+0x22c>)
 8006ad4:	4842      	ldr	r0, [pc, #264]	@ (8006be0 <main+0x230>)
 8006ad6:	f004 fde2 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8006ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ade:	4941      	ldr	r1, [pc, #260]	@ (8006be4 <main+0x234>)
 8006ae0:	4841      	ldr	r0, [pc, #260]	@ (8006be8 <main+0x238>)
 8006ae2:	f004 fddc 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8006ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aea:	4940      	ldr	r1, [pc, #256]	@ (8006bec <main+0x23c>)
 8006aec:	4840      	ldr	r0, [pc, #256]	@ (8006bf0 <main+0x240>)
 8006aee:	f004 fdd6 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

    /* USER CODE BEGIN 3 */



	  if (modebus_rx_flag == 1 )
 8006af2:	4b40      	ldr	r3, [pc, #256]	@ (8006bf4 <main+0x244>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d116      	bne.n	8006b28 <main+0x178>
	  {
//		  memset(Rx_Data, 0, sizeof(Rx_Data));

//		  sprintf(Tx_Data, "F103 %d", indx++);
//		    send_Data (Tx_Data);
		    HAL_Delay(10);
 8006afa:	200a      	movs	r0, #10
 8006afc:	f001 fb36 	bl	800816c <HAL_Delay>
	        tester_setup();
 8006b00:	f7ff f8f6 	bl	8005cf0 <tester_setup>


	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8006b04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4826      	ldr	r0, [pc, #152]	@ (8006ba4 <main+0x1f4>)
 8006b0c:	f005 ff12 	bl	800c934 <memset>
	    	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8006b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b14:	2100      	movs	r1, #0
 8006b16:	4824      	ldr	r0, [pc, #144]	@ (8006ba8 <main+0x1f8>)
 8006b18:	f005 ff0c 	bl	800c934 <memset>
		  modebus_rx_flag = 0 ;
 8006b1c:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <main+0x244>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]

		  flag_1 = 5 ;
 8006b22:	4b35      	ldr	r3, [pc, #212]	@ (8006bf8 <main+0x248>)
 8006b24:	2205      	movs	r2, #5
 8006b26:	701a      	strb	r2, [r3, #0]

//		  HAL_TIM_Base_Stop_IT(&htim1);

	  }

		  cell12_Temp_01_Set(resistance[0]);
 8006b28:	4b34      	ldr	r3, [pc, #208]	@ (8006bfc <main+0x24c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b34:	eeb0 0a67 	vmov.f32	s0, s15
 8006b38:	f7fa fb78 	bl	800122c <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <main+0x24c>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b48:	eeb0 0a67 	vmov.f32	s0, s15
 8006b4c:	f7fa fc24 	bl	8001398 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8006b50:	4b2a      	ldr	r3, [pc, #168]	@ (8006bfc <main+0x24c>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b60:	f7fa fcda 	bl	8001518 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8006b64:	4b25      	ldr	r3, [pc, #148]	@ (8006bfc <main+0x24c>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b70:	eeb0 0a67 	vmov.f32	s0, s15
 8006b74:	f7fa fd86 	bl	8001684 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8006b78:	4b20      	ldr	r3, [pc, #128]	@ (8006bfc <main+0x24c>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b84:	eeb0 0a67 	vmov.f32	s0, s15
 8006b88:	f7fa fe3c 	bl	8001804 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <main+0x24c>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b98:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9c:	f7fa fef2 	bl	8001984 <cell11_Temp_03_Set>
	  if (modebus_rx_flag == 1 )
 8006ba0:	e7a7      	b.n	8006af2 <main+0x142>
 8006ba2:	bf00      	nop
 8006ba4:	2000121c 	.word	0x2000121c
 8006ba8:	2000131c 	.word	0x2000131c
 8006bac:	2000171c 	.word	0x2000171c
 8006bb0:	20000ffc 	.word	0x20000ffc
 8006bb4:	20000900 	.word	0x20000900
 8006bb8:	20001204 	.word	0x20001204
 8006bbc:	2000090a 	.word	0x2000090a
 8006bc0:	2000090c 	.word	0x2000090c
 8006bc4:	20000910 	.word	0x20000910
 8006bc8:	20001208 	.word	0x20001208
 8006bcc:	20000904 	.word	0x20000904
 8006bd0:	20001828 	.word	0x20001828
 8006bd4:	2000187c 	.word	0x2000187c
 8006bd8:	20001a30 	.word	0x20001a30
 8006bdc:	2000141c 	.word	0x2000141c
 8006be0:	20001a78 	.word	0x20001a78
 8006be4:	2000151c 	.word	0x2000151c
 8006be8:	20001ac0 	.word	0x20001ac0
 8006bec:	2000161c 	.word	0x2000161c
 8006bf0:	20001b08 	.word	0x20001b08
 8006bf4:	20001217 	.word	0x20001217
 8006bf8:	20001218 	.word	0x20001218
 8006bfc:	200008e8 	.word	0x200008e8

08006c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b094      	sub	sp, #80	@ 0x50
 8006c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c06:	f107 0320 	add.w	r3, r7, #32
 8006c0a:	2230      	movs	r2, #48	@ 0x30
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f005 fe90 	bl	800c934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c24:	2300      	movs	r3, #0
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <SystemClock_Config+0xd0>)
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	4a28      	ldr	r2, [pc, #160]	@ (8006cd0 <SystemClock_Config+0xd0>)
 8006c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c34:	4b26      	ldr	r3, [pc, #152]	@ (8006cd0 <SystemClock_Config+0xd0>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3c:	60bb      	str	r3, [r7, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006c40:	2300      	movs	r3, #0
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <SystemClock_Config+0xd4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006c4c:	4a21      	ldr	r2, [pc, #132]	@ (8006cd4 <SystemClock_Config+0xd4>)
 8006c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd4 <SystemClock_Config+0xd4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c60:	2302      	movs	r3, #2
 8006c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c64:	2301      	movs	r3, #1
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c68:	2310      	movs	r3, #16
 8006c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006c74:	230f      	movs	r3, #15
 8006c76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8006c78:	2390      	movs	r3, #144	@ 0x90
 8006c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006c80:	2305      	movs	r3, #5
 8006c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c84:	f107 0320 	add.w	r3, r7, #32
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f003 fa03 	bl	800a094 <HAL_RCC_OscConfig>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006c94:	f000 fd6d 	bl	8007772 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c98:	230f      	movs	r3, #15
 8006c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ca4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f003 fc64 	bl	800a584 <HAL_RCC_ClockConfig>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006cc2:	f000 fd56 	bl	8007772 <Error_Handler>
  }
}
 8006cc6:	bf00      	nop
 8006cc8:	3750      	adds	r7, #80	@ 0x50
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40007000 	.word	0x40007000

08006cd8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006cdc:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006cde:	4a18      	ldr	r2, [pc, #96]	@ (8006d40 <MX_CAN1_Init+0x68>)
 8006ce0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006cee:	4b13      	ldr	r3, [pc, #76]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006cf4:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006cf6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8006cfa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006cfe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8006d02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006d04:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006d22:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006d28:	4804      	ldr	r0, [pc, #16]	@ (8006d3c <MX_CAN1_Init+0x64>)
 8006d2a:	f001 fa43 	bl	80081b4 <HAL_CAN_Init>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006d34:	f000 fd1d 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20001784 	.word	0x20001784
 8006d40:	40006400 	.word	0x40006400

08006d44 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006d48:	4b16      	ldr	r3, [pc, #88]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d4a:	4a17      	ldr	r2, [pc, #92]	@ (8006da8 <MX_CAN2_Init+0x64>)
 8006d4c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8006d4e:	4b15      	ldr	r3, [pc, #84]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d50:	2210      	movs	r2, #16
 8006d52:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006d54:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006d5a:	4b12      	ldr	r3, [pc, #72]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006d60:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006d66:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8006d72:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8006d7e:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006d84:	4b07      	ldr	r3, [pc, #28]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006d8a:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006d90:	4804      	ldr	r0, [pc, #16]	@ (8006da4 <MX_CAN2_Init+0x60>)
 8006d92:	f001 fa0f 	bl	80081b4 <HAL_CAN_Init>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8006d9c:	f000 fce9 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006da0:	bf00      	nop
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200017ac 	.word	0x200017ac
 8006da8:	40006800 	.word	0x40006800

08006dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006db0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006db2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e24 <MX_I2C1_Init+0x78>)
 8006db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006db6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006db8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e28 <MX_I2C1_Init+0x7c>)
 8006dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006dbc:	4b18      	ldr	r3, [pc, #96]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006dc2:	4b17      	ldr	r3, [pc, #92]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006dc8:	4b15      	ldr	r3, [pc, #84]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006dd0:	4b13      	ldr	r3, [pc, #76]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006dd6:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ddc:	4b10      	ldr	r3, [pc, #64]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006de2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006de8:	480d      	ldr	r0, [pc, #52]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dea:	f002 f8b3 	bl	8008f54 <HAL_I2C_Init>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006df4:	f000 fcbd 	bl	8007772 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4809      	ldr	r0, [pc, #36]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006dfc:	f003 f8ce 	bl	8009f9c <HAL_I2CEx_ConfigAnalogFilter>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006e06:	f000 fcb4 	bl	8007772 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4804      	ldr	r0, [pc, #16]	@ (8006e20 <MX_I2C1_Init+0x74>)
 8006e0e:	f003 f901 	bl	800a014 <HAL_I2CEx_ConfigDigitalFilter>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006e18:	f000 fcab 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	200017d4 	.word	0x200017d4
 8006e24:	40005400 	.word	0x40005400
 8006e28:	000186a0 	.word	0x000186a0

08006e2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e30:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <MX_I2C2_Init+0x78>)
 8006e34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006e36:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea8 <MX_I2C2_Init+0x7c>)
 8006e3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e3c:	4b18      	ldr	r3, [pc, #96]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006e42:	4b17      	ldr	r3, [pc, #92]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e48:	4b15      	ldr	r3, [pc, #84]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e50:	4b13      	ldr	r3, [pc, #76]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006e56:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e62:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006e68:	480d      	ldr	r0, [pc, #52]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e6a:	f002 f873 	bl	8008f54 <HAL_I2C_Init>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006e74:	f000 fc7d 	bl	8007772 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4809      	ldr	r0, [pc, #36]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e7c:	f003 f88e 	bl	8009f9c <HAL_I2CEx_ConfigAnalogFilter>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8006e86:	f000 fc74 	bl	8007772 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4804      	ldr	r0, [pc, #16]	@ (8006ea0 <MX_I2C2_Init+0x74>)
 8006e8e:	f003 f8c1 	bl	800a014 <HAL_I2CEx_ConfigDigitalFilter>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8006e98:	f000 fc6b 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20001828 	.word	0x20001828
 8006ea4:	40005800 	.word	0x40005800
 8006ea8:	00061a80 	.word	0x00061a80

08006eac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f24 <MX_I2C3_Init+0x78>)
 8006eb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f28 <MX_I2C3_Init+0x7c>)
 8006eba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ebc:	4b18      	ldr	r3, [pc, #96]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ec8:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006ece:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ed0:	4b13      	ldr	r3, [pc, #76]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006ed6:	4b12      	ldr	r3, [pc, #72]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006ee8:	480d      	ldr	r0, [pc, #52]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006eea:	f002 f833 	bl	8008f54 <HAL_I2C_Init>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006ef4:	f000 fc3d 	bl	8007772 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4809      	ldr	r0, [pc, #36]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006efc:	f003 f84e 	bl	8009f9c <HAL_I2CEx_ConfigAnalogFilter>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006f06:	f000 fc34 	bl	8007772 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4804      	ldr	r0, [pc, #16]	@ (8006f20 <MX_I2C3_Init+0x74>)
 8006f0e:	f003 f881 	bl	800a014 <HAL_I2CEx_ConfigDigitalFilter>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006f18:	f000 fc2b 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006f1c:	bf00      	nop
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	2000187c 	.word	0x2000187c
 8006f24:	40005c00 	.word	0x40005c00
 8006f28:	00061a80 	.word	0x00061a80

08006f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006f30:	4b17      	ldr	r3, [pc, #92]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f32:	4a18      	ldr	r2, [pc, #96]	@ (8006f94 <MX_SPI1_Init+0x68>)
 8006f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f36:	4b16      	ldr	r3, [pc, #88]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f3e:	4b14      	ldr	r3, [pc, #80]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f44:	4b12      	ldr	r3, [pc, #72]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f4a:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f50:	4b0f      	ldr	r3, [pc, #60]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f56:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f60:	2228      	movs	r2, #40	@ 0x28
 8006f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f64:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f6a:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006f76:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f78:	220a      	movs	r2, #10
 8006f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f7c:	4804      	ldr	r0, [pc, #16]	@ (8006f90 <MX_SPI1_Init+0x64>)
 8006f7e:	f003 fce1 	bl	800a944 <HAL_SPI_Init>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006f88:	f000 fbf3 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f8c:	bf00      	nop
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200018d0 	.word	0x200018d0
 8006f94:	40013000 	.word	0x40013000

08006f98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006f9c:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <MX_SPI2_Init+0x68>)
 8006fa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006fa2:	4b16      	ldr	r3, [pc, #88]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006fa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006faa:	4b14      	ldr	r3, [pc, #80]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fb6:	4b11      	ldr	r3, [pc, #68]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006fca:	4b0c      	ldr	r3, [pc, #48]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fcc:	2218      	movs	r2, #24
 8006fce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fd6:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006fe2:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fe4:	220a      	movs	r2, #10
 8006fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006fe8:	4804      	ldr	r0, [pc, #16]	@ (8006ffc <MX_SPI2_Init+0x64>)
 8006fea:	f003 fcab 	bl	800a944 <HAL_SPI_Init>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006ff4:	f000 fbbd 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20001928 	.word	0x20001928
 8007000:	40003800 	.word	0x40003800

08007004 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007008:	4b17      	ldr	r3, [pc, #92]	@ (8007068 <MX_SPI3_Init+0x64>)
 800700a:	4a18      	ldr	r2, [pc, #96]	@ (800706c <MX_SPI3_Init+0x68>)
 800700c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800700e:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007014:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007016:	4b14      	ldr	r3, [pc, #80]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007018:	2200      	movs	r2, #0
 800701a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800701c:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <MX_SPI3_Init+0x64>)
 800701e:	2200      	movs	r2, #0
 8007020:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007022:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007024:	2200      	movs	r2, #0
 8007026:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007028:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <MX_SPI3_Init+0x64>)
 800702a:	2200      	movs	r2, #0
 800702c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800702e:	4b0e      	ldr	r3, [pc, #56]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007034:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007038:	2220      	movs	r2, #32
 800703a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800703c:	4b0a      	ldr	r3, [pc, #40]	@ (8007068 <MX_SPI3_Init+0x64>)
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007042:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007044:	2200      	movs	r2, #0
 8007046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007048:	4b07      	ldr	r3, [pc, #28]	@ (8007068 <MX_SPI3_Init+0x64>)
 800704a:	2200      	movs	r2, #0
 800704c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007050:	220a      	movs	r2, #10
 8007052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007054:	4804      	ldr	r0, [pc, #16]	@ (8007068 <MX_SPI3_Init+0x64>)
 8007056:	f003 fc75 	bl	800a944 <HAL_SPI_Init>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007060:	f000 fb87 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20001980 	.word	0x20001980
 800706c:	40003c00 	.word	0x40003c00

08007070 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8007074:	4b17      	ldr	r3, [pc, #92]	@ (80070d4 <MX_SPI4_Init+0x64>)
 8007076:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <MX_SPI4_Init+0x68>)
 8007078:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800707a:	4b16      	ldr	r3, [pc, #88]	@ (80070d4 <MX_SPI4_Init+0x64>)
 800707c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007080:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8007082:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <MX_SPI4_Init+0x64>)
 8007084:	2200      	movs	r2, #0
 8007086:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8007088:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <MX_SPI4_Init+0x64>)
 800708a:	2200      	movs	r2, #0
 800708c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <MX_SPI4_Init+0x64>)
 8007090:	2200      	movs	r2, #0
 8007092:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007094:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <MX_SPI4_Init+0x64>)
 8007096:	2200      	movs	r2, #0
 8007098:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800709a:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <MX_SPI4_Init+0x64>)
 800709c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070a0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070a4:	2230      	movs	r2, #48	@ 0x30
 80070a6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80070ae:	4b09      	ldr	r3, [pc, #36]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070b4:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070bc:	220a      	movs	r2, #10
 80070be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80070c0:	4804      	ldr	r0, [pc, #16]	@ (80070d4 <MX_SPI4_Init+0x64>)
 80070c2:	f003 fc3f 	bl	800a944 <HAL_SPI_Init>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80070cc:	f000 fb51 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200019d8 	.word	0x200019d8
 80070d8:	40013400 	.word	0x40013400

080070dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80070e0:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 80070e2:	4a12      	ldr	r2, [pc, #72]	@ (800712c <MX_USART1_UART_Init+0x50>)
 80070e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 80070e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80070ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 8007102:	220c      	movs	r2, #12
 8007104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 800710e:	2200      	movs	r2, #0
 8007110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007112:	4805      	ldr	r0, [pc, #20]	@ (8007128 <MX_USART1_UART_Init+0x4c>)
 8007114:	f004 f9e8 	bl	800b4e8 <HAL_UART_Init>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800711e:	f000 fb28 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001a30 	.word	0x20001a30
 800712c:	40011000 	.word	0x40011000

08007130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007134:	4b11      	ldr	r3, [pc, #68]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007136:	4a12      	ldr	r2, [pc, #72]	@ (8007180 <MX_USART2_UART_Init+0x50>)
 8007138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800713a:	4b10      	ldr	r3, [pc, #64]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 800713c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007142:	4b0e      	ldr	r3, [pc, #56]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007144:	2200      	movs	r2, #0
 8007146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 800714a:	2200      	movs	r2, #0
 800714c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800714e:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007154:	4b09      	ldr	r3, [pc, #36]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007156:	220c      	movs	r2, #12
 8007158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800715a:	4b08      	ldr	r3, [pc, #32]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007166:	4805      	ldr	r0, [pc, #20]	@ (800717c <MX_USART2_UART_Init+0x4c>)
 8007168:	f004 f9be 	bl	800b4e8 <HAL_UART_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007172:	f000 fafe 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20001a78 	.word	0x20001a78
 8007180:	40004400 	.word	0x40004400

08007184 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007188:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 800718a:	4a12      	ldr	r2, [pc, #72]	@ (80071d4 <MX_USART3_UART_Init+0x50>)
 800718c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800718e:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 8007190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007196:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 800719e:	2200      	movs	r2, #0
 80071a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80071a2:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 80071aa:	220c      	movs	r2, #12
 80071ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071ae:	4b08      	ldr	r3, [pc, #32]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80071b4:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80071ba:	4805      	ldr	r0, [pc, #20]	@ (80071d0 <MX_USART3_UART_Init+0x4c>)
 80071bc:	f004 f994 	bl	800b4e8 <HAL_UART_Init>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80071c6:	f000 fad4 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20001ac0 	.word	0x20001ac0
 80071d4:	40004800 	.word	0x40004800

080071d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80071dc:	4b11      	ldr	r3, [pc, #68]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071de:	4a12      	ldr	r2, [pc, #72]	@ (8007228 <MX_USART6_UART_Init+0x50>)
 80071e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80071e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80071ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80071f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80071fc:	4b09      	ldr	r3, [pc, #36]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 80071fe:	220c      	movs	r2, #12
 8007200:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007202:	4b08      	ldr	r3, [pc, #32]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 8007204:	2200      	movs	r2, #0
 8007206:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 800720a:	2200      	movs	r2, #0
 800720c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800720e:	4805      	ldr	r0, [pc, #20]	@ (8007224 <MX_USART6_UART_Init+0x4c>)
 8007210:	f004 f96a 	bl	800b4e8 <HAL_UART_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800721a:	f000 faaa 	bl	8007772 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20001b08 	.word	0x20001b08
 8007228:	40011400 	.word	0x40011400

0800722c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08e      	sub	sp, #56	@ 0x38
 8007230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	4bb6      	ldr	r3, [pc, #728]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724a:	4ab5      	ldr	r2, [pc, #724]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 800724c:	f043 0310 	orr.w	r3, r3, #16
 8007250:	6313      	str	r3, [r2, #48]	@ 0x30
 8007252:	4bb3      	ldr	r3, [pc, #716]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	623b      	str	r3, [r7, #32]
 800725c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	4baf      	ldr	r3, [pc, #700]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	4aae      	ldr	r2, [pc, #696]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800726c:	6313      	str	r3, [r2, #48]	@ 0x30
 800726e:	4bac      	ldr	r3, [pc, #688]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	4ba8      	ldr	r3, [pc, #672]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	4aa7      	ldr	r2, [pc, #668]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007284:	f043 0304 	orr.w	r3, r3, #4
 8007288:	6313      	str	r3, [r2, #48]	@ 0x30
 800728a:	4ba5      	ldr	r3, [pc, #660]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	4ba1      	ldr	r3, [pc, #644]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	4aa0      	ldr	r2, [pc, #640]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072a0:	f043 0320 	orr.w	r3, r3, #32
 80072a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80072a6:	4b9e      	ldr	r3, [pc, #632]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	4b9a      	ldr	r3, [pc, #616]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ba:	4a99      	ldr	r2, [pc, #612]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072c2:	4b97      	ldr	r3, [pc, #604]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	4b93      	ldr	r3, [pc, #588]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	4a92      	ldr	r2, [pc, #584]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80072de:	4b90      	ldr	r3, [pc, #576]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ea:	2300      	movs	r3, #0
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	4a8b      	ldr	r2, [pc, #556]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072f4:	f043 0302 	orr.w	r3, r3, #2
 80072f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072fa:	4b89      	ldr	r3, [pc, #548]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	60bb      	str	r3, [r7, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007306:	2300      	movs	r3, #0
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	4b85      	ldr	r3, [pc, #532]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730e:	4a84      	ldr	r2, [pc, #528]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007314:	6313      	str	r3, [r2, #48]	@ 0x30
 8007316:	4b82      	ldr	r3, [pc, #520]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4b7e      	ldr	r3, [pc, #504]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732a:	4a7d      	ldr	r2, [pc, #500]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 800732c:	f043 0308 	orr.w	r3, r3, #8
 8007330:	6313      	str	r3, [r2, #48]	@ 0x30
 8007332:	4b7b      	ldr	r3, [pc, #492]	@ (8007520 <MX_GPIO_Init+0x2f4>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800733e:	2201      	movs	r2, #1
 8007340:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8007344:	4877      	ldr	r0, [pc, #476]	@ (8007524 <MX_GPIO_Init+0x2f8>)
 8007346:	f001 fdb9 	bl	8008ebc <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin, GPIO_PIN_SET);
 800734a:	2201      	movs	r2, #1
 800734c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8007350:	4875      	ldr	r0, [pc, #468]	@ (8007528 <MX_GPIO_Init+0x2fc>)
 8007352:	f001 fdb3 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8007356:	2201      	movs	r2, #1
 8007358:	f242 0133 	movw	r1, #8243	@ 0x2033
 800735c:	4873      	ldr	r0, [pc, #460]	@ (800752c <MX_GPIO_Init+0x300>)
 800735e:	f001 fdad 	bl	8008ebc <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 8007362:	2201      	movs	r2, #1
 8007364:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8007368:	4871      	ldr	r0, [pc, #452]	@ (8007530 <MX_GPIO_Init+0x304>)
 800736a:	f001 fda7 	bl	8008ebc <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 800736e:	2200      	movs	r2, #0
 8007370:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8007374:	486e      	ldr	r0, [pc, #440]	@ (8007530 <MX_GPIO_Init+0x304>)
 8007376:	f001 fda1 	bl	8008ebc <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 800737a:	2201      	movs	r2, #1
 800737c:	2101      	movs	r1, #1
 800737e:	486d      	ldr	r0, [pc, #436]	@ (8007534 <MX_GPIO_Init+0x308>)
 8007380:	f001 fd9c 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8007384:	2200      	movs	r2, #0
 8007386:	2102      	movs	r1, #2
 8007388:	486a      	ldr	r0, [pc, #424]	@ (8007534 <MX_GPIO_Init+0x308>)
 800738a:	f001 fd97 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 800738e:	2200      	movs	r2, #0
 8007390:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 8007394:	4868      	ldr	r0, [pc, #416]	@ (8007538 <MX_GPIO_Init+0x30c>)
 8007396:	f001 fd91 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 800739a:	2201      	movs	r2, #1
 800739c:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073a0:	4866      	ldr	r0, [pc, #408]	@ (800753c <MX_GPIO_Init+0x310>)
 80073a2:	f001 fd8b 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80073a6:	2201      	movs	r2, #1
 80073a8:	2103      	movs	r1, #3
 80073aa:	4865      	ldr	r0, [pc, #404]	@ (8007540 <MX_GPIO_Init+0x314>)
 80073ac:	f001 fd86 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80073b0:	2200      	movs	r2, #0
 80073b2:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073b6:	485b      	ldr	r0, [pc, #364]	@ (8007524 <MX_GPIO_Init+0x2f8>)
 80073b8:	f001 fd80 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 80073bc:	2200      	movs	r2, #0
 80073be:	f244 4138 	movw	r1, #17464	@ 0x4438
 80073c2:	485e      	ldr	r0, [pc, #376]	@ (800753c <MX_GPIO_Init+0x310>)
 80073c4:	f001 fd7a 	bl	8008ebc <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 80073c8:	2201      	movs	r2, #1
 80073ca:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 80073ce:	485a      	ldr	r0, [pc, #360]	@ (8007538 <MX_GPIO_Init+0x30c>)
 80073d0:	f001 fd74 	bl	8008ebc <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80073d4:	2201      	movs	r2, #1
 80073d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073da:	485a      	ldr	r0, [pc, #360]	@ (8007544 <MX_GPIO_Init+0x318>)
 80073dc:	f001 fd6e 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 80073e0:	2200      	movs	r2, #0
 80073e2:	f640 010c 	movw	r1, #2060	@ 0x80c
 80073e6:	4857      	ldr	r0, [pc, #348]	@ (8007544 <MX_GPIO_Init+0x318>)
 80073e8:	f001 fd68 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 80073ec:	2200      	movs	r2, #0
 80073ee:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 80073f2:	4853      	ldr	r0, [pc, #332]	@ (8007540 <MX_GPIO_Init+0x314>)
 80073f4:	f001 fd62 	bl	8008ebc <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80073fe:	484b      	ldr	r0, [pc, #300]	@ (800752c <MX_GPIO_Init+0x300>)
 8007400:	f001 fd5c 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8007404:	2200      	movs	r2, #0
 8007406:	21f0      	movs	r1, #240	@ 0xf0
 8007408:	4847      	ldr	r0, [pc, #284]	@ (8007528 <MX_GPIO_Init+0x2fc>)
 800740a:	f001 fd57 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800740e:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007414:	2301      	movs	r3, #1
 8007416:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007418:	2300      	movs	r3, #0
 800741a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741c:	2300      	movs	r3, #0
 800741e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007424:	4619      	mov	r1, r3
 8007426:	483f      	ldr	r0, [pc, #252]	@ (8007524 <MX_GPIO_Init+0x2f8>)
 8007428:	f001 fb9c 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800742c:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007432:	2301      	movs	r3, #1
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007436:	2300      	movs	r3, #0
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800743a:	2300      	movs	r3, #0
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800743e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007442:	4619      	mov	r1, r3
 8007444:	4838      	ldr	r0, [pc, #224]	@ (8007528 <MX_GPIO_Init+0x2fc>)
 8007446:	f001 fb8d 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 800744a:	f242 1330 	movw	r3, #8496	@ 0x2130
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007450:	2301      	movs	r3, #1
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007454:	2300      	movs	r3, #0
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007458:	2300      	movs	r3, #0
 800745a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800745c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007460:	4619      	mov	r1, r3
 8007462:	4832      	ldr	r0, [pc, #200]	@ (800752c <MX_GPIO_Init+0x300>)
 8007464:	f001 fb7e 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8007468:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800746e:	2301      	movs	r3, #1
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007476:	2300      	movs	r3, #0
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800747a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800747e:	4619      	mov	r1, r3
 8007480:	482b      	ldr	r0, [pc, #172]	@ (8007530 <MX_GPIO_Init+0x304>)
 8007482:	f001 fb6f 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8007486:	2304      	movs	r3, #4
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800748a:	2301      	movs	r3, #1
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748e:	2300      	movs	r3, #0
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007492:	2302      	movs	r3, #2
 8007494:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8007496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800749a:	4619      	mov	r1, r3
 800749c:	4824      	ldr	r0, [pc, #144]	@ (8007530 <MX_GPIO_Init+0x304>)
 800749e:	f001 fb61 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80074a2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a8:	2301      	movs	r3, #1
 80074aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ac:	2301      	movs	r3, #1
 80074ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b0:	2303      	movs	r3, #3
 80074b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074b8:	4619      	mov	r1, r3
 80074ba:	481d      	ldr	r0, [pc, #116]	@ (8007530 <MX_GPIO_Init+0x304>)
 80074bc:	f001 fb52 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80074c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074c6:	2301      	movs	r3, #1
 80074c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074ca:	2302      	movs	r3, #2
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ce:	2303      	movs	r3, #3
 80074d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80074d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074d6:	4619      	mov	r1, r3
 80074d8:	4815      	ldr	r0, [pc, #84]	@ (8007530 <MX_GPIO_Init+0x304>)
 80074da:	f001 fb43 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 80074de:	2301      	movs	r3, #1
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e2:	2301      	movs	r3, #1
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074e6:	2302      	movs	r3, #2
 80074e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074ea:	2303      	movs	r3, #3
 80074ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80074ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074f2:	4619      	mov	r1, r3
 80074f4:	480d      	ldr	r0, [pc, #52]	@ (800752c <MX_GPIO_Init+0x300>)
 80074f6:	f001 fb35 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 80074fa:	2302      	movs	r3, #2
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074fe:	2301      	movs	r3, #1
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007502:	2301      	movs	r3, #1
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007506:	2303      	movs	r3, #3
 8007508:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 800750a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800750e:	4619      	mov	r1, r3
 8007510:	4806      	ldr	r0, [pc, #24]	@ (800752c <MX_GPIO_Init+0x300>)
 8007512:	f001 fb27 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8007516:	2301      	movs	r3, #1
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800751a:	2301      	movs	r3, #1
 800751c:	e014      	b.n	8007548 <MX_GPIO_Init+0x31c>
 800751e:	bf00      	nop
 8007520:	40023800 	.word	0x40023800
 8007524:	40021000 	.word	0x40021000
 8007528:	40022000 	.word	0x40022000
 800752c:	40020800 	.word	0x40020800
 8007530:	40021400 	.word	0x40021400
 8007534:	40020000 	.word	0x40020000
 8007538:	40021c00 	.word	0x40021c00
 800753c:	40020400 	.word	0x40020400
 8007540:	40021800 	.word	0x40021800
 8007544:	40020c00 	.word	0x40020c00
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800754a:	2302      	movs	r3, #2
 800754c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800754e:	2303      	movs	r3, #3
 8007550:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8007552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007556:	4619      	mov	r1, r3
 8007558:	485c      	ldr	r0, [pc, #368]	@ (80076cc <MX_GPIO_Init+0x4a0>)
 800755a:	f001 fb03 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 800755e:	2302      	movs	r3, #2
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007562:	2301      	movs	r3, #1
 8007564:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007566:	2300      	movs	r3, #0
 8007568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800756a:	2302      	movs	r3, #2
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800756e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007572:	4619      	mov	r1, r3
 8007574:	4855      	ldr	r0, [pc, #340]	@ (80076cc <MX_GPIO_Init+0x4a0>)
 8007576:	f001 faf5 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 800757a:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007580:	2301      	movs	r3, #1
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007588:	2300      	movs	r3, #0
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800758c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007590:	4619      	mov	r1, r3
 8007592:	484f      	ldr	r0, [pc, #316]	@ (80076d0 <MX_GPIO_Init+0x4a4>)
 8007594:	f001 fae6 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8007598:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800759e:	2301      	movs	r3, #1
 80075a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a6:	2300      	movs	r3, #0
 80075a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ae:	4619      	mov	r1, r3
 80075b0:	4848      	ldr	r0, [pc, #288]	@ (80076d4 <MX_GPIO_Init+0x4a8>)
 80075b2:	f001 fad7 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 80075b6:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075bc:	2301      	movs	r3, #1
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c4:	2300      	movs	r3, #0
 80075c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075cc:	4619      	mov	r1, r3
 80075ce:	4842      	ldr	r0, [pc, #264]	@ (80076d8 <MX_GPIO_Init+0x4ac>)
 80075d0:	f001 fac8 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 80075d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075da:	2301      	movs	r3, #1
 80075dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075de:	2301      	movs	r3, #1
 80075e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e2:	2303      	movs	r3, #3
 80075e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 80075e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ea:	4619      	mov	r1, r3
 80075ec:	4839      	ldr	r0, [pc, #228]	@ (80076d4 <MX_GPIO_Init+0x4a8>)
 80075ee:	f001 fab9 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 80075f2:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075f8:	2301      	movs	r3, #1
 80075fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80075fc:	2302      	movs	r3, #2
 80075fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007608:	4619      	mov	r1, r3
 800760a:	4831      	ldr	r0, [pc, #196]	@ (80076d0 <MX_GPIO_Init+0x4a4>)
 800760c:	f001 faaa 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8007610:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007616:	2301      	movs	r3, #1
 8007618:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800761a:	2301      	movs	r3, #1
 800761c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800761e:	2303      	movs	r3, #3
 8007620:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007626:	4619      	mov	r1, r3
 8007628:	4829      	ldr	r0, [pc, #164]	@ (80076d0 <MX_GPIO_Init+0x4a4>)
 800762a:	f001 fa9b 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 800762e:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007634:	2301      	movs	r3, #1
 8007636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	2300      	movs	r3, #0
 800763a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763c:	2300      	movs	r3, #0
 800763e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007644:	4619      	mov	r1, r3
 8007646:	4825      	ldr	r0, [pc, #148]	@ (80076dc <MX_GPIO_Init+0x4b0>)
 8007648:	f001 fa8c 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 800764c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007652:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007656:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800765c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007660:	4619      	mov	r1, r3
 8007662:	481e      	ldr	r0, [pc, #120]	@ (80076dc <MX_GPIO_Init+0x4b0>)
 8007664:	f001 fa7e 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8007668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800766e:	2300      	movs	r3, #0
 8007670:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007672:	2301      	movs	r3, #1
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8007676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800767a:	4619      	mov	r1, r3
 800767c:	4814      	ldr	r0, [pc, #80]	@ (80076d0 <MX_GPIO_Init+0x4a4>)
 800767e:	f001 fa71 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8007682:	23f0      	movs	r3, #240	@ 0xf0
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007686:	2300      	movs	r3, #0
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800768a:	2300      	movs	r3, #0
 800768c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800768e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007692:	4619      	mov	r1, r3
 8007694:	4811      	ldr	r0, [pc, #68]	@ (80076dc <MX_GPIO_Init+0x4b0>)
 8007696:	f001 fa65 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 800769a:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076a0:	2300      	movs	r3, #0
 80076a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ac:	4619      	mov	r1, r3
 80076ae:	480a      	ldr	r0, [pc, #40]	@ (80076d8 <MX_GPIO_Init+0x4ac>)
 80076b0:	f001 fa58 	bl	8008b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	2028      	movs	r0, #40	@ 0x28
 80076ba:	f001 f98a 	bl	80089d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80076be:	2028      	movs	r0, #40	@ 0x28
 80076c0:	f001 f9a3 	bl	8008a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80076c4:	bf00      	nop
 80076c6:	3738      	adds	r7, #56	@ 0x38
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40020000 	.word	0x40020000
 80076d0:	40021c00 	.word	0x40021c00
 80076d4:	40020400 	.word	0x40020400
 80076d8:	40021800 	.word	0x40021800
 80076dc:	40020c00 	.word	0x40020c00

080076e0 <HAL_UARTEx_RxEventCallback>:
//    }
//}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
			break;
		}
	}
    */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 80076ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076f0:	490f      	ldr	r1, [pc, #60]	@ (8007730 <HAL_UARTEx_RxEventCallback+0x50>)
 80076f2:	4810      	ldr	r0, [pc, #64]	@ (8007734 <HAL_UARTEx_RxEventCallback+0x54>)
 80076f4:	f003 ffd3 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 80076f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076fc:	490e      	ldr	r1, [pc, #56]	@ (8007738 <HAL_UARTEx_RxEventCallback+0x58>)
 80076fe:	480f      	ldr	r0, [pc, #60]	@ (800773c <HAL_UARTEx_RxEventCallback+0x5c>)
 8007700:	f003 ffcd 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 8007704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007708:	490d      	ldr	r1, [pc, #52]	@ (8007740 <HAL_UARTEx_RxEventCallback+0x60>)
 800770a:	480e      	ldr	r0, [pc, #56]	@ (8007744 <HAL_UARTEx_RxEventCallback+0x64>)
 800770c:	f003 ffc7 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 8007710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007714:	490c      	ldr	r1, [pc, #48]	@ (8007748 <HAL_UARTEx_RxEventCallback+0x68>)
 8007716:	480d      	ldr	r0, [pc, #52]	@ (800774c <HAL_UARTEx_RxEventCallback+0x6c>)
 8007718:	f003 ffc1 	bl	800b69e <HAL_UARTEx_ReceiveToIdle_IT>



	modebus_rx_flag = 1 ;
 800771c:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <HAL_UARTEx_RxEventCallback+0x70>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]

	  flag_1 = 2 ;
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <HAL_UARTEx_RxEventCallback+0x74>)
 8007724:	2202      	movs	r2, #2
 8007726:	701a      	strb	r2, [r3, #0]

//	modebus_rx_flag = 0;


//	HAL_UART_RxCpltCallback
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	2000121c 	.word	0x2000121c
 8007734:	20001a30 	.word	0x20001a30
 8007738:	2000141c 	.word	0x2000141c
 800773c:	20001a78 	.word	0x20001a78
 8007740:	2000151c 	.word	0x2000151c
 8007744:	20001ac0 	.word	0x20001ac0
 8007748:	2000161c 	.word	0x2000161c
 800774c:	20001b08 	.word	0x20001b08
 8007750:	20001217 	.word	0x20001217
 8007754:	20001218 	.word	0x20001218

08007758 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	4618      	mov	r0, r3
 8007766:	f7f9 fcc3 	bl	80010f0 <Push_ButtonHandler>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007776:	b672      	cpsid	i
}
 8007778:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <Error_Handler+0x8>
	...

08007780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007786:	2300      	movs	r3, #0
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <HAL_MspInit+0x4c>)
 800778c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778e:	4a0f      	ldr	r2, [pc, #60]	@ (80077cc <HAL_MspInit+0x4c>)
 8007790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007794:	6453      	str	r3, [r2, #68]	@ 0x44
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <HAL_MspInit+0x4c>)
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4b09      	ldr	r3, [pc, #36]	@ (80077cc <HAL_MspInit+0x4c>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	4a08      	ldr	r2, [pc, #32]	@ (80077cc <HAL_MspInit+0x4c>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_MspInit+0x4c>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800

080077d0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	@ 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d8:	f107 031c 	add.w	r3, r7, #28
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	605a      	str	r2, [r3, #4]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	60da      	str	r2, [r3, #12]
 80077e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007918 <HAL_CAN_MspInit+0x148>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d145      	bne.n	800787e <HAL_CAN_MspInit+0xae>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80077f2:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a48      	ldr	r2, [pc, #288]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80077fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80077fc:	4b47      	ldr	r3, [pc, #284]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10d      	bne.n	8007820 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	4b45      	ldr	r3, [pc, #276]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	4a44      	ldr	r2, [pc, #272]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 800780e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007812:	6413      	str	r3, [r2, #64]	@ 0x40
 8007814:	4b42      	ldr	r3, [pc, #264]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	4b3e      	ldr	r3, [pc, #248]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007828:	4a3d      	ldr	r2, [pc, #244]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 800782a:	f043 0308 	orr.w	r3, r3, #8
 800782e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007830:	4b3b      	ldr	r3, [pc, #236]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800783c:	2303      	movs	r3, #3
 800783e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	2302      	movs	r3, #2
 8007842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007844:	2300      	movs	r3, #0
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007848:	2303      	movs	r3, #3
 800784a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800784c:	2309      	movs	r3, #9
 800784e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007850:	f107 031c 	add.w	r3, r7, #28
 8007854:	4619      	mov	r1, r3
 8007856:	4833      	ldr	r0, [pc, #204]	@ (8007924 <HAL_CAN_MspInit+0x154>)
 8007858:	f001 f984 	bl	8008b64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	2014      	movs	r0, #20
 8007862:	f001 f8b6 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007866:	2014      	movs	r0, #20
 8007868:	f001 f8cf 	bl	8008a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800786c:	2200      	movs	r2, #0
 800786e:	2100      	movs	r1, #0
 8007870:	2015      	movs	r0, #21
 8007872:	f001 f8ae 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007876:	2015      	movs	r0, #21
 8007878:	f001 f8c7 	bl	8008a0a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 800787c:	e048      	b.n	8007910 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a29      	ldr	r2, [pc, #164]	@ (8007928 <HAL_CAN_MspInit+0x158>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d143      	bne.n	8007910 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8007888:	2300      	movs	r3, #0
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 800788e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007890:	4a23      	ldr	r2, [pc, #140]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 8007892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007896:	6413      	str	r3, [r2, #64]	@ 0x40
 8007898:	4b21      	ldr	r3, [pc, #132]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80078a4:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80078ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80078ae:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <HAL_CAN_MspInit+0x14c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10d      	bne.n	80078d2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	4b19      	ldr	r3, [pc, #100]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80078c6:	4b16      	ldr	r3, [pc, #88]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078da:	4a11      	ldr	r2, [pc, #68]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078dc:	f043 0302 	orr.w	r3, r3, #2
 80078e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <HAL_CAN_MspInit+0x150>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	60bb      	str	r3, [r7, #8]
 80078ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80078ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80078f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f4:	2302      	movs	r3, #2
 80078f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078fc:	2303      	movs	r3, #3
 80078fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8007900:	2309      	movs	r3, #9
 8007902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007904:	f107 031c 	add.w	r3, r7, #28
 8007908:	4619      	mov	r1, r3
 800790a:	4808      	ldr	r0, [pc, #32]	@ (800792c <HAL_CAN_MspInit+0x15c>)
 800790c:	f001 f92a 	bl	8008b64 <HAL_GPIO_Init>
}
 8007910:	bf00      	nop
 8007912:	3730      	adds	r7, #48	@ 0x30
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40006400 	.word	0x40006400
 800791c:	20001b50 	.word	0x20001b50
 8007920:	40023800 	.word	0x40023800
 8007924:	40020c00 	.word	0x40020c00
 8007928:	40006800 	.word	0x40006800
 800792c:	40020400 	.word	0x40020400

08007930 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	@ 0x38
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	609a      	str	r2, [r3, #8]
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a4c      	ldr	r2, [pc, #304]	@ (8007a80 <HAL_I2C_MspInit+0x150>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d12d      	bne.n	80079ae <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007952:	2300      	movs	r3, #0
 8007954:	623b      	str	r3, [r7, #32]
 8007956:	4b4b      	ldr	r3, [pc, #300]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795a:	4a4a      	ldr	r2, [pc, #296]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	6313      	str	r3, [r2, #48]	@ 0x30
 8007962:	4b48      	ldr	r3, [pc, #288]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800796e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007974:	2312      	movs	r3, #18
 8007976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007978:	2300      	movs	r3, #0
 800797a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800797c:	2303      	movs	r3, #3
 800797e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007980:	2304      	movs	r3, #4
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007988:	4619      	mov	r1, r3
 800798a:	483f      	ldr	r0, [pc, #252]	@ (8007a88 <HAL_I2C_MspInit+0x158>)
 800798c:	f001 f8ea 	bl	8008b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	4b3b      	ldr	r3, [pc, #236]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007998:	4a3a      	ldr	r2, [pc, #232]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 800799a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800799e:	6413      	str	r3, [r2, #64]	@ 0x40
 80079a0:	4b38      	ldr	r3, [pc, #224]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80079ac:	e063      	b.n	8007a76 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a36      	ldr	r2, [pc, #216]	@ (8007a8c <HAL_I2C_MspInit+0x15c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d12c      	bne.n	8007a12 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	4b31      	ldr	r3, [pc, #196]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	4a30      	ldr	r2, [pc, #192]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80079c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80079d4:	2330      	movs	r3, #48	@ 0x30
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80079d8:	2312      	movs	r3, #18
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e0:	2303      	movs	r3, #3
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80079e4:	2304      	movs	r3, #4
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80079e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079ec:	4619      	mov	r1, r3
 80079ee:	4828      	ldr	r0, [pc, #160]	@ (8007a90 <HAL_I2C_MspInit+0x160>)
 80079f0:	f001 f8b8 	bl	8008b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	4b22      	ldr	r3, [pc, #136]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	4a21      	ldr	r2, [pc, #132]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 80079fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a04:	4b1f      	ldr	r3, [pc, #124]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	697b      	ldr	r3, [r7, #20]
}
 8007a10:	e031      	b.n	8007a76 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1f      	ldr	r2, [pc, #124]	@ (8007a94 <HAL_I2C_MspInit+0x164>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d12c      	bne.n	8007a76 <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	4b18      	ldr	r3, [pc, #96]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a24:	4a17      	ldr	r2, [pc, #92]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a2c:	4b15      	ldr	r3, [pc, #84]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007a38:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a3e:	2312      	movs	r3, #18
 8007a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a46:	2303      	movs	r3, #3
 8007a48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a52:	4619      	mov	r1, r3
 8007a54:	480e      	ldr	r0, [pc, #56]	@ (8007a90 <HAL_I2C_MspInit+0x160>)
 8007a56:	f001 f885 	bl	8008b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	4a08      	ldr	r2, [pc, #32]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a6a:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <HAL_I2C_MspInit+0x154>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
}
 8007a76:	bf00      	nop
 8007a78:	3738      	adds	r7, #56	@ 0x38
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40005400 	.word	0x40005400
 8007a84:	40023800 	.word	0x40023800
 8007a88:	40020400 	.word	0x40020400
 8007a8c:	40005800 	.word	0x40005800
 8007a90:	40021c00 	.word	0x40021c00
 8007a94:	40005c00 	.word	0x40005c00

08007a98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b090      	sub	sp, #64	@ 0x40
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6d      	ldr	r2, [pc, #436]	@ (8007c6c <HAL_SPI_MspInit+0x1d4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d12c      	bne.n	8007b14 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007abe:	4b6c      	ldr	r3, [pc, #432]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007aca:	4b69      	ldr	r3, [pc, #420]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ada:	4b65      	ldr	r3, [pc, #404]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	4a64      	ldr	r2, [pc, #400]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ae6:	4b62      	ldr	r3, [pc, #392]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007af2:	23e0      	movs	r3, #224	@ 0xe0
 8007af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af6:	2302      	movs	r3, #2
 8007af8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afe:	2303      	movs	r3, #3
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b02:	2305      	movs	r3, #5
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4859      	ldr	r0, [pc, #356]	@ (8007c74 <HAL_SPI_MspInit+0x1dc>)
 8007b0e:	f001 f829 	bl	8008b64 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007b12:	e0a7      	b.n	8007c64 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a57      	ldr	r2, [pc, #348]	@ (8007c78 <HAL_SPI_MspInit+0x1e0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d12c      	bne.n	8007b78 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007b1e:	2300      	movs	r3, #0
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	4b53      	ldr	r3, [pc, #332]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	4a52      	ldr	r2, [pc, #328]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b2e:	4b50      	ldr	r3, [pc, #320]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b36:	623b      	str	r3, [r7, #32]
 8007b38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	4a4b      	ldr	r2, [pc, #300]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b4a:	4b49      	ldr	r3, [pc, #292]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007b56:	230e      	movs	r3, #14
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b62:	2303      	movs	r3, #3
 8007b64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b66:	2305      	movs	r3, #5
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4842      	ldr	r0, [pc, #264]	@ (8007c7c <HAL_SPI_MspInit+0x1e4>)
 8007b72:	f000 fff7 	bl	8008b64 <HAL_GPIO_Init>
}
 8007b76:	e075      	b.n	8007c64 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a40      	ldr	r2, [pc, #256]	@ (8007c80 <HAL_SPI_MspInit+0x1e8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d12d      	bne.n	8007bde <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007b82:	2300      	movs	r3, #0
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	4b3a      	ldr	r3, [pc, #232]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8a:	4a39      	ldr	r2, [pc, #228]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b92:	4b37      	ldr	r3, [pc, #220]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b9a:	61bb      	str	r3, [r7, #24]
 8007b9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	4b33      	ldr	r3, [pc, #204]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba6:	4a32      	ldr	r2, [pc, #200]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007ba8:	f043 0304 	orr.w	r3, r3, #4
 8007bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bae:	4b30      	ldr	r3, [pc, #192]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007bba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007bcc:	2306      	movs	r3, #6
 8007bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	482b      	ldr	r0, [pc, #172]	@ (8007c84 <HAL_SPI_MspInit+0x1ec>)
 8007bd8:	f000 ffc4 	bl	8008b64 <HAL_GPIO_Init>
}
 8007bdc:	e042      	b.n	8007c64 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a29      	ldr	r2, [pc, #164]	@ (8007c88 <HAL_SPI_MspInit+0x1f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d13d      	bne.n	8007c64 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	4b20      	ldr	r3, [pc, #128]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007bf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	4b19      	ldr	r3, [pc, #100]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007c0e:	f043 0310 	orr.w	r3, r3, #16
 8007c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c14:	4b16      	ldr	r3, [pc, #88]	@ (8007c70 <HAL_SPI_MspInit+0x1d8>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007c20:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c26:	2302      	movs	r3, #2
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007c32:	2305      	movs	r3, #5
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4813      	ldr	r0, [pc, #76]	@ (8007c8c <HAL_SPI_MspInit+0x1f4>)
 8007c3e:	f000 ff91 	bl	8008b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c50:	2303      	movs	r3, #3
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007c54:	2305      	movs	r3, #5
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	480b      	ldr	r0, [pc, #44]	@ (8007c8c <HAL_SPI_MspInit+0x1f4>)
 8007c60:	f000 ff80 	bl	8008b64 <HAL_GPIO_Init>
}
 8007c64:	bf00      	nop
 8007c66:	3740      	adds	r7, #64	@ 0x40
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40013000 	.word	0x40013000
 8007c70:	40023800 	.word	0x40023800
 8007c74:	40020000 	.word	0x40020000
 8007c78:	40003800 	.word	0x40003800
 8007c7c:	40022000 	.word	0x40022000
 8007c80:	40003c00 	.word	0x40003c00
 8007c84:	40020800 	.word	0x40020800
 8007c88:	40013400 	.word	0x40013400
 8007c8c:	40021000 	.word	0x40021000

08007c90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b090      	sub	sp, #64	@ 0x40
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a74      	ldr	r2, [pc, #464]	@ (8007e80 <HAL_UART_MspInit+0x1f0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d134      	bne.n	8007d1c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb6:	4b73      	ldr	r3, [pc, #460]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cba:	4a72      	ldr	r2, [pc, #456]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007cbc:	f043 0310 	orr.w	r3, r3, #16
 8007cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cc2:	4b70      	ldr	r3, [pc, #448]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cde:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007cea:	23c0      	movs	r3, #192	@ 0xc0
 8007cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cfa:	2307      	movs	r3, #7
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d02:	4619      	mov	r1, r3
 8007d04:	4860      	ldr	r0, [pc, #384]	@ (8007e88 <HAL_UART_MspInit+0x1f8>)
 8007d06:	f000 ff2d 	bl	8008b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	2025      	movs	r0, #37	@ 0x25
 8007d10:	f000 fe5f 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d14:	2025      	movs	r0, #37	@ 0x25
 8007d16:	f000 fe78 	bl	8008a0a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8007d1a:	e0ad      	b.n	8007e78 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a5a      	ldr	r2, [pc, #360]	@ (8007e8c <HAL_UART_MspInit+0x1fc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d134      	bne.n	8007d90 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	623b      	str	r3, [r7, #32]
 8007d2a:	4b56      	ldr	r3, [pc, #344]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	4a55      	ldr	r2, [pc, #340]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d36:	4b53      	ldr	r3, [pc, #332]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3e:	623b      	str	r3, [r7, #32]
 8007d40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	4b4f      	ldr	r3, [pc, #316]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d52:	4b4c      	ldr	r3, [pc, #304]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007d5e:	230c      	movs	r3, #12
 8007d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d62:	2302      	movs	r3, #2
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d6e:	2307      	movs	r3, #7
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d76:	4619      	mov	r1, r3
 8007d78:	4845      	ldr	r0, [pc, #276]	@ (8007e90 <HAL_UART_MspInit+0x200>)
 8007d7a:	f000 fef3 	bl	8008b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	2026      	movs	r0, #38	@ 0x26
 8007d84:	f000 fe25 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007d88:	2026      	movs	r0, #38	@ 0x26
 8007d8a:	f000 fe3e 	bl	8008a0a <HAL_NVIC_EnableIRQ>
}
 8007d8e:	e073      	b.n	8007e78 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a3f      	ldr	r2, [pc, #252]	@ (8007e94 <HAL_UART_MspInit+0x204>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d135      	bne.n	8007e06 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	4b39      	ldr	r3, [pc, #228]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	4a38      	ldr	r2, [pc, #224]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007daa:	4b36      	ldr	r3, [pc, #216]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	4b32      	ldr	r3, [pc, #200]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbe:	4a31      	ldr	r2, [pc, #196]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007dd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007de0:	2303      	movs	r3, #3
 8007de2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007de4:	2307      	movs	r3, #7
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007dec:	4619      	mov	r1, r3
 8007dee:	482a      	ldr	r0, [pc, #168]	@ (8007e98 <HAL_UART_MspInit+0x208>)
 8007df0:	f000 feb8 	bl	8008b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	2027      	movs	r0, #39	@ 0x27
 8007dfa:	f000 fdea 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007dfe:	2027      	movs	r0, #39	@ 0x27
 8007e00:	f000 fe03 	bl	8008a0a <HAL_NVIC_EnableIRQ>
}
 8007e04:	e038      	b.n	8007e78 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a24      	ldr	r2, [pc, #144]	@ (8007e9c <HAL_UART_MspInit+0x20c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d133      	bne.n	8007e78 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	4b1b      	ldr	r3, [pc, #108]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e18:	4a1a      	ldr	r2, [pc, #104]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e1a:	f043 0320 	orr.w	r3, r3, #32
 8007e1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e20:	4b18      	ldr	r3, [pc, #96]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e34:	4a13      	ldr	r2, [pc, #76]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e36:	f043 0304 	orr.w	r3, r3, #4
 8007e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e3c:	4b11      	ldr	r3, [pc, #68]	@ (8007e84 <HAL_UART_MspInit+0x1f4>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e48:	23c0      	movs	r3, #192	@ 0xc0
 8007e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e54:	2303      	movs	r3, #3
 8007e56:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e58:	2308      	movs	r3, #8
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e60:	4619      	mov	r1, r3
 8007e62:	480f      	ldr	r0, [pc, #60]	@ (8007ea0 <HAL_UART_MspInit+0x210>)
 8007e64:	f000 fe7e 	bl	8008b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	2047      	movs	r0, #71	@ 0x47
 8007e6e:	f000 fdb0 	bl	80089d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007e72:	2047      	movs	r0, #71	@ 0x47
 8007e74:	f000 fdc9 	bl	8008a0a <HAL_NVIC_EnableIRQ>
}
 8007e78:	bf00      	nop
 8007e7a:	3740      	adds	r7, #64	@ 0x40
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	40011000 	.word	0x40011000
 8007e84:	40023800 	.word	0x40023800
 8007e88:	40020400 	.word	0x40020400
 8007e8c:	40004400 	.word	0x40004400
 8007e90:	40020000 	.word	0x40020000
 8007e94:	40004800 	.word	0x40004800
 8007e98:	40020c00 	.word	0x40020c00
 8007e9c:	40011400 	.word	0x40011400
 8007ea0:	40020800 	.word	0x40020800

08007ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <NMI_Handler+0x4>

08007eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <HardFault_Handler+0x4>

08007eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <MemManage_Handler+0x4>

08007ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <BusFault_Handler+0x4>

08007ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <UsageFault_Handler+0x4>

08007ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ed0:	bf00      	nop
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007eda:	b480      	push	{r7}
 8007edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ede:	bf00      	nop
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007eec:	bf00      	nop
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007efa:	f000 f917 	bl	800812c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f08:	4802      	ldr	r0, [pc, #8]	@ (8007f14 <CAN1_RX0_IRQHandler+0x10>)
 8007f0a:	f000 fa4e 	bl	80083aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007f0e:	bf00      	nop
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20001784 	.word	0x20001784

08007f18 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f1c:	4802      	ldr	r0, [pc, #8]	@ (8007f28 <CAN1_RX1_IRQHandler+0x10>)
 8007f1e:	f000 fa44 	bl	80083aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20001784 	.word	0x20001784

08007f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007f30:	4802      	ldr	r0, [pc, #8]	@ (8007f3c <USART1_IRQHandler+0x10>)
 8007f32:	f003 fc11 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20001a30 	.word	0x20001a30

08007f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007f44:	4802      	ldr	r0, [pc, #8]	@ (8007f50 <USART2_IRQHandler+0x10>)
 8007f46:	f003 fc07 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20001a78 	.word	0x20001a78

08007f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007f58:	4802      	ldr	r0, [pc, #8]	@ (8007f64 <USART3_IRQHandler+0x10>)
 8007f5a:	f003 fbfd 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007f5e:	bf00      	nop
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001ac0 	.word	0x20001ac0

08007f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8007f6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007f70:	f000 ffd8 	bl	8008f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 8007f74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007f78:	f000 ffd4 	bl	8008f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8007f7c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007f80:	f000 ffd0 	bl	8008f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 8007f84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007f88:	f000 ffcc 	bl	8008f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f8c:	bf00      	nop
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007f94:	4802      	ldr	r0, [pc, #8]	@ (8007fa0 <USART6_IRQHandler+0x10>)
 8007f96:	f003 fbdf 	bl	800b758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007f9a:	bf00      	nop
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001b08 	.word	0x20001b08

08007fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fac:	4a14      	ldr	r2, [pc, #80]	@ (8008000 <_sbrk+0x5c>)
 8007fae:	4b15      	ldr	r3, [pc, #84]	@ (8008004 <_sbrk+0x60>)
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fb8:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <_sbrk+0x64>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007fc0:	4b11      	ldr	r3, [pc, #68]	@ (8008008 <_sbrk+0x64>)
 8007fc2:	4a12      	ldr	r2, [pc, #72]	@ (800800c <_sbrk+0x68>)
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <_sbrk+0x64>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d207      	bcs.n	8007fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fd4:	f004 fcc6 	bl	800c964 <__errno>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	220c      	movs	r2, #12
 8007fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	e009      	b.n	8007ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fe4:	4b08      	ldr	r3, [pc, #32]	@ (8008008 <_sbrk+0x64>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fea:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <_sbrk+0x64>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4a05      	ldr	r2, [pc, #20]	@ (8008008 <_sbrk+0x64>)
 8007ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20030000 	.word	0x20030000
 8008004:	00000400 	.word	0x00000400
 8008008:	20001b54 	.word	0x20001b54
 800800c:	20001cb8 	.word	0x20001cb8

08008010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008014:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <SystemInit+0x20>)
 8008016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800801a:	4a05      	ldr	r2, [pc, #20]	@ (8008030 <SystemInit+0x20>)
 800801c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800806c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008038:	f7ff ffea 	bl	8008010 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800803c:	480c      	ldr	r0, [pc, #48]	@ (8008070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800803e:	490d      	ldr	r1, [pc, #52]	@ (8008074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008040:	4a0d      	ldr	r2, [pc, #52]	@ (8008078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008044:	e002      	b.n	800804c <LoopCopyDataInit>

08008046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800804a:	3304      	adds	r3, #4

0800804c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800804c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800804e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008050:	d3f9      	bcc.n	8008046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008052:	4a0a      	ldr	r2, [pc, #40]	@ (800807c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008054:	4c0a      	ldr	r4, [pc, #40]	@ (8008080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008058:	e001      	b.n	800805e <LoopFillZerobss>

0800805a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800805a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800805c:	3204      	adds	r2, #4

0800805e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800805e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008060:	d3fb      	bcc.n	800805a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008062:	f004 fc85 	bl	800c970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008066:	f7fe fca3 	bl	80069b0 <main>
  bx  lr    
 800806a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800806c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008074:	20000984 	.word	0x20000984
  ldr r2, =_sidata
 8008078:	0800dfac 	.word	0x0800dfac
  ldr r2, =_sbss
 800807c:	20000984 	.word	0x20000984
  ldr r4, =_ebss
 8008080:	20001cb8 	.word	0x20001cb8

08008084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008084:	e7fe      	b.n	8008084 <ADC_IRQHandler>
	...

08008088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800808c:	4b0e      	ldr	r3, [pc, #56]	@ (80080c8 <HAL_Init+0x40>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0d      	ldr	r2, [pc, #52]	@ (80080c8 <HAL_Init+0x40>)
 8008092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008098:	4b0b      	ldr	r3, [pc, #44]	@ (80080c8 <HAL_Init+0x40>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <HAL_Init+0x40>)
 800809e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080a4:	4b08      	ldr	r3, [pc, #32]	@ (80080c8 <HAL_Init+0x40>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a07      	ldr	r2, [pc, #28]	@ (80080c8 <HAL_Init+0x40>)
 80080aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080b0:	2003      	movs	r0, #3
 80080b2:	f000 fc83 	bl	80089bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80080b6:	200f      	movs	r0, #15
 80080b8:	f000 f808 	bl	80080cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80080bc:	f7ff fb60 	bl	8007780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40023c00 	.word	0x40023c00

080080cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80080d4:	4b12      	ldr	r3, [pc, #72]	@ (8008120 <HAL_InitTick+0x54>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4b12      	ldr	r3, [pc, #72]	@ (8008124 <HAL_InitTick+0x58>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	4619      	mov	r1, r3
 80080de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80080e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fc9b 	bl	8008a26 <HAL_SYSTICK_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e00e      	b.n	8008118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b0f      	cmp	r3, #15
 80080fe:	d80a      	bhi.n	8008116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008100:	2200      	movs	r2, #0
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	f000 fc63 	bl	80089d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800810c:	4a06      	ldr	r2, [pc, #24]	@ (8008128 <HAL_InitTick+0x5c>)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	e000      	b.n	8008118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000914 	.word	0x20000914
 8008124:	2000091c 	.word	0x2000091c
 8008128:	20000918 	.word	0x20000918

0800812c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008130:	4b06      	ldr	r3, [pc, #24]	@ (800814c <HAL_IncTick+0x20>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <HAL_IncTick+0x24>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4413      	add	r3, r2
 800813c:	4a04      	ldr	r2, [pc, #16]	@ (8008150 <HAL_IncTick+0x24>)
 800813e:	6013      	str	r3, [r2, #0]
}
 8008140:	bf00      	nop
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	2000091c 	.word	0x2000091c
 8008150:	20001b58 	.word	0x20001b58

08008154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  return uwTick;
 8008158:	4b03      	ldr	r3, [pc, #12]	@ (8008168 <HAL_GetTick+0x14>)
 800815a:	681b      	ldr	r3, [r3, #0]
}
 800815c:	4618      	mov	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20001b58 	.word	0x20001b58

0800816c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008174:	f7ff ffee 	bl	8008154 <HAL_GetTick>
 8008178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008184:	d005      	beq.n	8008192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008186:	4b0a      	ldr	r3, [pc, #40]	@ (80081b0 <HAL_Delay+0x44>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008192:	bf00      	nop
 8008194:	f7ff ffde 	bl	8008154 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d8f7      	bhi.n	8008194 <HAL_Delay+0x28>
  {
  }
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	2000091c 	.word	0x2000091c

080081b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0ed      	b.n	80083a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fafc 	bl	80077d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081e8:	f7ff ffb4 	bl	8008154 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80081ee:	e012      	b.n	8008216 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80081f0:	f7ff ffb0 	bl	8008154 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b0a      	cmp	r3, #10
 80081fc:	d90b      	bls.n	8008216 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2205      	movs	r2, #5
 800820e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e0c5      	b.n	80083a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0e5      	beq.n	80081f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0202 	bic.w	r2, r2, #2
 8008232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008234:	f7ff ff8e 	bl	8008154 <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800823a:	e012      	b.n	8008262 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800823c:	f7ff ff8a 	bl	8008154 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b0a      	cmp	r3, #10
 8008248:	d90b      	bls.n	8008262 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2205      	movs	r2, #5
 800825a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e09f      	b.n	80083a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e5      	bne.n	800823c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7e1b      	ldrb	r3, [r3, #24]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d108      	bne.n	800828a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e007      	b.n	800829a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7e5b      	ldrb	r3, [r3, #25]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d108      	bne.n	80082b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e007      	b.n	80082c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	7e9b      	ldrb	r3, [r3, #26]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d108      	bne.n	80082de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0220 	orr.w	r2, r2, #32
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	e007      	b.n	80082ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0220 	bic.w	r2, r2, #32
 80082ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7edb      	ldrb	r3, [r3, #27]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d108      	bne.n	8008308 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0210 	bic.w	r2, r2, #16
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e007      	b.n	8008318 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0210 	orr.w	r2, r2, #16
 8008316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7f1b      	ldrb	r3, [r3, #28]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d108      	bne.n	8008332 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0208 	orr.w	r2, r2, #8
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	e007      	b.n	8008342 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0208 	bic.w	r2, r2, #8
 8008340:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	7f5b      	ldrb	r3, [r3, #29]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d108      	bne.n	800835c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0204 	orr.w	r2, r2, #4
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e007      	b.n	800836c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0204 	bic.w	r2, r2, #4
 800836a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	ea42 0103 	orr.w	r1, r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	1e5a      	subs	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b08a      	sub	sp, #40	@ 0x28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d07c      	beq.n	80084ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d023      	beq.n	8008442 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2201      	movs	r2, #1
 8008400:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f983 	bl	8008718 <HAL_CAN_TxMailbox0CompleteCallback>
 8008412:	e016      	b.n	8008442 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
 8008426:	e00c      	b.n	8008442 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0308 	and.w	r3, r3, #8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
 800843a:	e002      	b.n	8008442 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f989 	bl	8008754 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008448:	2b00      	cmp	r3, #0
 800844a:	d024      	beq.n	8008496 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008454:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f963 	bl	800872c <HAL_CAN_TxMailbox1CompleteCallback>
 8008466:	e016      	b.n	8008496 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008474:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
 800847a:	e00c      	b.n	8008496 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
 800848e:	e002      	b.n	8008496 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f969 	bl	8008768 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d024      	beq.n	80084ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80084a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f943 	bl	8008740 <HAL_CAN_TxMailbox2CompleteCallback>
 80084ba:	e016      	b.n	80084ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ce:	e00c      	b.n	80084ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e2:	e002      	b.n	80084ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f949 	bl	800877c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008504:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2210      	movs	r2, #16
 800850c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f003 0308 	and.w	r3, r3, #8
 800851e:	2b00      	cmp	r3, #0
 8008520:	d006      	beq.n	8008530 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2208      	movs	r2, #8
 8008528:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f93a 	bl	80087a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f921 	bl	8008790 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00c      	beq.n	8008572 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f003 0310 	and.w	r3, r3, #16
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008564:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008568:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2210      	movs	r2, #16
 8008570:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d006      	beq.n	8008594 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2208      	movs	r2, #8
 800858c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f91c 	bl	80087cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d009      	beq.n	80085b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f903 	bl	80087b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d006      	beq.n	80085d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2210      	movs	r2, #16
 80085cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f906 	bl	80087e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2208      	movs	r2, #8
 80085ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8ff 	bl	80087f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d07b      	beq.n	80086f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d072      	beq.n	80086f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	f043 0304 	orr.w	r3, r3, #4
 800865c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008664:	2b00      	cmp	r3, #0
 8008666:	d043      	beq.n	80086f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800866e:	2b00      	cmp	r3, #0
 8008670:	d03e      	beq.n	80086f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008678:	2b60      	cmp	r3, #96	@ 0x60
 800867a:	d02b      	beq.n	80086d4 <HAL_CAN_IRQHandler+0x32a>
 800867c:	2b60      	cmp	r3, #96	@ 0x60
 800867e:	d82e      	bhi.n	80086de <HAL_CAN_IRQHandler+0x334>
 8008680:	2b50      	cmp	r3, #80	@ 0x50
 8008682:	d022      	beq.n	80086ca <HAL_CAN_IRQHandler+0x320>
 8008684:	2b50      	cmp	r3, #80	@ 0x50
 8008686:	d82a      	bhi.n	80086de <HAL_CAN_IRQHandler+0x334>
 8008688:	2b40      	cmp	r3, #64	@ 0x40
 800868a:	d019      	beq.n	80086c0 <HAL_CAN_IRQHandler+0x316>
 800868c:	2b40      	cmp	r3, #64	@ 0x40
 800868e:	d826      	bhi.n	80086de <HAL_CAN_IRQHandler+0x334>
 8008690:	2b30      	cmp	r3, #48	@ 0x30
 8008692:	d010      	beq.n	80086b6 <HAL_CAN_IRQHandler+0x30c>
 8008694:	2b30      	cmp	r3, #48	@ 0x30
 8008696:	d822      	bhi.n	80086de <HAL_CAN_IRQHandler+0x334>
 8008698:	2b10      	cmp	r3, #16
 800869a:	d002      	beq.n	80086a2 <HAL_CAN_IRQHandler+0x2f8>
 800869c:	2b20      	cmp	r3, #32
 800869e:	d005      	beq.n	80086ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80086a0:	e01d      	b.n	80086de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	f043 0308 	orr.w	r3, r3, #8
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086aa:	e019      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	f043 0310 	orr.w	r3, r3, #16
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086b4:	e014      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	f043 0320 	orr.w	r3, r3, #32
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086be:	e00f      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086c8:	e00a      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086d2:	e005      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086dc:	e000      	b.n	80086e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80086de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80086ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2204      	movs	r2, #4
 80086f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d008      	beq.n	8008710 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f87c 	bl	8008808 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008710:	bf00      	nop
 8008712:	3728      	adds	r7, #40	@ 0x28
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800882c:	4b0c      	ldr	r3, [pc, #48]	@ (8008860 <__NVIC_SetPriorityGrouping+0x44>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008838:	4013      	ands	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800884e:	4a04      	ldr	r2, [pc, #16]	@ (8008860 <__NVIC_SetPriorityGrouping+0x44>)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	60d3      	str	r3, [r2, #12]
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008868:	4b04      	ldr	r3, [pc, #16]	@ (800887c <__NVIC_GetPriorityGrouping+0x18>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	0a1b      	lsrs	r3, r3, #8
 800886e:	f003 0307 	and.w	r3, r3, #7
}
 8008872:	4618      	mov	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	e000ed00 	.word	0xe000ed00

08008880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800888a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800888e:	2b00      	cmp	r3, #0
 8008890:	db0b      	blt.n	80088aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f003 021f 	and.w	r2, r3, #31
 8008898:	4907      	ldr	r1, [pc, #28]	@ (80088b8 <__NVIC_EnableIRQ+0x38>)
 800889a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2001      	movs	r0, #1
 80088a2:	fa00 f202 	lsl.w	r2, r0, r2
 80088a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000e100 	.word	0xe000e100

080088bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	db0a      	blt.n	80088e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	490c      	ldr	r1, [pc, #48]	@ (8008908 <__NVIC_SetPriority+0x4c>)
 80088d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088da:	0112      	lsls	r2, r2, #4
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	440b      	add	r3, r1
 80088e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088e4:	e00a      	b.n	80088fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	4908      	ldr	r1, [pc, #32]	@ (800890c <__NVIC_SetPriority+0x50>)
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	3b04      	subs	r3, #4
 80088f4:	0112      	lsls	r2, r2, #4
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	440b      	add	r3, r1
 80088fa:	761a      	strb	r2, [r3, #24]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	e000e100 	.word	0xe000e100
 800890c:	e000ed00 	.word	0xe000ed00

08008910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008910:	b480      	push	{r7}
 8008912:	b089      	sub	sp, #36	@ 0x24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f1c3 0307 	rsb	r3, r3, #7
 800892a:	2b04      	cmp	r3, #4
 800892c:	bf28      	it	cs
 800892e:	2304      	movcs	r3, #4
 8008930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	3304      	adds	r3, #4
 8008936:	2b06      	cmp	r3, #6
 8008938:	d902      	bls.n	8008940 <NVIC_EncodePriority+0x30>
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	3b03      	subs	r3, #3
 800893e:	e000      	b.n	8008942 <NVIC_EncodePriority+0x32>
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	fa02 f303 	lsl.w	r3, r2, r3
 800894e:	43da      	mvns	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	401a      	ands	r2, r3
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008958:	f04f 31ff 	mov.w	r1, #4294967295
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	43d9      	mvns	r1, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008968:	4313      	orrs	r3, r2
         );
}
 800896a:	4618      	mov	r0, r3
 800896c:	3724      	adds	r7, #36	@ 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008988:	d301      	bcc.n	800898e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800898a:	2301      	movs	r3, #1
 800898c:	e00f      	b.n	80089ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800898e:	4a0a      	ldr	r2, [pc, #40]	@ (80089b8 <SysTick_Config+0x40>)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008996:	210f      	movs	r1, #15
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	f7ff ff8e 	bl	80088bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089a0:	4b05      	ldr	r3, [pc, #20]	@ (80089b8 <SysTick_Config+0x40>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089a6:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <SysTick_Config+0x40>)
 80089a8:	2207      	movs	r2, #7
 80089aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	e000e010 	.word	0xe000e010

080089bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff ff29 	bl	800881c <__NVIC_SetPriorityGrouping>
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	4603      	mov	r3, r0
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089e4:	f7ff ff3e 	bl	8008864 <__NVIC_GetPriorityGrouping>
 80089e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	6978      	ldr	r0, [r7, #20]
 80089f0:	f7ff ff8e 	bl	8008910 <NVIC_EncodePriority>
 80089f4:	4602      	mov	r2, r0
 80089f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff ff5d 	bl	80088bc <__NVIC_SetPriority>
}
 8008a02:	bf00      	nop
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	4603      	mov	r3, r0
 8008a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ff31 	bl	8008880 <__NVIC_EnableIRQ>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff ffa2 	bl	8008978 <SysTick_Config>
 8008a34:	4603      	mov	r3, r0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008a4c:	f7ff fb82 	bl	8008154 <HAL_GetTick>
 8008a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d008      	beq.n	8008a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2280      	movs	r2, #128	@ 0x80
 8008a62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e052      	b.n	8008b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0216 	bic.w	r2, r2, #22
 8008a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <HAL_DMA_Abort+0x62>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0208 	bic.w	r2, r2, #8
 8008aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ac0:	e013      	b.n	8008aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ac2:	f7ff fb47 	bl	8008154 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d90c      	bls.n	8008aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e015      	b.n	8008b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008afc:	223f      	movs	r2, #63	@ 0x3f
 8008afe:	409a      	lsls	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d004      	beq.n	8008b3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2280      	movs	r2, #128	@ 0x80
 8008b36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e00c      	b.n	8008b56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2205      	movs	r2, #5
 8008b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0201 	bic.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	@ 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e177      	b.n	8008e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b80:	2201      	movs	r2, #1
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4013      	ands	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	f040 8166 	bne.w	8008e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d005      	beq.n	8008bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d130      	bne.n	8008c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bec:	2201      	movs	r2, #1
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	f003 0201 	and.w	r2, r3, #1
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d017      	beq.n	8008c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	2203      	movs	r2, #3
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d123      	bne.n	8008ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	08da      	lsrs	r2, r3, #3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3208      	adds	r2, #8
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	220f      	movs	r2, #15
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4013      	ands	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	08da      	lsrs	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3208      	adds	r2, #8
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f003 0203 	and.w	r2, r3, #3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 80c0 	beq.w	8008e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	4b66      	ldr	r3, [pc, #408]	@ (8008e88 <HAL_GPIO_Init+0x324>)
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf2:	4a65      	ldr	r2, [pc, #404]	@ (8008e88 <HAL_GPIO_Init+0x324>)
 8008cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cfa:	4b63      	ldr	r3, [pc, #396]	@ (8008e88 <HAL_GPIO_Init+0x324>)
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d06:	4a61      	ldr	r2, [pc, #388]	@ (8008e8c <HAL_GPIO_Init+0x328>)
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	220f      	movs	r2, #15
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	43db      	mvns	r3, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4013      	ands	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a58      	ldr	r2, [pc, #352]	@ (8008e90 <HAL_GPIO_Init+0x32c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d037      	beq.n	8008da2 <HAL_GPIO_Init+0x23e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a57      	ldr	r2, [pc, #348]	@ (8008e94 <HAL_GPIO_Init+0x330>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d031      	beq.n	8008d9e <HAL_GPIO_Init+0x23a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a56      	ldr	r2, [pc, #344]	@ (8008e98 <HAL_GPIO_Init+0x334>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d02b      	beq.n	8008d9a <HAL_GPIO_Init+0x236>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a55      	ldr	r2, [pc, #340]	@ (8008e9c <HAL_GPIO_Init+0x338>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d025      	beq.n	8008d96 <HAL_GPIO_Init+0x232>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a54      	ldr	r2, [pc, #336]	@ (8008ea0 <HAL_GPIO_Init+0x33c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d01f      	beq.n	8008d92 <HAL_GPIO_Init+0x22e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a53      	ldr	r2, [pc, #332]	@ (8008ea4 <HAL_GPIO_Init+0x340>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d019      	beq.n	8008d8e <HAL_GPIO_Init+0x22a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a52      	ldr	r2, [pc, #328]	@ (8008ea8 <HAL_GPIO_Init+0x344>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_GPIO_Init+0x226>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a51      	ldr	r2, [pc, #324]	@ (8008eac <HAL_GPIO_Init+0x348>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00d      	beq.n	8008d86 <HAL_GPIO_Init+0x222>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a50      	ldr	r2, [pc, #320]	@ (8008eb0 <HAL_GPIO_Init+0x34c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <HAL_GPIO_Init+0x21e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a4f      	ldr	r2, [pc, #316]	@ (8008eb4 <HAL_GPIO_Init+0x350>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d101      	bne.n	8008d7e <HAL_GPIO_Init+0x21a>
 8008d7a:	2309      	movs	r3, #9
 8008d7c:	e012      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d7e:	230a      	movs	r3, #10
 8008d80:	e010      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d82:	2308      	movs	r3, #8
 8008d84:	e00e      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d86:	2307      	movs	r3, #7
 8008d88:	e00c      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	e00a      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8e:	2305      	movs	r3, #5
 8008d90:	e008      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d92:	2304      	movs	r3, #4
 8008d94:	e006      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d96:	2303      	movs	r3, #3
 8008d98:	e004      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e002      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008da2:	2300      	movs	r3, #0
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	f002 0203 	and.w	r2, r2, #3
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	4093      	lsls	r3, r2
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008db4:	4935      	ldr	r1, [pc, #212]	@ (8008e8c <HAL_GPIO_Init+0x328>)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	3302      	adds	r3, #2
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008de6:	4a34      	ldr	r2, [pc, #208]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008dec:	4b32      	ldr	r3, [pc, #200]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e10:	4a29      	ldr	r2, [pc, #164]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e16:	4b28      	ldr	r3, [pc, #160]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4013      	ands	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e40:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e64:	4a14      	ldr	r2, [pc, #80]	@ (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	f67f ae84 	bls.w	8008b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3724      	adds	r7, #36	@ 0x24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40020000 	.word	0x40020000
 8008e94:	40020400 	.word	0x40020400
 8008e98:	40020800 	.word	0x40020800
 8008e9c:	40020c00 	.word	0x40020c00
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40021400 	.word	0x40021400
 8008ea8:	40021800 	.word	0x40021800
 8008eac:	40021c00 	.word	0x40021c00
 8008eb0:	40022000 	.word	0x40022000
 8008eb4:	40022400 	.word	0x40022400
 8008eb8:	40013c00 	.word	0x40013c00

08008ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ecc:	787b      	ldrb	r3, [r7, #1]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ed2:	887a      	ldrh	r2, [r7, #2]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ed8:	e003      	b.n	8008ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	041a      	lsls	r2, r3, #16
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	619a      	str	r2, [r3, #24]
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f00:	887a      	ldrh	r2, [r7, #2]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4013      	ands	r3, r2
 8008f06:	041a      	lsls	r2, r3, #16
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	43d9      	mvns	r1, r3
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	400b      	ands	r3, r1
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	619a      	str	r2, [r3, #24]
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f2e:	4b08      	ldr	r3, [pc, #32]	@ (8008f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d006      	beq.n	8008f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f3a:	4a05      	ldr	r2, [pc, #20]	@ (8008f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f3c:	88fb      	ldrh	r3, [r7, #6]
 8008f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fc08 	bl	8007758 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40013c00 	.word	0x40013c00

08008f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e12b      	b.n	80091be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe fcd8 	bl	8007930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2224      	movs	r2, #36	@ 0x24
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fb8:	f001 fc9c 	bl	800a8f4 <HAL_RCC_GetPCLK1Freq>
 8008fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	4a81      	ldr	r2, [pc, #516]	@ (80091c8 <HAL_I2C_Init+0x274>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d807      	bhi.n	8008fd8 <HAL_I2C_Init+0x84>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4a80      	ldr	r2, [pc, #512]	@ (80091cc <HAL_I2C_Init+0x278>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bf94      	ite	ls
 8008fd0:	2301      	movls	r3, #1
 8008fd2:	2300      	movhi	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	e006      	b.n	8008fe6 <HAL_I2C_Init+0x92>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a7d      	ldr	r2, [pc, #500]	@ (80091d0 <HAL_I2C_Init+0x27c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	bf94      	ite	ls
 8008fe0:	2301      	movls	r3, #1
 8008fe2:	2300      	movhi	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e0e7      	b.n	80091be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a78      	ldr	r2, [pc, #480]	@ (80091d4 <HAL_I2C_Init+0x280>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	0c9b      	lsrs	r3, r3, #18
 8008ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	430a      	orrs	r2, r1
 800900c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4a6a      	ldr	r2, [pc, #424]	@ (80091c8 <HAL_I2C_Init+0x274>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d802      	bhi.n	8009028 <HAL_I2C_Init+0xd4>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	3301      	adds	r3, #1
 8009026:	e009      	b.n	800903c <HAL_I2C_Init+0xe8>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800902e:	fb02 f303 	mul.w	r3, r2, r3
 8009032:	4a69      	ldr	r2, [pc, #420]	@ (80091d8 <HAL_I2C_Init+0x284>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	099b      	lsrs	r3, r3, #6
 800903a:	3301      	adds	r3, #1
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6812      	ldr	r2, [r2, #0]
 8009040:	430b      	orrs	r3, r1
 8009042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800904e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	495c      	ldr	r1, [pc, #368]	@ (80091c8 <HAL_I2C_Init+0x274>)
 8009058:	428b      	cmp	r3, r1
 800905a:	d819      	bhi.n	8009090 <HAL_I2C_Init+0x13c>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	1e59      	subs	r1, r3, #1
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	fbb1 f3f3 	udiv	r3, r1, r3
 800906a:	1c59      	adds	r1, r3, #1
 800906c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009070:	400b      	ands	r3, r1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <HAL_I2C_Init+0x138>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1e59      	subs	r1, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	fbb1 f3f3 	udiv	r3, r1, r3
 8009084:	3301      	adds	r3, #1
 8009086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800908a:	e051      	b.n	8009130 <HAL_I2C_Init+0x1dc>
 800908c:	2304      	movs	r3, #4
 800908e:	e04f      	b.n	8009130 <HAL_I2C_Init+0x1dc>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d111      	bne.n	80090bc <HAL_I2C_Init+0x168>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	1e58      	subs	r0, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6859      	ldr	r1, [r3, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	440b      	add	r3, r1
 80090a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80090aa:	3301      	adds	r3, #1
 80090ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bf0c      	ite	eq
 80090b4:	2301      	moveq	r3, #1
 80090b6:	2300      	movne	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	e012      	b.n	80090e2 <HAL_I2C_Init+0x18e>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	1e58      	subs	r0, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6859      	ldr	r1, [r3, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	0099      	lsls	r1, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80090d2:	3301      	adds	r3, #1
 80090d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf0c      	ite	eq
 80090dc:	2301      	moveq	r3, #1
 80090de:	2300      	movne	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <HAL_I2C_Init+0x196>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e022      	b.n	8009130 <HAL_I2C_Init+0x1dc>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10e      	bne.n	8009110 <HAL_I2C_Init+0x1bc>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	1e58      	subs	r0, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6859      	ldr	r1, [r3, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	440b      	add	r3, r1
 8009100:	fbb0 f3f3 	udiv	r3, r0, r3
 8009104:	3301      	adds	r3, #1
 8009106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800910a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910e:	e00f      	b.n	8009130 <HAL_I2C_Init+0x1dc>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	1e58      	subs	r0, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6859      	ldr	r1, [r3, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	0099      	lsls	r1, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	fbb0 f3f3 	udiv	r3, r0, r3
 8009126:	3301      	adds	r3, #1
 8009128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800912c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	6809      	ldr	r1, [r1, #0]
 8009134:	4313      	orrs	r3, r2
 8009136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	69da      	ldr	r2, [r3, #28]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800915e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6911      	ldr	r1, [r2, #16]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68d2      	ldr	r2, [r2, #12]
 800916a:	4311      	orrs	r1, r2
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6812      	ldr	r2, [r2, #0]
 8009170:	430b      	orrs	r3, r1
 8009172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695a      	ldr	r2, [r3, #20]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0201 	orr.w	r2, r2, #1
 800919e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	000186a0 	.word	0x000186a0
 80091cc:	001e847f 	.word	0x001e847f
 80091d0:	003d08ff 	.word	0x003d08ff
 80091d4:	431bde83 	.word	0x431bde83
 80091d8:	10624dd3 	.word	0x10624dd3

080091dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	461a      	mov	r2, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	817b      	strh	r3, [r7, #10]
 80091ee:	460b      	mov	r3, r1
 80091f0:	813b      	strh	r3, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091f6:	f7fe ffad 	bl	8008154 <HAL_GetTick>
 80091fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b20      	cmp	r3, #32
 8009206:	f040 80d9 	bne.w	80093bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2319      	movs	r3, #25
 8009210:	2201      	movs	r2, #1
 8009212:	496d      	ldr	r1, [pc, #436]	@ (80093c8 <HAL_I2C_Mem_Write+0x1ec>)
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fc8b 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009220:	2302      	movs	r3, #2
 8009222:	e0cc      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_I2C_Mem_Write+0x56>
 800922e:	2302      	movs	r3, #2
 8009230:	e0c5      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b01      	cmp	r3, #1
 8009246:	d007      	beq.n	8009258 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2221      	movs	r2, #33	@ 0x21
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2240      	movs	r2, #64	@ 0x40
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a3a      	ldr	r2, [r7, #32]
 8009282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a4d      	ldr	r2, [pc, #308]	@ (80093cc <HAL_I2C_Mem_Write+0x1f0>)
 8009298:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800929a:	88f8      	ldrh	r0, [r7, #6]
 800929c:	893a      	ldrh	r2, [r7, #8]
 800929e:	8979      	ldrh	r1, [r7, #10]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4603      	mov	r3, r0
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fac2 	bl	8009834 <I2C_RequestMemoryWrite>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d052      	beq.n	800935c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e081      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fd50 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d107      	bne.n	80092e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e06b      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b04      	cmp	r3, #4
 8009322:	d11b      	bne.n	800935c <HAL_I2C_Mem_Write+0x180>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1aa      	bne.n	80092ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fd43 	bl	8009df4 <I2C_WaitOnBTFFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00d      	beq.n	8009390 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009378:	2b04      	cmp	r3, #4
 800937a:	d107      	bne.n	800938c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800938a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e016      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800939e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e000      	b.n	80093be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
  }
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	00100002 	.word	0x00100002
 80093cc:	ffff0000 	.word	0xffff0000

080093d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08c      	sub	sp, #48	@ 0x30
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	4608      	mov	r0, r1
 80093da:	4611      	mov	r1, r2
 80093dc:	461a      	mov	r2, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	817b      	strh	r3, [r7, #10]
 80093e2:	460b      	mov	r3, r1
 80093e4:	813b      	strh	r3, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093ea:	f7fe feb3 	bl	8008154 <HAL_GetTick>
 80093ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	f040 8214 	bne.w	8009826 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	2319      	movs	r3, #25
 8009404:	2201      	movs	r2, #1
 8009406:	497b      	ldr	r1, [pc, #492]	@ (80095f4 <HAL_I2C_Mem_Read+0x224>)
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fb91 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009414:	2302      	movs	r3, #2
 8009416:	e207      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_I2C_Mem_Read+0x56>
 8009422:	2302      	movs	r3, #2
 8009424:	e200      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b01      	cmp	r3, #1
 800943a:	d007      	beq.n	800944c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0201 	orr.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800945a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2222      	movs	r2, #34	@ 0x22
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2240      	movs	r2, #64	@ 0x40
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800947c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a5b      	ldr	r2, [pc, #364]	@ (80095f8 <HAL_I2C_Mem_Read+0x228>)
 800948c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800948e:	88f8      	ldrh	r0, [r7, #6]
 8009490:	893a      	ldrh	r2, [r7, #8]
 8009492:	8979      	ldrh	r1, [r7, #10]
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	4603      	mov	r3, r0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fa5e 	bl	8009960 <I2C_RequestMemoryRead>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e1bc      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d113      	bne.n	80094de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b6:	2300      	movs	r3, #0
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	623b      	str	r3, [r7, #32]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	623b      	str	r3, [r7, #32]
 80094ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e190      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d11b      	bne.n	800951e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	61fb      	str	r3, [r7, #28]
 800950a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e170      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009522:	2b02      	cmp	r3, #2
 8009524:	d11b      	bne.n	800955e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009534:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	e150      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009574:	e144      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957a:	2b03      	cmp	r3, #3
 800957c:	f200 80f1 	bhi.w	8009762 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009584:	2b01      	cmp	r3, #1
 8009586:	d123      	bne.n	80095d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800958a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fc79 	bl	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e145      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691a      	ldr	r2, [r3, #16]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095b8:	3b01      	subs	r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095ce:	e117      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d14e      	bne.n	8009676 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	2200      	movs	r2, #0
 80095e0:	4906      	ldr	r1, [pc, #24]	@ (80095fc <HAL_I2C_Mem_Read+0x22c>)
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 faa4 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d008      	beq.n	8009600 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e11a      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
 80095f2:	bf00      	nop
 80095f4:	00100002 	.word	0x00100002
 80095f8:	ffff0000 	.word	0xffff0000
 80095fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800960e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691a      	ldr	r2, [r3, #16]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009674:	e0c4      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	2200      	movs	r2, #0
 800967e:	496c      	ldr	r1, [pc, #432]	@ (8009830 <HAL_I2C_Mem_Read+0x460>)
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fa55 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e0cb      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800969e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691a      	ldr	r2, [r3, #16]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096bc:	3b01      	subs	r3, #1
 80096be:	b29a      	uxth	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2200      	movs	r2, #0
 80096da:	4955      	ldr	r1, [pc, #340]	@ (8009830 <HAL_I2C_Mem_Read+0x460>)
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fa27 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e09d      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691a      	ldr	r2, [r3, #16]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009760:	e04e      	b.n	8009800 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fb8c 	bl	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e058      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009780:	b2d2      	uxtb	r2, r2
 8009782:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d124      	bne.n	8009800 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d107      	bne.n	80097ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	f47f aeb6 	bne.w	8009576 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	e000      	b.n	8009828 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009826:	2302      	movs	r3, #2
  }
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	@ 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	00010004 	.word	0x00010004

08009834 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4603      	mov	r3, r0
 8009844:	817b      	strh	r3, [r7, #10]
 8009846:	460b      	mov	r3, r1
 8009848:	813b      	strh	r3, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800985c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	2200      	movs	r2, #0
 8009866:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f960 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009884:	d103      	bne.n	800988e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800988c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e05f      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009892:	897b      	ldrh	r3, [r7, #10]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	6a3a      	ldr	r2, [r7, #32]
 80098a6:	492d      	ldr	r1, [pc, #180]	@ (800995c <I2C_RequestMemoryWrite+0x128>)
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f9bb 	bl	8009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e04c      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098d0:	6a39      	ldr	r1, [r7, #32]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 fa46 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00d      	beq.n	80098fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d107      	bne.n	80098f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e02b      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d105      	bne.n	800990c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	611a      	str	r2, [r3, #16]
 800990a:	e021      	b.n	8009950 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800990c:	893b      	ldrh	r3, [r7, #8]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b29b      	uxth	r3, r3
 8009912:	b2da      	uxtb	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800991c:	6a39      	ldr	r1, [r7, #32]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 fa20 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	2b04      	cmp	r3, #4
 8009930:	d107      	bne.n	8009942 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e005      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009946:	893b      	ldrh	r3, [r7, #8]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	00010002 	.word	0x00010002

08009960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4603      	mov	r3, r0
 8009970:	817b      	strh	r3, [r7, #10]
 8009972:	460b      	mov	r3, r1
 8009974:	813b      	strh	r3, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009988:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f8c2 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c0:	d103      	bne.n	80099ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e0aa      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099ce:	897b      	ldrh	r3, [r7, #10]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80099dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	6a3a      	ldr	r2, [r7, #32]
 80099e2:	4952      	ldr	r1, [pc, #328]	@ (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f91d 	bl	8009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e097      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a0c:	6a39      	ldr	r1, [r7, #32]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f9a8 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e076      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a3c:	893b      	ldrh	r3, [r7, #8]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	611a      	str	r2, [r3, #16]
 8009a46:	e021      	b.n	8009a8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a48:	893b      	ldrh	r3, [r7, #8]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a58:	6a39      	ldr	r1, [r7, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f982 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d107      	bne.n	8009a7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e050      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a82:	893b      	ldrh	r3, [r7, #8]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a8e:	6a39      	ldr	r1, [r7, #32]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f967 	bl	8009d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00d      	beq.n	8009ab8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d107      	bne.n	8009ab4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ab2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e035      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f82b 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00d      	beq.n	8009afc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aee:	d103      	bne.n	8009af8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009af6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e013      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009afc:	897b      	ldrh	r3, [r7, #10]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	4906      	ldr	r1, [pc, #24]	@ (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f886 	bl	8009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	00010002 	.word	0x00010002

08009b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b40:	e048      	b.n	8009bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d044      	beq.n	8009bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b4a:	f7fe fb03 	bl	8008154 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d302      	bcc.n	8009b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d139      	bne.n	8009bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d10d      	bne.n	8009b86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	43da      	mvns	r2, r3
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4013      	ands	r3, r2
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bf0c      	ite	eq
 8009b7c:	2301      	moveq	r3, #1
 8009b7e:	2300      	movne	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	e00c      	b.n	8009ba0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	43da      	mvns	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	4013      	ands	r3, r2
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bf0c      	ite	eq
 8009b98:	2301      	moveq	r3, #1
 8009b9a:	2300      	movne	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d116      	bne.n	8009bd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc0:	f043 0220 	orr.w	r2, r3, #32
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e023      	b.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	0c1b      	lsrs	r3, r3, #16
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d10d      	bne.n	8009bfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	43da      	mvns	r2, r3
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4013      	ands	r3, r2
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bf0c      	ite	eq
 8009bf0:	2301      	moveq	r3, #1
 8009bf2:	2300      	movne	r3, #0
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	e00c      	b.n	8009c14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	43da      	mvns	r2, r3
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	4013      	ands	r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bf0c      	ite	eq
 8009c0c:	2301      	moveq	r3, #1
 8009c0e:	2300      	movne	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d093      	beq.n	8009b42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c32:	e071      	b.n	8009d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c42:	d123      	bne.n	8009c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c78:	f043 0204 	orr.w	r2, r3, #4
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e067      	b.n	8009d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d041      	beq.n	8009d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c94:	f7fe fa5e 	bl	8008154 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d302      	bcc.n	8009caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d136      	bne.n	8009d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d10c      	bne.n	8009cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	43da      	mvns	r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf14      	ite	ne
 8009cc6:	2301      	movne	r3, #1
 8009cc8:	2300      	moveq	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	e00b      	b.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	43da      	mvns	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bf14      	ite	ne
 8009ce0:	2301      	movne	r3, #1
 8009ce2:	2300      	moveq	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d016      	beq.n	8009d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d04:	f043 0220 	orr.w	r2, r3, #32
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e021      	b.n	8009d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	0c1b      	lsrs	r3, r3, #16
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10c      	bne.n	8009d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	43da      	mvns	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bf14      	ite	ne
 8009d34:	2301      	movne	r3, #1
 8009d36:	2300      	moveq	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	e00b      	b.n	8009d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	43da      	mvns	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4013      	ands	r3, r2
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bf14      	ite	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	2300      	moveq	r3, #0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f47f af6d 	bne.w	8009c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d70:	e034      	b.n	8009ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f8e3 	bl	8009f3e <I2C_IsAcknowledgeFailed>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e034      	b.n	8009dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d88:	d028      	beq.n	8009ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8a:	f7fe f9e3 	bl	8008154 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d302      	bcc.n	8009da0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d11d      	bne.n	8009ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009daa:	2b80      	cmp	r3, #128	@ 0x80
 8009dac:	d016      	beq.n	8009ddc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc8:	f043 0220 	orr.w	r2, r3, #32
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e007      	b.n	8009dec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de6:	2b80      	cmp	r3, #128	@ 0x80
 8009de8:	d1c3      	bne.n	8009d72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e00:	e034      	b.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f89b 	bl	8009f3e <I2C_IsAcknowledgeFailed>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e034      	b.n	8009e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d028      	beq.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e1a:	f7fe f99b 	bl	8008154 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d302      	bcc.n	8009e30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d11d      	bne.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d016      	beq.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e58:	f043 0220 	orr.w	r2, r3, #32
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e007      	b.n	8009e7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d1c3      	bne.n	8009e02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e90:	e049      	b.n	8009f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d119      	bne.n	8009ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0210 	mvn.w	r2, #16
 8009ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e030      	b.n	8009f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed4:	f7fe f93e 	bl	8008154 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11d      	bne.n	8009f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef4:	2b40      	cmp	r3, #64	@ 0x40
 8009ef6:	d016      	beq.n	8009f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f12:	f043 0220 	orr.w	r2, r3, #32
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e007      	b.n	8009f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b40      	cmp	r3, #64	@ 0x40
 8009f32:	d1ae      	bne.n	8009e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f54:	d11b      	bne.n	8009f8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	f043 0204 	orr.w	r2, r3, #4
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	d129      	bne.n	800a006 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	@ 0x24
 8009fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0210 	bic.w	r2, r2, #16
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0201 	orr.w	r2, r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	e000      	b.n	800a008 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a006:	2302      	movs	r3, #2
  }
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d12a      	bne.n	800a084 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	@ 0x24
 800a032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a04e:	89fb      	ldrh	r3, [r7, #14]
 800a050:	f023 030f 	bic.w	r3, r3, #15
 800a054:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	89fb      	ldrh	r3, [r7, #14]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	89fa      	ldrh	r2, [r7, #14]
 800a066:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f042 0201 	orr.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e267      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d075      	beq.n	800a19e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0b2:	4b88      	ldr	r3, [pc, #544]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f003 030c 	and.w	r3, r3, #12
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d00c      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0be:	4b85      	ldr	r3, [pc, #532]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d112      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0ca:	4b82      	ldr	r3, [pc, #520]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0d6:	d10b      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0d8:	4b7e      	ldr	r3, [pc, #504]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d05b      	beq.n	800a19c <HAL_RCC_OscConfig+0x108>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d157      	bne.n	800a19c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e242      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0f8:	d106      	bne.n	800a108 <HAL_RCC_OscConfig+0x74>
 800a0fa:	4b76      	ldr	r3, [pc, #472]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a75      	ldr	r2, [pc, #468]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	e01d      	b.n	800a144 <HAL_RCC_OscConfig+0xb0>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0x98>
 800a112:	4b70      	ldr	r3, [pc, #448]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a6f      	ldr	r2, [pc, #444]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4b6d      	ldr	r3, [pc, #436]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a6c      	ldr	r2, [pc, #432]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e00b      	b.n	800a144 <HAL_RCC_OscConfig+0xb0>
 800a12c:	4b69      	ldr	r3, [pc, #420]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a68      	ldr	r2, [pc, #416]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	4b66      	ldr	r3, [pc, #408]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a65      	ldr	r2, [pc, #404]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a13e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d013      	beq.n	800a174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a14c:	f7fe f802 	bl	8008154 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a154:	f7fd fffe 	bl	8008154 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b64      	cmp	r3, #100	@ 0x64
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e207      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a166:	4b5b      	ldr	r3, [pc, #364]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f0      	beq.n	800a154 <HAL_RCC_OscConfig+0xc0>
 800a172:	e014      	b.n	800a19e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a174:	f7fd ffee 	bl	8008154 <HAL_GetTick>
 800a178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a17c:	f7fd ffea 	bl	8008154 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b64      	cmp	r3, #100	@ 0x64
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e1f3      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a18e:	4b51      	ldr	r3, [pc, #324]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1f0      	bne.n	800a17c <HAL_RCC_OscConfig+0xe8>
 800a19a:	e000      	b.n	800a19e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a19c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d063      	beq.n	800a272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1aa:	4b4a      	ldr	r3, [pc, #296]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 030c 	and.w	r3, r3, #12
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1b6:	4b47      	ldr	r3, [pc, #284]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1be:	2b08      	cmp	r3, #8
 800a1c0:	d11c      	bne.n	800a1fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1c2:	4b44      	ldr	r3, [pc, #272]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d116      	bne.n	800a1fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1ce:	4b41      	ldr	r3, [pc, #260]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x152>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d001      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e1c7      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1e6:	4b3b      	ldr	r3, [pc, #236]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	4937      	ldr	r1, [pc, #220]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1fa:	e03a      	b.n	800a272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d020      	beq.n	800a246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a204:	4b34      	ldr	r3, [pc, #208]	@ (800a2d8 <HAL_RCC_OscConfig+0x244>)
 800a206:	2201      	movs	r2, #1
 800a208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a20a:	f7fd ffa3 	bl	8008154 <HAL_GetTick>
 800a20e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a210:	e008      	b.n	800a224 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a212:	f7fd ff9f 	bl	8008154 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d901      	bls.n	800a224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e1a8      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a224:	4b2b      	ldr	r3, [pc, #172]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0f0      	beq.n	800a212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a230:	4b28      	ldr	r3, [pc, #160]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	4925      	ldr	r1, [pc, #148]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a240:	4313      	orrs	r3, r2
 800a242:	600b      	str	r3, [r1, #0]
 800a244:	e015      	b.n	800a272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a246:	4b24      	ldr	r3, [pc, #144]	@ (800a2d8 <HAL_RCC_OscConfig+0x244>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24c:	f7fd ff82 	bl	8008154 <HAL_GetTick>
 800a250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a254:	f7fd ff7e 	bl	8008154 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e187      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a266:	4b1b      	ldr	r3, [pc, #108]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d036      	beq.n	800a2ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d016      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a286:	4b15      	ldr	r3, [pc, #84]	@ (800a2dc <HAL_RCC_OscConfig+0x248>)
 800a288:	2201      	movs	r2, #1
 800a28a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a28c:	f7fd ff62 	bl	8008154 <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a294:	f7fd ff5e 	bl	8008154 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e167      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <HAL_RCC_OscConfig+0x240>)
 800a2a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0f0      	beq.n	800a294 <HAL_RCC_OscConfig+0x200>
 800a2b2:	e01b      	b.n	800a2ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2b4:	4b09      	ldr	r3, [pc, #36]	@ (800a2dc <HAL_RCC_OscConfig+0x248>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2ba:	f7fd ff4b 	bl	8008154 <HAL_GetTick>
 800a2be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2c0:	e00e      	b.n	800a2e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2c2:	f7fd ff47 	bl	8008154 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d907      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e150      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
 800a2d4:	40023800 	.word	0x40023800
 800a2d8:	42470000 	.word	0x42470000
 800a2dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2e0:	4b88      	ldr	r3, [pc, #544]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a2e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1ea      	bne.n	800a2c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8097 	beq.w	800a428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2fe:	4b81      	ldr	r3, [pc, #516]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10f      	bne.n	800a32a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a30a:	2300      	movs	r3, #0
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	4b7d      	ldr	r3, [pc, #500]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	4a7c      	ldr	r2, [pc, #496]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a318:	6413      	str	r3, [r2, #64]	@ 0x40
 800a31a:	4b7a      	ldr	r3, [pc, #488]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a322:	60bb      	str	r3, [r7, #8]
 800a324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a32a:	4b77      	ldr	r3, [pc, #476]	@ (800a508 <HAL_RCC_OscConfig+0x474>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a332:	2b00      	cmp	r3, #0
 800a334:	d118      	bne.n	800a368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a336:	4b74      	ldr	r3, [pc, #464]	@ (800a508 <HAL_RCC_OscConfig+0x474>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a73      	ldr	r2, [pc, #460]	@ (800a508 <HAL_RCC_OscConfig+0x474>)
 800a33c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a342:	f7fd ff07 	bl	8008154 <HAL_GetTick>
 800a346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a348:	e008      	b.n	800a35c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a34a:	f7fd ff03 	bl	8008154 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b02      	cmp	r3, #2
 800a356:	d901      	bls.n	800a35c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e10c      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a35c:	4b6a      	ldr	r3, [pc, #424]	@ (800a508 <HAL_RCC_OscConfig+0x474>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0f0      	beq.n	800a34a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d106      	bne.n	800a37e <HAL_RCC_OscConfig+0x2ea>
 800a370:	4b64      	ldr	r3, [pc, #400]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a374:	4a63      	ldr	r2, [pc, #396]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a37c:	e01c      	b.n	800a3b8 <HAL_RCC_OscConfig+0x324>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	2b05      	cmp	r3, #5
 800a384:	d10c      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x30c>
 800a386:	4b5f      	ldr	r3, [pc, #380]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a38a:	4a5e      	ldr	r2, [pc, #376]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a38c:	f043 0304 	orr.w	r3, r3, #4
 800a390:	6713      	str	r3, [r2, #112]	@ 0x70
 800a392:	4b5c      	ldr	r3, [pc, #368]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a396:	4a5b      	ldr	r2, [pc, #364]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a39e:	e00b      	b.n	800a3b8 <HAL_RCC_OscConfig+0x324>
 800a3a0:	4b58      	ldr	r3, [pc, #352]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a4:	4a57      	ldr	r2, [pc, #348]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ac:	4b55      	ldr	r3, [pc, #340]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a3ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b0:	4a54      	ldr	r2, [pc, #336]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a3b2:	f023 0304 	bic.w	r3, r3, #4
 800a3b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d015      	beq.n	800a3ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c0:	f7fd fec8 	bl	8008154 <HAL_GetTick>
 800a3c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3c6:	e00a      	b.n	800a3de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3c8:	f7fd fec4 	bl	8008154 <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e0cb      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3de:	4b49      	ldr	r3, [pc, #292]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0ee      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x334>
 800a3ea:	e014      	b.n	800a416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3ec:	f7fd feb2 	bl	8008154 <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3f2:	e00a      	b.n	800a40a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f4:	f7fd feae 	bl	8008154 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a402:	4293      	cmp	r3, r2
 800a404:	d901      	bls.n	800a40a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e0b5      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a40a:	4b3e      	ldr	r3, [pc, #248]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40e:	f003 0302 	and.w	r3, r3, #2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1ee      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d105      	bne.n	800a428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a41c:	4b39      	ldr	r3, [pc, #228]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a420:	4a38      	ldr	r2, [pc, #224]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a426:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 80a1 	beq.w	800a574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a432:	4b34      	ldr	r3, [pc, #208]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 030c 	and.w	r3, r3, #12
 800a43a:	2b08      	cmp	r3, #8
 800a43c:	d05c      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d141      	bne.n	800a4ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a446:	4b31      	ldr	r3, [pc, #196]	@ (800a50c <HAL_RCC_OscConfig+0x478>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a44c:	f7fd fe82 	bl	8008154 <HAL_GetTick>
 800a450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a452:	e008      	b.n	800a466 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a454:	f7fd fe7e 	bl	8008154 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d901      	bls.n	800a466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e087      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a466:	4b27      	ldr	r3, [pc, #156]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f0      	bne.n	800a454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69da      	ldr	r2, [r3, #28]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	019b      	lsls	r3, r3, #6
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	3b01      	subs	r3, #1
 800a48c:	041b      	lsls	r3, r3, #16
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	061b      	lsls	r3, r3, #24
 800a496:	491b      	ldr	r1, [pc, #108]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a49c:	4b1b      	ldr	r3, [pc, #108]	@ (800a50c <HAL_RCC_OscConfig+0x478>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a2:	f7fd fe57 	bl	8008154 <HAL_GetTick>
 800a4a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4a8:	e008      	b.n	800a4bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4aa:	f7fd fe53 	bl	8008154 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e05c      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4bc:	4b11      	ldr	r3, [pc, #68]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d0f0      	beq.n	800a4aa <HAL_RCC_OscConfig+0x416>
 800a4c8:	e054      	b.n	800a574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ca:	4b10      	ldr	r3, [pc, #64]	@ (800a50c <HAL_RCC_OscConfig+0x478>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d0:	f7fd fe40 	bl	8008154 <HAL_GetTick>
 800a4d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4d6:	e008      	b.n	800a4ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4d8:	f7fd fe3c 	bl	8008154 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d901      	bls.n	800a4ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e045      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ea:	4b06      	ldr	r3, [pc, #24]	@ (800a504 <HAL_RCC_OscConfig+0x470>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f0      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x444>
 800a4f6:	e03d      	b.n	800a574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d107      	bne.n	800a510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e038      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
 800a504:	40023800 	.word	0x40023800
 800a508:	40007000 	.word	0x40007000
 800a50c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a510:	4b1b      	ldr	r3, [pc, #108]	@ (800a580 <HAL_RCC_OscConfig+0x4ec>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d028      	beq.n	800a570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a528:	429a      	cmp	r2, r3
 800a52a:	d121      	bne.n	800a570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a536:	429a      	cmp	r2, r3
 800a538:	d11a      	bne.n	800a570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a540:	4013      	ands	r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a548:	4293      	cmp	r3, r2
 800a54a:	d111      	bne.n	800a570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	3b01      	subs	r3, #1
 800a55a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d107      	bne.n	800a570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d001      	beq.n	800a574 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	40023800 	.word	0x40023800

0800a584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e0cc      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a598:	4b68      	ldr	r3, [pc, #416]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d90c      	bls.n	800a5c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a6:	4b65      	ldr	r3, [pc, #404]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ae:	4b63      	ldr	r3, [pc, #396]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d001      	beq.n	800a5c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e0b8      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d020      	beq.n	800a60e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5d8:	4b59      	ldr	r3, [pc, #356]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	4a58      	ldr	r2, [pc, #352]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a5de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a5e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5f0:	4b53      	ldr	r3, [pc, #332]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	4a52      	ldr	r2, [pc, #328]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a5f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a5fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5fc:	4b50      	ldr	r3, [pc, #320]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	494d      	ldr	r1, [pc, #308]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d044      	beq.n	800a6a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d107      	bne.n	800a632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a622:	4b47      	ldr	r3, [pc, #284]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d119      	bne.n	800a662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e07f      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d003      	beq.n	800a642 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d107      	bne.n	800a652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a642:	4b3f      	ldr	r3, [pc, #252]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e06f      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a652:	4b3b      	ldr	r3, [pc, #236]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e067      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a662:	4b37      	ldr	r3, [pc, #220]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f023 0203 	bic.w	r2, r3, #3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4934      	ldr	r1, [pc, #208]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a670:	4313      	orrs	r3, r2
 800a672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a674:	f7fd fd6e 	bl	8008154 <HAL_GetTick>
 800a678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a67a:	e00a      	b.n	800a692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a67c:	f7fd fd6a 	bl	8008154 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d901      	bls.n	800a692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e04f      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a692:	4b2b      	ldr	r3, [pc, #172]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 020c 	and.w	r2, r3, #12
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d1eb      	bne.n	800a67c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6a4:	4b25      	ldr	r3, [pc, #148]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d20c      	bcs.n	800a6cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6b2:	4b22      	ldr	r3, [pc, #136]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ba:	4b20      	ldr	r3, [pc, #128]	@ (800a73c <HAL_RCC_ClockConfig+0x1b8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d001      	beq.n	800a6cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e032      	b.n	800a732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d008      	beq.n	800a6ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6d8:	4b19      	ldr	r3, [pc, #100]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	4916      	ldr	r1, [pc, #88]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d009      	beq.n	800a70a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6f6:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	490e      	ldr	r1, [pc, #56]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a706:	4313      	orrs	r3, r2
 800a708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a70a:	f000 f821 	bl	800a750 <HAL_RCC_GetSysClockFreq>
 800a70e:	4602      	mov	r2, r0
 800a710:	4b0b      	ldr	r3, [pc, #44]	@ (800a740 <HAL_RCC_ClockConfig+0x1bc>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	091b      	lsrs	r3, r3, #4
 800a716:	f003 030f 	and.w	r3, r3, #15
 800a71a:	490a      	ldr	r1, [pc, #40]	@ (800a744 <HAL_RCC_ClockConfig+0x1c0>)
 800a71c:	5ccb      	ldrb	r3, [r1, r3]
 800a71e:	fa22 f303 	lsr.w	r3, r2, r3
 800a722:	4a09      	ldr	r2, [pc, #36]	@ (800a748 <HAL_RCC_ClockConfig+0x1c4>)
 800a724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a726:	4b09      	ldr	r3, [pc, #36]	@ (800a74c <HAL_RCC_ClockConfig+0x1c8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fd fcce 	bl	80080cc <HAL_InitTick>

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	40023c00 	.word	0x40023c00
 800a740:	40023800 	.word	0x40023800
 800a744:	0800df84 	.word	0x0800df84
 800a748:	20000914 	.word	0x20000914
 800a74c:	20000918 	.word	0x20000918

0800a750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a754:	b090      	sub	sp, #64	@ 0x40
 800a756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a768:	4b59      	ldr	r3, [pc, #356]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f003 030c 	and.w	r3, r3, #12
 800a770:	2b08      	cmp	r3, #8
 800a772:	d00d      	beq.n	800a790 <HAL_RCC_GetSysClockFreq+0x40>
 800a774:	2b08      	cmp	r3, #8
 800a776:	f200 80a1 	bhi.w	800a8bc <HAL_RCC_GetSysClockFreq+0x16c>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_RCC_GetSysClockFreq+0x34>
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d003      	beq.n	800a78a <HAL_RCC_GetSysClockFreq+0x3a>
 800a782:	e09b      	b.n	800a8bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a784:	4b53      	ldr	r3, [pc, #332]	@ (800a8d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a786:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a788:	e09b      	b.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a78a:	4b53      	ldr	r3, [pc, #332]	@ (800a8d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a78c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a78e:	e098      	b.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a790:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a798:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a79a:	4b4d      	ldr	r3, [pc, #308]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d028      	beq.n	800a7f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	099b      	lsrs	r3, r3, #6
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	623b      	str	r3, [r7, #32]
 800a7b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4b47      	ldr	r3, [pc, #284]	@ (800a8d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7bc:	fb03 f201 	mul.w	r2, r3, r1
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	fb00 f303 	mul.w	r3, r0, r3
 800a7c6:	4413      	add	r3, r2
 800a7c8:	4a43      	ldr	r2, [pc, #268]	@ (800a8d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7ca:	fba0 1202 	umull	r1, r2, r0, r2
 800a7ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7d0:	460a      	mov	r2, r1
 800a7d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a7d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7d6:	4413      	add	r3, r2
 800a7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7dc:	2200      	movs	r2, #0
 800a7de:	61bb      	str	r3, [r7, #24]
 800a7e0:	61fa      	str	r2, [r7, #28]
 800a7e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a7ea:	f7f6 fa55 	bl	8000c98 <__aeabi_uldivmod>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f6:	e053      	b.n	800a8a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7f8:	4b35      	ldr	r3, [pc, #212]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	099b      	lsrs	r3, r3, #6
 800a7fe:	2200      	movs	r2, #0
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	617a      	str	r2, [r7, #20]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a80a:	f04f 0b00 	mov.w	fp, #0
 800a80e:	4652      	mov	r2, sl
 800a810:	465b      	mov	r3, fp
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f04f 0100 	mov.w	r1, #0
 800a81a:	0159      	lsls	r1, r3, #5
 800a81c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a820:	0150      	lsls	r0, r2, #5
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	ebb2 080a 	subs.w	r8, r2, sl
 800a82a:	eb63 090b 	sbc.w	r9, r3, fp
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	f04f 0300 	mov.w	r3, #0
 800a836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a83a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a83e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a842:	ebb2 0408 	subs.w	r4, r2, r8
 800a846:	eb63 0509 	sbc.w	r5, r3, r9
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	00eb      	lsls	r3, r5, #3
 800a854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a858:	00e2      	lsls	r2, r4, #3
 800a85a:	4614      	mov	r4, r2
 800a85c:	461d      	mov	r5, r3
 800a85e:	eb14 030a 	adds.w	r3, r4, sl
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	eb45 030b 	adc.w	r3, r5, fp
 800a868:	607b      	str	r3, [r7, #4]
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	f04f 0300 	mov.w	r3, #0
 800a872:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a876:	4629      	mov	r1, r5
 800a878:	028b      	lsls	r3, r1, #10
 800a87a:	4621      	mov	r1, r4
 800a87c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a880:	4621      	mov	r1, r4
 800a882:	028a      	lsls	r2, r1, #10
 800a884:	4610      	mov	r0, r2
 800a886:	4619      	mov	r1, r3
 800a888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88a:	2200      	movs	r2, #0
 800a88c:	60bb      	str	r3, [r7, #8]
 800a88e:	60fa      	str	r2, [r7, #12]
 800a890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a894:	f7f6 fa00 	bl	8000c98 <__aeabi_uldivmod>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4613      	mov	r3, r2
 800a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	0c1b      	lsrs	r3, r3, #16
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a8b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a8bc:	4b05      	ldr	r3, [pc, #20]	@ (800a8d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a8be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a8c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3740      	adds	r7, #64	@ 0x40
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8ce:	bf00      	nop
 800a8d0:	40023800 	.word	0x40023800
 800a8d4:	00f42400 	.word	0x00f42400
 800a8d8:	017d7840 	.word	0x017d7840

0800a8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8e0:	4b03      	ldr	r3, [pc, #12]	@ (800a8f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000914 	.word	0x20000914

0800a8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8f8:	f7ff fff0 	bl	800a8dc <HAL_RCC_GetHCLKFreq>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4b05      	ldr	r3, [pc, #20]	@ (800a914 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	0a9b      	lsrs	r3, r3, #10
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	4903      	ldr	r1, [pc, #12]	@ (800a918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a90a:	5ccb      	ldrb	r3, [r1, r3]
 800a90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a910:	4618      	mov	r0, r3
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40023800 	.word	0x40023800
 800a918:	0800df94 	.word	0x0800df94

0800a91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a920:	f7ff ffdc 	bl	800a8dc <HAL_RCC_GetHCLKFreq>
 800a924:	4602      	mov	r2, r0
 800a926:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	0b5b      	lsrs	r3, r3, #13
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	4903      	ldr	r1, [pc, #12]	@ (800a940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a932:	5ccb      	ldrb	r3, [r1, r3]
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	40023800 	.word	0x40023800
 800a940:	0800df94 	.word	0x0800df94

0800a944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e07b      	b.n	800aa4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d108      	bne.n	800a970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a966:	d009      	beq.n	800a97c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	61da      	str	r2, [r3, #28]
 800a96e:	e005      	b.n	800a97c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7fd f87e 	bl	8007a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9ce:	431a      	orrs	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa00:	ea42 0103 	orr.w	r1, r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	f003 0104 	and.w	r1, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa22:	f003 0210 	and.w	r2, r3, #16
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69da      	ldr	r2, [r3, #28]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aa3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	603b      	str	r3, [r7, #0]
 800aa62:	4613      	mov	r3, r2
 800aa64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa66:	f7fd fb75 	bl	8008154 <HAL_GetTick>
 800aa6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800aa6c:	88fb      	ldrh	r3, [r7, #6]
 800aa6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d001      	beq.n	800aa80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e12a      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <HAL_SPI_Transmit+0x36>
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e122      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d101      	bne.n	800aa9e <HAL_SPI_Transmit+0x48>
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	e11b      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	88fa      	ldrh	r2, [r7, #6]
 800aabe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	88fa      	ldrh	r2, [r7, #6]
 800aac4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaec:	d10f      	bne.n	800ab0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aafc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab18:	2b40      	cmp	r3, #64	@ 0x40
 800ab1a:	d007      	beq.n	800ab2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab34:	d152      	bne.n	800abdc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <HAL_SPI_Transmit+0xee>
 800ab3e:	8b7b      	ldrh	r3, [r7, #26]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d145      	bne.n	800abd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab48:	881a      	ldrh	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab54:	1c9a      	adds	r2, r3, #2
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab68:	e032      	b.n	800abd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d112      	bne.n	800ab9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7c:	881a      	ldrh	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab88:	1c9a      	adds	r2, r3, #2
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b01      	subs	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ab9c:	e018      	b.n	800abd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab9e:	f7fd fad9 	bl	8008154 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d803      	bhi.n	800abb6 <HAL_SPI_Transmit+0x160>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d102      	bne.n	800abbc <HAL_SPI_Transmit+0x166>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e082      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1c7      	bne.n	800ab6a <HAL_SPI_Transmit+0x114>
 800abda:	e053      	b.n	800ac84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <HAL_SPI_Transmit+0x194>
 800abe4:	8b7b      	ldrh	r3, [r7, #26]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d147      	bne.n	800ac7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	330c      	adds	r3, #12
 800abf4:	7812      	ldrb	r2, [r2, #0]
 800abf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ac10:	e033      	b.n	800ac7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d113      	bne.n	800ac48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ac46:	e018      	b.n	800ac7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac48:	f7fd fa84 	bl	8008154 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d803      	bhi.n	800ac60 <HAL_SPI_Transmit+0x20a>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d102      	bne.n	800ac66 <HAL_SPI_Transmit+0x210>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e02d      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1c6      	bne.n	800ac12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 fbd9 	bl	800b440 <SPI_EndRxTxTransaction>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2220      	movs	r2, #32
 800ac98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	617b      	str	r3, [r7, #20]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800acd4:	2300      	movs	r3, #0
  }
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b088      	sub	sp, #32
 800ace2:	af02      	add	r7, sp, #8
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	603b      	str	r3, [r7, #0]
 800acea:	4613      	mov	r3, r2
 800acec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d001      	beq.n	800acfe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800acfa:	2302      	movs	r3, #2
 800acfc:	e104      	b.n	800af08 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <HAL_SPI_Receive+0x2c>
 800ad04:	88fb      	ldrh	r3, [r7, #6]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e0fc      	b.n	800af08 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad16:	d112      	bne.n	800ad3e <HAL_SPI_Receive+0x60>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10e      	bne.n	800ad3e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2204      	movs	r2, #4
 800ad24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ad28:	88fa      	ldrh	r2, [r7, #6]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	68b9      	ldr	r1, [r7, #8]
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 f8eb 	bl	800af10 <HAL_SPI_TransmitReceive>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	e0e4      	b.n	800af08 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad3e:	f7fd fa09 	bl	8008154 <HAL_GetTick>
 800ad42:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_SPI_Receive+0x74>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e0da      	b.n	800af08 <HAL_SPI_Receive+0x22a>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2204      	movs	r2, #4
 800ad5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	88fa      	ldrh	r2, [r7, #6]
 800ad72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	88fa      	ldrh	r2, [r7, #6]
 800ad78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ada0:	d10f      	bne.n	800adc2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800adc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adcc:	2b40      	cmp	r3, #64	@ 0x40
 800adce:	d007      	beq.n	800ade0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d170      	bne.n	800aeca <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ade8:	e035      	b.n	800ae56 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d115      	bne.n	800ae24 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f103 020c 	add.w	r2, r3, #12
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae22:	e018      	b.n	800ae56 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae24:	f7fd f996 	bl	8008154 <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d803      	bhi.n	800ae3c <HAL_SPI_Receive+0x15e>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3a:	d102      	bne.n	800ae42 <HAL_SPI_Receive+0x164>
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e058      	b.n	800af08 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1c4      	bne.n	800adea <HAL_SPI_Receive+0x10c>
 800ae60:	e038      	b.n	800aed4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d113      	bne.n	800ae98 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae82:	1c9a      	adds	r2, r3, #2
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae96:	e018      	b.n	800aeca <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae98:	f7fd f95c 	bl	8008154 <HAL_GetTick>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d803      	bhi.n	800aeb0 <HAL_SPI_Receive+0x1d2>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeae:	d102      	bne.n	800aeb6 <HAL_SPI_Receive+0x1d8>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e01e      	b.n	800af08 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1c6      	bne.n	800ae62 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fa4b 	bl	800b374 <SPI_EndRxTransaction>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800af06:	2300      	movs	r3, #0
  }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	@ 0x28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800af1e:	2301      	movs	r3, #1
 800af20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af22:	f7fd f917 	bl	8008154 <HAL_GetTick>
 800af26:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af2e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af36:	887b      	ldrh	r3, [r7, #2]
 800af38:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800af3a:	7ffb      	ldrb	r3, [r7, #31]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d00c      	beq.n	800af5a <HAL_SPI_TransmitReceive+0x4a>
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af46:	d106      	bne.n	800af56 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <HAL_SPI_TransmitReceive+0x46>
 800af50:	7ffb      	ldrb	r3, [r7, #31]
 800af52:	2b04      	cmp	r3, #4
 800af54:	d001      	beq.n	800af5a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800af56:	2302      	movs	r3, #2
 800af58:	e17f      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <HAL_SPI_TransmitReceive+0x5c>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d002      	beq.n	800af6c <HAL_SPI_TransmitReceive+0x5c>
 800af66:	887b      	ldrh	r3, [r7, #2]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e174      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_SPI_TransmitReceive+0x6e>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e16d      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d003      	beq.n	800af9a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2205      	movs	r2, #5
 800af96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	887a      	ldrh	r2, [r7, #2]
 800afaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	887a      	ldrh	r2, [r7, #2]
 800afb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	887a      	ldrh	r2, [r7, #2]
 800afbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	887a      	ldrh	r2, [r7, #2]
 800afc2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b40      	cmp	r3, #64	@ 0x40
 800afdc:	d007      	beq.n	800afee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aff6:	d17e      	bne.n	800b0f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <HAL_SPI_TransmitReceive+0xf6>
 800b000:	8afb      	ldrh	r3, [r7, #22]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d16c      	bne.n	800b0e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00a:	881a      	ldrh	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b016:	1c9a      	adds	r2, r3, #2
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b020:	b29b      	uxth	r3, r3
 800b022:	3b01      	subs	r3, #1
 800b024:	b29a      	uxth	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b02a:	e059      	b.n	800b0e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b02      	cmp	r3, #2
 800b038:	d11b      	bne.n	800b072 <HAL_SPI_TransmitReceive+0x162>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d016      	beq.n	800b072 <HAL_SPI_TransmitReceive+0x162>
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	2b01      	cmp	r3, #1
 800b048:	d113      	bne.n	800b072 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04e:	881a      	ldrh	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05a:	1c9a      	adds	r2, r3, #2
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d119      	bne.n	800b0b4 <HAL_SPI_TransmitReceive+0x1a4>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b084:	b29b      	uxth	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d014      	beq.n	800b0b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b094:	b292      	uxth	r2, r2
 800b096:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b09c:	1c9a      	adds	r2, r3, #2
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b0b4:	f7fd f84e 	bl	8008154 <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d80d      	bhi.n	800b0e0 <HAL_SPI_TransmitReceive+0x1d0>
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ca:	d009      	beq.n	800b0e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e0bc      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1a0      	bne.n	800b02c <HAL_SPI_TransmitReceive+0x11c>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d19b      	bne.n	800b02c <HAL_SPI_TransmitReceive+0x11c>
 800b0f4:	e082      	b.n	800b1fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <HAL_SPI_TransmitReceive+0x1f4>
 800b0fe:	8afb      	ldrh	r3, [r7, #22]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d171      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	330c      	adds	r3, #12
 800b10e:	7812      	ldrb	r2, [r2, #0]
 800b110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	b29a      	uxth	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b12a:	e05d      	b.n	800b1e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b02      	cmp	r3, #2
 800b138:	d11c      	bne.n	800b174 <HAL_SPI_TransmitReceive+0x264>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b13e:	b29b      	uxth	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d017      	beq.n	800b174 <HAL_SPI_TransmitReceive+0x264>
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	2b01      	cmp	r3, #1
 800b148:	d114      	bne.n	800b174 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	330c      	adds	r3, #12
 800b154:	7812      	ldrb	r2, [r2, #0]
 800b156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b166:	b29b      	uxth	r3, r3
 800b168:	3b01      	subs	r3, #1
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d119      	bne.n	800b1b6 <HAL_SPI_TransmitReceive+0x2a6>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b186:	b29b      	uxth	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d014      	beq.n	800b1b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b196:	b2d2      	uxtb	r2, r2
 800b198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b1b6:	f7fc ffcd 	bl	8008154 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d803      	bhi.n	800b1ce <HAL_SPI_TransmitReceive+0x2be>
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d102      	bne.n	800b1d4 <HAL_SPI_TransmitReceive+0x2c4>
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d109      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e038      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d19c      	bne.n	800b12c <HAL_SPI_TransmitReceive+0x21c>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d197      	bne.n	800b12c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1fc:	6a3a      	ldr	r2, [r7, #32]
 800b1fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f91d 	bl	800b440 <SPI_EndRxTxTransaction>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d008      	beq.n	800b21e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2220      	movs	r2, #32
 800b210:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e01d      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10a      	bne.n	800b23c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b226:	2300      	movs	r3, #0
 800b228:	613b      	str	r3, [r7, #16]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e000      	b.n	800b25a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b258:	2300      	movs	r3, #0
  }
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3728      	adds	r7, #40	@ 0x28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	4613      	mov	r3, r2
 800b272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b274:	f7fc ff6e 	bl	8008154 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	4413      	add	r3, r2
 800b282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b284:	f7fc ff66 	bl	8008154 <HAL_GetTick>
 800b288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b28a:	4b39      	ldr	r3, [pc, #228]	@ (800b370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	015b      	lsls	r3, r3, #5
 800b290:	0d1b      	lsrs	r3, r3, #20
 800b292:	69fa      	ldr	r2, [r7, #28]
 800b294:	fb02 f303 	mul.w	r3, r2, r3
 800b298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b29a:	e055      	b.n	800b348 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d051      	beq.n	800b348 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b2a4:	f7fc ff56 	bl	8008154 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	69fa      	ldr	r2, [r7, #28]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d902      	bls.n	800b2ba <SPI_WaitFlagStateUntilTimeout+0x56>
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d13d      	bne.n	800b336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b2c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2d2:	d111      	bne.n	800b2f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2dc:	d004      	beq.n	800b2e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2e6:	d107      	bne.n	800b2f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b300:	d10f      	bne.n	800b322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e018      	b.n	800b368 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e002      	b.n	800b348 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	3b01      	subs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	4013      	ands	r3, r2
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	429a      	cmp	r2, r3
 800b356:	bf0c      	ite	eq
 800b358:	2301      	moveq	r3, #1
 800b35a:	2300      	movne	r3, #0
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	429a      	cmp	r2, r3
 800b364:	d19a      	bne.n	800b29c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3720      	adds	r7, #32
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000914 	.word	0x20000914

0800b374 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af02      	add	r7, sp, #8
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b388:	d111      	bne.n	800b3ae <SPI_EndRxTransaction+0x3a>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b392:	d004      	beq.n	800b39e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b39c:	d107      	bne.n	800b3ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b3ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b3b6:	d12a      	bne.n	800b40e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c0:	d012      	beq.n	800b3e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2180      	movs	r1, #128	@ 0x80
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff ff49 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d02d      	beq.n	800b434 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3dc:	f043 0220 	orr.w	r2, r3, #32
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e026      	b.n	800b436 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff ff36 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d01a      	beq.n	800b434 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b402:	f043 0220 	orr.w	r2, r3, #32
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e013      	b.n	800b436 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2200      	movs	r2, #0
 800b416:	2101      	movs	r1, #1
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f7ff ff23 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d007      	beq.n	800b434 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b428:	f043 0220 	orr.w	r2, r3, #32
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e000      	b.n	800b436 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2201      	movs	r2, #1
 800b454:	2102      	movs	r1, #2
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7ff ff04 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d007      	beq.n	800b472 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b466:	f043 0220 	orr.w	r2, r3, #32
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e032      	b.n	800b4d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b472:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e0 <SPI_EndRxTxTransaction+0xa0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a1b      	ldr	r2, [pc, #108]	@ (800b4e4 <SPI_EndRxTxTransaction+0xa4>)
 800b478:	fba2 2303 	umull	r2, r3, r2, r3
 800b47c:	0d5b      	lsrs	r3, r3, #21
 800b47e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b490:	d112      	bne.n	800b4b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	2180      	movs	r1, #128	@ 0x80
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff fee1 	bl	800b264 <SPI_WaitFlagStateUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d016      	beq.n	800b4d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ac:	f043 0220 	orr.w	r2, r3, #32
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e00f      	b.n	800b4d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ce:	2b80      	cmp	r3, #128	@ 0x80
 800b4d0:	d0f2      	beq.n	800b4b8 <SPI_EndRxTxTransaction+0x78>
 800b4d2:	e000      	b.n	800b4d6 <SPI_EndRxTxTransaction+0x96>
        break;
 800b4d4:	bf00      	nop
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000914 	.word	0x20000914
 800b4e4:	165e9f81 	.word	0x165e9f81

0800b4e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e042      	b.n	800b580 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7fc fbbe 	bl	8007c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2224      	movs	r2, #36	@ 0x24
 800b518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b52a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fe09 	bl	800c144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	691a      	ldr	r2, [r3, #16]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	695a      	ldr	r2, [r3, #20]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68da      	ldr	r2, [r3, #12]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08a      	sub	sp, #40	@ 0x28
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	4613      	mov	r3, r2
 800b596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	2b20      	cmp	r3, #32
 800b5a6:	d175      	bne.n	800b694 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <HAL_UART_Transmit+0x2c>
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e06e      	b.n	800b696 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2221      	movs	r2, #33	@ 0x21
 800b5c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5c6:	f7fc fdc5 	bl	8008154 <HAL_GetTick>
 800b5ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	88fa      	ldrh	r2, [r7, #6]
 800b5d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	88fa      	ldrh	r2, [r7, #6]
 800b5d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5e0:	d108      	bne.n	800b5f4 <HAL_UART_Transmit+0x6c>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d104      	bne.n	800b5f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	61bb      	str	r3, [r7, #24]
 800b5f2:	e003      	b.n	800b5fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b5fc:	e02e      	b.n	800b65c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2200      	movs	r2, #0
 800b606:	2180      	movs	r1, #128	@ 0x80
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 fb6d 	bl	800bce8 <UART_WaitOnFlagUntilTimeout>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d005      	beq.n	800b620 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2220      	movs	r2, #32
 800b618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e03a      	b.n	800b696 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10b      	bne.n	800b63e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	3302      	adds	r3, #2
 800b63a:	61bb      	str	r3, [r7, #24]
 800b63c:	e007      	b.n	800b64e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	781a      	ldrb	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	3301      	adds	r3, #1
 800b64c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b652:	b29b      	uxth	r3, r3
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b660:	b29b      	uxth	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1cb      	bne.n	800b5fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2200      	movs	r2, #0
 800b66e:	2140      	movs	r1, #64	@ 0x40
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fb39 	bl	800bce8 <UART_WaitOnFlagUntilTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2220      	movs	r2, #32
 800b680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e006      	b.n	800b696 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	e000      	b.n	800b696 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b694:	2302      	movs	r3, #2
  }
}
 800b696:	4618      	mov	r0, r3
 800b698:	3720      	adds	r7, #32
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b08c      	sub	sp, #48	@ 0x30
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b20      	cmp	r3, #32
 800b6b6:	d14a      	bne.n	800b74e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e043      	b.n	800b750 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b6d4:	88fb      	ldrh	r3, [r7, #6]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68b9      	ldr	r1, [r7, #8]
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 fb5d 	bl	800bd9a <UART_Start_Receive_IT>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b6e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d12c      	bne.n	800b748 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d125      	bne.n	800b742 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	613b      	str	r3, [r7, #16]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	330c      	adds	r3, #12
 800b712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	617b      	str	r3, [r7, #20]
   return(result);
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f043 0310 	orr.w	r3, r3, #16
 800b722:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	330c      	adds	r3, #12
 800b72a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b72c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b72e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6a39      	ldr	r1, [r7, #32]
 800b732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	61fb      	str	r3, [r7, #28]
   return(result);
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e5      	bne.n	800b70c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800b740:	e002      	b.n	800b748 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b74c:	e000      	b.n	800b750 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b74e:	2302      	movs	r3, #2
  }
}
 800b750:	4618      	mov	r0, r3
 800b752:	3730      	adds	r7, #48	@ 0x30
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b0ba      	sub	sp, #232	@ 0xe8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b77e:	2300      	movs	r3, #0
 800b780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b784:	2300      	movs	r3, #0
 800b786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b78e:	f003 030f 	and.w	r3, r3, #15
 800b792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10f      	bne.n	800b7be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7a2:	f003 0320 	and.w	r3, r3, #32
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d009      	beq.n	800b7be <HAL_UART_IRQHandler+0x66>
 800b7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fc05 	bl	800bfc6 <UART_Receive_IT>
      return;
 800b7bc:	e273      	b.n	800bca6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 80de 	beq.w	800b984 <HAL_UART_IRQHandler+0x22c>
 800b7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80d1 	beq.w	800b984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00b      	beq.n	800b806 <HAL_UART_IRQHandler+0xae>
 800b7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7fe:	f043 0201 	orr.w	r2, r3, #1
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00b      	beq.n	800b82a <HAL_UART_IRQHandler+0xd2>
 800b812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b822:	f043 0202 	orr.w	r2, r3, #2
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00b      	beq.n	800b84e <HAL_UART_IRQHandler+0xf6>
 800b836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b846:	f043 0204 	orr.w	r2, r3, #4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d011      	beq.n	800b87e <HAL_UART_IRQHandler+0x126>
 800b85a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d105      	bne.n	800b872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b876:	f043 0208 	orr.w	r2, r3, #8
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 820a 	beq.w	800bc9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b00      	cmp	r3, #0
 800b892:	d008      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x14e>
 800b894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fb90 	bl	800bfc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b0:	2b40      	cmp	r3, #64	@ 0x40
 800b8b2:	bf0c      	ite	eq
 800b8b4:	2301      	moveq	r3, #1
 800b8b6:	2300      	movne	r3, #0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8c2:	f003 0308 	and.w	r3, r3, #8
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d103      	bne.n	800b8d2 <HAL_UART_IRQHandler+0x17a>
 800b8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d04f      	beq.n	800b972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fa9b 	bl	800be0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e2:	2b40      	cmp	r3, #64	@ 0x40
 800b8e4:	d141      	bne.n	800b96a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3314      	adds	r3, #20
 800b8ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b8fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3314      	adds	r3, #20
 800b90e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b91e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1d9      	bne.n	800b8e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b936:	2b00      	cmp	r3, #0
 800b938:	d013      	beq.n	800b962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b93e:	4a8a      	ldr	r2, [pc, #552]	@ (800bb68 <HAL_UART_IRQHandler+0x410>)
 800b940:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b946:	4618      	mov	r0, r3
 800b948:	f7fd f8e9 	bl	8008b1e <HAL_DMA_Abort_IT>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d016      	beq.n	800b980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b95c:	4610      	mov	r0, r2
 800b95e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b960:	e00e      	b.n	800b980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f9b6 	bl	800bcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b968:	e00a      	b.n	800b980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f9b2 	bl	800bcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b970:	e006      	b.n	800b980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9ae 	bl	800bcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b97e:	e18d      	b.n	800bc9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b980:	bf00      	nop
    return;
 800b982:	e18b      	b.n	800bc9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b988:	2b01      	cmp	r3, #1
 800b98a:	f040 8167 	bne.w	800bc5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b992:	f003 0310 	and.w	r3, r3, #16
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8160 	beq.w	800bc5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9a0:	f003 0310 	and.w	r3, r3, #16
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8159 	beq.w	800bc5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60bb      	str	r3, [r7, #8]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60bb      	str	r3, [r7, #8]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	60bb      	str	r3, [r7, #8]
 800b9be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ca:	2b40      	cmp	r3, #64	@ 0x40
 800b9cc:	f040 80ce 	bne.w	800bb6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 80a9 	beq.w	800bb38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b9ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	f080 80a2 	bcs.w	800bb38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b9fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba06:	f000 8088 	beq.w	800bb1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	330c      	adds	r3, #12
 800ba10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ba20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ba36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ba42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ba4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1d9      	bne.n	800ba0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba68:	f023 0301 	bic.w	r3, r3, #1
 800ba6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3314      	adds	r3, #20
 800ba76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ba7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ba7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ba82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ba8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e1      	bne.n	800ba56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3314      	adds	r3, #20
 800ba98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800baa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3314      	adds	r3, #20
 800bab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800babc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e3      	bne.n	800ba92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2220      	movs	r2, #32
 800bace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	330c      	adds	r3, #12
 800bade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae2:	e853 3f00 	ldrex	r3, [r3]
 800bae6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baea:	f023 0310 	bic.w	r3, r3, #16
 800baee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bafc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bafe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb04:	e841 2300 	strex	r3, r2, [r1]
 800bb08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1e3      	bne.n	800bad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fc ff92 	bl	8008a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fb fdd5 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bb36:	e0b3      	b.n	800bca0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb40:	429a      	cmp	r2, r3
 800bb42:	f040 80ad 	bne.w	800bca0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb50:	f040 80a6 	bne.w	800bca0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7fb fdbd 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
      return;
 800bb66:	e09b      	b.n	800bca0 <HAL_UART_IRQHandler+0x548>
 800bb68:	0800bed5 	.word	0x0800bed5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 808e 	beq.w	800bca4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800bb88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8089 	beq.w	800bca4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	330c      	adds	r3, #12
 800bb98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	330c      	adds	r3, #12
 800bbb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bbb6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bbb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbbe:	e841 2300 	strex	r3, r2, [r1]
 800bbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1e3      	bne.n	800bb92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3314      	adds	r3, #20
 800bbd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f023 0301 	bic.w	r3, r3, #1
 800bbe0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3314      	adds	r3, #20
 800bbea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bbee:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf6:	e841 2300 	strex	r3, r2, [r1]
 800bbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1e3      	bne.n	800bbca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	330c      	adds	r3, #12
 800bc16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0310 	bic.w	r3, r3, #16
 800bc26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	330c      	adds	r3, #12
 800bc30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bc34:	61fa      	str	r2, [r7, #28]
 800bc36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc38:	69b9      	ldr	r1, [r7, #24]
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	e841 2300 	strex	r3, r2, [r1]
 800bc40:	617b      	str	r3, [r7, #20]
   return(result);
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1e3      	bne.n	800bc10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7fb fd43 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc5a:	e023      	b.n	800bca4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <HAL_UART_IRQHandler+0x524>
 800bc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f93e 	bl	800bef6 <UART_Transmit_IT>
    return;
 800bc7a:	e014      	b.n	800bca6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00e      	beq.n	800bca6 <HAL_UART_IRQHandler+0x54e>
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d008      	beq.n	800bca6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f97e 	bl	800bf96 <UART_EndTransmit_IT>
    return;
 800bc9a:	e004      	b.n	800bca6 <HAL_UART_IRQHandler+0x54e>
    return;
 800bc9c:	bf00      	nop
 800bc9e:	e002      	b.n	800bca6 <HAL_UART_IRQHandler+0x54e>
      return;
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <HAL_UART_IRQHandler+0x54e>
      return;
 800bca4:	bf00      	nop
  }
}
 800bca6:	37e8      	adds	r7, #232	@ 0xe8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcf8:	e03b      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcfa:	6a3b      	ldr	r3, [r7, #32]
 800bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd00:	d037      	beq.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd02:	f7fc fa27 	bl	8008154 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	6a3a      	ldr	r2, [r7, #32]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d302      	bcc.n	800bd18 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e03a      	b.n	800bd92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d023      	beq.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b80      	cmp	r3, #128	@ 0x80
 800bd2e:	d020      	beq.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b40      	cmp	r3, #64	@ 0x40
 800bd34:	d01d      	beq.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d116      	bne.n	800bd72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bd44:	2300      	movs	r3, #0
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	617b      	str	r3, [r7, #20]
 800bd58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f000 f857 	bl	800be0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2208      	movs	r2, #8
 800bd64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e00f      	b.n	800bd92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	bf0c      	ite	eq
 800bd82:	2301      	moveq	r3, #1
 800bd84:	2300      	movne	r3, #0
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	461a      	mov	r2, r3
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d0b4      	beq.n	800bcfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	60f8      	str	r0, [r7, #12]
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	4613      	mov	r3, r2
 800bda6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	88fa      	ldrh	r2, [r7, #6]
 800bdb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	88fa      	ldrh	r2, [r7, #6]
 800bdb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2222      	movs	r2, #34	@ 0x22
 800bdc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	695a      	ldr	r2, [r3, #20]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0201 	orr.w	r2, r2, #1
 800bdee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0220 	orr.w	r2, r2, #32
 800bdfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be0e:	b480      	push	{r7}
 800be10:	b095      	sub	sp, #84	@ 0x54
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	330c      	adds	r3, #12
 800be1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	330c      	adds	r3, #12
 800be34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be36:	643a      	str	r2, [r7, #64]	@ 0x40
 800be38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e5      	bne.n	800be16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3314      	adds	r3, #20
 800be50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	61fb      	str	r3, [r7, #28]
   return(result);
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	f023 0301 	bic.w	r3, r3, #1
 800be60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3314      	adds	r3, #20
 800be68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	2b01      	cmp	r3, #1
 800be84:	d119      	bne.n	800beba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	330c      	adds	r3, #12
 800be8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	60bb      	str	r3, [r7, #8]
   return(result);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f023 0310 	bic.w	r3, r3, #16
 800be9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	330c      	adds	r3, #12
 800bea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bea6:	61ba      	str	r2, [r7, #24]
 800bea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6979      	ldr	r1, [r7, #20]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	613b      	str	r3, [r7, #16]
   return(result);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e5      	bne.n	800be86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bec8:	bf00      	nop
 800beca:	3754      	adds	r7, #84	@ 0x54
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fef3 	bl	800bcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beee:	bf00      	nop
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b085      	sub	sp, #20
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b21      	cmp	r3, #33	@ 0x21
 800bf08:	d13e      	bne.n	800bf88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf12:	d114      	bne.n	800bf3e <UART_Transmit_IT+0x48>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d110      	bne.n	800bf3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	1c9a      	adds	r2, r3, #2
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	621a      	str	r2, [r3, #32]
 800bf3c:	e008      	b.n	800bf50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	1c59      	adds	r1, r3, #1
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	6211      	str	r1, [r2, #32]
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10f      	bne.n	800bf84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68da      	ldr	r2, [r3, #12]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	e000      	b.n	800bf8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf88:	2302      	movs	r3, #2
  }
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7ff fe78 	bl	800bcac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b08c      	sub	sp, #48	@ 0x30
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b22      	cmp	r3, #34	@ 0x22
 800bfe0:	f040 80aa 	bne.w	800c138 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfec:	d115      	bne.n	800c01a <UART_Receive_IT+0x54>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d111      	bne.n	800c01a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	b29b      	uxth	r3, r3
 800c004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c008:	b29a      	uxth	r2, r3
 800c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c012:	1c9a      	adds	r2, r3, #2
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	629a      	str	r2, [r3, #40]	@ 0x28
 800c018:	e024      	b.n	800c064 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c028:	d007      	beq.n	800c03a <UART_Receive_IT+0x74>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <UART_Receive_IT+0x82>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	b2da      	uxtb	r2, r3
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e008      	b.n	800c05a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c054:	b2da      	uxtb	r2, r3
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c068:	b29b      	uxth	r3, r3
 800c06a:	3b01      	subs	r3, #1
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	4619      	mov	r1, r3
 800c072:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c074:	2b00      	cmp	r3, #0
 800c076:	d15d      	bne.n	800c134 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f022 0220 	bic.w	r2, r2, #32
 800c086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	695a      	ldr	r2, [r3, #20]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f022 0201 	bic.w	r2, r2, #1
 800c0a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d135      	bne.n	800c12a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	e853 3f00 	ldrex	r3, [r3]
 800c0d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f023 0310 	bic.w	r3, r3, #16
 800c0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0e4:	623a      	str	r2, [r7, #32]
 800c0e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	6a3a      	ldr	r2, [r7, #32]
 800c0ec:	e841 2300 	strex	r3, r2, [r1]
 800c0f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e5      	bne.n	800c0c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b10      	cmp	r3, #16
 800c104:	d10a      	bne.n	800c11c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c106:	2300      	movs	r3, #0
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7fb fadc 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
 800c128:	e002      	b.n	800c130 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fdc8 	bl	800bcc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	e002      	b.n	800c13a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	e000      	b.n	800c13a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c138:	2302      	movs	r3, #2
  }
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3730      	adds	r7, #48	@ 0x30
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c148:	b0c0      	sub	sp, #256	@ 0x100
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c160:	68d9      	ldr	r1, [r3, #12]
 800c162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	ea40 0301 	orr.w	r3, r0, r1
 800c16c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	431a      	orrs	r2, r3
 800c17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	431a      	orrs	r2, r3
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c19c:	f021 010c 	bic.w	r1, r1, #12
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1aa:	430b      	orrs	r3, r1
 800c1ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1be:	6999      	ldr	r1, [r3, #24]
 800c1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	ea40 0301 	orr.w	r3, r0, r1
 800c1ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b8f      	ldr	r3, [pc, #572]	@ (800c410 <UART_SetConfig+0x2cc>)
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d005      	beq.n	800c1e4 <UART_SetConfig+0xa0>
 800c1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4b8d      	ldr	r3, [pc, #564]	@ (800c414 <UART_SetConfig+0x2d0>)
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d104      	bne.n	800c1ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1e4:	f7fe fb9a 	bl	800a91c <HAL_RCC_GetPCLK2Freq>
 800c1e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c1ec:	e003      	b.n	800c1f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1ee:	f7fe fb81 	bl	800a8f4 <HAL_RCC_GetPCLK1Freq>
 800c1f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c200:	f040 810c 	bne.w	800c41c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c20e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c216:	4622      	mov	r2, r4
 800c218:	462b      	mov	r3, r5
 800c21a:	1891      	adds	r1, r2, r2
 800c21c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c21e:	415b      	adcs	r3, r3
 800c220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c226:	4621      	mov	r1, r4
 800c228:	eb12 0801 	adds.w	r8, r2, r1
 800c22c:	4629      	mov	r1, r5
 800c22e:	eb43 0901 	adc.w	r9, r3, r1
 800c232:	f04f 0200 	mov.w	r2, #0
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c23e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c246:	4690      	mov	r8, r2
 800c248:	4699      	mov	r9, r3
 800c24a:	4623      	mov	r3, r4
 800c24c:	eb18 0303 	adds.w	r3, r8, r3
 800c250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c254:	462b      	mov	r3, r5
 800c256:	eb49 0303 	adc.w	r3, r9, r3
 800c25a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c26a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c26e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c272:	460b      	mov	r3, r1
 800c274:	18db      	adds	r3, r3, r3
 800c276:	653b      	str	r3, [r7, #80]	@ 0x50
 800c278:	4613      	mov	r3, r2
 800c27a:	eb42 0303 	adc.w	r3, r2, r3
 800c27e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c288:	f7f4 fd06 	bl	8000c98 <__aeabi_uldivmod>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4b61      	ldr	r3, [pc, #388]	@ (800c418 <UART_SetConfig+0x2d4>)
 800c292:	fba3 2302 	umull	r2, r3, r3, r2
 800c296:	095b      	lsrs	r3, r3, #5
 800c298:	011c      	lsls	r4, r3, #4
 800c29a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c2a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c2a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c2ac:	4642      	mov	r2, r8
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	1891      	adds	r1, r2, r2
 800c2b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c2b4:	415b      	adcs	r3, r3
 800c2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c2bc:	4641      	mov	r1, r8
 800c2be:	eb12 0a01 	adds.w	sl, r2, r1
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	eb43 0b01 	adc.w	fp, r3, r1
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2dc:	4692      	mov	sl, r2
 800c2de:	469b      	mov	fp, r3
 800c2e0:	4643      	mov	r3, r8
 800c2e2:	eb1a 0303 	adds.w	r3, sl, r3
 800c2e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2ea:	464b      	mov	r3, r9
 800c2ec:	eb4b 0303 	adc.w	r3, fp, r3
 800c2f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c308:	460b      	mov	r3, r1
 800c30a:	18db      	adds	r3, r3, r3
 800c30c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c30e:	4613      	mov	r3, r2
 800c310:	eb42 0303 	adc.w	r3, r2, r3
 800c314:	647b      	str	r3, [r7, #68]	@ 0x44
 800c316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c31a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c31e:	f7f4 fcbb 	bl	8000c98 <__aeabi_uldivmod>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	4611      	mov	r1, r2
 800c328:	4b3b      	ldr	r3, [pc, #236]	@ (800c418 <UART_SetConfig+0x2d4>)
 800c32a:	fba3 2301 	umull	r2, r3, r3, r1
 800c32e:	095b      	lsrs	r3, r3, #5
 800c330:	2264      	movs	r2, #100	@ 0x64
 800c332:	fb02 f303 	mul.w	r3, r2, r3
 800c336:	1acb      	subs	r3, r1, r3
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c33e:	4b36      	ldr	r3, [pc, #216]	@ (800c418 <UART_SetConfig+0x2d4>)
 800c340:	fba3 2302 	umull	r2, r3, r3, r2
 800c344:	095b      	lsrs	r3, r3, #5
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c34c:	441c      	add	r4, r3
 800c34e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c352:	2200      	movs	r2, #0
 800c354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c35c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c360:	4642      	mov	r2, r8
 800c362:	464b      	mov	r3, r9
 800c364:	1891      	adds	r1, r2, r2
 800c366:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c368:	415b      	adcs	r3, r3
 800c36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c36c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c370:	4641      	mov	r1, r8
 800c372:	1851      	adds	r1, r2, r1
 800c374:	6339      	str	r1, [r7, #48]	@ 0x30
 800c376:	4649      	mov	r1, r9
 800c378:	414b      	adcs	r3, r1
 800c37a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c37c:	f04f 0200 	mov.w	r2, #0
 800c380:	f04f 0300 	mov.w	r3, #0
 800c384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c388:	4659      	mov	r1, fp
 800c38a:	00cb      	lsls	r3, r1, #3
 800c38c:	4651      	mov	r1, sl
 800c38e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c392:	4651      	mov	r1, sl
 800c394:	00ca      	lsls	r2, r1, #3
 800c396:	4610      	mov	r0, r2
 800c398:	4619      	mov	r1, r3
 800c39a:	4603      	mov	r3, r0
 800c39c:	4642      	mov	r2, r8
 800c39e:	189b      	adds	r3, r3, r2
 800c3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	460a      	mov	r2, r1
 800c3a8:	eb42 0303 	adc.w	r3, r2, r3
 800c3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c3c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	18db      	adds	r3, r3, r3
 800c3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	eb42 0303 	adc.w	r3, r2, r3
 800c3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c3d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c3da:	f7f4 fc5d 	bl	8000c98 <__aeabi_uldivmod>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c418 <UART_SetConfig+0x2d4>)
 800c3e4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3e8:	095b      	lsrs	r3, r3, #5
 800c3ea:	2164      	movs	r1, #100	@ 0x64
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	3332      	adds	r3, #50	@ 0x32
 800c3f6:	4a08      	ldr	r2, [pc, #32]	@ (800c418 <UART_SetConfig+0x2d4>)
 800c3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fc:	095b      	lsrs	r3, r3, #5
 800c3fe:	f003 0207 	and.w	r2, r3, #7
 800c402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4422      	add	r2, r4
 800c40a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c40c:	e106      	b.n	800c61c <UART_SetConfig+0x4d8>
 800c40e:	bf00      	nop
 800c410:	40011000 	.word	0x40011000
 800c414:	40011400 	.word	0x40011400
 800c418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c41c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c420:	2200      	movs	r2, #0
 800c422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c42a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	1891      	adds	r1, r2, r2
 800c434:	6239      	str	r1, [r7, #32]
 800c436:	415b      	adcs	r3, r3
 800c438:	627b      	str	r3, [r7, #36]	@ 0x24
 800c43a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c43e:	4641      	mov	r1, r8
 800c440:	1854      	adds	r4, r2, r1
 800c442:	4649      	mov	r1, r9
 800c444:	eb43 0501 	adc.w	r5, r3, r1
 800c448:	f04f 0200 	mov.w	r2, #0
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	00eb      	lsls	r3, r5, #3
 800c452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c456:	00e2      	lsls	r2, r4, #3
 800c458:	4614      	mov	r4, r2
 800c45a:	461d      	mov	r5, r3
 800c45c:	4643      	mov	r3, r8
 800c45e:	18e3      	adds	r3, r4, r3
 800c460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c464:	464b      	mov	r3, r9
 800c466:	eb45 0303 	adc.w	r3, r5, r3
 800c46a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c47a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	f04f 0300 	mov.w	r3, #0
 800c486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c48a:	4629      	mov	r1, r5
 800c48c:	008b      	lsls	r3, r1, #2
 800c48e:	4621      	mov	r1, r4
 800c490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c494:	4621      	mov	r1, r4
 800c496:	008a      	lsls	r2, r1, #2
 800c498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c49c:	f7f4 fbfc 	bl	8000c98 <__aeabi_uldivmod>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4b60      	ldr	r3, [pc, #384]	@ (800c628 <UART_SetConfig+0x4e4>)
 800c4a6:	fba3 2302 	umull	r2, r3, r3, r2
 800c4aa:	095b      	lsrs	r3, r3, #5
 800c4ac:	011c      	lsls	r4, r3, #4
 800c4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c4bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	1891      	adds	r1, r2, r2
 800c4c6:	61b9      	str	r1, [r7, #24]
 800c4c8:	415b      	adcs	r3, r3
 800c4ca:	61fb      	str	r3, [r7, #28]
 800c4cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4d0:	4641      	mov	r1, r8
 800c4d2:	1851      	adds	r1, r2, r1
 800c4d4:	6139      	str	r1, [r7, #16]
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	414b      	adcs	r3, r1
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	f04f 0200 	mov.w	r2, #0
 800c4e0:	f04f 0300 	mov.w	r3, #0
 800c4e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4e8:	4659      	mov	r1, fp
 800c4ea:	00cb      	lsls	r3, r1, #3
 800c4ec:	4651      	mov	r1, sl
 800c4ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4f2:	4651      	mov	r1, sl
 800c4f4:	00ca      	lsls	r2, r1, #3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	4642      	mov	r2, r8
 800c4fe:	189b      	adds	r3, r3, r2
 800c500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c504:	464b      	mov	r3, r9
 800c506:	460a      	mov	r2, r1
 800c508:	eb42 0303 	adc.w	r3, r2, r3
 800c50c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c51a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c51c:	f04f 0200 	mov.w	r2, #0
 800c520:	f04f 0300 	mov.w	r3, #0
 800c524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c528:	4649      	mov	r1, r9
 800c52a:	008b      	lsls	r3, r1, #2
 800c52c:	4641      	mov	r1, r8
 800c52e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c532:	4641      	mov	r1, r8
 800c534:	008a      	lsls	r2, r1, #2
 800c536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c53a:	f7f4 fbad 	bl	8000c98 <__aeabi_uldivmod>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4611      	mov	r1, r2
 800c544:	4b38      	ldr	r3, [pc, #224]	@ (800c628 <UART_SetConfig+0x4e4>)
 800c546:	fba3 2301 	umull	r2, r3, r3, r1
 800c54a:	095b      	lsrs	r3, r3, #5
 800c54c:	2264      	movs	r2, #100	@ 0x64
 800c54e:	fb02 f303 	mul.w	r3, r2, r3
 800c552:	1acb      	subs	r3, r1, r3
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	3332      	adds	r3, #50	@ 0x32
 800c558:	4a33      	ldr	r2, [pc, #204]	@ (800c628 <UART_SetConfig+0x4e4>)
 800c55a:	fba2 2303 	umull	r2, r3, r2, r3
 800c55e:	095b      	lsrs	r3, r3, #5
 800c560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c564:	441c      	add	r4, r3
 800c566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c56a:	2200      	movs	r2, #0
 800c56c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c56e:	677a      	str	r2, [r7, #116]	@ 0x74
 800c570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c574:	4642      	mov	r2, r8
 800c576:	464b      	mov	r3, r9
 800c578:	1891      	adds	r1, r2, r2
 800c57a:	60b9      	str	r1, [r7, #8]
 800c57c:	415b      	adcs	r3, r3
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c584:	4641      	mov	r1, r8
 800c586:	1851      	adds	r1, r2, r1
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	4649      	mov	r1, r9
 800c58c:	414b      	adcs	r3, r1
 800c58e:	607b      	str	r3, [r7, #4]
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	f04f 0300 	mov.w	r3, #0
 800c598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c59c:	4659      	mov	r1, fp
 800c59e:	00cb      	lsls	r3, r1, #3
 800c5a0:	4651      	mov	r1, sl
 800c5a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5a6:	4651      	mov	r1, sl
 800c5a8:	00ca      	lsls	r2, r1, #3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	189b      	adds	r3, r3, r2
 800c5b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5b6:	464b      	mov	r3, r9
 800c5b8:	460a      	mov	r2, r1
 800c5ba:	eb42 0303 	adc.w	r3, r2, r3
 800c5be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5ca:	667a      	str	r2, [r7, #100]	@ 0x64
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c5d8:	4649      	mov	r1, r9
 800c5da:	008b      	lsls	r3, r1, #2
 800c5dc:	4641      	mov	r1, r8
 800c5de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5e2:	4641      	mov	r1, r8
 800c5e4:	008a      	lsls	r2, r1, #2
 800c5e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c5ea:	f7f4 fb55 	bl	8000c98 <__aeabi_uldivmod>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c628 <UART_SetConfig+0x4e4>)
 800c5f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c5f8:	095b      	lsrs	r3, r3, #5
 800c5fa:	2164      	movs	r1, #100	@ 0x64
 800c5fc:	fb01 f303 	mul.w	r3, r1, r3
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	3332      	adds	r3, #50	@ 0x32
 800c606:	4a08      	ldr	r2, [pc, #32]	@ (800c628 <UART_SetConfig+0x4e4>)
 800c608:	fba2 2303 	umull	r2, r3, r2, r3
 800c60c:	095b      	lsrs	r3, r3, #5
 800c60e:	f003 020f 	and.w	r2, r3, #15
 800c612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4422      	add	r2, r4
 800c61a:	609a      	str	r2, [r3, #8]
}
 800c61c:	bf00      	nop
 800c61e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c622:	46bd      	mov	sp, r7
 800c624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c628:	51eb851f 	.word	0x51eb851f

0800c62c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c630:	4904      	ldr	r1, [pc, #16]	@ (800c644 <MX_FATFS_Init+0x18>)
 800c632:	4805      	ldr	r0, [pc, #20]	@ (800c648 <MX_FATFS_Init+0x1c>)
 800c634:	f000 f8b0 	bl	800c798 <FATFS_LinkDriver>
 800c638:	4603      	mov	r3, r0
 800c63a:	461a      	mov	r2, r3
 800c63c:	4b03      	ldr	r3, [pc, #12]	@ (800c64c <MX_FATFS_Init+0x20>)
 800c63e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c640:	bf00      	nop
 800c642:	bd80      	pop	{r7, pc}
 800c644:	20001b60 	.word	0x20001b60
 800c648:	20000920 	.word	0x20000920
 800c64c:	20001b5c 	.word	0x20001b5c

0800c650 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c65a:	4b06      	ldr	r3, [pc, #24]	@ (800c674 <USER_initialize+0x24>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c660:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <USER_initialize+0x24>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	2000091d 	.word	0x2000091d

0800c678 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c682:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <USER_status+0x24>)
 800c684:	2201      	movs	r2, #1
 800c686:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c688:	4b04      	ldr	r3, [pc, #16]	@ (800c69c <USER_status+0x24>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	2000091d 	.word	0x2000091d

0800c6a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
 800c6aa:	603b      	str	r3, [r7, #0]
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c6b0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c6ce:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	603a      	str	r2, [r7, #0]
 800c6e6:	71fb      	strb	r3, [r7, #7]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	73fb      	strb	r3, [r7, #15]
    return res;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
	...

0800c700 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	4613      	mov	r3, r2
 800c70c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c70e:	2301      	movs	r3, #1
 800c710:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c716:	4b1f      	ldr	r3, [pc, #124]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c718:	7a5b      	ldrb	r3, [r3, #9]
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d131      	bne.n	800c784 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c720:	4b1c      	ldr	r3, [pc, #112]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c722:	7a5b      	ldrb	r3, [r3, #9]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	461a      	mov	r2, r3
 800c728:	4b1a      	ldr	r3, [pc, #104]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c72a:	2100      	movs	r1, #0
 800c72c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c72e:	4b19      	ldr	r3, [pc, #100]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c730:	7a5b      	ldrb	r3, [r3, #9]
 800c732:	b2db      	uxtb	r3, r3
 800c734:	4a17      	ldr	r2, [pc, #92]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c73e:	4b15      	ldr	r3, [pc, #84]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c740:	7a5b      	ldrb	r3, [r3, #9]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	4b13      	ldr	r3, [pc, #76]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c748:	4413      	add	r3, r2
 800c74a:	79fa      	ldrb	r2, [r7, #7]
 800c74c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c74e:	4b11      	ldr	r3, [pc, #68]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c750:	7a5b      	ldrb	r3, [r3, #9]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	b2d1      	uxtb	r1, r2
 800c758:	4a0e      	ldr	r2, [pc, #56]	@ (800c794 <FATFS_LinkDriverEx+0x94>)
 800c75a:	7251      	strb	r1, [r2, #9]
 800c75c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c75e:	7dbb      	ldrb	r3, [r7, #22]
 800c760:	3330      	adds	r3, #48	@ 0x30
 800c762:	b2da      	uxtb	r2, r3
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	3301      	adds	r3, #1
 800c76c:	223a      	movs	r2, #58	@ 0x3a
 800c76e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	3302      	adds	r3, #2
 800c774:	222f      	movs	r2, #47	@ 0x2f
 800c776:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	3303      	adds	r3, #3
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c780:	2300      	movs	r3, #0
 800c782:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c784:	7dfb      	ldrb	r3, [r7, #23]
}
 800c786:	4618      	mov	r0, r3
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20001b64 	.word	0x20001b64

0800c798 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff ffaa 	bl	800c700 <FATFS_LinkDriverEx>
 800c7ac:	4603      	mov	r3, r0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <malloc>:
 800c7b8:	4b02      	ldr	r3, [pc, #8]	@ (800c7c4 <malloc+0xc>)
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	6818      	ldr	r0, [r3, #0]
 800c7be:	f000 b82d 	b.w	800c81c <_malloc_r>
 800c7c2:	bf00      	nop
 800c7c4:	20000934 	.word	0x20000934

0800c7c8 <free>:
 800c7c8:	4b02      	ldr	r3, [pc, #8]	@ (800c7d4 <free+0xc>)
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	6818      	ldr	r0, [r3, #0]
 800c7ce:	f000 b8f5 	b.w	800c9bc <_free_r>
 800c7d2:	bf00      	nop
 800c7d4:	20000934 	.word	0x20000934

0800c7d8 <sbrk_aligned>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	4e0f      	ldr	r6, [pc, #60]	@ (800c818 <sbrk_aligned+0x40>)
 800c7dc:	460c      	mov	r4, r1
 800c7de:	6831      	ldr	r1, [r6, #0]
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	b911      	cbnz	r1, 800c7ea <sbrk_aligned+0x12>
 800c7e4:	f000 f8ae 	bl	800c944 <_sbrk_r>
 800c7e8:	6030      	str	r0, [r6, #0]
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	f000 f8a9 	bl	800c944 <_sbrk_r>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d103      	bne.n	800c7fe <sbrk_aligned+0x26>
 800c7f6:	f04f 34ff 	mov.w	r4, #4294967295
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	1cc4      	adds	r4, r0, #3
 800c800:	f024 0403 	bic.w	r4, r4, #3
 800c804:	42a0      	cmp	r0, r4
 800c806:	d0f8      	beq.n	800c7fa <sbrk_aligned+0x22>
 800c808:	1a21      	subs	r1, r4, r0
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 f89a 	bl	800c944 <_sbrk_r>
 800c810:	3001      	adds	r0, #1
 800c812:	d1f2      	bne.n	800c7fa <sbrk_aligned+0x22>
 800c814:	e7ef      	b.n	800c7f6 <sbrk_aligned+0x1e>
 800c816:	bf00      	nop
 800c818:	20001b70 	.word	0x20001b70

0800c81c <_malloc_r>:
 800c81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c820:	1ccd      	adds	r5, r1, #3
 800c822:	f025 0503 	bic.w	r5, r5, #3
 800c826:	3508      	adds	r5, #8
 800c828:	2d0c      	cmp	r5, #12
 800c82a:	bf38      	it	cc
 800c82c:	250c      	movcc	r5, #12
 800c82e:	2d00      	cmp	r5, #0
 800c830:	4606      	mov	r6, r0
 800c832:	db01      	blt.n	800c838 <_malloc_r+0x1c>
 800c834:	42a9      	cmp	r1, r5
 800c836:	d904      	bls.n	800c842 <_malloc_r+0x26>
 800c838:	230c      	movs	r3, #12
 800c83a:	6033      	str	r3, [r6, #0]
 800c83c:	2000      	movs	r0, #0
 800c83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c918 <_malloc_r+0xfc>
 800c846:	f000 f869 	bl	800c91c <__malloc_lock>
 800c84a:	f8d8 3000 	ldr.w	r3, [r8]
 800c84e:	461c      	mov	r4, r3
 800c850:	bb44      	cbnz	r4, 800c8a4 <_malloc_r+0x88>
 800c852:	4629      	mov	r1, r5
 800c854:	4630      	mov	r0, r6
 800c856:	f7ff ffbf 	bl	800c7d8 <sbrk_aligned>
 800c85a:	1c43      	adds	r3, r0, #1
 800c85c:	4604      	mov	r4, r0
 800c85e:	d158      	bne.n	800c912 <_malloc_r+0xf6>
 800c860:	f8d8 4000 	ldr.w	r4, [r8]
 800c864:	4627      	mov	r7, r4
 800c866:	2f00      	cmp	r7, #0
 800c868:	d143      	bne.n	800c8f2 <_malloc_r+0xd6>
 800c86a:	2c00      	cmp	r4, #0
 800c86c:	d04b      	beq.n	800c906 <_malloc_r+0xea>
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	4639      	mov	r1, r7
 800c872:	4630      	mov	r0, r6
 800c874:	eb04 0903 	add.w	r9, r4, r3
 800c878:	f000 f864 	bl	800c944 <_sbrk_r>
 800c87c:	4581      	cmp	r9, r0
 800c87e:	d142      	bne.n	800c906 <_malloc_r+0xea>
 800c880:	6821      	ldr	r1, [r4, #0]
 800c882:	1a6d      	subs	r5, r5, r1
 800c884:	4629      	mov	r1, r5
 800c886:	4630      	mov	r0, r6
 800c888:	f7ff ffa6 	bl	800c7d8 <sbrk_aligned>
 800c88c:	3001      	adds	r0, #1
 800c88e:	d03a      	beq.n	800c906 <_malloc_r+0xea>
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	442b      	add	r3, r5
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	f8d8 3000 	ldr.w	r3, [r8]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	bb62      	cbnz	r2, 800c8f8 <_malloc_r+0xdc>
 800c89e:	f8c8 7000 	str.w	r7, [r8]
 800c8a2:	e00f      	b.n	800c8c4 <_malloc_r+0xa8>
 800c8a4:	6822      	ldr	r2, [r4, #0]
 800c8a6:	1b52      	subs	r2, r2, r5
 800c8a8:	d420      	bmi.n	800c8ec <_malloc_r+0xd0>
 800c8aa:	2a0b      	cmp	r2, #11
 800c8ac:	d917      	bls.n	800c8de <_malloc_r+0xc2>
 800c8ae:	1961      	adds	r1, r4, r5
 800c8b0:	42a3      	cmp	r3, r4
 800c8b2:	6025      	str	r5, [r4, #0]
 800c8b4:	bf18      	it	ne
 800c8b6:	6059      	strne	r1, [r3, #4]
 800c8b8:	6863      	ldr	r3, [r4, #4]
 800c8ba:	bf08      	it	eq
 800c8bc:	f8c8 1000 	streq.w	r1, [r8]
 800c8c0:	5162      	str	r2, [r4, r5]
 800c8c2:	604b      	str	r3, [r1, #4]
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f000 f82f 	bl	800c928 <__malloc_unlock>
 800c8ca:	f104 000b 	add.w	r0, r4, #11
 800c8ce:	1d23      	adds	r3, r4, #4
 800c8d0:	f020 0007 	bic.w	r0, r0, #7
 800c8d4:	1ac2      	subs	r2, r0, r3
 800c8d6:	bf1c      	itt	ne
 800c8d8:	1a1b      	subne	r3, r3, r0
 800c8da:	50a3      	strne	r3, [r4, r2]
 800c8dc:	e7af      	b.n	800c83e <_malloc_r+0x22>
 800c8de:	6862      	ldr	r2, [r4, #4]
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	bf0c      	ite	eq
 800c8e4:	f8c8 2000 	streq.w	r2, [r8]
 800c8e8:	605a      	strne	r2, [r3, #4]
 800c8ea:	e7eb      	b.n	800c8c4 <_malloc_r+0xa8>
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	6864      	ldr	r4, [r4, #4]
 800c8f0:	e7ae      	b.n	800c850 <_malloc_r+0x34>
 800c8f2:	463c      	mov	r4, r7
 800c8f4:	687f      	ldr	r7, [r7, #4]
 800c8f6:	e7b6      	b.n	800c866 <_malloc_r+0x4a>
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	42a3      	cmp	r3, r4
 800c8fe:	d1fb      	bne.n	800c8f8 <_malloc_r+0xdc>
 800c900:	2300      	movs	r3, #0
 800c902:	6053      	str	r3, [r2, #4]
 800c904:	e7de      	b.n	800c8c4 <_malloc_r+0xa8>
 800c906:	230c      	movs	r3, #12
 800c908:	6033      	str	r3, [r6, #0]
 800c90a:	4630      	mov	r0, r6
 800c90c:	f000 f80c 	bl	800c928 <__malloc_unlock>
 800c910:	e794      	b.n	800c83c <_malloc_r+0x20>
 800c912:	6005      	str	r5, [r0, #0]
 800c914:	e7d6      	b.n	800c8c4 <_malloc_r+0xa8>
 800c916:	bf00      	nop
 800c918:	20001b74 	.word	0x20001b74

0800c91c <__malloc_lock>:
 800c91c:	4801      	ldr	r0, [pc, #4]	@ (800c924 <__malloc_lock+0x8>)
 800c91e:	f000 b84b 	b.w	800c9b8 <__retarget_lock_acquire_recursive>
 800c922:	bf00      	nop
 800c924:	20001cb4 	.word	0x20001cb4

0800c928 <__malloc_unlock>:
 800c928:	4801      	ldr	r0, [pc, #4]	@ (800c930 <__malloc_unlock+0x8>)
 800c92a:	f000 b846 	b.w	800c9ba <__retarget_lock_release_recursive>
 800c92e:	bf00      	nop
 800c930:	20001cb4 	.word	0x20001cb4

0800c934 <memset>:
 800c934:	4402      	add	r2, r0
 800c936:	4603      	mov	r3, r0
 800c938:	4293      	cmp	r3, r2
 800c93a:	d100      	bne.n	800c93e <memset+0xa>
 800c93c:	4770      	bx	lr
 800c93e:	f803 1b01 	strb.w	r1, [r3], #1
 800c942:	e7f9      	b.n	800c938 <memset+0x4>

0800c944 <_sbrk_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d06      	ldr	r5, [pc, #24]	@ (800c960 <_sbrk_r+0x1c>)
 800c948:	2300      	movs	r3, #0
 800c94a:	4604      	mov	r4, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f7fb fb28 	bl	8007fa4 <_sbrk>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_sbrk_r+0x1a>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_sbrk_r+0x1a>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20001cb0 	.word	0x20001cb0

0800c964 <__errno>:
 800c964:	4b01      	ldr	r3, [pc, #4]	@ (800c96c <__errno+0x8>)
 800c966:	6818      	ldr	r0, [r3, #0]
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	20000934 	.word	0x20000934

0800c970 <__libc_init_array>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	4d0d      	ldr	r5, [pc, #52]	@ (800c9a8 <__libc_init_array+0x38>)
 800c974:	4c0d      	ldr	r4, [pc, #52]	@ (800c9ac <__libc_init_array+0x3c>)
 800c976:	1b64      	subs	r4, r4, r5
 800c978:	10a4      	asrs	r4, r4, #2
 800c97a:	2600      	movs	r6, #0
 800c97c:	42a6      	cmp	r6, r4
 800c97e:	d109      	bne.n	800c994 <__libc_init_array+0x24>
 800c980:	4d0b      	ldr	r5, [pc, #44]	@ (800c9b0 <__libc_init_array+0x40>)
 800c982:	4c0c      	ldr	r4, [pc, #48]	@ (800c9b4 <__libc_init_array+0x44>)
 800c984:	f000 f864 	bl	800ca50 <_init>
 800c988:	1b64      	subs	r4, r4, r5
 800c98a:	10a4      	asrs	r4, r4, #2
 800c98c:	2600      	movs	r6, #0
 800c98e:	42a6      	cmp	r6, r4
 800c990:	d105      	bne.n	800c99e <__libc_init_array+0x2e>
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	f855 3b04 	ldr.w	r3, [r5], #4
 800c998:	4798      	blx	r3
 800c99a:	3601      	adds	r6, #1
 800c99c:	e7ee      	b.n	800c97c <__libc_init_array+0xc>
 800c99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a2:	4798      	blx	r3
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	e7f2      	b.n	800c98e <__libc_init_array+0x1e>
 800c9a8:	0800dfa4 	.word	0x0800dfa4
 800c9ac:	0800dfa4 	.word	0x0800dfa4
 800c9b0:	0800dfa4 	.word	0x0800dfa4
 800c9b4:	0800dfa8 	.word	0x0800dfa8

0800c9b8 <__retarget_lock_acquire_recursive>:
 800c9b8:	4770      	bx	lr

0800c9ba <__retarget_lock_release_recursive>:
 800c9ba:	4770      	bx	lr

0800c9bc <_free_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4605      	mov	r5, r0
 800c9c0:	2900      	cmp	r1, #0
 800c9c2:	d041      	beq.n	800ca48 <_free_r+0x8c>
 800c9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c8:	1f0c      	subs	r4, r1, #4
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bfb8      	it	lt
 800c9ce:	18e4      	addlt	r4, r4, r3
 800c9d0:	f7ff ffa4 	bl	800c91c <__malloc_lock>
 800c9d4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca4c <_free_r+0x90>)
 800c9d6:	6813      	ldr	r3, [r2, #0]
 800c9d8:	b933      	cbnz	r3, 800c9e8 <_free_r+0x2c>
 800c9da:	6063      	str	r3, [r4, #4]
 800c9dc:	6014      	str	r4, [r2, #0]
 800c9de:	4628      	mov	r0, r5
 800c9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9e4:	f7ff bfa0 	b.w	800c928 <__malloc_unlock>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d908      	bls.n	800c9fe <_free_r+0x42>
 800c9ec:	6820      	ldr	r0, [r4, #0]
 800c9ee:	1821      	adds	r1, r4, r0
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf01      	itttt	eq
 800c9f4:	6819      	ldreq	r1, [r3, #0]
 800c9f6:	685b      	ldreq	r3, [r3, #4]
 800c9f8:	1809      	addeq	r1, r1, r0
 800c9fa:	6021      	streq	r1, [r4, #0]
 800c9fc:	e7ed      	b.n	800c9da <_free_r+0x1e>
 800c9fe:	461a      	mov	r2, r3
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	b10b      	cbz	r3, 800ca08 <_free_r+0x4c>
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d9fa      	bls.n	800c9fe <_free_r+0x42>
 800ca08:	6811      	ldr	r1, [r2, #0]
 800ca0a:	1850      	adds	r0, r2, r1
 800ca0c:	42a0      	cmp	r0, r4
 800ca0e:	d10b      	bne.n	800ca28 <_free_r+0x6c>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	4401      	add	r1, r0
 800ca14:	1850      	adds	r0, r2, r1
 800ca16:	4283      	cmp	r3, r0
 800ca18:	6011      	str	r1, [r2, #0]
 800ca1a:	d1e0      	bne.n	800c9de <_free_r+0x22>
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	6053      	str	r3, [r2, #4]
 800ca22:	4408      	add	r0, r1
 800ca24:	6010      	str	r0, [r2, #0]
 800ca26:	e7da      	b.n	800c9de <_free_r+0x22>
 800ca28:	d902      	bls.n	800ca30 <_free_r+0x74>
 800ca2a:	230c      	movs	r3, #12
 800ca2c:	602b      	str	r3, [r5, #0]
 800ca2e:	e7d6      	b.n	800c9de <_free_r+0x22>
 800ca30:	6820      	ldr	r0, [r4, #0]
 800ca32:	1821      	adds	r1, r4, r0
 800ca34:	428b      	cmp	r3, r1
 800ca36:	bf04      	itt	eq
 800ca38:	6819      	ldreq	r1, [r3, #0]
 800ca3a:	685b      	ldreq	r3, [r3, #4]
 800ca3c:	6063      	str	r3, [r4, #4]
 800ca3e:	bf04      	itt	eq
 800ca40:	1809      	addeq	r1, r1, r0
 800ca42:	6021      	streq	r1, [r4, #0]
 800ca44:	6054      	str	r4, [r2, #4]
 800ca46:	e7ca      	b.n	800c9de <_free_r+0x22>
 800ca48:	bd38      	pop	{r3, r4, r5, pc}
 800ca4a:	bf00      	nop
 800ca4c:	20001b74 	.word	0x20001b74

0800ca50 <_init>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	bf00      	nop
 800ca54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca56:	bc08      	pop	{r3}
 800ca58:	469e      	mov	lr, r3
 800ca5a:	4770      	bx	lr

0800ca5c <_fini>:
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	bf00      	nop
 800ca60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca62:	bc08      	pop	{r3}
 800ca64:	469e      	mov	lr, r3
 800ca66:	4770      	bx	lr
