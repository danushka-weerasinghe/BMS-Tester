
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b168  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004888  0800b318  0800b318  0000c318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fba0  0800fba0  0001132c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fba0  0800fba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fba8  0800fba8  0001132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fba8  0800fba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbac  0800fbac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  0800fbb0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001132c  2**0
                  CONTENTS
 10 .bss          00000978  2000032c  2000032c  0001132c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ca4  20000ca4  0001132c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001132c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000586e8  00000000  00000000  0001135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a27  00000000  00000000  00069a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004048  00000000  00000000  0006f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003058  00000000  00000000  000734b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027258  00000000  00000000  00076510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ca65  00000000  00000000  0009d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6c3c  00000000  00000000  000ca1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c0e09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012710  00000000  00000000  001c0e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001d355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b300 	.word	0x0800b300

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000330 	.word	0x20000330
 80001ec:	0800b300 	.word	0x0800b300

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	817b      	strh	r3, [r7, #10]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	813b      	strh	r3, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000ed2:	897a      	ldrh	r2, [r7, #10]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	893a      	ldrh	r2, [r7, #8]
 8000edc:	8b3b      	ldrh	r3, [r7, #24]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	893a      	ldrh	r2, [r7, #8]
 8000ee4:	8979      	ldrh	r1, [r7, #10]
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f001 f86f 	bl	8001fce <u8g2_IsIntersection>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d012      	beq.n	8000f1c <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000ef6:	e00d      	b.n	8000f14 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	893a      	ldrh	r2, [r7, #8]
 8000efc:	8979      	ldrh	r1, [r7, #10]
 8000efe:	2000      	movs	r0, #0
 8000f00:	9000      	str	r0, [sp, #0]
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 ffa5 	bl	8001e52 <u8g2_DrawHVLine>
    y++;    
 8000f08:	893b      	ldrh	r3, [r7, #8]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	813b      	strh	r3, [r7, #8]
    h--;
 8000f0e:	8b3b      	ldrh	r3, [r7, #24]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000f14:	8b3b      	ldrh	r3, [r7, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ee      	bne.n	8000ef8 <u8g2_DrawBox+0x40>
 8000f1a:	e000      	b.n	8000f1e <u8g2_DrawBox+0x66>
    return;
 8000f1c:	bf00      	nop
  }
}
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	460b      	mov	r3, r1
 8000f38:	813b      	strh	r3, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f42:	897a      	ldrh	r2, [r7, #10]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4413      	add	r3, r2
 8000f48:	b298      	uxth	r0, r3
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	8c3b      	ldrh	r3, [r7, #32]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	893a      	ldrh	r2, [r7, #8]
 8000f54:	8979      	ldrh	r1, [r7, #10]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4603      	mov	r3, r0
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f001 f837 	bl	8001fce <u8g2_IsIntersection>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d037      	beq.n	8000fd6 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	893a      	ldrh	r2, [r7, #8]
 8000f6a:	8979      	ldrh	r1, [r7, #10]
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	9000      	str	r0, [sp, #0]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 ff6e 	bl	8001e52 <u8g2_DrawHVLine>
  if (h >= 2) {
 8000f76:	8c3b      	ldrh	r3, [r7, #32]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d92d      	bls.n	8000fd8 <u8g2_DrawFrame+0xb4>
    h-=2;
 8000f7c:	8c3b      	ldrh	r3, [r7, #32]
 8000f7e:	3b02      	subs	r3, #2
 8000f80:	843b      	strh	r3, [r7, #32]
    y++;
 8000f82:	893b      	ldrh	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8000f88:	8c3b      	ldrh	r3, [r7, #32]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d01a      	beq.n	8000fc4 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f8e:	8c3b      	ldrh	r3, [r7, #32]
 8000f90:	893a      	ldrh	r2, [r7, #8]
 8000f92:	8979      	ldrh	r1, [r7, #10]
 8000f94:	2001      	movs	r0, #1
 8000f96:	9000      	str	r0, [sp, #0]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 ff5a 	bl	8001e52 <u8g2_DrawHVLine>
      x+=w;
 8000f9e:	897a      	ldrh	r2, [r7, #10]
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	817b      	strh	r3, [r7, #10]
      x--;
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000fac:	8c3b      	ldrh	r3, [r7, #32]
 8000fae:	893a      	ldrh	r2, [r7, #8]
 8000fb0:	8979      	ldrh	r1, [r7, #10]
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 ff4b 	bl	8001e52 <u8g2_DrawHVLine>
      y+=h;
 8000fbc:	893a      	ldrh	r2, [r7, #8]
 8000fbe:	8c3b      	ldrh	r3, [r7, #32]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	893a      	ldrh	r2, [r7, #8]
 8000fc8:	8af9      	ldrh	r1, [r7, #22]
 8000fca:	2000      	movs	r0, #0
 8000fcc:	9000      	str	r0, [sp, #0]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 ff3f 	bl	8001e52 <u8g2_DrawHVLine>
 8000fd4:	e000      	b.n	8000fd8 <u8g2_DrawFrame+0xb4>
    return;
 8000fd6:	bf00      	nop
  }
}
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	7c1b      	ldrb	r3, [r3, #16]
 8000fec:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f008 f962 	bl	80092d6 <memset>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af02      	add	r7, sp, #8
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
 8001026:	4613      	mov	r3, r2
 8001028:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	7c1b      	ldrb	r3, [r3, #16]
 8001030:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	b29b      	uxth	r3, r3
 8001040:	89ba      	ldrh	r2, [r7, #12]
 8001042:	fb12 f303 	smulbb	r3, r2, r3
 8001046:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001056:	7bf9      	ldrb	r1, [r7, #15]
 8001058:	78ba      	ldrb	r2, [r7, #2]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	460b      	mov	r3, r1
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 fc99 	bl	800299a <u8x8_DrawTile>
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001082:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800108a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	7c5b      	ldrb	r3, [r3, #17]
 8001092:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001094:	7bba      	ldrb	r2, [r7, #14]
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffbd 	bl	800101a <u8g2_send_tile_row>
    src_row++;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	3301      	adds	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	7b7b      	ldrb	r3, [r7, #13]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d203      	bcs.n	80010bc <u8g2_send_buffer+0x4c>
 80010b4:	7bba      	ldrb	r2, [r7, #14]
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3eb      	bcc.n	8001094 <u8g2_send_buffer+0x24>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffcf 	bl	8001070 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f001 fcc3 	bl	8002a5e <u8x8_RefreshDisplay>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff5b 	bl	8000fde <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffd8 	bl	80010e0 <u8g2_SetBufferCurrTileRow>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff95 	bl	8001070 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800114c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	4413      	add	r3, r2
 8001158:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	7c5b      	ldrb	r3, [r3, #17]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	429a      	cmp	r2, r3
 8001164:	d304      	bcc.n	8001170 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f001 fc79 	bl	8002a5e <u8x8_RefreshDisplay>
    return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e00d      	b.n	800118c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff2f 	bl	8000fde <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffab 	bl	80010e0 <u8g2_SetBufferCurrTileRow>
  return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffb7 	bl	8001110 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffc8 	bl	8001138 <u8g2_NextPage>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80011ae:	2100      	movs	r1, #0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff95 	bl	80010e0 <u8g2_SetBufferCurrTileRow>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2208      	movs	r2, #8
 80011cc:	701a      	strb	r2, [r3, #0]
  return buf;
 80011ce:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20000348 	.word	0x20000348

080011e0 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <u8g2_Setup_st7565_64128n_f+0x44>)
 80011f6:	490c      	ldr	r1, [pc, #48]	@ (8001228 <u8g2_Setup_st7565_64128n_f+0x48>)
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f001 fc91 	bl	8002b20 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80011fe:	f107 0313 	add.w	r3, r7, #19
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffdc 	bl	80011c0 <u8g2_m_16_8_f>
 8001208:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800120a:	7cfa      	ldrb	r2, [r7, #19]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <u8g2_Setup_st7565_64128n_f+0x4c>)
 8001212:	6979      	ldr	r1, [r7, #20]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 ffc4 	bl	80021a2 <u8g2_SetupBuffer>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	080026b5 	.word	0x080026b5
 8001228:	08002855 	.word	0x08002855
 800122c:	08002025 	.word	0x08002025

08001230 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	81fb      	strh	r3, [r7, #14]
    font++;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	4413      	add	r3, r2
 8001284:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001286:	89fb      	ldrh	r3, [r7, #14]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800129e:	2100      	movs	r1, #0
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7ff ffc5 	bl	8001230 <u8g2_font_get_byte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80012ae:	2101      	movs	r1, #1
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f7ff ffbd 	bl	8001230 <u8g2_font_get_byte>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80012be:	2102      	movs	r1, #2
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff ffb5 	bl	8001230 <u8g2_font_get_byte>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80012ce:	2103      	movs	r1, #3
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f7ff ffad 	bl	8001230 <u8g2_font_get_byte>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80012de:	2104      	movs	r1, #4
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f7ff ffa5 	bl	8001230 <u8g2_font_get_byte>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80012ee:	2105      	movs	r1, #5
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f7ff ff9d 	bl	8001230 <u8g2_font_get_byte>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80012fe:	2106      	movs	r1, #6
 8001300:	6838      	ldr	r0, [r7, #0]
 8001302:	f7ff ff95 	bl	8001230 <u8g2_font_get_byte>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800130e:	2107      	movs	r1, #7
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f7ff ff8d 	bl	8001230 <u8g2_font_get_byte>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800131e:	2108      	movs	r1, #8
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff ff85 	bl	8001230 <u8g2_font_get_byte>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800132e:	2109      	movs	r1, #9
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f7ff ff7d 	bl	8001230 <u8g2_font_get_byte>
 8001336:	4603      	mov	r3, r0
 8001338:	b25a      	sxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800133e:	210a      	movs	r1, #10
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f7ff ff75 	bl	8001230 <u8g2_font_get_byte>
 8001346:	4603      	mov	r3, r0
 8001348:	b25a      	sxtb	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800134e:	210b      	movs	r1, #11
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f7ff ff6d 	bl	8001230 <u8g2_font_get_byte>
 8001356:	4603      	mov	r3, r0
 8001358:	b25a      	sxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800135e:	210c      	movs	r1, #12
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ff65 	bl	8001230 <u8g2_font_get_byte>
 8001366:	4603      	mov	r3, r0
 8001368:	b25a      	sxtb	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800136e:	210d      	movs	r1, #13
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff ff5d 	bl	8001230 <u8g2_font_get_byte>
 8001376:	4603      	mov	r3, r0
 8001378:	b25a      	sxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800137e:	210e      	movs	r1, #14
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f7ff ff55 	bl	8001230 <u8g2_font_get_byte>
 8001386:	4603      	mov	r3, r0
 8001388:	b25a      	sxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800138e:	210f      	movs	r1, #15
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f7ff ff4d 	bl	8001230 <u8g2_font_get_byte>
 8001396:	4603      	mov	r3, r0
 8001398:	b25a      	sxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800139e:	2110      	movs	r1, #16
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f7ff ff45 	bl	8001230 <u8g2_font_get_byte>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80013ae:	2111      	movs	r1, #17
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ff4f 	bl	8001254 <u8g2_font_get_word>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80013be:	2113      	movs	r1, #19
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff ff47 	bl	8001254 <u8g2_font_get_word>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80013ce:	2115      	movs	r1, #21
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f7ff ff3f 	bl	8001254 <u8g2_font_get_word>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	82da      	strh	r2, [r3, #22]
#endif
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7b1b      	ldrb	r3, [r3, #12]
 80013f6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	fa42 f303 	asr.w	r3, r2, r3
 8001408:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800140e:	7bba      	ldrb	r2, [r7, #14]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	4413      	add	r3, r2
 8001414:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	2b07      	cmp	r3, #7
 800141a:	d91a      	bls.n	8001452 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800141c:	2308      	movs	r3, #8
 800141e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001420:	7b3a      	ldrb	r2, [r7, #12]
 8001422:	7b7b      	ldrb	r3, [r7, #13]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	7b3b      	ldrb	r3, [r7, #12]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
 800144a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	3b08      	subs	r3, #8
 8001450:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4013      	ands	r3, r2
 8001466:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7bba      	ldrb	r2, [r7, #14]
 800146c:	731a      	strb	r2, [r3, #12]
  return val;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffaa 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	3b01      	subs	r3, #1
 800149e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80014a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	73fb      	strb	r3, [r7, #15]
  return v;
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80014c2:	b490      	push	{r4, r7}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4604      	mov	r4, r0
 80014ca:	4608      	mov	r0, r1
 80014cc:	4611      	mov	r1, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	4603      	mov	r3, r0
 80014d6:	717b      	strb	r3, [r7, #5]
 80014d8:	460b      	mov	r3, r1
 80014da:	713b      	strb	r3, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d014      	beq.n	8001510 <u8g2_add_vector_y+0x4e>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	dc19      	bgt.n	800151e <u8g2_add_vector_y+0x5c>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <u8g2_add_vector_y+0x32>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <u8g2_add_vector_y+0x40>
 80014f2:	e014      	b.n	800151e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80014f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4413      	add	r3, r2
 80014fe:	80fb      	strh	r3, [r7, #6]
      break;
 8001500:	e014      	b.n	800152c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001502:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001506:	b29a      	uxth	r2, r3
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4413      	add	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
      break;
 800150e:	e00d      	b.n	800152c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001510:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001514:	b29b      	uxth	r3, r3
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	80fb      	strh	r3, [r7, #6]
      break;
 800151c:	e006      	b.n	800152c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800151e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001522:	b29b      	uxth	r3, r3
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	80fb      	strh	r3, [r7, #6]
      break;      
 800152a:	bf00      	nop
  }
  return dy;
 800152c:	88fb      	ldrh	r3, [r7, #6]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bc90      	pop	{r4, r7}
 8001536:	4770      	bx	lr

08001538 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001538:	b490      	push	{r4, r7}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4603      	mov	r3, r0
 800154c:	717b      	strb	r3, [r7, #5]
 800154e:	460b      	mov	r3, r1
 8001550:	713b      	strb	r3, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d014      	beq.n	8001586 <u8g2_add_vector_x+0x4e>
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc19      	bgt.n	8001594 <u8g2_add_vector_x+0x5c>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <u8g2_add_vector_x+0x32>
 8001564:	2b01      	cmp	r3, #1
 8001566:	d007      	beq.n	8001578 <u8g2_add_vector_x+0x40>
 8001568:	e014      	b.n	8001594 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800156a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800156e:	b29a      	uxth	r2, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4413      	add	r3, r2
 8001574:	80fb      	strh	r3, [r7, #6]
      break;
 8001576:	e014      	b.n	80015a2 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001578:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800157c:	b29b      	uxth	r3, r3
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	80fb      	strh	r3, [r7, #6]
      break;
 8001584:	e00d      	b.n	80015a2 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001586:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800158a:	b29b      	uxth	r3, r3
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	80fb      	strh	r3, [r7, #6]
      break;
 8001592:	e006      	b.n	80015a2 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001594:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001598:	b29a      	uxth	r2, r3
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	4413      	add	r3, r2
 800159e:	80fb      	strh	r3, [r7, #6]
      break;      
 80015a0:	bf00      	nop
  }
  return dx;
 80015a2:	88fb      	ldrh	r3, [r7, #6]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc90      	pop	{r4, r7}
 80015ac:	4770      	bx	lr

080015ae <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b088      	sub	sp, #32
 80015b2:	af02      	add	r7, sp, #8
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70fb      	strb	r3, [r7, #3]
 80015ba:	4613      	mov	r3, r2
 80015bc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3360      	adds	r3, #96	@ 0x60
 80015c2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015ce:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80015d6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015de:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	7d7b      	ldrb	r3, [r7, #21]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80015ec:	7dfa      	ldrb	r2, [r7, #23]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d201      	bcs.n	80015f8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	889b      	ldrh	r3, [r3, #4]
 80015fc:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	88db      	ldrh	r3, [r3, #6]
 8001602:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001604:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001608:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	7c1b      	ldrb	r3, [r3, #16]
 8001610:	89b8      	ldrh	r0, [r7, #12]
 8001612:	f7ff ff91 	bl	8001538 <u8g2_add_vector_x>
 8001616:	4603      	mov	r3, r0
 8001618:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800161a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800161e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	7c1b      	ldrb	r3, [r3, #16]
 8001626:	8978      	ldrh	r0, [r7, #10]
 8001628:	f7ff ff4b 	bl	80014c2 <u8g2_add_vector_y>
 800162c:	4603      	mov	r3, r0
 800162e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d010      	beq.n	8001658 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	7b9a      	ldrb	r2, [r3, #14]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	b298      	uxth	r0, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	7c1b      	ldrb	r3, [r3, #16]
 8001648:	897a      	ldrh	r2, [r7, #10]
 800164a:	89b9      	ldrh	r1, [r7, #12]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4603      	mov	r3, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fbfe 	bl	8001e52 <u8g2_DrawHVLine>
 8001656:	e013      	b.n	8001680 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	7b5b      	ldrb	r3, [r3, #13]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10f      	bne.n	8001680 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	7bda      	ldrb	r2, [r3, #15]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800166a:	7dbb      	ldrb	r3, [r7, #22]
 800166c:	b298      	uxth	r0, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	7c1b      	ldrb	r3, [r3, #16]
 8001672:	897a      	ldrh	r2, [r7, #10]
 8001674:	89b9      	ldrh	r1, [r7, #12]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4603      	mov	r3, r0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fbe9 	bl	8001e52 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001680:	7dfa      	ldrb	r2, [r7, #23]
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	429a      	cmp	r2, r3
 8001686:	d309      	bcc.n	800169c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001688:	7dfa      	ldrb	r2, [r7, #23]
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	757b      	strb	r3, [r7, #21]
    ly++;
 8001694:	7d3b      	ldrb	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800169a:	e79d      	b.n	80015d8 <u8g2_font_decode_len+0x2a>
      break;
 800169c:	bf00      	nop
  }
  lx += cnt;
 800169e:	7d7a      	ldrb	r2, [r7, #21]
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	4413      	add	r3, r2
 80016a4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80016a6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80016ae:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	725a      	strb	r2, [r3, #9]
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3360      	adds	r3, #96	@ 0x60
 80016cc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80016e0:	4619      	mov	r1, r3
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff fe7f 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80016f6:	4619      	mov	r1, r3
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fe74 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 80016fe:	4603      	mov	r3, r0
 8001700:	b25a      	sxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7b9b      	ldrb	r3, [r3, #14]
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	73da      	strb	r2, [r3, #15]
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3360      	adds	r3, #96	@ 0x60
 800173a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffbd 	bl	80016be <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800174a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001752:	4619      	mov	r1, r3
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff fe91 	bl	800147c <u8g2_font_decode_get_signed_bits>
 800175a:	4603      	mov	r3, r0
 800175c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001764:	4619      	mov	r1, r3
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff fe88 	bl	800147c <u8g2_font_decode_get_signed_bits>
 800176c:	4603      	mov	r3, r0
 800176e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001776:	4619      	mov	r1, r3
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	f7ff fe7f 	bl	800147c <u8g2_font_decode_get_signed_bits>
 800177e:	4603      	mov	r3, r0
 8001780:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f340 80d7 	ble.w	800193c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	8898      	ldrh	r0, [r3, #4]
 8001792:	7cfa      	ldrb	r2, [r7, #19]
 8001794:	7c7b      	ldrb	r3, [r7, #17]
 8001796:	4413      	add	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	425b      	negs	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	7c1b      	ldrb	r3, [r3, #16]
 80017a4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80017a8:	f7ff fec6 	bl	8001538 <u8g2_add_vector_x>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	88d8      	ldrh	r0, [r3, #6]
 80017b8:	7cfa      	ldrb	r2, [r7, #19]
 80017ba:	7c7b      	ldrb	r3, [r7, #17]
 80017bc:	4413      	add	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	425b      	negs	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	7c1b      	ldrb	r3, [r3, #16]
 80017ca:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80017ce:	f7ff fe78 	bl	80014c2 <u8g2_add_vector_y>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	88db      	ldrh	r3, [r3, #6]
 80017e4:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80017e6:	8bfb      	ldrh	r3, [r7, #30]
 80017e8:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80017ea:	8b7b      	ldrh	r3, [r7, #26]
 80017ec:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	7c1b      	ldrb	r3, [r3, #16]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d85a      	bhi.n	80018ac <u8g2_font_decode_glyph+0x180>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <u8g2_font_decode_glyph+0xd0>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001829 	.word	0x08001829
 8001804:	08001851 	.word	0x08001851
 8001808:	08001885 	.word	0x08001885
      {
	case 0:
	    x1 += decode->glyph_width;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001812:	b29a      	uxth	r2, r3
 8001814:	8bbb      	ldrh	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800181a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800181e:	b29a      	uxth	r2, r3
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	4413      	add	r3, r2
 8001824:	833b      	strh	r3, [r7, #24]
	    break;
 8001826:	e041      	b.n	80018ac <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800182c:	b29b      	uxth	r3, r3
 800182e:	8bfa      	ldrh	r2, [r7, #30]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001834:	8bfb      	ldrh	r3, [r7, #30]
 8001836:	3301      	adds	r3, #1
 8001838:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800183a:	8bbb      	ldrh	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001846:	b29a      	uxth	r2, r3
 8001848:	8b3b      	ldrh	r3, [r7, #24]
 800184a:	4413      	add	r3, r2
 800184c:	833b      	strh	r3, [r7, #24]
	    break;
 800184e:	e02d      	b.n	80018ac <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001856:	b29b      	uxth	r3, r3
 8001858:	8bfa      	ldrh	r2, [r7, #30]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	3301      	adds	r3, #1
 8001862:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001864:	8bbb      	ldrh	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800186a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800186e:	b29b      	uxth	r3, r3
 8001870:	8b7a      	ldrh	r2, [r7, #26]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001876:	8b7b      	ldrh	r3, [r7, #26]
 8001878:	3301      	adds	r3, #1
 800187a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800187c:	8b3b      	ldrh	r3, [r7, #24]
 800187e:	3301      	adds	r3, #1
 8001880:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001882:	e013      	b.n	80018ac <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001888:	b29a      	uxth	r2, r3
 800188a:	8bbb      	ldrh	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001896:	b29b      	uxth	r3, r3
 8001898:	8b7a      	ldrh	r2, [r7, #26]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800189e:	8b7b      	ldrh	r3, [r7, #26]
 80018a0:	3301      	adds	r3, #1
 80018a2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80018a4:	8b3b      	ldrh	r3, [r7, #24]
 80018a6:	3301      	adds	r3, #1
 80018a8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80018aa:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80018ac:	8bb8      	ldrh	r0, [r7, #28]
 80018ae:	8b7a      	ldrh	r2, [r7, #26]
 80018b0:	8bf9      	ldrh	r1, [r7, #30]
 80018b2:	8b3b      	ldrh	r3, [r7, #24]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fb88 	bl	8001fce <u8g2_IsIntersection>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <u8g2_font_decode_glyph+0x19e>
	return d;
 80018c4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80018c8:	e03a      	b.n	8001940 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2200      	movs	r2, #0
 80018ce:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2200      	movs	r2, #0
 80018d4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80018dc:	4619      	mov	r1, r3
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff fd81 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80018ee:	4619      	mov	r1, r3
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7ff fd78 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fe54 	bl	80015ae <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fe4e 	bl	80015ae <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001912:	2101      	movs	r1, #1
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff fd66 	bl	80013e6 <u8g2_font_decode_get_unsigned_bits>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ec      	bne.n	80018fa <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001926:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800192a:	429a      	cmp	r2, r3
 800192c:	dd00      	ble.n	8001930 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800192e:	e7d2      	b.n	80018d6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001930:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	7b9a      	ldrb	r2, [r3, #14]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 800193c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3317      	adds	r3, #23
 800195e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	2bff      	cmp	r3, #255	@ 0xff
 8001964:	d82a      	bhi.n	80019bc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	2b60      	cmp	r3, #96	@ 0x60
 800196a:	d907      	bls.n	800197c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001972:	461a      	mov	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4413      	add	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	2b40      	cmp	r3, #64	@ 0x40
 8001980:	d906      	bls.n	8001990 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001988:	461a      	mov	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d04e      	beq.n	8001a38 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3302      	adds	r3, #2
 80019aa:	e049      	b.n	8001a40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3301      	adds	r3, #1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80019ba:	e7e9      	b.n	8001990 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80019c2:	461a      	mov	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	4413      	add	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f7ff fc3f 	bl	8001254 <u8g2_font_get_word>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80019e0:	2102      	movs	r1, #2
 80019e2:	6938      	ldr	r0, [r7, #16]
 80019e4:	f7ff fc36 	bl	8001254 <u8g2_font_get_word>
 80019e8:	4603      	mov	r3, r0
 80019ea:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	3304      	adds	r3, #4
 80019f0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80019f2:	89fa      	ldrh	r2, [r7, #14]
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e9      	bcc.n	80019ce <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001a1a:	89fa      	ldrh	r2, [r7, #14]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d102      	bne.n	8001a28 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3303      	adds	r3, #3
 8001a26:	e00b      	b.n	8001a40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001a36:	e7e0      	b.n	80019fa <u8g2_font_get_glyph_data+0xb2>
	break;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001a3c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	817b      	strh	r3, [r7, #10]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	813b      	strh	r3, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	897a      	ldrh	r2, [r7, #10]
 8001a6a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	893a      	ldrh	r2, [r7, #8]
 8001a72:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff ff64 	bl	8001948 <u8g2_font_get_glyph_data>
 8001a80:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fe4e 	bl	800172c <u8g2_font_decode_glyph>
 8001a90:	4603      	mov	r3, r0
 8001a92:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001a94:	8afb      	ldrh	r3, [r7, #22]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d833      	bhi.n	8001b2c <u8g2_DrawGlyph+0x8c>
 8001ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8001acc <u8g2_DrawGlyph+0x2c>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001af1 	.word	0x08001af1
 8001ad4:	08001b05 	.word	0x08001b05
 8001ad8:	08001b19 	.word	0x08001b19
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	4798      	blx	r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	893b      	ldrh	r3, [r7, #8]
 8001aea:	4413      	add	r3, r2
 8001aec:	813b      	strh	r3, [r7, #8]
      break;
 8001aee:	e01d      	b.n	8001b2c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	4798      	blx	r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	817b      	strh	r3, [r7, #10]
      break;
 8001b02:	e013      	b.n	8001b2c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	4798      	blx	r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	893b      	ldrh	r3, [r7, #8]
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	813b      	strh	r3, [r7, #8]
      break;
 8001b16:	e009      	b.n	8001b2c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	4798      	blx	r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	4413      	add	r3, r2
 8001b28:	817b      	strh	r3, [r7, #10]
      break;
 8001b2a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff ff88 	bl	8001a48 <u8g2_font_draw_glyph>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	817b      	strh	r3, [r7, #10]
 8001b52:	4613      	mov	r3, r2
 8001b54:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fca7 	bl	80024aa <u8x8_utf8_init>
  sum = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	4798      	blx	r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001b72:	8abb      	ldrh	r3, [r7, #20]
 8001b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d038      	beq.n	8001bee <u8g2_draw_string+0xaa>
      break;
    str++;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001b82:	8abb      	ldrh	r3, [r7, #20]
 8001b84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d0e9      	beq.n	8001b60 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001b8c:	8abb      	ldrh	r3, [r7, #20]
 8001b8e:	893a      	ldrh	r2, [r7, #8]
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff ff84 	bl	8001aa0 <u8g2_DrawGlyph>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d81e      	bhi.n	8001be4 <u8g2_draw_string+0xa0>
 8001ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bac <u8g2_draw_string+0x68>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001bbd 	.word	0x08001bbd
 8001bb0:	08001bc7 	.word	0x08001bc7
 8001bb4:	08001bd1 	.word	0x08001bd1
 8001bb8:	08001bdb 	.word	0x08001bdb
      {
	case 0:
	  x += delta;
 8001bbc:	897a      	ldrh	r2, [r7, #10]
 8001bbe:	8a7b      	ldrh	r3, [r7, #18]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	817b      	strh	r3, [r7, #10]
	  break;
 8001bc4:	e00e      	b.n	8001be4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001bc6:	893a      	ldrh	r2, [r7, #8]
 8001bc8:	8a7b      	ldrh	r3, [r7, #18]
 8001bca:	4413      	add	r3, r2
 8001bcc:	813b      	strh	r3, [r7, #8]
	  break;
 8001bce:	e009      	b.n	8001be4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001bd0:	897a      	ldrh	r2, [r7, #10]
 8001bd2:	8a7b      	ldrh	r3, [r7, #18]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	817b      	strh	r3, [r7, #10]
	  break;
 8001bd8:	e004      	b.n	8001be4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001bda:	893a      	ldrh	r2, [r7, #8]
 8001bdc:	8a7b      	ldrh	r3, [r7, #18]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	813b      	strh	r3, [r7, #8]
	  break;
 8001be2:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001be4:	8afa      	ldrh	r2, [r7, #22]
 8001be6:	8a7b      	ldrh	r3, [r7, #18]
 8001be8:	4413      	add	r3, r2
 8001bea:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001bec:	e7b8      	b.n	8001b60 <u8g2_draw_string+0x1c>
      break;
 8001bee:	bf00      	nop
    }
  }
  return sum;
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop

08001bfc <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	817b      	strh	r3, [r7, #10]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <u8g2_DrawStr+0x30>)
 8001c12:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	8979      	ldrh	r1, [r7, #10]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff ff92 	bl	8001b44 <u8g2_draw_string>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	080024c7 	.word	0x080024c7

08001c30 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05d      	beq.n	8001cfc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04d      	beq.n	8001cfe <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d11c      	bne.n	8001ca6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	da05      	bge.n	8001c88 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dd32      	ble.n	8001cfe <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001ca4:	e02b      	b.n	8001cfe <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001cbc:	440b      	add	r3, r1
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	da0d      	bge.n	8001cde <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dd07      	ble.n	8001cfe <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001cfa:	e000      	b.n	8001cfe <u8g2_UpdateRefHeight+0xce>
    return;
 8001cfc:	bf00      	nop
  }  
}
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <u8g2_SetFontPosBaseline+0x1c>)
 8001d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	08001d09 	.word	0x08001d09

08001d40 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d00b      	beq.n	8001d6c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3374      	adds	r3, #116	@ 0x74
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fa97 	bl	8001294 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff62 	bl	8001c30 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	460b      	mov	r3, r1
 8001d84:	80fb      	strh	r3, [r7, #6]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001d90:	8afb      	ldrh	r3, [r7, #22]
 8001d92:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	8abb      	ldrh	r3, [r7, #20]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001d9e:	8afa      	ldrh	r2, [r7, #22]
 8001da0:	8abb      	ldrh	r3, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d90b      	bls.n	8001dbe <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001da6:	8afa      	ldrh	r2, [r7, #22]
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d205      	bcs.n	8001dba <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	82bb      	strh	r3, [r7, #20]
      b--;
 8001db2:	8abb      	ldrh	r3, [r7, #20]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	82bb      	strh	r3, [r7, #20]
 8001db8:	e001      	b.n	8001dbe <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001dbe:	8afa      	ldrh	r2, [r7, #22]
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d301      	bcc.n	8001dca <u8g2_clip_intersection2+0x56>
    return 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e01c      	b.n	8001e04 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001dca:	8aba      	ldrh	r2, [r7, #20]
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d801      	bhi.n	8001dd6 <u8g2_clip_intersection2+0x62>
    return 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e016      	b.n	8001e04 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001dd6:	8afa      	ldrh	r2, [r7, #22]
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d201      	bcs.n	8001de2 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001de2:	8aba      	ldrh	r2, [r7, #20]
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d901      	bls.n	8001dee <u8g2_clip_intersection2+0x7a>
    b = d;
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8afa      	ldrh	r2, [r7, #22]
 8001df2:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001df4:	8aba      	ldrh	r2, [r7, #20]
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	8aba      	ldrh	r2, [r7, #20]
 8001e00:	801a      	strh	r2, [r3, #0]
  return 1;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	460b      	mov	r3, r1
 8001e24:	813b      	strh	r3, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e2e:	893a      	ldrh	r2, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001e38:	88f8      	ldrh	r0, [r7, #6]
 8001e3a:	893a      	ldrh	r2, [r7, #8]
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4603      	mov	r3, r0
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	47a0      	blx	r4
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}

08001e52 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001e52:	b590      	push	{r4, r7, lr}
 8001e54:	b087      	sub	sp, #28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4603      	mov	r3, r0
 8001e62:	817b      	strh	r3, [r7, #10]
 8001e64:	460b      	mov	r3, r1
 8001e66:	813b      	strh	r3, [r7, #8]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d075      	beq.n	8001f62 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d072      	beq.n	8001f62 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d91a      	bls.n	8001eb8 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d109      	bne.n	8001e9e <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001e8a:	897a      	ldrh	r2, [r7, #10]
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	817b      	strh	r3, [r7, #10]
	  x++;
 8001e94:	897b      	ldrh	r3, [r7, #10]
 8001e96:	3301      	adds	r3, #1
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	817b      	strh	r3, [r7, #10]
 8001e9c:	e00c      	b.n	8001eb8 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d108      	bne.n	8001eb8 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001ea6:	893a      	ldrh	r2, [r7, #8]
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	813b      	strh	r3, [r7, #8]
	  y++;
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11a      	bne.n	8001f02 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001ed2:	893b      	ldrh	r3, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d83b      	bhi.n	8001f50 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001ede:	893b      	ldrh	r3, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d937      	bls.n	8001f54 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001ef0:	1db9      	adds	r1, r7, #6
 8001ef2:	f107 000a 	add.w	r0, r7, #10
 8001ef6:	f7ff ff3d 	bl	8001d74 <u8g2_clip_intersection2>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11a      	bne.n	8001f36 <u8g2_DrawHVLine+0xe4>
	  return;
 8001f00:	e02f      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d824      	bhi.n	8001f58 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d920      	bls.n	8001f5c <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001f26:	1db9      	adds	r1, r7, #6
 8001f28:	f107 0008 	add.w	r0, r7, #8
 8001f2c:	f7ff ff22 	bl	8001d74 <u8g2_clip_intersection2>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	689c      	ldr	r4, [r3, #8]
 8001f3c:	8979      	ldrh	r1, [r7, #10]
 8001f3e:	893a      	ldrh	r2, [r7, #8]
 8001f40:	88f8      	ldrh	r0, [r7, #6]
 8001f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	47a0      	blx	r4
 8001f4e:	e008      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
	  return;
 8001f50:	bf00      	nop
 8001f52:	e006      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
	  return;
 8001f54:	bf00      	nop
 8001f56:	e004      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
	  return;
 8001f58:	bf00      	nop
 8001f5a:	e002      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
	  return;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <u8g2_DrawHVLine+0x110>
	  return;
 8001f60:	bf00      	nop
    }
}
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001f68:	b490      	push	{r4, r7}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d20d      	bcs.n	8001faa <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d901      	bls.n	8001f9a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e014      	b.n	8001fc4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	883b      	ldrh	r3, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d901      	bls.n	8001fa6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e00c      	b.n	8001fc4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001faa:	883a      	ldrh	r2, [r7, #0]
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d907      	bls.n	8001fc2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	883b      	ldrh	r3, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d901      	bls.n	8001fbe <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e002      	b.n	8001fc4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001fc2:	2300      	movs	r3, #0
    }
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc90      	pop	{r4, r7}
 8001fcc:	4770      	bx	lr

08001fce <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	813b      	strh	r3, [r7, #8]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001ff4:	8b3b      	ldrh	r3, [r7, #24]
 8001ff6:	893a      	ldrh	r2, [r7, #8]
 8001ff8:	f7ff ffb6 	bl	8001f68 <u8g2_is_intersection_decision_tree>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <u8g2_IsIntersection+0x38>
    return 0; 
 8002002:	2300      	movs	r3, #0
 8002004:	e00a      	b.n	800201c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	897a      	ldrh	r2, [r7, #10]
 8002016:	f7ff ffa7 	bl	8001f68 <u8g2_is_intersection_decision_tree>
 800201a:	4603      	mov	r3, r0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	817b      	strh	r3, [r7, #10]
 8002036:	460b      	mov	r3, r1
 8002038:	813b      	strh	r3, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002042:	7efb      	ldrb	r3, [r7, #27]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800204e:	7e3a      	ldrb	r2, [r7, #24]
 8002050:	7efb      	ldrb	r3, [r7, #27]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002066:	2b01      	cmp	r3, #1
 8002068:	d801      	bhi.n	800206e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800206a:	7e3b      	ldrb	r3, [r7, #24]
 800206c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002078:	7e3b      	ldrb	r3, [r7, #24]
 800207a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800207c:	893b      	ldrh	r3, [r7, #8]
 800207e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	f023 0307 	bic.w	r3, r3, #7
 8002086:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	7c1b      	ldrb	r3, [r3, #16]
 800208e:	461a      	mov	r2, r3
 8002090:	8afb      	ldrh	r3, [r7, #22]
 8002092:	fb13 f302 	smulbb	r3, r3, r2
 8002096:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800209e:	8afb      	ldrh	r3, [r7, #22]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80020ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d117      	bne.n	80020e6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	7ebb      	ldrb	r3, [r7, #26]
 80020bc:	4313      	orrs	r3, r2
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	7e7b      	ldrb	r3, [r7, #25]
 80020ca:	4053      	eors	r3, r2
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	701a      	strb	r2, [r3, #0]
	ptr++;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
	len--;
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	3b01      	subs	r3, #1
 80020dc:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e8      	bne.n	80020b6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80020e4:	e038      	b.n	8002158 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	7ebb      	ldrb	r3, [r7, #26]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	7e7b      	ldrb	r3, [r7, #25]
 80020fa:	4053      	eors	r3, r2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002102:	7efb      	ldrb	r3, [r7, #27]
 8002104:	3301      	adds	r3, #1
 8002106:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002108:	7efb      	ldrb	r3, [r7, #27]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	76fb      	strb	r3, [r7, #27]
      len--;
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	3b01      	subs	r3, #1
 8002114:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002116:	7efb      	ldrb	r3, [r7, #27]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d114      	bne.n	8002146 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002120:	461a      	mov	r2, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800212e:	2b01      	cmp	r3, #1
 8002130:	d801      	bhi.n	8002136 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800213c:	2b01      	cmp	r3, #1
 800213e:	d008      	beq.n	8002152 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	767b      	strb	r3, [r7, #25]
 8002144:	e005      	b.n	8002152 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002146:	7ebb      	ldrb	r3, [r7, #26]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800214c:	7e7b      	ldrb	r3, [r7, #25]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1c6      	bne.n	80020e6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	@ 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002182:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	79fa      	ldrb	r2, [r7, #7]
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff ffa9 	bl	8002164 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fd84 	bl	8001d20 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	7c1b      	ldrb	r3, [r3, #16]
 800224e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	89fa      	ldrh	r2, [r7, #14]
 800225a:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002262:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	89fa      	ldrh	r2, [r7, #14]
 800226e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002276:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002280:	4413      	add	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	7c52      	ldrb	r2, [r2, #17]
 8002286:	4293      	cmp	r3, r2
 8002288:	dd07      	ble.n	800229a <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	7c5b      	ldrb	r3, [r3, #17]
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	4413      	add	r3, r2
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	8a9a      	ldrh	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	8ada      	ldrh	r2, [r3, #22]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4603      	mov	r3, r0
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fe5e 	bl	8001fce <u8g2_IsIntersection>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002320:	e03b      	b.n	800239a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002336:	429a      	cmp	r2, r3
 8002338:	d205      	bcs.n	8002346 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002352:	429a      	cmp	r2, r3
 8002354:	d905      	bls.n	8002362 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800236e:	429a      	cmp	r2, r3
 8002370:	d205      	bcs.n	800237e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800238a:	429a      	cmp	r2, r3
 800238c:	d905      	bls.n	800239a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff3c 	bl	8002228 <u8g2_update_dimension_common>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d30a      	bcc.n	8002402 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff65 	bl	80022e8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b088      	sub	sp, #32
 800242a:	af02      	add	r7, sp, #8
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	4608      	mov	r0, r1
 8002430:	4611      	mov	r1, r2
 8002432:	461a      	mov	r2, r3
 8002434:	4603      	mov	r3, r0
 8002436:	817b      	strh	r3, [r7, #10]
 8002438:	460b      	mov	r3, r1
 800243a:	813b      	strh	r3, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002446:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002448:	8aba      	ldrh	r2, [r7, #20]
 800244a:	893b      	ldrh	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002456:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002458:	8afa      	ldrh	r2, [r7, #22]
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002468:	8abb      	ldrh	r3, [r7, #20]
 800246a:	3b01      	subs	r3, #1
 800246c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800246e:	8afa      	ldrh	r2, [r7, #22]
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	82fb      	strh	r3, [r7, #22]
 8002476:	e00a      	b.n	800248e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002478:	f897 3020 	ldrb.w	r3, [r7, #32]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002480:	8afb      	ldrh	r3, [r7, #22]
 8002482:	3b01      	subs	r3, #1
 8002484:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002486:	8aba      	ldrh	r2, [r7, #20]
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800248e:	88f8      	ldrh	r0, [r7, #6]
 8002490:	8aba      	ldrh	r2, [r7, #20]
 8002492:	8af9      	ldrh	r1, [r7, #22]
 8002494:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4603      	mov	r3, r0
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fcb7 	bl	8001e10 <u8g2_draw_hv_line_2dir>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <u8x8_ascii_next+0x18>
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d102      	bne.n	80024e4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80024de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e2:	e001      	b.n	80024e8 <u8x8_ascii_next+0x22>
  return b;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	b29b      	uxth	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691c      	ldr	r4, [r3, #16]
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	2300      	movs	r3, #0
 8002508:	2120      	movs	r1, #32
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	47a0      	blx	r4
 800250e:	4603      	mov	r3, r0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}

08002518 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	460b      	mov	r3, r1
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691c      	ldr	r4, [r3, #16]
 800252a:	7afa      	ldrb	r2, [r7, #11]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2117      	movs	r1, #23
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	47a0      	blx	r4
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}

0800253e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800254a:	1cfb      	adds	r3, r7, #3
 800254c:	461a      	mov	r2, r3
 800254e:	2101      	movs	r1, #1
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffe1 	bl	8002518 <u8x8_byte_SendBytes>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68dc      	ldr	r4, [r3, #12]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	2300      	movs	r3, #0
 8002574:	2115      	movs	r1, #21
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	47a0      	blx	r4
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}

08002584 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68dc      	ldr	r4, [r3, #12]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	2300      	movs	r3, #0
 8002598:	2116      	movs	r1, #22
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	47a0      	blx	r4
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}

080025a8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	460b      	mov	r3, r1
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68dc      	ldr	r4, [r3, #12]
 80025ba:	7afa      	ldrb	r2, [r7, #11]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2117      	movs	r1, #23
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	47a0      	blx	r4
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}

080025ce <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80025ce:	b590      	push	{r4, r7, lr}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68dc      	ldr	r4, [r3, #12]
 80025da:	2300      	movs	r3, #0
 80025dc:	2200      	movs	r2, #0
 80025de:	2118      	movs	r1, #24
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	47a0      	blx	r4
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}

080025ee <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80025ee:	b590      	push	{r4, r7, lr}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68dc      	ldr	r4, [r3, #12]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2200      	movs	r2, #0
 80025fe:	2119      	movs	r1, #25
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	47a0      	blx	r4
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}

0800260e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800260e:	b590      	push	{r4, r7, lr}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	73fb      	strb	r3, [r7, #15]
    data++;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2bfe      	cmp	r3, #254	@ 0xfe
 8002628:	d031      	beq.n	800268e <u8x8_cad_SendSequence+0x80>
 800262a:	2bfe      	cmp	r3, #254	@ 0xfe
 800262c:	dc3d      	bgt.n	80026aa <u8x8_cad_SendSequence+0x9c>
 800262e:	2b19      	cmp	r3, #25
 8002630:	dc3b      	bgt.n	80026aa <u8x8_cad_SendSequence+0x9c>
 8002632:	2b18      	cmp	r3, #24
 8002634:	da23      	bge.n	800267e <u8x8_cad_SendSequence+0x70>
 8002636:	2b16      	cmp	r3, #22
 8002638:	dc02      	bgt.n	8002640 <u8x8_cad_SendSequence+0x32>
 800263a:	2b15      	cmp	r3, #21
 800263c:	da03      	bge.n	8002646 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800263e:	e034      	b.n	80026aa <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002640:	2b17      	cmp	r3, #23
 8002642:	d00e      	beq.n	8002662 <u8x8_cad_SendSequence+0x54>
	return;
 8002644:	e031      	b.n	80026aa <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68dc      	ldr	r4, [r3, #12]
 8002650:	7bba      	ldrb	r2, [r7, #14]
 8002652:	7bf9      	ldrb	r1, [r7, #15]
 8002654:	2300      	movs	r3, #0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	47a0      	blx	r4
	  data++;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	603b      	str	r3, [r7, #0]
	  break;
 8002660:	e022      	b.n	80026a8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002668:	f107 030e 	add.w	r3, r7, #14
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff99 	bl	80025a8 <u8x8_cad_SendData>
	  data++;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	603b      	str	r3, [r7, #0]
	  break;
 800267c:	e014      	b.n	80026a8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68dc      	ldr	r4, [r3, #12]
 8002682:	7bf9      	ldrb	r1, [r7, #15]
 8002684:	2300      	movs	r3, #0
 8002686:	2200      	movs	r2, #0
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	47a0      	blx	r4
	  break;
 800268c:	e00c      	b.n	80026a8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	461a      	mov	r2, r3
 8002698:	2129      	movs	r1, #41	@ 0x29
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9ee 	bl	8002a7c <u8x8_gpio_call>
	  data++;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	603b      	str	r3, [r7, #0]
	  break;
 80026a6:	bf00      	nop
    cmd = *data;
 80026a8:	e7b6      	b.n	8002618 <u8x8_cad_SendSequence+0xa>
	return;
 80026aa:	bf00      	nop
    }
  }
}
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
	...

080026b4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	4613      	mov	r3, r2
 80026c4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	3b14      	subs	r3, #20
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d82f      	bhi.n	800272e <u8x8_cad_001+0x7a>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <u8x8_cad_001+0x20>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800271d 	.word	0x0800271d
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002715 	.word	0x08002715
 80026e4:	0800271d 	.word	0x0800271d
 80026e8:	0800271d 	.word	0x0800271d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80026ec:	2100      	movs	r1, #0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff ff00 	bl	80024f4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80026f4:	7abb      	ldrb	r3, [r7, #10]
 80026f6:	4619      	mov	r1, r3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff ff20 	bl	800253e <u8x8_byte_SendByte>
      break;
 80026fe:	e018      	b.n	8002732 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002700:	2100      	movs	r1, #0
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff fef6 	bl	80024f4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002708:	7abb      	ldrb	r3, [r7, #10]
 800270a:	4619      	mov	r1, r3
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff ff16 	bl	800253e <u8x8_byte_SendByte>
      break;
 8002712:	e00e      	b.n	8002732 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002714:	2101      	movs	r1, #1
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff feec 	bl	80024f4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691c      	ldr	r4, [r3, #16]
 8002720:	7aba      	ldrb	r2, [r7, #10]
 8002722:	7af9      	ldrb	r1, [r7, #11]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	47a0      	blx	r4
 800272a:	4603      	mov	r3, r0
 800272c:	e002      	b.n	8002734 <u8x8_cad_001+0x80>
    default:
      return 0;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <u8x8_cad_001+0x80>
  }
  return 1;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	72fb      	strb	r3, [r7, #11]
 800274a:	4613      	mov	r3, r2
 800274c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d006      	beq.n	8002762 <u8x8_d_st7565_common+0x26>
 8002754:	2b0f      	cmp	r3, #15
 8002756:	dc71      	bgt.n	800283c <u8x8_d_st7565_common+0x100>
 8002758:	2b0b      	cmp	r3, #11
 800275a:	d050      	beq.n	80027fe <u8x8_d_st7565_common+0xc2>
 800275c:	2b0e      	cmp	r3, #14
 800275e:	d05b      	beq.n	8002818 <u8x8_d_st7565_common+0xdc>
 8002760:	e06c      	b.n	800283c <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff ff33 	bl	80025ce <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	4413      	add	r3, r2
 800277e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4619      	mov	r1, r3
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fee6 	bl	8002560 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002794:	7dbb      	ldrb	r3, [r7, #22]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff fede 	bl	8002560 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	799b      	ldrb	r3, [r3, #6]
 80027a8:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fed5 	bl	8002560 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	791b      	ldrb	r3, [r3, #4]
 80027ba:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80027c8:	7dfa      	ldrb	r2, [r7, #23]
 80027ca:	7dbb      	ldrb	r3, [r7, #22]
 80027cc:	4413      	add	r3, r2
 80027ce:	2b84      	cmp	r3, #132	@ 0x84
 80027d0:	d905      	bls.n	80027de <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80027d2:	2384      	movs	r3, #132	@ 0x84
 80027d4:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80027d6:	7dfa      	ldrb	r2, [r7, #23]
 80027d8:	7dbb      	ldrb	r3, [r7, #22]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4619      	mov	r1, r3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fedf 	bl	80025a8 <u8x8_cad_SendData>
	arg_int--;
 80027ea:	7abb      	ldrb	r3, [r7, #10]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80027f0:	7abb      	ldrb	r3, [r7, #10]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f3      	bne.n	80027de <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fef9 	bl	80025ee <u8x8_cad_EndTransfer>
      break;
 80027fc:	e020      	b.n	8002840 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80027fe:	7abb      	ldrb	r3, [r7, #10]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002804:	4911      	ldr	r1, [pc, #68]	@ (800284c <u8x8_d_st7565_common+0x110>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ff01 	bl	800260e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800280c:	e018      	b.n	8002840 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800280e:	4910      	ldr	r1, [pc, #64]	@ (8002850 <u8x8_d_st7565_common+0x114>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fefc 	bl	800260e <u8x8_cad_SendSequence>
      break;
 8002816:	e013      	b.n	8002840 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fed8 	bl	80025ce <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800281e:	2181      	movs	r1, #129	@ 0x81
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fe9d 	bl	8002560 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002826:	7abb      	ldrb	r3, [r7, #10]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fea8 	bl	8002584 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff feda 	bl	80025ee <u8x8_cad_EndTransfer>
      break;
 800283a:	e001      	b.n	8002840 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002840:	2301      	movs	r3, #1
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	0800f770 	.word	0x0800f770
 8002850:	0800f778 	.word	0x0800f778

08002854 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	72fb      	strb	r3, [r7, #11]
 8002862:	4613      	mov	r3, r2
 8002864:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002866:	7aba      	ldrb	r2, [r7, #10]
 8002868:	7af9      	ldrb	r1, [r7, #11]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff65 	bl	800273c <u8x8_d_st7565_common>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d131      	bne.n	80028dc <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	2b0d      	cmp	r3, #13
 800287c:	d013      	beq.n	80028a6 <u8x8_d_st7565_64128n+0x52>
 800287e:	2b0d      	cmp	r3, #13
 8002880:	dc2a      	bgt.n	80028d8 <u8x8_d_st7565_64128n+0x84>
 8002882:	2b09      	cmp	r3, #9
 8002884:	d002      	beq.n	800288c <u8x8_d_st7565_64128n+0x38>
 8002886:	2b0a      	cmp	r3, #10
 8002888:	d005      	beq.n	8002896 <u8x8_d_st7565_64128n+0x42>
 800288a:	e025      	b.n	80028d8 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 800288c:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <u8x8_d_st7565_64128n+0x94>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f832 	bl	80028f8 <u8x8_d_helper_display_setup_memory>
	break;
 8002894:	e022      	b.n	80028dc <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f842 	bl	8002920 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 800289c:	4913      	ldr	r1, [pc, #76]	@ (80028ec <u8x8_d_st7565_64128n+0x98>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff feb5 	bl	800260e <u8x8_cad_SendSequence>
	break;
 80028a4:	e01a      	b.n	80028dc <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80028a6:	7abb      	ldrb	r3, [r7, #10]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80028ac:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <u8x8_d_st7565_64128n+0x9c>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff fead 	bl	800260e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	7c9a      	ldrb	r2, [r3, #18]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80028c0:	e00c      	b.n	80028dc <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80028c2:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <u8x8_d_st7565_64128n+0xa0>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fea2 	bl	800260e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	7cda      	ldrb	r2, [r3, #19]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 80028d6:	e001      	b.n	80028dc <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	0800f7b0 	.word	0x0800f7b0
 80028ec:	0800f790 	.word	0x0800f790
 80028f0:	0800f780 	.word	0x0800f780
 80028f4:	0800f788 	.word	0x0800f788

080028f8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	7c9a      	ldrb	r2, [r3, #18]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695c      	ldr	r4, [r3, #20]
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	2128      	movs	r1, #40	@ 0x28
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68dc      	ldr	r4, [r3, #12]
 800293a:	2300      	movs	r3, #0
 800293c:	2200      	movs	r2, #0
 800293e:	2114      	movs	r1, #20
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002944:	2201      	movs	r2, #1
 8002946:	214b      	movs	r1, #75	@ 0x4b
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f897 	bl	8002a7c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	791b      	ldrb	r3, [r3, #4]
 8002954:	461a      	mov	r2, r3
 8002956:	2129      	movs	r1, #41	@ 0x29
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f88f 	bl	8002a7c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	214b      	movs	r1, #75	@ 0x4b
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f88a 	bl	8002a7c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	791b      	ldrb	r3, [r3, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	2129      	movs	r1, #41	@ 0x29
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f882 	bl	8002a7c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002978:	2201      	movs	r2, #1
 800297a:	214b      	movs	r1, #75	@ 0x4b
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f87d 	bl	8002a7c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	795b      	ldrb	r3, [r3, #5]
 8002988:	461a      	mov	r2, r3
 800298a:	2129      	movs	r1, #41	@ 0x29
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f875 	bl	8002a7c <u8x8_gpio_call>
}    
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}

0800299a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800299a:	b590      	push	{r4, r7, lr}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	4608      	mov	r0, r1
 80029a4:	4611      	mov	r1, r2
 80029a6:	461a      	mov	r2, r3
 80029a8:	4603      	mov	r3, r0
 80029aa:	70fb      	strb	r3, [r7, #3]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70bb      	strb	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80029b8:	78bb      	ldrb	r3, [r7, #2]
 80029ba:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689c      	ldr	r4, [r3, #8]
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	2201      	movs	r2, #1
 80029ce:	210f      	movs	r1, #15
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	47a0      	blx	r4
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}

080029de <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80029de:	b590      	push	{r4, r7, lr}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689c      	ldr	r4, [r3, #8]
 80029ea:	2300      	movs	r3, #0
 80029ec:	2200      	movs	r2, #0
 80029ee:	2109      	movs	r1, #9
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	47a0      	blx	r4
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}

080029fc <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689c      	ldr	r4, [r3, #8]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	210a      	movs	r1, #10
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}

08002a1a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689c      	ldr	r4, [r3, #8]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	210b      	movs	r1, #11
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	47a0      	blx	r4
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}

08002a3c <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689c      	ldr	r4, [r3, #8]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	210e      	movs	r1, #14
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	47a0      	blx	r4
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd90      	pop	{r4, r7, pc}

08002a5e <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689c      	ldr	r4, [r3, #8]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2110      	movs	r1, #16
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	47a0      	blx	r4
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695c      	ldr	r4, [r3, #20]
 8002a90:	78ba      	ldrb	r2, [r7, #2]
 8002a92:	78f9      	ldrb	r1, [r7, #3]
 8002a94:	2300      	movs	r3, #0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	47a0      	blx	r4
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}

08002aa2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	72fb      	strb	r3, [r7, #11]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <u8x8_SetupDefaults+0x58>)
 8002ad6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <u8x8_SetupDefaults+0x58>)
 8002adc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b1c <u8x8_SetupDefaults+0x58>)
 8002ae2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <u8x8_SetupDefaults+0x58>)
 8002ae8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	22ff      	movs	r2, #255	@ 0xff
 8002b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	08002aa3 	.word	0x08002aa3

08002b20 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ffc8 	bl	8002ac4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff ff46 	bl	80029de <u8x8_SetupMemory>
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_CAN_RxFifo0MsgPendingCallback>:
    while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox)) {
        // Wait for the message to be sent
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, receivedData) == HAL_OK) {
 8002b64:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f002 faa9 	bl	80050c2 <HAL_CAN_GetRxMessage>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
        receivedFlag = 1; // Set flag to indicate new data received
 8002b76:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
        receivedCAN = hcan; // Store the CAN instance (CAN1 or CAN2)
 8002b7c:	4a06      	ldr	r2, [pc, #24]	@ (8002b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
    }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000768 	.word	0x20000768
 8002b90:	2000074c 	.word	0x2000074c
 8002b94:	20000748 	.word	0x20000748
 8002b98:	20000770 	.word	0x20000770

08002b9c <u8x8_stm32_gpio_and_delay>:

u8g2_t u8g2;  // Display handle

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	72fb      	strb	r3, [r7, #11]
 8002baa:	4613      	mov	r3, r2
 8002bac:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	2b4b      	cmp	r3, #75	@ 0x4b
 8002bb2:	d01a      	beq.n	8002bea <u8x8_stm32_gpio_and_delay+0x4e>
 8002bb4:	2b4b      	cmp	r3, #75	@ 0x4b
 8002bb6:	dc1f      	bgt.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
 8002bb8:	2b4a      	cmp	r3, #74	@ 0x4a
 8002bba:	d00f      	beq.n	8002bdc <u8x8_stm32_gpio_and_delay+0x40>
 8002bbc:	2b4a      	cmp	r3, #74	@ 0x4a
 8002bbe:	dc1b      	bgt.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
 8002bc0:	2b28      	cmp	r3, #40	@ 0x28
 8002bc2:	d002      	beq.n	8002bca <u8x8_stm32_gpio_and_delay+0x2e>
 8002bc4:	2b29      	cmp	r3, #41	@ 0x29
 8002bc6:	d004      	beq.n	8002bd2 <u8x8_stm32_gpio_and_delay+0x36>
 8002bc8:	e016      	b.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f002 f95a 	bl	8004e84 <HAL_Delay>
		break;
 8002bd0:	e012      	b.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8002bd2:	7abb      	ldrb	r3, [r7, #10]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 f955 	bl	8004e84 <HAL_Delay>
		break;
 8002bda:	e00d      	b.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, arg_int);
 8002bdc:	7abb      	ldrb	r3, [r7, #10]
 8002bde:	461a      	mov	r2, r3
 8002be0:	2108      	movs	r1, #8
 8002be2:	4808      	ldr	r0, [pc, #32]	@ (8002c04 <u8x8_stm32_gpio_and_delay+0x68>)
 8002be4:	f003 f90e 	bl	8005e04 <HAL_GPIO_WritePin>
		break;
 8002be8:	e006      	b.n	8002bf8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, arg_int);
 8002bea:	7abb      	ldrb	r3, [r7, #10]
 8002bec:	461a      	mov	r2, r3
 8002bee:	2104      	movs	r1, #4
 8002bf0:	4804      	ldr	r0, [pc, #16]	@ (8002c04 <u8x8_stm32_gpio_and_delay+0x68>)
 8002bf2:	f003 f907 	bl	8005e04 <HAL_GPIO_WritePin>
		break;
 8002bf6:	bf00      	nop
	}
	return 1;
 8002bf8:	2301      	movs	r3, #1
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40021800 	.word	0x40021800

08002c08 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	72fb      	strb	r3, [r7, #11]
 8002c16:	4613      	mov	r3, r2
 8002c18:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	3b14      	subs	r3, #20
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d83e      	bhi.n	8002ca0 <u8x8_byte_4wire_hw_spi+0x98>
 8002c22:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <u8x8_byte_4wire_hw_spi+0x20>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002ca5 	.word	0x08002ca5
 8002c2c:	08002ca1 	.word	0x08002ca1
 8002c30:	08002ca1 	.word	0x08002ca1
 8002c34:	08002c5d 	.word	0x08002c5d
 8002c38:	08002c7d 	.word	0x08002c7d
 8002c3c:	08002c8f 	.word	0x08002c8f
 8002c40:	08002ca1 	.word	0x08002ca1
 8002c44:	08002ca1 	.word	0x08002ca1
 8002c48:	08002ca1 	.word	0x08002ca1
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002ca1 	.word	0x08002ca1
 8002c58:	08002c6f 	.word	0x08002c6f
	case U8X8_MSG_BYTE_SEND:
//		HAL_SPI_Transmit(hspi, pData, Size, Timeout)
		HAL_SPI_Transmit(&hspi3, (uint8_t*) arg_ptr, arg_int, 10000);
 8002c5c:	7abb      	ldrb	r3, [r7, #10]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4812      	ldr	r0, [pc, #72]	@ (8002cb0 <u8x8_byte_4wire_hw_spi+0xa8>)
 8002c68:	f003 ffb9 	bl	8006bde <HAL_SPI_Transmit>
		break;
 8002c6c:	e01b      	b.n	8002ca6 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, arg_int);
 8002c6e:	7abb      	ldrb	r3, [r7, #10]
 8002c70:	461a      	mov	r2, r3
 8002c72:	2108      	movs	r1, #8
 8002c74:	480f      	ldr	r0, [pc, #60]	@ (8002cb4 <u8x8_byte_4wire_hw_spi+0xac>)
 8002c76:	f003 f8c5 	bl	8005e04 <HAL_GPIO_WritePin>
		break;
 8002c7a:	e014      	b.n	8002ca6 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	2104      	movs	r1, #4
 8002c86:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <u8x8_byte_4wire_hw_spi+0xb0>)
 8002c88:	f003 f8bc 	bl	8005e04 <HAL_GPIO_WritePin>
		break;
 8002c8c:	e00b      	b.n	8002ca6 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	461a      	mov	r2, r3
 8002c96:	2104      	movs	r1, #4
 8002c98:	4807      	ldr	r0, [pc, #28]	@ (8002cb8 <u8x8_byte_4wire_hw_spi+0xb0>)
 8002c9a:	f003 f8b3 	bl	8005e04 <HAL_GPIO_WritePin>
		break;
 8002c9e:	e002      	b.n	8002ca6 <u8x8_byte_4wire_hw_spi+0x9e>
	default:
		return 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e001      	b.n	8002ca8 <u8x8_byte_4wire_hw_spi+0xa0>
		break;
 8002ca4:	bf00      	nop
	}
	return 1;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000964 	.word	0x20000964
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40020c00 	.word	0x40020c00

08002cbc <Display_Init>:

void Display_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    // Setup display with hardware SPI
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <Display_Init+0x30>)
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf0 <Display_Init+0x34>)
 8002cc4:	490b      	ldr	r1, [pc, #44]	@ (8002cf4 <Display_Init+0x38>)
 8002cc6:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <Display_Init+0x3c>)
 8002cc8:	f7fe fa8a 	bl	80011e0 <u8g2_Setup_st7565_64128n_f>

    // Initialize display
    u8g2_InitDisplay(&u8g2);
 8002ccc:	480a      	ldr	r0, [pc, #40]	@ (8002cf8 <Display_Init+0x3c>)
 8002cce:	f7ff fe95 	bl	80029fc <u8x8_InitDisplay>

    // Wake up display
//    u8g2_SetPowerSave(&u8g2, 0);
    Display_PowerSave(0);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f812 	bl	8002cfc <Display_PowerSave>

    // Clear display
    u8g2_ClearDisplay(&u8g2);
 8002cd8:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <Display_Init+0x3c>)
 8002cda:	f7fe fa5b 	bl	8001194 <u8g2_ClearDisplay>

    // Set contrast
    u8g2_SetContrast(&u8g2, 100);
 8002cde:	2164      	movs	r1, #100	@ 0x64
 8002ce0:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <Display_Init+0x3c>)
 8002ce2:	f7ff feab 	bl	8002a3c <u8x8_SetContrast>

    // Initial display update
//    u8g2_FirstPage(&u8g2);
//    u8g2_ClearBuffer(&u8g2);
//    u8g2_SendBuffer(&u8g2);
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	08002b9d 	.word	0x08002b9d
 8002cf0:	08002c09 	.word	0x08002c09
 8002cf4:	0800f764 	.word	0x0800f764
 8002cf8:	20000774 	.word	0x20000774

08002cfc <Display_PowerSave>:

void Display_PowerSave(uint8_t enable) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
    u8g2_SetPowerSave(&u8g2, enable);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480e      	ldr	r0, [pc, #56]	@ (8002d44 <Display_PowerSave+0x48>)
 8002d0c:	f7ff fe85 	bl	8002a1a <u8x8_SetPowerSave>
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, !enable);
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2110      	movs	r1, #16
 8002d20:	4809      	ldr	r0, [pc, #36]	@ (8002d48 <Display_PowerSave+0x4c>)
 8002d22:	f003 f86f 	bl	8005e04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BACKLIGHT_2_GPIO_Port, BACKLIGHT_1_Pin, !enable);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	2110      	movs	r1, #16
 8002d36:	4804      	ldr	r0, [pc, #16]	@ (8002d48 <Display_PowerSave+0x4c>)
 8002d38:	f003 f864 	bl	8005e04 <HAL_GPIO_WritePin>
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000774 	.word	0x20000774
 8002d48:	40021800 	.word	0x40021800

08002d4c <MainTitlePage>:
void Display_Update(void)
{
    u8g2_SendBuffer(&u8g2);
}

void MainTitlePage() {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	do {
		// Load and display the image
		u8g2_FirstPage(&u8g2);
 8002d50:	4826      	ldr	r0, [pc, #152]	@ (8002dec <MainTitlePage+0xa0>)
 8002d52:	f7fe f9dd 	bl	8001110 <u8g2_FirstPage>
		do {
			// Draw your image using U8g2 functions
//			u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
		} while (u8g2_NextPage(&u8g2));
 8002d56:	4825      	ldr	r0, [pc, #148]	@ (8002dec <MainTitlePage+0xa0>)
 8002d58:	f7fe f9ee 	bl	8001138 <u8g2_NextPage>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <MainTitlePage+0xa>

		// Wait for a moment to display the image
		HAL_Delay(500); // Adjust the delay time as needed
 8002d62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d66:	f002 f88d 	bl	8004e84 <HAL_Delay>

		// Clear the screen for the title page
		u8g2_ClearBuffer(&u8g2);
 8002d6a:	4820      	ldr	r0, [pc, #128]	@ (8002dec <MainTitlePage+0xa0>)
 8002d6c:	f7fe f937 	bl	8000fde <u8g2_ClearBuffer>

		u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002d70:	491f      	ldr	r1, [pc, #124]	@ (8002df0 <MainTitlePage+0xa4>)
 8002d72:	481e      	ldr	r0, [pc, #120]	@ (8002dec <MainTitlePage+0xa0>)
 8002d74:	f7fe ffe4 	bl	8001d40 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8002d78:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <MainTitlePage+0xa8>)
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	212a      	movs	r1, #42	@ 0x2a
 8002d7e:	481b      	ldr	r0, [pc, #108]	@ (8002dec <MainTitlePage+0xa0>)
 8002d80:	f7fe ff3c 	bl	8001bfc <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002d84:	491a      	ldr	r1, [pc, #104]	@ (8002df0 <MainTitlePage+0xa4>)
 8002d86:	4819      	ldr	r0, [pc, #100]	@ (8002dec <MainTitlePage+0xa0>)
 8002d88:	f7fe ffda 	bl	8001d40 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <MainTitlePage+0xac>)
 8002d8e:	2221      	movs	r2, #33	@ 0x21
 8002d90:	2106      	movs	r1, #6
 8002d92:	4816      	ldr	r0, [pc, #88]	@ (8002dec <MainTitlePage+0xa0>)
 8002d94:	f7fe ff32 	bl	8001bfc <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 8002d98:	4918      	ldr	r1, [pc, #96]	@ (8002dfc <MainTitlePage+0xb0>)
 8002d9a:	4814      	ldr	r0, [pc, #80]	@ (8002dec <MainTitlePage+0xa0>)
 8002d9c:	f7fe ffd0 	bl	8001d40 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 16, 50, "BMS-TESTBENCH");
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <MainTitlePage+0xb4>)
 8002da2:	2232      	movs	r2, #50	@ 0x32
 8002da4:	2110      	movs	r1, #16
 8002da6:	4811      	ldr	r0, [pc, #68]	@ (8002dec <MainTitlePage+0xa0>)
 8002da8:	f7fe ff28 	bl	8001bfc <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_tom_thumb_4x6_tr);
 8002dac:	4915      	ldr	r1, [pc, #84]	@ (8002e04 <MainTitlePage+0xb8>)
 8002dae:	480f      	ldr	r0, [pc, #60]	@ (8002dec <MainTitlePage+0xa0>)
 8002db0:	f7fe ffc6 	bl	8001d40 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 48, 62, "Testing..");
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <MainTitlePage+0xbc>)
 8002db6:	223e      	movs	r2, #62	@ 0x3e
 8002db8:	2130      	movs	r1, #48	@ 0x30
 8002dba:	480c      	ldr	r0, [pc, #48]	@ (8002dec <MainTitlePage+0xa0>)
 8002dbc:	f7fe ff1e 	bl	8001bfc <u8g2_DrawStr>
	    u8g2_SendBuffer(&u8g2);
 8002dc0:	480a      	ldr	r0, [pc, #40]	@ (8002dec <MainTitlePage+0xa0>)
 8002dc2:	f7fe f97f 	bl	80010c4 <u8g2_SendBuffer>
	    u8g2_ClearBuffer(&u8g2);
 8002dc6:	4809      	ldr	r0, [pc, #36]	@ (8002dec <MainTitlePage+0xa0>)
 8002dc8:	f7fe f909 	bl	8000fde <u8g2_ClearBuffer>

		HAL_Delay(1000);
 8002dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dd0:	f002 f858 	bl	8004e84 <HAL_Delay>

	} while (u8g2_NextPage(&u8g2));
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MainTitlePage+0xa0>)
 8002dd6:	f7fe f9af 	bl	8001138 <u8g2_NextPage>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1b7      	bne.n	8002d50 <MainTitlePage+0x4>
	HAL_Delay(100);
 8002de0:	2064      	movs	r0, #100	@ 0x64
 8002de2:	f002 f84f 	bl	8004e84 <HAL_Delay>
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000774 	.word	0x20000774
 8002df0:	0800eb0c 	.word	0x0800eb0c
 8002df4:	0800b318 	.word	0x0800b318
 8002df8:	0800b320 	.word	0x0800b320
 8002dfc:	0800b634 	.word	0x0800b634
 8002e00:	0800b32c 	.word	0x0800b32c
 8002e04:	0800b36c 	.word	0x0800b36c
 8002e08:	0800b33c 	.word	0x0800b33c

08002e0c <display_lcd>:

void display_lcd(const char *message)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 8002e14:	480e      	ldr	r0, [pc, #56]	@ (8002e50 <display_lcd+0x44>)
 8002e16:	f7fe f97b 	bl	8001110 <u8g2_FirstPage>
	    do {
	    	u8g2_ClearBuffer(&u8g2);
 8002e1a:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <display_lcd+0x44>)
 8002e1c:	f7fe f8df 	bl	8000fde <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 8002e20:	490c      	ldr	r1, [pc, #48]	@ (8002e54 <display_lcd+0x48>)
 8002e22:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <display_lcd+0x44>)
 8002e24:	f7fe ff8c 	bl	8001d40 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 0, 30, message);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	221e      	movs	r2, #30
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4808      	ldr	r0, [pc, #32]	@ (8002e50 <display_lcd+0x44>)
 8002e30:	f7fe fee4 	bl	8001bfc <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8002e34:	4806      	ldr	r0, [pc, #24]	@ (8002e50 <display_lcd+0x44>)
 8002e36:	f7fe f945 	bl	80010c4 <u8g2_SendBuffer>
	    } while (u8g2_NextPage(&u8g2));
 8002e3a:	4805      	ldr	r0, [pc, #20]	@ (8002e50 <display_lcd+0x44>)
 8002e3c:	f7fe f97c 	bl	8001138 <u8g2_NextPage>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e9      	bne.n	8002e1a <display_lcd+0xe>
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000774 	.word	0x20000774
 8002e54:	0800b634 	.word	0x0800b634

08002e58 <display_progress_bar>:

void display_progress_bar(const char *message, float percentage)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	ed87 0a02 	vstr	s0, [r7, #8]
    u8g2_ClearBuffer(&u8g2);
 8002e64:	4824      	ldr	r0, [pc, #144]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002e66:	f7fe f8ba 	bl	8000fde <u8g2_ClearBuffer>

    // Display message at top
    u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 8002e6a:	4924      	ldr	r1, [pc, #144]	@ (8002efc <display_progress_bar+0xa4>)
 8002e6c:	4822      	ldr	r0, [pc, #136]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002e6e:	f7fe ff67 	bl	8001d40 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 10, 20, message);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2214      	movs	r2, #20
 8002e76:	210a      	movs	r1, #10
 8002e78:	481f      	ldr	r0, [pc, #124]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002e7a:	f7fe febf 	bl	8001bfc <u8g2_DrawStr>

    // Draw progress bar frame
    u8g2_DrawFrame(&u8g2, 10, 30, 108, 10);
 8002e7e:	230a      	movs	r3, #10
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	236c      	movs	r3, #108	@ 0x6c
 8002e84:	221e      	movs	r2, #30
 8002e86:	210a      	movs	r1, #10
 8002e88:	481b      	ldr	r0, [pc, #108]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002e8a:	f7fe f84b 	bl	8000f24 <u8g2_DrawFrame>

    // Calculate and draw fill bar
    uint8_t fill_width = (uint8_t)((percentage / 100.0f) * 106);
 8002e8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e92:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002f00 <display_progress_bar+0xa8>
 8002e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e9a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002f04 <display_progress_bar+0xac>
 8002e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002eaa:	793b      	ldrb	r3, [r7, #4]
 8002eac:	77fb      	strb	r3, [r7, #31]
    if (fill_width > 0) {
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <display_progress_bar+0x6e>
        u8g2_DrawBox(&u8g2, 11, 31, fill_width, 8);
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2208      	movs	r2, #8
 8002eba:	9200      	str	r2, [sp, #0]
 8002ebc:	221f      	movs	r2, #31
 8002ebe:	210b      	movs	r1, #11
 8002ec0:	480d      	ldr	r0, [pc, #52]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002ec2:	f7fd fff9 	bl	8000eb8 <u8g2_DrawBox>
    }

    // Display percentage text below
    char percent_str[10];
    sprintf(percent_str, "%.1f%%", percentage);
 8002ec6:	68b8      	ldr	r0, [r7, #8]
 8002ec8:	f7fd fb4e 	bl	8000568 <__aeabi_f2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	f107 0014 	add.w	r0, r7, #20
 8002ed4:	490c      	ldr	r1, [pc, #48]	@ (8002f08 <display_progress_bar+0xb0>)
 8002ed6:	f006 f99b 	bl	8009210 <siprintf>
    u8g2_DrawStr(&u8g2, 40, 50, percent_str);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	2232      	movs	r2, #50	@ 0x32
 8002ee0:	2128      	movs	r1, #40	@ 0x28
 8002ee2:	4805      	ldr	r0, [pc, #20]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002ee4:	f7fe fe8a 	bl	8001bfc <u8g2_DrawStr>

    u8g2_SendBuffer(&u8g2);
 8002ee8:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <display_progress_bar+0xa0>)
 8002eea:	f7fe f8eb 	bl	80010c4 <u8g2_SendBuffer>
}
 8002eee:	bf00      	nop
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000774 	.word	0x20000774
 8002efc:	0800b634 	.word	0x0800b634
 8002f00:	42c80000 	.word	0x42c80000
 8002f04:	42d40000 	.word	0x42d40000
 8002f08:	0800b348 	.word	0x0800b348

08002f0c <LED_Init>:
    {GPIOG, LED_07_Pin},  // LED 9


};

void LED_Init(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < 9; i++) {
 8002f12:	2300      	movs	r3, #0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	e00f      	b.n	8002f38 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <LED_Init+0x3c>)
 8002f1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4a09      	ldr	r2, [pc, #36]	@ (8002f48 <LED_Init+0x3c>)
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	889b      	ldrh	r3, [r3, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f002 ff69 	bl	8005e04 <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < 9; i++) {
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	3301      	adds	r3, #1
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d9ec      	bls.n	8002f18 <LED_Init+0xc>
    }
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800f7c8 	.word	0x0800f7c8

08002f4c <LED_Toggle>:
                         leds[led_number-1].pin,
                         state == ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

void LED_Toggle(uint8_t led_number) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
    if(led_number >= 1 && led_number <= 9) {
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <LED_Toggle+0x34>
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d80e      	bhi.n	8002f80 <LED_Toggle+0x34>
        HAL_GPIO_TogglePin(leds[led_number-1].port, leds[led_number-1].pin);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <LED_Toggle+0x3c>)
 8002f68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	4905      	ldr	r1, [pc, #20]	@ (8002f88 <LED_Toggle+0x3c>)
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	889b      	ldrh	r3, [r3, #4]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f002 ff5b 	bl	8005e36 <HAL_GPIO_TogglePin>
    }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800f7c8 	.word	0x0800f7c8

08002f8c <HAL_UARTEx_RxEventCallback>:
    return size;
}

// Add this to your existing UART callback
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
    for(int i = 0; i < 4; i++) {
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e030      	b.n	8003000 <HAL_UARTEx_RxEventCallback+0x74>
        if(huart == channels[i].huart) {
 8002f9e:	491c      	ldr	r1, [pc, #112]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x84>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	440b      	add	r3, r1
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d122      	bne.n	8002ffa <HAL_UARTEx_RxEventCallback+0x6e>
            channels[i].rxSize = Size;
 8002fb4:	4916      	ldr	r1, [pc, #88]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x84>)
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334a      	adds	r3, #74	@ 0x4a
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	801a      	strh	r2, [r3, #0]
            channels[i].dataReady = 1;
 8002fc8:	4911      	ldr	r1, [pc, #68]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x84>)
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334c      	adds	r3, #76	@ 0x4c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
            HAL_UARTEx_ReceiveToIdle_IT(huart, channels[i].rxBuffer, RS485_BUFFER_SIZE);
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	4a09      	ldr	r2, [pc, #36]	@ (8003010 <HAL_UARTEx_RxEventCallback+0x84>)
 8002fea:	4413      	add	r3, r2
 8002fec:	3302      	adds	r3, #2
 8002fee:	2240      	movs	r2, #64	@ 0x40
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f004 fb1e 	bl	8007634 <HAL_UARTEx_ReceiveToIdle_IT>
            break;
 8002ff8:	e006      	b.n	8003008 <HAL_UARTEx_RxEventCallback+0x7c>
    for(int i = 0; i < 4; i++) {
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b03      	cmp	r3, #3
 8003004:	ddcb      	ble.n	8002f9e <HAL_UARTEx_RxEventCallback+0x12>
        }
    }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000000 	.word	0x20000000

08003014 <Push_ButtonHandler>:
extern const uint16_t DIP_SWITCH_PINS[];

const uint16_t BUTTON_PINS[] = {PUSH_BUTTON_01_Pin, PUSH_BUTTON_02_Pin, PUSH_BUTTON_03_Pin, PUSH_BUTTON_04_Pin};

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 800301e:	f001 ff25 	bl	8004e6c <HAL_GetTick>
 8003022:	4603      	mov	r3, r0
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <Push_ButtonHandler+0x64>)
 8003026:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e01c      	b.n	8003068 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 100)) {
 800302e:	4a13      	ldr	r2, [pc, #76]	@ (800307c <Push_ButtonHandler+0x68>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	429a      	cmp	r2, r3
 800303a:	d112      	bne.n	8003062 <Push_ButtonHandler+0x4e>
 800303c:	4b0e      	ldr	r3, [pc, #56]	@ (8003078 <Push_ButtonHandler+0x64>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <Push_ButtonHandler+0x6c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	@ 0x64
 8003048:	d90b      	bls.n	8003062 <Push_ButtonHandler+0x4e>
            LED_Toggle(j+1);  // Keep your existing LED toggle
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff7a 	bl	8002f4c <LED_Toggle>
            previousTime = currentTime;
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <Push_ButtonHandler+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <Push_ButtonHandler+0x6c>)
 800305e:	6013      	str	r3, [r2, #0]
            break;
 8003060:	e006      	b.n	8003070 <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3301      	adds	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b03      	cmp	r3, #3
 800306c:	dddf      	ble.n	800302e <Push_ButtonHandler+0x1a>
        }
    }
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000808 	.word	0x20000808
 800307c:	0800f810 	.word	0x0800f810
 8003080:	2000080c 	.word	0x2000080c

08003084 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003088:	4b17      	ldr	r3, [pc, #92]	@ (80030e8 <MX_CAN1_Init+0x64>)
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <MX_CAN1_Init+0x68>)
 800308c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_CAN1_Init+0x64>)
 8003090:	2209      	movs	r2, #9
 8003092:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <MX_CAN1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800309a:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <MX_CAN1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030a2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80030a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030be:	2200      	movs	r2, #0
 80030c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80030c8:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80030ce:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80030d4:	4804      	ldr	r0, [pc, #16]	@ (80030e8 <MX_CAN1_Init+0x64>)
 80030d6:	f001 fef9 	bl	8004ecc <HAL_CAN_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80030e0:	f001 f9bb 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000810 	.word	0x20000810
 80030ec:	40006400 	.word	0x40006400

080030f0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80030f4:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <MX_CAN2_Init+0x60>)
 80030f6:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <MX_CAN2_Init+0x64>)
 80030f8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <MX_CAN2_Init+0x60>)
 80030fc:	2210      	movs	r2, #16
 80030fe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003100:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800310c:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <MX_CAN2_Init+0x60>)
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003112:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <MX_CAN2_Init+0x60>)
 800311a:	2200      	movs	r2, #0
 800311c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003120:	2200      	movs	r2, #0
 8003122:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003126:	2200      	movs	r2, #0
 8003128:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <MX_CAN2_Init+0x60>)
 800312c:	2200      	movs	r2, #0
 800312e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003132:	2200      	movs	r2, #0
 8003134:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <MX_CAN2_Init+0x60>)
 8003138:	2200      	movs	r2, #0
 800313a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	@ (8003150 <MX_CAN2_Init+0x60>)
 800313e:	f001 fec5 	bl	8004ecc <HAL_CAN_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8003148:	f001 f987 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000838 	.word	0x20000838
 8003154:	40006800 	.word	0x40006800

08003158 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	@ 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <HAL_CAN_MspInit+0x148>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d145      	bne.n	8003206 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800317a:	4b4a      	ldr	r3, [pc, #296]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a48      	ldr	r2, [pc, #288]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 8003182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003184:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10d      	bne.n	80031a8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	4b45      	ldr	r3, [pc, #276]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	4a44      	ldr	r2, [pc, #272]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800319a:	6413      	str	r3, [r2, #64]	@ 0x40
 800319c:	4b42      	ldr	r3, [pc, #264]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	4b3e      	ldr	r3, [pc, #248]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	4a3d      	ldr	r2, [pc, #244]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b8:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031c4:	2303      	movs	r3, #3
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80031d4:	2309      	movs	r3, #9
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4833      	ldr	r0, [pc, #204]	@ (80032ac <HAL_CAN_MspInit+0x154>)
 80031e0:	f002 fc64 	bl	8005aac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	2014      	movs	r0, #20
 80031ea:	f002 fb96 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80031ee:	2014      	movs	r0, #20
 80031f0:	f002 fbaf 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	2015      	movs	r0, #21
 80031fa:	f002 fb8e 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80031fe:	2015      	movs	r0, #21
 8003200:	f002 fba7 	bl	8005952 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003204:	e048      	b.n	8003298 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_CAN_MspInit+0x158>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d143      	bne.n	8003298 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 800321a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800321e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 8003234:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_CAN_MspInit+0x14c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10d      	bne.n	800325a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a18      	ldr	r2, [pc, #96]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <HAL_CAN_MspInit+0x150>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003276:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003288:	2309      	movs	r3, #9
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	4808      	ldr	r0, [pc, #32]	@ (80032b4 <HAL_CAN_MspInit+0x15c>)
 8003294:	f002 fc0a 	bl	8005aac <HAL_GPIO_Init>
}
 8003298:	bf00      	nop
 800329a:	3730      	adds	r7, #48	@ 0x30
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40006400 	.word	0x40006400
 80032a4:	20000860 	.word	0x20000860
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020c00 	.word	0x40020c00
 80032b0:	40006800 	.word	0x40006800
 80032b4:	40020400 	.word	0x40020400

080032b8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2108      	movs	r1, #8
 80032c0:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <SELECT+0x18>)
 80032c2:	f002 fd9f 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f001 fddc 	bl	8004e84 <HAL_Delay>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40020c00 	.word	0x40020c00

080032d4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80032d8:	2201      	movs	r2, #1
 80032da:	2108      	movs	r1, #8
 80032dc:	4803      	ldr	r0, [pc, #12]	@ (80032ec <DESELECT+0x18>)
 80032de:	f002 fd91 	bl	8005e04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f001 fdce 	bl	8004e84 <HAL_Delay>
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40020c00 	.word	0x40020c00

080032f0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80032fa:	bf00      	nop
 80032fc:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <SPI_TxByte+0x30>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d1f8      	bne.n	80032fc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800330a:	1df9      	adds	r1, r7, #7
 800330c:	2364      	movs	r3, #100	@ 0x64
 800330e:	2201      	movs	r2, #1
 8003310:	4803      	ldr	r0, [pc, #12]	@ (8003320 <SPI_TxByte+0x30>)
 8003312:	f003 fc64 	bl	8006bde <HAL_SPI_Transmit>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000964 	.word	0x20000964

08003324 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003330:	bf00      	nop
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <SPI_TxBuffer+0x30>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d1f8      	bne.n	8003332 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	2364      	movs	r3, #100	@ 0x64
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4803      	ldr	r0, [pc, #12]	@ (8003354 <SPI_TxBuffer+0x30>)
 8003348:	f003 fc49 	bl	8006bde <HAL_SPI_Transmit>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000964 	.word	0x20000964

08003358 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800335e:	23ff      	movs	r3, #255	@ 0xff
 8003360:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003362:	bf00      	nop
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <SPI_RxByte+0x34>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d1f8      	bne.n	8003364 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003372:	1dba      	adds	r2, r7, #6
 8003374:	1df9      	adds	r1, r7, #7
 8003376:	2364      	movs	r3, #100	@ 0x64
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2301      	movs	r3, #1
 800337c:	4803      	ldr	r0, [pc, #12]	@ (800338c <SPI_RxByte+0x34>)
 800337e:	f003 fd72 	bl	8006e66 <HAL_SPI_TransmitReceive>

	return data;
 8003382:	79bb      	ldrb	r3, [r7, #6]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000964 	.word	0x20000964

08003390 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003398:	f7ff ffde 	bl	8003358 <SPI_RxByte>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	701a      	strb	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <SD_ReadyWait+0x30>)
 80033b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033b8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80033ba:	f7ff ffcd 	bl	8003358 <SPI_RxByte>
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2bff      	cmp	r3, #255	@ 0xff
 80033c6:	d004      	beq.n	80033d2 <SD_ReadyWait+0x26>
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <SD_ReadyWait+0x30>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f3      	bne.n	80033ba <SD_ReadyWait+0xe>

	return res;
 80033d2:	79fb      	ldrb	r3, [r7, #7]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000a18 	.word	0x20000a18

080033e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80033e6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80033ea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80033ec:	f7ff ff72 	bl	80032d4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	e005      	b.n	8003402 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80033f6:	20ff      	movs	r0, #255	@ 0xff
 80033f8:	f7ff ff7a 	bl	80032f0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3301      	adds	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b09      	cmp	r3, #9
 8003406:	ddf6      	ble.n	80033f6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003408:	f7ff ff56 	bl	80032b8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800340c:	2340      	movs	r3, #64	@ 0x40
 800340e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003420:	2395      	movs	r3, #149	@ 0x95
 8003422:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003424:	463b      	mov	r3, r7
 8003426:	2106      	movs	r1, #6
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff7b 	bl	8003324 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800342e:	e002      	b.n	8003436 <SD_PowerOn+0x56>
	{
		cnt--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003436:	f7ff ff8f 	bl	8003358 <SPI_RxByte>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d002      	beq.n	8003446 <SD_PowerOn+0x66>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f4      	bne.n	8003430 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003446:	f7ff ff45 	bl	80032d4 <DESELECT>
	SPI_TxByte(0XFF);
 800344a:	20ff      	movs	r0, #255	@ 0xff
 800344c:	f7ff ff50 	bl	80032f0 <SPI_TxByte>

	PowerFlag = 1;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <SD_PowerOn+0x80>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000865 	.word	0x20000865

08003464 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <SD_PowerOff+0x14>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000865 	.word	0x20000865

0800347c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <SD_CheckPower+0x14>)
 8003482:	781b      	ldrb	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000865 	.word	0x20000865

08003494 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800349e:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <SD_RxDataBlock+0x5c>)
 80034a0:	22c8      	movs	r2, #200	@ 0xc8
 80034a2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80034a4:	f7ff ff58 	bl	8003358 <SPI_RxByte>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2bff      	cmp	r3, #255	@ 0xff
 80034b0:	d104      	bne.n	80034bc <SD_RxDataBlock+0x28>
 80034b2:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <SD_RxDataBlock+0x5c>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f3      	bne.n	80034a4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2bfe      	cmp	r3, #254	@ 0xfe
 80034c0:	d001      	beq.n	80034c6 <SD_RxDataBlock+0x32>
 80034c2:	2300      	movs	r3, #0
 80034c4:	e00f      	b.n	80034e6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5f 	bl	8003390 <SPI_RxBytePtr>
	} while(len--);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	603a      	str	r2, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f4      	bne.n	80034c6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80034dc:	f7ff ff3c 	bl	8003358 <SPI_RxByte>
	SPI_RxByte();
 80034e0:	f7ff ff3a 	bl	8003358 <SPI_RxByte>

	return TRUE;
 80034e4:	2301      	movs	r3, #1
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000a16 	.word	0x20000a16

080034f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003504:	f7ff ff52 	bl	80033ac <SD_ReadyWait>
 8003508:	4603      	mov	r3, r0
 800350a:	2bff      	cmp	r3, #255	@ 0xff
 800350c:	d001      	beq.n	8003512 <SD_TxDataBlock+0x1e>
 800350e:	2300      	movs	r3, #0
 8003510:	e02f      	b.n	8003572 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff feeb 	bl	80032f0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	2bfd      	cmp	r3, #253	@ 0xfd
 800351e:	d020      	beq.n	8003562 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fefd 	bl	8003324 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800352a:	f7ff ff15 	bl	8003358 <SPI_RxByte>
		SPI_RxByte();
 800352e:	f7ff ff13 	bl	8003358 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003532:	e00b      	b.n	800354c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003534:	f7ff ff10 	bl	8003358 <SPI_RxByte>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b05      	cmp	r3, #5
 8003544:	d006      	beq.n	8003554 <SD_TxDataBlock+0x60>
			i++;
 8003546:	7bbb      	ldrb	r3, [r7, #14]
 8003548:	3301      	adds	r3, #1
 800354a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d9f0      	bls.n	8003534 <SD_TxDataBlock+0x40>
 8003552:	e000      	b.n	8003556 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003554:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003556:	bf00      	nop
 8003558:	f7ff fefe 	bl	8003358 <SPI_RxByte>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0fa      	beq.n	8003558 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2b05      	cmp	r3, #5
 800356a:	d101      	bne.n	8003570 <SD_TxDataBlock+0x7c>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	6039      	str	r1, [r7, #0]
 8003584:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003586:	f7ff ff11 	bl	80033ac <SD_ReadyWait>
 800358a:	4603      	mov	r3, r0
 800358c:	2bff      	cmp	r3, #255	@ 0xff
 800358e:	d001      	beq.n	8003594 <SD_SendCmd+0x1a>
 8003590:	23ff      	movs	r3, #255	@ 0xff
 8003592:	e042      	b.n	800361a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff feaa 	bl	80032f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	0e1b      	lsrs	r3, r3, #24
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fea4 	bl	80032f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fe9e 	bl	80032f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fe98 	bl	80032f0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fe93 	bl	80032f0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d102      	bne.n	80035d6 <SD_SendCmd+0x5c>
 80035d0:	2395      	movs	r3, #149	@ 0x95
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e007      	b.n	80035e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b48      	cmp	r3, #72	@ 0x48
 80035da:	d102      	bne.n	80035e2 <SD_SendCmd+0x68>
 80035dc:	2387      	movs	r3, #135	@ 0x87
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e001      	b.n	80035e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fe81 	bl	80032f0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2b4c      	cmp	r3, #76	@ 0x4c
 80035f2:	d101      	bne.n	80035f8 <SD_SendCmd+0x7e>
 80035f4:	f7ff feb0 	bl	8003358 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80035f8:	230a      	movs	r3, #10
 80035fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80035fc:	f7ff feac 	bl	8003358 <SPI_RxByte>
 8003600:	4603      	mov	r3, r0
 8003602:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003604:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da05      	bge.n	8003618 <SD_SendCmd+0x9e>
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	3b01      	subs	r3, #1
 8003610:	73bb      	strb	r3, [r7, #14]
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f1      	bne.n	80035fc <SD_SendCmd+0x82>

	return res;
 8003618:	7b7b      	ldrb	r3, [r7, #13]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <SD_disk_initialize+0x14>
 8003634:	2301      	movs	r3, #1
 8003636:	e0d6      	b.n	80037e6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003638:	4b6d      	ldr	r3, [pc, #436]	@ (80037f0 <SD_disk_initialize+0x1cc>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <SD_disk_initialize+0x2a>
 8003646:	4b6a      	ldr	r3, [pc, #424]	@ (80037f0 <SD_disk_initialize+0x1cc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e0cb      	b.n	80037e6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800364e:	f7ff fec7 	bl	80033e0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003652:	f7ff fe31 	bl	80032b8 <SELECT>

	/* check disk type */
	type = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800365a:	2100      	movs	r1, #0
 800365c:	2040      	movs	r0, #64	@ 0x40
 800365e:	f7ff ff8c 	bl	800357a <SD_SendCmd>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 80a6 	bne.w	80037b6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800366a:	4b62      	ldr	r3, [pc, #392]	@ (80037f4 <SD_disk_initialize+0x1d0>)
 800366c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003670:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003672:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003676:	2048      	movs	r0, #72	@ 0x48
 8003678:	f7ff ff7f 	bl	800357a <SD_SendCmd>
 800367c:	4603      	mov	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d158      	bne.n	8003734 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e00c      	b.n	80036a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003688:	7bfc      	ldrb	r4, [r7, #15]
 800368a:	f7ff fe65 	bl	8003358 <SPI_RxByte>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	f104 0310 	add.w	r3, r4, #16
 8003696:	443b      	add	r3, r7
 8003698:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d9ef      	bls.n	8003688 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80036a8:	7abb      	ldrb	r3, [r7, #10]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	f040 8083 	bne.w	80037b6 <SD_disk_initialize+0x192>
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	2baa      	cmp	r3, #170	@ 0xaa
 80036b4:	d17f      	bne.n	80037b6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80036b6:	2100      	movs	r1, #0
 80036b8:	2077      	movs	r0, #119	@ 0x77
 80036ba:	f7ff ff5e 	bl	800357a <SD_SendCmd>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d807      	bhi.n	80036d4 <SD_disk_initialize+0xb0>
 80036c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80036c8:	2069      	movs	r0, #105	@ 0x69
 80036ca:	f7ff ff56 	bl	800357a <SD_SendCmd>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80036d4:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <SD_disk_initialize+0x1d0>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1eb      	bne.n	80036b6 <SD_disk_initialize+0x92>
 80036de:	e000      	b.n	80036e2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80036e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80036e2:	4b44      	ldr	r3, [pc, #272]	@ (80037f4 <SD_disk_initialize+0x1d0>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d064      	beq.n	80037b6 <SD_disk_initialize+0x192>
 80036ec:	2100      	movs	r1, #0
 80036ee:	207a      	movs	r0, #122	@ 0x7a
 80036f0:	f7ff ff43 	bl	800357a <SD_SendCmd>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d15d      	bne.n	80037b6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e00c      	b.n	800371a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8003700:	7bfc      	ldrb	r4, [r7, #15]
 8003702:	f7ff fe29 	bl	8003358 <SPI_RxByte>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	f104 0310 	add.w	r3, r4, #16
 800370e:	443b      	add	r3, r7
 8003710:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d9ef      	bls.n	8003700 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003720:	7a3b      	ldrb	r3, [r7, #8]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <SD_disk_initialize+0x10a>
 800372a:	230c      	movs	r3, #12
 800372c:	e000      	b.n	8003730 <SD_disk_initialize+0x10c>
 800372e:	2304      	movs	r3, #4
 8003730:	73bb      	strb	r3, [r7, #14]
 8003732:	e040      	b.n	80037b6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003734:	2100      	movs	r1, #0
 8003736:	2077      	movs	r0, #119	@ 0x77
 8003738:	f7ff ff1f 	bl	800357a <SD_SendCmd>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d808      	bhi.n	8003754 <SD_disk_initialize+0x130>
 8003742:	2100      	movs	r1, #0
 8003744:	2069      	movs	r0, #105	@ 0x69
 8003746:	f7ff ff18 	bl	800357a <SD_SendCmd>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d801      	bhi.n	8003754 <SD_disk_initialize+0x130>
 8003750:	2302      	movs	r3, #2
 8003752:	e000      	b.n	8003756 <SD_disk_initialize+0x132>
 8003754:	2301      	movs	r3, #1
 8003756:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d10e      	bne.n	800377c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800375e:	2100      	movs	r1, #0
 8003760:	2077      	movs	r0, #119	@ 0x77
 8003762:	f7ff ff0a 	bl	800357a <SD_SendCmd>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d80e      	bhi.n	800378a <SD_disk_initialize+0x166>
 800376c:	2100      	movs	r1, #0
 800376e:	2069      	movs	r0, #105	@ 0x69
 8003770:	f7ff ff03 	bl	800357a <SD_SendCmd>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <SD_disk_initialize+0x166>
 800377a:	e00d      	b.n	8003798 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800377c:	2100      	movs	r1, #0
 800377e:	2041      	movs	r0, #65	@ 0x41
 8003780:	f7ff fefb 	bl	800357a <SD_SendCmd>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <SD_disk_initialize+0x1d0>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e1      	bne.n	8003758 <SD_disk_initialize+0x134>
 8003794:	e000      	b.n	8003798 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003796:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003798:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <SD_disk_initialize+0x1d0>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <SD_disk_initialize+0x18e>
 80037a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037a6:	2050      	movs	r0, #80	@ 0x50
 80037a8:	f7ff fee7 	bl	800357a <SD_SendCmd>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SD_disk_initialize+0x192>
 80037b2:	2300      	movs	r3, #0
 80037b4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80037b6:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <SD_disk_initialize+0x1d4>)
 80037b8:	7bbb      	ldrb	r3, [r7, #14]
 80037ba:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80037bc:	f7ff fd8a 	bl	80032d4 <DESELECT>
	SPI_RxByte();
 80037c0:	f7ff fdca 	bl	8003358 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <SD_disk_initialize+0x1cc>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <SD_disk_initialize+0x1cc>)
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e001      	b.n	80037e0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80037dc:	f7ff fe42 	bl	8003464 <SD_PowerOff>
	}

	return Stat;
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <SD_disk_initialize+0x1cc>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd90      	pop	{r4, r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000140 	.word	0x20000140
 80037f4:	20000a16 	.word	0x20000a16
 80037f8:	20000864 	.word	0x20000864

080037fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <SD_disk_status+0x14>
 800380c:	2301      	movs	r3, #1
 800380e:	e002      	b.n	8003816 <SD_disk_status+0x1a>
	return Stat;
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <SD_disk_status+0x28>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000140 	.word	0x20000140

08003828 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <SD_disk_read+0x1c>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <SD_disk_read+0x20>
 8003844:	2304      	movs	r3, #4
 8003846:	e051      	b.n	80038ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003848:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <SD_disk_read+0xcc>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <SD_disk_read+0x32>
 8003856:	2303      	movs	r3, #3
 8003858:	e048      	b.n	80038ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800385a:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <SD_disk_read+0xd0>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <SD_disk_read+0x44>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	607b      	str	r3, [r7, #4]

	SELECT();
 800386c:	f7ff fd24 	bl	80032b8 <SELECT>

	if (count == 1)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d111      	bne.n	800389a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	2051      	movs	r0, #81	@ 0x51
 800387a:	f7ff fe7e 	bl	800357a <SD_SendCmd>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d129      	bne.n	80038d8 <SD_disk_read+0xb0>
 8003884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f7ff fe03 	bl	8003494 <SD_RxDataBlock>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d021      	beq.n	80038d8 <SD_disk_read+0xb0>
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	e01e      	b.n	80038d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	2052      	movs	r0, #82	@ 0x52
 800389e:	f7ff fe6c 	bl	800357a <SD_SendCmd>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d117      	bne.n	80038d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80038a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f7ff fdf1 	bl	8003494 <SD_RxDataBlock>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <SD_disk_read+0xa6>
				buff += 512;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80038be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ed      	bne.n	80038a8 <SD_disk_read+0x80>
 80038cc:	e000      	b.n	80038d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80038ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80038d0:	2100      	movs	r1, #0
 80038d2:	204c      	movs	r0, #76	@ 0x4c
 80038d4:	f7ff fe51 	bl	800357a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80038d8:	f7ff fcfc 	bl	80032d4 <DESELECT>
	SPI_RxByte();
 80038dc:	f7ff fd3c 	bl	8003358 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000140 	.word	0x20000140
 80038f8:	20000864 	.word	0x20000864

080038fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <SD_disk_write+0x1c>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <SD_disk_write+0x20>
 8003918:	2304      	movs	r3, #4
 800391a:	e06b      	b.n	80039f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800391c:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <SD_disk_write+0x100>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <SD_disk_write+0x32>
 800392a:	2303      	movs	r3, #3
 800392c:	e062      	b.n	80039f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <SD_disk_write+0x100>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SD_disk_write+0x44>
 800393c:	2302      	movs	r3, #2
 800393e:	e059      	b.n	80039f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003940:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <SD_disk_write+0x104>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <SD_disk_write+0x56>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	025b      	lsls	r3, r3, #9
 8003950:	607b      	str	r3, [r7, #4]

	SELECT();
 8003952:	f7ff fcb1 	bl	80032b8 <SELECT>

	if (count == 1)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d110      	bne.n	800397e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	2058      	movs	r0, #88	@ 0x58
 8003960:	f7ff fe0b 	bl	800357a <SD_SendCmd>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d13a      	bne.n	80039e0 <SD_disk_write+0xe4>
 800396a:	21fe      	movs	r1, #254	@ 0xfe
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7ff fdc1 	bl	80034f4 <SD_TxDataBlock>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d033      	beq.n	80039e0 <SD_disk_write+0xe4>
			count = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	e030      	b.n	80039e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <SD_disk_write+0x104>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800398a:	2100      	movs	r1, #0
 800398c:	2077      	movs	r0, #119	@ 0x77
 800398e:	f7ff fdf4 	bl	800357a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	2057      	movs	r0, #87	@ 0x57
 8003996:	f7ff fdf0 	bl	800357a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	2059      	movs	r0, #89	@ 0x59
 800399e:	f7ff fdec 	bl	800357a <SD_SendCmd>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11b      	bne.n	80039e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80039a8:	21fc      	movs	r1, #252	@ 0xfc
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	f7ff fda2 	bl	80034f4 <SD_TxDataBlock>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <SD_disk_write+0xd0>
				buff += 512;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80039bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ee      	bne.n	80039a8 <SD_disk_write+0xac>
 80039ca:	e000      	b.n	80039ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80039cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80039ce:	21fd      	movs	r1, #253	@ 0xfd
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff fd8f 	bl	80034f4 <SD_TxDataBlock>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80039e0:	f7ff fc78 	bl	80032d4 <DESELECT>
	SPI_RxByte();
 80039e4:	f7ff fcb8 	bl	8003358 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000140 	.word	0x20000140
 8003a00:	20000864 	.word	0x20000864

08003a04 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b08b      	sub	sp, #44	@ 0x2c
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	603a      	str	r2, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
 8003a10:	460b      	mov	r3, r1
 8003a12:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <SD_disk_ioctl+0x1e>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e113      	b.n	8003c4a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8003a28:	79bb      	ldrb	r3, [r7, #6]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d124      	bne.n	8003a78 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d012      	beq.n	8003a5c <SD_disk_ioctl+0x58>
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	dc1a      	bgt.n	8003a70 <SD_disk_ioctl+0x6c>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <SD_disk_ioctl+0x40>
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d006      	beq.n	8003a50 <SD_disk_ioctl+0x4c>
 8003a42:	e015      	b.n	8003a70 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003a44:	f7ff fd0e 	bl	8003464 <SD_PowerOff>
			res = RES_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003a4e:	e0fa      	b.n	8003c46 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8003a50:	f7ff fcc6 	bl	80033e0 <SD_PowerOn>
			res = RES_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003a5a:	e0f4      	b.n	8003c46 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	1c5c      	adds	r4, r3, #1
 8003a60:	f7ff fd0c 	bl	800347c <SD_CheckPower>
 8003a64:	4603      	mov	r3, r0
 8003a66:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003a6e:	e0ea      	b.n	8003c46 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a76:	e0e6      	b.n	8003c46 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a78:	4b76      	ldr	r3, [pc, #472]	@ (8003c54 <SD_disk_ioctl+0x250>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <SD_disk_ioctl+0x86>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0df      	b.n	8003c4a <SD_disk_ioctl+0x246>

		SELECT();
 8003a8a:	f7ff fc15 	bl	80032b8 <SELECT>

		switch (ctrl)
 8003a8e:	79bb      	ldrb	r3, [r7, #6]
 8003a90:	2b0d      	cmp	r3, #13
 8003a92:	f200 80c9 	bhi.w	8003c28 <SD_disk_ioctl+0x224>
 8003a96:	a201      	add	r2, pc, #4	@ (adr r2, 8003a9c <SD_disk_ioctl+0x98>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003b93 	.word	0x08003b93
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003b83 	.word	0x08003b83
 8003aa8:	08003c29 	.word	0x08003c29
 8003aac:	08003c29 	.word	0x08003c29
 8003ab0:	08003c29 	.word	0x08003c29
 8003ab4:	08003c29 	.word	0x08003c29
 8003ab8:	08003c29 	.word	0x08003c29
 8003abc:	08003c29 	.word	0x08003c29
 8003ac0:	08003c29 	.word	0x08003c29
 8003ac4:	08003c29 	.word	0x08003c29
 8003ac8:	08003ba5 	.word	0x08003ba5
 8003acc:	08003bc9 	.word	0x08003bc9
 8003ad0:	08003bed 	.word	0x08003bed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2049      	movs	r0, #73	@ 0x49
 8003ad8:	f7ff fd4f 	bl	800357a <SD_SendCmd>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80a6 	bne.w	8003c30 <SD_disk_ioctl+0x22c>
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fcd2 	bl	8003494 <SD_RxDataBlock>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 809c 	beq.w	8003c30 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8003af8:	7b3b      	ldrb	r3, [r7, #12]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10d      	bne.n	8003b1e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003b02:	7d7b      	ldrb	r3, [r7, #21]
 8003b04:	461a      	mov	r2, r3
 8003b06:	7d3b      	ldrb	r3, [r7, #20]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003b14:	8bfb      	ldrh	r3, [r7, #30]
 8003b16:	029a      	lsls	r2, r3, #10
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e02d      	b.n	8003b7a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003b1e:	7c7b      	ldrb	r3, [r7, #17]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	7dbb      	ldrb	r3, [r7, #22]
 8003b28:	09db      	lsrs	r3, r3, #7
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	7d7b      	ldrb	r3, [r7, #21]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0306 	and.w	r3, r3, #6
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3302      	adds	r3, #2
 8003b42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003b46:	7d3b      	ldrb	r3, [r7, #20]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	7cbb      	ldrb	r3, [r7, #18]
 8003b5a:	029b      	lsls	r3, r3, #10
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003b6c:	8bfa      	ldrh	r2, [r7, #30]
 8003b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b72:	3b09      	subs	r3, #9
 8003b74:	409a      	lsls	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8003b80:	e056      	b.n	8003c30 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b88:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003b90:	e055      	b.n	8003c3e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003b92:	f7ff fc0b 	bl	80033ac <SD_ReadyWait>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2bff      	cmp	r3, #255	@ 0xff
 8003b9a:	d14b      	bne.n	8003c34 <SD_disk_ioctl+0x230>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003ba2:	e047      	b.n	8003c34 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2049      	movs	r0, #73	@ 0x49
 8003ba8:	f7ff fce7 	bl	800357a <SD_SendCmd>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d142      	bne.n	8003c38 <SD_disk_ioctl+0x234>
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	6a38      	ldr	r0, [r7, #32]
 8003bb6:	f7ff fc6d 	bl	8003494 <SD_RxDataBlock>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03b      	beq.n	8003c38 <SD_disk_ioctl+0x234>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003bc6:	e037      	b.n	8003c38 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003bc8:	2100      	movs	r1, #0
 8003bca:	204a      	movs	r0, #74	@ 0x4a
 8003bcc:	f7ff fcd5 	bl	800357a <SD_SendCmd>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d132      	bne.n	8003c3c <SD_disk_ioctl+0x238>
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	6a38      	ldr	r0, [r7, #32]
 8003bda:	f7ff fc5b 	bl	8003494 <SD_RxDataBlock>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02b      	beq.n	8003c3c <SD_disk_ioctl+0x238>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003bea:	e027      	b.n	8003c3c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003bec:	2100      	movs	r1, #0
 8003bee:	207a      	movs	r0, #122	@ 0x7a
 8003bf0:	f7ff fcc3 	bl	800357a <SD_SendCmd>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c00:	e00b      	b.n	8003c1a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8003c02:	6a3c      	ldr	r4, [r7, #32]
 8003c04:	1c63      	adds	r3, r4, #1
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	f7ff fba6 	bl	8003358 <SPI_RxByte>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003c10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c14:	3301      	adds	r3, #1
 8003c16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d9ef      	bls.n	8003c02 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c2e:	e006      	b.n	8003c3e <SD_disk_ioctl+0x23a>
			break;
 8003c30:	bf00      	nop
 8003c32:	e004      	b.n	8003c3e <SD_disk_ioctl+0x23a>
			break;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <SD_disk_ioctl+0x23a>
			break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <SD_disk_ioctl+0x23a>
			break;
 8003c3c:	bf00      	nop
		}

		DESELECT();
 8003c3e:	f7ff fb49 	bl	80032d4 <DESELECT>
		SPI_RxByte();
 8003c42:	f7ff fb89 	bl	8003358 <SPI_RxByte>
	}

	return res;
 8003c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	372c      	adds	r7, #44	@ 0x2c
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000140 	.word	0x20000140

08003c58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	@ 0x38
 8003c5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	4bb5      	ldr	r3, [pc, #724]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4ab4      	ldr	r2, [pc, #720]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7e:	4bb2      	ldr	r3, [pc, #712]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	4bae      	ldr	r3, [pc, #696]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4aad      	ldr	r2, [pc, #692]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c94:	f043 0320 	orr.w	r3, r3, #32
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4bab      	ldr	r3, [pc, #684]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	4ba7      	ldr	r3, [pc, #668]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4aa6      	ldr	r2, [pc, #664]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a9f      	ldr	r2, [pc, #636]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	4b99      	ldr	r3, [pc, #612]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a98      	ldr	r2, [pc, #608]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003ce8:	f043 0310 	orr.w	r3, r3, #16
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b96      	ldr	r3, [pc, #600]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b92      	ldr	r3, [pc, #584]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4a91      	ldr	r2, [pc, #580]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a8a      	ldr	r2, [pc, #552]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b88      	ldr	r3, [pc, #544]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	4b84      	ldr	r3, [pc, #528]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	4a83      	ldr	r2, [pc, #524]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d42:	4b81      	ldr	r3, [pc, #516]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4b7d      	ldr	r3, [pc, #500]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	4a7c      	ldr	r2, [pc, #496]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f48 <MX_GPIO_Init+0x2f0>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4877      	ldr	r0, [pc, #476]	@ (8003f4c <MX_GPIO_Init+0x2f4>)
 8003d70:	f002 f848 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, Temp_LED_Pin|LED_09_Pin, GPIO_PIN_SET);
 8003d74:	2201      	movs	r2, #1
 8003d76:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003d7a:	4875      	ldr	r0, [pc, #468]	@ (8003f50 <MX_GPIO_Init+0x2f8>)
 8003d7c:	f002 f842 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ISO_01_GPIO_Port, CS_ISO_01_Pin, GPIO_PIN_SET);
 8003d80:	2201      	movs	r2, #1
 8003d82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d86:	4873      	ldr	r0, [pc, #460]	@ (8003f54 <MX_GPIO_Init+0x2fc>)
 8003d88:	f002 f83c 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_ISO_02_Pin|USART3_ENABLE_Pin, GPIO_PIN_RESET);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8003d92:	4871      	ldr	r0, [pc, #452]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003d94:	f002 f836 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin, GPIO_PIN_SET);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	210c      	movs	r1, #12
 8003d9c:	486f      	ldr	r0, [pc, #444]	@ (8003f5c <MX_GPIO_Init+0x304>)
 8003d9e:	f002 f831 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_07_Pin|LED_02_Pin
 8003da2:	2200      	movs	r2, #0
 8003da4:	f24e 0130 	movw	r1, #57392	@ 0xe030
 8003da8:	486c      	ldr	r0, [pc, #432]	@ (8003f5c <MX_GPIO_Init+0x304>)
 8003daa:	f002 f82b 	bl	8005e04 <HAL_GPIO_WritePin>
                          |LED_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003db4:	486a      	ldr	r0, [pc, #424]	@ (8003f60 <MX_GPIO_Init+0x308>)
 8003db6:	f002 f825 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_08_GPIO_Port, LED_08_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dc0:	4863      	ldr	r0, [pc, #396]	@ (8003f50 <MX_GPIO_Init+0x2f8>)
 8003dc2:	f002 f81f 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	210c      	movs	r1, #12
 8003dca:	4863      	ldr	r0, [pc, #396]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003dcc:	f002 f81a 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_01_Pin|LED_05_Pin|USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2138      	movs	r1, #56	@ 0x38
 8003dd4:	485f      	ldr	r0, [pc, #380]	@ (8003f54 <MX_GPIO_Init+0x2fc>)
 8003dd6:	f002 f815 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_04_Pin|LED_03_Pin, GPIO_PIN_RESET);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2103      	movs	r1, #3
 8003dde:	4861      	ldr	r0, [pc, #388]	@ (8003f64 <MX_GPIO_Init+0x30c>)
 8003de0:	f002 f810 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, RS485_YELLOW_LED_02_Pin|RS485_GREEN_LED_02_Pin|RS485_YELLOW_LED_01_Pin|RS485_GREEN_LED_01_Pin, GPIO_PIN_RESET);
 8003de4:	2200      	movs	r2, #0
 8003de6:	21f0      	movs	r1, #240	@ 0xf0
 8003de8:	485f      	ldr	r0, [pc, #380]	@ (8003f68 <MX_GPIO_Init+0x310>)
 8003dea:	f002 f80b 	bl	8005e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8003dee:	2302      	movs	r3, #2
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e02:	4619      	mov	r1, r3
 8003e04:	4851      	ldr	r0, [pc, #324]	@ (8003f4c <MX_GPIO_Init+0x2f4>)
 8003e06:	f001 fe51 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = Temp_LED_Pin|LED_08_Pin;
 8003e0a:	f248 0340 	movw	r3, #32832	@ 0x8040
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e10:	2301      	movs	r3, #1
 8003e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e20:	4619      	mov	r1, r3
 8003e22:	484b      	ldr	r0, [pc, #300]	@ (8003f50 <MX_GPIO_Init+0x2f8>)
 8003e24:	f001 fe42 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_ISO_01_Pin|LED_01_Pin|LED_05_Pin|USART1_ENABLE_Pin;
 8003e28:	f248 0338 	movw	r3, #32824	@ 0x8038
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4844      	ldr	r0, [pc, #272]	@ (8003f54 <MX_GPIO_Init+0x2fc>)
 8003e42:	f001 fe33 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CS_ISO_02_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8003e46:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	483e      	ldr	r0, [pc, #248]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003e60:	f001 fe24 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8003e64:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4837      	ldr	r0, [pc, #220]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003e7c:	f001 fe16 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_02_Pin;
 8003e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_02_GPIO_Port, &GPIO_InitStruct);
 8003e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e94:	4619      	mov	r1, r3
 8003e96:	4830      	ldr	r0, [pc, #192]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003e98:	f001 fe08 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003e9c:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_07_Pin|LED_02_Pin|LED_06_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4829      	ldr	r0, [pc, #164]	@ (8003f5c <MX_GPIO_Init+0x304>)
 8003eb6:	f001 fdf9 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART6_ENABLE_Pin;
 8003eba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART6_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4823      	ldr	r0, [pc, #140]	@ (8003f60 <MX_GPIO_Init+0x308>)
 8003ed4:	f001 fdea 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 8003ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8003ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eea:	4619      	mov	r1, r3
 8003eec:	4818      	ldr	r0, [pc, #96]	@ (8003f50 <MX_GPIO_Init+0x2f8>)
 8003eee:	f001 fddd 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_09_Pin;
 8003ef2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003efc:	2301      	movs	r3, #1
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f00:	2300      	movs	r3, #0
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_09_GPIO_Port, &GPIO_InitStruct);
 8003f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4811      	ldr	r0, [pc, #68]	@ (8003f50 <MX_GPIO_Init+0x2f8>)
 8003f0c:	f001 fdce 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8003f10:	23f0      	movs	r3, #240	@ 0xf0
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f20:	4619      	mov	r1, r3
 8003f22:	480d      	ldr	r0, [pc, #52]	@ (8003f58 <MX_GPIO_Init+0x300>)
 8003f24:	f001 fdc2 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8003f28:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4807      	ldr	r0, [pc, #28]	@ (8003f5c <MX_GPIO_Init+0x304>)
 8003f3e:	f001 fdb5 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_04_Pin|LED_03_Pin;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e012      	b.n	8003f6c <MX_GPIO_Init+0x314>
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	40021c00 	.word	0x40021c00
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	40021800 	.word	0x40021800
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2300      	movs	r3, #0
 8003f78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f7e:	4619      	mov	r1, r3
 8003f80:	480e      	ldr	r0, [pc, #56]	@ (8003fbc <MX_GPIO_Init+0x364>)
 8003f82:	f001 fd93 	bl	8005aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = RS485_YELLOW_LED_02_Pin|RS485_GREEN_LED_02_Pin|RS485_YELLOW_LED_01_Pin|RS485_GREEN_LED_01_Pin;
 8003f86:	23f0      	movs	r3, #240	@ 0xf0
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4808      	ldr	r0, [pc, #32]	@ (8003fc0 <MX_GPIO_Init+0x368>)
 8003f9e:	f001 fd85 	bl	8005aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2028      	movs	r0, #40	@ 0x28
 8003fa8:	f001 fcb7 	bl	800591a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fac:	2028      	movs	r0, #40	@ 0x28
 8003fae:	f001 fcd0 	bl	8005952 <HAL_NVIC_EnableIRQ>

}
 8003fb2:	bf00      	nop
 8003fb4:	3738      	adds	r7, #56	@ 0x38
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <MX_I2C1_Init+0x78>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <MX_I2C1_Init+0x7c>)
 8003fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fd4:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003fda:	4b17      	ldr	r3, [pc, #92]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fe0:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <MX_I2C1_Init+0x74>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004000:	480d      	ldr	r0, [pc, #52]	@ (8004038 <MX_I2C1_Init+0x74>)
 8004002:	f001 ff4b 	bl	8005e9c <HAL_I2C_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800400c:	f000 fa25 	bl	800445a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004010:	2100      	movs	r1, #0
 8004012:	4809      	ldr	r0, [pc, #36]	@ (8004038 <MX_I2C1_Init+0x74>)
 8004014:	f002 f886 	bl	8006124 <HAL_I2CEx_ConfigAnalogFilter>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800401e:	f000 fa1c 	bl	800445a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004022:	2100      	movs	r1, #0
 8004024:	4804      	ldr	r0, [pc, #16]	@ (8004038 <MX_I2C1_Init+0x74>)
 8004026:	f002 f8b9 	bl	800619c <HAL_I2CEx_ConfigDigitalFilter>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004030:	f000 fa13 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000868 	.word	0x20000868
 800403c:	40005400 	.word	0x40005400
 8004040:	00061a80 	.word	0x00061a80

08004044 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004048:	4b1b      	ldr	r3, [pc, #108]	@ (80040b8 <MX_I2C2_Init+0x74>)
 800404a:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <MX_I2C2_Init+0x78>)
 800404c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800404e:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004050:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <MX_I2C2_Init+0x7c>)
 8004052:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004054:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800405a:	4b17      	ldr	r3, [pc, #92]	@ (80040b8 <MX_I2C2_Init+0x74>)
 800405c:	2200      	movs	r2, #0
 800405e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004066:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <MX_I2C2_Init+0x74>)
 800406a:	2200      	movs	r2, #0
 800406c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004074:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800407a:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <MX_I2C2_Init+0x74>)
 800407c:	2200      	movs	r2, #0
 800407e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004080:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004082:	f001 ff0b 	bl	8005e9c <HAL_I2C_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800408c:	f000 f9e5 	bl	800445a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004090:	2100      	movs	r1, #0
 8004092:	4809      	ldr	r0, [pc, #36]	@ (80040b8 <MX_I2C2_Init+0x74>)
 8004094:	f002 f846 	bl	8006124 <HAL_I2CEx_ConfigAnalogFilter>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800409e:	f000 f9dc 	bl	800445a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040a2:	2100      	movs	r1, #0
 80040a4:	4804      	ldr	r0, [pc, #16]	@ (80040b8 <MX_I2C2_Init+0x74>)
 80040a6:	f002 f879 	bl	800619c <HAL_I2CEx_ConfigDigitalFilter>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80040b0:	f000 f9d3 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200008bc 	.word	0x200008bc
 80040bc:	40005800 	.word	0x40005800
 80040c0:	000186a0 	.word	0x000186a0

080040c4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040ca:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <MX_I2C3_Init+0x78>)
 80040cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <MX_I2C3_Init+0x7c>)
 80040d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040dc:	2200      	movs	r2, #0
 80040de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040e0:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040e8:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040f4:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <MX_I2C3_Init+0x74>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004100:	480d      	ldr	r0, [pc, #52]	@ (8004138 <MX_I2C3_Init+0x74>)
 8004102:	f001 fecb 	bl	8005e9c <HAL_I2C_Init>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800410c:	f000 f9a5 	bl	800445a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004110:	2100      	movs	r1, #0
 8004112:	4809      	ldr	r0, [pc, #36]	@ (8004138 <MX_I2C3_Init+0x74>)
 8004114:	f002 f806 	bl	8006124 <HAL_I2CEx_ConfigAnalogFilter>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800411e:	f000 f99c 	bl	800445a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004122:	2100      	movs	r1, #0
 8004124:	4804      	ldr	r0, [pc, #16]	@ (8004138 <MX_I2C3_Init+0x74>)
 8004126:	f002 f839 	bl	800619c <HAL_I2CEx_ConfigDigitalFilter>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8004130:	f000 f993 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000910 	.word	0x20000910
 800413c:	40005c00 	.word	0x40005c00
 8004140:	000186a0 	.word	0x000186a0

08004144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	@ 0x38
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a4c      	ldr	r2, [pc, #304]	@ (8004294 <HAL_I2C_MspInit+0x150>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d12d      	bne.n	80041c2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	6313      	str	r3, [r2, #48]	@ 0x30
 8004176:	4b48      	ldr	r3, [pc, #288]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004182:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004188:	2312      	movs	r3, #18
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004194:	2304      	movs	r3, #4
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800419c:	4619      	mov	r1, r3
 800419e:	483f      	ldr	r0, [pc, #252]	@ (800429c <HAL_I2C_MspInit+0x158>)
 80041a0:	f001 fc84 	bl	8005aac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b4:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80041c0:	e063      	b.n	800428a <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a36      	ldr	r2, [pc, #216]	@ (80042a0 <HAL_I2C_MspInit+0x15c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d12c      	bne.n	8004226 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	4a30      	ldr	r2, [pc, #192]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041d6:	f043 0320 	orr.w	r3, r3, #32
 80041da:	6313      	str	r3, [r2, #48]	@ 0x30
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041e8:	2303      	movs	r3, #3
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ec:	2312      	movs	r3, #18
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f4:	2303      	movs	r3, #3
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041f8:	2304      	movs	r3, #4
 80041fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004200:	4619      	mov	r1, r3
 8004202:	4828      	ldr	r0, [pc, #160]	@ (80042a4 <HAL_I2C_MspInit+0x160>)
 8004204:	f001 fc52 	bl	8005aac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004212:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004216:	6413      	str	r3, [r2, #64]	@ 0x40
 8004218:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697b      	ldr	r3, [r7, #20]
}
 8004224:	e031      	b.n	800428a <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C3)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1f      	ldr	r2, [pc, #124]	@ (80042a8 <HAL_I2C_MspInit+0x164>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d12c      	bne.n	800428a <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 800423a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004240:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800424c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004252:	2312      	movs	r3, #18
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425a:	2303      	movs	r3, #3
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800425e:	2304      	movs	r3, #4
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004266:	4619      	mov	r1, r3
 8004268:	4810      	ldr	r0, [pc, #64]	@ (80042ac <HAL_I2C_MspInit+0x168>)
 800426a:	f001 fc1f 	bl	8005aac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800427c:	6413      	str	r3, [r2, #64]	@ 0x40
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_I2C_MspInit+0x154>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	bf00      	nop
 800428c:	3738      	adds	r7, #56	@ 0x38
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40005400 	.word	0x40005400
 8004298:	40023800 	.word	0x40023800
 800429c:	40020400 	.word	0x40020400
 80042a0:	40005800 	.word	0x40005800
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40005c00 	.word	0x40005c00
 80042ac:	40021c00 	.word	0x40021c00

080042b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042b6:	f000 fd73 	bl	8004da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ba:	f000 f855 	bl	8004368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042be:	f7ff fccb 	bl	8003c58 <MX_GPIO_Init>
  MX_SPI3_Init();
 80042c2:	f000 f8d1 	bl	8004468 <MX_SPI3_Init>
  MX_I2C1_Init();
 80042c6:	f7ff fe7d 	bl	8003fc4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80042ca:	f000 fb8d 	bl	80049e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80042ce:	f000 fbb5 	bl	8004a3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80042d2:	f000 fbdd 	bl	8004a90 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80042d6:	f000 fc05 	bl	8004ae4 <MX_USART6_UART_Init>
  MX_CAN1_Init();
 80042da:	f7fe fed3 	bl	8003084 <MX_CAN1_Init>
  MX_CAN2_Init();
 80042de:	f7fe ff07 	bl	80030f0 <MX_CAN2_Init>
  MX_SPI4_Init();
 80042e2:	f000 f8f7 	bl	80044d4 <MX_SPI4_Init>
  MX_I2C2_Init();
 80042e6:	f7ff fead 	bl	8004044 <MX_I2C2_Init>
  MX_I2C3_Init();
 80042ea:	f7ff feeb 	bl	80040c4 <MX_I2C3_Init>
  MX_FATFS_Init();
 80042ee:	f004 f8fb 	bl	80084e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  LED_Init();
 80042f2:	f7fe fe0b 	bl	8002f0c <LED_Init>

  Display_Init();
 80042f6:	f7fe fce1 	bl	8002cbc <Display_Init>

  MainTitlePage();
 80042fa:	f7fe fd27 	bl	8002d4c <MainTitlePage>

  display_lcd("System Starting...");
 80042fe:	4818      	ldr	r0, [pc, #96]	@ (8004360 <main+0xb0>)
 8004300:	f7fe fd84 	bl	8002e0c <display_lcd>
  HAL_Delay(1000);
 8004304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004308:	f000 fdbc 	bl	8004e84 <HAL_Delay>

  // Show progress bar demo
  for(int i = 0; i <= 81; i += 10) {
 800430c:	2300      	movs	r3, #0
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	e00f      	b.n	8004332 <main+0x82>
      display_progress_bar("Loading", (float)i);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431c:	eeb0 0a67 	vmov.f32	s0, s15
 8004320:	4810      	ldr	r0, [pc, #64]	@ (8004364 <main+0xb4>)
 8004322:	f7fe fd99 	bl	8002e58 <display_progress_bar>
      HAL_Delay(100);
 8004326:	2064      	movs	r0, #100	@ 0x64
 8004328:	f000 fdac 	bl	8004e84 <HAL_Delay>
  for(int i = 0; i <= 81; i += 10) {
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	330a      	adds	r3, #10
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b51      	cmp	r3, #81	@ 0x51
 8004336:	ddec      	ble.n	8004312 <main+0x62>
  }
  HAL_Delay(500);
 8004338:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800433c:	f000 fda2 	bl	8004e84 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_PowerSave(1);
 8004340:	2001      	movs	r0, #1
 8004342:	f7fe fcdb 	bl	8002cfc <Display_PowerSave>
	  HAL_Delay(3000);
 8004346:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800434a:	f000 fd9b 	bl	8004e84 <HAL_Delay>
	  Display_PowerSave(0);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fe fcd4 	bl	8002cfc <Display_PowerSave>
	  HAL_Delay(1000);
 8004354:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004358:	f000 fd94 	bl	8004e84 <HAL_Delay>
	  Display_PowerSave(1);
 800435c:	bf00      	nop
 800435e:	e7ef      	b.n	8004340 <main+0x90>
 8004360:	0800b350 	.word	0x0800b350
 8004364:	0800b364 	.word	0x0800b364

08004368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b094      	sub	sp, #80	@ 0x50
 800436c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	2230      	movs	r2, #48	@ 0x30
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f004 ffad 	bl	80092d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <SystemClock_Config+0xd0>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	4a28      	ldr	r2, [pc, #160]	@ (8004438 <SystemClock_Config+0xd0>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439a:	6413      	str	r3, [r2, #64]	@ 0x40
 800439c:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <SystemClock_Config+0xd0>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80043a8:	2300      	movs	r3, #0
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	4b23      	ldr	r3, [pc, #140]	@ (800443c <SystemClock_Config+0xd4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80043b4:	4a21      	ldr	r2, [pc, #132]	@ (800443c <SystemClock_Config+0xd4>)
 80043b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b1f      	ldr	r3, [pc, #124]	@ (800443c <SystemClock_Config+0xd4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d2:	2302      	movs	r3, #2
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80043dc:	2319      	movs	r3, #25
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80043e0:	2390      	movs	r3, #144	@ 0x90
 80043e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043e4:	2302      	movs	r3, #2
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80043e8:	2304      	movs	r3, #4
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043ec:	f107 0320 	add.w	r3, r7, #32
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 ff13 	bl	800621c <HAL_RCC_OscConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80043fc:	f000 f82d 	bl	800445a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004400:	230f      	movs	r3, #15
 8004402:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004404:	2302      	movs	r3, #2
 8004406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800440c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004416:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f002 f974 	bl	800670c <HAL_RCC_ClockConfig>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800442a:	f000 f816 	bl	800445a <Error_Handler>
  }
}
 800442e:	bf00      	nop
 8004430:	3750      	adds	r7, #80	@ 0x50
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40007000 	.word	0x40007000

08004440 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fde1 	bl	8003014 <Push_ButtonHandler>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800445e:	b672      	cpsid	i
}
 8004460:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <Error_Handler+0x8>
	...

08004468 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800446c:	4b17      	ldr	r3, [pc, #92]	@ (80044cc <MX_SPI3_Init+0x64>)
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <MX_SPI3_Init+0x68>)
 8004470:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <MX_SPI3_Init+0x64>)
 8004474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004478:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800447a:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <MX_SPI3_Init+0x64>)
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004480:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <MX_SPI3_Init+0x64>)
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004486:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <MX_SPI3_Init+0x64>)
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800448c:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <MX_SPI3_Init+0x64>)
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004492:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <MX_SPI3_Init+0x64>)
 8004494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004498:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800449a:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <MX_SPI3_Init+0x64>)
 800449c:	2218      	movs	r2, #24
 800449e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <MX_SPI3_Init+0x64>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80044a6:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <MX_SPI3_Init+0x64>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <MX_SPI3_Init+0x64>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <MX_SPI3_Init+0x64>)
 80044b4:	220a      	movs	r2, #10
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80044b8:	4804      	ldr	r0, [pc, #16]	@ (80044cc <MX_SPI3_Init+0x64>)
 80044ba:	f002 fb07 	bl	8006acc <HAL_SPI_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80044c4:	f7ff ffc9 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000964 	.word	0x20000964
 80044d0:	40003c00 	.word	0x40003c00

080044d4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80044d8:	4b17      	ldr	r3, [pc, #92]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044da:	4a18      	ldr	r2, [pc, #96]	@ (800453c <MX_SPI4_Init+0x68>)
 80044dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80044de:	4b16      	ldr	r3, [pc, #88]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80044e6:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80044f2:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044f4:	2202      	movs	r2, #2
 80044f6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <MX_SPI4_Init+0x64>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80044fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004538 <MX_SPI4_Init+0x64>)
 8004500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004504:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004506:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <MX_SPI4_Init+0x64>)
 8004508:	2200      	movs	r2, #0
 800450a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <MX_SPI4_Init+0x64>)
 800450e:	2200      	movs	r2, #0
 8004510:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004512:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <MX_SPI4_Init+0x64>)
 8004514:	2200      	movs	r2, #0
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <MX_SPI4_Init+0x64>)
 800451a:	2200      	movs	r2, #0
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <MX_SPI4_Init+0x64>)
 8004520:	220a      	movs	r2, #10
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004524:	4804      	ldr	r0, [pc, #16]	@ (8004538 <MX_SPI4_Init+0x64>)
 8004526:	f002 fad1 	bl	8006acc <HAL_SPI_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004530:	f7ff ff93 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200009bc 	.word	0x200009bc
 800453c:	40013400 	.word	0x40013400

08004540 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08c      	sub	sp, #48	@ 0x30
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3b      	ldr	r2, [pc, #236]	@ (800464c <HAL_SPI_MspInit+0x10c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d135      	bne.n	80045ce <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	4b3a      	ldr	r3, [pc, #232]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	4a39      	ldr	r2, [pc, #228]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 800456c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004570:	6413      	str	r3, [r2, #64]	@ 0x40
 8004572:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	4b33      	ldr	r3, [pc, #204]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	4a32      	ldr	r2, [pc, #200]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6313      	str	r3, [r2, #48]	@ 0x30
 800458e:	4b30      	ldr	r3, [pc, #192]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697b      	ldr	r3, [r7, #20]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800459a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800459e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80045ac:	2306      	movs	r3, #6
 80045ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	4619      	mov	r1, r3
 80045b6:	4827      	ldr	r0, [pc, #156]	@ (8004654 <HAL_SPI_MspInit+0x114>)
 80045b8:	f001 fa78 	bl	8005aac <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2033      	movs	r0, #51	@ 0x33
 80045c2:	f001 f9aa 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80045c6:	2033      	movs	r0, #51	@ 0x33
 80045c8:	f001 f9c3 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80045cc:	e039      	b.n	8004642 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI4)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a21      	ldr	r2, [pc, #132]	@ (8004658 <HAL_SPI_MspInit+0x118>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d134      	bne.n	8004642 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 80045e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	4a14      	ldr	r2, [pc, #80]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 80045fe:	f043 0310 	orr.w	r3, r3, #16
 8004602:	6313      	str	r3, [r2, #48]	@ 0x30
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_SPI_MspInit+0x110>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8004610:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461e:	2303      	movs	r3, #3
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004622:	2305      	movs	r3, #5
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004626:	f107 031c 	add.w	r3, r7, #28
 800462a:	4619      	mov	r1, r3
 800462c:	480b      	ldr	r0, [pc, #44]	@ (800465c <HAL_SPI_MspInit+0x11c>)
 800462e:	f001 fa3d 	bl	8005aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	2054      	movs	r0, #84	@ 0x54
 8004638:	f001 f96f 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800463c:	2054      	movs	r0, #84	@ 0x54
 800463e:	f001 f988 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004642:	bf00      	nop
 8004644:	3730      	adds	r7, #48	@ 0x30
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40003c00 	.word	0x40003c00
 8004650:	40023800 	.word	0x40023800
 8004654:	40020800 	.word	0x40020800
 8004658:	40013400 	.word	0x40013400
 800465c:	40021000 	.word	0x40021000

08004660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_MspInit+0x4c>)
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	4a0f      	ldr	r2, [pc, #60]	@ (80046ac <HAL_MspInit+0x4c>)
 8004670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004674:	6453      	str	r3, [r2, #68]	@ 0x44
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <HAL_MspInit+0x4c>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_MspInit+0x4c>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <HAL_MspInit+0x4c>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004690:	6413      	str	r3, [r2, #64]	@ 0x40
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_MspInit+0x4c>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <SDTimer_Handler+0x40>)
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <SDTimer_Handler+0x1c>
    Timer1--;
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <SDTimer_Handler+0x40>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <SDTimer_Handler+0x40>)
 80046ca:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <SDTimer_Handler+0x44>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <SDTimer_Handler+0x34>
    Timer2--;
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <SDTimer_Handler+0x44>)
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <SDTimer_Handler+0x44>)
 80046e2:	801a      	strh	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000a16 	.word	0x20000a16
 80046f4:	20000a18 	.word	0x20000a18

080046f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <NMI_Handler+0x4>

08004700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <HardFault_Handler+0x4>

08004708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <MemManage_Handler+0x4>

08004710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <BusFault_Handler+0x4>

08004718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <UsageFault_Handler+0x4>

08004720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(FatFsCnt >= 10)
 8004750:	4b06      	ldr	r3, [pc, #24]	@ (800476c <SysTick_Handler+0x20>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b09      	cmp	r3, #9
 8004758:	d904      	bls.n	8004764 <SysTick_Handler+0x18>
	{
		FatFsCnt = 0;
 800475a:	4b04      	ldr	r3, [pc, #16]	@ (800476c <SysTick_Handler+0x20>)
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004760:	f7ff ffa6 	bl	80046b0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004764:	f000 fb6e 	bl	8004e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000a14 	.word	0x20000a14

08004770 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004774:	4802      	ldr	r0, [pc, #8]	@ (8004780 <CAN1_RX0_IRQHandler+0x10>)
 8004776:	f000 fdc6 	bl	8005306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000810 	.word	0x20000810

08004784 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004788:	4802      	ldr	r0, [pc, #8]	@ (8004794 <CAN1_RX1_IRQHandler+0x10>)
 800478a:	f000 fdbc 	bl	8005306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000810 	.word	0x20000810

08004798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800479c:	4802      	ldr	r0, [pc, #8]	@ (80047a8 <USART1_IRQHandler+0x10>)
 800479e:	f002 ffa7 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000a20 	.word	0x20000a20

080047ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047b0:	4802      	ldr	r0, [pc, #8]	@ (80047bc <USART2_IRQHandler+0x10>)
 80047b2:	f002 ff9d 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000a68 	.word	0x20000a68

080047c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80047c4:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <USART3_IRQHandler+0x10>)
 80047c6:	f002 ff93 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000ab0 	.word	0x20000ab0

080047d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 80047d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80047dc:	f001 fb46 	bl	8005e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 80047e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80047e4:	f001 fb42 	bl	8005e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 80047e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80047ec:	f001 fb3e 	bl	8005e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 80047f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80047f4:	f001 fb3a 	bl	8005e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}

080047fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004800:	4802      	ldr	r0, [pc, #8]	@ (800480c <SPI3_IRQHandler+0x10>)
 8004802:	f002 fcd9 	bl	80071b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000964 	.word	0x20000964

08004810 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004814:	4802      	ldr	r0, [pc, #8]	@ (8004820 <USART6_IRQHandler+0x10>)
 8004816:	f002 ff6b 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000af8 	.word	0x20000af8

08004824 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004828:	4802      	ldr	r0, [pc, #8]	@ (8004834 <SPI4_IRQHandler+0x10>)
 800482a:	f002 fcc5 	bl	80071b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200009bc 	.word	0x200009bc

08004838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return 1;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <_kill>:

int _kill(int pid, int sig)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004852:	f004 fda3 	bl	800939c <__errno>
 8004856:	4603      	mov	r3, r0
 8004858:	2216      	movs	r2, #22
 800485a:	601a      	str	r2, [r3, #0]
  return -1;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_exit>:

void _exit (int status)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004870:	f04f 31ff 	mov.w	r1, #4294967295
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ffe7 	bl	8004848 <_kill>
  while (1) {}    /* Make sure we hang here */
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <_exit+0x12>

0800487e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e00a      	b.n	80048a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004890:	f3af 8000 	nop.w
 8004894:	4601      	mov	r1, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	60ba      	str	r2, [r7, #8]
 800489c:	b2ca      	uxtb	r2, r1
 800489e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3301      	adds	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	dbf0      	blt.n	8004890 <_read+0x12>
  }

  return len;
 80048ae:	687b      	ldr	r3, [r7, #4]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e009      	b.n	80048de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	60ba      	str	r2, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	dbf1      	blt.n	80048ca <_write+0x12>
  }
  return len;
 80048e6:	687b      	ldr	r3, [r7, #4]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_close>:

int _close(int file)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004918:	605a      	str	r2, [r3, #4]
  return 0;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <_isatty>:

int _isatty(int file)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004930:	2301      	movs	r3, #1
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004960:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <_sbrk+0x5c>)
 8004962:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <_sbrk+0x60>)
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <_sbrk+0x64>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <_sbrk+0x64>)
 8004976:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <_sbrk+0x68>)
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800497a:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <_sbrk+0x64>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d207      	bcs.n	8004998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004988:	f004 fd08 	bl	800939c <__errno>
 800498c:	4603      	mov	r3, r0
 800498e:	220c      	movs	r2, #12
 8004990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	e009      	b.n	80049ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004998:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <_sbrk+0x64>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800499e:	4b07      	ldr	r3, [pc, #28]	@ (80049bc <_sbrk+0x64>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	4a05      	ldr	r2, [pc, #20]	@ (80049bc <_sbrk+0x64>)
 80049a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20030000 	.word	0x20030000
 80049b8:	00000400 	.word	0x00000400
 80049bc:	20000a1c 	.word	0x20000a1c
 80049c0:	20000ca8 	.word	0x20000ca8

080049c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <SystemInit+0x20>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	4a05      	ldr	r2, [pc, #20]	@ (80049e4 <SystemInit+0x20>)
 80049d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 80049ee:	4a12      	ldr	r2, [pc, #72]	@ (8004a38 <MX_USART1_UART_Init+0x50>)
 80049f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 80049f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a0e:	220c      	movs	r2, #12
 8004a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a12:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a18:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a1e:	4805      	ldr	r0, [pc, #20]	@ (8004a34 <MX_USART1_UART_Init+0x4c>)
 8004a20:	f002 fdb8 	bl	8007594 <HAL_UART_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a2a:	f7ff fd16 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000a20 	.word	0x20000a20
 8004a38:	40011000 	.word	0x40011000

08004a3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <MX_USART2_UART_Init+0x50>)
 8004a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a62:	220c      	movs	r2, #12
 8004a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a66:	4b08      	ldr	r3, [pc, #32]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a72:	4805      	ldr	r0, [pc, #20]	@ (8004a88 <MX_USART2_UART_Init+0x4c>)
 8004a74:	f002 fd8e 	bl	8007594 <HAL_UART_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a7e:	f7ff fcec 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000a68 	.word	0x20000a68
 8004a8c:	40004400 	.word	0x40004400

08004a90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004a96:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <MX_USART3_UART_Init+0x50>)
 8004a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a9a:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004aae:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ab4:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aba:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ac6:	4805      	ldr	r0, [pc, #20]	@ (8004adc <MX_USART3_UART_Init+0x4c>)
 8004ac8:	f002 fd64 	bl	8007594 <HAL_UART_Init>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004ad2:	f7ff fcc2 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000ab0 	.word	0x20000ab0
 8004ae0:	40004800 	.word	0x40004800

08004ae4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ae8:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004aea:	4a12      	ldr	r2, [pc, #72]	@ (8004b34 <MX_USART6_UART_Init+0x50>)
 8004aec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004aee:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004af4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004af6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b02:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b08:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0e:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b1a:	4805      	ldr	r0, [pc, #20]	@ (8004b30 <MX_USART6_UART_Init+0x4c>)
 8004b1c:	f002 fd3a 	bl	8007594 <HAL_UART_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004b26:	f7ff fc98 	bl	800445a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000af8 	.word	0x20000af8
 8004b34:	40011400 	.word	0x40011400

08004b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b090      	sub	sp, #64	@ 0x40
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a74      	ldr	r2, [pc, #464]	@ (8004d28 <HAL_UART_MspInit+0x1f0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d134      	bne.n	8004bc4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5e:	4b73      	ldr	r3, [pc, #460]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	4a72      	ldr	r2, [pc, #456]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b64:	f043 0310 	orr.w	r3, r3, #16
 8004b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b6a:	4b70      	ldr	r3, [pc, #448]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	4a6b      	ldr	r2, [pc, #428]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b86:	4b69      	ldr	r3, [pc, #420]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b92:	23c0      	movs	r3, #192	@ 0xc0
 8004b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ba2:	2307      	movs	r3, #7
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004baa:	4619      	mov	r1, r3
 8004bac:	4860      	ldr	r0, [pc, #384]	@ (8004d30 <HAL_UART_MspInit+0x1f8>)
 8004bae:	f000 ff7d 	bl	8005aac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2025      	movs	r0, #37	@ 0x25
 8004bb8:	f000 feaf 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bbc:	2025      	movs	r0, #37	@ 0x25
 8004bbe:	f000 fec8 	bl	8005952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004bc2:	e0ad      	b.n	8004d20 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004d34 <HAL_UART_MspInit+0x1fc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d134      	bne.n	8004c38 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	4b56      	ldr	r3, [pc, #344]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	4a55      	ldr	r2, [pc, #340]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bde:	4b53      	ldr	r3, [pc, #332]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	4b4f      	ldr	r3, [pc, #316]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c06:	230c      	movs	r3, #12
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c12:	2303      	movs	r3, #3
 8004c14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c16:	2307      	movs	r3, #7
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4845      	ldr	r0, [pc, #276]	@ (8004d38 <HAL_UART_MspInit+0x200>)
 8004c22:	f000 ff43 	bl	8005aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2026      	movs	r0, #38	@ 0x26
 8004c2c:	f000 fe75 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c30:	2026      	movs	r0, #38	@ 0x26
 8004c32:	f000 fe8e 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004c36:	e073      	b.n	8004d20 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d3c <HAL_UART_MspInit+0x204>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d135      	bne.n	8004cae <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	4b39      	ldr	r3, [pc, #228]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	4a38      	ldr	r2, [pc, #224]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c52:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	4b32      	ldr	r3, [pc, #200]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	4a31      	ldr	r2, [pc, #196]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c68:	f043 0308 	orr.w	r3, r3, #8
 8004c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c80:	2302      	movs	r3, #2
 8004c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c8c:	2307      	movs	r3, #7
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c94:	4619      	mov	r1, r3
 8004c96:	482a      	ldr	r0, [pc, #168]	@ (8004d40 <HAL_UART_MspInit+0x208>)
 8004c98:	f000 ff08 	bl	8005aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2027      	movs	r0, #39	@ 0x27
 8004ca2:	f000 fe3a 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004ca6:	2027      	movs	r0, #39	@ 0x27
 8004ca8:	f000 fe53 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004cac:	e038      	b.n	8004d20 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART6)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a24      	ldr	r2, [pc, #144]	@ (8004d44 <HAL_UART_MspInit+0x20c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d133      	bne.n	8004d20 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004cc2:	f043 0320 	orr.w	r3, r3, #32
 8004cc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cc8:	4b18      	ldr	r3, [pc, #96]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ce4:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <HAL_UART_MspInit+0x1f4>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cf0:	23c0      	movs	r3, #192	@ 0xc0
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004d00:	2308      	movs	r3, #8
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d08:	4619      	mov	r1, r3
 8004d0a:	480f      	ldr	r0, [pc, #60]	@ (8004d48 <HAL_UART_MspInit+0x210>)
 8004d0c:	f000 fece 	bl	8005aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004d10:	2200      	movs	r2, #0
 8004d12:	2100      	movs	r1, #0
 8004d14:	2047      	movs	r0, #71	@ 0x47
 8004d16:	f000 fe00 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004d1a:	2047      	movs	r0, #71	@ 0x47
 8004d1c:	f000 fe19 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004d20:	bf00      	nop
 8004d22:	3740      	adds	r7, #64	@ 0x40
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40020400 	.word	0x40020400
 8004d34:	40004400 	.word	0x40004400
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	40004800 	.word	0x40004800
 8004d40:	40020c00 	.word	0x40020c00
 8004d44:	40011400 	.word	0x40011400
 8004d48:	40020800 	.word	0x40020800

08004d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d50:	f7ff fe38 	bl	80049c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d54:	480c      	ldr	r0, [pc, #48]	@ (8004d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d56:	490d      	ldr	r1, [pc, #52]	@ (8004d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d58:	4a0d      	ldr	r2, [pc, #52]	@ (8004d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d5c:	e002      	b.n	8004d64 <LoopCopyDataInit>

08004d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d62:	3304      	adds	r3, #4

08004d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d68:	d3f9      	bcc.n	8004d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8004d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d70:	e001      	b.n	8004d76 <LoopFillZerobss>

08004d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d74:	3204      	adds	r2, #4

08004d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d78:	d3fb      	bcc.n	8004d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d7a:	f004 fb15 	bl	80093a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d7e:	f7ff fa97 	bl	80042b0 <main>
  bx  lr    
 8004d82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004d84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d8c:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8004d90:	0800fbb0 	.word	0x0800fbb0
  ldr r2, =_sbss
 8004d94:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8004d98:	20000ca4 	.word	0x20000ca4

08004d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d9c:	e7fe      	b.n	8004d9c <ADC_IRQHandler>
	...

08004da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004da4:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <HAL_Init+0x40>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a0d      	ldr	r2, [pc, #52]	@ (8004de0 <HAL_Init+0x40>)
 8004daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004db0:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_Init+0x40>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	@ (8004de0 <HAL_Init+0x40>)
 8004db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dbc:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <HAL_Init+0x40>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a07      	ldr	r2, [pc, #28]	@ (8004de0 <HAL_Init+0x40>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc8:	2003      	movs	r0, #3
 8004dca:	f000 fd9b 	bl	8005904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dce:	200f      	movs	r0, #15
 8004dd0:	f000 f808 	bl	8004de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dd4:	f7ff fc44 	bl	8004660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023c00 	.word	0x40023c00

08004de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004dec:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <HAL_InitTick+0x54>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <HAL_InitTick+0x58>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fdb3 	bl	800596e <HAL_SYSTICK_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00e      	b.n	8004e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b0f      	cmp	r3, #15
 8004e16:	d80a      	bhi.n	8004e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	f000 fd7b 	bl	800591a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e24:	4a06      	ldr	r2, [pc, #24]	@ (8004e40 <HAL_InitTick+0x5c>)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000144 	.word	0x20000144
 8004e3c:	2000014c 	.word	0x2000014c
 8004e40:	20000148 	.word	0x20000148

08004e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <HAL_IncTick+0x20>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <HAL_IncTick+0x24>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	4a04      	ldr	r2, [pc, #16]	@ (8004e68 <HAL_IncTick+0x24>)
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000014c 	.word	0x2000014c
 8004e68:	20000b40 	.word	0x20000b40

08004e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e70:	4b03      	ldr	r3, [pc, #12]	@ (8004e80 <HAL_GetTick+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000b40 	.word	0x20000b40

08004e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e8c:	f7ff ffee 	bl	8004e6c <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d005      	beq.n	8004eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <HAL_Delay+0x44>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eaa:	bf00      	nop
 8004eac:	f7ff ffde 	bl	8004e6c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d8f7      	bhi.n	8004eac <HAL_Delay+0x28>
  {
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000014c 	.word	0x2000014c

08004ecc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0ed      	b.n	80050ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fe f934 	bl	8003158 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f00:	f7ff ffb4 	bl	8004e6c <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f06:	e012      	b.n	8004f2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f08:	f7ff ffb0 	bl	8004e6c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b0a      	cmp	r3, #10
 8004f14:	d90b      	bls.n	8004f2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2205      	movs	r2, #5
 8004f26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0c5      	b.n	80050ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0e5      	beq.n	8004f08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0202 	bic.w	r2, r2, #2
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f4c:	f7ff ff8e 	bl	8004e6c <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f52:	e012      	b.n	8004f7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f54:	f7ff ff8a 	bl	8004e6c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b0a      	cmp	r3, #10
 8004f60:	d90b      	bls.n	8004f7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2205      	movs	r2, #5
 8004f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e09f      	b.n	80050ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7e1b      	ldrb	r3, [r3, #24]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d108      	bne.n	8004fa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e007      	b.n	8004fb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7e5b      	ldrb	r3, [r3, #25]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d108      	bne.n	8004fcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e007      	b.n	8004fdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7e9b      	ldrb	r3, [r3, #26]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d108      	bne.n	8004ff6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0220 	orr.w	r2, r2, #32
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e007      	b.n	8005006 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0220 	bic.w	r2, r2, #32
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7edb      	ldrb	r3, [r3, #27]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d108      	bne.n	8005020 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0210 	bic.w	r2, r2, #16
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e007      	b.n	8005030 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0210 	orr.w	r2, r2, #16
 800502e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7f1b      	ldrb	r3, [r3, #28]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d108      	bne.n	800504a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0208 	bic.w	r2, r2, #8
 8005058:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7f5b      	ldrb	r3, [r3, #29]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d108      	bne.n	8005074 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0204 	orr.w	r2, r2, #4
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e007      	b.n	8005084 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	ea42 0103 	orr.w	r1, r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80050c2:	b480      	push	{r7}
 80050c4:	b087      	sub	sp, #28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d003      	beq.n	80050e6 <HAL_CAN_GetRxMessage+0x24>
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	f040 8103 	bne.w	80052ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0f7      	b.n	80052fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0e8      	b.n	80052fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	331b      	adds	r3, #27
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	4413      	add	r3, r2
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0204 	and.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	331b      	adds	r3, #27
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0d5b      	lsrs	r3, r3, #21
 8005156:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e00b      	b.n	8005178 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	331b      	adds	r3, #27
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4413      	add	r3, r2
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	331b      	adds	r3, #27
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4413      	add	r3, r2
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0202 	and.w	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	331b      	adds	r3, #27
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	611a      	str	r2, [r3, #16]
 80051ac:	e00b      	b.n	80051c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	331b      	adds	r3, #27
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	4413      	add	r3, r2
 80051ba:	3304      	adds	r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	331b      	adds	r3, #27
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	331b      	adds	r3, #27
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	3304      	adds	r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4413      	add	r3, r2
 8005200:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	4413      	add	r3, r2
 8005216:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	0a1a      	lsrs	r2, r3, #8
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	4413      	add	r3, r2
 8005230:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0c1a      	lsrs	r2, r3, #16
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	3302      	adds	r3, #2
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	4413      	add	r3, r2
 800524a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	0e1a      	lsrs	r2, r3, #24
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	3303      	adds	r3, #3
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	4413      	add	r3, r2
 8005264:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3304      	adds	r3, #4
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	4413      	add	r3, r2
 800527c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0a1a      	lsrs	r2, r3, #8
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	3305      	adds	r3, #5
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	4413      	add	r3, r2
 8005296:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0c1a      	lsrs	r2, r3, #16
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	3306      	adds	r3, #6
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	0e1a      	lsrs	r2, r3, #24
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	3307      	adds	r3, #7
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0220 	orr.w	r2, r2, #32
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	e007      	b.n	80052e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0220 	orr.w	r2, r2, #32
 80052e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e006      	b.n	80052fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b08a      	sub	sp, #40	@ 0x28
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d07c      	beq.n	8005446 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d023      	beq.n	800539e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f983 	bl	8005674 <HAL_CAN_TxMailbox0CompleteCallback>
 800536e:	e016      	b.n	800539e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
 8005382:	e00c      	b.n	800539e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
 8005396:	e002      	b.n	800539e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f989 	bl	80056b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d024      	beq.n	80053f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f963 	bl	8005688 <HAL_CAN_TxMailbox1CompleteCallback>
 80053c2:	e016      	b.n	80053f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d6:	e00c      	b.n	80053f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ea:	e002      	b.n	80053f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f969 	bl	80056c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d024      	beq.n	8005446 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005404:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f943 	bl	800569c <HAL_CAN_TxMailbox2CompleteCallback>
 8005416:	e016      	b.n	8005446 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
 800542a:	e00c      	b.n	8005446 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
 800543e:	e002      	b.n	8005446 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f949 	bl	80056d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2210      	movs	r2, #16
 8005468:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d006      	beq.n	800548c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2208      	movs	r2, #8
 8005484:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f930 	bl	80056ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7fd fb59 	bl	8002b5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2210      	movs	r2, #16
 80054cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2208      	movs	r2, #8
 80054e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f912 	bl	8005714 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8f9 	bl	8005700 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2210      	movs	r2, #16
 8005528:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8fc 	bl	8005728 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2208      	movs	r2, #8
 800554a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f8f5 	bl	800573c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d07b      	beq.n	8005654 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d072      	beq.n	800564c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d043      	beq.n	800564c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d03e      	beq.n	800564c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d4:	2b60      	cmp	r3, #96	@ 0x60
 80055d6:	d02b      	beq.n	8005630 <HAL_CAN_IRQHandler+0x32a>
 80055d8:	2b60      	cmp	r3, #96	@ 0x60
 80055da:	d82e      	bhi.n	800563a <HAL_CAN_IRQHandler+0x334>
 80055dc:	2b50      	cmp	r3, #80	@ 0x50
 80055de:	d022      	beq.n	8005626 <HAL_CAN_IRQHandler+0x320>
 80055e0:	2b50      	cmp	r3, #80	@ 0x50
 80055e2:	d82a      	bhi.n	800563a <HAL_CAN_IRQHandler+0x334>
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d019      	beq.n	800561c <HAL_CAN_IRQHandler+0x316>
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d826      	bhi.n	800563a <HAL_CAN_IRQHandler+0x334>
 80055ec:	2b30      	cmp	r3, #48	@ 0x30
 80055ee:	d010      	beq.n	8005612 <HAL_CAN_IRQHandler+0x30c>
 80055f0:	2b30      	cmp	r3, #48	@ 0x30
 80055f2:	d822      	bhi.n	800563a <HAL_CAN_IRQHandler+0x334>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d002      	beq.n	80055fe <HAL_CAN_IRQHandler+0x2f8>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d005      	beq.n	8005608 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055fc:	e01d      	b.n	800563a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	f043 0308 	orr.w	r3, r3, #8
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005606:	e019      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	f043 0310 	orr.w	r3, r3, #16
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005610:	e014      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	f043 0320 	orr.w	r3, r3, #32
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800561a:	e00f      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005624:	e00a      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800562e:	e005      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005638:	e000      	b.n	800563c <HAL_CAN_IRQHandler+0x336>
            break;
 800563a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800564a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2204      	movs	r2, #4
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f872 	bl	8005750 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800566c:	bf00      	nop
 800566e:	3728      	adds	r7, #40	@ 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005780:	4013      	ands	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800578c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005796:	4a04      	ldr	r2, [pc, #16]	@ (80057a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	60d3      	str	r3, [r2, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <__NVIC_GetPriorityGrouping+0x18>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	0a1b      	lsrs	r3, r3, #8
 80057b6:	f003 0307 	and.w	r3, r3, #7
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	db0b      	blt.n	80057f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	f003 021f 	and.w	r2, r3, #31
 80057e0:	4907      	ldr	r1, [pc, #28]	@ (8005800 <__NVIC_EnableIRQ+0x38>)
 80057e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2001      	movs	r0, #1
 80057ea:	fa00 f202 	lsl.w	r2, r0, r2
 80057ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	e000e100 	.word	0xe000e100

08005804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db0a      	blt.n	800582e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	490c      	ldr	r1, [pc, #48]	@ (8005850 <__NVIC_SetPriority+0x4c>)
 800581e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	440b      	add	r3, r1
 8005828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800582c:	e00a      	b.n	8005844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	4908      	ldr	r1, [pc, #32]	@ (8005854 <__NVIC_SetPriority+0x50>)
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	3b04      	subs	r3, #4
 800583c:	0112      	lsls	r2, r2, #4
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	440b      	add	r3, r1
 8005842:	761a      	strb	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000e100 	.word	0xe000e100
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	@ 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f1c3 0307 	rsb	r3, r3, #7
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf28      	it	cs
 8005876:	2304      	movcs	r3, #4
 8005878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3304      	adds	r3, #4
 800587e:	2b06      	cmp	r3, #6
 8005880:	d902      	bls.n	8005888 <NVIC_EncodePriority+0x30>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3b03      	subs	r3, #3
 8005886:	e000      	b.n	800588a <NVIC_EncodePriority+0x32>
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	401a      	ands	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a0:	f04f 31ff 	mov.w	r1, #4294967295
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	43d9      	mvns	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b0:	4313      	orrs	r3, r2
         );
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3724      	adds	r7, #36	@ 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058d0:	d301      	bcc.n	80058d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00f      	b.n	80058f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005900 <SysTick_Config+0x40>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058de:	210f      	movs	r1, #15
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	f7ff ff8e 	bl	8005804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058e8:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <SysTick_Config+0x40>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ee:	4b04      	ldr	r3, [pc, #16]	@ (8005900 <SysTick_Config+0x40>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	e000e010 	.word	0xe000e010

08005904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff29 	bl	8005764 <__NVIC_SetPriorityGrouping>
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	4603      	mov	r3, r0
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800592c:	f7ff ff3e 	bl	80057ac <__NVIC_GetPriorityGrouping>
 8005930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff ff8e 	bl	8005858 <NVIC_EncodePriority>
 800593c:	4602      	mov	r2, r0
 800593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff5d 	bl	8005804 <__NVIC_SetPriority>
}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	4603      	mov	r3, r0
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff31 	bl	80057c8 <__NVIC_EnableIRQ>
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ffa2 	bl	80058c0 <SysTick_Config>
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005994:	f7ff fa6a 	bl	8004e6c <HAL_GetTick>
 8005998:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d008      	beq.n	80059b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2280      	movs	r2, #128	@ 0x80
 80059aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e052      	b.n	8005a5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0216 	bic.w	r2, r2, #22
 80059c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d103      	bne.n	80059e8 <HAL_DMA_Abort+0x62>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0208 	bic.w	r2, r2, #8
 80059f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a08:	e013      	b.n	8005a32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a0a:	f7ff fa2f 	bl	8004e6c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d90c      	bls.n	8005a32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2203      	movs	r2, #3
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e015      	b.n	8005a5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e4      	bne.n	8005a0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	223f      	movs	r2, #63	@ 0x3f
 8005a46:	409a      	lsls	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d004      	beq.n	8005a84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2280      	movs	r2, #128	@ 0x80
 8005a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e00c      	b.n	8005a9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2205      	movs	r2, #5
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	@ 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e177      	b.n	8005db8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	f040 8166 	bne.w	8005db2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d005      	beq.n	8005afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d130      	bne.n	8005b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	2203      	movs	r2, #3
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b34:	2201      	movs	r2, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 0201 	and.w	r2, r3, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d017      	beq.n	8005b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	2203      	movs	r2, #3
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d123      	bne.n	8005bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	08da      	lsrs	r2, r3, #3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3208      	adds	r2, #8
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	220f      	movs	r2, #15
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	08da      	lsrs	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3208      	adds	r2, #8
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 0203 	and.w	r2, r3, #3
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80c0 	beq.w	8005db2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	4b66      	ldr	r3, [pc, #408]	@ (8005dd0 <HAL_GPIO_Init+0x324>)
 8005c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3a:	4a65      	ldr	r2, [pc, #404]	@ (8005dd0 <HAL_GPIO_Init+0x324>)
 8005c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c42:	4b63      	ldr	r3, [pc, #396]	@ (8005dd0 <HAL_GPIO_Init+0x324>)
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c4e:	4a61      	ldr	r2, [pc, #388]	@ (8005dd4 <HAL_GPIO_Init+0x328>)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	3302      	adds	r3, #2
 8005c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	220f      	movs	r2, #15
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a58      	ldr	r2, [pc, #352]	@ (8005dd8 <HAL_GPIO_Init+0x32c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d037      	beq.n	8005cea <HAL_GPIO_Init+0x23e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a57      	ldr	r2, [pc, #348]	@ (8005ddc <HAL_GPIO_Init+0x330>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d031      	beq.n	8005ce6 <HAL_GPIO_Init+0x23a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a56      	ldr	r2, [pc, #344]	@ (8005de0 <HAL_GPIO_Init+0x334>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02b      	beq.n	8005ce2 <HAL_GPIO_Init+0x236>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a55      	ldr	r2, [pc, #340]	@ (8005de4 <HAL_GPIO_Init+0x338>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d025      	beq.n	8005cde <HAL_GPIO_Init+0x232>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a54      	ldr	r2, [pc, #336]	@ (8005de8 <HAL_GPIO_Init+0x33c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01f      	beq.n	8005cda <HAL_GPIO_Init+0x22e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a53      	ldr	r2, [pc, #332]	@ (8005dec <HAL_GPIO_Init+0x340>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d019      	beq.n	8005cd6 <HAL_GPIO_Init+0x22a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a52      	ldr	r2, [pc, #328]	@ (8005df0 <HAL_GPIO_Init+0x344>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_GPIO_Init+0x226>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a51      	ldr	r2, [pc, #324]	@ (8005df4 <HAL_GPIO_Init+0x348>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00d      	beq.n	8005cce <HAL_GPIO_Init+0x222>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a50      	ldr	r2, [pc, #320]	@ (8005df8 <HAL_GPIO_Init+0x34c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <HAL_GPIO_Init+0x21e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8005dfc <HAL_GPIO_Init+0x350>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_GPIO_Init+0x21a>
 8005cc2:	2309      	movs	r3, #9
 8005cc4:	e012      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	e010      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cca:	2308      	movs	r3, #8
 8005ccc:	e00e      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cce:	2307      	movs	r3, #7
 8005cd0:	e00c      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cd2:	2306      	movs	r3, #6
 8005cd4:	e00a      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cd6:	2305      	movs	r3, #5
 8005cd8:	e008      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cda:	2304      	movs	r3, #4
 8005cdc:	e006      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e004      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e002      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <HAL_GPIO_Init+0x240>
 8005cea:	2300      	movs	r3, #0
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	f002 0203 	and.w	r2, r2, #3
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	4093      	lsls	r3, r2
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cfc:	4935      	ldr	r1, [pc, #212]	@ (8005dd4 <HAL_GPIO_Init+0x328>)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	089b      	lsrs	r3, r3, #2
 8005d02:	3302      	adds	r3, #2
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d2e:	4a34      	ldr	r2, [pc, #208]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d34:	4b32      	ldr	r3, [pc, #200]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d58:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	43db      	mvns	r3, r3
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d82:	4a1f      	ldr	r2, [pc, #124]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4013      	ands	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dac:	4a14      	ldr	r2, [pc, #80]	@ (8005e00 <HAL_GPIO_Init+0x354>)
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3301      	adds	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b0f      	cmp	r3, #15
 8005dbc:	f67f ae84 	bls.w	8005ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3724      	adds	r7, #36	@ 0x24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40013800 	.word	0x40013800
 8005dd8:	40020000 	.word	0x40020000
 8005ddc:	40020400 	.word	0x40020400
 8005de0:	40020800 	.word	0x40020800
 8005de4:	40020c00 	.word	0x40020c00
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40021400 	.word	0x40021400
 8005df0:	40021800 	.word	0x40021800
 8005df4:	40021c00 	.word	0x40021c00
 8005df8:	40022000 	.word	0x40022000
 8005dfc:	40022400 	.word	0x40022400
 8005e00:	40013c00 	.word	0x40013c00

08005e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	807b      	strh	r3, [r7, #2]
 8005e10:	4613      	mov	r3, r2
 8005e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e14:	787b      	ldrb	r3, [r7, #1]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e1a:	887a      	ldrh	r2, [r7, #2]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e20:	e003      	b.n	8005e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	041a      	lsls	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	619a      	str	r2, [r3, #24]
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e48:	887a      	ldrh	r2, [r7, #2]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	041a      	lsls	r2, r3, #16
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	43d9      	mvns	r1, r3
 8005e54:	887b      	ldrh	r3, [r7, #2]
 8005e56:	400b      	ands	r3, r1
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	619a      	str	r2, [r3, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e76:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e82:	4a05      	ldr	r2, [pc, #20]	@ (8005e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fad8 	bl	8004440 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40013c00 	.word	0x40013c00

08005e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e12b      	b.n	8006106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fe f93e 	bl	8004144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	@ 0x24
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f00:	f000 fdbc 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a81      	ldr	r2, [pc, #516]	@ (8006110 <HAL_I2C_Init+0x274>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d807      	bhi.n	8005f20 <HAL_I2C_Init+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a80      	ldr	r2, [pc, #512]	@ (8006114 <HAL_I2C_Init+0x278>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bf94      	ite	ls
 8005f18:	2301      	movls	r3, #1
 8005f1a:	2300      	movhi	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e006      	b.n	8005f2e <HAL_I2C_Init+0x92>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a7d      	ldr	r2, [pc, #500]	@ (8006118 <HAL_I2C_Init+0x27c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	bf94      	ite	ls
 8005f28:	2301      	movls	r3, #1
 8005f2a:	2300      	movhi	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0e7      	b.n	8006106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a78      	ldr	r2, [pc, #480]	@ (800611c <HAL_I2C_Init+0x280>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9b      	lsrs	r3, r3, #18
 8005f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a6a      	ldr	r2, [pc, #424]	@ (8006110 <HAL_I2C_Init+0x274>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d802      	bhi.n	8005f70 <HAL_I2C_Init+0xd4>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	e009      	b.n	8005f84 <HAL_I2C_Init+0xe8>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	4a69      	ldr	r2, [pc, #420]	@ (8006120 <HAL_I2C_Init+0x284>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	099b      	lsrs	r3, r3, #6
 8005f82:	3301      	adds	r3, #1
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005f96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	495c      	ldr	r1, [pc, #368]	@ (8006110 <HAL_I2C_Init+0x274>)
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	d819      	bhi.n	8005fd8 <HAL_I2C_Init+0x13c>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1e59      	subs	r1, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005fb8:	400b      	ands	r3, r1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_I2C_Init+0x138>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1e59      	subs	r1, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd2:	e051      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	e04f      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <HAL_I2C_Init+0x168>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1e58      	subs	r0, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	440b      	add	r3, r1
 8005fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e012      	b.n	800602a <HAL_I2C_Init+0x18e>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1e58      	subs	r0, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	0099      	lsls	r1, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	fbb0 f3f3 	udiv	r3, r0, r3
 800601a:	3301      	adds	r3, #1
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_I2C_Init+0x196>
 800602e:	2301      	movs	r3, #1
 8006030:	e022      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10e      	bne.n	8006058 <HAL_I2C_Init+0x1bc>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1e58      	subs	r0, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	440b      	add	r3, r1
 8006048:	fbb0 f3f3 	udiv	r3, r0, r3
 800604c:	3301      	adds	r3, #1
 800604e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006056:	e00f      	b.n	8006078 <HAL_I2C_Init+0x1dc>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1e58      	subs	r0, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	0099      	lsls	r1, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	fbb0 f3f3 	udiv	r3, r0, r3
 800606e:	3301      	adds	r3, #1
 8006070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	6809      	ldr	r1, [r1, #0]
 800607c:	4313      	orrs	r3, r2
 800607e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80060a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6911      	ldr	r1, [r2, #16]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	4311      	orrs	r1, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	000186a0 	.word	0x000186a0
 8006114:	001e847f 	.word	0x001e847f
 8006118:	003d08ff 	.word	0x003d08ff
 800611c:	431bde83 	.word	0x431bde83
 8006120:	10624dd3 	.word	0x10624dd3

08006124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b20      	cmp	r3, #32
 8006138:	d129      	bne.n	800618e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2224      	movs	r2, #36	@ 0x24
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0210 	bic.w	r2, r2, #16
 8006160:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d12a      	bne.n	800620c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2224      	movs	r2, #36	@ 0x24
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061d6:	89fb      	ldrh	r3, [r7, #14]
 80061d8:	f023 030f 	bic.w	r3, r3, #15
 80061dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	89fa      	ldrh	r2, [r7, #14]
 80061ee:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	e000      	b.n	800620e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e267      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d075      	beq.n	8006326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800623a:	4b88      	ldr	r3, [pc, #544]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00c      	beq.n	8006260 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006246:	4b85      	ldr	r3, [pc, #532]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800624e:	2b08      	cmp	r3, #8
 8006250:	d112      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006252:	4b82      	ldr	r3, [pc, #520]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800625a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800625e:	d10b      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	4b7e      	ldr	r3, [pc, #504]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05b      	beq.n	8006324 <HAL_RCC_OscConfig+0x108>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d157      	bne.n	8006324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e242      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006280:	d106      	bne.n	8006290 <HAL_RCC_OscConfig+0x74>
 8006282:	4b76      	ldr	r3, [pc, #472]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a75      	ldr	r2, [pc, #468]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e01d      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x98>
 800629a:	4b70      	ldr	r3, [pc, #448]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6f      	ldr	r2, [pc, #444]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b6d      	ldr	r3, [pc, #436]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6c      	ldr	r2, [pc, #432]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 80062b4:	4b69      	ldr	r3, [pc, #420]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a68      	ldr	r2, [pc, #416]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b66      	ldr	r3, [pc, #408]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a65      	ldr	r2, [pc, #404]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fe fdca 	bl	8004e6c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fe fdc6 	bl	8004e6c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	@ 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e207      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b5b      	ldr	r3, [pc, #364]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0xc0>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fe fdb6 	bl	8004e6c <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006304:	f7fe fdb2 	bl	8004e6c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	@ 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1f3      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006316:	4b51      	ldr	r3, [pc, #324]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0xe8>
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d063      	beq.n	80063fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006332:	4b4a      	ldr	r3, [pc, #296]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633e:	4b47      	ldr	r3, [pc, #284]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006346:	2b08      	cmp	r3, #8
 8006348:	d11c      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634a:	4b44      	ldr	r3, [pc, #272]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	4b41      	ldr	r3, [pc, #260]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e1c7      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b3b      	ldr	r3, [pc, #236]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4937      	ldr	r1, [pc, #220]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	e03a      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638c:	4b34      	ldr	r3, [pc, #208]	@ (8006460 <HAL_RCC_OscConfig+0x244>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fe fd6b 	bl	8004e6c <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800639a:	f7fe fd67 	bl	8004e6c <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e1a8      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ac:	4b2b      	ldr	r3, [pc, #172]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b8:	4b28      	ldr	r3, [pc, #160]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4925      	ldr	r1, [pc, #148]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	e015      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ce:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <HAL_RCC_OscConfig+0x244>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fe fd4a 	bl	8004e6c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fe fd46 	bl	8004e6c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e187      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	4b1b      	ldr	r3, [pc, #108]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d036      	beq.n	8006474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <HAL_RCC_OscConfig+0x248>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fe fd2a 	bl	8004e6c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800641c:	f7fe fd26 	bl	8004e6c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e167      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642e:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <HAL_RCC_OscConfig+0x240>)
 8006430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x200>
 800643a:	e01b      	b.n	8006474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800643c:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <HAL_RCC_OscConfig+0x248>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006442:	f7fe fd13 	bl	8004e6c <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	e00e      	b.n	8006468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800644a:	f7fe fd0f 	bl	8004e6c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d907      	bls.n	8006468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e150      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800645c:	40023800 	.word	0x40023800
 8006460:	42470000 	.word	0x42470000
 8006464:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006468:	4b88      	ldr	r3, [pc, #544]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800646a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1ea      	bne.n	800644a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8097 	beq.w	80065b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b81      	ldr	r3, [pc, #516]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	4b7d      	ldr	r3, [pc, #500]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	4a7c      	ldr	r2, [pc, #496]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800649c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064a2:	4b7a      	ldr	r3, [pc, #488]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b2:	4b77      	ldr	r3, [pc, #476]	@ (8006690 <HAL_RCC_OscConfig+0x474>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d118      	bne.n	80064f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064be:	4b74      	ldr	r3, [pc, #464]	@ (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a73      	ldr	r2, [pc, #460]	@ (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ca:	f7fe fccf 	bl	8004e6c <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d2:	f7fe fccb 	bl	8004e6c <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e10c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006690 <HAL_RCC_OscConfig+0x474>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d106      	bne.n	8006506 <HAL_RCC_OscConfig+0x2ea>
 80064f8:	4b64      	ldr	r3, [pc, #400]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	4a63      	ldr	r2, [pc, #396]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6713      	str	r3, [r2, #112]	@ 0x70
 8006504:	e01c      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d10c      	bne.n	8006528 <HAL_RCC_OscConfig+0x30c>
 800650e:	4b5f      	ldr	r3, [pc, #380]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	4a5e      	ldr	r2, [pc, #376]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	@ 0x70
 800651a:	4b5c      	ldr	r3, [pc, #368]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651e:	4a5b      	ldr	r2, [pc, #364]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	@ 0x70
 8006526:	e00b      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006528:	4b58      	ldr	r3, [pc, #352]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652c:	4a57      	ldr	r2, [pc, #348]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6713      	str	r3, [r2, #112]	@ 0x70
 8006534:	4b55      	ldr	r3, [pc, #340]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006538:	4a54      	ldr	r2, [pc, #336]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fe fc90 	bl	8004e6c <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fe fc8c 	bl	8004e6c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0cb      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006566:	4b49      	ldr	r3, [pc, #292]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ee      	beq.n	8006550 <HAL_RCC_OscConfig+0x334>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006574:	f7fe fc7a 	bl	8004e6c <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fe fc76 	bl	8004e6c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0b5      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006592:	4b3e      	ldr	r3, [pc, #248]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ee      	bne.n	800657c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a4:	4b39      	ldr	r3, [pc, #228]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	4a38      	ldr	r2, [pc, #224]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a1 	beq.w	80066fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ba:	4b34      	ldr	r3, [pc, #208]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d05c      	beq.n	8006680 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d141      	bne.n	8006652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ce:	4b31      	ldr	r3, [pc, #196]	@ (8006694 <HAL_RCC_OscConfig+0x478>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fe fc4a 	bl	8004e6c <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fe fc46 	bl	8004e6c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e087      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ee:	4b27      	ldr	r3, [pc, #156]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	3b01      	subs	r3, #1
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	491b      	ldr	r1, [pc, #108]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006624:	4b1b      	ldr	r3, [pc, #108]	@ (8006694 <HAL_RCC_OscConfig+0x478>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662a:	f7fe fc1f 	bl	8004e6c <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006632:	f7fe fc1b 	bl	8004e6c <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e05c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006644:	4b11      	ldr	r3, [pc, #68]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x416>
 8006650:	e054      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006652:	4b10      	ldr	r3, [pc, #64]	@ (8006694 <HAL_RCC_OscConfig+0x478>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fe fc08 	bl	8004e6c <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006660:	f7fe fc04 	bl	8004e6c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e045      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006672:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_OscConfig+0x470>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x444>
 800667e:	e03d      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e038      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800668c:	40023800 	.word	0x40023800
 8006690:	40007000 	.word	0x40007000
 8006694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006698:	4b1b      	ldr	r3, [pc, #108]	@ (8006708 <HAL_RCC_OscConfig+0x4ec>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d028      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d121      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d11a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	3b01      	subs	r3, #1
 80066e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40023800 	.word	0x40023800

0800670c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0cc      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006720:	4b68      	ldr	r3, [pc, #416]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90c      	bls.n	8006748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b65      	ldr	r3, [pc, #404]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b63      	ldr	r3, [pc, #396]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0b8      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006760:	4b59      	ldr	r3, [pc, #356]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4a58      	ldr	r2, [pc, #352]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800676a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006778:	4b53      	ldr	r3, [pc, #332]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4a52      	ldr	r2, [pc, #328]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006784:	4b50      	ldr	r3, [pc, #320]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	494d      	ldr	r1, [pc, #308]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d044      	beq.n	800682c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	4b47      	ldr	r3, [pc, #284]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d119      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e07f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d003      	beq.n	80067ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d107      	bne.n	80067da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ca:	4b3f      	ldr	r3, [pc, #252]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e06f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067da:	4b3b      	ldr	r3, [pc, #236]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e067      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4934      	ldr	r1, [pc, #208]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067fc:	f7fe fb36 	bl	8004e6c <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fe fb32 	bl	8004e6c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e04f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b2b      	ldr	r3, [pc, #172]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800682c:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d20c      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b22      	ldr	r3, [pc, #136]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b20      	ldr	r3, [pc, #128]	@ (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e032      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006860:	4b19      	ldr	r3, [pc, #100]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4916      	ldr	r1, [pc, #88]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687e:	4b12      	ldr	r3, [pc, #72]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	490e      	ldr	r1, [pc, #56]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006892:	f000 f821 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8006896:	4602      	mov	r2, r0
 8006898:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	490a      	ldr	r1, [pc, #40]	@ (80068cc <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	5ccb      	ldrb	r3, [r1, r3]
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <HAL_RCC_ClockConfig+0x1c8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fa96 	bl	8004de4 <HAL_InitTick>

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023c00 	.word	0x40023c00
 80068c8:	40023800 	.word	0x40023800
 80068cc:	0800f818 	.word	0x0800f818
 80068d0:	20000144 	.word	0x20000144
 80068d4:	20000148 	.word	0x20000148

080068d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068dc:	b090      	sub	sp, #64	@ 0x40
 80068de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068f0:	4b59      	ldr	r3, [pc, #356]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 030c 	and.w	r3, r3, #12
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d00d      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x40>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	f200 80a1 	bhi.w	8006a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x34>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d003      	beq.n	8006912 <HAL_RCC_GetSysClockFreq+0x3a>
 800690a:	e09b      	b.n	8006a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800690c:	4b53      	ldr	r3, [pc, #332]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800690e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006910:	e09b      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006912:	4b53      	ldr	r3, [pc, #332]	@ (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006916:	e098      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006918:	4b4f      	ldr	r3, [pc, #316]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006922:	4b4d      	ldr	r3, [pc, #308]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d028      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800692e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	099b      	lsrs	r3, r3, #6
 8006934:	2200      	movs	r2, #0
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	627a      	str	r2, [r7, #36]	@ 0x24
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006940:	2100      	movs	r1, #0
 8006942:	4b47      	ldr	r3, [pc, #284]	@ (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006944:	fb03 f201 	mul.w	r2, r3, r1
 8006948:	2300      	movs	r3, #0
 800694a:	fb00 f303 	mul.w	r3, r0, r3
 800694e:	4413      	add	r3, r2
 8006950:	4a43      	ldr	r2, [pc, #268]	@ (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006952:	fba0 1202 	umull	r1, r2, r0, r2
 8006956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006958:	460a      	mov	r2, r1
 800695a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800695c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800695e:	4413      	add	r3, r2
 8006960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006964:	2200      	movs	r2, #0
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	61fa      	str	r2, [r7, #28]
 800696a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800696e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006972:	f7fa f929 	bl	8000bc8 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4613      	mov	r3, r2
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800697e:	e053      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006980:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	2200      	movs	r2, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	617a      	str	r2, [r7, #20]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006992:	f04f 0b00 	mov.w	fp, #0
 8006996:	4652      	mov	r2, sl
 8006998:	465b      	mov	r3, fp
 800699a:	f04f 0000 	mov.w	r0, #0
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	0159      	lsls	r1, r3, #5
 80069a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a8:	0150      	lsls	r0, r2, #5
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	ebb2 080a 	subs.w	r8, r2, sl
 80069b2:	eb63 090b 	sbc.w	r9, r3, fp
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069ca:	ebb2 0408 	subs.w	r4, r2, r8
 80069ce:	eb63 0509 	sbc.w	r5, r3, r9
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	00eb      	lsls	r3, r5, #3
 80069dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e0:	00e2      	lsls	r2, r4, #3
 80069e2:	4614      	mov	r4, r2
 80069e4:	461d      	mov	r5, r3
 80069e6:	eb14 030a 	adds.w	r3, r4, sl
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	eb45 030b 	adc.w	r3, r5, fp
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069fe:	4629      	mov	r1, r5
 8006a00:	028b      	lsls	r3, r1, #10
 8006a02:	4621      	mov	r1, r4
 8006a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a08:	4621      	mov	r1, r4
 8006a0a:	028a      	lsls	r2, r1, #10
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	2200      	movs	r2, #0
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	60fa      	str	r2, [r7, #12]
 8006a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a1c:	f7fa f8d4 	bl	8000bc8 <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4613      	mov	r3, r2
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a28:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	3301      	adds	r3, #1
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006a38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a42:	e002      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3740      	adds	r7, #64	@ 0x40
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	00f42400 	.word	0x00f42400
 8006a60:	017d7840 	.word	0x017d7840

08006a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000144 	.word	0x20000144

08006a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a80:	f7ff fff0 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0a9b      	lsrs	r3, r3, #10
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4903      	ldr	r1, [pc, #12]	@ (8006aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	0800f828 	.word	0x0800f828

08006aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006aa8:	f7ff ffdc 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0b5b      	lsrs	r3, r3, #13
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	@ (8006ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	0800f828 	.word	0x0800f828

08006acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e07b      	b.n	8006bd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aee:	d009      	beq.n	8006b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	61da      	str	r2, [r3, #28]
 8006af6:	e005      	b.n	8006b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fd fd0e 	bl	8004540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b88:	ea42 0103 	orr.w	r1, r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0104 	and.w	r1, r3, #4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	f003 0210 	and.w	r2, r3, #16
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b088      	sub	sp, #32
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bee:	f7fe f93d 	bl	8004e6c <HAL_GetTick>
 8006bf2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
 8006c06:	e12a      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0x36>
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e122      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_SPI_Transmit+0x48>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e11b      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c74:	d10f      	bne.n	8006c96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d007      	beq.n	8006cb4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cbc:	d152      	bne.n	8006d64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Transmit+0xee>
 8006cc6:	8b7b      	ldrh	r3, [r7, #26]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d145      	bne.n	8006d58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	881a      	ldrh	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	1c9a      	adds	r2, r3, #2
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cf0:	e032      	b.n	8006d58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d112      	bne.n	8006d26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d24:	e018      	b.n	8006d58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d26:	f7fe f8a1 	bl	8004e6c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d803      	bhi.n	8006d3e <HAL_SPI_Transmit+0x160>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d102      	bne.n	8006d44 <HAL_SPI_Transmit+0x166>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e082      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1c7      	bne.n	8006cf2 <HAL_SPI_Transmit+0x114>
 8006d62:	e053      	b.n	8006e0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Transmit+0x194>
 8006d6c:	8b7b      	ldrh	r3, [r7, #26]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d147      	bne.n	8006e02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	7812      	ldrb	r2, [r2, #0]
 8006d7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d98:	e033      	b.n	8006e02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d113      	bne.n	8006dd0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006dce:	e018      	b.n	8006e02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd0:	f7fe f84c 	bl	8004e6c <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d803      	bhi.n	8006de8 <HAL_SPI_Transmit+0x20a>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d102      	bne.n	8006dee <HAL_SPI_Transmit+0x210>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e02d      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1c6      	bne.n	8006d9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fb6b 	bl	80074ec <SPI_EndRxTxTransaction>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b08a      	sub	sp, #40	@ 0x28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e74:	2301      	movs	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e78:	f7fd fff8 	bl	8004e6c <HAL_GetTick>
 8006e7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e90:	7ffb      	ldrb	r3, [r7, #31]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d00c      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x4a>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e9c:	d106      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x46>
 8006ea6:	7ffb      	ldrb	r3, [r7, #31]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d001      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
 8006eae:	e17f      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_SPI_TransmitReceive+0x5c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_TransmitReceive+0x5c>
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e174      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x6e>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e16d      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d003      	beq.n	8006ef0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2205      	movs	r2, #5
 8006eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	887a      	ldrh	r2, [r7, #2]
 8006f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	887a      	ldrh	r2, [r7, #2]
 8006f06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	887a      	ldrh	r2, [r7, #2]
 8006f12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d007      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f4c:	d17e      	bne.n	800704c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <HAL_SPI_TransmitReceive+0xf6>
 8006f56:	8afb      	ldrh	r3, [r7, #22]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d16c      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f80:	e059      	b.n	8007036 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x162>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x162>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d113      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa4:	881a      	ldrh	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d119      	bne.n	800700a <HAL_SPI_TransmitReceive+0x1a4>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d014      	beq.n	800700a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	b292      	uxth	r2, r2
 8006fec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	1c9a      	adds	r2, r3, #2
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007006:	2301      	movs	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800700a:	f7fd ff2f 	bl	8004e6c <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007016:	429a      	cmp	r2, r3
 8007018:	d80d      	bhi.n	8007036 <HAL_SPI_TransmitReceive+0x1d0>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d009      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e0bc      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1a0      	bne.n	8006f82 <HAL_SPI_TransmitReceive+0x11c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d19b      	bne.n	8006f82 <HAL_SPI_TransmitReceive+0x11c>
 800704a:	e082      	b.n	8007152 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_SPI_TransmitReceive+0x1f4>
 8007054:	8afb      	ldrh	r3, [r7, #22]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d171      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007080:	e05d      	b.n	800713e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b02      	cmp	r3, #2
 800708e:	d11c      	bne.n	80070ca <HAL_SPI_TransmitReceive+0x264>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <HAL_SPI_TransmitReceive+0x264>
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	2b01      	cmp	r3, #1
 800709e:	d114      	bne.n	80070ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d119      	bne.n	800710c <HAL_SPI_TransmitReceive+0x2a6>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d014      	beq.n	800710c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007108:	2301      	movs	r3, #1
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800710c:	f7fd feae 	bl	8004e6c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007118:	429a      	cmp	r2, r3
 800711a:	d803      	bhi.n	8007124 <HAL_SPI_TransmitReceive+0x2be>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d102      	bne.n	800712a <HAL_SPI_TransmitReceive+0x2c4>
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e038      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d19c      	bne.n	8007082 <HAL_SPI_TransmitReceive+0x21c>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d197      	bne.n	8007082 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f9c8 	bl	80074ec <SPI_EndRxTxTransaction>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e01d      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3728      	adds	r7, #40	@ 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10e      	bne.n	80071f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    return;
 80071f6:	e0ce      	b.n	8007396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_SPI_IRQHandler+0x5e>
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
    return;
 8007214:	e0bf      	b.n	8007396 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <HAL_SPI_IRQHandler+0x7e>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80b0 	beq.w	8007396 <HAL_SPI_IRQHandler+0x1de>
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80aa 	beq.w	8007396 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d023      	beq.n	8007294 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b03      	cmp	r3, #3
 8007256:	d011      	beq.n	800727c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725c:	f043 0204 	orr.w	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	e00b      	b.n	8007294 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]
        return;
 8007292:	e080      	b.n	8007396 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d014      	beq.n	80072c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a2:	f043 0201 	orr.w	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00c      	beq.n	80072ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	f043 0208 	orr.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d04f      	beq.n	8007394 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007302:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <HAL_SPI_IRQHandler+0x168>
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d034      	beq.n	800738a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0203 	bic.w	r2, r2, #3
 800732e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d011      	beq.n	800735c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800733c:	4a17      	ldr	r2, [pc, #92]	@ (800739c <HAL_SPI_IRQHandler+0x1e4>)
 800733e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fb8e 	bl	8005a66 <HAL_DMA_Abort_IT>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007354:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007368:	4a0c      	ldr	r2, [pc, #48]	@ (800739c <HAL_SPI_IRQHandler+0x1e4>)
 800736a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fb78 	bl	8005a66 <HAL_DMA_Abort_IT>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007380:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007388:	e003      	b.n	8007392 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f808 	bl	80073a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007390:	e000      	b.n	8007394 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007392:	bf00      	nop
    return;
 8007394:	bf00      	nop
  }
}
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	080073b5 	.word	0x080073b5

080073a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff ffe6 	bl	80073a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073ec:	f7fd fd3e 	bl	8004e6c <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073fc:	f7fd fd36 	bl	8004e6c <HAL_GetTick>
 8007400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007402:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	0d1b      	lsrs	r3, r3, #20
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	e054      	b.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d050      	beq.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800741c:	f7fd fd26 	bl	8004e6c <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	429a      	cmp	r2, r3
 800742a:	d902      	bls.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d13d      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800744a:	d111      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007454:	d004      	beq.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d107      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007478:	d10f      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e017      	b.n	80074de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d19b      	bne.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000144 	.word	0x20000144

080074ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2201      	movs	r2, #1
 8007500:	2102      	movs	r1, #2
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff ff6a 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e032      	b.n	8007584 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800751e:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <SPI_EndRxTxTransaction+0xa0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1b      	ldr	r2, [pc, #108]	@ (8007590 <SPI_EndRxTxTransaction+0xa4>)
 8007524:	fba2 2303 	umull	r2, r3, r2, r3
 8007528:	0d5b      	lsrs	r3, r3, #21
 800752a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800753c:	d112      	bne.n	8007564 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2200      	movs	r2, #0
 8007546:	2180      	movs	r1, #128	@ 0x80
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff ff47 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d016      	beq.n	8007582 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e00f      	b.n	8007584 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	3b01      	subs	r3, #1
 800756e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757a:	2b80      	cmp	r3, #128	@ 0x80
 800757c:	d0f2      	beq.n	8007564 <SPI_EndRxTxTransaction+0x78>
 800757e:	e000      	b.n	8007582 <SPI_EndRxTxTransaction+0x96>
        break;
 8007580:	bf00      	nop
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000144 	.word	0x20000144
 8007590:	165e9f81 	.word	0x165e9f81

08007594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e042      	b.n	800762c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fd fabc 	bl	8004b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2224      	movs	r2, #36	@ 0x24
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fd11 	bl	8008000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800760c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08c      	sub	sp, #48	@ 0x30
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b20      	cmp	r3, #32
 800764c:	d14a      	bne.n	80076e4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e043      	b.n	80076e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	461a      	mov	r2, r3
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 faed 	bl	8007c50 <UART_Start_Receive_IT>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800767c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007680:	2b00      	cmp	r3, #0
 8007682:	d12c      	bne.n	80076de <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007688:	2b01      	cmp	r3, #1
 800768a:	d125      	bne.n	80076d8 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768c:	2300      	movs	r3, #0
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	617b      	str	r3, [r7, #20]
   return(result);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f043 0310 	orr.w	r3, r3, #16
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80076c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6a39      	ldr	r1, [r7, #32]
 80076c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80076d6:	e002      	b.n	80076de <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80076de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076e2:	e000      	b.n	80076e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
  }
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3730      	adds	r7, #48	@ 0x30
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b0ba      	sub	sp, #232	@ 0xe8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10f      	bne.n	8007756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <HAL_UART_IRQHandler+0x66>
 8007742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb97 	bl	8007e82 <UART_Receive_IT>
      return;
 8007754:	e25b      	b.n	8007c0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80de 	beq.w	800791c <HAL_UART_IRQHandler+0x22c>
 8007760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007770:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80d1 	beq.w	800791c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_UART_IRQHandler+0xae>
 8007786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800778a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007796:	f043 0201 	orr.w	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_UART_IRQHandler+0xd2>
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ba:	f043 0202 	orr.w	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_UART_IRQHandler+0xf6>
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077de:	f043 0204 	orr.w	r2, r3, #4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <HAL_UART_IRQHandler+0x126>
 80077f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d105      	bne.n	800780a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	f043 0208 	orr.w	r2, r3, #8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 81f2 	beq.w	8007c04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <HAL_UART_IRQHandler+0x14e>
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb22 	bl	8007e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007848:	2b40      	cmp	r3, #64	@ 0x40
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_UART_IRQHandler+0x17a>
 8007862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d04f      	beq.n	800790a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa2a 	bl	8007cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787a:	2b40      	cmp	r3, #64	@ 0x40
 800787c:	d141      	bne.n	8007902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3314      	adds	r3, #20
 8007884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800789c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1d9      	bne.n	800787e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d013      	beq.n	80078fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ad0 <HAL_UART_IRQHandler+0x3e0>)
 80078d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe f8c1 	bl	8005a66 <HAL_DMA_Abort_IT>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	e00e      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f99e 	bl	8007c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	e00a      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f99a 	bl	8007c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	e006      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f996 	bl	8007c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007916:	e175      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	bf00      	nop
    return;
 800791a:	e173      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	f040 814f 	bne.w	8007bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8148 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8141 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60bb      	str	r3, [r7, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007962:	2b40      	cmp	r3, #64	@ 0x40
 8007964:	f040 80b6 	bne.w	8007ad4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8145 	beq.w	8007c08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007986:	429a      	cmp	r2, r3
 8007988:	f080 813e 	bcs.w	8007c08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007992:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799e:	f000 8088 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1d9      	bne.n	80079a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e1      	bne.n	80079ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3314      	adds	r3, #20
 8007a30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e3      	bne.n	8007a2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a82:	f023 0310 	bic.w	r3, r3, #16
 8007a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e3      	bne.n	8007a70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fd ff6a 	bl	8005986 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7fb fa5f 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ace:	e09b      	b.n	8007c08 <HAL_UART_IRQHandler+0x518>
 8007ad0:	08007d8b 	.word	0x08007d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 808e 	beq.w	8007c0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8089 	beq.w	8007c0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e3      	bne.n	8007afa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3314      	adds	r3, #20
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	623b      	str	r3, [r7, #32]
   return(result);
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3314      	adds	r3, #20
 8007b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e3      	bne.n	8007b32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0310 	bic.w	r3, r3, #16
 8007b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b9c:	61fa      	str	r2, [r7, #28]
 8007b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e3      	bne.n	8007b78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7fb f9e5 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bc2:	e023      	b.n	8007c0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <HAL_UART_IRQHandler+0x4f4>
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8e8 	bl	8007db2 <UART_Transmit_IT>
    return;
 8007be2:	e014      	b.n	8007c0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00e      	beq.n	8007c0e <HAL_UART_IRQHandler+0x51e>
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f928 	bl	8007e52 <UART_EndTransmit_IT>
    return;
 8007c02:	e004      	b.n	8007c0e <HAL_UART_IRQHandler+0x51e>
    return;
 8007c04:	bf00      	nop
 8007c06:	e002      	b.n	8007c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c0c:	bf00      	nop
  }
}
 8007c0e:	37e8      	adds	r7, #232	@ 0xe8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2222      	movs	r2, #34	@ 0x22
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0201 	orr.w	r2, r2, #1
 8007ca4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0220 	orr.w	r2, r2, #32
 8007cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b095      	sub	sp, #84	@ 0x54
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cec:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e5      	bne.n	8007ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3314      	adds	r3, #20
 8007d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d119      	bne.n	8007d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	330c      	adds	r3, #12
 8007d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 0310 	bic.w	r3, r3, #16
 8007d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d5c:	61ba      	str	r2, [r7, #24]
 8007d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d7e:	bf00      	nop
 8007d80:	3754      	adds	r7, #84	@ 0x54
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff ff49 	bl	8007c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b21      	cmp	r3, #33	@ 0x21
 8007dc4:	d13e      	bne.n	8007e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dce:	d114      	bne.n	8007dfa <UART_Transmit_IT+0x48>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d110      	bne.n	8007dfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	1c9a      	adds	r2, r3, #2
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	621a      	str	r2, [r3, #32]
 8007df8:	e008      	b.n	8007e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6211      	str	r1, [r2, #32]
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10f      	bne.n	8007e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fece 	bl	8007c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b08c      	sub	sp, #48	@ 0x30
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b22      	cmp	r3, #34	@ 0x22
 8007e94:	f040 80ae 	bne.w	8007ff4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ea0:	d117      	bne.n	8007ed2 <UART_Receive_IT+0x50>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d113      	bne.n	8007ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ed0:	e026      	b.n	8007f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee4:	d007      	beq.n	8007ef6 <UART_Receive_IT+0x74>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <UART_Receive_IT+0x82>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e008      	b.n	8007f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d15d      	bne.n	8007ff0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0220 	bic.w	r2, r2, #32
 8007f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695a      	ldr	r2, [r3, #20]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d135      	bne.n	8007fe6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa0:	623a      	str	r2, [r7, #32]
 8007fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	69f9      	ldr	r1, [r7, #28]
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d10a      	bne.n	8007fd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fa ffd4 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
 8007fe4:	e002      	b.n	8007fec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fe1e 	bl	8007c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	e002      	b.n	8007ff6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3730      	adds	r7, #48	@ 0x30
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008004:	b0c0      	sub	sp, #256	@ 0x100
 8008006:	af00      	add	r7, sp, #0
 8008008:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801c:	68d9      	ldr	r1, [r3, #12]
 800801e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	ea40 0301 	orr.w	r3, r0, r1
 8008028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	431a      	orrs	r2, r3
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	431a      	orrs	r2, r3
 8008040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	4313      	orrs	r3, r2
 8008048:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800804c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008058:	f021 010c 	bic.w	r1, r1, #12
 800805c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008066:	430b      	orrs	r3, r1
 8008068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800807a:	6999      	ldr	r1, [r3, #24]
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	ea40 0301 	orr.w	r3, r0, r1
 8008086:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b8f      	ldr	r3, [pc, #572]	@ (80082cc <UART_SetConfig+0x2cc>)
 8008090:	429a      	cmp	r2, r3
 8008092:	d005      	beq.n	80080a0 <UART_SetConfig+0xa0>
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b8d      	ldr	r3, [pc, #564]	@ (80082d0 <UART_SetConfig+0x2d0>)
 800809c:	429a      	cmp	r2, r3
 800809e:	d104      	bne.n	80080aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080a0:	f7fe fd00 	bl	8006aa4 <HAL_RCC_GetPCLK2Freq>
 80080a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080a8:	e003      	b.n	80080b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080aa:	f7fe fce7 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 80080ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080bc:	f040 810c 	bne.w	80082d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80080ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80080d2:	4622      	mov	r2, r4
 80080d4:	462b      	mov	r3, r5
 80080d6:	1891      	adds	r1, r2, r2
 80080d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80080da:	415b      	adcs	r3, r3
 80080dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80080e2:	4621      	mov	r1, r4
 80080e4:	eb12 0801 	adds.w	r8, r2, r1
 80080e8:	4629      	mov	r1, r5
 80080ea:	eb43 0901 	adc.w	r9, r3, r1
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008102:	4690      	mov	r8, r2
 8008104:	4699      	mov	r9, r3
 8008106:	4623      	mov	r3, r4
 8008108:	eb18 0303 	adds.w	r3, r8, r3
 800810c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008110:	462b      	mov	r3, r5
 8008112:	eb49 0303 	adc.w	r3, r9, r3
 8008116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008126:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800812a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800812e:	460b      	mov	r3, r1
 8008130:	18db      	adds	r3, r3, r3
 8008132:	653b      	str	r3, [r7, #80]	@ 0x50
 8008134:	4613      	mov	r3, r2
 8008136:	eb42 0303 	adc.w	r3, r2, r3
 800813a:	657b      	str	r3, [r7, #84]	@ 0x54
 800813c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008144:	f7f8 fd40 	bl	8000bc8 <__aeabi_uldivmod>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4b61      	ldr	r3, [pc, #388]	@ (80082d4 <UART_SetConfig+0x2d4>)
 800814e:	fba3 2302 	umull	r2, r3, r3, r2
 8008152:	095b      	lsrs	r3, r3, #5
 8008154:	011c      	lsls	r4, r3, #4
 8008156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800815a:	2200      	movs	r2, #0
 800815c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008160:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008164:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	1891      	adds	r1, r2, r2
 800816e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008170:	415b      	adcs	r3, r3
 8008172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008174:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008178:	4641      	mov	r1, r8
 800817a:	eb12 0a01 	adds.w	sl, r2, r1
 800817e:	4649      	mov	r1, r9
 8008180:	eb43 0b01 	adc.w	fp, r3, r1
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008190:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008198:	4692      	mov	sl, r2
 800819a:	469b      	mov	fp, r3
 800819c:	4643      	mov	r3, r8
 800819e:	eb1a 0303 	adds.w	r3, sl, r3
 80081a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081a6:	464b      	mov	r3, r9
 80081a8:	eb4b 0303 	adc.w	r3, fp, r3
 80081ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80081c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081c4:	460b      	mov	r3, r1
 80081c6:	18db      	adds	r3, r3, r3
 80081c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80081ca:	4613      	mov	r3, r2
 80081cc:	eb42 0303 	adc.w	r3, r2, r3
 80081d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80081da:	f7f8 fcf5 	bl	8000bc8 <__aeabi_uldivmod>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	4b3b      	ldr	r3, [pc, #236]	@ (80082d4 <UART_SetConfig+0x2d4>)
 80081e6:	fba3 2301 	umull	r2, r3, r3, r1
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	2264      	movs	r2, #100	@ 0x64
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
 80081f2:	1acb      	subs	r3, r1, r3
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80081fa:	4b36      	ldr	r3, [pc, #216]	@ (80082d4 <UART_SetConfig+0x2d4>)
 80081fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008208:	441c      	add	r4, r3
 800820a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008214:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008218:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800821c:	4642      	mov	r2, r8
 800821e:	464b      	mov	r3, r9
 8008220:	1891      	adds	r1, r2, r2
 8008222:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008224:	415b      	adcs	r3, r3
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800822c:	4641      	mov	r1, r8
 800822e:	1851      	adds	r1, r2, r1
 8008230:	6339      	str	r1, [r7, #48]	@ 0x30
 8008232:	4649      	mov	r1, r9
 8008234:	414b      	adcs	r3, r1
 8008236:	637b      	str	r3, [r7, #52]	@ 0x34
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008244:	4659      	mov	r1, fp
 8008246:	00cb      	lsls	r3, r1, #3
 8008248:	4651      	mov	r1, sl
 800824a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824e:	4651      	mov	r1, sl
 8008250:	00ca      	lsls	r2, r1, #3
 8008252:	4610      	mov	r0, r2
 8008254:	4619      	mov	r1, r3
 8008256:	4603      	mov	r3, r0
 8008258:	4642      	mov	r2, r8
 800825a:	189b      	adds	r3, r3, r2
 800825c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008260:	464b      	mov	r3, r9
 8008262:	460a      	mov	r2, r1
 8008264:	eb42 0303 	adc.w	r3, r2, r3
 8008268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008278:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800827c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008280:	460b      	mov	r3, r1
 8008282:	18db      	adds	r3, r3, r3
 8008284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008286:	4613      	mov	r3, r2
 8008288:	eb42 0303 	adc.w	r3, r2, r3
 800828c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800828e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008292:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008296:	f7f8 fc97 	bl	8000bc8 <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <UART_SetConfig+0x2d4>)
 80082a0:	fba3 1302 	umull	r1, r3, r3, r2
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	2164      	movs	r1, #100	@ 0x64
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	3332      	adds	r3, #50	@ 0x32
 80082b2:	4a08      	ldr	r2, [pc, #32]	@ (80082d4 <UART_SetConfig+0x2d4>)
 80082b4:	fba2 2303 	umull	r2, r3, r2, r3
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	f003 0207 	and.w	r2, r3, #7
 80082be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4422      	add	r2, r4
 80082c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082c8:	e106      	b.n	80084d8 <UART_SetConfig+0x4d8>
 80082ca:	bf00      	nop
 80082cc:	40011000 	.word	0x40011000
 80082d0:	40011400 	.word	0x40011400
 80082d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082dc:	2200      	movs	r2, #0
 80082de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80082e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	1891      	adds	r1, r2, r2
 80082f0:	6239      	str	r1, [r7, #32]
 80082f2:	415b      	adcs	r3, r3
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082fa:	4641      	mov	r1, r8
 80082fc:	1854      	adds	r4, r2, r1
 80082fe:	4649      	mov	r1, r9
 8008300:	eb43 0501 	adc.w	r5, r3, r1
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	00eb      	lsls	r3, r5, #3
 800830e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008312:	00e2      	lsls	r2, r4, #3
 8008314:	4614      	mov	r4, r2
 8008316:	461d      	mov	r5, r3
 8008318:	4643      	mov	r3, r8
 800831a:	18e3      	adds	r3, r4, r3
 800831c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008320:	464b      	mov	r3, r9
 8008322:	eb45 0303 	adc.w	r3, r5, r3
 8008326:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008346:	4629      	mov	r1, r5
 8008348:	008b      	lsls	r3, r1, #2
 800834a:	4621      	mov	r1, r4
 800834c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008350:	4621      	mov	r1, r4
 8008352:	008a      	lsls	r2, r1, #2
 8008354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008358:	f7f8 fc36 	bl	8000bc8 <__aeabi_uldivmod>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4b60      	ldr	r3, [pc, #384]	@ (80084e4 <UART_SetConfig+0x4e4>)
 8008362:	fba3 2302 	umull	r2, r3, r3, r2
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	011c      	lsls	r4, r3, #4
 800836a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800836e:	2200      	movs	r2, #0
 8008370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008374:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800837c:	4642      	mov	r2, r8
 800837e:	464b      	mov	r3, r9
 8008380:	1891      	adds	r1, r2, r2
 8008382:	61b9      	str	r1, [r7, #24]
 8008384:	415b      	adcs	r3, r3
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800838c:	4641      	mov	r1, r8
 800838e:	1851      	adds	r1, r2, r1
 8008390:	6139      	str	r1, [r7, #16]
 8008392:	4649      	mov	r1, r9
 8008394:	414b      	adcs	r3, r1
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083a4:	4659      	mov	r1, fp
 80083a6:	00cb      	lsls	r3, r1, #3
 80083a8:	4651      	mov	r1, sl
 80083aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ae:	4651      	mov	r1, sl
 80083b0:	00ca      	lsls	r2, r1, #3
 80083b2:	4610      	mov	r0, r2
 80083b4:	4619      	mov	r1, r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	4642      	mov	r2, r8
 80083ba:	189b      	adds	r3, r3, r2
 80083bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083c0:	464b      	mov	r3, r9
 80083c2:	460a      	mov	r2, r1
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80083e4:	4649      	mov	r1, r9
 80083e6:	008b      	lsls	r3, r1, #2
 80083e8:	4641      	mov	r1, r8
 80083ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ee:	4641      	mov	r1, r8
 80083f0:	008a      	lsls	r2, r1, #2
 80083f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083f6:	f7f8 fbe7 	bl	8000bc8 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	4b38      	ldr	r3, [pc, #224]	@ (80084e4 <UART_SetConfig+0x4e4>)
 8008402:	fba3 2301 	umull	r2, r3, r3, r1
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	2264      	movs	r2, #100	@ 0x64
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	1acb      	subs	r3, r1, r3
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	3332      	adds	r3, #50	@ 0x32
 8008414:	4a33      	ldr	r2, [pc, #204]	@ (80084e4 <UART_SetConfig+0x4e4>)
 8008416:	fba2 2303 	umull	r2, r3, r2, r3
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008420:	441c      	add	r4, r3
 8008422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008426:	2200      	movs	r2, #0
 8008428:	673b      	str	r3, [r7, #112]	@ 0x70
 800842a:	677a      	str	r2, [r7, #116]	@ 0x74
 800842c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	1891      	adds	r1, r2, r2
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	415b      	adcs	r3, r3
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008440:	4641      	mov	r1, r8
 8008442:	1851      	adds	r1, r2, r1
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	4649      	mov	r1, r9
 8008448:	414b      	adcs	r3, r1
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008458:	4659      	mov	r1, fp
 800845a:	00cb      	lsls	r3, r1, #3
 800845c:	4651      	mov	r1, sl
 800845e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008462:	4651      	mov	r1, sl
 8008464:	00ca      	lsls	r2, r1, #3
 8008466:	4610      	mov	r0, r2
 8008468:	4619      	mov	r1, r3
 800846a:	4603      	mov	r3, r0
 800846c:	4642      	mov	r2, r8
 800846e:	189b      	adds	r3, r3, r2
 8008470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008472:	464b      	mov	r3, r9
 8008474:	460a      	mov	r2, r1
 8008476:	eb42 0303 	adc.w	r3, r2, r3
 800847a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	663b      	str	r3, [r7, #96]	@ 0x60
 8008486:	667a      	str	r2, [r7, #100]	@ 0x64
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008494:	4649      	mov	r1, r9
 8008496:	008b      	lsls	r3, r1, #2
 8008498:	4641      	mov	r1, r8
 800849a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849e:	4641      	mov	r1, r8
 80084a0:	008a      	lsls	r2, r1, #2
 80084a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084a6:	f7f8 fb8f 	bl	8000bc8 <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <UART_SetConfig+0x4e4>)
 80084b0:	fba3 1302 	umull	r1, r3, r3, r2
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	2164      	movs	r1, #100	@ 0x64
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	3332      	adds	r3, #50	@ 0x32
 80084c2:	4a08      	ldr	r2, [pc, #32]	@ (80084e4 <UART_SetConfig+0x4e4>)
 80084c4:	fba2 2303 	umull	r2, r3, r2, r3
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	f003 020f 	and.w	r2, r3, #15
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4422      	add	r2, r4
 80084d6:	609a      	str	r2, [r3, #8]
}
 80084d8:	bf00      	nop
 80084da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80084de:	46bd      	mov	sp, r7
 80084e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e4:	51eb851f 	.word	0x51eb851f

080084e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80084ec:	4904      	ldr	r1, [pc, #16]	@ (8008500 <MX_FATFS_Init+0x18>)
 80084ee:	4805      	ldr	r0, [pc, #20]	@ (8008504 <MX_FATFS_Init+0x1c>)
 80084f0:	f000 f8ae 	bl	8008650 <FATFS_LinkDriver>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	4b03      	ldr	r3, [pc, #12]	@ (8008508 <MX_FATFS_Init+0x20>)
 80084fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80084fc:	bf00      	nop
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000b48 	.word	0x20000b48
 8008504:	20000150 	.word	0x20000150
 8008508:	20000b44 	.word	0x20000b44

0800850c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	4618      	mov	r0, r3
 800851a:	f7fb f883 	bl	8003624 <SD_disk_initialize>
 800851e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	4618      	mov	r0, r3
 8008536:	f7fb f961 	bl	80037fc <SD_disk_status>
 800853a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8008554:	7bf8      	ldrb	r0, [r7, #15]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	f7fb f964 	bl	8003828 <SD_disk_read>
 8008560:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800857a:	7bf8      	ldrb	r0, [r7, #15]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	f7fb f9bb 	bl	80038fc <SD_disk_write>
 8008586:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	603a      	str	r2, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
 800859c:	460b      	mov	r3, r1
 800859e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80085a0:	79b9      	ldrb	r1, [r7, #6]
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fb fa2c 	bl	8003a04 <SD_disk_ioctl>
 80085ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085ce:	4b1f      	ldr	r3, [pc, #124]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085d0:	7a5b      	ldrb	r3, [r3, #9]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d131      	bne.n	800863c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085d8:	4b1c      	ldr	r3, [pc, #112]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085da:	7a5b      	ldrb	r3, [r3, #9]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	4b1a      	ldr	r3, [pc, #104]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085e2:	2100      	movs	r1, #0
 80085e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085e6:	4b19      	ldr	r3, [pc, #100]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085e8:	7a5b      	ldrb	r3, [r3, #9]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	4a17      	ldr	r2, [pc, #92]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085f6:	4b15      	ldr	r3, [pc, #84]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 80085f8:	7a5b      	ldrb	r3, [r3, #9]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b13      	ldr	r3, [pc, #76]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 8008600:	4413      	add	r3, r2
 8008602:	79fa      	ldrb	r2, [r7, #7]
 8008604:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008606:	4b11      	ldr	r3, [pc, #68]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 8008608:	7a5b      	ldrb	r3, [r3, #9]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	b2d1      	uxtb	r1, r2
 8008610:	4a0e      	ldr	r2, [pc, #56]	@ (800864c <FATFS_LinkDriverEx+0x94>)
 8008612:	7251      	strb	r1, [r2, #9]
 8008614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008616:	7dbb      	ldrb	r3, [r7, #22]
 8008618:	3330      	adds	r3, #48	@ 0x30
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3301      	adds	r3, #1
 8008624:	223a      	movs	r2, #58	@ 0x3a
 8008626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3302      	adds	r3, #2
 800862c:	222f      	movs	r2, #47	@ 0x2f
 800862e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3303      	adds	r3, #3
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000b4c 	.word	0x20000b4c

08008650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800865a:	2200      	movs	r2, #0
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ffaa 	bl	80085b8 <FATFS_LinkDriverEx>
 8008664:	4603      	mov	r3, r0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <malloc>:
 8008670:	4b02      	ldr	r3, [pc, #8]	@ (800867c <malloc+0xc>)
 8008672:	4601      	mov	r1, r0
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f000 b825 	b.w	80086c4 <_malloc_r>
 800867a:	bf00      	nop
 800867c:	20000170 	.word	0x20000170

08008680 <sbrk_aligned>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4e0f      	ldr	r6, [pc, #60]	@ (80086c0 <sbrk_aligned+0x40>)
 8008684:	460c      	mov	r4, r1
 8008686:	6831      	ldr	r1, [r6, #0]
 8008688:	4605      	mov	r5, r0
 800868a:	b911      	cbnz	r1, 8008692 <sbrk_aligned+0x12>
 800868c:	f000 fe64 	bl	8009358 <_sbrk_r>
 8008690:	6030      	str	r0, [r6, #0]
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f000 fe5f 	bl	8009358 <_sbrk_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d103      	bne.n	80086a6 <sbrk_aligned+0x26>
 800869e:	f04f 34ff 	mov.w	r4, #4294967295
 80086a2:	4620      	mov	r0, r4
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	1cc4      	adds	r4, r0, #3
 80086a8:	f024 0403 	bic.w	r4, r4, #3
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d0f8      	beq.n	80086a2 <sbrk_aligned+0x22>
 80086b0:	1a21      	subs	r1, r4, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fe50 	bl	8009358 <_sbrk_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d1f2      	bne.n	80086a2 <sbrk_aligned+0x22>
 80086bc:	e7ef      	b.n	800869e <sbrk_aligned+0x1e>
 80086be:	bf00      	nop
 80086c0:	20000b58 	.word	0x20000b58

080086c4 <_malloc_r>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	4606      	mov	r6, r0
 80086da:	db01      	blt.n	80086e0 <_malloc_r+0x1c>
 80086dc:	42a9      	cmp	r1, r5
 80086de:	d904      	bls.n	80086ea <_malloc_r+0x26>
 80086e0:	230c      	movs	r3, #12
 80086e2:	6033      	str	r3, [r6, #0]
 80086e4:	2000      	movs	r0, #0
 80086e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087c0 <_malloc_r+0xfc>
 80086ee:	f000 f869 	bl	80087c4 <__malloc_lock>
 80086f2:	f8d8 3000 	ldr.w	r3, [r8]
 80086f6:	461c      	mov	r4, r3
 80086f8:	bb44      	cbnz	r4, 800874c <_malloc_r+0x88>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff ffbf 	bl	8008680 <sbrk_aligned>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	4604      	mov	r4, r0
 8008706:	d158      	bne.n	80087ba <_malloc_r+0xf6>
 8008708:	f8d8 4000 	ldr.w	r4, [r8]
 800870c:	4627      	mov	r7, r4
 800870e:	2f00      	cmp	r7, #0
 8008710:	d143      	bne.n	800879a <_malloc_r+0xd6>
 8008712:	2c00      	cmp	r4, #0
 8008714:	d04b      	beq.n	80087ae <_malloc_r+0xea>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	4639      	mov	r1, r7
 800871a:	4630      	mov	r0, r6
 800871c:	eb04 0903 	add.w	r9, r4, r3
 8008720:	f000 fe1a 	bl	8009358 <_sbrk_r>
 8008724:	4581      	cmp	r9, r0
 8008726:	d142      	bne.n	80087ae <_malloc_r+0xea>
 8008728:	6821      	ldr	r1, [r4, #0]
 800872a:	1a6d      	subs	r5, r5, r1
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff ffa6 	bl	8008680 <sbrk_aligned>
 8008734:	3001      	adds	r0, #1
 8008736:	d03a      	beq.n	80087ae <_malloc_r+0xea>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	442b      	add	r3, r5
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	f8d8 3000 	ldr.w	r3, [r8]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	bb62      	cbnz	r2, 80087a0 <_malloc_r+0xdc>
 8008746:	f8c8 7000 	str.w	r7, [r8]
 800874a:	e00f      	b.n	800876c <_malloc_r+0xa8>
 800874c:	6822      	ldr	r2, [r4, #0]
 800874e:	1b52      	subs	r2, r2, r5
 8008750:	d420      	bmi.n	8008794 <_malloc_r+0xd0>
 8008752:	2a0b      	cmp	r2, #11
 8008754:	d917      	bls.n	8008786 <_malloc_r+0xc2>
 8008756:	1961      	adds	r1, r4, r5
 8008758:	42a3      	cmp	r3, r4
 800875a:	6025      	str	r5, [r4, #0]
 800875c:	bf18      	it	ne
 800875e:	6059      	strne	r1, [r3, #4]
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	bf08      	it	eq
 8008764:	f8c8 1000 	streq.w	r1, [r8]
 8008768:	5162      	str	r2, [r4, r5]
 800876a:	604b      	str	r3, [r1, #4]
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f82f 	bl	80087d0 <__malloc_unlock>
 8008772:	f104 000b 	add.w	r0, r4, #11
 8008776:	1d23      	adds	r3, r4, #4
 8008778:	f020 0007 	bic.w	r0, r0, #7
 800877c:	1ac2      	subs	r2, r0, r3
 800877e:	bf1c      	itt	ne
 8008780:	1a1b      	subne	r3, r3, r0
 8008782:	50a3      	strne	r3, [r4, r2]
 8008784:	e7af      	b.n	80086e6 <_malloc_r+0x22>
 8008786:	6862      	ldr	r2, [r4, #4]
 8008788:	42a3      	cmp	r3, r4
 800878a:	bf0c      	ite	eq
 800878c:	f8c8 2000 	streq.w	r2, [r8]
 8008790:	605a      	strne	r2, [r3, #4]
 8008792:	e7eb      	b.n	800876c <_malloc_r+0xa8>
 8008794:	4623      	mov	r3, r4
 8008796:	6864      	ldr	r4, [r4, #4]
 8008798:	e7ae      	b.n	80086f8 <_malloc_r+0x34>
 800879a:	463c      	mov	r4, r7
 800879c:	687f      	ldr	r7, [r7, #4]
 800879e:	e7b6      	b.n	800870e <_malloc_r+0x4a>
 80087a0:	461a      	mov	r2, r3
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	d1fb      	bne.n	80087a0 <_malloc_r+0xdc>
 80087a8:	2300      	movs	r3, #0
 80087aa:	6053      	str	r3, [r2, #4]
 80087ac:	e7de      	b.n	800876c <_malloc_r+0xa8>
 80087ae:	230c      	movs	r3, #12
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	4630      	mov	r0, r6
 80087b4:	f000 f80c 	bl	80087d0 <__malloc_unlock>
 80087b8:	e794      	b.n	80086e4 <_malloc_r+0x20>
 80087ba:	6005      	str	r5, [r0, #0]
 80087bc:	e7d6      	b.n	800876c <_malloc_r+0xa8>
 80087be:	bf00      	nop
 80087c0:	20000b5c 	.word	0x20000b5c

080087c4 <__malloc_lock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	@ (80087cc <__malloc_lock+0x8>)
 80087c6:	f000 be14 	b.w	80093f2 <__retarget_lock_acquire_recursive>
 80087ca:	bf00      	nop
 80087cc:	20000ca0 	.word	0x20000ca0

080087d0 <__malloc_unlock>:
 80087d0:	4801      	ldr	r0, [pc, #4]	@ (80087d8 <__malloc_unlock+0x8>)
 80087d2:	f000 be0f 	b.w	80093f4 <__retarget_lock_release_recursive>
 80087d6:	bf00      	nop
 80087d8:	20000ca0 	.word	0x20000ca0

080087dc <__cvt>:
 80087dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	ec57 6b10 	vmov	r6, r7, d0
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	460c      	mov	r4, r1
 80087e8:	4619      	mov	r1, r3
 80087ea:	463b      	mov	r3, r7
 80087ec:	bfbb      	ittet	lt
 80087ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087f2:	461f      	movlt	r7, r3
 80087f4:	2300      	movge	r3, #0
 80087f6:	232d      	movlt	r3, #45	@ 0x2d
 80087f8:	700b      	strb	r3, [r1, #0]
 80087fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008800:	4691      	mov	r9, r2
 8008802:	f023 0820 	bic.w	r8, r3, #32
 8008806:	bfbc      	itt	lt
 8008808:	4632      	movlt	r2, r6
 800880a:	4616      	movlt	r6, r2
 800880c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008810:	d005      	beq.n	800881e <__cvt+0x42>
 8008812:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008816:	d100      	bne.n	800881a <__cvt+0x3e>
 8008818:	3401      	adds	r4, #1
 800881a:	2102      	movs	r1, #2
 800881c:	e000      	b.n	8008820 <__cvt+0x44>
 800881e:	2103      	movs	r1, #3
 8008820:	ab03      	add	r3, sp, #12
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	ab02      	add	r3, sp, #8
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	ec47 6b10 	vmov	d0, r6, r7
 800882c:	4653      	mov	r3, sl
 800882e:	4622      	mov	r2, r4
 8008830:	f000 fe7a 	bl	8009528 <_dtoa_r>
 8008834:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008838:	4605      	mov	r5, r0
 800883a:	d119      	bne.n	8008870 <__cvt+0x94>
 800883c:	f019 0f01 	tst.w	r9, #1
 8008840:	d00e      	beq.n	8008860 <__cvt+0x84>
 8008842:	eb00 0904 	add.w	r9, r0, r4
 8008846:	2200      	movs	r2, #0
 8008848:	2300      	movs	r3, #0
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7f8 f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008852:	b108      	cbz	r0, 8008858 <__cvt+0x7c>
 8008854:	f8cd 900c 	str.w	r9, [sp, #12]
 8008858:	2230      	movs	r2, #48	@ 0x30
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	454b      	cmp	r3, r9
 800885e:	d31e      	bcc.n	800889e <__cvt+0xc2>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008864:	1b5b      	subs	r3, r3, r5
 8008866:	4628      	mov	r0, r5
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	b004      	add	sp, #16
 800886c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008874:	eb00 0904 	add.w	r9, r0, r4
 8008878:	d1e5      	bne.n	8008846 <__cvt+0x6a>
 800887a:	7803      	ldrb	r3, [r0, #0]
 800887c:	2b30      	cmp	r3, #48	@ 0x30
 800887e:	d10a      	bne.n	8008896 <__cvt+0xba>
 8008880:	2200      	movs	r2, #0
 8008882:	2300      	movs	r3, #0
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f8 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800888c:	b918      	cbnz	r0, 8008896 <__cvt+0xba>
 800888e:	f1c4 0401 	rsb	r4, r4, #1
 8008892:	f8ca 4000 	str.w	r4, [sl]
 8008896:	f8da 3000 	ldr.w	r3, [sl]
 800889a:	4499      	add	r9, r3
 800889c:	e7d3      	b.n	8008846 <__cvt+0x6a>
 800889e:	1c59      	adds	r1, r3, #1
 80088a0:	9103      	str	r1, [sp, #12]
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	e7d9      	b.n	800885a <__cvt+0x7e>

080088a6 <__exponent>:
 80088a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088a8:	2900      	cmp	r1, #0
 80088aa:	bfba      	itte	lt
 80088ac:	4249      	neglt	r1, r1
 80088ae:	232d      	movlt	r3, #45	@ 0x2d
 80088b0:	232b      	movge	r3, #43	@ 0x2b
 80088b2:	2909      	cmp	r1, #9
 80088b4:	7002      	strb	r2, [r0, #0]
 80088b6:	7043      	strb	r3, [r0, #1]
 80088b8:	dd29      	ble.n	800890e <__exponent+0x68>
 80088ba:	f10d 0307 	add.w	r3, sp, #7
 80088be:	461d      	mov	r5, r3
 80088c0:	270a      	movs	r7, #10
 80088c2:	461a      	mov	r2, r3
 80088c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80088c8:	fb07 1416 	mls	r4, r7, r6, r1
 80088cc:	3430      	adds	r4, #48	@ 0x30
 80088ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088d2:	460c      	mov	r4, r1
 80088d4:	2c63      	cmp	r4, #99	@ 0x63
 80088d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80088da:	4631      	mov	r1, r6
 80088dc:	dcf1      	bgt.n	80088c2 <__exponent+0x1c>
 80088de:	3130      	adds	r1, #48	@ 0x30
 80088e0:	1e94      	subs	r4, r2, #2
 80088e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088e6:	1c41      	adds	r1, r0, #1
 80088e8:	4623      	mov	r3, r4
 80088ea:	42ab      	cmp	r3, r5
 80088ec:	d30a      	bcc.n	8008904 <__exponent+0x5e>
 80088ee:	f10d 0309 	add.w	r3, sp, #9
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	42ac      	cmp	r4, r5
 80088f6:	bf88      	it	hi
 80088f8:	2300      	movhi	r3, #0
 80088fa:	3302      	adds	r3, #2
 80088fc:	4403      	add	r3, r0
 80088fe:	1a18      	subs	r0, r3, r0
 8008900:	b003      	add	sp, #12
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008904:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008908:	f801 6f01 	strb.w	r6, [r1, #1]!
 800890c:	e7ed      	b.n	80088ea <__exponent+0x44>
 800890e:	2330      	movs	r3, #48	@ 0x30
 8008910:	3130      	adds	r1, #48	@ 0x30
 8008912:	7083      	strb	r3, [r0, #2]
 8008914:	70c1      	strb	r1, [r0, #3]
 8008916:	1d03      	adds	r3, r0, #4
 8008918:	e7f1      	b.n	80088fe <__exponent+0x58>
	...

0800891c <_printf_float>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	b08d      	sub	sp, #52	@ 0x34
 8008922:	460c      	mov	r4, r1
 8008924:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008928:	4616      	mov	r6, r2
 800892a:	461f      	mov	r7, r3
 800892c:	4605      	mov	r5, r0
 800892e:	f000 fcdb 	bl	80092e8 <_localeconv_r>
 8008932:	6803      	ldr	r3, [r0, #0]
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	4618      	mov	r0, r3
 8008938:	f7f7 fcaa 	bl	8000290 <strlen>
 800893c:	2300      	movs	r3, #0
 800893e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008940:	f8d8 3000 	ldr.w	r3, [r8]
 8008944:	9005      	str	r0, [sp, #20]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	f103 0208 	add.w	r2, r3, #8
 8008950:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008954:	f8d4 b000 	ldr.w	fp, [r4]
 8008958:	f8c8 2000 	str.w	r2, [r8]
 800895c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008960:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008964:	9307      	str	r3, [sp, #28]
 8008966:	f8cd 8018 	str.w	r8, [sp, #24]
 800896a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800896e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008972:	4b9c      	ldr	r3, [pc, #624]	@ (8008be4 <_printf_float+0x2c8>)
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	f7f8 f8e8 	bl	8000b4c <__aeabi_dcmpun>
 800897c:	bb70      	cbnz	r0, 80089dc <_printf_float+0xc0>
 800897e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008982:	4b98      	ldr	r3, [pc, #608]	@ (8008be4 <_printf_float+0x2c8>)
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	f7f8 f8c2 	bl	8000b10 <__aeabi_dcmple>
 800898c:	bb30      	cbnz	r0, 80089dc <_printf_float+0xc0>
 800898e:	2200      	movs	r2, #0
 8008990:	2300      	movs	r3, #0
 8008992:	4640      	mov	r0, r8
 8008994:	4649      	mov	r1, r9
 8008996:	f7f8 f8b1 	bl	8000afc <__aeabi_dcmplt>
 800899a:	b110      	cbz	r0, 80089a2 <_printf_float+0x86>
 800899c:	232d      	movs	r3, #45	@ 0x2d
 800899e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a2:	4a91      	ldr	r2, [pc, #580]	@ (8008be8 <_printf_float+0x2cc>)
 80089a4:	4b91      	ldr	r3, [pc, #580]	@ (8008bec <_printf_float+0x2d0>)
 80089a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089aa:	bf94      	ite	ls
 80089ac:	4690      	movls	r8, r2
 80089ae:	4698      	movhi	r8, r3
 80089b0:	2303      	movs	r3, #3
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	f02b 0304 	bic.w	r3, fp, #4
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	f04f 0900 	mov.w	r9, #0
 80089be:	9700      	str	r7, [sp, #0]
 80089c0:	4633      	mov	r3, r6
 80089c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f9d2 	bl	8008d70 <_printf_common>
 80089cc:	3001      	adds	r0, #1
 80089ce:	f040 808d 	bne.w	8008aec <_printf_float+0x1d0>
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	b00d      	add	sp, #52	@ 0x34
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f8 f8b2 	bl	8000b4c <__aeabi_dcmpun>
 80089e8:	b140      	cbz	r0, 80089fc <_printf_float+0xe0>
 80089ea:	464b      	mov	r3, r9
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfbc      	itt	lt
 80089f0:	232d      	movlt	r3, #45	@ 0x2d
 80089f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089f6:	4a7e      	ldr	r2, [pc, #504]	@ (8008bf0 <_printf_float+0x2d4>)
 80089f8:	4b7e      	ldr	r3, [pc, #504]	@ (8008bf4 <_printf_float+0x2d8>)
 80089fa:	e7d4      	b.n	80089a6 <_printf_float+0x8a>
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a02:	9206      	str	r2, [sp, #24]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	d13b      	bne.n	8008a80 <_printf_float+0x164>
 8008a08:	2306      	movs	r3, #6
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a10:	2300      	movs	r3, #0
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a1c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	6861      	ldr	r1, [r4, #4]
 8008a22:	ec49 8b10 	vmov	d0, r8, r9
 8008a26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f7ff fed6 	bl	80087dc <__cvt>
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a34:	2b47      	cmp	r3, #71	@ 0x47
 8008a36:	4680      	mov	r8, r0
 8008a38:	d129      	bne.n	8008a8e <_printf_float+0x172>
 8008a3a:	1cc8      	adds	r0, r1, #3
 8008a3c:	db02      	blt.n	8008a44 <_printf_float+0x128>
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	4299      	cmp	r1, r3
 8008a42:	dd41      	ble.n	8008ac8 <_printf_float+0x1ac>
 8008a44:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a48:	fa5f fa8a 	uxtb.w	sl, sl
 8008a4c:	3901      	subs	r1, #1
 8008a4e:	4652      	mov	r2, sl
 8008a50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a54:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a56:	f7ff ff26 	bl	80088a6 <__exponent>
 8008a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a5c:	1813      	adds	r3, r2, r0
 8008a5e:	2a01      	cmp	r2, #1
 8008a60:	4681      	mov	r9, r0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	dc02      	bgt.n	8008a6c <_printf_float+0x150>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	07d2      	lsls	r2, r2, #31
 8008a6a:	d501      	bpl.n	8008a70 <_printf_float+0x154>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0a2      	beq.n	80089be <_printf_float+0xa2>
 8008a78:	232d      	movs	r3, #45	@ 0x2d
 8008a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a7e:	e79e      	b.n	80089be <_printf_float+0xa2>
 8008a80:	9a06      	ldr	r2, [sp, #24]
 8008a82:	2a47      	cmp	r2, #71	@ 0x47
 8008a84:	d1c2      	bne.n	8008a0c <_printf_float+0xf0>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1c0      	bne.n	8008a0c <_printf_float+0xf0>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e7bd      	b.n	8008a0a <_printf_float+0xee>
 8008a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a92:	d9db      	bls.n	8008a4c <_printf_float+0x130>
 8008a94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a98:	d118      	bne.n	8008acc <_printf_float+0x1b0>
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	dd0b      	ble.n	8008ab8 <_printf_float+0x19c>
 8008aa0:	6121      	str	r1, [r4, #16]
 8008aa2:	b913      	cbnz	r3, 8008aaa <_printf_float+0x18e>
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	07d0      	lsls	r0, r2, #31
 8008aa8:	d502      	bpl.n	8008ab0 <_printf_float+0x194>
 8008aaa:	3301      	adds	r3, #1
 8008aac:	440b      	add	r3, r1
 8008aae:	6123      	str	r3, [r4, #16]
 8008ab0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	e7db      	b.n	8008a70 <_printf_float+0x154>
 8008ab8:	b913      	cbnz	r3, 8008ac0 <_printf_float+0x1a4>
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	07d2      	lsls	r2, r2, #31
 8008abe:	d501      	bpl.n	8008ac4 <_printf_float+0x1a8>
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	e7f4      	b.n	8008aae <_printf_float+0x192>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e7f2      	b.n	8008aae <_printf_float+0x192>
 8008ac8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ace:	4299      	cmp	r1, r3
 8008ad0:	db05      	blt.n	8008ade <_printf_float+0x1c2>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	6121      	str	r1, [r4, #16]
 8008ad6:	07d8      	lsls	r0, r3, #31
 8008ad8:	d5ea      	bpl.n	8008ab0 <_printf_float+0x194>
 8008ada:	1c4b      	adds	r3, r1, #1
 8008adc:	e7e7      	b.n	8008aae <_printf_float+0x192>
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	bfd4      	ite	le
 8008ae2:	f1c1 0202 	rsble	r2, r1, #2
 8008ae6:	2201      	movgt	r2, #1
 8008ae8:	4413      	add	r3, r2
 8008aea:	e7e0      	b.n	8008aae <_printf_float+0x192>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	055a      	lsls	r2, r3, #21
 8008af0:	d407      	bmi.n	8008b02 <_printf_float+0x1e6>
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	4642      	mov	r2, r8
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	d12b      	bne.n	8008b58 <_printf_float+0x23c>
 8008b00:	e767      	b.n	80089d2 <_printf_float+0xb6>
 8008b02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b06:	f240 80dd 	bls.w	8008cc4 <_printf_float+0x3a8>
 8008b0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2300      	movs	r3, #0
 8008b12:	f7f7 ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d033      	beq.n	8008b82 <_printf_float+0x266>
 8008b1a:	4a37      	ldr	r2, [pc, #220]	@ (8008bf8 <_printf_float+0x2dc>)
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	f43f af54 	beq.w	80089d2 <_printf_float+0xb6>
 8008b2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b2e:	4543      	cmp	r3, r8
 8008b30:	db02      	blt.n	8008b38 <_printf_float+0x21c>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	07d8      	lsls	r0, r3, #31
 8008b36:	d50f      	bpl.n	8008b58 <_printf_float+0x23c>
 8008b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f af45 	beq.w	80089d2 <_printf_float+0xb6>
 8008b48:	f04f 0900 	mov.w	r9, #0
 8008b4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b50:	f104 0a1a 	add.w	sl, r4, #26
 8008b54:	45c8      	cmp	r8, r9
 8008b56:	dc09      	bgt.n	8008b6c <_printf_float+0x250>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	079b      	lsls	r3, r3, #30
 8008b5c:	f100 8103 	bmi.w	8008d66 <_printf_float+0x44a>
 8008b60:	68e0      	ldr	r0, [r4, #12]
 8008b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b64:	4298      	cmp	r0, r3
 8008b66:	bfb8      	it	lt
 8008b68:	4618      	movlt	r0, r3
 8008b6a:	e734      	b.n	80089d6 <_printf_float+0xba>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f af2b 	beq.w	80089d2 <_printf_float+0xb6>
 8008b7c:	f109 0901 	add.w	r9, r9, #1
 8008b80:	e7e8      	b.n	8008b54 <_printf_float+0x238>
 8008b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dc39      	bgt.n	8008bfc <_printf_float+0x2e0>
 8008b88:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf8 <_printf_float+0x2dc>)
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	f43f af1d 	beq.w	80089d2 <_printf_float+0xb6>
 8008b98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b9c:	ea59 0303 	orrs.w	r3, r9, r3
 8008ba0:	d102      	bne.n	8008ba8 <_printf_float+0x28c>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	07d9      	lsls	r1, r3, #31
 8008ba6:	d5d7      	bpl.n	8008b58 <_printf_float+0x23c>
 8008ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bac:	4631      	mov	r1, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b8      	blx	r7
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	f43f af0d 	beq.w	80089d2 <_printf_float+0xb6>
 8008bb8:	f04f 0a00 	mov.w	sl, #0
 8008bbc:	f104 0b1a 	add.w	fp, r4, #26
 8008bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc2:	425b      	negs	r3, r3
 8008bc4:	4553      	cmp	r3, sl
 8008bc6:	dc01      	bgt.n	8008bcc <_printf_float+0x2b0>
 8008bc8:	464b      	mov	r3, r9
 8008bca:	e793      	b.n	8008af4 <_printf_float+0x1d8>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	465a      	mov	r2, fp
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f aefb 	beq.w	80089d2 <_printf_float+0xb6>
 8008bdc:	f10a 0a01 	add.w	sl, sl, #1
 8008be0:	e7ee      	b.n	8008bc0 <_printf_float+0x2a4>
 8008be2:	bf00      	nop
 8008be4:	7fefffff 	.word	0x7fefffff
 8008be8:	0800f830 	.word	0x0800f830
 8008bec:	0800f834 	.word	0x0800f834
 8008bf0:	0800f838 	.word	0x0800f838
 8008bf4:	0800f83c 	.word	0x0800f83c
 8008bf8:	0800f840 	.word	0x0800f840
 8008bfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c02:	4553      	cmp	r3, sl
 8008c04:	bfa8      	it	ge
 8008c06:	4653      	movge	r3, sl
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	4699      	mov	r9, r3
 8008c0c:	dc36      	bgt.n	8008c7c <_printf_float+0x360>
 8008c0e:	f04f 0b00 	mov.w	fp, #0
 8008c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c16:	f104 021a 	add.w	r2, r4, #26
 8008c1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c1c:	9306      	str	r3, [sp, #24]
 8008c1e:	eba3 0309 	sub.w	r3, r3, r9
 8008c22:	455b      	cmp	r3, fp
 8008c24:	dc31      	bgt.n	8008c8a <_printf_float+0x36e>
 8008c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c28:	459a      	cmp	sl, r3
 8008c2a:	dc3a      	bgt.n	8008ca2 <_printf_float+0x386>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	07da      	lsls	r2, r3, #31
 8008c30:	d437      	bmi.n	8008ca2 <_printf_float+0x386>
 8008c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c34:	ebaa 0903 	sub.w	r9, sl, r3
 8008c38:	9b06      	ldr	r3, [sp, #24]
 8008c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c3e:	4599      	cmp	r9, r3
 8008c40:	bfa8      	it	ge
 8008c42:	4699      	movge	r9, r3
 8008c44:	f1b9 0f00 	cmp.w	r9, #0
 8008c48:	dc33      	bgt.n	8008cb2 <_printf_float+0x396>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c52:	f104 0b1a 	add.w	fp, r4, #26
 8008c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c58:	ebaa 0303 	sub.w	r3, sl, r3
 8008c5c:	eba3 0309 	sub.w	r3, r3, r9
 8008c60:	4543      	cmp	r3, r8
 8008c62:	f77f af79 	ble.w	8008b58 <_printf_float+0x23c>
 8008c66:	2301      	movs	r3, #1
 8008c68:	465a      	mov	r2, fp
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	f43f aeae 	beq.w	80089d2 <_printf_float+0xb6>
 8008c76:	f108 0801 	add.w	r8, r8, #1
 8008c7a:	e7ec      	b.n	8008c56 <_printf_float+0x33a>
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	d1c2      	bne.n	8008c0e <_printf_float+0x2f2>
 8008c88:	e6a3      	b.n	80089d2 <_printf_float+0xb6>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	9206      	str	r2, [sp, #24]
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f ae9c 	beq.w	80089d2 <_printf_float+0xb6>
 8008c9a:	9a06      	ldr	r2, [sp, #24]
 8008c9c:	f10b 0b01 	add.w	fp, fp, #1
 8008ca0:	e7bb      	b.n	8008c1a <_printf_float+0x2fe>
 8008ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1c0      	bne.n	8008c32 <_printf_float+0x316>
 8008cb0:	e68f      	b.n	80089d2 <_printf_float+0xb6>
 8008cb2:	9a06      	ldr	r2, [sp, #24]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	4442      	add	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d1c3      	bne.n	8008c4a <_printf_float+0x32e>
 8008cc2:	e686      	b.n	80089d2 <_printf_float+0xb6>
 8008cc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cc8:	f1ba 0f01 	cmp.w	sl, #1
 8008ccc:	dc01      	bgt.n	8008cd2 <_printf_float+0x3b6>
 8008cce:	07db      	lsls	r3, r3, #31
 8008cd0:	d536      	bpl.n	8008d40 <_printf_float+0x424>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f43f ae78 	beq.w	80089d2 <_printf_float+0xb6>
 8008ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	47b8      	blx	r7
 8008cec:	3001      	adds	r0, #1
 8008cee:	f43f ae70 	beq.w	80089d2 <_printf_float+0xb6>
 8008cf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cfe:	f7f7 fef3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d02:	b9c0      	cbnz	r0, 8008d36 <_printf_float+0x41a>
 8008d04:	4653      	mov	r3, sl
 8008d06:	f108 0201 	add.w	r2, r8, #1
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b8      	blx	r7
 8008d10:	3001      	adds	r0, #1
 8008d12:	d10c      	bne.n	8008d2e <_printf_float+0x412>
 8008d14:	e65d      	b.n	80089d2 <_printf_float+0xb6>
 8008d16:	2301      	movs	r3, #1
 8008d18:	465a      	mov	r2, fp
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f ae56 	beq.w	80089d2 <_printf_float+0xb6>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	45d0      	cmp	r8, sl
 8008d2c:	dbf3      	blt.n	8008d16 <_printf_float+0x3fa>
 8008d2e:	464b      	mov	r3, r9
 8008d30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d34:	e6df      	b.n	8008af6 <_printf_float+0x1da>
 8008d36:	f04f 0800 	mov.w	r8, #0
 8008d3a:	f104 0b1a 	add.w	fp, r4, #26
 8008d3e:	e7f4      	b.n	8008d2a <_printf_float+0x40e>
 8008d40:	2301      	movs	r3, #1
 8008d42:	4642      	mov	r2, r8
 8008d44:	e7e1      	b.n	8008d0a <_printf_float+0x3ee>
 8008d46:	2301      	movs	r3, #1
 8008d48:	464a      	mov	r2, r9
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae3e 	beq.w	80089d2 <_printf_float+0xb6>
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	4543      	cmp	r3, r8
 8008d62:	dcf0      	bgt.n	8008d46 <_printf_float+0x42a>
 8008d64:	e6fc      	b.n	8008b60 <_printf_float+0x244>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 0919 	add.w	r9, r4, #25
 8008d6e:	e7f4      	b.n	8008d5a <_printf_float+0x43e>

08008d70 <_printf_common>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	4616      	mov	r6, r2
 8008d76:	4698      	mov	r8, r3
 8008d78:	688a      	ldr	r2, [r1, #8]
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bfb8      	it	lt
 8008d84:	4613      	movlt	r3, r2
 8008d86:	6033      	str	r3, [r6, #0]
 8008d88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b10a      	cbz	r2, 8008d96 <_printf_common+0x26>
 8008d92:	3301      	adds	r3, #1
 8008d94:	6033      	str	r3, [r6, #0]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	0699      	lsls	r1, r3, #26
 8008d9a:	bf42      	ittt	mi
 8008d9c:	6833      	ldrmi	r3, [r6, #0]
 8008d9e:	3302      	addmi	r3, #2
 8008da0:	6033      	strmi	r3, [r6, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	f015 0506 	ands.w	r5, r5, #6
 8008da8:	d106      	bne.n	8008db8 <_printf_common+0x48>
 8008daa:	f104 0a19 	add.w	sl, r4, #25
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	6832      	ldr	r2, [r6, #0]
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	42ab      	cmp	r3, r5
 8008db6:	dc26      	bgt.n	8008e06 <_printf_common+0x96>
 8008db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	3b00      	subs	r3, #0
 8008dc0:	bf18      	it	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	0692      	lsls	r2, r2, #26
 8008dc6:	d42b      	bmi.n	8008e20 <_printf_common+0xb0>
 8008dc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dcc:	4641      	mov	r1, r8
 8008dce:	4638      	mov	r0, r7
 8008dd0:	47c8      	blx	r9
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d01e      	beq.n	8008e14 <_printf_common+0xa4>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	f003 0306 	and.w	r3, r3, #6
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	bf02      	ittt	eq
 8008de2:	68e5      	ldreq	r5, [r4, #12]
 8008de4:	6833      	ldreq	r3, [r6, #0]
 8008de6:	1aed      	subeq	r5, r5, r3
 8008de8:	68a3      	ldr	r3, [r4, #8]
 8008dea:	bf0c      	ite	eq
 8008dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df0:	2500      	movne	r5, #0
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bfc4      	itt	gt
 8008df6:	1a9b      	subgt	r3, r3, r2
 8008df8:	18ed      	addgt	r5, r5, r3
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	341a      	adds	r4, #26
 8008dfe:	42b5      	cmp	r5, r6
 8008e00:	d11a      	bne.n	8008e38 <_printf_common+0xc8>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e008      	b.n	8008e18 <_printf_common+0xa8>
 8008e06:	2301      	movs	r3, #1
 8008e08:	4652      	mov	r2, sl
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	47c8      	blx	r9
 8008e10:	3001      	adds	r0, #1
 8008e12:	d103      	bne.n	8008e1c <_printf_common+0xac>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	e7c6      	b.n	8008dae <_printf_common+0x3e>
 8008e20:	18e1      	adds	r1, r4, r3
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	2030      	movs	r0, #48	@ 0x30
 8008e26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e2a:	4422      	add	r2, r4
 8008e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e34:	3302      	adds	r3, #2
 8008e36:	e7c7      	b.n	8008dc8 <_printf_common+0x58>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	4638      	mov	r0, r7
 8008e40:	47c8      	blx	r9
 8008e42:	3001      	adds	r0, #1
 8008e44:	d0e6      	beq.n	8008e14 <_printf_common+0xa4>
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7d9      	b.n	8008dfe <_printf_common+0x8e>
	...

08008e4c <_printf_i>:
 8008e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	7e0f      	ldrb	r7, [r1, #24]
 8008e52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e54:	2f78      	cmp	r7, #120	@ 0x78
 8008e56:	4691      	mov	r9, r2
 8008e58:	4680      	mov	r8, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	469a      	mov	sl, r3
 8008e5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e62:	d807      	bhi.n	8008e74 <_printf_i+0x28>
 8008e64:	2f62      	cmp	r7, #98	@ 0x62
 8008e66:	d80a      	bhi.n	8008e7e <_printf_i+0x32>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	f000 80d2 	beq.w	8009012 <_printf_i+0x1c6>
 8008e6e:	2f58      	cmp	r7, #88	@ 0x58
 8008e70:	f000 80b9 	beq.w	8008fe6 <_printf_i+0x19a>
 8008e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e7c:	e03a      	b.n	8008ef4 <_printf_i+0xa8>
 8008e7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e82:	2b15      	cmp	r3, #21
 8008e84:	d8f6      	bhi.n	8008e74 <_printf_i+0x28>
 8008e86:	a101      	add	r1, pc, #4	@ (adr r1, 8008e8c <_printf_i+0x40>)
 8008e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e8c:	08008ee5 	.word	0x08008ee5
 8008e90:	08008ef9 	.word	0x08008ef9
 8008e94:	08008e75 	.word	0x08008e75
 8008e98:	08008e75 	.word	0x08008e75
 8008e9c:	08008e75 	.word	0x08008e75
 8008ea0:	08008e75 	.word	0x08008e75
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008e75 	.word	0x08008e75
 8008eac:	08008e75 	.word	0x08008e75
 8008eb0:	08008e75 	.word	0x08008e75
 8008eb4:	08008e75 	.word	0x08008e75
 8008eb8:	08008ff9 	.word	0x08008ff9
 8008ebc:	08008f23 	.word	0x08008f23
 8008ec0:	08008fb3 	.word	0x08008fb3
 8008ec4:	08008e75 	.word	0x08008e75
 8008ec8:	08008e75 	.word	0x08008e75
 8008ecc:	0800901b 	.word	0x0800901b
 8008ed0:	08008e75 	.word	0x08008e75
 8008ed4:	08008f23 	.word	0x08008f23
 8008ed8:	08008e75 	.word	0x08008e75
 8008edc:	08008e75 	.word	0x08008e75
 8008ee0:	08008fbb 	.word	0x08008fbb
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	1d1a      	adds	r2, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6032      	str	r2, [r6, #0]
 8008eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e09d      	b.n	8009034 <_printf_i+0x1e8>
 8008ef8:	6833      	ldr	r3, [r6, #0]
 8008efa:	6820      	ldr	r0, [r4, #0]
 8008efc:	1d19      	adds	r1, r3, #4
 8008efe:	6031      	str	r1, [r6, #0]
 8008f00:	0606      	lsls	r6, r0, #24
 8008f02:	d501      	bpl.n	8008f08 <_printf_i+0xbc>
 8008f04:	681d      	ldr	r5, [r3, #0]
 8008f06:	e003      	b.n	8008f10 <_printf_i+0xc4>
 8008f08:	0645      	lsls	r5, r0, #25
 8008f0a:	d5fb      	bpl.n	8008f04 <_printf_i+0xb8>
 8008f0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	da03      	bge.n	8008f1c <_printf_i+0xd0>
 8008f14:	232d      	movs	r3, #45	@ 0x2d
 8008f16:	426d      	negs	r5, r5
 8008f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f1c:	4859      	ldr	r0, [pc, #356]	@ (8009084 <_printf_i+0x238>)
 8008f1e:	230a      	movs	r3, #10
 8008f20:	e011      	b.n	8008f46 <_printf_i+0xfa>
 8008f22:	6821      	ldr	r1, [r4, #0]
 8008f24:	6833      	ldr	r3, [r6, #0]
 8008f26:	0608      	lsls	r0, r1, #24
 8008f28:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f2c:	d402      	bmi.n	8008f34 <_printf_i+0xe8>
 8008f2e:	0649      	lsls	r1, r1, #25
 8008f30:	bf48      	it	mi
 8008f32:	b2ad      	uxthmi	r5, r5
 8008f34:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f36:	4853      	ldr	r0, [pc, #332]	@ (8009084 <_printf_i+0x238>)
 8008f38:	6033      	str	r3, [r6, #0]
 8008f3a:	bf14      	ite	ne
 8008f3c:	230a      	movne	r3, #10
 8008f3e:	2308      	moveq	r3, #8
 8008f40:	2100      	movs	r1, #0
 8008f42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f46:	6866      	ldr	r6, [r4, #4]
 8008f48:	60a6      	str	r6, [r4, #8]
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	bfa2      	ittt	ge
 8008f4e:	6821      	ldrge	r1, [r4, #0]
 8008f50:	f021 0104 	bicge.w	r1, r1, #4
 8008f54:	6021      	strge	r1, [r4, #0]
 8008f56:	b90d      	cbnz	r5, 8008f5c <_printf_i+0x110>
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	d04b      	beq.n	8008ff4 <_printf_i+0x1a8>
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f62:	fb03 5711 	mls	r7, r3, r1, r5
 8008f66:	5dc7      	ldrb	r7, [r0, r7]
 8008f68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f6c:	462f      	mov	r7, r5
 8008f6e:	42bb      	cmp	r3, r7
 8008f70:	460d      	mov	r5, r1
 8008f72:	d9f4      	bls.n	8008f5e <_printf_i+0x112>
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d10b      	bne.n	8008f90 <_printf_i+0x144>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	07df      	lsls	r7, r3, #31
 8008f7c:	d508      	bpl.n	8008f90 <_printf_i+0x144>
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	6861      	ldr	r1, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	bfde      	ittt	le
 8008f86:	2330      	movle	r3, #48	@ 0x30
 8008f88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f90:	1b92      	subs	r2, r2, r6
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	f8cd a000 	str.w	sl, [sp]
 8008f98:	464b      	mov	r3, r9
 8008f9a:	aa03      	add	r2, sp, #12
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7ff fee6 	bl	8008d70 <_printf_common>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d14a      	bne.n	800903e <_printf_i+0x1f2>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b004      	add	sp, #16
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f043 0320 	orr.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	4833      	ldr	r0, [pc, #204]	@ (8009088 <_printf_i+0x23c>)
 8008fbc:	2778      	movs	r7, #120	@ 0x78
 8008fbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6831      	ldr	r1, [r6, #0]
 8008fc6:	061f      	lsls	r7, r3, #24
 8008fc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fcc:	d402      	bmi.n	8008fd4 <_printf_i+0x188>
 8008fce:	065f      	lsls	r7, r3, #25
 8008fd0:	bf48      	it	mi
 8008fd2:	b2ad      	uxthmi	r5, r5
 8008fd4:	6031      	str	r1, [r6, #0]
 8008fd6:	07d9      	lsls	r1, r3, #31
 8008fd8:	bf44      	itt	mi
 8008fda:	f043 0320 	orrmi.w	r3, r3, #32
 8008fde:	6023      	strmi	r3, [r4, #0]
 8008fe0:	b11d      	cbz	r5, 8008fea <_printf_i+0x19e>
 8008fe2:	2310      	movs	r3, #16
 8008fe4:	e7ac      	b.n	8008f40 <_printf_i+0xf4>
 8008fe6:	4827      	ldr	r0, [pc, #156]	@ (8009084 <_printf_i+0x238>)
 8008fe8:	e7e9      	b.n	8008fbe <_printf_i+0x172>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f023 0320 	bic.w	r3, r3, #32
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	e7f6      	b.n	8008fe2 <_printf_i+0x196>
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	e7bd      	b.n	8008f74 <_printf_i+0x128>
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	6825      	ldr	r5, [r4, #0]
 8008ffc:	6961      	ldr	r1, [r4, #20]
 8008ffe:	1d18      	adds	r0, r3, #4
 8009000:	6030      	str	r0, [r6, #0]
 8009002:	062e      	lsls	r6, r5, #24
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	d501      	bpl.n	800900c <_printf_i+0x1c0>
 8009008:	6019      	str	r1, [r3, #0]
 800900a:	e002      	b.n	8009012 <_printf_i+0x1c6>
 800900c:	0668      	lsls	r0, r5, #25
 800900e:	d5fb      	bpl.n	8009008 <_printf_i+0x1bc>
 8009010:	8019      	strh	r1, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	4616      	mov	r6, r2
 8009018:	e7bc      	b.n	8008f94 <_printf_i+0x148>
 800901a:	6833      	ldr	r3, [r6, #0]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	6032      	str	r2, [r6, #0]
 8009020:	681e      	ldr	r6, [r3, #0]
 8009022:	6862      	ldr	r2, [r4, #4]
 8009024:	2100      	movs	r1, #0
 8009026:	4630      	mov	r0, r6
 8009028:	f7f7 f8e2 	bl	80001f0 <memchr>
 800902c:	b108      	cbz	r0, 8009032 <_printf_i+0x1e6>
 800902e:	1b80      	subs	r0, r0, r6
 8009030:	6060      	str	r0, [r4, #4]
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	2300      	movs	r3, #0
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800903c:	e7aa      	b.n	8008f94 <_printf_i+0x148>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	4632      	mov	r2, r6
 8009042:	4649      	mov	r1, r9
 8009044:	4640      	mov	r0, r8
 8009046:	47d0      	blx	sl
 8009048:	3001      	adds	r0, #1
 800904a:	d0ad      	beq.n	8008fa8 <_printf_i+0x15c>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	079b      	lsls	r3, r3, #30
 8009050:	d413      	bmi.n	800907a <_printf_i+0x22e>
 8009052:	68e0      	ldr	r0, [r4, #12]
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	4298      	cmp	r0, r3
 8009058:	bfb8      	it	lt
 800905a:	4618      	movlt	r0, r3
 800905c:	e7a6      	b.n	8008fac <_printf_i+0x160>
 800905e:	2301      	movs	r3, #1
 8009060:	4632      	mov	r2, r6
 8009062:	4649      	mov	r1, r9
 8009064:	4640      	mov	r0, r8
 8009066:	47d0      	blx	sl
 8009068:	3001      	adds	r0, #1
 800906a:	d09d      	beq.n	8008fa8 <_printf_i+0x15c>
 800906c:	3501      	adds	r5, #1
 800906e:	68e3      	ldr	r3, [r4, #12]
 8009070:	9903      	ldr	r1, [sp, #12]
 8009072:	1a5b      	subs	r3, r3, r1
 8009074:	42ab      	cmp	r3, r5
 8009076:	dcf2      	bgt.n	800905e <_printf_i+0x212>
 8009078:	e7eb      	b.n	8009052 <_printf_i+0x206>
 800907a:	2500      	movs	r5, #0
 800907c:	f104 0619 	add.w	r6, r4, #25
 8009080:	e7f5      	b.n	800906e <_printf_i+0x222>
 8009082:	bf00      	nop
 8009084:	0800f842 	.word	0x0800f842
 8009088:	0800f853 	.word	0x0800f853

0800908c <std>:
 800908c:	2300      	movs	r3, #0
 800908e:	b510      	push	{r4, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	e9c0 3300 	strd	r3, r3, [r0]
 8009096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800909a:	6083      	str	r3, [r0, #8]
 800909c:	8181      	strh	r1, [r0, #12]
 800909e:	6643      	str	r3, [r0, #100]	@ 0x64
 80090a0:	81c2      	strh	r2, [r0, #14]
 80090a2:	6183      	str	r3, [r0, #24]
 80090a4:	4619      	mov	r1, r3
 80090a6:	2208      	movs	r2, #8
 80090a8:	305c      	adds	r0, #92	@ 0x5c
 80090aa:	f000 f914 	bl	80092d6 <memset>
 80090ae:	4b0d      	ldr	r3, [pc, #52]	@ (80090e4 <std+0x58>)
 80090b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80090b2:	4b0d      	ldr	r3, [pc, #52]	@ (80090e8 <std+0x5c>)
 80090b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090b6:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <std+0x60>)
 80090b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090ba:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <std+0x64>)
 80090bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80090be:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <std+0x68>)
 80090c0:	6224      	str	r4, [r4, #32]
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d006      	beq.n	80090d4 <std+0x48>
 80090c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090ca:	4294      	cmp	r4, r2
 80090cc:	d002      	beq.n	80090d4 <std+0x48>
 80090ce:	33d0      	adds	r3, #208	@ 0xd0
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d105      	bne.n	80090e0 <std+0x54>
 80090d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090dc:	f000 b988 	b.w	80093f0 <__retarget_lock_init_recursive>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	08009251 	.word	0x08009251
 80090e8:	08009273 	.word	0x08009273
 80090ec:	080092ab 	.word	0x080092ab
 80090f0:	080092cf 	.word	0x080092cf
 80090f4:	20000b60 	.word	0x20000b60

080090f8 <stdio_exit_handler>:
 80090f8:	4a02      	ldr	r2, [pc, #8]	@ (8009104 <stdio_exit_handler+0xc>)
 80090fa:	4903      	ldr	r1, [pc, #12]	@ (8009108 <stdio_exit_handler+0x10>)
 80090fc:	4803      	ldr	r0, [pc, #12]	@ (800910c <stdio_exit_handler+0x14>)
 80090fe:	f000 b869 	b.w	80091d4 <_fwalk_sglue>
 8009102:	bf00      	nop
 8009104:	20000164 	.word	0x20000164
 8009108:	0800ac01 	.word	0x0800ac01
 800910c:	20000174 	.word	0x20000174

08009110 <cleanup_stdio>:
 8009110:	6841      	ldr	r1, [r0, #4]
 8009112:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <cleanup_stdio+0x34>)
 8009114:	4299      	cmp	r1, r3
 8009116:	b510      	push	{r4, lr}
 8009118:	4604      	mov	r4, r0
 800911a:	d001      	beq.n	8009120 <cleanup_stdio+0x10>
 800911c:	f001 fd70 	bl	800ac00 <_fflush_r>
 8009120:	68a1      	ldr	r1, [r4, #8]
 8009122:	4b09      	ldr	r3, [pc, #36]	@ (8009148 <cleanup_stdio+0x38>)
 8009124:	4299      	cmp	r1, r3
 8009126:	d002      	beq.n	800912e <cleanup_stdio+0x1e>
 8009128:	4620      	mov	r0, r4
 800912a:	f001 fd69 	bl	800ac00 <_fflush_r>
 800912e:	68e1      	ldr	r1, [r4, #12]
 8009130:	4b06      	ldr	r3, [pc, #24]	@ (800914c <cleanup_stdio+0x3c>)
 8009132:	4299      	cmp	r1, r3
 8009134:	d004      	beq.n	8009140 <cleanup_stdio+0x30>
 8009136:	4620      	mov	r0, r4
 8009138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800913c:	f001 bd60 	b.w	800ac00 <_fflush_r>
 8009140:	bd10      	pop	{r4, pc}
 8009142:	bf00      	nop
 8009144:	20000b60 	.word	0x20000b60
 8009148:	20000bc8 	.word	0x20000bc8
 800914c:	20000c30 	.word	0x20000c30

08009150 <global_stdio_init.part.0>:
 8009150:	b510      	push	{r4, lr}
 8009152:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <global_stdio_init.part.0+0x30>)
 8009154:	4c0b      	ldr	r4, [pc, #44]	@ (8009184 <global_stdio_init.part.0+0x34>)
 8009156:	4a0c      	ldr	r2, [pc, #48]	@ (8009188 <global_stdio_init.part.0+0x38>)
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	4620      	mov	r0, r4
 800915c:	2200      	movs	r2, #0
 800915e:	2104      	movs	r1, #4
 8009160:	f7ff ff94 	bl	800908c <std>
 8009164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009168:	2201      	movs	r2, #1
 800916a:	2109      	movs	r1, #9
 800916c:	f7ff ff8e 	bl	800908c <std>
 8009170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009174:	2202      	movs	r2, #2
 8009176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917a:	2112      	movs	r1, #18
 800917c:	f7ff bf86 	b.w	800908c <std>
 8009180:	20000c98 	.word	0x20000c98
 8009184:	20000b60 	.word	0x20000b60
 8009188:	080090f9 	.word	0x080090f9

0800918c <__sfp_lock_acquire>:
 800918c:	4801      	ldr	r0, [pc, #4]	@ (8009194 <__sfp_lock_acquire+0x8>)
 800918e:	f000 b930 	b.w	80093f2 <__retarget_lock_acquire_recursive>
 8009192:	bf00      	nop
 8009194:	20000ca1 	.word	0x20000ca1

08009198 <__sfp_lock_release>:
 8009198:	4801      	ldr	r0, [pc, #4]	@ (80091a0 <__sfp_lock_release+0x8>)
 800919a:	f000 b92b 	b.w	80093f4 <__retarget_lock_release_recursive>
 800919e:	bf00      	nop
 80091a0:	20000ca1 	.word	0x20000ca1

080091a4 <__sinit>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	4604      	mov	r4, r0
 80091a8:	f7ff fff0 	bl	800918c <__sfp_lock_acquire>
 80091ac:	6a23      	ldr	r3, [r4, #32]
 80091ae:	b11b      	cbz	r3, 80091b8 <__sinit+0x14>
 80091b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b4:	f7ff bff0 	b.w	8009198 <__sfp_lock_release>
 80091b8:	4b04      	ldr	r3, [pc, #16]	@ (80091cc <__sinit+0x28>)
 80091ba:	6223      	str	r3, [r4, #32]
 80091bc:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <__sinit+0x2c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1f5      	bne.n	80091b0 <__sinit+0xc>
 80091c4:	f7ff ffc4 	bl	8009150 <global_stdio_init.part.0>
 80091c8:	e7f2      	b.n	80091b0 <__sinit+0xc>
 80091ca:	bf00      	nop
 80091cc:	08009111 	.word	0x08009111
 80091d0:	20000c98 	.word	0x20000c98

080091d4 <_fwalk_sglue>:
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	4607      	mov	r7, r0
 80091da:	4688      	mov	r8, r1
 80091dc:	4614      	mov	r4, r2
 80091de:	2600      	movs	r6, #0
 80091e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091e4:	f1b9 0901 	subs.w	r9, r9, #1
 80091e8:	d505      	bpl.n	80091f6 <_fwalk_sglue+0x22>
 80091ea:	6824      	ldr	r4, [r4, #0]
 80091ec:	2c00      	cmp	r4, #0
 80091ee:	d1f7      	bne.n	80091e0 <_fwalk_sglue+0xc>
 80091f0:	4630      	mov	r0, r6
 80091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d907      	bls.n	800920c <_fwalk_sglue+0x38>
 80091fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009200:	3301      	adds	r3, #1
 8009202:	d003      	beq.n	800920c <_fwalk_sglue+0x38>
 8009204:	4629      	mov	r1, r5
 8009206:	4638      	mov	r0, r7
 8009208:	47c0      	blx	r8
 800920a:	4306      	orrs	r6, r0
 800920c:	3568      	adds	r5, #104	@ 0x68
 800920e:	e7e9      	b.n	80091e4 <_fwalk_sglue+0x10>

08009210 <siprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b500      	push	{lr}
 8009214:	b09c      	sub	sp, #112	@ 0x70
 8009216:	ab1d      	add	r3, sp, #116	@ 0x74
 8009218:	9002      	str	r0, [sp, #8]
 800921a:	9006      	str	r0, [sp, #24]
 800921c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009220:	4809      	ldr	r0, [pc, #36]	@ (8009248 <siprintf+0x38>)
 8009222:	9107      	str	r1, [sp, #28]
 8009224:	9104      	str	r1, [sp, #16]
 8009226:	4909      	ldr	r1, [pc, #36]	@ (800924c <siprintf+0x3c>)
 8009228:	f853 2b04 	ldr.w	r2, [r3], #4
 800922c:	9105      	str	r1, [sp, #20]
 800922e:	6800      	ldr	r0, [r0, #0]
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	a902      	add	r1, sp, #8
 8009234:	f001 fb64 	bl	800a900 <_svfiprintf_r>
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	b01c      	add	sp, #112	@ 0x70
 8009240:	f85d eb04 	ldr.w	lr, [sp], #4
 8009244:	b003      	add	sp, #12
 8009246:	4770      	bx	lr
 8009248:	20000170 	.word	0x20000170
 800924c:	ffff0208 	.word	0xffff0208

08009250 <__sread>:
 8009250:	b510      	push	{r4, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	f000 f86c 	bl	8009334 <_read_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	bfab      	itete	ge
 8009260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009262:	89a3      	ldrhlt	r3, [r4, #12]
 8009264:	181b      	addge	r3, r3, r0
 8009266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800926a:	bfac      	ite	ge
 800926c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800926e:	81a3      	strhlt	r3, [r4, #12]
 8009270:	bd10      	pop	{r4, pc}

08009272 <__swrite>:
 8009272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	461f      	mov	r7, r3
 8009278:	898b      	ldrh	r3, [r1, #12]
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	4605      	mov	r5, r0
 800927e:	460c      	mov	r4, r1
 8009280:	4616      	mov	r6, r2
 8009282:	d505      	bpl.n	8009290 <__swrite+0x1e>
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2302      	movs	r3, #2
 800928a:	2200      	movs	r2, #0
 800928c:	f000 f840 	bl	8009310 <_lseek_r>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	4628      	mov	r0, r5
 80092a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a6:	f000 b867 	b.w	8009378 <_write_r>

080092aa <__sseek>:
 80092aa:	b510      	push	{r4, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b2:	f000 f82d 	bl	8009310 <_lseek_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	bf15      	itete	ne
 80092bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092c6:	81a3      	strheq	r3, [r4, #12]
 80092c8:	bf18      	it	ne
 80092ca:	81a3      	strhne	r3, [r4, #12]
 80092cc:	bd10      	pop	{r4, pc}

080092ce <__sclose>:
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 b80d 	b.w	80092f0 <_close_r>

080092d6 <memset>:
 80092d6:	4402      	add	r2, r0
 80092d8:	4603      	mov	r3, r0
 80092da:	4293      	cmp	r3, r2
 80092dc:	d100      	bne.n	80092e0 <memset+0xa>
 80092de:	4770      	bx	lr
 80092e0:	f803 1b01 	strb.w	r1, [r3], #1
 80092e4:	e7f9      	b.n	80092da <memset+0x4>
	...

080092e8 <_localeconv_r>:
 80092e8:	4800      	ldr	r0, [pc, #0]	@ (80092ec <_localeconv_r+0x4>)
 80092ea:	4770      	bx	lr
 80092ec:	200002b0 	.word	0x200002b0

080092f0 <_close_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d06      	ldr	r5, [pc, #24]	@ (800930c <_close_r+0x1c>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7fb faf8 	bl	80048f0 <_close>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_close_r+0x1a>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_close_r+0x1a>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000c9c 	.word	0x20000c9c

08009310 <_lseek_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d07      	ldr	r5, [pc, #28]	@ (8009330 <_lseek_r+0x20>)
 8009314:	4604      	mov	r4, r0
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	2200      	movs	r2, #0
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7fb fb0d 	bl	800493e <_lseek>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_lseek_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_lseek_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20000c9c 	.word	0x20000c9c

08009334 <_read_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d07      	ldr	r5, [pc, #28]	@ (8009354 <_read_r+0x20>)
 8009338:	4604      	mov	r4, r0
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	2200      	movs	r2, #0
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7fb fa9b 	bl	800487e <_read>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_read_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_read_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20000c9c 	.word	0x20000c9c

08009358 <_sbrk_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4d06      	ldr	r5, [pc, #24]	@ (8009374 <_sbrk_r+0x1c>)
 800935c:	2300      	movs	r3, #0
 800935e:	4604      	mov	r4, r0
 8009360:	4608      	mov	r0, r1
 8009362:	602b      	str	r3, [r5, #0]
 8009364:	f7fb faf8 	bl	8004958 <_sbrk>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_sbrk_r+0x1a>
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	b103      	cbz	r3, 8009372 <_sbrk_r+0x1a>
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	20000c9c 	.word	0x20000c9c

08009378 <_write_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4d07      	ldr	r5, [pc, #28]	@ (8009398 <_write_r+0x20>)
 800937c:	4604      	mov	r4, r0
 800937e:	4608      	mov	r0, r1
 8009380:	4611      	mov	r1, r2
 8009382:	2200      	movs	r2, #0
 8009384:	602a      	str	r2, [r5, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f7fb fa96 	bl	80048b8 <_write>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_write_r+0x1e>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_write_r+0x1e>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000c9c 	.word	0x20000c9c

0800939c <__errno>:
 800939c:	4b01      	ldr	r3, [pc, #4]	@ (80093a4 <__errno+0x8>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000170 	.word	0x20000170

080093a8 <__libc_init_array>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	4d0d      	ldr	r5, [pc, #52]	@ (80093e0 <__libc_init_array+0x38>)
 80093ac:	4c0d      	ldr	r4, [pc, #52]	@ (80093e4 <__libc_init_array+0x3c>)
 80093ae:	1b64      	subs	r4, r4, r5
 80093b0:	10a4      	asrs	r4, r4, #2
 80093b2:	2600      	movs	r6, #0
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	d109      	bne.n	80093cc <__libc_init_array+0x24>
 80093b8:	4d0b      	ldr	r5, [pc, #44]	@ (80093e8 <__libc_init_array+0x40>)
 80093ba:	4c0c      	ldr	r4, [pc, #48]	@ (80093ec <__libc_init_array+0x44>)
 80093bc:	f001 ffa0 	bl	800b300 <_init>
 80093c0:	1b64      	subs	r4, r4, r5
 80093c2:	10a4      	asrs	r4, r4, #2
 80093c4:	2600      	movs	r6, #0
 80093c6:	42a6      	cmp	r6, r4
 80093c8:	d105      	bne.n	80093d6 <__libc_init_array+0x2e>
 80093ca:	bd70      	pop	{r4, r5, r6, pc}
 80093cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d0:	4798      	blx	r3
 80093d2:	3601      	adds	r6, #1
 80093d4:	e7ee      	b.n	80093b4 <__libc_init_array+0xc>
 80093d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093da:	4798      	blx	r3
 80093dc:	3601      	adds	r6, #1
 80093de:	e7f2      	b.n	80093c6 <__libc_init_array+0x1e>
 80093e0:	0800fba8 	.word	0x0800fba8
 80093e4:	0800fba8 	.word	0x0800fba8
 80093e8:	0800fba8 	.word	0x0800fba8
 80093ec:	0800fbac 	.word	0x0800fbac

080093f0 <__retarget_lock_init_recursive>:
 80093f0:	4770      	bx	lr

080093f2 <__retarget_lock_acquire_recursive>:
 80093f2:	4770      	bx	lr

080093f4 <__retarget_lock_release_recursive>:
 80093f4:	4770      	bx	lr

080093f6 <memcpy>:
 80093f6:	440a      	add	r2, r1
 80093f8:	4291      	cmp	r1, r2
 80093fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80093fe:	d100      	bne.n	8009402 <memcpy+0xc>
 8009400:	4770      	bx	lr
 8009402:	b510      	push	{r4, lr}
 8009404:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940c:	4291      	cmp	r1, r2
 800940e:	d1f9      	bne.n	8009404 <memcpy+0xe>
 8009410:	bd10      	pop	{r4, pc}

08009412 <quorem>:
 8009412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009416:	6903      	ldr	r3, [r0, #16]
 8009418:	690c      	ldr	r4, [r1, #16]
 800941a:	42a3      	cmp	r3, r4
 800941c:	4607      	mov	r7, r0
 800941e:	db7e      	blt.n	800951e <quorem+0x10c>
 8009420:	3c01      	subs	r4, #1
 8009422:	f101 0814 	add.w	r8, r1, #20
 8009426:	00a3      	lsls	r3, r4, #2
 8009428:	f100 0514 	add.w	r5, r0, #20
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800943c:	3301      	adds	r3, #1
 800943e:	429a      	cmp	r2, r3
 8009440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009444:	fbb2 f6f3 	udiv	r6, r2, r3
 8009448:	d32e      	bcc.n	80094a8 <quorem+0x96>
 800944a:	f04f 0a00 	mov.w	sl, #0
 800944e:	46c4      	mov	ip, r8
 8009450:	46ae      	mov	lr, r5
 8009452:	46d3      	mov	fp, sl
 8009454:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009458:	b298      	uxth	r0, r3
 800945a:	fb06 a000 	mla	r0, r6, r0, sl
 800945e:	0c02      	lsrs	r2, r0, #16
 8009460:	0c1b      	lsrs	r3, r3, #16
 8009462:	fb06 2303 	mla	r3, r6, r3, r2
 8009466:	f8de 2000 	ldr.w	r2, [lr]
 800946a:	b280      	uxth	r0, r0
 800946c:	b292      	uxth	r2, r2
 800946e:	1a12      	subs	r2, r2, r0
 8009470:	445a      	add	r2, fp
 8009472:	f8de 0000 	ldr.w	r0, [lr]
 8009476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800947a:	b29b      	uxth	r3, r3
 800947c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009480:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009484:	b292      	uxth	r2, r2
 8009486:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800948a:	45e1      	cmp	r9, ip
 800948c:	f84e 2b04 	str.w	r2, [lr], #4
 8009490:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009494:	d2de      	bcs.n	8009454 <quorem+0x42>
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	58eb      	ldr	r3, [r5, r3]
 800949a:	b92b      	cbnz	r3, 80094a8 <quorem+0x96>
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	3b04      	subs	r3, #4
 80094a0:	429d      	cmp	r5, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	d32f      	bcc.n	8009506 <quorem+0xf4>
 80094a6:	613c      	str	r4, [r7, #16]
 80094a8:	4638      	mov	r0, r7
 80094aa:	f001 f8c5 	bl	800a638 <__mcmp>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	db25      	blt.n	80094fe <quorem+0xec>
 80094b2:	4629      	mov	r1, r5
 80094b4:	2000      	movs	r0, #0
 80094b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80094ba:	f8d1 c000 	ldr.w	ip, [r1]
 80094be:	fa1f fe82 	uxth.w	lr, r2
 80094c2:	fa1f f38c 	uxth.w	r3, ip
 80094c6:	eba3 030e 	sub.w	r3, r3, lr
 80094ca:	4403      	add	r3, r0
 80094cc:	0c12      	lsrs	r2, r2, #16
 80094ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094dc:	45c1      	cmp	r9, r8
 80094de:	f841 3b04 	str.w	r3, [r1], #4
 80094e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094e6:	d2e6      	bcs.n	80094b6 <quorem+0xa4>
 80094e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094f0:	b922      	cbnz	r2, 80094fc <quorem+0xea>
 80094f2:	3b04      	subs	r3, #4
 80094f4:	429d      	cmp	r5, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	d30b      	bcc.n	8009512 <quorem+0x100>
 80094fa:	613c      	str	r4, [r7, #16]
 80094fc:	3601      	adds	r6, #1
 80094fe:	4630      	mov	r0, r6
 8009500:	b003      	add	sp, #12
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	3b04      	subs	r3, #4
 800950a:	2a00      	cmp	r2, #0
 800950c:	d1cb      	bne.n	80094a6 <quorem+0x94>
 800950e:	3c01      	subs	r4, #1
 8009510:	e7c6      	b.n	80094a0 <quorem+0x8e>
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	3b04      	subs	r3, #4
 8009516:	2a00      	cmp	r2, #0
 8009518:	d1ef      	bne.n	80094fa <quorem+0xe8>
 800951a:	3c01      	subs	r4, #1
 800951c:	e7ea      	b.n	80094f4 <quorem+0xe2>
 800951e:	2000      	movs	r0, #0
 8009520:	e7ee      	b.n	8009500 <quorem+0xee>
 8009522:	0000      	movs	r0, r0
 8009524:	0000      	movs	r0, r0
	...

08009528 <_dtoa_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	69c7      	ldr	r7, [r0, #28]
 800952e:	b099      	sub	sp, #100	@ 0x64
 8009530:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009534:	ec55 4b10 	vmov	r4, r5, d0
 8009538:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800953a:	9109      	str	r1, [sp, #36]	@ 0x24
 800953c:	4683      	mov	fp, r0
 800953e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009540:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009542:	b97f      	cbnz	r7, 8009564 <_dtoa_r+0x3c>
 8009544:	2010      	movs	r0, #16
 8009546:	f7ff f893 	bl	8008670 <malloc>
 800954a:	4602      	mov	r2, r0
 800954c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009550:	b920      	cbnz	r0, 800955c <_dtoa_r+0x34>
 8009552:	4ba7      	ldr	r3, [pc, #668]	@ (80097f0 <_dtoa_r+0x2c8>)
 8009554:	21ef      	movs	r1, #239	@ 0xef
 8009556:	48a7      	ldr	r0, [pc, #668]	@ (80097f4 <_dtoa_r+0x2cc>)
 8009558:	f001 fb94 	bl	800ac84 <__assert_func>
 800955c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009560:	6007      	str	r7, [r0, #0]
 8009562:	60c7      	str	r7, [r0, #12]
 8009564:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009568:	6819      	ldr	r1, [r3, #0]
 800956a:	b159      	cbz	r1, 8009584 <_dtoa_r+0x5c>
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	604a      	str	r2, [r1, #4]
 8009570:	2301      	movs	r3, #1
 8009572:	4093      	lsls	r3, r2
 8009574:	608b      	str	r3, [r1, #8]
 8009576:	4658      	mov	r0, fp
 8009578:	f000 fe24 	bl	800a1c4 <_Bfree>
 800957c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	1e2b      	subs	r3, r5, #0
 8009586:	bfb9      	ittee	lt
 8009588:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800958c:	9303      	strlt	r3, [sp, #12]
 800958e:	2300      	movge	r3, #0
 8009590:	6033      	strge	r3, [r6, #0]
 8009592:	9f03      	ldr	r7, [sp, #12]
 8009594:	4b98      	ldr	r3, [pc, #608]	@ (80097f8 <_dtoa_r+0x2d0>)
 8009596:	bfbc      	itt	lt
 8009598:	2201      	movlt	r2, #1
 800959a:	6032      	strlt	r2, [r6, #0]
 800959c:	43bb      	bics	r3, r7
 800959e:	d112      	bne.n	80095c6 <_dtoa_r+0x9e>
 80095a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095ac:	4323      	orrs	r3, r4
 80095ae:	f000 854d 	beq.w	800a04c <_dtoa_r+0xb24>
 80095b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800980c <_dtoa_r+0x2e4>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 854f 	beq.w	800a05c <_dtoa_r+0xb34>
 80095be:	f10a 0303 	add.w	r3, sl, #3
 80095c2:	f000 bd49 	b.w	800a058 <_dtoa_r+0xb30>
 80095c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095ca:	2200      	movs	r2, #0
 80095cc:	ec51 0b17 	vmov	r0, r1, d7
 80095d0:	2300      	movs	r3, #0
 80095d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095d6:	f7f7 fa87 	bl	8000ae8 <__aeabi_dcmpeq>
 80095da:	4680      	mov	r8, r0
 80095dc:	b158      	cbz	r0, 80095f6 <_dtoa_r+0xce>
 80095de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095e0:	2301      	movs	r3, #1
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095e6:	b113      	cbz	r3, 80095ee <_dtoa_r+0xc6>
 80095e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095ea:	4b84      	ldr	r3, [pc, #528]	@ (80097fc <_dtoa_r+0x2d4>)
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009810 <_dtoa_r+0x2e8>
 80095f2:	f000 bd33 	b.w	800a05c <_dtoa_r+0xb34>
 80095f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80095fa:	aa16      	add	r2, sp, #88	@ 0x58
 80095fc:	a917      	add	r1, sp, #92	@ 0x5c
 80095fe:	4658      	mov	r0, fp
 8009600:	f001 f8ca 	bl	800a798 <__d2b>
 8009604:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009608:	4681      	mov	r9, r0
 800960a:	2e00      	cmp	r6, #0
 800960c:	d077      	beq.n	80096fe <_dtoa_r+0x1d6>
 800960e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009610:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800961c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009620:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009624:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009628:	4619      	mov	r1, r3
 800962a:	2200      	movs	r2, #0
 800962c:	4b74      	ldr	r3, [pc, #464]	@ (8009800 <_dtoa_r+0x2d8>)
 800962e:	f7f6 fe3b 	bl	80002a8 <__aeabi_dsub>
 8009632:	a369      	add	r3, pc, #420	@ (adr r3, 80097d8 <_dtoa_r+0x2b0>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 ffee 	bl	8000618 <__aeabi_dmul>
 800963c:	a368      	add	r3, pc, #416	@ (adr r3, 80097e0 <_dtoa_r+0x2b8>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f6 fe33 	bl	80002ac <__adddf3>
 8009646:	4604      	mov	r4, r0
 8009648:	4630      	mov	r0, r6
 800964a:	460d      	mov	r5, r1
 800964c:	f7f6 ff7a 	bl	8000544 <__aeabi_i2d>
 8009650:	a365      	add	r3, pc, #404	@ (adr r3, 80097e8 <_dtoa_r+0x2c0>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 ffdf 	bl	8000618 <__aeabi_dmul>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f6 fe23 	bl	80002ac <__adddf3>
 8009666:	4604      	mov	r4, r0
 8009668:	460d      	mov	r5, r1
 800966a:	f7f7 fa85 	bl	8000b78 <__aeabi_d2iz>
 800966e:	2200      	movs	r2, #0
 8009670:	4607      	mov	r7, r0
 8009672:	2300      	movs	r3, #0
 8009674:	4620      	mov	r0, r4
 8009676:	4629      	mov	r1, r5
 8009678:	f7f7 fa40 	bl	8000afc <__aeabi_dcmplt>
 800967c:	b140      	cbz	r0, 8009690 <_dtoa_r+0x168>
 800967e:	4638      	mov	r0, r7
 8009680:	f7f6 ff60 	bl	8000544 <__aeabi_i2d>
 8009684:	4622      	mov	r2, r4
 8009686:	462b      	mov	r3, r5
 8009688:	f7f7 fa2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800968c:	b900      	cbnz	r0, 8009690 <_dtoa_r+0x168>
 800968e:	3f01      	subs	r7, #1
 8009690:	2f16      	cmp	r7, #22
 8009692:	d851      	bhi.n	8009738 <_dtoa_r+0x210>
 8009694:	4b5b      	ldr	r3, [pc, #364]	@ (8009804 <_dtoa_r+0x2dc>)
 8009696:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096a2:	f7f7 fa2b 	bl	8000afc <__aeabi_dcmplt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d048      	beq.n	800973c <_dtoa_r+0x214>
 80096aa:	3f01      	subs	r7, #1
 80096ac:	2300      	movs	r3, #0
 80096ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80096b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	bf44      	itt	mi
 80096b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80096bc:	2300      	movmi	r3, #0
 80096be:	9208      	str	r2, [sp, #32]
 80096c0:	bf54      	ite	pl
 80096c2:	f04f 0800 	movpl.w	r8, #0
 80096c6:	9308      	strmi	r3, [sp, #32]
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	db39      	blt.n	8009740 <_dtoa_r+0x218>
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096d0:	443b      	add	r3, r7
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	2300      	movs	r3, #0
 80096d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096da:	2b09      	cmp	r3, #9
 80096dc:	d864      	bhi.n	80097a8 <_dtoa_r+0x280>
 80096de:	2b05      	cmp	r3, #5
 80096e0:	bfc4      	itt	gt
 80096e2:	3b04      	subgt	r3, #4
 80096e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80096e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e8:	f1a3 0302 	sub.w	r3, r3, #2
 80096ec:	bfcc      	ite	gt
 80096ee:	2400      	movgt	r4, #0
 80096f0:	2401      	movle	r4, #1
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d863      	bhi.n	80097be <_dtoa_r+0x296>
 80096f6:	e8df f003 	tbb	[pc, r3]
 80096fa:	372a      	.short	0x372a
 80096fc:	5535      	.short	0x5535
 80096fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009702:	441e      	add	r6, r3
 8009704:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009708:	2b20      	cmp	r3, #32
 800970a:	bfc1      	itttt	gt
 800970c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009710:	409f      	lslgt	r7, r3
 8009712:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009716:	fa24 f303 	lsrgt.w	r3, r4, r3
 800971a:	bfd6      	itet	le
 800971c:	f1c3 0320 	rsble	r3, r3, #32
 8009720:	ea47 0003 	orrgt.w	r0, r7, r3
 8009724:	fa04 f003 	lslle.w	r0, r4, r3
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_ui2d>
 800972c:	2201      	movs	r2, #1
 800972e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009732:	3e01      	subs	r6, #1
 8009734:	9214      	str	r2, [sp, #80]	@ 0x50
 8009736:	e777      	b.n	8009628 <_dtoa_r+0x100>
 8009738:	2301      	movs	r3, #1
 800973a:	e7b8      	b.n	80096ae <_dtoa_r+0x186>
 800973c:	9012      	str	r0, [sp, #72]	@ 0x48
 800973e:	e7b7      	b.n	80096b0 <_dtoa_r+0x188>
 8009740:	427b      	negs	r3, r7
 8009742:	930a      	str	r3, [sp, #40]	@ 0x28
 8009744:	2300      	movs	r3, #0
 8009746:	eba8 0807 	sub.w	r8, r8, r7
 800974a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800974c:	e7c4      	b.n	80096d8 <_dtoa_r+0x1b0>
 800974e:	2300      	movs	r3, #0
 8009750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc35      	bgt.n	80097c4 <_dtoa_r+0x29c>
 8009758:	2301      	movs	r3, #1
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	9307      	str	r3, [sp, #28]
 800975e:	461a      	mov	r2, r3
 8009760:	920e      	str	r2, [sp, #56]	@ 0x38
 8009762:	e00b      	b.n	800977c <_dtoa_r+0x254>
 8009764:	2301      	movs	r3, #1
 8009766:	e7f3      	b.n	8009750 <_dtoa_r+0x228>
 8009768:	2300      	movs	r3, #0
 800976a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800976c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976e:	18fb      	adds	r3, r7, r3
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	2b01      	cmp	r3, #1
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	bfb8      	it	lt
 800977a:	2301      	movlt	r3, #1
 800977c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009780:	2100      	movs	r1, #0
 8009782:	2204      	movs	r2, #4
 8009784:	f102 0514 	add.w	r5, r2, #20
 8009788:	429d      	cmp	r5, r3
 800978a:	d91f      	bls.n	80097cc <_dtoa_r+0x2a4>
 800978c:	6041      	str	r1, [r0, #4]
 800978e:	4658      	mov	r0, fp
 8009790:	f000 fcd8 	bl	800a144 <_Balloc>
 8009794:	4682      	mov	sl, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d13c      	bne.n	8009814 <_dtoa_r+0x2ec>
 800979a:	4b1b      	ldr	r3, [pc, #108]	@ (8009808 <_dtoa_r+0x2e0>)
 800979c:	4602      	mov	r2, r0
 800979e:	f240 11af 	movw	r1, #431	@ 0x1af
 80097a2:	e6d8      	b.n	8009556 <_dtoa_r+0x2e>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e7e0      	b.n	800976a <_dtoa_r+0x242>
 80097a8:	2401      	movs	r4, #1
 80097aa:	2300      	movs	r3, #0
 80097ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097b0:	f04f 33ff 	mov.w	r3, #4294967295
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	9307      	str	r3, [sp, #28]
 80097b8:	2200      	movs	r2, #0
 80097ba:	2312      	movs	r3, #18
 80097bc:	e7d0      	b.n	8009760 <_dtoa_r+0x238>
 80097be:	2301      	movs	r3, #1
 80097c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097c2:	e7f5      	b.n	80097b0 <_dtoa_r+0x288>
 80097c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	9307      	str	r3, [sp, #28]
 80097ca:	e7d7      	b.n	800977c <_dtoa_r+0x254>
 80097cc:	3101      	adds	r1, #1
 80097ce:	0052      	lsls	r2, r2, #1
 80097d0:	e7d8      	b.n	8009784 <_dtoa_r+0x25c>
 80097d2:	bf00      	nop
 80097d4:	f3af 8000 	nop.w
 80097d8:	636f4361 	.word	0x636f4361
 80097dc:	3fd287a7 	.word	0x3fd287a7
 80097e0:	8b60c8b3 	.word	0x8b60c8b3
 80097e4:	3fc68a28 	.word	0x3fc68a28
 80097e8:	509f79fb 	.word	0x509f79fb
 80097ec:	3fd34413 	.word	0x3fd34413
 80097f0:	0800f871 	.word	0x0800f871
 80097f4:	0800f888 	.word	0x0800f888
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	0800f841 	.word	0x0800f841
 8009800:	3ff80000 	.word	0x3ff80000
 8009804:	0800f980 	.word	0x0800f980
 8009808:	0800f8e0 	.word	0x0800f8e0
 800980c:	0800f86d 	.word	0x0800f86d
 8009810:	0800f840 	.word	0x0800f840
 8009814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009818:	6018      	str	r0, [r3, #0]
 800981a:	9b07      	ldr	r3, [sp, #28]
 800981c:	2b0e      	cmp	r3, #14
 800981e:	f200 80a4 	bhi.w	800996a <_dtoa_r+0x442>
 8009822:	2c00      	cmp	r4, #0
 8009824:	f000 80a1 	beq.w	800996a <_dtoa_r+0x442>
 8009828:	2f00      	cmp	r7, #0
 800982a:	dd33      	ble.n	8009894 <_dtoa_r+0x36c>
 800982c:	4bad      	ldr	r3, [pc, #692]	@ (8009ae4 <_dtoa_r+0x5bc>)
 800982e:	f007 020f 	and.w	r2, r7, #15
 8009832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009836:	ed93 7b00 	vldr	d7, [r3]
 800983a:	05f8      	lsls	r0, r7, #23
 800983c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009840:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009844:	d516      	bpl.n	8009874 <_dtoa_r+0x34c>
 8009846:	4ba8      	ldr	r3, [pc, #672]	@ (8009ae8 <_dtoa_r+0x5c0>)
 8009848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800984c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009850:	f7f7 f80c 	bl	800086c <__aeabi_ddiv>
 8009854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009858:	f004 040f 	and.w	r4, r4, #15
 800985c:	2603      	movs	r6, #3
 800985e:	4da2      	ldr	r5, [pc, #648]	@ (8009ae8 <_dtoa_r+0x5c0>)
 8009860:	b954      	cbnz	r4, 8009878 <_dtoa_r+0x350>
 8009862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986a:	f7f6 ffff 	bl	800086c <__aeabi_ddiv>
 800986e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009872:	e028      	b.n	80098c6 <_dtoa_r+0x39e>
 8009874:	2602      	movs	r6, #2
 8009876:	e7f2      	b.n	800985e <_dtoa_r+0x336>
 8009878:	07e1      	lsls	r1, r4, #31
 800987a:	d508      	bpl.n	800988e <_dtoa_r+0x366>
 800987c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009880:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009884:	f7f6 fec8 	bl	8000618 <__aeabi_dmul>
 8009888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800988c:	3601      	adds	r6, #1
 800988e:	1064      	asrs	r4, r4, #1
 8009890:	3508      	adds	r5, #8
 8009892:	e7e5      	b.n	8009860 <_dtoa_r+0x338>
 8009894:	f000 80d2 	beq.w	8009a3c <_dtoa_r+0x514>
 8009898:	427c      	negs	r4, r7
 800989a:	4b92      	ldr	r3, [pc, #584]	@ (8009ae4 <_dtoa_r+0x5bc>)
 800989c:	4d92      	ldr	r5, [pc, #584]	@ (8009ae8 <_dtoa_r+0x5c0>)
 800989e:	f004 020f 	and.w	r2, r4, #15
 80098a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ae:	f7f6 feb3 	bl	8000618 <__aeabi_dmul>
 80098b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b6:	1124      	asrs	r4, r4, #4
 80098b8:	2300      	movs	r3, #0
 80098ba:	2602      	movs	r6, #2
 80098bc:	2c00      	cmp	r4, #0
 80098be:	f040 80b2 	bne.w	8009a26 <_dtoa_r+0x4fe>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1d3      	bne.n	800986e <_dtoa_r+0x346>
 80098c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 80b7 	beq.w	8009a40 <_dtoa_r+0x518>
 80098d2:	4b86      	ldr	r3, [pc, #536]	@ (8009aec <_dtoa_r+0x5c4>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f7 f90f 	bl	8000afc <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f000 80ae 	beq.w	8009a40 <_dtoa_r+0x518>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80aa 	beq.w	8009a40 <_dtoa_r+0x518>
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd37      	ble.n	8009962 <_dtoa_r+0x43a>
 80098f2:	1e7b      	subs	r3, r7, #1
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	4620      	mov	r0, r4
 80098f8:	4b7d      	ldr	r3, [pc, #500]	@ (8009af0 <_dtoa_r+0x5c8>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f6 fe8b 	bl	8000618 <__aeabi_dmul>
 8009902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009906:	9c00      	ldr	r4, [sp, #0]
 8009908:	3601      	adds	r6, #1
 800990a:	4630      	mov	r0, r6
 800990c:	f7f6 fe1a 	bl	8000544 <__aeabi_i2d>
 8009910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009914:	f7f6 fe80 	bl	8000618 <__aeabi_dmul>
 8009918:	4b76      	ldr	r3, [pc, #472]	@ (8009af4 <_dtoa_r+0x5cc>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fcc6 	bl	80002ac <__adddf3>
 8009920:	4605      	mov	r5, r0
 8009922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009926:	2c00      	cmp	r4, #0
 8009928:	f040 808d 	bne.w	8009a46 <_dtoa_r+0x51e>
 800992c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009930:	4b71      	ldr	r3, [pc, #452]	@ (8009af8 <_dtoa_r+0x5d0>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fcb8 	bl	80002a8 <__aeabi_dsub>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009940:	462a      	mov	r2, r5
 8009942:	4633      	mov	r3, r6
 8009944:	f7f7 f8f8 	bl	8000b38 <__aeabi_dcmpgt>
 8009948:	2800      	cmp	r0, #0
 800994a:	f040 828b 	bne.w	8009e64 <_dtoa_r+0x93c>
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	462a      	mov	r2, r5
 8009954:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009958:	f7f7 f8d0 	bl	8000afc <__aeabi_dcmplt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 8128 	bne.w	8009bb2 <_dtoa_r+0x68a>
 8009962:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009966:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800996a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800996c:	2b00      	cmp	r3, #0
 800996e:	f2c0 815a 	blt.w	8009c26 <_dtoa_r+0x6fe>
 8009972:	2f0e      	cmp	r7, #14
 8009974:	f300 8157 	bgt.w	8009c26 <_dtoa_r+0x6fe>
 8009978:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae4 <_dtoa_r+0x5bc>)
 800997a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800997e:	ed93 7b00 	vldr	d7, [r3]
 8009982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	ed8d 7b00 	vstr	d7, [sp]
 800998a:	da03      	bge.n	8009994 <_dtoa_r+0x46c>
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f340 8101 	ble.w	8009b96 <_dtoa_r+0x66e>
 8009994:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009998:	4656      	mov	r6, sl
 800999a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 ff63 	bl	800086c <__aeabi_ddiv>
 80099a6:	f7f7 f8e7 	bl	8000b78 <__aeabi_d2iz>
 80099aa:	4680      	mov	r8, r0
 80099ac:	f7f6 fdca 	bl	8000544 <__aeabi_i2d>
 80099b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b4:	f7f6 fe30 	bl	8000618 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099c4:	f7f6 fc70 	bl	80002a8 <__aeabi_dsub>
 80099c8:	f806 4b01 	strb.w	r4, [r6], #1
 80099cc:	9d07      	ldr	r5, [sp, #28]
 80099ce:	eba6 040a 	sub.w	r4, r6, sl
 80099d2:	42a5      	cmp	r5, r4
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	f040 8117 	bne.w	8009c0a <_dtoa_r+0x6e2>
 80099dc:	f7f6 fc66 	bl	80002ac <__adddf3>
 80099e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	f7f7 f8a6 	bl	8000b38 <__aeabi_dcmpgt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f040 80f9 	bne.w	8009be4 <_dtoa_r+0x6bc>
 80099f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f7 f875 	bl	8000ae8 <__aeabi_dcmpeq>
 80099fe:	b118      	cbz	r0, 8009a08 <_dtoa_r+0x4e0>
 8009a00:	f018 0f01 	tst.w	r8, #1
 8009a04:	f040 80ee 	bne.w	8009be4 <_dtoa_r+0x6bc>
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4658      	mov	r0, fp
 8009a0c:	f000 fbda 	bl	800a1c4 <_Bfree>
 8009a10:	2300      	movs	r3, #0
 8009a12:	7033      	strb	r3, [r6, #0]
 8009a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a16:	3701      	adds	r7, #1
 8009a18:	601f      	str	r7, [r3, #0]
 8009a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 831d 	beq.w	800a05c <_dtoa_r+0xb34>
 8009a22:	601e      	str	r6, [r3, #0]
 8009a24:	e31a      	b.n	800a05c <_dtoa_r+0xb34>
 8009a26:	07e2      	lsls	r2, r4, #31
 8009a28:	d505      	bpl.n	8009a36 <_dtoa_r+0x50e>
 8009a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a2e:	f7f6 fdf3 	bl	8000618 <__aeabi_dmul>
 8009a32:	3601      	adds	r6, #1
 8009a34:	2301      	movs	r3, #1
 8009a36:	1064      	asrs	r4, r4, #1
 8009a38:	3508      	adds	r5, #8
 8009a3a:	e73f      	b.n	80098bc <_dtoa_r+0x394>
 8009a3c:	2602      	movs	r6, #2
 8009a3e:	e742      	b.n	80098c6 <_dtoa_r+0x39e>
 8009a40:	9c07      	ldr	r4, [sp, #28]
 8009a42:	9704      	str	r7, [sp, #16]
 8009a44:	e761      	b.n	800990a <_dtoa_r+0x3e2>
 8009a46:	4b27      	ldr	r3, [pc, #156]	@ (8009ae4 <_dtoa_r+0x5bc>)
 8009a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a52:	4454      	add	r4, sl
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d053      	beq.n	8009b00 <_dtoa_r+0x5d8>
 8009a58:	4928      	ldr	r1, [pc, #160]	@ (8009afc <_dtoa_r+0x5d4>)
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	f7f6 ff06 	bl	800086c <__aeabi_ddiv>
 8009a60:	4633      	mov	r3, r6
 8009a62:	462a      	mov	r2, r5
 8009a64:	f7f6 fc20 	bl	80002a8 <__aeabi_dsub>
 8009a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a6c:	4656      	mov	r6, sl
 8009a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a72:	f7f7 f881 	bl	8000b78 <__aeabi_d2iz>
 8009a76:	4605      	mov	r5, r0
 8009a78:	f7f6 fd64 	bl	8000544 <__aeabi_i2d>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a84:	f7f6 fc10 	bl	80002a8 <__aeabi_dsub>
 8009a88:	3530      	adds	r5, #48	@ 0x30
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a92:	f806 5b01 	strb.w	r5, [r6], #1
 8009a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a9a:	f7f7 f82f 	bl	8000afc <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d171      	bne.n	8009b86 <_dtoa_r+0x65e>
 8009aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aa6:	4911      	ldr	r1, [pc, #68]	@ (8009aec <_dtoa_r+0x5c4>)
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f7f6 fbfd 	bl	80002a8 <__aeabi_dsub>
 8009aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ab2:	f7f7 f823 	bl	8000afc <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f040 8095 	bne.w	8009be6 <_dtoa_r+0x6be>
 8009abc:	42a6      	cmp	r6, r4
 8009abe:	f43f af50 	beq.w	8009962 <_dtoa_r+0x43a>
 8009ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8009af0 <_dtoa_r+0x5c8>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f7f6 fda5 	bl	8000618 <__aeabi_dmul>
 8009ace:	4b08      	ldr	r3, [pc, #32]	@ (8009af0 <_dtoa_r+0x5c8>)
 8009ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ada:	f7f6 fd9d 	bl	8000618 <__aeabi_dmul>
 8009ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ae2:	e7c4      	b.n	8009a6e <_dtoa_r+0x546>
 8009ae4:	0800f980 	.word	0x0800f980
 8009ae8:	0800f958 	.word	0x0800f958
 8009aec:	3ff00000 	.word	0x3ff00000
 8009af0:	40240000 	.word	0x40240000
 8009af4:	401c0000 	.word	0x401c0000
 8009af8:	40140000 	.word	0x40140000
 8009afc:	3fe00000 	.word	0x3fe00000
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	f7f6 fd88 	bl	8000618 <__aeabi_dmul>
 8009b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b0e:	4656      	mov	r6, sl
 8009b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b14:	f7f7 f830 	bl	8000b78 <__aeabi_d2iz>
 8009b18:	4605      	mov	r5, r0
 8009b1a:	f7f6 fd13 	bl	8000544 <__aeabi_i2d>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b26:	f7f6 fbbf 	bl	80002a8 <__aeabi_dsub>
 8009b2a:	3530      	adds	r5, #48	@ 0x30
 8009b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	d124      	bne.n	8009b8a <_dtoa_r+0x662>
 8009b40:	4bac      	ldr	r3, [pc, #688]	@ (8009df4 <_dtoa_r+0x8cc>)
 8009b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b46:	f7f6 fbb1 	bl	80002ac <__adddf3>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b52:	f7f6 fff1 	bl	8000b38 <__aeabi_dcmpgt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d145      	bne.n	8009be6 <_dtoa_r+0x6be>
 8009b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b5e:	49a5      	ldr	r1, [pc, #660]	@ (8009df4 <_dtoa_r+0x8cc>)
 8009b60:	2000      	movs	r0, #0
 8009b62:	f7f6 fba1 	bl	80002a8 <__aeabi_dsub>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	f7f6 ffc5 	bl	8000afc <__aeabi_dcmplt>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f43f aef5 	beq.w	8009962 <_dtoa_r+0x43a>
 8009b78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b7a:	1e73      	subs	r3, r6, #1
 8009b7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b82:	2b30      	cmp	r3, #48	@ 0x30
 8009b84:	d0f8      	beq.n	8009b78 <_dtoa_r+0x650>
 8009b86:	9f04      	ldr	r7, [sp, #16]
 8009b88:	e73e      	b.n	8009a08 <_dtoa_r+0x4e0>
 8009b8a:	4b9b      	ldr	r3, [pc, #620]	@ (8009df8 <_dtoa_r+0x8d0>)
 8009b8c:	f7f6 fd44 	bl	8000618 <__aeabi_dmul>
 8009b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b94:	e7bc      	b.n	8009b10 <_dtoa_r+0x5e8>
 8009b96:	d10c      	bne.n	8009bb2 <_dtoa_r+0x68a>
 8009b98:	4b98      	ldr	r3, [pc, #608]	@ (8009dfc <_dtoa_r+0x8d4>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ba0:	f7f6 fd3a 	bl	8000618 <__aeabi_dmul>
 8009ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba8:	f7f6 ffbc 	bl	8000b24 <__aeabi_dcmpge>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f000 8157 	beq.w	8009e60 <_dtoa_r+0x938>
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	4625      	mov	r5, r4
 8009bb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	4656      	mov	r6, sl
 8009bbe:	2700      	movs	r7, #0
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4658      	mov	r0, fp
 8009bc4:	f000 fafe 	bl	800a1c4 <_Bfree>
 8009bc8:	2d00      	cmp	r5, #0
 8009bca:	d0dc      	beq.n	8009b86 <_dtoa_r+0x65e>
 8009bcc:	b12f      	cbz	r7, 8009bda <_dtoa_r+0x6b2>
 8009bce:	42af      	cmp	r7, r5
 8009bd0:	d003      	beq.n	8009bda <_dtoa_r+0x6b2>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	f000 faf5 	bl	800a1c4 <_Bfree>
 8009bda:	4629      	mov	r1, r5
 8009bdc:	4658      	mov	r0, fp
 8009bde:	f000 faf1 	bl	800a1c4 <_Bfree>
 8009be2:	e7d0      	b.n	8009b86 <_dtoa_r+0x65e>
 8009be4:	9704      	str	r7, [sp, #16]
 8009be6:	4633      	mov	r3, r6
 8009be8:	461e      	mov	r6, r3
 8009bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bee:	2a39      	cmp	r2, #57	@ 0x39
 8009bf0:	d107      	bne.n	8009c02 <_dtoa_r+0x6da>
 8009bf2:	459a      	cmp	sl, r3
 8009bf4:	d1f8      	bne.n	8009be8 <_dtoa_r+0x6c0>
 8009bf6:	9a04      	ldr	r2, [sp, #16]
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	9204      	str	r2, [sp, #16]
 8009bfc:	2230      	movs	r2, #48	@ 0x30
 8009bfe:	f88a 2000 	strb.w	r2, [sl]
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	3201      	adds	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	e7bd      	b.n	8009b86 <_dtoa_r+0x65e>
 8009c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8009df8 <_dtoa_r+0x8d0>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f7f6 fd03 	bl	8000618 <__aeabi_dmul>
 8009c12:	2200      	movs	r2, #0
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	f7f6 ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f43f aebb 	beq.w	800999a <_dtoa_r+0x472>
 8009c24:	e6f0      	b.n	8009a08 <_dtoa_r+0x4e0>
 8009c26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	f000 80db 	beq.w	8009de4 <_dtoa_r+0x8bc>
 8009c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c30:	2a01      	cmp	r2, #1
 8009c32:	f300 80bf 	bgt.w	8009db4 <_dtoa_r+0x88c>
 8009c36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	f000 80b7 	beq.w	8009dac <_dtoa_r+0x884>
 8009c3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c44:	4646      	mov	r6, r8
 8009c46:	9a08      	ldr	r2, [sp, #32]
 8009c48:	2101      	movs	r1, #1
 8009c4a:	441a      	add	r2, r3
 8009c4c:	4658      	mov	r0, fp
 8009c4e:	4498      	add	r8, r3
 8009c50:	9208      	str	r2, [sp, #32]
 8009c52:	f000 fb6b 	bl	800a32c <__i2b>
 8009c56:	4605      	mov	r5, r0
 8009c58:	b15e      	cbz	r6, 8009c72 <_dtoa_r+0x74a>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd08      	ble.n	8009c72 <_dtoa_r+0x74a>
 8009c60:	42b3      	cmp	r3, r6
 8009c62:	9a08      	ldr	r2, [sp, #32]
 8009c64:	bfa8      	it	ge
 8009c66:	4633      	movge	r3, r6
 8009c68:	eba8 0803 	sub.w	r8, r8, r3
 8009c6c:	1af6      	subs	r6, r6, r3
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	9308      	str	r3, [sp, #32]
 8009c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c74:	b1f3      	cbz	r3, 8009cb4 <_dtoa_r+0x78c>
 8009c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 80b7 	beq.w	8009dec <_dtoa_r+0x8c4>
 8009c7e:	b18c      	cbz	r4, 8009ca4 <_dtoa_r+0x77c>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4622      	mov	r2, r4
 8009c84:	4658      	mov	r0, fp
 8009c86:	f000 fc11 	bl	800a4ac <__pow5mult>
 8009c8a:	464a      	mov	r2, r9
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	4605      	mov	r5, r0
 8009c90:	4658      	mov	r0, fp
 8009c92:	f000 fb61 	bl	800a358 <__multiply>
 8009c96:	4649      	mov	r1, r9
 8009c98:	9004      	str	r0, [sp, #16]
 8009c9a:	4658      	mov	r0, fp
 8009c9c:	f000 fa92 	bl	800a1c4 <_Bfree>
 8009ca0:	9b04      	ldr	r3, [sp, #16]
 8009ca2:	4699      	mov	r9, r3
 8009ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ca6:	1b1a      	subs	r2, r3, r4
 8009ca8:	d004      	beq.n	8009cb4 <_dtoa_r+0x78c>
 8009caa:	4649      	mov	r1, r9
 8009cac:	4658      	mov	r0, fp
 8009cae:	f000 fbfd 	bl	800a4ac <__pow5mult>
 8009cb2:	4681      	mov	r9, r0
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4658      	mov	r0, fp
 8009cb8:	f000 fb38 	bl	800a32c <__i2b>
 8009cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 81cf 	beq.w	800a064 <_dtoa_r+0xb3c>
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4601      	mov	r1, r0
 8009cca:	4658      	mov	r0, fp
 8009ccc:	f000 fbee 	bl	800a4ac <__pow5mult>
 8009cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	f300 8095 	bgt.w	8009e04 <_dtoa_r+0x8dc>
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 8087 	bne.w	8009df0 <_dtoa_r+0x8c8>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 8089 	bne.w	8009e00 <_dtoa_r+0x8d8>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009cf4:	0d1b      	lsrs	r3, r3, #20
 8009cf6:	051b      	lsls	r3, r3, #20
 8009cf8:	b12b      	cbz	r3, 8009d06 <_dtoa_r+0x7de>
 8009cfa:	9b08      	ldr	r3, [sp, #32]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	9308      	str	r3, [sp, #32]
 8009d00:	f108 0801 	add.w	r8, r8, #1
 8009d04:	2301      	movs	r3, #1
 8009d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 81b0 	beq.w	800a070 <_dtoa_r+0xb48>
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d16:	6918      	ldr	r0, [r3, #16]
 8009d18:	f000 fabc 	bl	800a294 <__hi0bits>
 8009d1c:	f1c0 0020 	rsb	r0, r0, #32
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	4418      	add	r0, r3
 8009d24:	f010 001f 	ands.w	r0, r0, #31
 8009d28:	d077      	beq.n	8009e1a <_dtoa_r+0x8f2>
 8009d2a:	f1c0 0320 	rsb	r3, r0, #32
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	dd6b      	ble.n	8009e0a <_dtoa_r+0x8e2>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	f1c0 001c 	rsb	r0, r0, #28
 8009d38:	4403      	add	r3, r0
 8009d3a:	4480      	add	r8, r0
 8009d3c:	4406      	add	r6, r0
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	dd05      	ble.n	8009d52 <_dtoa_r+0x82a>
 8009d46:	4649      	mov	r1, r9
 8009d48:	4642      	mov	r2, r8
 8009d4a:	4658      	mov	r0, fp
 8009d4c:	f000 fc08 	bl	800a560 <__lshift>
 8009d50:	4681      	mov	r9, r0
 8009d52:	9b08      	ldr	r3, [sp, #32]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dd05      	ble.n	8009d64 <_dtoa_r+0x83c>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	f000 fbff 	bl	800a560 <__lshift>
 8009d62:	4604      	mov	r4, r0
 8009d64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d059      	beq.n	8009e1e <_dtoa_r+0x8f6>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4648      	mov	r0, r9
 8009d6e:	f000 fc63 	bl	800a638 <__mcmp>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	da53      	bge.n	8009e1e <_dtoa_r+0x8f6>
 8009d76:	1e7b      	subs	r3, r7, #1
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	220a      	movs	r2, #10
 8009d80:	4658      	mov	r0, fp
 8009d82:	f000 fa41 	bl	800a208 <__multadd>
 8009d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d88:	4681      	mov	r9, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8172 	beq.w	800a074 <_dtoa_r+0xb4c>
 8009d90:	2300      	movs	r3, #0
 8009d92:	4629      	mov	r1, r5
 8009d94:	220a      	movs	r2, #10
 8009d96:	4658      	mov	r0, fp
 8009d98:	f000 fa36 	bl	800a208 <__multadd>
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	4605      	mov	r5, r0
 8009da2:	dc67      	bgt.n	8009e74 <_dtoa_r+0x94c>
 8009da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dc41      	bgt.n	8009e2e <_dtoa_r+0x906>
 8009daa:	e063      	b.n	8009e74 <_dtoa_r+0x94c>
 8009dac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009db2:	e746      	b.n	8009c42 <_dtoa_r+0x71a>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	1e5c      	subs	r4, r3, #1
 8009db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dba:	42a3      	cmp	r3, r4
 8009dbc:	bfbf      	itttt	lt
 8009dbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009dc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009dc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009dc4:	1ae3      	sublt	r3, r4, r3
 8009dc6:	bfb4      	ite	lt
 8009dc8:	18d2      	addlt	r2, r2, r3
 8009dca:	1b1c      	subge	r4, r3, r4
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	bfbc      	itt	lt
 8009dd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009dd2:	2400      	movlt	r4, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfb5      	itete	lt
 8009dd8:	eba8 0603 	sublt.w	r6, r8, r3
 8009ddc:	9b07      	ldrge	r3, [sp, #28]
 8009dde:	2300      	movlt	r3, #0
 8009de0:	4646      	movge	r6, r8
 8009de2:	e730      	b.n	8009c46 <_dtoa_r+0x71e>
 8009de4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009de6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009de8:	4646      	mov	r6, r8
 8009dea:	e735      	b.n	8009c58 <_dtoa_r+0x730>
 8009dec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dee:	e75c      	b.n	8009caa <_dtoa_r+0x782>
 8009df0:	2300      	movs	r3, #0
 8009df2:	e788      	b.n	8009d06 <_dtoa_r+0x7de>
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	40140000 	.word	0x40140000
 8009e00:	9b02      	ldr	r3, [sp, #8]
 8009e02:	e780      	b.n	8009d06 <_dtoa_r+0x7de>
 8009e04:	2300      	movs	r3, #0
 8009e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e08:	e782      	b.n	8009d10 <_dtoa_r+0x7e8>
 8009e0a:	d099      	beq.n	8009d40 <_dtoa_r+0x818>
 8009e0c:	9a08      	ldr	r2, [sp, #32]
 8009e0e:	331c      	adds	r3, #28
 8009e10:	441a      	add	r2, r3
 8009e12:	4498      	add	r8, r3
 8009e14:	441e      	add	r6, r3
 8009e16:	9208      	str	r2, [sp, #32]
 8009e18:	e792      	b.n	8009d40 <_dtoa_r+0x818>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	e7f6      	b.n	8009e0c <_dtoa_r+0x8e4>
 8009e1e:	9b07      	ldr	r3, [sp, #28]
 8009e20:	9704      	str	r7, [sp, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dc20      	bgt.n	8009e68 <_dtoa_r+0x940>
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	dd1e      	ble.n	8009e6c <_dtoa_r+0x944>
 8009e2e:	9b00      	ldr	r3, [sp, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f47f aec0 	bne.w	8009bb6 <_dtoa_r+0x68e>
 8009e36:	4621      	mov	r1, r4
 8009e38:	2205      	movs	r2, #5
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 f9e4 	bl	800a208 <__multadd>
 8009e40:	4601      	mov	r1, r0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4648      	mov	r0, r9
 8009e46:	f000 fbf7 	bl	800a638 <__mcmp>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f77f aeb3 	ble.w	8009bb6 <_dtoa_r+0x68e>
 8009e50:	4656      	mov	r6, sl
 8009e52:	2331      	movs	r3, #49	@ 0x31
 8009e54:	f806 3b01 	strb.w	r3, [r6], #1
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	e6ae      	b.n	8009bbe <_dtoa_r+0x696>
 8009e60:	9c07      	ldr	r4, [sp, #28]
 8009e62:	9704      	str	r7, [sp, #16]
 8009e64:	4625      	mov	r5, r4
 8009e66:	e7f3      	b.n	8009e50 <_dtoa_r+0x928>
 8009e68:	9b07      	ldr	r3, [sp, #28]
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8104 	beq.w	800a07c <_dtoa_r+0xb54>
 8009e74:	2e00      	cmp	r6, #0
 8009e76:	dd05      	ble.n	8009e84 <_dtoa_r+0x95c>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f000 fb6f 	bl	800a560 <__lshift>
 8009e82:	4605      	mov	r5, r0
 8009e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d05a      	beq.n	8009f40 <_dtoa_r+0xa18>
 8009e8a:	6869      	ldr	r1, [r5, #4]
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	f000 f959 	bl	800a144 <_Balloc>
 8009e92:	4606      	mov	r6, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <_dtoa_r+0x97a>
 8009e96:	4b84      	ldr	r3, [pc, #528]	@ (800a0a8 <_dtoa_r+0xb80>)
 8009e98:	4602      	mov	r2, r0
 8009e9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e9e:	f7ff bb5a 	b.w	8009556 <_dtoa_r+0x2e>
 8009ea2:	692a      	ldr	r2, [r5, #16]
 8009ea4:	3202      	adds	r2, #2
 8009ea6:	0092      	lsls	r2, r2, #2
 8009ea8:	f105 010c 	add.w	r1, r5, #12
 8009eac:	300c      	adds	r0, #12
 8009eae:	f7ff faa2 	bl	80093f6 <memcpy>
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4658      	mov	r0, fp
 8009eb8:	f000 fb52 	bl	800a560 <__lshift>
 8009ebc:	f10a 0301 	add.w	r3, sl, #1
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	4453      	add	r3, sl
 8009ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	462f      	mov	r7, r5
 8009ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	4648      	mov	r0, r9
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	f7ff fa98 	bl	8009412 <quorem>
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	9002      	str	r0, [sp, #8]
 8009ee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009eea:	4648      	mov	r0, r9
 8009eec:	f000 fba4 	bl	800a638 <__mcmp>
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	9008      	str	r0, [sp, #32]
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	f000 fbba 	bl	800a670 <__mdiff>
 8009efc:	68c2      	ldr	r2, [r0, #12]
 8009efe:	4606      	mov	r6, r0
 8009f00:	bb02      	cbnz	r2, 8009f44 <_dtoa_r+0xa1c>
 8009f02:	4601      	mov	r1, r0
 8009f04:	4648      	mov	r0, r9
 8009f06:	f000 fb97 	bl	800a638 <__mcmp>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4658      	mov	r0, fp
 8009f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f12:	f000 f957 	bl	800a1c4 <_Bfree>
 8009f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f1a:	9e07      	ldr	r6, [sp, #28]
 8009f1c:	ea43 0102 	orr.w	r1, r3, r2
 8009f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f22:	4319      	orrs	r1, r3
 8009f24:	d110      	bne.n	8009f48 <_dtoa_r+0xa20>
 8009f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f2a:	d029      	beq.n	8009f80 <_dtoa_r+0xa58>
 8009f2c:	9b08      	ldr	r3, [sp, #32]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	dd02      	ble.n	8009f38 <_dtoa_r+0xa10>
 8009f32:	9b02      	ldr	r3, [sp, #8]
 8009f34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	f883 8000 	strb.w	r8, [r3]
 8009f3e:	e63f      	b.n	8009bc0 <_dtoa_r+0x698>
 8009f40:	4628      	mov	r0, r5
 8009f42:	e7bb      	b.n	8009ebc <_dtoa_r+0x994>
 8009f44:	2201      	movs	r2, #1
 8009f46:	e7e1      	b.n	8009f0c <_dtoa_r+0x9e4>
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	db04      	blt.n	8009f58 <_dtoa_r+0xa30>
 8009f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f50:	430b      	orrs	r3, r1
 8009f52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f54:	430b      	orrs	r3, r1
 8009f56:	d120      	bne.n	8009f9a <_dtoa_r+0xa72>
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	dded      	ble.n	8009f38 <_dtoa_r+0xa10>
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	2201      	movs	r2, #1
 8009f60:	4658      	mov	r0, fp
 8009f62:	f000 fafd 	bl	800a560 <__lshift>
 8009f66:	4621      	mov	r1, r4
 8009f68:	4681      	mov	r9, r0
 8009f6a:	f000 fb65 	bl	800a638 <__mcmp>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	dc03      	bgt.n	8009f7a <_dtoa_r+0xa52>
 8009f72:	d1e1      	bne.n	8009f38 <_dtoa_r+0xa10>
 8009f74:	f018 0f01 	tst.w	r8, #1
 8009f78:	d0de      	beq.n	8009f38 <_dtoa_r+0xa10>
 8009f7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f7e:	d1d8      	bne.n	8009f32 <_dtoa_r+0xa0a>
 8009f80:	9a00      	ldr	r2, [sp, #0]
 8009f82:	2339      	movs	r3, #57	@ 0x39
 8009f84:	7013      	strb	r3, [r2, #0]
 8009f86:	4633      	mov	r3, r6
 8009f88:	461e      	mov	r6, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f90:	2a39      	cmp	r2, #57	@ 0x39
 8009f92:	d052      	beq.n	800a03a <_dtoa_r+0xb12>
 8009f94:	3201      	adds	r2, #1
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e612      	b.n	8009bc0 <_dtoa_r+0x698>
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	dd07      	ble.n	8009fae <_dtoa_r+0xa86>
 8009f9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fa2:	d0ed      	beq.n	8009f80 <_dtoa_r+0xa58>
 8009fa4:	9a00      	ldr	r2, [sp, #0]
 8009fa6:	f108 0301 	add.w	r3, r8, #1
 8009faa:	7013      	strb	r3, [r2, #0]
 8009fac:	e608      	b.n	8009bc0 <_dtoa_r+0x698>
 8009fae:	9b07      	ldr	r3, [sp, #28]
 8009fb0:	9a07      	ldr	r2, [sp, #28]
 8009fb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d028      	beq.n	800a00e <_dtoa_r+0xae6>
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4658      	mov	r0, fp
 8009fc4:	f000 f920 	bl	800a208 <__multadd>
 8009fc8:	42af      	cmp	r7, r5
 8009fca:	4681      	mov	r9, r0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	f04f 020a 	mov.w	r2, #10
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4658      	mov	r0, fp
 8009fd8:	d107      	bne.n	8009fea <_dtoa_r+0xac2>
 8009fda:	f000 f915 	bl	800a208 <__multadd>
 8009fde:	4607      	mov	r7, r0
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	9b07      	ldr	r3, [sp, #28]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	e774      	b.n	8009ed4 <_dtoa_r+0x9ac>
 8009fea:	f000 f90d 	bl	800a208 <__multadd>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	4658      	mov	r0, fp
 8009ff8:	f000 f906 	bl	800a208 <__multadd>
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	e7f0      	b.n	8009fe2 <_dtoa_r+0xaba>
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfcc      	ite	gt
 800a006:	461e      	movgt	r6, r3
 800a008:	2601      	movle	r6, #1
 800a00a:	4456      	add	r6, sl
 800a00c:	2700      	movs	r7, #0
 800a00e:	4649      	mov	r1, r9
 800a010:	2201      	movs	r2, #1
 800a012:	4658      	mov	r0, fp
 800a014:	f000 faa4 	bl	800a560 <__lshift>
 800a018:	4621      	mov	r1, r4
 800a01a:	4681      	mov	r9, r0
 800a01c:	f000 fb0c 	bl	800a638 <__mcmp>
 800a020:	2800      	cmp	r0, #0
 800a022:	dcb0      	bgt.n	8009f86 <_dtoa_r+0xa5e>
 800a024:	d102      	bne.n	800a02c <_dtoa_r+0xb04>
 800a026:	f018 0f01 	tst.w	r8, #1
 800a02a:	d1ac      	bne.n	8009f86 <_dtoa_r+0xa5e>
 800a02c:	4633      	mov	r3, r6
 800a02e:	461e      	mov	r6, r3
 800a030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a034:	2a30      	cmp	r2, #48	@ 0x30
 800a036:	d0fa      	beq.n	800a02e <_dtoa_r+0xb06>
 800a038:	e5c2      	b.n	8009bc0 <_dtoa_r+0x698>
 800a03a:	459a      	cmp	sl, r3
 800a03c:	d1a4      	bne.n	8009f88 <_dtoa_r+0xa60>
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	2331      	movs	r3, #49	@ 0x31
 800a046:	f88a 3000 	strb.w	r3, [sl]
 800a04a:	e5b9      	b.n	8009bc0 <_dtoa_r+0x698>
 800a04c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a04e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0ac <_dtoa_r+0xb84>
 800a052:	b11b      	cbz	r3, 800a05c <_dtoa_r+0xb34>
 800a054:	f10a 0308 	add.w	r3, sl, #8
 800a058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	4650      	mov	r0, sl
 800a05e:	b019      	add	sp, #100	@ 0x64
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a066:	2b01      	cmp	r3, #1
 800a068:	f77f ae37 	ble.w	8009cda <_dtoa_r+0x7b2>
 800a06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a070:	2001      	movs	r0, #1
 800a072:	e655      	b.n	8009d20 <_dtoa_r+0x7f8>
 800a074:	9b00      	ldr	r3, [sp, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f77f aed6 	ble.w	8009e28 <_dtoa_r+0x900>
 800a07c:	4656      	mov	r6, sl
 800a07e:	4621      	mov	r1, r4
 800a080:	4648      	mov	r0, r9
 800a082:	f7ff f9c6 	bl	8009412 <quorem>
 800a086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a08a:	f806 8b01 	strb.w	r8, [r6], #1
 800a08e:	9b00      	ldr	r3, [sp, #0]
 800a090:	eba6 020a 	sub.w	r2, r6, sl
 800a094:	4293      	cmp	r3, r2
 800a096:	ddb3      	ble.n	800a000 <_dtoa_r+0xad8>
 800a098:	4649      	mov	r1, r9
 800a09a:	2300      	movs	r3, #0
 800a09c:	220a      	movs	r2, #10
 800a09e:	4658      	mov	r0, fp
 800a0a0:	f000 f8b2 	bl	800a208 <__multadd>
 800a0a4:	4681      	mov	r9, r0
 800a0a6:	e7ea      	b.n	800a07e <_dtoa_r+0xb56>
 800a0a8:	0800f8e0 	.word	0x0800f8e0
 800a0ac:	0800f864 	.word	0x0800f864

0800a0b0 <_free_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d041      	beq.n	800a13c <_free_r+0x8c>
 800a0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0bc:	1f0c      	subs	r4, r1, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	bfb8      	it	lt
 800a0c2:	18e4      	addlt	r4, r4, r3
 800a0c4:	f7fe fb7e 	bl	80087c4 <__malloc_lock>
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a140 <_free_r+0x90>)
 800a0ca:	6813      	ldr	r3, [r2, #0]
 800a0cc:	b933      	cbnz	r3, 800a0dc <_free_r+0x2c>
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	6014      	str	r4, [r2, #0]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d8:	f7fe bb7a 	b.w	80087d0 <__malloc_unlock>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d908      	bls.n	800a0f2 <_free_r+0x42>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	1821      	adds	r1, r4, r0
 800a0e4:	428b      	cmp	r3, r1
 800a0e6:	bf01      	itttt	eq
 800a0e8:	6819      	ldreq	r1, [r3, #0]
 800a0ea:	685b      	ldreq	r3, [r3, #4]
 800a0ec:	1809      	addeq	r1, r1, r0
 800a0ee:	6021      	streq	r1, [r4, #0]
 800a0f0:	e7ed      	b.n	800a0ce <_free_r+0x1e>
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	b10b      	cbz	r3, 800a0fc <_free_r+0x4c>
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d9fa      	bls.n	800a0f2 <_free_r+0x42>
 800a0fc:	6811      	ldr	r1, [r2, #0]
 800a0fe:	1850      	adds	r0, r2, r1
 800a100:	42a0      	cmp	r0, r4
 800a102:	d10b      	bne.n	800a11c <_free_r+0x6c>
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	4401      	add	r1, r0
 800a108:	1850      	adds	r0, r2, r1
 800a10a:	4283      	cmp	r3, r0
 800a10c:	6011      	str	r1, [r2, #0]
 800a10e:	d1e0      	bne.n	800a0d2 <_free_r+0x22>
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	6053      	str	r3, [r2, #4]
 800a116:	4408      	add	r0, r1
 800a118:	6010      	str	r0, [r2, #0]
 800a11a:	e7da      	b.n	800a0d2 <_free_r+0x22>
 800a11c:	d902      	bls.n	800a124 <_free_r+0x74>
 800a11e:	230c      	movs	r3, #12
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	e7d6      	b.n	800a0d2 <_free_r+0x22>
 800a124:	6820      	ldr	r0, [r4, #0]
 800a126:	1821      	adds	r1, r4, r0
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf04      	itt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	6063      	str	r3, [r4, #4]
 800a132:	bf04      	itt	eq
 800a134:	1809      	addeq	r1, r1, r0
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	6054      	str	r4, [r2, #4]
 800a13a:	e7ca      	b.n	800a0d2 <_free_r+0x22>
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
 800a13e:	bf00      	nop
 800a140:	20000b5c 	.word	0x20000b5c

0800a144 <_Balloc>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	69c6      	ldr	r6, [r0, #28]
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	b976      	cbnz	r6, 800a16c <_Balloc+0x28>
 800a14e:	2010      	movs	r0, #16
 800a150:	f7fe fa8e 	bl	8008670 <malloc>
 800a154:	4602      	mov	r2, r0
 800a156:	61e0      	str	r0, [r4, #28]
 800a158:	b920      	cbnz	r0, 800a164 <_Balloc+0x20>
 800a15a:	4b18      	ldr	r3, [pc, #96]	@ (800a1bc <_Balloc+0x78>)
 800a15c:	4818      	ldr	r0, [pc, #96]	@ (800a1c0 <_Balloc+0x7c>)
 800a15e:	216b      	movs	r1, #107	@ 0x6b
 800a160:	f000 fd90 	bl	800ac84 <__assert_func>
 800a164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a168:	6006      	str	r6, [r0, #0]
 800a16a:	60c6      	str	r6, [r0, #12]
 800a16c:	69e6      	ldr	r6, [r4, #28]
 800a16e:	68f3      	ldr	r3, [r6, #12]
 800a170:	b183      	cbz	r3, 800a194 <_Balloc+0x50>
 800a172:	69e3      	ldr	r3, [r4, #28]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a17a:	b9b8      	cbnz	r0, 800a1ac <_Balloc+0x68>
 800a17c:	2101      	movs	r1, #1
 800a17e:	fa01 f605 	lsl.w	r6, r1, r5
 800a182:	1d72      	adds	r2, r6, #5
 800a184:	0092      	lsls	r2, r2, #2
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fd9a 	bl	800acc0 <_calloc_r>
 800a18c:	b160      	cbz	r0, 800a1a8 <_Balloc+0x64>
 800a18e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a192:	e00e      	b.n	800a1b2 <_Balloc+0x6e>
 800a194:	2221      	movs	r2, #33	@ 0x21
 800a196:	2104      	movs	r1, #4
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fd91 	bl	800acc0 <_calloc_r>
 800a19e:	69e3      	ldr	r3, [r4, #28]
 800a1a0:	60f0      	str	r0, [r6, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e4      	bne.n	800a172 <_Balloc+0x2e>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	6802      	ldr	r2, [r0, #0]
 800a1ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1b8:	e7f7      	b.n	800a1aa <_Balloc+0x66>
 800a1ba:	bf00      	nop
 800a1bc:	0800f871 	.word	0x0800f871
 800a1c0:	0800f8f1 	.word	0x0800f8f1

0800a1c4 <_Bfree>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	69c6      	ldr	r6, [r0, #28]
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	b976      	cbnz	r6, 800a1ec <_Bfree+0x28>
 800a1ce:	2010      	movs	r0, #16
 800a1d0:	f7fe fa4e 	bl	8008670 <malloc>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	61e8      	str	r0, [r5, #28]
 800a1d8:	b920      	cbnz	r0, 800a1e4 <_Bfree+0x20>
 800a1da:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <_Bfree+0x3c>)
 800a1dc:	4809      	ldr	r0, [pc, #36]	@ (800a204 <_Bfree+0x40>)
 800a1de:	218f      	movs	r1, #143	@ 0x8f
 800a1e0:	f000 fd50 	bl	800ac84 <__assert_func>
 800a1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e8:	6006      	str	r6, [r0, #0]
 800a1ea:	60c6      	str	r6, [r0, #12]
 800a1ec:	b13c      	cbz	r4, 800a1fe <_Bfree+0x3a>
 800a1ee:	69eb      	ldr	r3, [r5, #28]
 800a1f0:	6862      	ldr	r2, [r4, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1f8:	6021      	str	r1, [r4, #0]
 800a1fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	0800f871 	.word	0x0800f871
 800a204:	0800f8f1 	.word	0x0800f8f1

0800a208 <__multadd>:
 800a208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20c:	690d      	ldr	r5, [r1, #16]
 800a20e:	4607      	mov	r7, r0
 800a210:	460c      	mov	r4, r1
 800a212:	461e      	mov	r6, r3
 800a214:	f101 0c14 	add.w	ip, r1, #20
 800a218:	2000      	movs	r0, #0
 800a21a:	f8dc 3000 	ldr.w	r3, [ip]
 800a21e:	b299      	uxth	r1, r3
 800a220:	fb02 6101 	mla	r1, r2, r1, r6
 800a224:	0c1e      	lsrs	r6, r3, #16
 800a226:	0c0b      	lsrs	r3, r1, #16
 800a228:	fb02 3306 	mla	r3, r2, r6, r3
 800a22c:	b289      	uxth	r1, r1
 800a22e:	3001      	adds	r0, #1
 800a230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a234:	4285      	cmp	r5, r0
 800a236:	f84c 1b04 	str.w	r1, [ip], #4
 800a23a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a23e:	dcec      	bgt.n	800a21a <__multadd+0x12>
 800a240:	b30e      	cbz	r6, 800a286 <__multadd+0x7e>
 800a242:	68a3      	ldr	r3, [r4, #8]
 800a244:	42ab      	cmp	r3, r5
 800a246:	dc19      	bgt.n	800a27c <__multadd+0x74>
 800a248:	6861      	ldr	r1, [r4, #4]
 800a24a:	4638      	mov	r0, r7
 800a24c:	3101      	adds	r1, #1
 800a24e:	f7ff ff79 	bl	800a144 <_Balloc>
 800a252:	4680      	mov	r8, r0
 800a254:	b928      	cbnz	r0, 800a262 <__multadd+0x5a>
 800a256:	4602      	mov	r2, r0
 800a258:	4b0c      	ldr	r3, [pc, #48]	@ (800a28c <__multadd+0x84>)
 800a25a:	480d      	ldr	r0, [pc, #52]	@ (800a290 <__multadd+0x88>)
 800a25c:	21ba      	movs	r1, #186	@ 0xba
 800a25e:	f000 fd11 	bl	800ac84 <__assert_func>
 800a262:	6922      	ldr	r2, [r4, #16]
 800a264:	3202      	adds	r2, #2
 800a266:	f104 010c 	add.w	r1, r4, #12
 800a26a:	0092      	lsls	r2, r2, #2
 800a26c:	300c      	adds	r0, #12
 800a26e:	f7ff f8c2 	bl	80093f6 <memcpy>
 800a272:	4621      	mov	r1, r4
 800a274:	4638      	mov	r0, r7
 800a276:	f7ff ffa5 	bl	800a1c4 <_Bfree>
 800a27a:	4644      	mov	r4, r8
 800a27c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a280:	3501      	adds	r5, #1
 800a282:	615e      	str	r6, [r3, #20]
 800a284:	6125      	str	r5, [r4, #16]
 800a286:	4620      	mov	r0, r4
 800a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a28c:	0800f8e0 	.word	0x0800f8e0
 800a290:	0800f8f1 	.word	0x0800f8f1

0800a294 <__hi0bits>:
 800a294:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a298:	4603      	mov	r3, r0
 800a29a:	bf36      	itet	cc
 800a29c:	0403      	lslcc	r3, r0, #16
 800a29e:	2000      	movcs	r0, #0
 800a2a0:	2010      	movcc	r0, #16
 800a2a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2a6:	bf3c      	itt	cc
 800a2a8:	021b      	lslcc	r3, r3, #8
 800a2aa:	3008      	addcc	r0, #8
 800a2ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2b0:	bf3c      	itt	cc
 800a2b2:	011b      	lslcc	r3, r3, #4
 800a2b4:	3004      	addcc	r0, #4
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ba:	bf3c      	itt	cc
 800a2bc:	009b      	lslcc	r3, r3, #2
 800a2be:	3002      	addcc	r0, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	db05      	blt.n	800a2d0 <__hi0bits+0x3c>
 800a2c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2c8:	f100 0001 	add.w	r0, r0, #1
 800a2cc:	bf08      	it	eq
 800a2ce:	2020      	moveq	r0, #32
 800a2d0:	4770      	bx	lr

0800a2d2 <__lo0bits>:
 800a2d2:	6803      	ldr	r3, [r0, #0]
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	f013 0007 	ands.w	r0, r3, #7
 800a2da:	d00b      	beq.n	800a2f4 <__lo0bits+0x22>
 800a2dc:	07d9      	lsls	r1, r3, #31
 800a2de:	d421      	bmi.n	800a324 <__lo0bits+0x52>
 800a2e0:	0798      	lsls	r0, r3, #30
 800a2e2:	bf49      	itett	mi
 800a2e4:	085b      	lsrmi	r3, r3, #1
 800a2e6:	089b      	lsrpl	r3, r3, #2
 800a2e8:	2001      	movmi	r0, #1
 800a2ea:	6013      	strmi	r3, [r2, #0]
 800a2ec:	bf5c      	itt	pl
 800a2ee:	6013      	strpl	r3, [r2, #0]
 800a2f0:	2002      	movpl	r0, #2
 800a2f2:	4770      	bx	lr
 800a2f4:	b299      	uxth	r1, r3
 800a2f6:	b909      	cbnz	r1, 800a2fc <__lo0bits+0x2a>
 800a2f8:	0c1b      	lsrs	r3, r3, #16
 800a2fa:	2010      	movs	r0, #16
 800a2fc:	b2d9      	uxtb	r1, r3
 800a2fe:	b909      	cbnz	r1, 800a304 <__lo0bits+0x32>
 800a300:	3008      	adds	r0, #8
 800a302:	0a1b      	lsrs	r3, r3, #8
 800a304:	0719      	lsls	r1, r3, #28
 800a306:	bf04      	itt	eq
 800a308:	091b      	lsreq	r3, r3, #4
 800a30a:	3004      	addeq	r0, #4
 800a30c:	0799      	lsls	r1, r3, #30
 800a30e:	bf04      	itt	eq
 800a310:	089b      	lsreq	r3, r3, #2
 800a312:	3002      	addeq	r0, #2
 800a314:	07d9      	lsls	r1, r3, #31
 800a316:	d403      	bmi.n	800a320 <__lo0bits+0x4e>
 800a318:	085b      	lsrs	r3, r3, #1
 800a31a:	f100 0001 	add.w	r0, r0, #1
 800a31e:	d003      	beq.n	800a328 <__lo0bits+0x56>
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4770      	bx	lr
 800a324:	2000      	movs	r0, #0
 800a326:	4770      	bx	lr
 800a328:	2020      	movs	r0, #32
 800a32a:	4770      	bx	lr

0800a32c <__i2b>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	460c      	mov	r4, r1
 800a330:	2101      	movs	r1, #1
 800a332:	f7ff ff07 	bl	800a144 <_Balloc>
 800a336:	4602      	mov	r2, r0
 800a338:	b928      	cbnz	r0, 800a346 <__i2b+0x1a>
 800a33a:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <__i2b+0x24>)
 800a33c:	4805      	ldr	r0, [pc, #20]	@ (800a354 <__i2b+0x28>)
 800a33e:	f240 1145 	movw	r1, #325	@ 0x145
 800a342:	f000 fc9f 	bl	800ac84 <__assert_func>
 800a346:	2301      	movs	r3, #1
 800a348:	6144      	str	r4, [r0, #20]
 800a34a:	6103      	str	r3, [r0, #16]
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	bf00      	nop
 800a350:	0800f8e0 	.word	0x0800f8e0
 800a354:	0800f8f1 	.word	0x0800f8f1

0800a358 <__multiply>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	4614      	mov	r4, r2
 800a35e:	690a      	ldr	r2, [r1, #16]
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	429a      	cmp	r2, r3
 800a364:	bfa8      	it	ge
 800a366:	4623      	movge	r3, r4
 800a368:	460f      	mov	r7, r1
 800a36a:	bfa4      	itt	ge
 800a36c:	460c      	movge	r4, r1
 800a36e:	461f      	movge	r7, r3
 800a370:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a374:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	6861      	ldr	r1, [r4, #4]
 800a37c:	eb0a 0609 	add.w	r6, sl, r9
 800a380:	42b3      	cmp	r3, r6
 800a382:	b085      	sub	sp, #20
 800a384:	bfb8      	it	lt
 800a386:	3101      	addlt	r1, #1
 800a388:	f7ff fedc 	bl	800a144 <_Balloc>
 800a38c:	b930      	cbnz	r0, 800a39c <__multiply+0x44>
 800a38e:	4602      	mov	r2, r0
 800a390:	4b44      	ldr	r3, [pc, #272]	@ (800a4a4 <__multiply+0x14c>)
 800a392:	4845      	ldr	r0, [pc, #276]	@ (800a4a8 <__multiply+0x150>)
 800a394:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a398:	f000 fc74 	bl	800ac84 <__assert_func>
 800a39c:	f100 0514 	add.w	r5, r0, #20
 800a3a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4543      	cmp	r3, r8
 800a3aa:	d321      	bcc.n	800a3f0 <__multiply+0x98>
 800a3ac:	f107 0114 	add.w	r1, r7, #20
 800a3b0:	f104 0214 	add.w	r2, r4, #20
 800a3b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3bc:	9302      	str	r3, [sp, #8]
 800a3be:	1b13      	subs	r3, r2, r4
 800a3c0:	3b15      	subs	r3, #21
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	f104 0715 	add.w	r7, r4, #21
 800a3cc:	42ba      	cmp	r2, r7
 800a3ce:	bf38      	it	cc
 800a3d0:	2304      	movcc	r3, #4
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	9b02      	ldr	r3, [sp, #8]
 800a3d6:	9103      	str	r1, [sp, #12]
 800a3d8:	428b      	cmp	r3, r1
 800a3da:	d80c      	bhi.n	800a3f6 <__multiply+0x9e>
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	dd03      	ble.n	800a3e8 <__multiply+0x90>
 800a3e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d05b      	beq.n	800a4a0 <__multiply+0x148>
 800a3e8:	6106      	str	r6, [r0, #16]
 800a3ea:	b005      	add	sp, #20
 800a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f0:	f843 2b04 	str.w	r2, [r3], #4
 800a3f4:	e7d8      	b.n	800a3a8 <__multiply+0x50>
 800a3f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3fa:	f1ba 0f00 	cmp.w	sl, #0
 800a3fe:	d024      	beq.n	800a44a <__multiply+0xf2>
 800a400:	f104 0e14 	add.w	lr, r4, #20
 800a404:	46a9      	mov	r9, r5
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a40e:	f8d9 3000 	ldr.w	r3, [r9]
 800a412:	fa1f fb87 	uxth.w	fp, r7
 800a416:	b29b      	uxth	r3, r3
 800a418:	fb0a 330b 	mla	r3, sl, fp, r3
 800a41c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a420:	f8d9 7000 	ldr.w	r7, [r9]
 800a424:	4463      	add	r3, ip
 800a426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a42a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a42e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a432:	b29b      	uxth	r3, r3
 800a434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a438:	4572      	cmp	r2, lr
 800a43a:	f849 3b04 	str.w	r3, [r9], #4
 800a43e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a442:	d8e2      	bhi.n	800a40a <__multiply+0xb2>
 800a444:	9b01      	ldr	r3, [sp, #4]
 800a446:	f845 c003 	str.w	ip, [r5, r3]
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a450:	3104      	adds	r1, #4
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	d021      	beq.n	800a49c <__multiply+0x144>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	f104 0c14 	add.w	ip, r4, #20
 800a45e:	46ae      	mov	lr, r5
 800a460:	f04f 0a00 	mov.w	sl, #0
 800a464:	f8bc b000 	ldrh.w	fp, [ip]
 800a468:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a46c:	fb09 770b 	mla	r7, r9, fp, r7
 800a470:	4457      	add	r7, sl
 800a472:	b29b      	uxth	r3, r3
 800a474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a478:	f84e 3b04 	str.w	r3, [lr], #4
 800a47c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a484:	f8be 3000 	ldrh.w	r3, [lr]
 800a488:	fb09 330a 	mla	r3, r9, sl, r3
 800a48c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a490:	4562      	cmp	r2, ip
 800a492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a496:	d8e5      	bhi.n	800a464 <__multiply+0x10c>
 800a498:	9f01      	ldr	r7, [sp, #4]
 800a49a:	51eb      	str	r3, [r5, r7]
 800a49c:	3504      	adds	r5, #4
 800a49e:	e799      	b.n	800a3d4 <__multiply+0x7c>
 800a4a0:	3e01      	subs	r6, #1
 800a4a2:	e79b      	b.n	800a3dc <__multiply+0x84>
 800a4a4:	0800f8e0 	.word	0x0800f8e0
 800a4a8:	0800f8f1 	.word	0x0800f8f1

0800a4ac <__pow5mult>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	4615      	mov	r5, r2
 800a4b2:	f012 0203 	ands.w	r2, r2, #3
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	460e      	mov	r6, r1
 800a4ba:	d007      	beq.n	800a4cc <__pow5mult+0x20>
 800a4bc:	4c25      	ldr	r4, [pc, #148]	@ (800a554 <__pow5mult+0xa8>)
 800a4be:	3a01      	subs	r2, #1
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4c6:	f7ff fe9f 	bl	800a208 <__multadd>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	10ad      	asrs	r5, r5, #2
 800a4ce:	d03d      	beq.n	800a54c <__pow5mult+0xa0>
 800a4d0:	69fc      	ldr	r4, [r7, #28]
 800a4d2:	b97c      	cbnz	r4, 800a4f4 <__pow5mult+0x48>
 800a4d4:	2010      	movs	r0, #16
 800a4d6:	f7fe f8cb 	bl	8008670 <malloc>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	61f8      	str	r0, [r7, #28]
 800a4de:	b928      	cbnz	r0, 800a4ec <__pow5mult+0x40>
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <__pow5mult+0xac>)
 800a4e2:	481e      	ldr	r0, [pc, #120]	@ (800a55c <__pow5mult+0xb0>)
 800a4e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4e8:	f000 fbcc 	bl	800ac84 <__assert_func>
 800a4ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4f0:	6004      	str	r4, [r0, #0]
 800a4f2:	60c4      	str	r4, [r0, #12]
 800a4f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4fc:	b94c      	cbnz	r4, 800a512 <__pow5mult+0x66>
 800a4fe:	f240 2171 	movw	r1, #625	@ 0x271
 800a502:	4638      	mov	r0, r7
 800a504:	f7ff ff12 	bl	800a32c <__i2b>
 800a508:	2300      	movs	r3, #0
 800a50a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a50e:	4604      	mov	r4, r0
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	f04f 0900 	mov.w	r9, #0
 800a516:	07eb      	lsls	r3, r5, #31
 800a518:	d50a      	bpl.n	800a530 <__pow5mult+0x84>
 800a51a:	4631      	mov	r1, r6
 800a51c:	4622      	mov	r2, r4
 800a51e:	4638      	mov	r0, r7
 800a520:	f7ff ff1a 	bl	800a358 <__multiply>
 800a524:	4631      	mov	r1, r6
 800a526:	4680      	mov	r8, r0
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff fe4b 	bl	800a1c4 <_Bfree>
 800a52e:	4646      	mov	r6, r8
 800a530:	106d      	asrs	r5, r5, #1
 800a532:	d00b      	beq.n	800a54c <__pow5mult+0xa0>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	b938      	cbnz	r0, 800a548 <__pow5mult+0x9c>
 800a538:	4622      	mov	r2, r4
 800a53a:	4621      	mov	r1, r4
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff ff0b 	bl	800a358 <__multiply>
 800a542:	6020      	str	r0, [r4, #0]
 800a544:	f8c0 9000 	str.w	r9, [r0]
 800a548:	4604      	mov	r4, r0
 800a54a:	e7e4      	b.n	800a516 <__pow5mult+0x6a>
 800a54c:	4630      	mov	r0, r6
 800a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a552:	bf00      	nop
 800a554:	0800f94c 	.word	0x0800f94c
 800a558:	0800f871 	.word	0x0800f871
 800a55c:	0800f8f1 	.word	0x0800f8f1

0800a560 <__lshift>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	6849      	ldr	r1, [r1, #4]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	4607      	mov	r7, r0
 800a572:	4691      	mov	r9, r2
 800a574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a578:	f108 0601 	add.w	r6, r8, #1
 800a57c:	42b3      	cmp	r3, r6
 800a57e:	db0b      	blt.n	800a598 <__lshift+0x38>
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff fddf 	bl	800a144 <_Balloc>
 800a586:	4605      	mov	r5, r0
 800a588:	b948      	cbnz	r0, 800a59e <__lshift+0x3e>
 800a58a:	4602      	mov	r2, r0
 800a58c:	4b28      	ldr	r3, [pc, #160]	@ (800a630 <__lshift+0xd0>)
 800a58e:	4829      	ldr	r0, [pc, #164]	@ (800a634 <__lshift+0xd4>)
 800a590:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a594:	f000 fb76 	bl	800ac84 <__assert_func>
 800a598:	3101      	adds	r1, #1
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	e7ee      	b.n	800a57c <__lshift+0x1c>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f100 0114 	add.w	r1, r0, #20
 800a5a4:	f100 0210 	add.w	r2, r0, #16
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	4553      	cmp	r3, sl
 800a5ac:	db33      	blt.n	800a616 <__lshift+0xb6>
 800a5ae:	6920      	ldr	r0, [r4, #16]
 800a5b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5b4:	f104 0314 	add.w	r3, r4, #20
 800a5b8:	f019 091f 	ands.w	r9, r9, #31
 800a5bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5c4:	d02b      	beq.n	800a61e <__lshift+0xbe>
 800a5c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ca:	468a      	mov	sl, r1
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a5d4:	4310      	orrs	r0, r2
 800a5d6:	f84a 0b04 	str.w	r0, [sl], #4
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	459c      	cmp	ip, r3
 800a5e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5e4:	d8f3      	bhi.n	800a5ce <__lshift+0x6e>
 800a5e6:	ebac 0304 	sub.w	r3, ip, r4
 800a5ea:	3b15      	subs	r3, #21
 800a5ec:	f023 0303 	bic.w	r3, r3, #3
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	f104 0015 	add.w	r0, r4, #21
 800a5f6:	4584      	cmp	ip, r0
 800a5f8:	bf38      	it	cc
 800a5fa:	2304      	movcc	r3, #4
 800a5fc:	50ca      	str	r2, [r1, r3]
 800a5fe:	b10a      	cbz	r2, 800a604 <__lshift+0xa4>
 800a600:	f108 0602 	add.w	r6, r8, #2
 800a604:	3e01      	subs	r6, #1
 800a606:	4638      	mov	r0, r7
 800a608:	612e      	str	r6, [r5, #16]
 800a60a:	4621      	mov	r1, r4
 800a60c:	f7ff fdda 	bl	800a1c4 <_Bfree>
 800a610:	4628      	mov	r0, r5
 800a612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a616:	f842 0f04 	str.w	r0, [r2, #4]!
 800a61a:	3301      	adds	r3, #1
 800a61c:	e7c5      	b.n	800a5aa <__lshift+0x4a>
 800a61e:	3904      	subs	r1, #4
 800a620:	f853 2b04 	ldr.w	r2, [r3], #4
 800a624:	f841 2f04 	str.w	r2, [r1, #4]!
 800a628:	459c      	cmp	ip, r3
 800a62a:	d8f9      	bhi.n	800a620 <__lshift+0xc0>
 800a62c:	e7ea      	b.n	800a604 <__lshift+0xa4>
 800a62e:	bf00      	nop
 800a630:	0800f8e0 	.word	0x0800f8e0
 800a634:	0800f8f1 	.word	0x0800f8f1

0800a638 <__mcmp>:
 800a638:	690a      	ldr	r2, [r1, #16]
 800a63a:	4603      	mov	r3, r0
 800a63c:	6900      	ldr	r0, [r0, #16]
 800a63e:	1a80      	subs	r0, r0, r2
 800a640:	b530      	push	{r4, r5, lr}
 800a642:	d10e      	bne.n	800a662 <__mcmp+0x2a>
 800a644:	3314      	adds	r3, #20
 800a646:	3114      	adds	r1, #20
 800a648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a64c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a658:	4295      	cmp	r5, r2
 800a65a:	d003      	beq.n	800a664 <__mcmp+0x2c>
 800a65c:	d205      	bcs.n	800a66a <__mcmp+0x32>
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	bd30      	pop	{r4, r5, pc}
 800a664:	42a3      	cmp	r3, r4
 800a666:	d3f3      	bcc.n	800a650 <__mcmp+0x18>
 800a668:	e7fb      	b.n	800a662 <__mcmp+0x2a>
 800a66a:	2001      	movs	r0, #1
 800a66c:	e7f9      	b.n	800a662 <__mcmp+0x2a>
	...

0800a670 <__mdiff>:
 800a670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4689      	mov	r9, r1
 800a676:	4606      	mov	r6, r0
 800a678:	4611      	mov	r1, r2
 800a67a:	4648      	mov	r0, r9
 800a67c:	4614      	mov	r4, r2
 800a67e:	f7ff ffdb 	bl	800a638 <__mcmp>
 800a682:	1e05      	subs	r5, r0, #0
 800a684:	d112      	bne.n	800a6ac <__mdiff+0x3c>
 800a686:	4629      	mov	r1, r5
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fd5b 	bl	800a144 <_Balloc>
 800a68e:	4602      	mov	r2, r0
 800a690:	b928      	cbnz	r0, 800a69e <__mdiff+0x2e>
 800a692:	4b3f      	ldr	r3, [pc, #252]	@ (800a790 <__mdiff+0x120>)
 800a694:	f240 2137 	movw	r1, #567	@ 0x237
 800a698:	483e      	ldr	r0, [pc, #248]	@ (800a794 <__mdiff+0x124>)
 800a69a:	f000 faf3 	bl	800ac84 <__assert_func>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	b003      	add	sp, #12
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	bfbc      	itt	lt
 800a6ae:	464b      	movlt	r3, r9
 800a6b0:	46a1      	movlt	r9, r4
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6b8:	bfba      	itte	lt
 800a6ba:	461c      	movlt	r4, r3
 800a6bc:	2501      	movlt	r5, #1
 800a6be:	2500      	movge	r5, #0
 800a6c0:	f7ff fd40 	bl	800a144 <_Balloc>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	b918      	cbnz	r0, 800a6d0 <__mdiff+0x60>
 800a6c8:	4b31      	ldr	r3, [pc, #196]	@ (800a790 <__mdiff+0x120>)
 800a6ca:	f240 2145 	movw	r1, #581	@ 0x245
 800a6ce:	e7e3      	b.n	800a698 <__mdiff+0x28>
 800a6d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6d4:	6926      	ldr	r6, [r4, #16]
 800a6d6:	60c5      	str	r5, [r0, #12]
 800a6d8:	f109 0310 	add.w	r3, r9, #16
 800a6dc:	f109 0514 	add.w	r5, r9, #20
 800a6e0:	f104 0e14 	add.w	lr, r4, #20
 800a6e4:	f100 0b14 	add.w	fp, r0, #20
 800a6e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	46d9      	mov	r9, fp
 800a6f4:	f04f 0c00 	mov.w	ip, #0
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	fa1f f38a 	uxth.w	r3, sl
 800a708:	4619      	mov	r1, r3
 800a70a:	b283      	uxth	r3, r0
 800a70c:	1acb      	subs	r3, r1, r3
 800a70e:	0c00      	lsrs	r0, r0, #16
 800a710:	4463      	add	r3, ip
 800a712:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a716:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a720:	4576      	cmp	r6, lr
 800a722:	f849 3b04 	str.w	r3, [r9], #4
 800a726:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a72a:	d8e5      	bhi.n	800a6f8 <__mdiff+0x88>
 800a72c:	1b33      	subs	r3, r6, r4
 800a72e:	3b15      	subs	r3, #21
 800a730:	f023 0303 	bic.w	r3, r3, #3
 800a734:	3415      	adds	r4, #21
 800a736:	3304      	adds	r3, #4
 800a738:	42a6      	cmp	r6, r4
 800a73a:	bf38      	it	cc
 800a73c:	2304      	movcc	r3, #4
 800a73e:	441d      	add	r5, r3
 800a740:	445b      	add	r3, fp
 800a742:	461e      	mov	r6, r3
 800a744:	462c      	mov	r4, r5
 800a746:	4544      	cmp	r4, r8
 800a748:	d30e      	bcc.n	800a768 <__mdiff+0xf8>
 800a74a:	f108 0103 	add.w	r1, r8, #3
 800a74e:	1b49      	subs	r1, r1, r5
 800a750:	f021 0103 	bic.w	r1, r1, #3
 800a754:	3d03      	subs	r5, #3
 800a756:	45a8      	cmp	r8, r5
 800a758:	bf38      	it	cc
 800a75a:	2100      	movcc	r1, #0
 800a75c:	440b      	add	r3, r1
 800a75e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a762:	b191      	cbz	r1, 800a78a <__mdiff+0x11a>
 800a764:	6117      	str	r7, [r2, #16]
 800a766:	e79d      	b.n	800a6a4 <__mdiff+0x34>
 800a768:	f854 1b04 	ldr.w	r1, [r4], #4
 800a76c:	46e6      	mov	lr, ip
 800a76e:	0c08      	lsrs	r0, r1, #16
 800a770:	fa1c fc81 	uxtah	ip, ip, r1
 800a774:	4471      	add	r1, lr
 800a776:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a77a:	b289      	uxth	r1, r1
 800a77c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a780:	f846 1b04 	str.w	r1, [r6], #4
 800a784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a788:	e7dd      	b.n	800a746 <__mdiff+0xd6>
 800a78a:	3f01      	subs	r7, #1
 800a78c:	e7e7      	b.n	800a75e <__mdiff+0xee>
 800a78e:	bf00      	nop
 800a790:	0800f8e0 	.word	0x0800f8e0
 800a794:	0800f8f1 	.word	0x0800f8f1

0800a798 <__d2b>:
 800a798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a79c:	460f      	mov	r7, r1
 800a79e:	2101      	movs	r1, #1
 800a7a0:	ec59 8b10 	vmov	r8, r9, d0
 800a7a4:	4616      	mov	r6, r2
 800a7a6:	f7ff fccd 	bl	800a144 <_Balloc>
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	b930      	cbnz	r0, 800a7bc <__d2b+0x24>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	4b23      	ldr	r3, [pc, #140]	@ (800a840 <__d2b+0xa8>)
 800a7b2:	4824      	ldr	r0, [pc, #144]	@ (800a844 <__d2b+0xac>)
 800a7b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7b8:	f000 fa64 	bl	800ac84 <__assert_func>
 800a7bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7c4:	b10d      	cbz	r5, 800a7ca <__d2b+0x32>
 800a7c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	f1b8 0300 	subs.w	r3, r8, #0
 800a7d0:	d023      	beq.n	800a81a <__d2b+0x82>
 800a7d2:	4668      	mov	r0, sp
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	f7ff fd7c 	bl	800a2d2 <__lo0bits>
 800a7da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7de:	b1d0      	cbz	r0, 800a816 <__d2b+0x7e>
 800a7e0:	f1c0 0320 	rsb	r3, r0, #32
 800a7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	40c2      	lsrs	r2, r0
 800a7ec:	6163      	str	r3, [r4, #20]
 800a7ee:	9201      	str	r2, [sp, #4]
 800a7f0:	9b01      	ldr	r3, [sp, #4]
 800a7f2:	61a3      	str	r3, [r4, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bf0c      	ite	eq
 800a7f8:	2201      	moveq	r2, #1
 800a7fa:	2202      	movne	r2, #2
 800a7fc:	6122      	str	r2, [r4, #16]
 800a7fe:	b1a5      	cbz	r5, 800a82a <__d2b+0x92>
 800a800:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a804:	4405      	add	r5, r0
 800a806:	603d      	str	r5, [r7, #0]
 800a808:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a80c:	6030      	str	r0, [r6, #0]
 800a80e:	4620      	mov	r0, r4
 800a810:	b003      	add	sp, #12
 800a812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a816:	6161      	str	r1, [r4, #20]
 800a818:	e7ea      	b.n	800a7f0 <__d2b+0x58>
 800a81a:	a801      	add	r0, sp, #4
 800a81c:	f7ff fd59 	bl	800a2d2 <__lo0bits>
 800a820:	9b01      	ldr	r3, [sp, #4]
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	3020      	adds	r0, #32
 800a826:	2201      	movs	r2, #1
 800a828:	e7e8      	b.n	800a7fc <__d2b+0x64>
 800a82a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a82e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a832:	6038      	str	r0, [r7, #0]
 800a834:	6918      	ldr	r0, [r3, #16]
 800a836:	f7ff fd2d 	bl	800a294 <__hi0bits>
 800a83a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a83e:	e7e5      	b.n	800a80c <__d2b+0x74>
 800a840:	0800f8e0 	.word	0x0800f8e0
 800a844:	0800f8f1 	.word	0x0800f8f1

0800a848 <__ssputs_r>:
 800a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84c:	688e      	ldr	r6, [r1, #8]
 800a84e:	461f      	mov	r7, r3
 800a850:	42be      	cmp	r6, r7
 800a852:	680b      	ldr	r3, [r1, #0]
 800a854:	4682      	mov	sl, r0
 800a856:	460c      	mov	r4, r1
 800a858:	4690      	mov	r8, r2
 800a85a:	d82d      	bhi.n	800a8b8 <__ssputs_r+0x70>
 800a85c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a864:	d026      	beq.n	800a8b4 <__ssputs_r+0x6c>
 800a866:	6965      	ldr	r5, [r4, #20]
 800a868:	6909      	ldr	r1, [r1, #16]
 800a86a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a86e:	eba3 0901 	sub.w	r9, r3, r1
 800a872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a876:	1c7b      	adds	r3, r7, #1
 800a878:	444b      	add	r3, r9
 800a87a:	106d      	asrs	r5, r5, #1
 800a87c:	429d      	cmp	r5, r3
 800a87e:	bf38      	it	cc
 800a880:	461d      	movcc	r5, r3
 800a882:	0553      	lsls	r3, r2, #21
 800a884:	d527      	bpl.n	800a8d6 <__ssputs_r+0x8e>
 800a886:	4629      	mov	r1, r5
 800a888:	f7fd ff1c 	bl	80086c4 <_malloc_r>
 800a88c:	4606      	mov	r6, r0
 800a88e:	b360      	cbz	r0, 800a8ea <__ssputs_r+0xa2>
 800a890:	6921      	ldr	r1, [r4, #16]
 800a892:	464a      	mov	r2, r9
 800a894:	f7fe fdaf 	bl	80093f6 <memcpy>
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a2:	81a3      	strh	r3, [r4, #12]
 800a8a4:	6126      	str	r6, [r4, #16]
 800a8a6:	6165      	str	r5, [r4, #20]
 800a8a8:	444e      	add	r6, r9
 800a8aa:	eba5 0509 	sub.w	r5, r5, r9
 800a8ae:	6026      	str	r6, [r4, #0]
 800a8b0:	60a5      	str	r5, [r4, #8]
 800a8b2:	463e      	mov	r6, r7
 800a8b4:	42be      	cmp	r6, r7
 800a8b6:	d900      	bls.n	800a8ba <__ssputs_r+0x72>
 800a8b8:	463e      	mov	r6, r7
 800a8ba:	6820      	ldr	r0, [r4, #0]
 800a8bc:	4632      	mov	r2, r6
 800a8be:	4641      	mov	r1, r8
 800a8c0:	f000 f9c6 	bl	800ac50 <memmove>
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	1b9b      	subs	r3, r3, r6
 800a8c8:	60a3      	str	r3, [r4, #8]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	4433      	add	r3, r6
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	f000 fa18 	bl	800ad0c <_realloc_r>
 800a8dc:	4606      	mov	r6, r0
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d1e0      	bne.n	800a8a4 <__ssputs_r+0x5c>
 800a8e2:	6921      	ldr	r1, [r4, #16]
 800a8e4:	4650      	mov	r0, sl
 800a8e6:	f7ff fbe3 	bl	800a0b0 <_free_r>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	f8ca 3000 	str.w	r3, [sl]
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	e7e9      	b.n	800a8d2 <__ssputs_r+0x8a>
	...

0800a900 <_svfiprintf_r>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	4698      	mov	r8, r3
 800a906:	898b      	ldrh	r3, [r1, #12]
 800a908:	061b      	lsls	r3, r3, #24
 800a90a:	b09d      	sub	sp, #116	@ 0x74
 800a90c:	4607      	mov	r7, r0
 800a90e:	460d      	mov	r5, r1
 800a910:	4614      	mov	r4, r2
 800a912:	d510      	bpl.n	800a936 <_svfiprintf_r+0x36>
 800a914:	690b      	ldr	r3, [r1, #16]
 800a916:	b973      	cbnz	r3, 800a936 <_svfiprintf_r+0x36>
 800a918:	2140      	movs	r1, #64	@ 0x40
 800a91a:	f7fd fed3 	bl	80086c4 <_malloc_r>
 800a91e:	6028      	str	r0, [r5, #0]
 800a920:	6128      	str	r0, [r5, #16]
 800a922:	b930      	cbnz	r0, 800a932 <_svfiprintf_r+0x32>
 800a924:	230c      	movs	r3, #12
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	b01d      	add	sp, #116	@ 0x74
 800a92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a932:	2340      	movs	r3, #64	@ 0x40
 800a934:	616b      	str	r3, [r5, #20]
 800a936:	2300      	movs	r3, #0
 800a938:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93a:	2320      	movs	r3, #32
 800a93c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a940:	f8cd 800c 	str.w	r8, [sp, #12]
 800a944:	2330      	movs	r3, #48	@ 0x30
 800a946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aae4 <_svfiprintf_r+0x1e4>
 800a94a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a94e:	f04f 0901 	mov.w	r9, #1
 800a952:	4623      	mov	r3, r4
 800a954:	469a      	mov	sl, r3
 800a956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95a:	b10a      	cbz	r2, 800a960 <_svfiprintf_r+0x60>
 800a95c:	2a25      	cmp	r2, #37	@ 0x25
 800a95e:	d1f9      	bne.n	800a954 <_svfiprintf_r+0x54>
 800a960:	ebba 0b04 	subs.w	fp, sl, r4
 800a964:	d00b      	beq.n	800a97e <_svfiprintf_r+0x7e>
 800a966:	465b      	mov	r3, fp
 800a968:	4622      	mov	r2, r4
 800a96a:	4629      	mov	r1, r5
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff ff6b 	bl	800a848 <__ssputs_r>
 800a972:	3001      	adds	r0, #1
 800a974:	f000 80a7 	beq.w	800aac6 <_svfiprintf_r+0x1c6>
 800a978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a97a:	445a      	add	r2, fp
 800a97c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a97e:	f89a 3000 	ldrb.w	r3, [sl]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 809f 	beq.w	800aac6 <_svfiprintf_r+0x1c6>
 800a988:	2300      	movs	r3, #0
 800a98a:	f04f 32ff 	mov.w	r2, #4294967295
 800a98e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a992:	f10a 0a01 	add.w	sl, sl, #1
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	9307      	str	r3, [sp, #28]
 800a99a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a99e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9a0:	4654      	mov	r4, sl
 800a9a2:	2205      	movs	r2, #5
 800a9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a8:	484e      	ldr	r0, [pc, #312]	@ (800aae4 <_svfiprintf_r+0x1e4>)
 800a9aa:	f7f5 fc21 	bl	80001f0 <memchr>
 800a9ae:	9a04      	ldr	r2, [sp, #16]
 800a9b0:	b9d8      	cbnz	r0, 800a9ea <_svfiprintf_r+0xea>
 800a9b2:	06d0      	lsls	r0, r2, #27
 800a9b4:	bf44      	itt	mi
 800a9b6:	2320      	movmi	r3, #32
 800a9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9bc:	0711      	lsls	r1, r2, #28
 800a9be:	bf44      	itt	mi
 800a9c0:	232b      	movmi	r3, #43	@ 0x2b
 800a9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9cc:	d015      	beq.n	800a9fa <_svfiprintf_r+0xfa>
 800a9ce:	9a07      	ldr	r2, [sp, #28]
 800a9d0:	4654      	mov	r4, sl
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	f04f 0c0a 	mov.w	ip, #10
 800a9d8:	4621      	mov	r1, r4
 800a9da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9de:	3b30      	subs	r3, #48	@ 0x30
 800a9e0:	2b09      	cmp	r3, #9
 800a9e2:	d94b      	bls.n	800aa7c <_svfiprintf_r+0x17c>
 800a9e4:	b1b0      	cbz	r0, 800aa14 <_svfiprintf_r+0x114>
 800a9e6:	9207      	str	r2, [sp, #28]
 800a9e8:	e014      	b.n	800aa14 <_svfiprintf_r+0x114>
 800a9ea:	eba0 0308 	sub.w	r3, r0, r8
 800a9ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	46a2      	mov	sl, r4
 800a9f8:	e7d2      	b.n	800a9a0 <_svfiprintf_r+0xa0>
 800a9fa:	9b03      	ldr	r3, [sp, #12]
 800a9fc:	1d19      	adds	r1, r3, #4
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	9103      	str	r1, [sp, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bfbb      	ittet	lt
 800aa06:	425b      	neglt	r3, r3
 800aa08:	f042 0202 	orrlt.w	r2, r2, #2
 800aa0c:	9307      	strge	r3, [sp, #28]
 800aa0e:	9307      	strlt	r3, [sp, #28]
 800aa10:	bfb8      	it	lt
 800aa12:	9204      	strlt	r2, [sp, #16]
 800aa14:	7823      	ldrb	r3, [r4, #0]
 800aa16:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa18:	d10a      	bne.n	800aa30 <_svfiprintf_r+0x130>
 800aa1a:	7863      	ldrb	r3, [r4, #1]
 800aa1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa1e:	d132      	bne.n	800aa86 <_svfiprintf_r+0x186>
 800aa20:	9b03      	ldr	r3, [sp, #12]
 800aa22:	1d1a      	adds	r2, r3, #4
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	9203      	str	r2, [sp, #12]
 800aa28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa2c:	3402      	adds	r4, #2
 800aa2e:	9305      	str	r3, [sp, #20]
 800aa30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aaf4 <_svfiprintf_r+0x1f4>
 800aa34:	7821      	ldrb	r1, [r4, #0]
 800aa36:	2203      	movs	r2, #3
 800aa38:	4650      	mov	r0, sl
 800aa3a:	f7f5 fbd9 	bl	80001f0 <memchr>
 800aa3e:	b138      	cbz	r0, 800aa50 <_svfiprintf_r+0x150>
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	eba0 000a 	sub.w	r0, r0, sl
 800aa46:	2240      	movs	r2, #64	@ 0x40
 800aa48:	4082      	lsls	r2, r0
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	3401      	adds	r4, #1
 800aa4e:	9304      	str	r3, [sp, #16]
 800aa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa54:	4824      	ldr	r0, [pc, #144]	@ (800aae8 <_svfiprintf_r+0x1e8>)
 800aa56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	f7f5 fbc8 	bl	80001f0 <memchr>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d036      	beq.n	800aad2 <_svfiprintf_r+0x1d2>
 800aa64:	4b21      	ldr	r3, [pc, #132]	@ (800aaec <_svfiprintf_r+0x1ec>)
 800aa66:	bb1b      	cbnz	r3, 800aab0 <_svfiprintf_r+0x1b0>
 800aa68:	9b03      	ldr	r3, [sp, #12]
 800aa6a:	3307      	adds	r3, #7
 800aa6c:	f023 0307 	bic.w	r3, r3, #7
 800aa70:	3308      	adds	r3, #8
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa76:	4433      	add	r3, r6
 800aa78:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7a:	e76a      	b.n	800a952 <_svfiprintf_r+0x52>
 800aa7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa80:	460c      	mov	r4, r1
 800aa82:	2001      	movs	r0, #1
 800aa84:	e7a8      	b.n	800a9d8 <_svfiprintf_r+0xd8>
 800aa86:	2300      	movs	r3, #0
 800aa88:	3401      	adds	r4, #1
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	f04f 0c0a 	mov.w	ip, #10
 800aa92:	4620      	mov	r0, r4
 800aa94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa98:	3a30      	subs	r2, #48	@ 0x30
 800aa9a:	2a09      	cmp	r2, #9
 800aa9c:	d903      	bls.n	800aaa6 <_svfiprintf_r+0x1a6>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0c6      	beq.n	800aa30 <_svfiprintf_r+0x130>
 800aaa2:	9105      	str	r1, [sp, #20]
 800aaa4:	e7c4      	b.n	800aa30 <_svfiprintf_r+0x130>
 800aaa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaaa:	4604      	mov	r4, r0
 800aaac:	2301      	movs	r3, #1
 800aaae:	e7f0      	b.n	800aa92 <_svfiprintf_r+0x192>
 800aab0:	ab03      	add	r3, sp, #12
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	462a      	mov	r2, r5
 800aab6:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf0 <_svfiprintf_r+0x1f0>)
 800aab8:	a904      	add	r1, sp, #16
 800aaba:	4638      	mov	r0, r7
 800aabc:	f7fd ff2e 	bl	800891c <_printf_float>
 800aac0:	1c42      	adds	r2, r0, #1
 800aac2:	4606      	mov	r6, r0
 800aac4:	d1d6      	bne.n	800aa74 <_svfiprintf_r+0x174>
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	065b      	lsls	r3, r3, #25
 800aaca:	f53f af2d 	bmi.w	800a928 <_svfiprintf_r+0x28>
 800aace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aad0:	e72c      	b.n	800a92c <_svfiprintf_r+0x2c>
 800aad2:	ab03      	add	r3, sp, #12
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	462a      	mov	r2, r5
 800aad8:	4b05      	ldr	r3, [pc, #20]	@ (800aaf0 <_svfiprintf_r+0x1f0>)
 800aada:	a904      	add	r1, sp, #16
 800aadc:	4638      	mov	r0, r7
 800aade:	f7fe f9b5 	bl	8008e4c <_printf_i>
 800aae2:	e7ed      	b.n	800aac0 <_svfiprintf_r+0x1c0>
 800aae4:	0800fa48 	.word	0x0800fa48
 800aae8:	0800fa52 	.word	0x0800fa52
 800aaec:	0800891d 	.word	0x0800891d
 800aaf0:	0800a849 	.word	0x0800a849
 800aaf4:	0800fa4e 	.word	0x0800fa4e

0800aaf8 <__sflush_r>:
 800aaf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	0716      	lsls	r6, r2, #28
 800ab02:	4605      	mov	r5, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	d454      	bmi.n	800abb2 <__sflush_r+0xba>
 800ab08:	684b      	ldr	r3, [r1, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	dc02      	bgt.n	800ab14 <__sflush_r+0x1c>
 800ab0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dd48      	ble.n	800aba6 <__sflush_r+0xae>
 800ab14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	d045      	beq.n	800aba6 <__sflush_r+0xae>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab20:	682f      	ldr	r7, [r5, #0]
 800ab22:	6a21      	ldr	r1, [r4, #32]
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	d030      	beq.n	800ab8a <__sflush_r+0x92>
 800ab28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	0759      	lsls	r1, r3, #29
 800ab2e:	d505      	bpl.n	800ab3c <__sflush_r+0x44>
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	1ad2      	subs	r2, r2, r3
 800ab34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab36:	b10b      	cbz	r3, 800ab3c <__sflush_r+0x44>
 800ab38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab40:	6a21      	ldr	r1, [r4, #32]
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b0      	blx	r6
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	d106      	bne.n	800ab5a <__sflush_r+0x62>
 800ab4c:	6829      	ldr	r1, [r5, #0]
 800ab4e:	291d      	cmp	r1, #29
 800ab50:	d82b      	bhi.n	800abaa <__sflush_r+0xb2>
 800ab52:	4a2a      	ldr	r2, [pc, #168]	@ (800abfc <__sflush_r+0x104>)
 800ab54:	410a      	asrs	r2, r1
 800ab56:	07d6      	lsls	r6, r2, #31
 800ab58:	d427      	bmi.n	800abaa <__sflush_r+0xb2>
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6062      	str	r2, [r4, #4]
 800ab5e:	04d9      	lsls	r1, r3, #19
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	d504      	bpl.n	800ab70 <__sflush_r+0x78>
 800ab66:	1c42      	adds	r2, r0, #1
 800ab68:	d101      	bne.n	800ab6e <__sflush_r+0x76>
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	b903      	cbnz	r3, 800ab70 <__sflush_r+0x78>
 800ab6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab72:	602f      	str	r7, [r5, #0]
 800ab74:	b1b9      	cbz	r1, 800aba6 <__sflush_r+0xae>
 800ab76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	d002      	beq.n	800ab84 <__sflush_r+0x8c>
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7ff fa96 	bl	800a0b0 <_free_r>
 800ab84:	2300      	movs	r3, #0
 800ab86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab88:	e00d      	b.n	800aba6 <__sflush_r+0xae>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b0      	blx	r6
 800ab90:	4602      	mov	r2, r0
 800ab92:	1c50      	adds	r0, r2, #1
 800ab94:	d1c9      	bne.n	800ab2a <__sflush_r+0x32>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0c6      	beq.n	800ab2a <__sflush_r+0x32>
 800ab9c:	2b1d      	cmp	r3, #29
 800ab9e:	d001      	beq.n	800aba4 <__sflush_r+0xac>
 800aba0:	2b16      	cmp	r3, #22
 800aba2:	d11e      	bne.n	800abe2 <__sflush_r+0xea>
 800aba4:	602f      	str	r7, [r5, #0]
 800aba6:	2000      	movs	r0, #0
 800aba8:	e022      	b.n	800abf0 <__sflush_r+0xf8>
 800abaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abae:	b21b      	sxth	r3, r3
 800abb0:	e01b      	b.n	800abea <__sflush_r+0xf2>
 800abb2:	690f      	ldr	r7, [r1, #16]
 800abb4:	2f00      	cmp	r7, #0
 800abb6:	d0f6      	beq.n	800aba6 <__sflush_r+0xae>
 800abb8:	0793      	lsls	r3, r2, #30
 800abba:	680e      	ldr	r6, [r1, #0]
 800abbc:	bf08      	it	eq
 800abbe:	694b      	ldreq	r3, [r1, #20]
 800abc0:	600f      	str	r7, [r1, #0]
 800abc2:	bf18      	it	ne
 800abc4:	2300      	movne	r3, #0
 800abc6:	eba6 0807 	sub.w	r8, r6, r7
 800abca:	608b      	str	r3, [r1, #8]
 800abcc:	f1b8 0f00 	cmp.w	r8, #0
 800abd0:	dde9      	ble.n	800aba6 <__sflush_r+0xae>
 800abd2:	6a21      	ldr	r1, [r4, #32]
 800abd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abd6:	4643      	mov	r3, r8
 800abd8:	463a      	mov	r2, r7
 800abda:	4628      	mov	r0, r5
 800abdc:	47b0      	blx	r6
 800abde:	2800      	cmp	r0, #0
 800abe0:	dc08      	bgt.n	800abf4 <__sflush_r+0xfc>
 800abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf4:	4407      	add	r7, r0
 800abf6:	eba8 0800 	sub.w	r8, r8, r0
 800abfa:	e7e7      	b.n	800abcc <__sflush_r+0xd4>
 800abfc:	dfbffffe 	.word	0xdfbffffe

0800ac00 <_fflush_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	690b      	ldr	r3, [r1, #16]
 800ac04:	4605      	mov	r5, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	b913      	cbnz	r3, 800ac10 <_fflush_r+0x10>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	b118      	cbz	r0, 800ac1a <_fflush_r+0x1a>
 800ac12:	6a03      	ldr	r3, [r0, #32]
 800ac14:	b90b      	cbnz	r3, 800ac1a <_fflush_r+0x1a>
 800ac16:	f7fe fac5 	bl	80091a4 <__sinit>
 800ac1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0f3      	beq.n	800ac0a <_fflush_r+0xa>
 800ac22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac24:	07d0      	lsls	r0, r2, #31
 800ac26:	d404      	bmi.n	800ac32 <_fflush_r+0x32>
 800ac28:	0599      	lsls	r1, r3, #22
 800ac2a:	d402      	bmi.n	800ac32 <_fflush_r+0x32>
 800ac2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac2e:	f7fe fbe0 	bl	80093f2 <__retarget_lock_acquire_recursive>
 800ac32:	4628      	mov	r0, r5
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7ff ff5f 	bl	800aaf8 <__sflush_r>
 800ac3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac3c:	07da      	lsls	r2, r3, #31
 800ac3e:	4605      	mov	r5, r0
 800ac40:	d4e4      	bmi.n	800ac0c <_fflush_r+0xc>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	059b      	lsls	r3, r3, #22
 800ac46:	d4e1      	bmi.n	800ac0c <_fflush_r+0xc>
 800ac48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4a:	f7fe fbd3 	bl	80093f4 <__retarget_lock_release_recursive>
 800ac4e:	e7dd      	b.n	800ac0c <_fflush_r+0xc>

0800ac50 <memmove>:
 800ac50:	4288      	cmp	r0, r1
 800ac52:	b510      	push	{r4, lr}
 800ac54:	eb01 0402 	add.w	r4, r1, r2
 800ac58:	d902      	bls.n	800ac60 <memmove+0x10>
 800ac5a:	4284      	cmp	r4, r0
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	d807      	bhi.n	800ac70 <memmove+0x20>
 800ac60:	1e43      	subs	r3, r0, #1
 800ac62:	42a1      	cmp	r1, r4
 800ac64:	d008      	beq.n	800ac78 <memmove+0x28>
 800ac66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6e:	e7f8      	b.n	800ac62 <memmove+0x12>
 800ac70:	4402      	add	r2, r0
 800ac72:	4601      	mov	r1, r0
 800ac74:	428a      	cmp	r2, r1
 800ac76:	d100      	bne.n	800ac7a <memmove+0x2a>
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac82:	e7f7      	b.n	800ac74 <memmove+0x24>

0800ac84 <__assert_func>:
 800ac84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac86:	4614      	mov	r4, r2
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <__assert_func+0x2c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4605      	mov	r5, r0
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	b954      	cbnz	r4, 800acaa <__assert_func+0x26>
 800ac94:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <__assert_func+0x30>)
 800ac96:	461c      	mov	r4, r3
 800ac98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac9c:	9100      	str	r1, [sp, #0]
 800ac9e:	462b      	mov	r3, r5
 800aca0:	4905      	ldr	r1, [pc, #20]	@ (800acb8 <__assert_func+0x34>)
 800aca2:	f000 f86f 	bl	800ad84 <fiprintf>
 800aca6:	f000 f87f 	bl	800ada8 <abort>
 800acaa:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <__assert_func+0x38>)
 800acac:	e7f4      	b.n	800ac98 <__assert_func+0x14>
 800acae:	bf00      	nop
 800acb0:	20000170 	.word	0x20000170
 800acb4:	0800fa9e 	.word	0x0800fa9e
 800acb8:	0800fa70 	.word	0x0800fa70
 800acbc:	0800fa63 	.word	0x0800fa63

0800acc0 <_calloc_r>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	fba1 5402 	umull	r5, r4, r1, r2
 800acc6:	b93c      	cbnz	r4, 800acd8 <_calloc_r+0x18>
 800acc8:	4629      	mov	r1, r5
 800acca:	f7fd fcfb 	bl	80086c4 <_malloc_r>
 800acce:	4606      	mov	r6, r0
 800acd0:	b928      	cbnz	r0, 800acde <_calloc_r+0x1e>
 800acd2:	2600      	movs	r6, #0
 800acd4:	4630      	mov	r0, r6
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	220c      	movs	r2, #12
 800acda:	6002      	str	r2, [r0, #0]
 800acdc:	e7f9      	b.n	800acd2 <_calloc_r+0x12>
 800acde:	462a      	mov	r2, r5
 800ace0:	4621      	mov	r1, r4
 800ace2:	f7fe faf8 	bl	80092d6 <memset>
 800ace6:	e7f5      	b.n	800acd4 <_calloc_r+0x14>

0800ace8 <__ascii_mbtowc>:
 800ace8:	b082      	sub	sp, #8
 800acea:	b901      	cbnz	r1, 800acee <__ascii_mbtowc+0x6>
 800acec:	a901      	add	r1, sp, #4
 800acee:	b142      	cbz	r2, 800ad02 <__ascii_mbtowc+0x1a>
 800acf0:	b14b      	cbz	r3, 800ad06 <__ascii_mbtowc+0x1e>
 800acf2:	7813      	ldrb	r3, [r2, #0]
 800acf4:	600b      	str	r3, [r1, #0]
 800acf6:	7812      	ldrb	r2, [r2, #0]
 800acf8:	1e10      	subs	r0, r2, #0
 800acfa:	bf18      	it	ne
 800acfc:	2001      	movne	r0, #1
 800acfe:	b002      	add	sp, #8
 800ad00:	4770      	bx	lr
 800ad02:	4610      	mov	r0, r2
 800ad04:	e7fb      	b.n	800acfe <__ascii_mbtowc+0x16>
 800ad06:	f06f 0001 	mvn.w	r0, #1
 800ad0a:	e7f8      	b.n	800acfe <__ascii_mbtowc+0x16>

0800ad0c <_realloc_r>:
 800ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad10:	4680      	mov	r8, r0
 800ad12:	4615      	mov	r5, r2
 800ad14:	460c      	mov	r4, r1
 800ad16:	b921      	cbnz	r1, 800ad22 <_realloc_r+0x16>
 800ad18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	f7fd bcd1 	b.w	80086c4 <_malloc_r>
 800ad22:	b92a      	cbnz	r2, 800ad30 <_realloc_r+0x24>
 800ad24:	f7ff f9c4 	bl	800a0b0 <_free_r>
 800ad28:	2400      	movs	r4, #0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	f000 f841 	bl	800adb6 <_malloc_usable_size_r>
 800ad34:	4285      	cmp	r5, r0
 800ad36:	4606      	mov	r6, r0
 800ad38:	d802      	bhi.n	800ad40 <_realloc_r+0x34>
 800ad3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad3e:	d8f4      	bhi.n	800ad2a <_realloc_r+0x1e>
 800ad40:	4629      	mov	r1, r5
 800ad42:	4640      	mov	r0, r8
 800ad44:	f7fd fcbe 	bl	80086c4 <_malloc_r>
 800ad48:	4607      	mov	r7, r0
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d0ec      	beq.n	800ad28 <_realloc_r+0x1c>
 800ad4e:	42b5      	cmp	r5, r6
 800ad50:	462a      	mov	r2, r5
 800ad52:	4621      	mov	r1, r4
 800ad54:	bf28      	it	cs
 800ad56:	4632      	movcs	r2, r6
 800ad58:	f7fe fb4d 	bl	80093f6 <memcpy>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4640      	mov	r0, r8
 800ad60:	f7ff f9a6 	bl	800a0b0 <_free_r>
 800ad64:	463c      	mov	r4, r7
 800ad66:	e7e0      	b.n	800ad2a <_realloc_r+0x1e>

0800ad68 <__ascii_wctomb>:
 800ad68:	4603      	mov	r3, r0
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	b141      	cbz	r1, 800ad80 <__ascii_wctomb+0x18>
 800ad6e:	2aff      	cmp	r2, #255	@ 0xff
 800ad70:	d904      	bls.n	800ad7c <__ascii_wctomb+0x14>
 800ad72:	228a      	movs	r2, #138	@ 0x8a
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	4770      	bx	lr
 800ad7c:	700a      	strb	r2, [r1, #0]
 800ad7e:	2001      	movs	r0, #1
 800ad80:	4770      	bx	lr
	...

0800ad84 <fiprintf>:
 800ad84:	b40e      	push	{r1, r2, r3}
 800ad86:	b503      	push	{r0, r1, lr}
 800ad88:	4601      	mov	r1, r0
 800ad8a:	ab03      	add	r3, sp, #12
 800ad8c:	4805      	ldr	r0, [pc, #20]	@ (800ada4 <fiprintf+0x20>)
 800ad8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad92:	6800      	ldr	r0, [r0, #0]
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	f000 f83f 	bl	800ae18 <_vfiprintf_r>
 800ad9a:	b002      	add	sp, #8
 800ad9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada0:	b003      	add	sp, #12
 800ada2:	4770      	bx	lr
 800ada4:	20000170 	.word	0x20000170

0800ada8 <abort>:
 800ada8:	b508      	push	{r3, lr}
 800adaa:	2006      	movs	r0, #6
 800adac:	f000 fa08 	bl	800b1c0 <raise>
 800adb0:	2001      	movs	r0, #1
 800adb2:	f7f9 fd59 	bl	8004868 <_exit>

0800adb6 <_malloc_usable_size_r>:
 800adb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adba:	1f18      	subs	r0, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bfbc      	itt	lt
 800adc0:	580b      	ldrlt	r3, [r1, r0]
 800adc2:	18c0      	addlt	r0, r0, r3
 800adc4:	4770      	bx	lr

0800adc6 <__sfputc_r>:
 800adc6:	6893      	ldr	r3, [r2, #8]
 800adc8:	3b01      	subs	r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	b410      	push	{r4}
 800adce:	6093      	str	r3, [r2, #8]
 800add0:	da08      	bge.n	800ade4 <__sfputc_r+0x1e>
 800add2:	6994      	ldr	r4, [r2, #24]
 800add4:	42a3      	cmp	r3, r4
 800add6:	db01      	blt.n	800addc <__sfputc_r+0x16>
 800add8:	290a      	cmp	r1, #10
 800adda:	d103      	bne.n	800ade4 <__sfputc_r+0x1e>
 800addc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade0:	f000 b932 	b.w	800b048 <__swbuf_r>
 800ade4:	6813      	ldr	r3, [r2, #0]
 800ade6:	1c58      	adds	r0, r3, #1
 800ade8:	6010      	str	r0, [r2, #0]
 800adea:	7019      	strb	r1, [r3, #0]
 800adec:	4608      	mov	r0, r1
 800adee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <__sfputs_r>:
 800adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	4614      	mov	r4, r2
 800adfc:	18d5      	adds	r5, r2, r3
 800adfe:	42ac      	cmp	r4, r5
 800ae00:	d101      	bne.n	800ae06 <__sfputs_r+0x12>
 800ae02:	2000      	movs	r0, #0
 800ae04:	e007      	b.n	800ae16 <__sfputs_r+0x22>
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff ffda 	bl	800adc6 <__sfputc_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d1f3      	bne.n	800adfe <__sfputs_r+0xa>
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae18 <_vfiprintf_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	b09d      	sub	sp, #116	@ 0x74
 800ae20:	4614      	mov	r4, r2
 800ae22:	4698      	mov	r8, r3
 800ae24:	4606      	mov	r6, r0
 800ae26:	b118      	cbz	r0, 800ae30 <_vfiprintf_r+0x18>
 800ae28:	6a03      	ldr	r3, [r0, #32]
 800ae2a:	b90b      	cbnz	r3, 800ae30 <_vfiprintf_r+0x18>
 800ae2c:	f7fe f9ba 	bl	80091a4 <__sinit>
 800ae30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae32:	07d9      	lsls	r1, r3, #31
 800ae34:	d405      	bmi.n	800ae42 <_vfiprintf_r+0x2a>
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	059a      	lsls	r2, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_vfiprintf_r+0x2a>
 800ae3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae3e:	f7fe fad8 	bl	80093f2 <__retarget_lock_acquire_recursive>
 800ae42:	89ab      	ldrh	r3, [r5, #12]
 800ae44:	071b      	lsls	r3, r3, #28
 800ae46:	d501      	bpl.n	800ae4c <_vfiprintf_r+0x34>
 800ae48:	692b      	ldr	r3, [r5, #16]
 800ae4a:	b99b      	cbnz	r3, 800ae74 <_vfiprintf_r+0x5c>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f000 f938 	bl	800b0c4 <__swsetup_r>
 800ae54:	b170      	cbz	r0, 800ae74 <_vfiprintf_r+0x5c>
 800ae56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae58:	07dc      	lsls	r4, r3, #31
 800ae5a:	d504      	bpl.n	800ae66 <_vfiprintf_r+0x4e>
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	b01d      	add	sp, #116	@ 0x74
 800ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae66:	89ab      	ldrh	r3, [r5, #12]
 800ae68:	0598      	lsls	r0, r3, #22
 800ae6a:	d4f7      	bmi.n	800ae5c <_vfiprintf_r+0x44>
 800ae6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae6e:	f7fe fac1 	bl	80093f4 <__retarget_lock_release_recursive>
 800ae72:	e7f3      	b.n	800ae5c <_vfiprintf_r+0x44>
 800ae74:	2300      	movs	r3, #0
 800ae76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae78:	2320      	movs	r3, #32
 800ae7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae82:	2330      	movs	r3, #48	@ 0x30
 800ae84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b034 <_vfiprintf_r+0x21c>
 800ae88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae8c:	f04f 0901 	mov.w	r9, #1
 800ae90:	4623      	mov	r3, r4
 800ae92:	469a      	mov	sl, r3
 800ae94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae98:	b10a      	cbz	r2, 800ae9e <_vfiprintf_r+0x86>
 800ae9a:	2a25      	cmp	r2, #37	@ 0x25
 800ae9c:	d1f9      	bne.n	800ae92 <_vfiprintf_r+0x7a>
 800ae9e:	ebba 0b04 	subs.w	fp, sl, r4
 800aea2:	d00b      	beq.n	800aebc <_vfiprintf_r+0xa4>
 800aea4:	465b      	mov	r3, fp
 800aea6:	4622      	mov	r2, r4
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff ffa2 	bl	800adf4 <__sfputs_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	f000 80a7 	beq.w	800b004 <_vfiprintf_r+0x1ec>
 800aeb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeb8:	445a      	add	r2, fp
 800aeba:	9209      	str	r2, [sp, #36]	@ 0x24
 800aebc:	f89a 3000 	ldrb.w	r3, [sl]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 809f 	beq.w	800b004 <_vfiprintf_r+0x1ec>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f04f 32ff 	mov.w	r2, #4294967295
 800aecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed0:	f10a 0a01 	add.w	sl, sl, #1
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	9307      	str	r3, [sp, #28]
 800aed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aedc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aede:	4654      	mov	r4, sl
 800aee0:	2205      	movs	r2, #5
 800aee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee6:	4853      	ldr	r0, [pc, #332]	@ (800b034 <_vfiprintf_r+0x21c>)
 800aee8:	f7f5 f982 	bl	80001f0 <memchr>
 800aeec:	9a04      	ldr	r2, [sp, #16]
 800aeee:	b9d8      	cbnz	r0, 800af28 <_vfiprintf_r+0x110>
 800aef0:	06d1      	lsls	r1, r2, #27
 800aef2:	bf44      	itt	mi
 800aef4:	2320      	movmi	r3, #32
 800aef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aefa:	0713      	lsls	r3, r2, #28
 800aefc:	bf44      	itt	mi
 800aefe:	232b      	movmi	r3, #43	@ 0x2b
 800af00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af04:	f89a 3000 	ldrb.w	r3, [sl]
 800af08:	2b2a      	cmp	r3, #42	@ 0x2a
 800af0a:	d015      	beq.n	800af38 <_vfiprintf_r+0x120>
 800af0c:	9a07      	ldr	r2, [sp, #28]
 800af0e:	4654      	mov	r4, sl
 800af10:	2000      	movs	r0, #0
 800af12:	f04f 0c0a 	mov.w	ip, #10
 800af16:	4621      	mov	r1, r4
 800af18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af1c:	3b30      	subs	r3, #48	@ 0x30
 800af1e:	2b09      	cmp	r3, #9
 800af20:	d94b      	bls.n	800afba <_vfiprintf_r+0x1a2>
 800af22:	b1b0      	cbz	r0, 800af52 <_vfiprintf_r+0x13a>
 800af24:	9207      	str	r2, [sp, #28]
 800af26:	e014      	b.n	800af52 <_vfiprintf_r+0x13a>
 800af28:	eba0 0308 	sub.w	r3, r0, r8
 800af2c:	fa09 f303 	lsl.w	r3, r9, r3
 800af30:	4313      	orrs	r3, r2
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	46a2      	mov	sl, r4
 800af36:	e7d2      	b.n	800aede <_vfiprintf_r+0xc6>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	1d19      	adds	r1, r3, #4
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	9103      	str	r1, [sp, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	bfbb      	ittet	lt
 800af44:	425b      	neglt	r3, r3
 800af46:	f042 0202 	orrlt.w	r2, r2, #2
 800af4a:	9307      	strge	r3, [sp, #28]
 800af4c:	9307      	strlt	r3, [sp, #28]
 800af4e:	bfb8      	it	lt
 800af50:	9204      	strlt	r2, [sp, #16]
 800af52:	7823      	ldrb	r3, [r4, #0]
 800af54:	2b2e      	cmp	r3, #46	@ 0x2e
 800af56:	d10a      	bne.n	800af6e <_vfiprintf_r+0x156>
 800af58:	7863      	ldrb	r3, [r4, #1]
 800af5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af5c:	d132      	bne.n	800afc4 <_vfiprintf_r+0x1ac>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	1d1a      	adds	r2, r3, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	9203      	str	r2, [sp, #12]
 800af66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af6a:	3402      	adds	r4, #2
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b044 <_vfiprintf_r+0x22c>
 800af72:	7821      	ldrb	r1, [r4, #0]
 800af74:	2203      	movs	r2, #3
 800af76:	4650      	mov	r0, sl
 800af78:	f7f5 f93a 	bl	80001f0 <memchr>
 800af7c:	b138      	cbz	r0, 800af8e <_vfiprintf_r+0x176>
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	eba0 000a 	sub.w	r0, r0, sl
 800af84:	2240      	movs	r2, #64	@ 0x40
 800af86:	4082      	lsls	r2, r0
 800af88:	4313      	orrs	r3, r2
 800af8a:	3401      	adds	r4, #1
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af92:	4829      	ldr	r0, [pc, #164]	@ (800b038 <_vfiprintf_r+0x220>)
 800af94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af98:	2206      	movs	r2, #6
 800af9a:	f7f5 f929 	bl	80001f0 <memchr>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d03f      	beq.n	800b022 <_vfiprintf_r+0x20a>
 800afa2:	4b26      	ldr	r3, [pc, #152]	@ (800b03c <_vfiprintf_r+0x224>)
 800afa4:	bb1b      	cbnz	r3, 800afee <_vfiprintf_r+0x1d6>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	3307      	adds	r3, #7
 800afaa:	f023 0307 	bic.w	r3, r3, #7
 800afae:	3308      	adds	r3, #8
 800afb0:	9303      	str	r3, [sp, #12]
 800afb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb4:	443b      	add	r3, r7
 800afb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb8:	e76a      	b.n	800ae90 <_vfiprintf_r+0x78>
 800afba:	fb0c 3202 	mla	r2, ip, r2, r3
 800afbe:	460c      	mov	r4, r1
 800afc0:	2001      	movs	r0, #1
 800afc2:	e7a8      	b.n	800af16 <_vfiprintf_r+0xfe>
 800afc4:	2300      	movs	r3, #0
 800afc6:	3401      	adds	r4, #1
 800afc8:	9305      	str	r3, [sp, #20]
 800afca:	4619      	mov	r1, r3
 800afcc:	f04f 0c0a 	mov.w	ip, #10
 800afd0:	4620      	mov	r0, r4
 800afd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afd6:	3a30      	subs	r2, #48	@ 0x30
 800afd8:	2a09      	cmp	r2, #9
 800afda:	d903      	bls.n	800afe4 <_vfiprintf_r+0x1cc>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0c6      	beq.n	800af6e <_vfiprintf_r+0x156>
 800afe0:	9105      	str	r1, [sp, #20]
 800afe2:	e7c4      	b.n	800af6e <_vfiprintf_r+0x156>
 800afe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afe8:	4604      	mov	r4, r0
 800afea:	2301      	movs	r3, #1
 800afec:	e7f0      	b.n	800afd0 <_vfiprintf_r+0x1b8>
 800afee:	ab03      	add	r3, sp, #12
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	462a      	mov	r2, r5
 800aff4:	4b12      	ldr	r3, [pc, #72]	@ (800b040 <_vfiprintf_r+0x228>)
 800aff6:	a904      	add	r1, sp, #16
 800aff8:	4630      	mov	r0, r6
 800affa:	f7fd fc8f 	bl	800891c <_printf_float>
 800affe:	4607      	mov	r7, r0
 800b000:	1c78      	adds	r0, r7, #1
 800b002:	d1d6      	bne.n	800afb2 <_vfiprintf_r+0x19a>
 800b004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b006:	07d9      	lsls	r1, r3, #31
 800b008:	d405      	bmi.n	800b016 <_vfiprintf_r+0x1fe>
 800b00a:	89ab      	ldrh	r3, [r5, #12]
 800b00c:	059a      	lsls	r2, r3, #22
 800b00e:	d402      	bmi.n	800b016 <_vfiprintf_r+0x1fe>
 800b010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b012:	f7fe f9ef 	bl	80093f4 <__retarget_lock_release_recursive>
 800b016:	89ab      	ldrh	r3, [r5, #12]
 800b018:	065b      	lsls	r3, r3, #25
 800b01a:	f53f af1f 	bmi.w	800ae5c <_vfiprintf_r+0x44>
 800b01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b020:	e71e      	b.n	800ae60 <_vfiprintf_r+0x48>
 800b022:	ab03      	add	r3, sp, #12
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462a      	mov	r2, r5
 800b028:	4b05      	ldr	r3, [pc, #20]	@ (800b040 <_vfiprintf_r+0x228>)
 800b02a:	a904      	add	r1, sp, #16
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7fd ff0d 	bl	8008e4c <_printf_i>
 800b032:	e7e4      	b.n	800affe <_vfiprintf_r+0x1e6>
 800b034:	0800fa48 	.word	0x0800fa48
 800b038:	0800fa52 	.word	0x0800fa52
 800b03c:	0800891d 	.word	0x0800891d
 800b040:	0800adf5 	.word	0x0800adf5
 800b044:	0800fa4e 	.word	0x0800fa4e

0800b048 <__swbuf_r>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	460e      	mov	r6, r1
 800b04c:	4614      	mov	r4, r2
 800b04e:	4605      	mov	r5, r0
 800b050:	b118      	cbz	r0, 800b05a <__swbuf_r+0x12>
 800b052:	6a03      	ldr	r3, [r0, #32]
 800b054:	b90b      	cbnz	r3, 800b05a <__swbuf_r+0x12>
 800b056:	f7fe f8a5 	bl	80091a4 <__sinit>
 800b05a:	69a3      	ldr	r3, [r4, #24]
 800b05c:	60a3      	str	r3, [r4, #8]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	071a      	lsls	r2, r3, #28
 800b062:	d501      	bpl.n	800b068 <__swbuf_r+0x20>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	b943      	cbnz	r3, 800b07a <__swbuf_r+0x32>
 800b068:	4621      	mov	r1, r4
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 f82a 	bl	800b0c4 <__swsetup_r>
 800b070:	b118      	cbz	r0, 800b07a <__swbuf_r+0x32>
 800b072:	f04f 37ff 	mov.w	r7, #4294967295
 800b076:	4638      	mov	r0, r7
 800b078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	1a98      	subs	r0, r3, r2
 800b080:	6963      	ldr	r3, [r4, #20]
 800b082:	b2f6      	uxtb	r6, r6
 800b084:	4283      	cmp	r3, r0
 800b086:	4637      	mov	r7, r6
 800b088:	dc05      	bgt.n	800b096 <__swbuf_r+0x4e>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7ff fdb7 	bl	800ac00 <_fflush_r>
 800b092:	2800      	cmp	r0, #0
 800b094:	d1ed      	bne.n	800b072 <__swbuf_r+0x2a>
 800b096:	68a3      	ldr	r3, [r4, #8]
 800b098:	3b01      	subs	r3, #1
 800b09a:	60a3      	str	r3, [r4, #8]
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	6022      	str	r2, [r4, #0]
 800b0a2:	701e      	strb	r6, [r3, #0]
 800b0a4:	6962      	ldr	r2, [r4, #20]
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d004      	beq.n	800b0b6 <__swbuf_r+0x6e>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	07db      	lsls	r3, r3, #31
 800b0b0:	d5e1      	bpl.n	800b076 <__swbuf_r+0x2e>
 800b0b2:	2e0a      	cmp	r6, #10
 800b0b4:	d1df      	bne.n	800b076 <__swbuf_r+0x2e>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7ff fda1 	bl	800ac00 <_fflush_r>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d0d9      	beq.n	800b076 <__swbuf_r+0x2e>
 800b0c2:	e7d6      	b.n	800b072 <__swbuf_r+0x2a>

0800b0c4 <__swsetup_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4b29      	ldr	r3, [pc, #164]	@ (800b16c <__swsetup_r+0xa8>)
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	b118      	cbz	r0, 800b0d8 <__swsetup_r+0x14>
 800b0d0:	6a03      	ldr	r3, [r0, #32]
 800b0d2:	b90b      	cbnz	r3, 800b0d8 <__swsetup_r+0x14>
 800b0d4:	f7fe f866 	bl	80091a4 <__sinit>
 800b0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0dc:	0719      	lsls	r1, r3, #28
 800b0de:	d422      	bmi.n	800b126 <__swsetup_r+0x62>
 800b0e0:	06da      	lsls	r2, r3, #27
 800b0e2:	d407      	bmi.n	800b0f4 <__swsetup_r+0x30>
 800b0e4:	2209      	movs	r2, #9
 800b0e6:	602a      	str	r2, [r5, #0]
 800b0e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	e033      	b.n	800b15c <__swsetup_r+0x98>
 800b0f4:	0758      	lsls	r0, r3, #29
 800b0f6:	d512      	bpl.n	800b11e <__swsetup_r+0x5a>
 800b0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0fa:	b141      	cbz	r1, 800b10e <__swsetup_r+0x4a>
 800b0fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b100:	4299      	cmp	r1, r3
 800b102:	d002      	beq.n	800b10a <__swsetup_r+0x46>
 800b104:	4628      	mov	r0, r5
 800b106:	f7fe ffd3 	bl	800a0b0 <_free_r>
 800b10a:	2300      	movs	r3, #0
 800b10c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	2300      	movs	r3, #0
 800b118:	6063      	str	r3, [r4, #4]
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	f043 0308 	orr.w	r3, r3, #8
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	b94b      	cbnz	r3, 800b13e <__swsetup_r+0x7a>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b134:	d003      	beq.n	800b13e <__swsetup_r+0x7a>
 800b136:	4621      	mov	r1, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 f883 	bl	800b244 <__smakebuf_r>
 800b13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b142:	f013 0201 	ands.w	r2, r3, #1
 800b146:	d00a      	beq.n	800b15e <__swsetup_r+0x9a>
 800b148:	2200      	movs	r2, #0
 800b14a:	60a2      	str	r2, [r4, #8]
 800b14c:	6962      	ldr	r2, [r4, #20]
 800b14e:	4252      	negs	r2, r2
 800b150:	61a2      	str	r2, [r4, #24]
 800b152:	6922      	ldr	r2, [r4, #16]
 800b154:	b942      	cbnz	r2, 800b168 <__swsetup_r+0xa4>
 800b156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b15a:	d1c5      	bne.n	800b0e8 <__swsetup_r+0x24>
 800b15c:	bd38      	pop	{r3, r4, r5, pc}
 800b15e:	0799      	lsls	r1, r3, #30
 800b160:	bf58      	it	pl
 800b162:	6962      	ldrpl	r2, [r4, #20]
 800b164:	60a2      	str	r2, [r4, #8]
 800b166:	e7f4      	b.n	800b152 <__swsetup_r+0x8e>
 800b168:	2000      	movs	r0, #0
 800b16a:	e7f7      	b.n	800b15c <__swsetup_r+0x98>
 800b16c:	20000170 	.word	0x20000170

0800b170 <_raise_r>:
 800b170:	291f      	cmp	r1, #31
 800b172:	b538      	push	{r3, r4, r5, lr}
 800b174:	4605      	mov	r5, r0
 800b176:	460c      	mov	r4, r1
 800b178:	d904      	bls.n	800b184 <_raise_r+0x14>
 800b17a:	2316      	movs	r3, #22
 800b17c:	6003      	str	r3, [r0, #0]
 800b17e:	f04f 30ff 	mov.w	r0, #4294967295
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b186:	b112      	cbz	r2, 800b18e <_raise_r+0x1e>
 800b188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b18c:	b94b      	cbnz	r3, 800b1a2 <_raise_r+0x32>
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 f830 	bl	800b1f4 <_getpid_r>
 800b194:	4622      	mov	r2, r4
 800b196:	4601      	mov	r1, r0
 800b198:	4628      	mov	r0, r5
 800b19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b19e:	f000 b817 	b.w	800b1d0 <_kill_r>
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d00a      	beq.n	800b1bc <_raise_r+0x4c>
 800b1a6:	1c59      	adds	r1, r3, #1
 800b1a8:	d103      	bne.n	800b1b2 <_raise_r+0x42>
 800b1aa:	2316      	movs	r3, #22
 800b1ac:	6003      	str	r3, [r0, #0]
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	e7e7      	b.n	800b182 <_raise_r+0x12>
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4798      	blx	r3
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e7e0      	b.n	800b182 <_raise_r+0x12>

0800b1c0 <raise>:
 800b1c0:	4b02      	ldr	r3, [pc, #8]	@ (800b1cc <raise+0xc>)
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	f7ff bfd3 	b.w	800b170 <_raise_r>
 800b1ca:	bf00      	nop
 800b1cc:	20000170 	.word	0x20000170

0800b1d0 <_kill_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	@ (800b1f0 <_kill_r+0x20>)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4608      	mov	r0, r1
 800b1da:	4611      	mov	r1, r2
 800b1dc:	602b      	str	r3, [r5, #0]
 800b1de:	f7f9 fb33 	bl	8004848 <_kill>
 800b1e2:	1c43      	adds	r3, r0, #1
 800b1e4:	d102      	bne.n	800b1ec <_kill_r+0x1c>
 800b1e6:	682b      	ldr	r3, [r5, #0]
 800b1e8:	b103      	cbz	r3, 800b1ec <_kill_r+0x1c>
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	bd38      	pop	{r3, r4, r5, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000c9c 	.word	0x20000c9c

0800b1f4 <_getpid_r>:
 800b1f4:	f7f9 bb20 	b.w	8004838 <_getpid>

0800b1f8 <__swhatbuf_r>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b200:	2900      	cmp	r1, #0
 800b202:	b096      	sub	sp, #88	@ 0x58
 800b204:	4615      	mov	r5, r2
 800b206:	461e      	mov	r6, r3
 800b208:	da0d      	bge.n	800b226 <__swhatbuf_r+0x2e>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b210:	f04f 0100 	mov.w	r1, #0
 800b214:	bf14      	ite	ne
 800b216:	2340      	movne	r3, #64	@ 0x40
 800b218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b21c:	2000      	movs	r0, #0
 800b21e:	6031      	str	r1, [r6, #0]
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	b016      	add	sp, #88	@ 0x58
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	466a      	mov	r2, sp
 800b228:	f000 f848 	bl	800b2bc <_fstat_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dbec      	blt.n	800b20a <__swhatbuf_r+0x12>
 800b230:	9901      	ldr	r1, [sp, #4]
 800b232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b23a:	4259      	negs	r1, r3
 800b23c:	4159      	adcs	r1, r3
 800b23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b242:	e7eb      	b.n	800b21c <__swhatbuf_r+0x24>

0800b244 <__smakebuf_r>:
 800b244:	898b      	ldrh	r3, [r1, #12]
 800b246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b248:	079d      	lsls	r5, r3, #30
 800b24a:	4606      	mov	r6, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	d507      	bpl.n	800b260 <__smakebuf_r+0x1c>
 800b250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	6123      	str	r3, [r4, #16]
 800b258:	2301      	movs	r3, #1
 800b25a:	6163      	str	r3, [r4, #20]
 800b25c:	b003      	add	sp, #12
 800b25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b260:	ab01      	add	r3, sp, #4
 800b262:	466a      	mov	r2, sp
 800b264:	f7ff ffc8 	bl	800b1f8 <__swhatbuf_r>
 800b268:	9f00      	ldr	r7, [sp, #0]
 800b26a:	4605      	mov	r5, r0
 800b26c:	4639      	mov	r1, r7
 800b26e:	4630      	mov	r0, r6
 800b270:	f7fd fa28 	bl	80086c4 <_malloc_r>
 800b274:	b948      	cbnz	r0, 800b28a <__smakebuf_r+0x46>
 800b276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27a:	059a      	lsls	r2, r3, #22
 800b27c:	d4ee      	bmi.n	800b25c <__smakebuf_r+0x18>
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f043 0302 	orr.w	r3, r3, #2
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	e7e2      	b.n	800b250 <__smakebuf_r+0xc>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	6020      	str	r0, [r4, #0]
 800b28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b29a:	b15b      	cbz	r3, 800b2b4 <__smakebuf_r+0x70>
 800b29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 f81d 	bl	800b2e0 <_isatty_r>
 800b2a6:	b128      	cbz	r0, 800b2b4 <__smakebuf_r+0x70>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	f043 0301 	orr.w	r3, r3, #1
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	431d      	orrs	r5, r3
 800b2b8:	81a5      	strh	r5, [r4, #12]
 800b2ba:	e7cf      	b.n	800b25c <__smakebuf_r+0x18>

0800b2bc <_fstat_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	@ (800b2dc <_fstat_r+0x20>)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	f7f9 fb1d 	bl	8004908 <_fstat>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d102      	bne.n	800b2d8 <_fstat_r+0x1c>
 800b2d2:	682b      	ldr	r3, [r5, #0]
 800b2d4:	b103      	cbz	r3, 800b2d8 <_fstat_r+0x1c>
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	bd38      	pop	{r3, r4, r5, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000c9c 	.word	0x20000c9c

0800b2e0 <_isatty_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d06      	ldr	r5, [pc, #24]	@ (800b2fc <_isatty_r+0x1c>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7f9 fb1c 	bl	8004928 <_isatty>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_isatty_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_isatty_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	20000c9c 	.word	0x20000c9c

0800b300 <_init>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	bf00      	nop
 800b304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b306:	bc08      	pop	{r3}
 800b308:	469e      	mov	lr, r3
 800b30a:	4770      	bx	lr

0800b30c <_fini>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	bf00      	nop
 800b310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b312:	bc08      	pop	{r3}
 800b314:	469e      	mov	lr, r3
 800b316:	4770      	bx	lr
