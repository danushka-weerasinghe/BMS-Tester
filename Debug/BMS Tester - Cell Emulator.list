
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008378  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08008528  08008528  00009528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d8  080093d8  0000b488  2**0
                  CONTENTS
  4 .ARM          00000008  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e0  080093e0  0000b488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e0  080093e0  0000a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093e4  080093e4  0000a3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  080093e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b488  2**0
                  CONTENTS
 10 .bss          000007c0  20000488  20000488  0000b488  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c48  20000c48  0000b488  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049e98  00000000  00000000  0000b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f8e  00000000  00000000  00055350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003458  00000000  00000000  000592e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000275c  00000000  00000000  0005c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f47  00000000  00000000  0005ee94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020485  00000000  00000000  00082ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0fec  00000000  00000000  000a3260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019424c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ee28  00000000  00000000  00194290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001a30b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000488 	.word	0x20000488
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008510 	.word	0x08008510

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000048c 	.word	0x2000048c
 80001ec:	08008510 	.word	0x08008510

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	817b      	strh	r3, [r7, #10]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	813b      	strh	r3, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000d8c:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000d8e:	7dbb      	ldrb	r3, [r7, #22]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000d9c:	897a      	ldrh	r2, [r7, #10]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4413      	add	r3, r2
 8000da2:	b298      	uxth	r0, r3
 8000da4:	893b      	ldrh	r3, [r7, #8]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	893a      	ldrh	r2, [r7, #8]
 8000dac:	8979      	ldrh	r1, [r7, #10]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4603      	mov	r3, r0
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f001 f883 	bl	8001ebe <u8g2_IsIntersection>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d040      	beq.n	8000e40 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000dc2:	e035      	b.n	8000e30 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00c      	beq.n	8000dec <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	7dba      	ldrb	r2, [r7, #22]
 8000dd6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000dda:	893a      	ldrh	r2, [r7, #8]
 8000ddc:	8979      	ldrh	r1, [r7, #10]
 8000dde:	2300      	movs	r3, #0
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 ffac 	bl	8001d42 <u8g2_DrawHVLine>
 8000dea:	e010      	b.n	8000e0e <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10b      	bne.n	8000e0e <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	7d7a      	ldrb	r2, [r7, #21]
 8000dfa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000dfe:	893a      	ldrh	r2, [r7, #8]
 8000e00:	8979      	ldrh	r1, [r7, #10]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f000 ff9a 	bl	8001d42 <u8g2_DrawHVLine>
    }
    x++;
 8000e0e:	897b      	ldrh	r3, [r7, #10]
 8000e10:	3301      	adds	r3, #1
 8000e12:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	75fb      	strb	r3, [r7, #23]
      b++;
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	3301      	adds	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1c6      	bne.n	8000dc4 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	7dba      	ldrb	r2, [r7, #22]
 8000e3a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8000e3e:	e000      	b.n	8000e42 <u8g2_DrawHXBM+0xd6>
    return;
 8000e40:	bf00      	nop
}
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	817b      	strh	r3, [r7, #10]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	813b      	strh	r3, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000e66:	8afb      	ldrh	r3, [r7, #22]
 8000e68:	3307      	adds	r3, #7
 8000e6a:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000e6c:	8afb      	ldrh	r3, [r7, #22]
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000e72:	897a      	ldrh	r2, [r7, #10]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4413      	add	r3, r2
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	893a      	ldrh	r2, [r7, #8]
 8000e7c:	8c3b      	ldrh	r3, [r7, #32]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	893a      	ldrh	r2, [r7, #8]
 8000e84:	8979      	ldrh	r1, [r7, #10]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f001 f817 	bl	8001ebe <u8g2_IsIntersection>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d017      	beq.n	8000ec6 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000e96:	e012      	b.n	8000ebe <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000e98:	88f8      	ldrh	r0, [r7, #6]
 8000e9a:	893a      	ldrh	r2, [r7, #8]
 8000e9c:	8979      	ldrh	r1, [r7, #10]
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff61 	bl	8000d6c <u8g2_DrawHXBM>
    bitmap += blen;
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eae:	4413      	add	r3, r2
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8000eb2:	893b      	ldrh	r3, [r7, #8]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	813b      	strh	r3, [r7, #8]
    h--;
 8000eb8:	8c3b      	ldrh	r3, [r7, #32]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000ebe:	8c3b      	ldrh	r3, [r7, #32]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e9      	bne.n	8000e98 <u8g2_DrawXBM+0x50>
 8000ec4:	e000      	b.n	8000ec8 <u8g2_DrawXBM+0x80>
    return;
 8000ec6:	bf00      	nop
  }
}
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7c1b      	ldrb	r3, [r3, #16]
 8000edc:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fb38 	bl	8007572 <memset>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70fb      	strb	r3, [r7, #3]
 8000f16:	4613      	mov	r3, r2
 8000f18:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7c1b      	ldrb	r3, [r3, #16]
 8000f20:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	89ba      	ldrh	r2, [r7, #12]
 8000f32:	fb12 f303 	smulbb	r3, r2, r3
 8000f36:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000f38:	89bb      	ldrh	r3, [r7, #12]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	4413      	add	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000f46:	7bf9      	ldrb	r1, [r7, #15]
 8000f48:	78ba      	ldrb	r2, [r7, #2]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f001 fc99 	bl	800288a <u8x8_DrawTile>
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f72:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000f7a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	7c5b      	ldrb	r3, [r3, #17]
 8000f82:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000f84:	7bba      	ldrb	r2, [r7, #14]
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffbd 	bl	8000f0a <u8g2_send_tile_row>
    src_row++;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d203      	bcs.n	8000fac <u8g2_send_buffer+0x4c>
 8000fa4:	7bba      	ldrb	r2, [r7, #14]
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3eb      	bcc.n	8000f84 <u8g2_send_buffer+0x24>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffcf 	bl	8000f60 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 fcc3 	bl	800294e <u8x8_RefreshDisplay>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	78fa      	ldrb	r2, [r7, #3]
 8000fe0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff5b 	bl	8000ece <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffd8 	bl	8000fd0 <u8g2_SetBufferCurrTileRow>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff95 	bl	8000f60 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800103c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4413      	add	r3, r2
 8001048:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	7c5b      	ldrb	r3, [r3, #17]
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	429a      	cmp	r2, r3
 8001054:	d304      	bcc.n	8001060 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f001 fc79 	bl	800294e <u8x8_RefreshDisplay>
    return 0;
 800105c:	2300      	movs	r3, #0
 800105e:	e00d      	b.n	800107c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff2f 	bl	8000ece <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffab 	bl	8000fd0 <u8g2_SetBufferCurrTileRow>
  return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffb7 	bl	8001000 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffc8 	bl	8001028 <u8g2_NextPage>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800109e:	2100      	movs	r1, #0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff95 	bl	8000fd0 <u8g2_SetBufferCurrTileRow>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2208      	movs	r2, #8
 80010bc:	701a      	strb	r2, [r3, #0]
  return buf;
 80010be:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	200004a4 	.word	0x200004a4

080010d0 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <u8g2_Setup_st7565_64128n_f+0x44>)
 80010e6:	490c      	ldr	r1, [pc, #48]	@ (8001118 <u8g2_Setup_st7565_64128n_f+0x48>)
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f001 fc91 	bl	8002a10 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80010ee:	f107 0313 	add.w	r3, r7, #19
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffdc 	bl	80010b0 <u8g2_m_16_8_f>
 80010f8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80010fa:	7cfa      	ldrb	r2, [r7, #19]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <u8g2_Setup_st7565_64128n_f+0x4c>)
 8001102:	6979      	ldr	r1, [r7, #20]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 ffc4 	bl	8002092 <u8g2_SetupBuffer>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	080025a5 	.word	0x080025a5
 8001118:	08002745 	.word	0x08002745
 800111c:	08001f15 	.word	0x08001f15

08001120 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	81fb      	strh	r3, [r7, #14]
    font++;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	4413      	add	r3, r2
 8001174:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001176:	89fb      	ldrh	r3, [r7, #14]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800118e:	2100      	movs	r1, #0
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f7ff ffc5 	bl	8001120 <u8g2_font_get_byte>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800119e:	2101      	movs	r1, #1
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f7ff ffbd 	bl	8001120 <u8g2_font_get_byte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80011ae:	2102      	movs	r1, #2
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f7ff ffb5 	bl	8001120 <u8g2_font_get_byte>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80011be:	2103      	movs	r1, #3
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff ffad 	bl	8001120 <u8g2_font_get_byte>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80011ce:	2104      	movs	r1, #4
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7ff ffa5 	bl	8001120 <u8g2_font_get_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80011de:	2105      	movs	r1, #5
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f7ff ff9d 	bl	8001120 <u8g2_font_get_byte>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80011ee:	2106      	movs	r1, #6
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7ff ff95 	bl	8001120 <u8g2_font_get_byte>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80011fe:	2107      	movs	r1, #7
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f7ff ff8d 	bl	8001120 <u8g2_font_get_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800120e:	2108      	movs	r1, #8
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7ff ff85 	bl	8001120 <u8g2_font_get_byte>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800121e:	2109      	movs	r1, #9
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f7ff ff7d 	bl	8001120 <u8g2_font_get_byte>
 8001226:	4603      	mov	r3, r0
 8001228:	b25a      	sxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800122e:	210a      	movs	r1, #10
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff ff75 	bl	8001120 <u8g2_font_get_byte>
 8001236:	4603      	mov	r3, r0
 8001238:	b25a      	sxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800123e:	210b      	movs	r1, #11
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f7ff ff6d 	bl	8001120 <u8g2_font_get_byte>
 8001246:	4603      	mov	r3, r0
 8001248:	b25a      	sxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800124e:	210c      	movs	r1, #12
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7ff ff65 	bl	8001120 <u8g2_font_get_byte>
 8001256:	4603      	mov	r3, r0
 8001258:	b25a      	sxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800125e:	210d      	movs	r1, #13
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f7ff ff5d 	bl	8001120 <u8g2_font_get_byte>
 8001266:	4603      	mov	r3, r0
 8001268:	b25a      	sxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800126e:	210e      	movs	r1, #14
 8001270:	6838      	ldr	r0, [r7, #0]
 8001272:	f7ff ff55 	bl	8001120 <u8g2_font_get_byte>
 8001276:	4603      	mov	r3, r0
 8001278:	b25a      	sxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800127e:	210f      	movs	r1, #15
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f7ff ff4d 	bl	8001120 <u8g2_font_get_byte>
 8001286:	4603      	mov	r3, r0
 8001288:	b25a      	sxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800128e:	2110      	movs	r1, #16
 8001290:	6838      	ldr	r0, [r7, #0]
 8001292:	f7ff ff45 	bl	8001120 <u8g2_font_get_byte>
 8001296:	4603      	mov	r3, r0
 8001298:	b25a      	sxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800129e:	2111      	movs	r1, #17
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7ff ff4f 	bl	8001144 <u8g2_font_get_word>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80012ae:	2113      	movs	r1, #19
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f7ff ff47 	bl	8001144 <u8g2_font_get_word>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80012be:	2115      	movs	r1, #21
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff ff3f 	bl	8001144 <u8g2_font_get_word>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	82da      	strh	r2, [r3, #22]
#endif
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	7b7b      	ldrb	r3, [r7, #13]
 80012f4:	fa42 f303 	asr.w	r3, r2, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4413      	add	r3, r2
 8001304:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	2b07      	cmp	r3, #7
 800130a:	d91a      	bls.n	8001342 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800130c:	2308      	movs	r3, #8
 800130e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001310:	7b3a      	ldrb	r2, [r7, #12]
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	b25a      	sxtb	r2, r3
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4313      	orrs	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	3b08      	subs	r3, #8
 8001340:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4013      	ands	r3, r2
 8001356:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7bba      	ldrb	r2, [r7, #14]
 800135c:	731a      	strb	r2, [r3, #12]
  return val;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffaa 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	3b01      	subs	r3, #1
 800138e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001390:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73fb      	strb	r3, [r7, #15]
  return v;
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80013b2:	b490      	push	{r4, r7}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4604      	mov	r4, r0
 80013ba:	4608      	mov	r0, r1
 80013bc:	4611      	mov	r1, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	4623      	mov	r3, r4
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	4603      	mov	r3, r0
 80013c6:	717b      	strb	r3, [r7, #5]
 80013c8:	460b      	mov	r3, r1
 80013ca:	713b      	strb	r3, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d014      	beq.n	8001400 <u8g2_add_vector_y+0x4e>
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	dc19      	bgt.n	800140e <u8g2_add_vector_y+0x5c>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <u8g2_add_vector_y+0x32>
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d007      	beq.n	80013f2 <u8g2_add_vector_y+0x40>
 80013e2:	e014      	b.n	800140e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80013e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	80fb      	strh	r3, [r7, #6]
      break;
 80013f0:	e014      	b.n	800141c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80013f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
      break;
 80013fe:	e00d      	b.n	800141c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001400:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	80fb      	strh	r3, [r7, #6]
      break;
 800140c:	e006      	b.n	800141c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800140e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001412:	b29b      	uxth	r3, r3
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	80fb      	strh	r3, [r7, #6]
      break;      
 800141a:	bf00      	nop
  }
  return dy;
 800141c:	88fb      	ldrh	r3, [r7, #6]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bc90      	pop	{r4, r7}
 8001426:	4770      	bx	lr

08001428 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	4603      	mov	r3, r0
 800143c:	717b      	strb	r3, [r7, #5]
 800143e:	460b      	mov	r3, r1
 8001440:	713b      	strb	r3, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d014      	beq.n	8001476 <u8g2_add_vector_x+0x4e>
 800144c:	2b02      	cmp	r3, #2
 800144e:	dc19      	bgt.n	8001484 <u8g2_add_vector_x+0x5c>
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <u8g2_add_vector_x+0x32>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <u8g2_add_vector_x+0x40>
 8001458:	e014      	b.n	8001484 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800145a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800145e:	b29a      	uxth	r2, r3
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4413      	add	r3, r2
 8001464:	80fb      	strh	r3, [r7, #6]
      break;
 8001466:	e014      	b.n	8001492 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001468:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800146c:	b29b      	uxth	r3, r3
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	80fb      	strh	r3, [r7, #6]
      break;
 8001474:	e00d      	b.n	8001492 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001476:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800147a:	b29b      	uxth	r3, r3
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	80fb      	strh	r3, [r7, #6]
      break;
 8001482:	e006      	b.n	8001492 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001484:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001488:	b29a      	uxth	r2, r3
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4413      	add	r3, r2
 800148e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001490:	bf00      	nop
  }
  return dx;
 8001492:	88fb      	ldrh	r3, [r7, #6]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bc90      	pop	{r4, r7}
 800149c:	4770      	bx	lr

0800149e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b088      	sub	sp, #32
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	70fb      	strb	r3, [r7, #3]
 80014aa:	4613      	mov	r3, r2
 80014ac:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3360      	adds	r3, #96	@ 0x60
 80014b2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80014be:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80014c6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014ce:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	7d7b      	ldrb	r3, [r7, #21]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80014dc:	7dfa      	ldrb	r2, [r7, #23]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d201      	bcs.n	80014e8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	88db      	ldrh	r3, [r3, #6]
 80014f2:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80014f4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80014f8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	7c1b      	ldrb	r3, [r3, #16]
 8001500:	89b8      	ldrh	r0, [r7, #12]
 8001502:	f7ff ff91 	bl	8001428 <u8g2_add_vector_x>
 8001506:	4603      	mov	r3, r0
 8001508:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800150a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800150e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	7c1b      	ldrb	r3, [r3, #16]
 8001516:	8978      	ldrh	r0, [r7, #10]
 8001518:	f7ff ff4b 	bl	80013b2 <u8g2_add_vector_y>
 800151c:	4603      	mov	r3, r0
 800151e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d010      	beq.n	8001548 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	7b9a      	ldrb	r2, [r3, #14]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001530:	7dbb      	ldrb	r3, [r7, #22]
 8001532:	b298      	uxth	r0, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	7c1b      	ldrb	r3, [r3, #16]
 8001538:	897a      	ldrh	r2, [r7, #10]
 800153a:	89b9      	ldrh	r1, [r7, #12]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4603      	mov	r3, r0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fbfe 	bl	8001d42 <u8g2_DrawHVLine>
 8001546:	e013      	b.n	8001570 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	7b5b      	ldrb	r3, [r3, #13]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10f      	bne.n	8001570 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	7bda      	ldrb	r2, [r3, #15]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800155a:	7dbb      	ldrb	r3, [r7, #22]
 800155c:	b298      	uxth	r0, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	7c1b      	ldrb	r3, [r3, #16]
 8001562:	897a      	ldrh	r2, [r7, #10]
 8001564:	89b9      	ldrh	r1, [r7, #12]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4603      	mov	r3, r0
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fbe9 	bl	8001d42 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001570:	7dfa      	ldrb	r2, [r7, #23]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	429a      	cmp	r2, r3
 8001576:	d309      	bcc.n	800158c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001578:	7dfa      	ldrb	r2, [r7, #23]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]
    ly++;
 8001584:	7d3b      	ldrb	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800158a:	e79d      	b.n	80014c8 <u8g2_font_decode_len+0x2a>
      break;
 800158c:	bf00      	nop
  }
  lx += cnt;
 800158e:	7d7a      	ldrb	r2, [r7, #21]
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	4413      	add	r3, r2
 8001594:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001596:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800159e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	725a      	strb	r2, [r3, #9]
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3360      	adds	r3, #96	@ 0x60
 80015bc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80015d0:	4619      	mov	r1, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fe7f 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 80015d8:	4603      	mov	r3, r0
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80015e6:	4619      	mov	r1, r3
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fe74 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b25a      	sxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	7b9b      	ldrb	r3, [r3, #14]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	73da      	strb	r2, [r3, #15]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af02      	add	r7, sp, #8
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3360      	adds	r3, #96	@ 0x60
 800162a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffbd 	bl	80015ae <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800163a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001642:	4619      	mov	r1, r3
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f7ff fe91 	bl	800136c <u8g2_font_decode_get_signed_bits>
 800164a:	4603      	mov	r3, r0
 800164c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001654:	4619      	mov	r1, r3
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff fe88 	bl	800136c <u8g2_font_decode_get_signed_bits>
 800165c:	4603      	mov	r3, r0
 800165e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001666:	4619      	mov	r1, r3
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f7ff fe7f 	bl	800136c <u8g2_font_decode_get_signed_bits>
 800166e:	4603      	mov	r3, r0
 8001670:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f340 80d7 	ble.w	800182c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	8898      	ldrh	r0, [r3, #4]
 8001682:	7cfa      	ldrb	r2, [r7, #19]
 8001684:	7c7b      	ldrb	r3, [r7, #17]
 8001686:	4413      	add	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	425b      	negs	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b25a      	sxtb	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	7c1b      	ldrb	r3, [r3, #16]
 8001694:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001698:	f7ff fec6 	bl	8001428 <u8g2_add_vector_x>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	88d8      	ldrh	r0, [r3, #6]
 80016a8:	7cfa      	ldrb	r2, [r7, #19]
 80016aa:	7c7b      	ldrb	r3, [r7, #17]
 80016ac:	4413      	add	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	425b      	negs	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b25a      	sxtb	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	7c1b      	ldrb	r3, [r3, #16]
 80016ba:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80016be:	f7ff fe78 	bl	80013b2 <u8g2_add_vector_y>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	889b      	ldrh	r3, [r3, #4]
 80016ce:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	88db      	ldrh	r3, [r3, #6]
 80016d4:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80016d6:	8bfb      	ldrh	r3, [r7, #30]
 80016d8:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80016da:	8b7b      	ldrh	r3, [r7, #26]
 80016dc:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	7c1b      	ldrb	r3, [r3, #16]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d85a      	bhi.n	800179c <u8g2_font_decode_glyph+0x180>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <u8g2_font_decode_glyph+0xd0>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001719 	.word	0x08001719
 80016f4:	08001741 	.word	0x08001741
 80016f8:	08001775 	.word	0x08001775
      {
	case 0:
	    x1 += decode->glyph_width;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001702:	b29a      	uxth	r2, r3
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800170a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800170e:	b29a      	uxth	r2, r3
 8001710:	8b3b      	ldrh	r3, [r7, #24]
 8001712:	4413      	add	r3, r2
 8001714:	833b      	strh	r3, [r7, #24]
	    break;
 8001716:	e041      	b.n	800179c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800171c:	b29b      	uxth	r3, r3
 800171e:	8bfa      	ldrh	r2, [r7, #30]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001724:	8bfb      	ldrh	r3, [r7, #30]
 8001726:	3301      	adds	r3, #1
 8001728:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800172a:	8bbb      	ldrh	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001736:	b29a      	uxth	r2, r3
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	4413      	add	r3, r2
 800173c:	833b      	strh	r3, [r7, #24]
	    break;
 800173e:	e02d      	b.n	800179c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001746:	b29b      	uxth	r3, r3
 8001748:	8bfa      	ldrh	r2, [r7, #30]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800174e:	8bfb      	ldrh	r3, [r7, #30]
 8001750:	3301      	adds	r3, #1
 8001752:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001754:	8bbb      	ldrh	r3, [r7, #28]
 8001756:	3301      	adds	r3, #1
 8001758:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800175a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800175e:	b29b      	uxth	r3, r3
 8001760:	8b7a      	ldrh	r2, [r7, #26]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001766:	8b7b      	ldrh	r3, [r7, #26]
 8001768:	3301      	adds	r3, #1
 800176a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800176c:	8b3b      	ldrh	r3, [r7, #24]
 800176e:	3301      	adds	r3, #1
 8001770:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001772:	e013      	b.n	800179c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001778:	b29a      	uxth	r2, r3
 800177a:	8bbb      	ldrh	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001786:	b29b      	uxth	r3, r3
 8001788:	8b7a      	ldrh	r2, [r7, #26]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800178e:	8b7b      	ldrh	r3, [r7, #26]
 8001790:	3301      	adds	r3, #1
 8001792:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001794:	8b3b      	ldrh	r3, [r7, #24]
 8001796:	3301      	adds	r3, #1
 8001798:	833b      	strh	r3, [r7, #24]
	    break;	  
 800179a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800179c:	8bb8      	ldrh	r0, [r7, #28]
 800179e:	8b7a      	ldrh	r2, [r7, #26]
 80017a0:	8bf9      	ldrh	r1, [r7, #30]
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4603      	mov	r3, r0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb88 	bl	8001ebe <u8g2_IsIntersection>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <u8g2_font_decode_glyph+0x19e>
	return d;
 80017b4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80017b8:	e03a      	b.n	8001830 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80017cc:	4619      	mov	r1, r3
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff fd81 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80017de:	4619      	mov	r1, r3
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7ff fd78 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe54 	bl	800149e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fe4e 	bl	800149e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001802:	2101      	movs	r1, #1
 8001804:	6978      	ldr	r0, [r7, #20]
 8001806:	f7ff fd66 	bl	80012d6 <u8g2_font_decode_get_unsigned_bits>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ec      	bne.n	80017ea <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001816:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800181a:	429a      	cmp	r2, r3
 800181c:	dd00      	ble.n	8001820 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800181e:	e7d2      	b.n	80017c6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001820:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	7b9a      	ldrb	r2, [r3, #14]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 800182c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3317      	adds	r3, #23
 800184e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	2bff      	cmp	r3, #255	@ 0xff
 8001854:	d82a      	bhi.n	80018ac <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	2b60      	cmp	r3, #96	@ 0x60
 800185a:	d907      	bls.n	800186c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001862:	461a      	mov	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	4413      	add	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e009      	b.n	8001880 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	2b40      	cmp	r3, #64	@ 0x40
 8001870:	d906      	bls.n	8001880 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001878:	461a      	mov	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d04e      	beq.n	8001928 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4293      	cmp	r3, r2
 8001894:	d102      	bne.n	800189c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3302      	adds	r3, #2
 800189a:	e049      	b.n	8001930 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80018aa:	e7e9      	b.n	8001880 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80018b2:	461a      	mov	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	6938      	ldr	r0, [r7, #16]
 80018c2:	f7ff fc3f 	bl	8001144 <u8g2_font_get_word>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4413      	add	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80018d0:	2102      	movs	r1, #2
 80018d2:	6938      	ldr	r0, [r7, #16]
 80018d4:	f7ff fc36 	bl	8001144 <u8g2_font_get_word>
 80018d8:	4603      	mov	r3, r0
 80018da:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	3304      	adds	r3, #4
 80018e0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80018e2:	89fa      	ldrh	r2, [r7, #14]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3e9      	bcc.n	80018be <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	4313      	orrs	r3, r2
 8001902:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800190a:	89fa      	ldrh	r2, [r7, #14]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	429a      	cmp	r2, r3
 8001910:	d102      	bne.n	8001918 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3303      	adds	r3, #3
 8001916:	e00b      	b.n	8001930 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3302      	adds	r3, #2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001926:	e7e0      	b.n	80018ea <u8g2_font_get_glyph_data+0xb2>
	break;
 8001928:	bf00      	nop
 800192a:	e000      	b.n	800192e <u8g2_font_get_glyph_data+0xf6>
	break;
 800192c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	460b      	mov	r3, r1
 800194c:	813b      	strh	r3, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	897a      	ldrh	r2, [r7, #10]
 800195a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	893a      	ldrh	r2, [r7, #8]
 8001962:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4619      	mov	r1, r3
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff ff64 	bl	8001838 <u8g2_font_get_glyph_data>
 8001970:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001978:	6939      	ldr	r1, [r7, #16]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe4e 	bl	800161c <u8g2_font_decode_glyph>
 8001980:	4603      	mov	r3, r0
 8001982:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001984:	8afb      	ldrh	r3, [r7, #22]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	460b      	mov	r3, r1
 80019a4:	813b      	strh	r3, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d833      	bhi.n	8001a1c <u8g2_DrawGlyph+0x8c>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <u8g2_DrawGlyph+0x2c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019e1 	.word	0x080019e1
 80019c4:	080019f5 	.word	0x080019f5
 80019c8:	08001a09 	.word	0x08001a09
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	4798      	blx	r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	813b      	strh	r3, [r7, #8]
      break;
 80019de:	e01d      	b.n	8001a1c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	4798      	blx	r3
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	897b      	ldrh	r3, [r7, #10]
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	817b      	strh	r3, [r7, #10]
      break;
 80019f2:	e013      	b.n	8001a1c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	4798      	blx	r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	813b      	strh	r3, [r7, #8]
      break;
 8001a06:	e009      	b.n	8001a1c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	4798      	blx	r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	897b      	ldrh	r3, [r7, #10]
 8001a16:	4413      	add	r3, r2
 8001a18:	817b      	strh	r3, [r7, #10]
      break;
 8001a1a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	893a      	ldrh	r2, [r7, #8]
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff ff88 	bl	8001938 <u8g2_font_draw_glyph>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop

08001a34 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	817b      	strh	r3, [r7, #10]
 8001a42:	4613      	mov	r3, r2
 8001a44:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fca7 	bl	800239a <u8x8_utf8_init>
  sum = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	4798      	blx	r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001a62:	8abb      	ldrh	r3, [r7, #20]
 8001a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d038      	beq.n	8001ade <u8g2_draw_string+0xaa>
      break;
    str++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001a72:	8abb      	ldrh	r3, [r7, #20]
 8001a74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d0e9      	beq.n	8001a50 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001a7c:	8abb      	ldrh	r3, [r7, #20]
 8001a7e:	893a      	ldrh	r2, [r7, #8]
 8001a80:	8979      	ldrh	r1, [r7, #10]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff ff84 	bl	8001990 <u8g2_DrawGlyph>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d81e      	bhi.n	8001ad4 <u8g2_draw_string+0xa0>
 8001a96:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <u8g2_draw_string+0x68>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ab7 	.word	0x08001ab7
 8001aa4:	08001ac1 	.word	0x08001ac1
 8001aa8:	08001acb 	.word	0x08001acb
      {
	case 0:
	  x += delta;
 8001aac:	897a      	ldrh	r2, [r7, #10]
 8001aae:	8a7b      	ldrh	r3, [r7, #18]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	817b      	strh	r3, [r7, #10]
	  break;
 8001ab4:	e00e      	b.n	8001ad4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ab6:	893a      	ldrh	r2, [r7, #8]
 8001ab8:	8a7b      	ldrh	r3, [r7, #18]
 8001aba:	4413      	add	r3, r2
 8001abc:	813b      	strh	r3, [r7, #8]
	  break;
 8001abe:	e009      	b.n	8001ad4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001ac0:	897a      	ldrh	r2, [r7, #10]
 8001ac2:	8a7b      	ldrh	r3, [r7, #18]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	817b      	strh	r3, [r7, #10]
	  break;
 8001ac8:	e004      	b.n	8001ad4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001aca:	893a      	ldrh	r2, [r7, #8]
 8001acc:	8a7b      	ldrh	r3, [r7, #18]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	813b      	strh	r3, [r7, #8]
	  break;
 8001ad2:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ad4:	8afa      	ldrh	r2, [r7, #22]
 8001ad6:	8a7b      	ldrh	r3, [r7, #18]
 8001ad8:	4413      	add	r3, r2
 8001ada:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001adc:	e7b8      	b.n	8001a50 <u8g2_draw_string+0x1c>
      break;
 8001ade:	bf00      	nop
    }
  }
  return sum;
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop

08001aec <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	4613      	mov	r3, r2
 8001afc:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <u8g2_DrawStr+0x30>)
 8001b02:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	8979      	ldrh	r1, [r7, #10]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff ff92 	bl	8001a34 <u8g2_draw_string>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080023b7 	.word	0x080023b7

08001b20 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05d      	beq.n	8001bec <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d04d      	beq.n	8001bee <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d11c      	bne.n	8001b96 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	da05      	bge.n	8001b78 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dd32      	ble.n	8001bee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001b94:	e02b      	b.n	8001bee <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bac:	440b      	add	r3, r1
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	da0d      	bge.n	8001bce <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dd07      	ble.n	8001bee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001bea:	e000      	b.n	8001bee <u8g2_UpdateRefHeight+0xce>
    return;
 8001bec:	bf00      	nop
  }  
}
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <u8g2_SetFontPosBaseline+0x1c>)
 8001c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	08001bf9 	.word	0x08001bf9

08001c30 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d00b      	beq.n	8001c5c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3374      	adds	r3, #116	@ 0x74
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa97 	bl	8001184 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff62 	bl	8001b20 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	460b      	mov	r3, r1
 8001c74:	80fb      	strh	r3, [r7, #6]
 8001c76:	4613      	mov	r3, r2
 8001c78:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001c80:	8afb      	ldrh	r3, [r7, #22]
 8001c82:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	8abb      	ldrh	r3, [r7, #20]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8001c8e:	8afa      	ldrh	r2, [r7, #22]
 8001c90:	8abb      	ldrh	r3, [r7, #20]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d90b      	bls.n	8001cae <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8001c96:	8afa      	ldrh	r2, [r7, #22]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d205      	bcs.n	8001caa <u8g2_clip_intersection2+0x46>
			b = d;
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	82bb      	strh	r3, [r7, #20]
			b--;
 8001ca2:	8abb      	ldrh	r3, [r7, #20]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	82bb      	strh	r3, [r7, #20]
 8001ca8:	e001      	b.n	8001cae <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001cae:	8afa      	ldrh	r2, [r7, #22]
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d301      	bcc.n	8001cba <u8g2_clip_intersection2+0x56>
		return 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e01c      	b.n	8001cf4 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8001cba:	8aba      	ldrh	r2, [r7, #20]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d801      	bhi.n	8001cc6 <u8g2_clip_intersection2+0x62>
		return 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e016      	b.n	8001cf4 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8001cc6:	8afa      	ldrh	r2, [r7, #22]
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d201      	bcs.n	8001cd2 <u8g2_clip_intersection2+0x6e>
		a = c;
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001cd2:	8aba      	ldrh	r2, [r7, #20]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d901      	bls.n	8001cde <u8g2_clip_intersection2+0x7a>
		b = d;
 8001cda:	88bb      	ldrh	r3, [r7, #4]
 8001cdc:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8afa      	ldrh	r2, [r7, #22]
 8001ce2:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001ce4:	8aba      	ldrh	r2, [r7, #20]
 8001ce6:	8afb      	ldrh	r3, [r7, #22]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	8aba      	ldrh	r2, [r7, #20]
 8001cf0:	801a      	strh	r2, [r3, #0]
	return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d1e:	893a      	ldrh	r2, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001d28:	88f8      	ldrh	r0, [r7, #6]
 8001d2a:	893a      	ldrh	r2, [r7, #8]
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	47a0      	blx	r4
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001d42:	b590      	push	{r4, r7, lr}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af02      	add	r7, sp, #8
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	460b      	mov	r3, r1
 8001d56:	813b      	strh	r3, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d075      	beq.n	8001e52 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d072      	beq.n	8001e52 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d91a      	bls.n	8001da8 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8001d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d109      	bne.n	8001d8e <u8g2_DrawHVLine+0x4c>
					x -= len;
 8001d7a:	897a      	ldrh	r2, [r7, #10]
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	817b      	strh	r3, [r7, #10]
					x++;
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	817b      	strh	r3, [r7, #10]
 8001d8c:	e00c      	b.n	8001da8 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8001d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d108      	bne.n	8001da8 <u8g2_DrawHVLine+0x66>
					y -= len;
 8001d96:	893a      	ldrh	r2, [r7, #8]
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	813b      	strh	r3, [r7, #8]
					y++;
 8001da0:	893b      	ldrh	r3, [r7, #8]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8001da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8001db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d11a      	bne.n	8001df2 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001dc2:	893b      	ldrh	r3, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d83b      	bhi.n	8001e40 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001dce:	893b      	ldrh	r3, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d937      	bls.n	8001e44 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001de0:	1db9      	adds	r1, r7, #6
 8001de2:	f107 000a 	add.w	r0, r7, #10
 8001de6:	f7ff ff3d 	bl	8001c64 <u8g2_clip_intersection2>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11a      	bne.n	8001e26 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001df0:	e02f      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d824      	bhi.n	8001e48 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d920      	bls.n	8001e4c <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e16:	1db9      	adds	r1, r7, #6
 8001e18:	f107 0008 	add.w	r0, r7, #8
 8001e1c:	f7ff ff22 	bl	8001c64 <u8g2_clip_intersection2>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d014      	beq.n	8001e50 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	689c      	ldr	r4, [r3, #8]
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	893a      	ldrh	r2, [r7, #8]
 8001e30:	88f8      	ldrh	r0, [r7, #6]
 8001e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	47a0      	blx	r4
 8001e3e:	e008      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
					return;
 8001e40:	bf00      	nop
 8001e42:	e006      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
					return;
 8001e44:	bf00      	nop
 8001e46:	e004      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
					return;
 8001e48:	bf00      	nop
 8001e4a:	e002      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
					return;
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <u8g2_DrawHVLine+0x110>
					return;
 8001e50:	bf00      	nop
		}
}
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}

08001e58 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001e58:	b490      	push	{r4, r7}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	80fb      	strh	r3, [r7, #6]
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80bb      	strh	r3, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
 8001e72:	4613      	mov	r3, r2
 8001e74:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20d      	bcs.n	8001e9a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e7e:	883a      	ldrh	r2, [r7, #0]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d901      	bls.n	8001e8a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e014      	b.n	8001eb4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	883b      	ldrh	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d901      	bls.n	8001e96 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e00c      	b.n	8001eb4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e9a:	883a      	ldrh	r2, [r7, #0]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d907      	bls.n	8001eb2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	883b      	ldrh	r3, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d901      	bls.n	8001eae <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e002      	b.n	8001eb4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001eb2:	2300      	movs	r3, #0
    }
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc90      	pop	{r4, r7}
 8001ebc:	4770      	bx	lr

08001ebe <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	817b      	strh	r3, [r7, #10]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	813b      	strh	r3, [r7, #8]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001ee4:	8b3b      	ldrh	r3, [r7, #24]
 8001ee6:	893a      	ldrh	r2, [r7, #8]
 8001ee8:	f7ff ffb6 	bl	8001e58 <u8g2_is_intersection_decision_tree>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <u8g2_IsIntersection+0x38>
    return 0; 
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e00a      	b.n	8001f0c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	897a      	ldrh	r2, [r7, #10]
 8001f06:	f7ff ffa7 	bl	8001e58 <u8g2_is_intersection_decision_tree>
 8001f0a:	4603      	mov	r3, r0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	460b      	mov	r3, r1
 8001f28:	813b      	strh	r3, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001f32:	7efb      	ldrb	r3, [r7, #27]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001f3e:	7e3a      	ldrb	r2, [r7, #24]
 8001f40:	7efb      	ldrb	r3, [r7, #27]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d801      	bhi.n	8001f5e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001f5a:	7e3b      	ldrb	r3, [r7, #24]
 8001f5c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001f68:	7e3b      	ldrb	r3, [r7, #24]
 8001f6a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001f70:	8afb      	ldrh	r3, [r7, #22]
 8001f72:	f023 0307 	bic.w	r3, r3, #7
 8001f76:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	7c1b      	ldrb	r3, [r3, #16]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	fb13 f302 	smulbb	r3, r3, r2
 8001f86:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001f8e:	8afb      	ldrh	r3, [r7, #22]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d117      	bne.n	8001fd6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	7ebb      	ldrb	r3, [r7, #26]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	7e7b      	ldrb	r3, [r7, #25]
 8001fba:	4053      	eors	r3, r2
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
	len--;
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e8      	bne.n	8001fa6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001fd4:	e038      	b.n	8002048 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	7ebb      	ldrb	r3, [r7, #26]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	7e7b      	ldrb	r3, [r7, #25]
 8001fea:	4053      	eors	r3, r2
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001ff2:	7efb      	ldrb	r3, [r7, #27]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001ff8:	7efb      	ldrb	r3, [r7, #27]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	76fb      	strb	r3, [r7, #27]
      len--;
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	3b01      	subs	r3, #1
 8002004:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002006:	7efb      	ldrb	r3, [r7, #27]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d114      	bne.n	8002036 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002010:	461a      	mov	r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800201e:	2b01      	cmp	r3, #1
 8002020:	d801      	bhi.n	8002026 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800202c:	2b01      	cmp	r3, #1
 800202e:	d008      	beq.n	8002042 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002030:	2301      	movs	r3, #1
 8002032:	767b      	strb	r3, [r7, #25]
 8002034:	e005      	b.n	8002042 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002036:	7ebb      	ldrb	r3, [r7, #26]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800203c:	7e7b      	ldrb	r3, [r7, #25]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1c6      	bne.n	8001fd6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	@ 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002072:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff ffa9 	bl	8002054 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff fd84 	bl	8001c10 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800212c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	89fa      	ldrh	r2, [r7, #14]
 8002138:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	7c1b      	ldrb	r3, [r3, #16]
 800213e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	89fa      	ldrh	r2, [r7, #14]
 800214a:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002152:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002166:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002170:	4413      	add	r3, r2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	7c52      	ldrb	r2, [r2, #17]
 8002176:	4293      	cmp	r3, r2
 8002178:	dd07      	ble.n	800218a <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	7c5b      	ldrb	r3, [r3, #17]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	4413      	add	r3, r2
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	8a9a      	ldrh	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	8ada      	ldrh	r2, [r3, #22]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4603      	mov	r3, r0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fe5e 	bl	8001ebe <u8g2_IsIntersection>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002210:	e03b      	b.n	800228a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002226:	429a      	cmp	r2, r3
 8002228:	d205      	bcs.n	8002236 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002242:	429a      	cmp	r2, r3
 8002244:	d905      	bls.n	8002252 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800225e:	429a      	cmp	r2, r3
 8002260:	d205      	bcs.n	800226e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800227a:	429a      	cmp	r2, r3
 800227c:	d905      	bls.n	800228a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff3c 	bl	8002118 <u8g2_update_dimension_common>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80022d8:	429a      	cmp	r2, r3
 80022da:	d30a      	bcc.n	80022f2 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff65 	bl	80021d8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af02      	add	r7, sp, #8
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	4608      	mov	r0, r1
 8002320:	4611      	mov	r1, r2
 8002322:	461a      	mov	r2, r3
 8002324:	4603      	mov	r3, r0
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	460b      	mov	r3, r1
 800232a:	813b      	strh	r3, [r7, #8]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002336:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002338:	8aba      	ldrh	r2, [r7, #20]
 800233a:	893b      	ldrh	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002346:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002348:	8afa      	ldrh	r2, [r7, #22]
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002358:	8abb      	ldrh	r3, [r7, #20]
 800235a:	3b01      	subs	r3, #1
 800235c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800235e:	8afa      	ldrh	r2, [r7, #22]
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	82fb      	strh	r3, [r7, #22]
 8002366:	e00a      	b.n	800237e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002370:	8afb      	ldrh	r3, [r7, #22]
 8002372:	3b01      	subs	r3, #1
 8002374:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002376:	8aba      	ldrh	r2, [r7, #20]
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800237e:	88f8      	ldrh	r0, [r7, #6]
 8002380:	8aba      	ldrh	r2, [r7, #20]
 8002382:	8af9      	ldrh	r1, [r7, #22]
 8002384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4603      	mov	r3, r0
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fcb7 	bl	8001d00 <u8g2_draw_hv_line_2dir>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <u8x8_ascii_next+0x18>
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d102      	bne.n	80023d4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80023ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023d2:	e001      	b.n	80023d8 <u8x8_ascii_next+0x22>
  return b;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	b29b      	uxth	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691c      	ldr	r4, [r3, #16]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	2300      	movs	r3, #0
 80023f8:	2120      	movs	r1, #32
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	47a0      	blx	r4
 80023fe:	4603      	mov	r3, r0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}

08002408 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	460b      	mov	r3, r1
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691c      	ldr	r4, [r3, #16]
 800241a:	7afa      	ldrb	r2, [r7, #11]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2117      	movs	r1, #23
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	47a0      	blx	r4
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}

0800242e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800243a:	1cfb      	adds	r3, r7, #3
 800243c:	461a      	mov	r2, r3
 800243e:	2101      	movs	r1, #1
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffe1 	bl	8002408 <u8x8_byte_SendBytes>
 8002446:	4603      	mov	r3, r0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68dc      	ldr	r4, [r3, #12]
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	2300      	movs	r3, #0
 8002464:	2115      	movs	r1, #21
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	47a0      	blx	r4
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bd90      	pop	{r4, r7, pc}

08002474 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68dc      	ldr	r4, [r3, #12]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	2300      	movs	r3, #0
 8002488:	2116      	movs	r1, #22
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	47a0      	blx	r4
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}

08002498 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	460b      	mov	r3, r1
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68dc      	ldr	r4, [r3, #12]
 80024aa:	7afa      	ldrb	r2, [r7, #11]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2117      	movs	r1, #23
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	47a0      	blx	r4
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}

080024be <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80024be:	b590      	push	{r4, r7, lr}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68dc      	ldr	r4, [r3, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	2200      	movs	r2, #0
 80024ce:	2118      	movs	r1, #24
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	47a0      	blx	r4
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}

080024de <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024de:	b590      	push	{r4, r7, lr}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68dc      	ldr	r4, [r3, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	2200      	movs	r2, #0
 80024ee:	2119      	movs	r1, #25
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	47a0      	blx	r4
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}

080024fe <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80024fe:	b590      	push	{r4, r7, lr}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	73fb      	strb	r3, [r7, #15]
    data++;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2bfe      	cmp	r3, #254	@ 0xfe
 8002518:	d031      	beq.n	800257e <u8x8_cad_SendSequence+0x80>
 800251a:	2bfe      	cmp	r3, #254	@ 0xfe
 800251c:	dc3d      	bgt.n	800259a <u8x8_cad_SendSequence+0x9c>
 800251e:	2b19      	cmp	r3, #25
 8002520:	dc3b      	bgt.n	800259a <u8x8_cad_SendSequence+0x9c>
 8002522:	2b18      	cmp	r3, #24
 8002524:	da23      	bge.n	800256e <u8x8_cad_SendSequence+0x70>
 8002526:	2b16      	cmp	r3, #22
 8002528:	dc02      	bgt.n	8002530 <u8x8_cad_SendSequence+0x32>
 800252a:	2b15      	cmp	r3, #21
 800252c:	da03      	bge.n	8002536 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800252e:	e034      	b.n	800259a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002530:	2b17      	cmp	r3, #23
 8002532:	d00e      	beq.n	8002552 <u8x8_cad_SendSequence+0x54>
	return;
 8002534:	e031      	b.n	800259a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68dc      	ldr	r4, [r3, #12]
 8002540:	7bba      	ldrb	r2, [r7, #14]
 8002542:	7bf9      	ldrb	r1, [r7, #15]
 8002544:	2300      	movs	r3, #0
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	47a0      	blx	r4
	  data++;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	603b      	str	r3, [r7, #0]
	  break;
 8002550:	e022      	b.n	8002598 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002558:	f107 030e 	add.w	r3, r7, #14
 800255c:	461a      	mov	r2, r3
 800255e:	2101      	movs	r1, #1
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff99 	bl	8002498 <u8x8_cad_SendData>
	  data++;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	603b      	str	r3, [r7, #0]
	  break;
 800256c:	e014      	b.n	8002598 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68dc      	ldr	r4, [r3, #12]
 8002572:	7bf9      	ldrb	r1, [r7, #15]
 8002574:	2300      	movs	r3, #0
 8002576:	2200      	movs	r2, #0
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	47a0      	blx	r4
	  break;
 800257c:	e00c      	b.n	8002598 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	461a      	mov	r2, r3
 8002588:	2129      	movs	r1, #41	@ 0x29
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9ee 	bl	800296c <u8x8_gpio_call>
	  data++;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	603b      	str	r3, [r7, #0]
	  break;
 8002596:	bf00      	nop
    cmd = *data;
 8002598:	e7b6      	b.n	8002508 <u8x8_cad_SendSequence+0xa>
	return;
 800259a:	bf00      	nop
    }
  }
}
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd90      	pop	{r4, r7, pc}
	...

080025a4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	72fb      	strb	r3, [r7, #11]
 80025b2:	4613      	mov	r3, r2
 80025b4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	3b14      	subs	r3, #20
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d82f      	bhi.n	800261e <u8x8_cad_001+0x7a>
 80025be:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <u8x8_cad_001+0x20>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	0800260d 	.word	0x0800260d
 80025c8:	080025dd 	.word	0x080025dd
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	08002605 	.word	0x08002605
 80025d4:	0800260d 	.word	0x0800260d
 80025d8:	0800260d 	.word	0x0800260d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80025dc:	2100      	movs	r1, #0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff00 	bl	80023e4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80025e4:	7abb      	ldrb	r3, [r7, #10]
 80025e6:	4619      	mov	r1, r3
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff20 	bl	800242e <u8x8_byte_SendByte>
      break;
 80025ee:	e018      	b.n	8002622 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80025f0:	2100      	movs	r1, #0
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff fef6 	bl	80023e4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80025f8:	7abb      	ldrb	r3, [r7, #10]
 80025fa:	4619      	mov	r1, r3
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff16 	bl	800242e <u8x8_byte_SendByte>
      break;
 8002602:	e00e      	b.n	8002622 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002604:	2101      	movs	r1, #1
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff feec 	bl	80023e4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	691c      	ldr	r4, [r3, #16]
 8002610:	7aba      	ldrb	r2, [r7, #10]
 8002612:	7af9      	ldrb	r1, [r7, #11]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	47a0      	blx	r4
 800261a:	4603      	mov	r3, r0
 800261c:	e002      	b.n	8002624 <u8x8_cad_001+0x80>
    default:
      return 0;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <u8x8_cad_001+0x80>
  }
  return 1;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	72fb      	strb	r3, [r7, #11]
 800263a:	4613      	mov	r3, r2
 800263c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d006      	beq.n	8002652 <u8x8_d_st7565_common+0x26>
 8002644:	2b0f      	cmp	r3, #15
 8002646:	dc71      	bgt.n	800272c <u8x8_d_st7565_common+0x100>
 8002648:	2b0b      	cmp	r3, #11
 800264a:	d050      	beq.n	80026ee <u8x8_d_st7565_common+0xc2>
 800264c:	2b0e      	cmp	r3, #14
 800264e:	d05b      	beq.n	8002708 <u8x8_d_st7565_common+0xdc>
 8002650:	e06c      	b.n	800272c <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff ff33 	bl	80024be <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	795b      	ldrb	r3, [r3, #5]
 800265c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800265e:	7dbb      	ldrb	r3, [r7, #22]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800266a:	7dbb      	ldrb	r3, [r7, #22]
 800266c:	4413      	add	r3, r2
 800266e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4619      	mov	r1, r3
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fee6 	bl	8002450 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002684:	7dbb      	ldrb	r3, [r7, #22]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff fede 	bl	8002450 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	799b      	ldrb	r3, [r3, #6]
 8002698:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4619      	mov	r1, r3
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fed5 	bl	8002450 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	791b      	ldrb	r3, [r3, #4]
 80026aa:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80026b8:	7dfa      	ldrb	r2, [r7, #23]
 80026ba:	7dbb      	ldrb	r3, [r7, #22]
 80026bc:	4413      	add	r3, r2
 80026be:	2b84      	cmp	r3, #132	@ 0x84
 80026c0:	d905      	bls.n	80026ce <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80026c2:	2384      	movs	r3, #132	@ 0x84
 80026c4:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80026c6:	7dfa      	ldrb	r2, [r7, #23]
 80026c8:	7dbb      	ldrb	r3, [r7, #22]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4619      	mov	r1, r3
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fedf 	bl	8002498 <u8x8_cad_SendData>
	arg_int--;
 80026da:	7abb      	ldrb	r3, [r7, #10]
 80026dc:	3b01      	subs	r3, #1
 80026de:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80026e0:	7abb      	ldrb	r3, [r7, #10]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f3      	bne.n	80026ce <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff fef9 	bl	80024de <u8x8_cad_EndTransfer>
      break;
 80026ec:	e020      	b.n	8002730 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80026ee:	7abb      	ldrb	r3, [r7, #10]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80026f4:	4911      	ldr	r1, [pc, #68]	@ (800273c <u8x8_d_st7565_common+0x110>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ff01 	bl	80024fe <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80026fc:	e018      	b.n	8002730 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80026fe:	4910      	ldr	r1, [pc, #64]	@ (8002740 <u8x8_d_st7565_common+0x114>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fefc 	bl	80024fe <u8x8_cad_SendSequence>
      break;
 8002706:	e013      	b.n	8002730 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fed8 	bl	80024be <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800270e:	2181      	movs	r1, #129	@ 0x81
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fe9d 	bl	8002450 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002716:	7abb      	ldrb	r3, [r7, #10]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff fea8 	bl	8002474 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff feda 	bl	80024de <u8x8_cad_EndTransfer>
      break;
 800272a:	e001      	b.n	8002730 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	08009270 	.word	0x08009270
 8002740:	08009278 	.word	0x08009278

08002744 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	72fb      	strb	r3, [r7, #11]
 8002752:	4613      	mov	r3, r2
 8002754:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002756:	7aba      	ldrb	r2, [r7, #10]
 8002758:	7af9      	ldrb	r1, [r7, #11]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff ff65 	bl	800262c <u8x8_d_st7565_common>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d131      	bne.n	80027cc <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	2b0d      	cmp	r3, #13
 800276c:	d013      	beq.n	8002796 <u8x8_d_st7565_64128n+0x52>
 800276e:	2b0d      	cmp	r3, #13
 8002770:	dc2a      	bgt.n	80027c8 <u8x8_d_st7565_64128n+0x84>
 8002772:	2b09      	cmp	r3, #9
 8002774:	d002      	beq.n	800277c <u8x8_d_st7565_64128n+0x38>
 8002776:	2b0a      	cmp	r3, #10
 8002778:	d005      	beq.n	8002786 <u8x8_d_st7565_64128n+0x42>
 800277a:	e025      	b.n	80027c8 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 800277c:	4916      	ldr	r1, [pc, #88]	@ (80027d8 <u8x8_d_st7565_64128n+0x94>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f832 	bl	80027e8 <u8x8_d_helper_display_setup_memory>
	break;
 8002784:	e022      	b.n	80027cc <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f842 	bl	8002810 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 800278c:	4913      	ldr	r1, [pc, #76]	@ (80027dc <u8x8_d_st7565_64128n+0x98>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff feb5 	bl	80024fe <u8x8_cad_SendSequence>
	break;
 8002794:	e01a      	b.n	80027cc <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002796:	7abb      	ldrb	r3, [r7, #10]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 800279c:	4910      	ldr	r1, [pc, #64]	@ (80027e0 <u8x8_d_st7565_64128n+0x9c>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff fead 	bl	80024fe <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	7c9a      	ldrb	r2, [r3, #18]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80027b0:	e00c      	b.n	80027cc <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80027b2:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <u8x8_d_st7565_64128n+0xa0>)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff fea2 	bl	80024fe <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	7cda      	ldrb	r2, [r3, #19]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 80027c6:	e001      	b.n	80027cc <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	080092b0 	.word	0x080092b0
 80027dc:	08009290 	.word	0x08009290
 80027e0:	08009280 	.word	0x08009280
 80027e4:	08009288 	.word	0x08009288

080027e8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	7c9a      	ldrb	r2, [r3, #18]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695c      	ldr	r4, [r3, #20]
 800281c:	2300      	movs	r3, #0
 800281e:	2200      	movs	r2, #0
 8002820:	2128      	movs	r1, #40	@ 0x28
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68dc      	ldr	r4, [r3, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	2200      	movs	r2, #0
 800282e:	2114      	movs	r1, #20
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002834:	2201      	movs	r2, #1
 8002836:	214b      	movs	r1, #75	@ 0x4b
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f897 	bl	800296c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	461a      	mov	r2, r3
 8002846:	2129      	movs	r1, #41	@ 0x29
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f88f 	bl	800296c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	214b      	movs	r1, #75	@ 0x4b
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f88a 	bl	800296c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	2129      	movs	r1, #41	@ 0x29
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f882 	bl	800296c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002868:	2201      	movs	r2, #1
 800286a:	214b      	movs	r1, #75	@ 0x4b
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f87d 	bl	800296c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	795b      	ldrb	r3, [r3, #5]
 8002878:	461a      	mov	r2, r3
 800287a:	2129      	movs	r1, #41	@ 0x29
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f875 	bl	800296c <u8x8_gpio_call>
}    
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4603      	mov	r3, r0
 800289a:	70fb      	strb	r3, [r7, #3]
 800289c:	460b      	mov	r3, r1
 800289e:	70bb      	strb	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80028a8:	78bb      	ldrb	r3, [r7, #2]
 80028aa:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689c      	ldr	r4, [r3, #8]
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	2201      	movs	r2, #1
 80028be:	210f      	movs	r1, #15
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	47a0      	blx	r4
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}

080028ce <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80028ce:	b590      	push	{r4, r7, lr}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689c      	ldr	r4, [r3, #8]
 80028da:	2300      	movs	r3, #0
 80028dc:	2200      	movs	r2, #0
 80028de:	2109      	movs	r1, #9
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	47a0      	blx	r4
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689c      	ldr	r4, [r3, #8]
 80028f8:	2300      	movs	r3, #0
 80028fa:	2200      	movs	r2, #0
 80028fc:	210a      	movs	r1, #10
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}

0800290a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689c      	ldr	r4, [r3, #8]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	2300      	movs	r3, #0
 800291e:	210b      	movs	r1, #11
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	47a0      	blx	r4
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}

0800292c <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689c      	ldr	r4, [r3, #8]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	2300      	movs	r3, #0
 8002940:	210e      	movs	r1, #14
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	47a0      	blx	r4
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800294e:	b590      	push	{r4, r7, lr}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689c      	ldr	r4, [r3, #8]
 800295a:	2300      	movs	r3, #0
 800295c:	2200      	movs	r2, #0
 800295e:	2110      	movs	r1, #16
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	47a0      	blx	r4
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}

0800296c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
 8002978:	4613      	mov	r3, r2
 800297a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695c      	ldr	r4, [r3, #20]
 8002980:	78ba      	ldrb	r2, [r7, #2]
 8002982:	78f9      	ldrb	r1, [r7, #3]
 8002984:	2300      	movs	r3, #0
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	47a0      	blx	r4
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}

08002992 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	72fb      	strb	r3, [r7, #11]
 80029a0:	4613      	mov	r3, r2
 80029a2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <u8x8_SetupDefaults+0x58>)
 80029c6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a10      	ldr	r2, [pc, #64]	@ (8002a0c <u8x8_SetupDefaults+0x58>)
 80029cc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a0c <u8x8_SetupDefaults+0x58>)
 80029d2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <u8x8_SetupDefaults+0x58>)
 80029d8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	22ff      	movs	r2, #255	@ 0xff
 80029fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	08002993 	.word	0x08002993

08002a10 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff ffc8 	bl	80029b4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ff46 	bl	80028ce <u8x8_SetupMemory>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e00e      	b.n	8002a78 <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	411a      	asrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f1c3 030f 	rsb	r3, r3, #15
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f002 0201 	and.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3301      	adds	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b09      	cmp	r3, #9
 8002a7c:	dded      	ble.n	8002a5a <intToBinary+0x10>
		    }
		}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e02b      	b.n	8002b02 <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b25a      	sxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1c3 0307 	rsb	r3, r3, #7
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b25a      	sxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3308      	adds	r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b07      	cmp	r3, #7
 8002b06:	ddd0      	ble.n	8002aaa <assignBytes+0x1e>
		    }
		}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b096      	sub	sp, #88	@ 0x58
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fd18 	bl	8000558 <__aeabi_f2d>
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c60 <cell12_Temp_01_Set+0x148>)
 8002b2e:	f7fd fe95 	bl	800085c <__aeabi_ddiv>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <cell12_Temp_01_Set+0x14c>)
 8002b40:	f7fd fd62 	bl	8000608 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7fd ff6e 	bl	8000a2c <__aeabi_d2iz>
 8002b50:	4603      	mov	r3, r0
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2240      	movs	r2, #64	@ 0x40
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fd08 	bl	8007572 <memset>
 8002b62:	2301      	movs	r3, #1
 8002b64:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b6e:	f7ff ff6c 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 8002b72:	f107 0208 	add.w	r2, r7, #8
 8002b76:	f107 030c 	add.w	r3, r7, #12
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff85 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8002b82:	2201      	movs	r2, #1
 8002b84:	2101      	movs	r1, #1
 8002b86:	4838      	ldr	r0, [pc, #224]	@ (8002c68 <cell12_Temp_01_Set+0x150>)
 8002b88:	f002 f8ee 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b8c:	2064      	movs	r0, #100	@ 0x64
 8002b8e:	f001 fe35 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2102      	movs	r1, #2
 8002b96:	4835      	ldr	r0, [pc, #212]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002b98:	f002 f8e6 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b9c:	2064      	movs	r0, #100	@ 0x64
 8002b9e:	f001 fe2d 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4831      	ldr	r0, [pc, #196]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002ba8:	f002 f8de 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	492f      	ldr	r1, [pc, #188]	@ (8002c70 <cell12_Temp_01_Set+0x158>)
 8002bb4:	482f      	ldr	r0, [pc, #188]	@ (8002c74 <cell12_Temp_01_Set+0x15c>)
 8002bb6:	f003 ffdc 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	482b      	ldr	r0, [pc, #172]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002bc0:	f002 f8d2 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002bc4:	2064      	movs	r0, #100	@ 0x64
 8002bc6:	f001 fe19 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4827      	ldr	r0, [pc, #156]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002bd0:	f002 f8ca 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4927      	ldr	r1, [pc, #156]	@ (8002c78 <cell12_Temp_01_Set+0x160>)
 8002bdc:	4825      	ldr	r0, [pc, #148]	@ (8002c74 <cell12_Temp_01_Set+0x15c>)
 8002bde:	f003 ffc8 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	2102      	movs	r1, #2
 8002be6:	4821      	ldr	r0, [pc, #132]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002be8:	f002 f8be 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002bec:	2064      	movs	r0, #100	@ 0x64
 8002bee:	f001 fe05 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	481d      	ldr	r0, [pc, #116]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002bf8:	f002 f8b6 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8002bfc:	f107 0108 	add.w	r1, r7, #8
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	2202      	movs	r2, #2
 8002c06:	481b      	ldr	r0, [pc, #108]	@ (8002c74 <cell12_Temp_01_Set+0x15c>)
 8002c08:	f003 ffb3 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4816      	ldr	r0, [pc, #88]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002c12:	f002 f8a9 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c16:	2064      	movs	r0, #100	@ 0x64
 8002c18:	f001 fdf0 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4812      	ldr	r0, [pc, #72]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002c22:	f002 f8a1 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	4a13      	ldr	r2, [pc, #76]	@ (8002c7c <cell12_Temp_01_Set+0x164>)
 8002c30:	4913      	ldr	r1, [pc, #76]	@ (8002c80 <cell12_Temp_01_Set+0x168>)
 8002c32:	4810      	ldr	r0, [pc, #64]	@ (8002c74 <cell12_Temp_01_Set+0x15c>)
 8002c34:	f004 f8e1 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	480b      	ldr	r0, [pc, #44]	@ (8002c6c <cell12_Temp_01_Set+0x154>)
 8002c3e:	f002 f893 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c42:	2064      	movs	r0, #100	@ 0x64
 8002c44:	f001 fdda 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4806      	ldr	r0, [pc, #24]	@ (8002c68 <cell12_Temp_01_Set+0x150>)
 8002c4e:	f002 f88b 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c52:	2064      	movs	r0, #100	@ 0x64
 8002c54:	f001 fdd2 	bl	80047fc <HAL_Delay>

}
 8002c58:	bf00      	nop
 8002c5a:	3750      	adds	r7, #80	@ 0x50
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40490000 	.word	0x40490000
 8002c64:	40900000 	.word	0x40900000
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	200008a4 	.word	0x200008a4
 8002c74:	200009ec 	.word	0x200009ec
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	200008a8 	.word	0x200008a8
 8002c80:	20000004 	.word	0x20000004

08002c84 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b096      	sub	sp, #88	@ 0x58
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd fc62 	bl	8000558 <__aeabi_f2d>
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	4b51      	ldr	r3, [pc, #324]	@ (8002de0 <cell12_Temp_02_Set+0x15c>)
 8002c9a:	f7fd fddf 	bl	800085c <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <cell12_Temp_02_Set+0x160>)
 8002cac:	f7fd fcac 	bl	8000608 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd feb8 	bl	8000a2c <__aeabi_d2iz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2240      	movs	r2, #64	@ 0x40
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fc52 	bl	8007572 <memset>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cda:	f7ff feb6 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 8002cde:	f107 0208 	add.w	r2, r7, #8
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fecf 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	483d      	ldr	r0, [pc, #244]	@ (8002de8 <cell12_Temp_02_Set+0x164>)
 8002cf4:	f002 f838 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cf8:	2064      	movs	r0, #100	@ 0x64
 8002cfa:	f001 fd7f 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d04:	4839      	ldr	r0, [pc, #228]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d06:	f002 f82f 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d0a:	2064      	movs	r0, #100	@ 0x64
 8002d0c:	f001 fd76 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8002d10:	2200      	movs	r2, #0
 8002d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d16:	4835      	ldr	r0, [pc, #212]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d18:	f002 f826 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	2202      	movs	r2, #2
 8002d22:	4933      	ldr	r1, [pc, #204]	@ (8002df0 <cell12_Temp_02_Set+0x16c>)
 8002d24:	4833      	ldr	r0, [pc, #204]	@ (8002df4 <cell12_Temp_02_Set+0x170>)
 8002d26:	f003 ff24 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d30:	482e      	ldr	r0, [pc, #184]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d32:	f002 f819 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d36:	2064      	movs	r0, #100	@ 0x64
 8002d38:	f001 fd60 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d42:	482a      	ldr	r0, [pc, #168]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d44:	f002 f810 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	492a      	ldr	r1, [pc, #168]	@ (8002df8 <cell12_Temp_02_Set+0x174>)
 8002d50:	4828      	ldr	r0, [pc, #160]	@ (8002df4 <cell12_Temp_02_Set+0x170>)
 8002d52:	f003 ff0e 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8002d56:	2201      	movs	r2, #1
 8002d58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d5c:	4823      	ldr	r0, [pc, #140]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d5e:	f002 f803 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d62:	2064      	movs	r0, #100	@ 0x64
 8002d64:	f001 fd4a 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d6e:	481f      	ldr	r0, [pc, #124]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d70:	f001 fffa 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8002d74:	f107 0108 	add.w	r1, r7, #8
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	481d      	ldr	r0, [pc, #116]	@ (8002df4 <cell12_Temp_02_Set+0x170>)
 8002d80:	f003 fef7 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8002d84:	2201      	movs	r2, #1
 8002d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d8a:	4818      	ldr	r0, [pc, #96]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d8c:	f001 ffec 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d90:	2064      	movs	r0, #100	@ 0x64
 8002d92:	f001 fd33 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d9c:	4813      	ldr	r0, [pc, #76]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002d9e:	f001 ffe3 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2302      	movs	r3, #2
 8002daa:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <cell12_Temp_02_Set+0x178>)
 8002dac:	4914      	ldr	r1, [pc, #80]	@ (8002e00 <cell12_Temp_02_Set+0x17c>)
 8002dae:	4811      	ldr	r0, [pc, #68]	@ (8002df4 <cell12_Temp_02_Set+0x170>)
 8002db0:	f004 f823 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dba:	480c      	ldr	r0, [pc, #48]	@ (8002dec <cell12_Temp_02_Set+0x168>)
 8002dbc:	f001 ffd4 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002dc0:	2064      	movs	r0, #100	@ 0x64
 8002dc2:	f001 fd1b 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <cell12_Temp_02_Set+0x164>)
 8002dcc:	f001 ffcc 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002dd0:	2064      	movs	r0, #100	@ 0x64
 8002dd2:	f001 fd13 	bl	80047fc <HAL_Delay>

}
 8002dd6:	bf00      	nop
 8002dd8:	3750      	adds	r7, #80	@ 0x50
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40490000 	.word	0x40490000
 8002de4:	40900000 	.word	0x40900000
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40021400 	.word	0x40021400
 8002df0:	200008a4 	.word	0x200008a4
 8002df4:	200009ec 	.word	0x200009ec
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	200008a8 	.word	0x200008a8
 8002e00:	20000004 	.word	0x20000004

08002e04 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b096      	sub	sp, #88	@ 0x58
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fba2 	bl	8000558 <__aeabi_f2d>
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b4d      	ldr	r3, [pc, #308]	@ (8002f50 <cell12_Temp_03_Set+0x14c>)
 8002e1a:	f7fd fd1f 	bl	800085c <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <cell12_Temp_03_Set+0x150>)
 8002e2c:	f7fd fbec 	bl	8000608 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f7fd fdf8 	bl	8000a2c <__aeabi_d2iz>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	2240      	movs	r2, #64	@ 0x40
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fb92 	bl	8007572 <memset>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002e5a:	f7ff fdf6 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 8002e5e:	f107 0208 	add.w	r2, r7, #8
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fe0f 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e74:	4838      	ldr	r0, [pc, #224]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002e76:	f001 ff77 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e7a:	2064      	movs	r0, #100	@ 0x64
 8002e7c:	f001 fcbe 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2140      	movs	r1, #64	@ 0x40
 8002e84:	4834      	ldr	r0, [pc, #208]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002e86:	f001 ff6f 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e8a:	2064      	movs	r0, #100	@ 0x64
 8002e8c:	f001 fcb6 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	4830      	ldr	r0, [pc, #192]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002e96:	f001 ff67 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	492e      	ldr	r1, [pc, #184]	@ (8002f5c <cell12_Temp_03_Set+0x158>)
 8002ea2:	482f      	ldr	r0, [pc, #188]	@ (8002f60 <cell12_Temp_03_Set+0x15c>)
 8002ea4:	f003 fe65 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2140      	movs	r1, #64	@ 0x40
 8002eac:	482a      	ldr	r0, [pc, #168]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002eae:	f001 ff5b 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002eb2:	2064      	movs	r0, #100	@ 0x64
 8002eb4:	f001 fca2 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	@ 0x40
 8002ebc:	4826      	ldr	r0, [pc, #152]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002ebe:	f001 ff53 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	4926      	ldr	r1, [pc, #152]	@ (8002f64 <cell12_Temp_03_Set+0x160>)
 8002eca:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <cell12_Temp_03_Set+0x15c>)
 8002ecc:	f003 fe51 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2140      	movs	r1, #64	@ 0x40
 8002ed4:	4820      	ldr	r0, [pc, #128]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002ed6:	f001 ff47 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002eda:	2064      	movs	r0, #100	@ 0x64
 8002edc:	f001 fc8e 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2140      	movs	r1, #64	@ 0x40
 8002ee4:	481c      	ldr	r0, [pc, #112]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002ee6:	f001 ff3f 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8002eea:	f107 0108 	add.w	r1, r7, #8
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	481a      	ldr	r0, [pc, #104]	@ (8002f60 <cell12_Temp_03_Set+0x15c>)
 8002ef6:	f003 fe3c 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8002efa:	2201      	movs	r2, #1
 8002efc:	2140      	movs	r1, #64	@ 0x40
 8002efe:	4816      	ldr	r0, [pc, #88]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002f00:	f001 ff32 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f04:	2064      	movs	r0, #100	@ 0x64
 8002f06:	f001 fc79 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2140      	movs	r1, #64	@ 0x40
 8002f0e:	4812      	ldr	r0, [pc, #72]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002f10:	f001 ff2a 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <cell12_Temp_03_Set+0x164>)
 8002f1e:	4913      	ldr	r1, [pc, #76]	@ (8002f6c <cell12_Temp_03_Set+0x168>)
 8002f20:	480f      	ldr	r0, [pc, #60]	@ (8002f60 <cell12_Temp_03_Set+0x15c>)
 8002f22:	f003 ff6a 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8002f26:	2201      	movs	r2, #1
 8002f28:	2140      	movs	r1, #64	@ 0x40
 8002f2a:	480b      	ldr	r0, [pc, #44]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002f2c:	f001 ff1c 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f30:	2064      	movs	r0, #100	@ 0x64
 8002f32:	f001 fc63 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f3c:	4806      	ldr	r0, [pc, #24]	@ (8002f58 <cell12_Temp_03_Set+0x154>)
 8002f3e:	f001 ff13 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f42:	2064      	movs	r0, #100	@ 0x64
 8002f44:	f001 fc5a 	bl	80047fc <HAL_Delay>

}
 8002f48:	bf00      	nop
 8002f4a:	3750      	adds	r7, #80	@ 0x50
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40490000 	.word	0x40490000
 8002f54:	40900000 	.word	0x40900000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	200008a4 	.word	0x200008a4
 8002f60:	200009ec 	.word	0x200009ec
 8002f64:	20000000 	.word	0x20000000
 8002f68:	200008a8 	.word	0x200008a8
 8002f6c:	20000004 	.word	0x20000004

08002f70 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b096      	sub	sp, #88	@ 0x58
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd faec 	bl	8000558 <__aeabi_f2d>
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	4b52      	ldr	r3, [pc, #328]	@ (80030d0 <cell11_Temp_01_Set+0x160>)
 8002f86:	f7fd fc69 	bl	800085c <__aeabi_ddiv>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	4b4f      	ldr	r3, [pc, #316]	@ (80030d4 <cell11_Temp_01_Set+0x164>)
 8002f98:	f7fd fb36 	bl	8000608 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fd42 	bl	8000a2c <__aeabi_d2iz>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fadc 	bl	8007572 <memset>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8002fbe:	f107 030c 	add.w	r3, r7, #12
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002fc6:	f7ff fd40 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 8002fca:	f107 0208 	add.w	r2, r7, #8
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fd59 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fe0:	483d      	ldr	r0, [pc, #244]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 8002fe2:	f001 fec1 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002fe6:	2064      	movs	r0, #100	@ 0x64
 8002fe8:	f001 fc08 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ff2:	4839      	ldr	r0, [pc, #228]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 8002ff4:	f001 feb8 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ff8:	2064      	movs	r0, #100	@ 0x64
 8002ffa:	f001 fbff 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003004:	4834      	ldr	r0, [pc, #208]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 8003006:	f001 feaf 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	2202      	movs	r2, #2
 8003010:	4932      	ldr	r1, [pc, #200]	@ (80030dc <cell11_Temp_01_Set+0x16c>)
 8003012:	4833      	ldr	r0, [pc, #204]	@ (80030e0 <cell11_Temp_01_Set+0x170>)
 8003014:	f003 fdad 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003018:	2201      	movs	r2, #1
 800301a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800301e:	482e      	ldr	r0, [pc, #184]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 8003020:	f001 fea2 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003024:	2064      	movs	r0, #100	@ 0x64
 8003026:	f001 fbe9 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003030:	4829      	ldr	r0, [pc, #164]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 8003032:	f001 fe99 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	2202      	movs	r2, #2
 800303c:	4929      	ldr	r1, [pc, #164]	@ (80030e4 <cell11_Temp_01_Set+0x174>)
 800303e:	4828      	ldr	r0, [pc, #160]	@ (80030e0 <cell11_Temp_01_Set+0x170>)
 8003040:	f003 fd97 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800304a:	4823      	ldr	r0, [pc, #140]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 800304c:	f001 fe8c 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003050:	2064      	movs	r0, #100	@ 0x64
 8003052:	f001 fbd3 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800305c:	481e      	ldr	r0, [pc, #120]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 800305e:	f001 fe83 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8003062:	f107 0108 	add.w	r1, r7, #8
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	2202      	movs	r2, #2
 800306c:	481c      	ldr	r0, [pc, #112]	@ (80030e0 <cell11_Temp_01_Set+0x170>)
 800306e:	f003 fd80 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003072:	2201      	movs	r2, #1
 8003074:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003078:	4817      	ldr	r0, [pc, #92]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 800307a:	f001 fe75 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800307e:	2064      	movs	r0, #100	@ 0x64
 8003080:	f001 fbbc 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800308a:	4813      	ldr	r0, [pc, #76]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 800308c:	f001 fe6c 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2302      	movs	r3, #2
 8003098:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <cell11_Temp_01_Set+0x178>)
 800309a:	4914      	ldr	r1, [pc, #80]	@ (80030ec <cell11_Temp_01_Set+0x17c>)
 800309c:	4810      	ldr	r0, [pc, #64]	@ (80030e0 <cell11_Temp_01_Set+0x170>)
 800309e:	f003 feac 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80030a2:	2201      	movs	r2, #1
 80030a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030a8:	480b      	ldr	r0, [pc, #44]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 80030aa:	f001 fe5d 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80030ae:	2064      	movs	r0, #100	@ 0x64
 80030b0:	f001 fba4 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030ba:	4807      	ldr	r0, [pc, #28]	@ (80030d8 <cell11_Temp_01_Set+0x168>)
 80030bc:	f001 fe54 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80030c0:	2064      	movs	r0, #100	@ 0x64
 80030c2:	f001 fb9b 	bl	80047fc <HAL_Delay>

}
 80030c6:	bf00      	nop
 80030c8:	3750      	adds	r7, #80	@ 0x50
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40490000 	.word	0x40490000
 80030d4:	40900000 	.word	0x40900000
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	200008a4 	.word	0x200008a4
 80030e0:	20000a44 	.word	0x20000a44
 80030e4:	20000000 	.word	0x20000000
 80030e8:	200008a8 	.word	0x200008a8
 80030ec:	20000004 	.word	0x20000004

080030f0 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b096      	sub	sp, #88	@ 0x58
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fa2c 	bl	8000558 <__aeabi_f2d>
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	4b52      	ldr	r3, [pc, #328]	@ (8003250 <cell11_Temp_02_Set+0x160>)
 8003106:	f7fd fba9 	bl	800085c <__aeabi_ddiv>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <cell11_Temp_02_Set+0x164>)
 8003118:	f7fd fa76 	bl	8000608 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd fc82 	bl	8000a2c <__aeabi_d2iz>
 8003128:	4603      	mov	r3, r0
 800312a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	2240      	movs	r2, #64	@ 0x40
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f004 fa1c 	bl	8007572 <memset>
 800313a:	2301      	movs	r3, #1
 800313c:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	4619      	mov	r1, r3
 8003144:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003146:	f7ff fc80 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 800314a:	f107 0208 	add.w	r2, r7, #8
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fc99 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800315a:	2201      	movs	r2, #1
 800315c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003160:	483d      	ldr	r0, [pc, #244]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 8003162:	f001 fe01 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003166:	2064      	movs	r0, #100	@ 0x64
 8003168:	f001 fb48 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800316c:	2201      	movs	r2, #1
 800316e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003172:	4839      	ldr	r0, [pc, #228]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 8003174:	f001 fdf8 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003178:	2064      	movs	r0, #100	@ 0x64
 800317a:	f001 fb3f 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
 8003180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003184:	4834      	ldr	r0, [pc, #208]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 8003186:	f001 fdef 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	2202      	movs	r2, #2
 8003190:	4932      	ldr	r1, [pc, #200]	@ (800325c <cell11_Temp_02_Set+0x16c>)
 8003192:	4833      	ldr	r0, [pc, #204]	@ (8003260 <cell11_Temp_02_Set+0x170>)
 8003194:	f003 fced 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800319e:	482e      	ldr	r0, [pc, #184]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 80031a0:	f001 fde2 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031a4:	2064      	movs	r0, #100	@ 0x64
 80031a6:	f001 fb29 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031b0:	4829      	ldr	r0, [pc, #164]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 80031b2:	f001 fdd9 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	2202      	movs	r2, #2
 80031bc:	4929      	ldr	r1, [pc, #164]	@ (8003264 <cell11_Temp_02_Set+0x174>)
 80031be:	4828      	ldr	r0, [pc, #160]	@ (8003260 <cell11_Temp_02_Set+0x170>)
 80031c0:	f003 fcd7 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031ca:	4823      	ldr	r0, [pc, #140]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 80031cc:	f001 fdcc 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031d0:	2064      	movs	r0, #100	@ 0x64
 80031d2:	f001 fb13 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80031d6:	2200      	movs	r2, #0
 80031d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031dc:	481e      	ldr	r0, [pc, #120]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 80031de:	f001 fdc3 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80031e2:	f107 0108 	add.w	r1, r7, #8
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	2202      	movs	r2, #2
 80031ec:	481c      	ldr	r0, [pc, #112]	@ (8003260 <cell11_Temp_02_Set+0x170>)
 80031ee:	f003 fcc0 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80031f2:	2201      	movs	r2, #1
 80031f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031f8:	4817      	ldr	r0, [pc, #92]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 80031fa:	f001 fdb5 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031fe:	2064      	movs	r0, #100	@ 0x64
 8003200:	f001 fafc 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800320a:	4813      	ldr	r0, [pc, #76]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 800320c:	f001 fdac 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2302      	movs	r3, #2
 8003218:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <cell11_Temp_02_Set+0x178>)
 800321a:	4914      	ldr	r1, [pc, #80]	@ (800326c <cell11_Temp_02_Set+0x17c>)
 800321c:	4810      	ldr	r0, [pc, #64]	@ (8003260 <cell11_Temp_02_Set+0x170>)
 800321e:	f003 fdec 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003228:	480b      	ldr	r0, [pc, #44]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 800322a:	f001 fd9d 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800322e:	2064      	movs	r0, #100	@ 0x64
 8003230:	f001 fae4 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800323a:	4807      	ldr	r0, [pc, #28]	@ (8003258 <cell11_Temp_02_Set+0x168>)
 800323c:	f001 fd94 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003240:	2064      	movs	r0, #100	@ 0x64
 8003242:	f001 fadb 	bl	80047fc <HAL_Delay>

}
 8003246:	bf00      	nop
 8003248:	3750      	adds	r7, #80	@ 0x50
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40490000 	.word	0x40490000
 8003254:	40900000 	.word	0x40900000
 8003258:	40021c00 	.word	0x40021c00
 800325c:	200008a4 	.word	0x200008a4
 8003260:	20000a44 	.word	0x20000a44
 8003264:	20000000 	.word	0x20000000
 8003268:	200008a8 	.word	0x200008a8
 800326c:	20000004 	.word	0x20000004

08003270 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8003270:	b580      	push	{r7, lr}
 8003272:	b096      	sub	sp, #88	@ 0x58
 8003274:	af02      	add	r7, sp, #8
 8003276:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd f96c 	bl	8000558 <__aeabi_f2d>
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <cell11_Temp_03_Set+0x15c>)
 8003286:	f7fd fae9 	bl	800085c <__aeabi_ddiv>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	4b4e      	ldr	r3, [pc, #312]	@ (80033d0 <cell11_Temp_03_Set+0x160>)
 8003298:	f7fd f9b6 	bl	8000608 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	f7fd fbc2 	bl	8000a2c <__aeabi_d2iz>
 80032a8:	4603      	mov	r3, r0
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	2240      	movs	r2, #64	@ 0x40
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 f95c 	bl	8007572 <memset>
 80032ba:	2301      	movs	r3, #1
 80032bc:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80032be:	f107 030c 	add.w	r3, r7, #12
 80032c2:	4619      	mov	r1, r3
 80032c4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80032c6:	f7ff fbc0 	bl	8002a4a <intToBinary>
	assignBytes(resArray, resByteArray);
 80032ca:	f107 0208 	add.w	r2, r7, #8
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fbd9 	bl	8002a8c <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	2140      	movs	r1, #64	@ 0x40
 80032de:	483d      	ldr	r0, [pc, #244]	@ (80033d4 <cell11_Temp_03_Set+0x164>)
 80032e0:	f001 fd42 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032e4:	2064      	movs	r0, #100	@ 0x64
 80032e6:	f001 fa89 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80032ea:	2201      	movs	r2, #1
 80032ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032f0:	4839      	ldr	r0, [pc, #228]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 80032f2:	f001 fd39 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80032f6:	2064      	movs	r0, #100	@ 0x64
 80032f8:	f001 fa80 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80032fc:	2200      	movs	r2, #0
 80032fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003302:	4835      	ldr	r0, [pc, #212]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 8003304:	f001 fd30 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	2202      	movs	r2, #2
 800330e:	4933      	ldr	r1, [pc, #204]	@ (80033dc <cell11_Temp_03_Set+0x16c>)
 8003310:	4833      	ldr	r0, [pc, #204]	@ (80033e0 <cell11_Temp_03_Set+0x170>)
 8003312:	f003 fc2e 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8003316:	2201      	movs	r2, #1
 8003318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800331c:	482e      	ldr	r0, [pc, #184]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 800331e:	f001 fd23 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003322:	2064      	movs	r0, #100	@ 0x64
 8003324:	f001 fa6a 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800332e:	482a      	ldr	r0, [pc, #168]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 8003330:	f001 fd1a 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	2202      	movs	r2, #2
 800333a:	492a      	ldr	r1, [pc, #168]	@ (80033e4 <cell11_Temp_03_Set+0x174>)
 800333c:	4828      	ldr	r0, [pc, #160]	@ (80033e0 <cell11_Temp_03_Set+0x170>)
 800333e:	f003 fc18 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8003342:	2201      	movs	r2, #1
 8003344:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003348:	4823      	ldr	r0, [pc, #140]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 800334a:	f001 fd0d 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800334e:	2064      	movs	r0, #100	@ 0x64
 8003350:	f001 fa54 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800335a:	481f      	ldr	r0, [pc, #124]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 800335c:	f001 fd04 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8003360:	f107 0108 	add.w	r1, r7, #8
 8003364:	f04f 33ff 	mov.w	r3, #4294967295
 8003368:	2202      	movs	r2, #2
 800336a:	481d      	ldr	r0, [pc, #116]	@ (80033e0 <cell11_Temp_03_Set+0x170>)
 800336c:	f003 fc01 	bl	8006b72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8003370:	2201      	movs	r2, #1
 8003372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003376:	4818      	ldr	r0, [pc, #96]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 8003378:	f001 fcf6 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800337c:	2064      	movs	r0, #100	@ 0x64
 800337e:	f001 fa3d 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003388:	4813      	ldr	r0, [pc, #76]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 800338a:	f001 fced 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2302      	movs	r3, #2
 8003396:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <cell11_Temp_03_Set+0x178>)
 8003398:	4914      	ldr	r1, [pc, #80]	@ (80033ec <cell11_Temp_03_Set+0x17c>)
 800339a:	4811      	ldr	r0, [pc, #68]	@ (80033e0 <cell11_Temp_03_Set+0x170>)
 800339c:	f003 fd2d 	bl	8006dfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80033a0:	2201      	movs	r2, #1
 80033a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033a6:	480c      	ldr	r0, [pc, #48]	@ (80033d8 <cell11_Temp_03_Set+0x168>)
 80033a8:	f001 fcde 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80033ac:	2064      	movs	r0, #100	@ 0x64
 80033ae:	f001 fa25 	bl	80047fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80033b2:	2201      	movs	r2, #1
 80033b4:	2140      	movs	r1, #64	@ 0x40
 80033b6:	4807      	ldr	r0, [pc, #28]	@ (80033d4 <cell11_Temp_03_Set+0x164>)
 80033b8:	f001 fcd6 	bl	8004d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80033bc:	2064      	movs	r0, #100	@ 0x64
 80033be:	f001 fa1d 	bl	80047fc <HAL_Delay>

}
 80033c2:	bf00      	nop
 80033c4:	3750      	adds	r7, #80	@ 0x50
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40490000 	.word	0x40490000
 80033d0:	40900000 	.word	0x40900000
 80033d4:	40021c00 	.word	0x40021c00
 80033d8:	40020400 	.word	0x40020400
 80033dc:	200008a4 	.word	0x200008a4
 80033e0:	20000a44 	.word	0x20000a44
 80033e4:	20000000 	.word	0x20000000
 80033e8:	200008a8 	.word	0x200008a8
 80033ec:	20000004 	.word	0x20000004

080033f0 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	72fb      	strb	r3, [r7, #11]
 80033fe:	4613      	mov	r3, r2
 8003400:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b4b      	cmp	r3, #75	@ 0x4b
 8003406:	d01a      	beq.n	800343e <u8x8_stm32_gpio_and_delay+0x4e>
 8003408:	2b4b      	cmp	r3, #75	@ 0x4b
 800340a:	dc1f      	bgt.n	800344c <u8x8_stm32_gpio_and_delay+0x5c>
 800340c:	2b4a      	cmp	r3, #74	@ 0x4a
 800340e:	d00f      	beq.n	8003430 <u8x8_stm32_gpio_and_delay+0x40>
 8003410:	2b4a      	cmp	r3, #74	@ 0x4a
 8003412:	dc1b      	bgt.n	800344c <u8x8_stm32_gpio_and_delay+0x5c>
 8003414:	2b28      	cmp	r3, #40	@ 0x28
 8003416:	d002      	beq.n	800341e <u8x8_stm32_gpio_and_delay+0x2e>
 8003418:	2b29      	cmp	r3, #41	@ 0x29
 800341a:	d004      	beq.n	8003426 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 800341c:	e016      	b.n	800344c <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 800341e:	2002      	movs	r0, #2
 8003420:	f001 f9ec 	bl	80047fc <HAL_Delay>
            break;
 8003424:	e013      	b.n	800344e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8003426:	7abb      	ldrb	r3, [r7, #10]
 8003428:	4618      	mov	r0, r3
 800342a:	f001 f9e7 	bl	80047fc <HAL_Delay>
            break;
 800342e:	e00e      	b.n	800344e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8003430:	7abb      	ldrb	r3, [r7, #10]
 8003432:	461a      	mov	r2, r3
 8003434:	2108      	movs	r1, #8
 8003436:	4808      	ldr	r0, [pc, #32]	@ (8003458 <u8x8_stm32_gpio_and_delay+0x68>)
 8003438:	f001 fc96 	bl	8004d68 <HAL_GPIO_WritePin>
            break;
 800343c:	e007      	b.n	800344e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 800343e:	7abb      	ldrb	r3, [r7, #10]
 8003440:	461a      	mov	r2, r3
 8003442:	2104      	movs	r1, #4
 8003444:	4804      	ldr	r0, [pc, #16]	@ (8003458 <u8x8_stm32_gpio_and_delay+0x68>)
 8003446:	f001 fc8f 	bl	8004d68 <HAL_GPIO_WritePin>
            break;
 800344a:	e000      	b.n	800344e <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 800344c:	bf00      	nop
    }
    return 1U;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021800 	.word	0x40021800

0800345c <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	72fb      	strb	r3, [r7, #11]
 800346a:	4613      	mov	r3, r2
 800346c:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	3b14      	subs	r3, #20
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d83e      	bhi.n	80034f8 <u8x8_byte_4wire_hw_spi+0x9c>
 800347a:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <u8x8_byte_4wire_hw_spi+0x24>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034ff 	.word	0x080034ff
 8003484:	080034f9 	.word	0x080034f9
 8003488:	080034f9 	.word	0x080034f9
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034d5 	.word	0x080034d5
 8003494:	080034e7 	.word	0x080034e7
 8003498:	080034f9 	.word	0x080034f9
 800349c:	080034f9 	.word	0x080034f9
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	080034f9 	.word	0x080034f9
 80034b0:	080034c7 	.word	0x080034c7
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 80034b4:	7abb      	ldrb	r3, [r7, #10]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4813      	ldr	r0, [pc, #76]	@ (800350c <u8x8_byte_4wire_hw_spi+0xb0>)
 80034c0:	f003 fb57 	bl	8006b72 <HAL_SPI_Transmit>
            break;
 80034c4:	e01c      	b.n	8003500 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80034c6:	7abb      	ldrb	r3, [r7, #10]
 80034c8:	461a      	mov	r2, r3
 80034ca:	2108      	movs	r1, #8
 80034cc:	4810      	ldr	r0, [pc, #64]	@ (8003510 <u8x8_byte_4wire_hw_spi+0xb4>)
 80034ce:	f001 fc4b 	bl	8004d68 <HAL_GPIO_WritePin>
            break;
 80034d2:	e015      	b.n	8003500 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	2104      	movs	r1, #4
 80034de:	480d      	ldr	r0, [pc, #52]	@ (8003514 <u8x8_byte_4wire_hw_spi+0xb8>)
 80034e0:	f001 fc42 	bl	8004d68 <HAL_GPIO_WritePin>
            break;
 80034e4:	e00c      	b.n	8003500 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	461a      	mov	r2, r3
 80034ee:	2104      	movs	r1, #4
 80034f0:	4808      	ldr	r0, [pc, #32]	@ (8003514 <u8x8_byte_4wire_hw_spi+0xb8>)
 80034f2:	f001 fc39 	bl	8004d68 <HAL_GPIO_WritePin>
            break;
 80034f6:	e003      	b.n	8003500 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	75fb      	strb	r3, [r7, #23]
            break;
 80034fc:	e000      	b.n	8003500 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 80034fe:	bf00      	nop
    }
    return retVal;
 8003500:	7dfb      	ldrb	r3, [r7, #23]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000a9c 	.word	0x20000a9c
 8003510:	40021800 	.word	0x40021800
 8003514:	40020c00 	.word	0x40020c00

08003518 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 800351c:	2201      	movs	r2, #1
 800351e:	2110      	movs	r1, #16
 8003520:	480c      	ldr	r0, [pc, #48]	@ (8003554 <Display_Init+0x3c>)
 8003522:	f001 fc21 	bl	8004d68 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8003526:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <Display_Init+0x40>)
 8003528:	4a0c      	ldr	r2, [pc, #48]	@ (800355c <Display_Init+0x44>)
 800352a:	490d      	ldr	r1, [pc, #52]	@ (8003560 <Display_Init+0x48>)
 800352c:	480d      	ldr	r0, [pc, #52]	@ (8003564 <Display_Init+0x4c>)
 800352e:	f7fd fdcf 	bl	80010d0 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8003532:	480c      	ldr	r0, [pc, #48]	@ (8003564 <Display_Init+0x4c>)
 8003534:	f7ff f9da 	bl	80028ec <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8003538:	2100      	movs	r1, #0
 800353a:	480a      	ldr	r0, [pc, #40]	@ (8003564 <Display_Init+0x4c>)
 800353c:	f7ff f9e5 	bl	800290a <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8003540:	4808      	ldr	r0, [pc, #32]	@ (8003564 <Display_Init+0x4c>)
 8003542:	f7fd fd9f 	bl	8001084 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8003546:	2178      	movs	r1, #120	@ 0x78
 8003548:	4806      	ldr	r0, [pc, #24]	@ (8003564 <Display_Init+0x4c>)
 800354a:	f7ff f9ef 	bl	800292c <u8x8_SetContrast>
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40021800 	.word	0x40021800
 8003558:	080033f1 	.word	0x080033f1
 800355c:	0800345d 	.word	0x0800345d
 8003560:	08009264 	.word	0x08009264
 8003564:	200008ac 	.word	0x200008ac

08003568 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 800356e:	481f      	ldr	r0, [pc, #124]	@ (80035ec <Display_MainTitlePage+0x84>)
 8003570:	f7fd fd46 	bl	8001000 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8003574:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <Display_MainTitlePage+0x88>)
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	2340      	movs	r3, #64	@ 0x40
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	481a      	ldr	r0, [pc, #104]	@ (80035ec <Display_MainTitlePage+0x84>)
 8003584:	f7fd fc60 	bl	8000e48 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8003588:	4818      	ldr	r0, [pc, #96]	@ (80035ec <Display_MainTitlePage+0x84>)
 800358a:	f7fd fd4d 	bl	8001028 <u8g2_NextPage>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ef      	bne.n	8003574 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8003594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003598:	f001 f930 	bl	80047fc <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 800359c:	4813      	ldr	r0, [pc, #76]	@ (80035ec <Display_MainTitlePage+0x84>)
 800359e:	f7fd fc96 	bl	8000ece <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80035a2:	4914      	ldr	r1, [pc, #80]	@ (80035f4 <Display_MainTitlePage+0x8c>)
 80035a4:	4811      	ldr	r0, [pc, #68]	@ (80035ec <Display_MainTitlePage+0x84>)
 80035a6:	f7fe fb43 	bl	8001c30 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <Display_MainTitlePage+0x90>)
 80035ac:	2210      	movs	r2, #16
 80035ae:	212a      	movs	r1, #42	@ 0x2a
 80035b0:	480e      	ldr	r0, [pc, #56]	@ (80035ec <Display_MainTitlePage+0x84>)
 80035b2:	f7fe fa9b 	bl	8001aec <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80035b6:	490f      	ldr	r1, [pc, #60]	@ (80035f4 <Display_MainTitlePage+0x8c>)
 80035b8:	480c      	ldr	r0, [pc, #48]	@ (80035ec <Display_MainTitlePage+0x84>)
 80035ba:	f7fe fb39 	bl	8001c30 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80035be:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <Display_MainTitlePage+0x94>)
 80035c0:	2221      	movs	r2, #33	@ 0x21
 80035c2:	2106      	movs	r1, #6
 80035c4:	4809      	ldr	r0, [pc, #36]	@ (80035ec <Display_MainTitlePage+0x84>)
 80035c6:	f7fe fa91 	bl	8001aec <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 80035ca:	200a      	movs	r0, #10
 80035cc:	f001 f916 	bl	80047fc <HAL_Delay>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 80035d0:	4806      	ldr	r0, [pc, #24]	@ (80035ec <Display_MainTitlePage+0x84>)
 80035d2:	f7fd fd29 	bl	8001028 <u8g2_NextPage>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1c8      	bne.n	800356e <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 80035dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80035e0:	f001 f90c 	bl	80047fc <HAL_Delay>
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200008ac 	.word	0x200008ac
 80035f0:	20000008 	.word	0x20000008
 80035f4:	0800860c 	.word	0x0800860c
 80035f8:	08008528 	.word	0x08008528
 80035fc:	08008530 	.word	0x08008530

08003600 <Display_Address>:
/**
 * @brief  Displays an I2C address on the display.
 * @param  address: The 7-bit I2C device address to display.
 */
void Display_Address(uint8_t address)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
    char addressBuffer[16];

    /* Format the address into a string.
       The format "0x%02X" displays the address in hexadecimal with two digits. */
    (void)sprintf(addressBuffer, "I2C Addr: 0x%02X", address);
 800360a:	79fa      	ldrb	r2, [r7, #7]
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	490c      	ldr	r1, [pc, #48]	@ (8003644 <Display_Address+0x44>)
 8003612:	4618      	mov	r0, r3
 8003614:	f003 ff4a 	bl	80074ac <siprintf>

    /* Clear the display buffer */
    u8g2_ClearBuffer(&u8g2);
 8003618:	480b      	ldr	r0, [pc, #44]	@ (8003648 <Display_Address+0x48>)
 800361a:	f7fd fc58 	bl	8000ece <u8g2_ClearBuffer>

    /* Set an appropriate font */
    u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800361e:	490b      	ldr	r1, [pc, #44]	@ (800364c <Display_Address+0x4c>)
 8003620:	4809      	ldr	r0, [pc, #36]	@ (8003648 <Display_Address+0x48>)
 8003622:	f7fe fb05 	bl	8001c30 <u8g2_SetFont>

    /* Draw the formatted string at desired coordinates (adjust as needed) */
    u8g2_DrawStr(&u8g2, 0, 20, addressBuffer);
 8003626:	f107 0308 	add.w	r3, r7, #8
 800362a:	2214      	movs	r2, #20
 800362c:	2100      	movs	r1, #0
 800362e:	4806      	ldr	r0, [pc, #24]	@ (8003648 <Display_Address+0x48>)
 8003630:	f7fe fa5c 	bl	8001aec <u8g2_DrawStr>

    /* Send the buffer to the display */
    u8g2_SendBuffer(&u8g2);
 8003634:	4804      	ldr	r0, [pc, #16]	@ (8003648 <Display_Address+0x48>)
 8003636:	f7fd fcbd 	bl	8000fb4 <u8g2_SendBuffer>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	08008550 	.word	0x08008550
 8003648:	200008ac 	.word	0x200008ac
 800364c:	0800860c 	.word	0x0800860c

08003650 <Expander_InitDevice>:
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress);
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1);

/* Initializes a single expander by configuring all its 16 I/Os as outputs */
static HAL_StatusTypeDef Expander_InitDevice(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    status = Expander_SetConfigOutputs(hi2c, deviceAddress);
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f843 	bl	80036ec <Expander_SetConfigOutputs>
 8003666:	4603      	mov	r3, r0
 8003668:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <Expander_InitDevice+0x30>
    {
        printf("Expander 0x%02X: Config failed (status: %d)\n", deviceAddress, status);
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	4619      	mov	r1, r3
 8003676:	4807      	ldr	r0, [pc, #28]	@ (8003694 <Expander_InitDevice+0x44>)
 8003678:	f003 ff06 	bl	8007488 <iprintf>
        return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	e005      	b.n	800368c <Expander_InitDevice+0x3c>
    }
    else
    {
        printf("Expander 0x%02X: Configured as outputs\n", deviceAddress);
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	4619      	mov	r1, r3
 8003684:	4804      	ldr	r0, [pc, #16]	@ (8003698 <Expander_InitDevice+0x48>)
 8003686:	f003 feff 	bl	8007488 <iprintf>
    }
    return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	08008580 	.word	0x08008580
 8003698:	080085b0 	.word	0x080085b0

0800369c <Expander_InitAllDevices>:

/* Initializes all known expanders on the given I2C bus */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	72fb      	strb	r3, [r7, #11]
    for (size_t i = 0; i < expanderCount; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e013      	b.n	80036d6 <Expander_InitAllDevices+0x3a>
    {
        uint8_t addr = expanderAddresses[i];
 80036ae:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <Expander_InitAllDevices+0x4c>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	72bb      	strb	r3, [r7, #10]
        status = Expander_InitDevice(hi2c, addr);
 80036b8:	7abb      	ldrb	r3, [r7, #10]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffc7 	bl	8003650 <Expander_InitDevice>
 80036c2:	4603      	mov	r3, r0
 80036c4:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK)
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <Expander_InitAllDevices+0x34>
        {
            return status;
 80036cc:	7afb      	ldrb	r3, [r7, #11]
 80036ce:	e007      	b.n	80036e0 <Expander_InitAllDevices+0x44>
    for (size_t i = 0; i < expanderCount; i++)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	2204      	movs	r2, #4
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4293      	cmp	r3, r2
 80036dc:	d3e7      	bcc.n	80036ae <Expander_InitAllDevices+0x12>
        }
    }
    return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	080092c8 	.word	0x080092c8

080036ec <Expander_SetConfigOutputs>:
    return Expander_SetOutputs(hi2c, deviceAddress, 0x00, 0x00);
}

/* Configures both configuration registers to set all 16 I/Os as outputs */
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af04      	add	r7, sp, #16
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
    uint8_t configValue = 0x00;  // 0 => output mode
 80036f8:	2300      	movs	r3, #0
 80036fa:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;

    /* Configure Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	b299      	uxth	r1, r3
 8003704:	2364      	movs	r3, #100	@ 0x64
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	2301      	movs	r3, #1
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	f107 030e 	add.w	r3, r7, #14
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2301      	movs	r3, #1
 8003714:	2206      	movs	r2, #6
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 fc84 	bl	8005024 <HAL_I2C_Mem_Write>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <Expander_SetConfigOutputs+0x3e>
    {
        return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	e012      	b.n	8003750 <Expander_SetConfigOutputs+0x64>
    }

    /* Configure Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	b29b      	uxth	r3, r3
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	b299      	uxth	r1, r3
 8003732:	2364      	movs	r3, #100	@ 0x64
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	2301      	movs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	f107 030e 	add.w	r3, r7, #14
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	2207      	movs	r2, #7
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 fc6d 	bl	8005024 <HAL_I2C_Mem_Write>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <Expander_SetOutputs>:

/* Writes the new output states to both output registers */
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af04      	add	r7, sp, #16
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	70fb      	strb	r3, [r7, #3]
 800376a:	460b      	mov	r3, r1
 800376c:	70bb      	strb	r3, [r7, #2]
 800376e:	4613      	mov	r3, r2
 8003770:	707b      	strb	r3, [r7, #1]
    HAL_StatusTypeDef status;

    /* Write to Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	b29b      	uxth	r3, r3
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	b299      	uxth	r1, r3
 800377a:	2364      	movs	r3, #100	@ 0x64
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	2301      	movs	r3, #1
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	1cbb      	adds	r3, r7, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2301      	movs	r3, #1
 8003788:	2202      	movs	r2, #2
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f001 fc4a 	bl	8005024 <HAL_I2C_Mem_Write>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &out0,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <Expander_SetOutputs+0x46>
    {
        return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	e011      	b.n	80037c2 <Expander_SetOutputs+0x6a>
    }

    /* Write to Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	b299      	uxth	r1, r3
 80037a6:	2364      	movs	r3, #100	@ 0x64
 80037a8:	9302      	str	r3, [sp, #8]
 80037aa:	2301      	movs	r3, #1
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	1c7b      	adds	r3, r7, #1
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2301      	movs	r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 fc34 	bl	8005024 <HAL_I2C_Mem_Write>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &out1,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <Expander_SetPinState>:

/* Sets a specific GPIO pin high or low on the specified expander.
   It is assumed that 'pin' has only one bit set, and that bit is either in the lower
   byte (Port 0) or the upper byte (Port 1). */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint16_t pin, uint8_t isHigh)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b088      	sub	sp, #32
 80037ce:	af04      	add	r7, sp, #16
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	4608      	mov	r0, r1
 80037d4:	4611      	mov	r1, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	70fb      	strb	r3, [r7, #3]
 80037dc:	460b      	mov	r3, r1
 80037de:	803b      	strh	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t port0, port1;
    uint8_t currentPort0, currentPort1;

    /* Read current output states */
    status = HAL_I2C_Mem_Read(hi2c,
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	b299      	uxth	r1, r3
 80037ec:	2364      	movs	r3, #100	@ 0x64
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	2301      	movs	r3, #1
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2301      	movs	r3, #1
 80037fc:	2202      	movs	r2, #2
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f001 fd0a 	bl	8005218 <HAL_I2C_Mem_Read>
 8003804:	4603      	mov	r3, r0
 8003806:	737b      	strb	r3, [r7, #13]
                              PCA9535_REG_OUTPUT_PORT0,
                              I2C_MEMADD_SIZE_8BIT,
                              &currentPort0,
                              1,
                              EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <Expander_SetPinState+0x48>
    {
        return status;
 800380e:	7b7b      	ldrb	r3, [r7, #13]
 8003810:	e058      	b.n	80038c4 <Expander_SetPinState+0xfa>
    }
    status = HAL_I2C_Mem_Read(hi2c,
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	b29b      	uxth	r3, r3
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	b299      	uxth	r1, r3
 800381a:	2364      	movs	r3, #100	@ 0x64
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	2301      	movs	r3, #1
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	f107 030b 	add.w	r3, r7, #11
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2301      	movs	r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 fcf3 	bl	8005218 <HAL_I2C_Mem_Read>
 8003832:	4603      	mov	r3, r0
 8003834:	737b      	strb	r3, [r7, #13]
                              PCA9535_REG_OUTPUT_PORT1,
                              I2C_MEMADD_SIZE_8BIT,
                              &currentPort1,
                              1,
                              EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003836:	7b7b      	ldrb	r3, [r7, #13]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <Expander_SetPinState+0x76>
    {
        return status;
 800383c:	7b7b      	ldrb	r3, [r7, #13]
 800383e:	e041      	b.n	80038c4 <Expander_SetPinState+0xfa>
    }

    /* Update the appropriate port based on the pin mask.
       It is assumed that only one port's bit is set in 'pin'. */
    if ((pin & 0xFF00) == 0) // Pin belongs to Port 0
 8003840:	883b      	ldrh	r3, [r7, #0]
 8003842:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003846:	2b00      	cmp	r3, #0
 8003848:	d114      	bne.n	8003874 <Expander_SetPinState+0xaa>
    {
        if (isHigh)
 800384a:	78bb      	ldrb	r3, [r7, #2]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <Expander_SetPinState+0x92>
        {
            port0 = currentPort0 | (uint8_t)pin;
 8003850:	883b      	ldrh	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	7b3b      	ldrb	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e008      	b.n	800386e <Expander_SetPinState+0xa4>
        }
        else
        {
            port0 = currentPort0 & ~(uint8_t)pin;
 800385c:	883b      	ldrh	r3, [r7, #0]
 800385e:	b25b      	sxtb	r3, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	b25a      	sxtb	r2, r3
 8003864:	7b3b      	ldrb	r3, [r7, #12]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	4013      	ands	r3, r2
 800386a:	b25b      	sxtb	r3, r3
 800386c:	73fb      	strb	r3, [r7, #15]
        }
        port1 = currentPort1; // unchanged
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	73bb      	strb	r3, [r7, #14]
 8003872:	e01e      	b.n	80038b2 <Expander_SetPinState+0xe8>
    }
    else if ((pin & 0x00FF) == 0) // Pin belongs to Port 1
 8003874:	883b      	ldrh	r3, [r7, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d118      	bne.n	80038ae <Expander_SetPinState+0xe4>
    {
        if (isHigh)
 800387c:	78bb      	ldrb	r3, [r7, #2]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <Expander_SetPinState+0xc8>
        {
            port1 = currentPort1 | (uint8_t)(pin >> 8);
 8003882:	883b      	ldrh	r3, [r7, #0]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	b29b      	uxth	r3, r3
 8003888:	b2da      	uxtb	r2, r3
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	4313      	orrs	r3, r2
 800388e:	73bb      	strb	r3, [r7, #14]
 8003890:	e00a      	b.n	80038a8 <Expander_SetPinState+0xde>
        }
        else
        {
            port1 = currentPort1 & ~(uint8_t)(pin >> 8);
 8003892:	883b      	ldrh	r3, [r7, #0]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	b29b      	uxth	r3, r3
 8003898:	b25b      	sxtb	r3, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	b25a      	sxtb	r2, r3
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	4013      	ands	r3, r2
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	73bb      	strb	r3, [r7, #14]
        }
        port0 = currentPort0; // unchanged
 80038a8:	7b3b      	ldrb	r3, [r7, #12]
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e001      	b.n	80038b2 <Expander_SetPinState+0xe8>
    }
    else
    {
        /* Invalid pin mask: bits set for both ports */
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e008      	b.n	80038c4 <Expander_SetPinState+0xfa>
    }

    /* Write updated outputs */
    status = Expander_SetOutputs(hi2c, deviceAddress, port0, port1);
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	78f9      	ldrb	r1, [r7, #3]
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff4d 	bl	8003758 <Expander_SetOutputs>
 80038be:	4603      	mov	r3, r0
 80038c0:	737b      	strb	r3, [r7, #13]
    return status;
 80038c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <Expander_SingleLEDControl>:


HAL_StatusTypeDef Expander_SingleLEDControl(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint16_t pin, uint8_t isHigh, uint16_t delay)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	70fb      	strb	r3, [r7, #3]
 80038de:	460b      	mov	r3, r1
 80038e0:	803b      	strh	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;

    status = Expander_SetPinState(hi2c, deviceAddress, pin, isHigh);
 80038e6:	78bb      	ldrb	r3, [r7, #2]
 80038e8:	883a      	ldrh	r2, [r7, #0]
 80038ea:	78f9      	ldrb	r1, [r7, #3]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff6c 	bl	80037ca <Expander_SetPinState>
 80038f2:	4603      	mov	r3, r0
 80038f4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <Expander_SingleLEDControl+0x40>
        printf("Failed to set LED state: device 0x%02X, pin 0x%04X\n", deviceAddress, pin);
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	883a      	ldrh	r2, [r7, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	4808      	ldr	r0, [pc, #32]	@ (8003924 <Expander_SingleLEDControl+0x58>)
 8003904:	f003 fdc0 	bl	8007488 <iprintf>
        return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	e007      	b.n	800391c <Expander_SingleLEDControl+0x50>
    }

    if (delay > 0) {
 800390c:	8b3b      	ldrh	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <Expander_SingleLEDControl+0x4e>
        HAL_Delay(delay);
 8003912:	8b3b      	ldrh	r3, [r7, #24]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 ff71 	bl	80047fc <HAL_Delay>
    }

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	080085d8 	.word	0x080085d8

08003928 <RunLEDSequence>:

    return HAL_OK;
}

void RunLEDSequence(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af02      	add	r7, sp, #8
		{&hi2c3, GPIO_EXPANDER_ID_01, CELL_03_LED_01},
		{&hi2c3, GPIO_EXPANDER_ID_01, CELL_02_LED_01},
        {&hi2c3, GPIO_EXPANDER_ID_01, CELL_01_LED_01}
    };

    const size_t led_count = sizeof(leds) / sizeof(leds[0]);
 800392e:	2318      	movs	r3, #24
 8003930:	603b      	str	r3, [r7, #0]

    // Turn each LED on and off sequentially
    for (size_t i = 0; i < led_count; i++) {
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	e02f      	b.n	8003998 <RunLEDSequence+0x70>
        // Turn on current LED
        Expander_SingleLEDControl(leds[i].i2c, leds[i].address, leds[i].pin, 1, 500);
 8003938:	4a27      	ldr	r2, [pc, #156]	@ (80039d8 <RunLEDSequence+0xb0>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003940:	4a25      	ldr	r2, [pc, #148]	@ (80039d8 <RunLEDSequence+0xb0>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	7919      	ldrb	r1, [r3, #4]
 800394a:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <RunLEDSequence+0xb0>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	88da      	ldrh	r2, [r3, #6]
 8003954:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2301      	movs	r3, #1
 800395c:	f7ff ffb6 	bl	80038cc <Expander_SingleLEDControl>

        // Turn off previous LED (if not first LED)
        if (i > 0) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <RunLEDSequence+0x6a>
            Expander_SingleLEDControl(leds[i-1].i2c, leds[i-1].address, leds[i-1].pin, 0, 0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3b01      	subs	r3, #1
 800396a:	4a1b      	ldr	r2, [pc, #108]	@ (80039d8 <RunLEDSequence+0xb0>)
 800396c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	4a18      	ldr	r2, [pc, #96]	@ (80039d8 <RunLEDSequence+0xb0>)
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	7919      	ldrb	r1, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <RunLEDSequence+0xb0>)
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	88da      	ldrh	r2, [r3, #6]
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	f7ff ff9d 	bl	80038cc <Expander_SingleLEDControl>
    for (size_t i = 0; i < led_count; i++) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3301      	adds	r3, #1
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d3cb      	bcc.n	8003938 <RunLEDSequence+0x10>
        }
    }

    // Turn off last LED
    Expander_SingleLEDControl(leds[led_count-1].i2c, leds[led_count-1].address, leds[led_count-1].pin, 0, 500);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <RunLEDSequence+0xb0>)
 80039a6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <RunLEDSequence+0xb0>)
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	7919      	ldrb	r1, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4a07      	ldr	r2, [pc, #28]	@ (80039d8 <RunLEDSequence+0xb0>)
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	88da      	ldrh	r2, [r3, #6]
 80039c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	f7ff ff7f 	bl	80038cc <Expander_SingleLEDControl>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	080092cc 	.word	0x080092cc

080039dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039e0:	f000 fe9a 	bl	8004718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039e4:	f000 f866 	bl	8003ab4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039e8:	f000 f9f6 	bl	8003dd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80039ec:	f000 f952 	bl	8003c94 <MX_SPI1_Init>
  MX_SPI2_Init();
 80039f0:	f000 f986 	bl	8003d00 <MX_SPI2_Init>
  MX_I2C2_Init();
 80039f4:	f000 f8ce 	bl	8003b94 <MX_I2C2_Init>
  MX_I2C3_Init();
 80039f8:	f000 f90c 	bl	8003c14 <MX_I2C3_Init>
  MX_SPI3_Init();
 80039fc:	f000 f9b6 	bl	8003d6c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the display module */
  Display_Init();
 8003a00:	f7ff fd8a 	bl	8003518 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8003a04:	f7ff fdb0 	bl	8003568 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8003a08:	4827      	ldr	r0, [pc, #156]	@ (8003aa8 <main+0xcc>)
 8003a0a:	f7ff fe47 	bl	800369c <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8003a0e:	4827      	ldr	r0, [pc, #156]	@ (8003aac <main+0xd0>)
 8003a10:	f7ff fe44 	bl	800369c <Expander_InitAllDevices>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   Scan_I2C_Bus();
 8003a14:	f000 fbe0 	bl	80041d8 <Scan_I2C_Bus>
	   Display_MainTitlePage();
 8003a18:	f7ff fda6 	bl	8003568 <Display_MainTitlePage>
//
//	   Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_02_LED_01, 1);



	    HAL_Delay(100);
 8003a1c:	2064      	movs	r0, #100	@ 0x64
 8003a1e:	f000 feed 	bl	80047fc <HAL_Delay>

	    // Run the LED sequence
	     RunLEDSequence();
 8003a22:	f7ff ff81 	bl	8003928 <RunLEDSequence>

	     HAL_Delay(100); // Delay between sequences
 8003a26:	2064      	movs	r0, #100	@ 0x64
 8003a28:	f000 fee8 	bl	80047fc <HAL_Delay>

		  ////////////////////////////////////////////////////

		  cell12_Temp_01_Set(resistance[0]);
 8003a2c:	4b20      	ldr	r3, [pc, #128]	@ (8003ab0 <main+0xd4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	f7ff f86c 	bl	8002b18 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <main+0xd4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	f7ff f918 	bl	8002c84 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8003a54:	4b16      	ldr	r3, [pc, #88]	@ (8003ab0 <main+0xd4>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	ee07 3a90 	vmov	s15, r3
 8003a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a60:	eeb0 0a67 	vmov.f32	s0, s15
 8003a64:	f7ff f9ce 	bl	8002e04 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <main+0xd4>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	f7ff fa7a 	bl	8002f70 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <main+0xd4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a88:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8c:	f7ff fb30 	bl	80030f0 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[5]);
 8003a90:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <main+0xd4>)
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa0:	f7ff fbe6 	bl	8003270 <cell11_Temp_03_Set>
	   Scan_I2C_Bus();
 8003aa4:	bf00      	nop
 8003aa6:	e7b5      	b.n	8003a14 <main+0x38>
 8003aa8:	20000944 	.word	0x20000944
 8003aac:	20000998 	.word	0x20000998
 8003ab0:	20000408 	.word	0x20000408

08003ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b094      	sub	sp, #80	@ 0x50
 8003ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	2230      	movs	r2, #48	@ 0x30
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fd55 	bl	8007572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <SystemClock_Config+0xd8>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <SystemClock_Config+0xd8>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <SystemClock_Config+0xd8>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af4:	2300      	movs	r3, #0
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <SystemClock_Config+0xdc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <SystemClock_Config+0xdc>)
 8003afe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <SystemClock_Config+0xdc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003b24:	230f      	movs	r3, #15
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003b28:	23d8      	movs	r3, #216	@ 0xd8
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b30:	2304      	movs	r3, #4
 8003b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b34:	f107 0320 	add.w	r3, r7, #32
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f002 fb4d 	bl	80061d8 <HAL_RCC_OscConfig>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b44:	f000 fb7c 	bl	8004240 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b48:	f002 faf6 	bl	8006138 <HAL_PWREx_EnableOverDrive>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003b52:	f000 fb75 	bl	8004240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b56:	230f      	movs	r3, #15
 8003b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	2105      	movs	r1, #5
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fda7 	bl	80066c8 <HAL_RCC_ClockConfig>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003b80:	f000 fb5e 	bl	8004240 <Error_Handler>
  }
}
 8003b84:	bf00      	nop
 8003b86:	3750      	adds	r7, #80	@ 0x50
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000

08003b94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c0c <MX_I2C2_Init+0x78>)
 8003b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <MX_I2C2_Init+0x7c>)
 8003ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003baa:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bb8:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bc4:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bca:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003bd0:	480d      	ldr	r0, [pc, #52]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bd2:	f001 f8e3 	bl	8004d9c <HAL_I2C_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003bdc:	f000 fb30 	bl	8004240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003be0:	2100      	movs	r1, #0
 8003be2:	4809      	ldr	r0, [pc, #36]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003be4:	f002 fa2c 	bl	8006040 <HAL_I2CEx_ConfigAnalogFilter>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003bee:	f000 fb27 	bl	8004240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4804      	ldr	r0, [pc, #16]	@ (8003c08 <MX_I2C2_Init+0x74>)
 8003bf6:	f002 fa5f 	bl	80060b8 <HAL_I2CEx_ConfigDigitalFilter>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003c00:	f000 fb1e 	bl	8004240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000944 	.word	0x20000944
 8003c0c:	40005800 	.word	0x40005800
 8003c10:	00061a80 	.word	0x00061a80

08003c14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <MX_I2C3_Init+0x78>)
 8003c1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <MX_I2C3_Init+0x7c>)
 8003c22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c24:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003c2a:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c30:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c38:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003c3e:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c44:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c50:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c52:	f001 f8a3 	bl	8004d9c <HAL_I2C_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003c5c:	f000 faf0 	bl	8004240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c60:	2100      	movs	r1, #0
 8003c62:	4809      	ldr	r0, [pc, #36]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c64:	f002 f9ec 	bl	8006040 <HAL_I2CEx_ConfigAnalogFilter>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003c6e:	f000 fae7 	bl	8004240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003c72:	2100      	movs	r1, #0
 8003c74:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <MX_I2C3_Init+0x74>)
 8003c76:	f002 fa1f 	bl	80060b8 <HAL_I2CEx_ConfigDigitalFilter>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003c80:	f000 fade 	bl	8004240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000998 	.word	0x20000998
 8003c8c:	40005c00 	.word	0x40005c00
 8003c90:	00061a80 	.word	0x00061a80

08003c94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c98:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003c9a:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <MX_SPI1_Init+0x68>)
 8003c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003ca0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ca6:	4b14      	ldr	r3, [pc, #80]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cc8:	2218      	movs	r2, #24
 8003cca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003ce0:	220a      	movs	r2, #10
 8003ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ce4:	4804      	ldr	r0, [pc, #16]	@ (8003cf8 <MX_SPI1_Init+0x64>)
 8003ce6:	f002 febb 	bl	8006a60 <HAL_SPI_Init>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cf0:	f000 faa6 	bl	8004240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200009ec 	.word	0x200009ec
 8003cfc:	40013000 	.word	0x40013000

08003d00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d04:	4b17      	ldr	r3, [pc, #92]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d06:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <MX_SPI2_Init+0x68>)
 8003d08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d12:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d18:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1e:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d34:	2218      	movs	r2, #24
 8003d36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d44:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d50:	4804      	ldr	r0, [pc, #16]	@ (8003d64 <MX_SPI2_Init+0x64>)
 8003d52:	f002 fe85 	bl	8006a60 <HAL_SPI_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d5c:	f000 fa70 	bl	8004240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000a44 	.word	0x20000a44
 8003d68:	40003800 	.word	0x40003800

08003d6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003d70:	4b17      	ldr	r3, [pc, #92]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d72:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <MX_SPI3_Init+0x68>)
 8003d74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8a:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003da0:	2220      	movs	r2, #32
 8003da2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003db8:	220a      	movs	r2, #10
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dbc:	4804      	ldr	r0, [pc, #16]	@ (8003dd0 <MX_SPI3_Init+0x64>)
 8003dbe:	f002 fe4f 	bl	8006a60 <HAL_SPI_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003dc8:	f000 fa3a 	bl	8004240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000a9c 	.word	0x20000a9c
 8003dd4:	40003c00 	.word	0x40003c00

08003dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08e      	sub	sp, #56	@ 0x38
 8003ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	4bb3      	ldr	r3, [pc, #716]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4ab2      	ldr	r2, [pc, #712]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfe:	4bb0      	ldr	r3, [pc, #704]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	4bac      	ldr	r3, [pc, #688]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4aab      	ldr	r2, [pc, #684]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4ba9      	ldr	r3, [pc, #676]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	4ba5      	ldr	r3, [pc, #660]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	4aa4      	ldr	r2, [pc, #656]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e36:	4ba2      	ldr	r3, [pc, #648]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	4b9e      	ldr	r3, [pc, #632]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a9d      	ldr	r2, [pc, #628]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b9b      	ldr	r3, [pc, #620]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b97      	ldr	r3, [pc, #604]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a96      	ldr	r2, [pc, #600]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b94      	ldr	r3, [pc, #592]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b90      	ldr	r3, [pc, #576]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a8f      	ldr	r2, [pc, #572]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	4b89      	ldr	r3, [pc, #548]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	4a88      	ldr	r2, [pc, #544]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ea6:	4b86      	ldr	r3, [pc, #536]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	4b82      	ldr	r3, [pc, #520]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a81      	ldr	r2, [pc, #516]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a7a      	ldr	r2, [pc, #488]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b78      	ldr	r3, [pc, #480]	@ (80040c0 <MX_GPIO_Init+0x2e8>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003eea:	2200      	movs	r2, #0
 8003eec:	217f      	movs	r1, #127	@ 0x7f
 8003eee:	4875      	ldr	r0, [pc, #468]	@ (80040c4 <MX_GPIO_Init+0x2ec>)
 8003ef0:	f000 ff3a 	bl	8004d68 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8003efa:	4873      	ldr	r0, [pc, #460]	@ (80040c8 <MX_GPIO_Init+0x2f0>)
 8003efc:	f000 ff34 	bl	8004d68 <HAL_GPIO_WritePin>
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_RESET);
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f06:	4871      	ldr	r0, [pc, #452]	@ (80040cc <MX_GPIO_Init+0x2f4>)
 8003f08:	f000 ff2e 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin, GPIO_PIN_RESET);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2103      	movs	r1, #3
 8003f10:	486f      	ldr	r0, [pc, #444]	@ (80040d0 <MX_GPIO_Init+0x2f8>)
 8003f12:	f000 ff29 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin|CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8003f16:	2201      	movs	r2, #1
 8003f18:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8003f1c:	486c      	ldr	r0, [pc, #432]	@ (80040d0 <MX_GPIO_Init+0x2f8>)
 8003f1e:	f000 ff23 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003f22:	2201      	movs	r2, #1
 8003f24:	2103      	movs	r1, #3
 8003f26:	4869      	ldr	r0, [pc, #420]	@ (80040cc <MX_GPIO_Init+0x2f4>)
 8003f28:	f000 ff1e 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4868      	ldr	r0, [pc, #416]	@ (80040d4 <MX_GPIO_Init+0x2fc>)
 8003f32:	f000 ff19 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4866      	ldr	r0, [pc, #408]	@ (80040d4 <MX_GPIO_Init+0x2fc>)
 8003f3c:	f000 ff14 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8003f40:	2201      	movs	r2, #1
 8003f42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f46:	4864      	ldr	r0, [pc, #400]	@ (80040d8 <MX_GPIO_Init+0x300>)
 8003f48:	f000 ff0e 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003f52:	4862      	ldr	r0, [pc, #392]	@ (80040dc <MX_GPIO_Init+0x304>)
 8003f54:	f000 ff08 	bl	8004d68 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8003f5e:	4860      	ldr	r0, [pc, #384]	@ (80040e0 <MX_GPIO_Init+0x308>)
 8003f60:	f000 ff02 	bl	8004d68 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003f6a:	485c      	ldr	r0, [pc, #368]	@ (80040dc <MX_GPIO_Init+0x304>)
 8003f6c:	f000 fefc 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|DISPLAY_CSD3_Pin, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	210c      	movs	r1, #12
 8003f74:	485b      	ldr	r0, [pc, #364]	@ (80040e4 <MX_GPIO_Init+0x30c>)
 8003f76:	f000 fef7 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2118      	movs	r1, #24
 8003f7e:	4856      	ldr	r0, [pc, #344]	@ (80040d8 <MX_GPIO_Init+0x300>)
 8003f80:	f000 fef2 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003f84:	237c      	movs	r3, #124	@ 0x7c
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f90:	2302      	movs	r3, #2
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	484a      	ldr	r0, [pc, #296]	@ (80040c4 <MX_GPIO_Init+0x2ec>)
 8003f9c:	f000 fd38 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_10_Pin CELL12_CS_09_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin
 8003fa0:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4843      	ldr	r0, [pc, #268]	@ (80040c8 <MX_GPIO_Init+0x2f0>)
 8003fba:	f000 fd29 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin;
 8003fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CS_07_GPIO_Port, &GPIO_InitStruct);
 8003fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	483d      	ldr	r0, [pc, #244]	@ (80040cc <MX_GPIO_Init+0x2f4>)
 8003fd8:	f000 fd1a 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4837      	ldr	r0, [pc, #220]	@ (80040d0 <MX_GPIO_Init+0x2f8>)
 8003ff4:	f000 fd0c 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8003ff8:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffe:	2301      	movs	r3, #1
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004002:	2301      	movs	r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800400a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800400e:	4619      	mov	r1, r3
 8004010:	482f      	ldr	r0, [pc, #188]	@ (80040d0 <MX_GPIO_Init+0x2f8>)
 8004012:	f000 fcfd 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8004016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401c:	2301      	movs	r3, #1
 800401e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004020:	2302      	movs	r3, #2
 8004022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2303      	movs	r3, #3
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800402c:	4619      	mov	r1, r3
 800402e:	4828      	ldr	r0, [pc, #160]	@ (80040d0 <MX_GPIO_Init+0x2f8>)
 8004030:	f000 fcee 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8004034:	2301      	movs	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004038:	2301      	movs	r3, #1
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800403c:	2302      	movs	r3, #2
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004040:	2303      	movs	r3, #3
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8004044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004048:	4619      	mov	r1, r3
 800404a:	4820      	ldr	r0, [pc, #128]	@ (80040cc <MX_GPIO_Init+0x2f4>)
 800404c:	f000 fce0 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8004050:	2302      	movs	r3, #2
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004054:	2301      	movs	r3, #1
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004058:	2301      	movs	r3, #1
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405c:	2303      	movs	r3, #3
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8004060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	4819      	ldr	r0, [pc, #100]	@ (80040cc <MX_GPIO_Init+0x2f4>)
 8004068:	f000 fcd2 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004070:	2301      	movs	r3, #1
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004074:	2302      	movs	r3, #2
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 800407c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004080:	4619      	mov	r1, r3
 8004082:	4814      	ldr	r0, [pc, #80]	@ (80040d4 <MX_GPIO_Init+0x2fc>)
 8004084:	f000 fcc4 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004088:	2302      	movs	r3, #2
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408c:	2301      	movs	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	2300      	movs	r3, #0
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800409c:	4619      	mov	r1, r3
 800409e:	480d      	ldr	r0, [pc, #52]	@ (80040d4 <MX_GPIO_Init+0x2fc>)
 80040a0:	f000 fcb6 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 80040a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ae:	2301      	movs	r3, #1
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b2:	2303      	movs	r3, #3
 80040b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 80040b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ba:	4619      	mov	r1, r3
 80040bc:	e014      	b.n	80040e8 <MX_GPIO_Init+0x310>
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40022000 	.word	0x40022000
 80040cc:	40020800 	.word	0x40020800
 80040d0:	40021400 	.word	0x40021400
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40021c00 	.word	0x40021c00
 80040e0:	40021800 	.word	0x40021800
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	4836      	ldr	r0, [pc, #216]	@ (80041c4 <MX_GPIO_Init+0x3ec>)
 80040ea:	f000 fc91 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 80040ee:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f4:	2301      	movs	r3, #1
 80040f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040f8:	2302      	movs	r3, #2
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040fc:	2303      	movs	r3, #3
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004104:	4619      	mov	r1, r3
 8004106:	4830      	ldr	r0, [pc, #192]	@ (80041c8 <MX_GPIO_Init+0x3f0>)
 8004108:	f000 fc82 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 800410c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004112:	2301      	movs	r3, #1
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004116:	2301      	movs	r3, #1
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411a:	2303      	movs	r3, #3
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800411e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004122:	4619      	mov	r1, r3
 8004124:	4828      	ldr	r0, [pc, #160]	@ (80041c8 <MX_GPIO_Init+0x3f0>)
 8004126:	f000 fc73 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin BACKLIGHT_1_Pin BACKLIGHT_2_Pin
                           LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 800412a:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004130:	2301      	movs	r3, #1
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800413c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004140:	4619      	mov	r1, r3
 8004142:	4822      	ldr	r0, [pc, #136]	@ (80041cc <MX_GPIO_Init+0x3f4>)
 8004144:	f000 fc64 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8004148:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414e:	2301      	movs	r3, #1
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004156:	2300      	movs	r3, #0
 8004158:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800415a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800415e:	4619      	mov	r1, r3
 8004160:	4819      	ldr	r0, [pc, #100]	@ (80041c8 <MX_GPIO_Init+0x3f0>)
 8004162:	f000 fc55 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_CSD3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_CSD3_Pin;
 8004166:	230c      	movs	r3, #12
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	2301      	movs	r3, #1
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800417a:	4619      	mov	r1, r3
 800417c:	4814      	ldr	r0, [pc, #80]	@ (80041d0 <MX_GPIO_Init+0x3f8>)
 800417e:	f000 fc47 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 8004182:	2318      	movs	r3, #24
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004186:	2301      	movs	r3, #1
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418e:	2300      	movs	r3, #0
 8004190:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004196:	4619      	mov	r1, r3
 8004198:	480a      	ldr	r0, [pc, #40]	@ (80041c4 <MX_GPIO_Init+0x3ec>)
 800419a:	f000 fc39 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 800419e:	2303      	movs	r3, #3
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a2:	2301      	movs	r3, #1
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041aa:	2300      	movs	r3, #0
 80041ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041b2:	4619      	mov	r1, r3
 80041b4:	4807      	ldr	r0, [pc, #28]	@ (80041d4 <MX_GPIO_Init+0x3fc>)
 80041b6:	f000 fc2b 	bl	8004a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041ba:	bf00      	nop
 80041bc:	3738      	adds	r7, #56	@ 0x38
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40021c00 	.word	0x40021c00
 80041cc:	40021800 	.word	0x40021800
 80041d0:	40020c00 	.word	0x40020c00
 80041d4:	40021000 	.word	0x40021000

080041d8 <Scan_I2C_Bus>:

/* USER CODE BEGIN 4 */

void Scan_I2C_Bus(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0

      /* Declare the address variable */

    /* Iterate over the possible 7-bit I²C addresses (1 to 127) */
    for (address = 1U; address < 128U; address++)
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e01f      	b.n	8004224 <Scan_I2C_Bus+0x4c>
    {
        /* Check if a device is ready at this address
         * The address is left-shifted by 1 as HAL_I2C_IsDeviceReady expects the 7-bit address in the upper bits.
         */
        result = HAL_I2C_IsDeviceReady(&hi2c3, (address << 1), 1U, 10U);
 80041e4:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	b299      	uxth	r1, r3
 80041ec:	230a      	movs	r3, #10
 80041ee:	2201      	movs	r2, #1
 80041f0:	4811      	ldr	r0, [pc, #68]	@ (8004238 <Scan_I2C_Bus+0x60>)
 80041f2:	f001 fa43 	bl	800567c <HAL_I2C_IsDeviceReady>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <Scan_I2C_Bus+0x64>)
 80041fc:	701a      	strb	r2, [r3, #0]

        if (result == HAL_OK)
 80041fe:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <Scan_I2C_Bus+0x64>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <Scan_I2C_Bus+0x40>
        {
            /* Display the detected address (your Display_Address function should handle this)
             * For example, this could light up LEDs or update an LCD.
             */
            Display_Address(address);
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f9f8 	bl	8003600 <Display_Address>
            HAL_Delay(1000U);  /* Display the address for 1 second */
 8004210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004214:	f000 faf2 	bl	80047fc <HAL_Delay>
    for (address = 1U; address < 128U; address++)
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <Scan_I2C_Bus+0x5c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b25b      	sxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	dada      	bge.n	80041e4 <Scan_I2C_Bus+0xc>
        }
    }
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000940 	.word	0x20000940
 8004238:	20000998 	.word	0x20000998
 800423c:	20000941 	.word	0x20000941

08004240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004244:	b672      	cpsid	i
}
 8004246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <Error_Handler+0x8>

0800424c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <HAL_MspInit+0x4c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	4a0f      	ldr	r2, [pc, #60]	@ (8004298 <HAL_MspInit+0x4c>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004260:	6453      	str	r3, [r2, #68]	@ 0x44
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <HAL_MspInit+0x4c>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_MspInit+0x4c>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <HAL_MspInit+0x4c>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	@ 0x40
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_MspInit+0x4c>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800

0800429c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	@ 0x30
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 031c 	add.w	r3, r7, #28
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a32      	ldr	r2, [pc, #200]	@ (8004384 <HAL_I2C_MspInit+0xe8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d12c      	bne.n	8004318 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	4a30      	ldr	r2, [pc, #192]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 80042c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042da:	2330      	movs	r3, #48	@ 0x30
 80042dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042de:	2312      	movs	r3, #18
 80042e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e6:	2303      	movs	r3, #3
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042ea:	2304      	movs	r3, #4
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80042ee:	f107 031c 	add.w	r3, r7, #28
 80042f2:	4619      	mov	r1, r3
 80042f4:	4825      	ldr	r0, [pc, #148]	@ (800438c <HAL_I2C_MspInit+0xf0>)
 80042f6:	f000 fb8b 	bl	8004a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	4a21      	ldr	r2, [pc, #132]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004304:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004308:	6413      	str	r3, [r2, #64]	@ 0x40
 800430a:	4b1f      	ldr	r3, [pc, #124]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004316:	e031      	b.n	800437c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_I2C_MspInit+0xf4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d12c      	bne.n	800437c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 800432c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004330:	6313      	str	r3, [r2, #48]	@ 0x30
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800433e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004344:	2312      	movs	r3, #18
 8004346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004350:	2304      	movs	r3, #4
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	4619      	mov	r1, r3
 800435a:	480c      	ldr	r0, [pc, #48]	@ (800438c <HAL_I2C_MspInit+0xf0>)
 800435c:	f000 fb58 	bl	8004a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	4a07      	ldr	r2, [pc, #28]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 800436a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800436e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_I2C_MspInit+0xec>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	bf00      	nop
 800437e:	3730      	adds	r7, #48	@ 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40005800 	.word	0x40005800
 8004388:	40023800 	.word	0x40023800
 800438c:	40021c00 	.word	0x40021c00
 8004390:	40005c00 	.word	0x40005c00

08004394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	@ 0x38
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4b      	ldr	r2, [pc, #300]	@ (80044e0 <HAL_SPI_MspInit+0x14c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d12c      	bne.n	8004410 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	4a49      	ldr	r2, [pc, #292]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80043c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a42      	ldr	r2, [pc, #264]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e2:	4b40      	ldr	r3, [pc, #256]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80043ee:	23e0      	movs	r3, #224	@ 0xe0
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fa:	2303      	movs	r3, #3
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043fe:	2305      	movs	r3, #5
 8004400:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004406:	4619      	mov	r1, r3
 8004408:	4837      	ldr	r0, [pc, #220]	@ (80044e8 <HAL_SPI_MspInit+0x154>)
 800440a:	f000 fb01 	bl	8004a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800440e:	e063      	b.n	80044d8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a35      	ldr	r2, [pc, #212]	@ (80044ec <HAL_SPI_MspInit+0x158>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d12c      	bne.n	8004474 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	4a30      	ldr	r2, [pc, #192]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004428:	6413      	str	r3, [r2, #64]	@ 0x40
 800442a:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	4b2a      	ldr	r3, [pc, #168]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	4a29      	ldr	r2, [pc, #164]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004444:	6313      	str	r3, [r2, #48]	@ 0x30
 8004446:	4b27      	ldr	r3, [pc, #156]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004452:	230e      	movs	r3, #14
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004462:	2305      	movs	r3, #5
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446a:	4619      	mov	r1, r3
 800446c:	4820      	ldr	r0, [pc, #128]	@ (80044f0 <HAL_SPI_MspInit+0x15c>)
 800446e:	f000 facf 	bl	8004a10 <HAL_GPIO_Init>
}
 8004472:	e031      	b.n	80044d8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_SPI_MspInit+0x160>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d12c      	bne.n	80044d8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <HAL_SPI_MspInit+0x150>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80044b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044c8:	2306      	movs	r3, #6
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044d0:	4619      	mov	r1, r3
 80044d2:	4809      	ldr	r0, [pc, #36]	@ (80044f8 <HAL_SPI_MspInit+0x164>)
 80044d4:	f000 fa9c 	bl	8004a10 <HAL_GPIO_Init>
}
 80044d8:	bf00      	nop
 80044da:	3738      	adds	r7, #56	@ 0x38
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40013000 	.word	0x40013000
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40020000 	.word	0x40020000
 80044ec:	40003800 	.word	0x40003800
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40003c00 	.word	0x40003c00
 80044f8:	40020800 	.word	0x40020800

080044fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004500:	bf00      	nop
 8004502:	e7fd      	b.n	8004500 <NMI_Handler+0x4>

08004504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <HardFault_Handler+0x4>

0800450c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <MemManage_Handler+0x4>

08004514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <BusFault_Handler+0x4>

0800451c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <UsageFault_Handler+0x4>

08004524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004552:	f000 f933 	bl	80047bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}

0800455a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e00a      	b.n	8004582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800456c:	f3af 8000 	nop.w
 8004570:	4601      	mov	r1, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	60ba      	str	r2, [r7, #8]
 8004578:	b2ca      	uxtb	r2, r1
 800457a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3301      	adds	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	dbf0      	blt.n	800456c <_read+0x12>
  }

  return len;
 800458a:	687b      	ldr	r3, [r7, #4]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e009      	b.n	80045ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	60ba      	str	r2, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3301      	adds	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	dbf1      	blt.n	80045a6 <_write+0x12>
  }
  return len;
 80045c2:	687b      	ldr	r3, [r7, #4]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_close>:

int _close(int file)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045f4:	605a      	str	r2, [r3, #4]
  return 0;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_isatty>:

int _isatty(int file)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800460c:	2301      	movs	r3, #1
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800463c:	4a14      	ldr	r2, [pc, #80]	@ (8004690 <_sbrk+0x5c>)
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <_sbrk+0x60>)
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004648:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <_sbrk+0x64>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004650:	4b11      	ldr	r3, [pc, #68]	@ (8004698 <_sbrk+0x64>)
 8004652:	4a12      	ldr	r2, [pc, #72]	@ (800469c <_sbrk+0x68>)
 8004654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <_sbrk+0x64>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d207      	bcs.n	8004674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004664:	f002 ffd4 	bl	8007610 <__errno>
 8004668:	4603      	mov	r3, r0
 800466a:	220c      	movs	r2, #12
 800466c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	e009      	b.n	8004688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004674:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <_sbrk+0x64>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <_sbrk+0x64>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	4a05      	ldr	r2, [pc, #20]	@ (8004698 <_sbrk+0x64>)
 8004684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20030000 	.word	0x20030000
 8004694:	00000400 	.word	0x00000400
 8004698:	20000af4 	.word	0x20000af4
 800469c:	20000c48 	.word	0x20000c48

080046a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <SystemInit+0x20>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	4a05      	ldr	r2, [pc, #20]	@ (80046c0 <SystemInit+0x20>)
 80046ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80046c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046c8:	f7ff ffea 	bl	80046a0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046cc:	480c      	ldr	r0, [pc, #48]	@ (8004700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046ce:	490d      	ldr	r1, [pc, #52]	@ (8004704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d4:	e002      	b.n	80046dc <LoopCopyDataInit>

080046d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046da:	3304      	adds	r3, #4

080046dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e0:	d3f9      	bcc.n	80046d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046e2:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e8:	e001      	b.n	80046ee <LoopFillZerobss>

080046ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046ec:	3204      	adds	r2, #4

080046ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f0:	d3fb      	bcc.n	80046ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80046f2:	f002 ff93 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046f6:	f7ff f971 	bl	80039dc <main>
  bx  lr    
 80046fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80046fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004704:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8004708:	080093e8 	.word	0x080093e8
  ldr r2, =_sbss
 800470c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8004710:	20000c48 	.word	0x20000c48

08004714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004714:	e7fe      	b.n	8004714 <ADC_IRQHandler>
	...

08004718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800471c:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <HAL_Init+0x40>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HAL_Init+0x40>)
 8004722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004728:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_Init+0x40>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <HAL_Init+0x40>)
 800472e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_Init+0x40>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_Init+0x40>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f000 f931 	bl	80049a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004746:	200f      	movs	r0, #15
 8004748:	f000 f808 	bl	800475c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800474c:	f7ff fd7e 	bl	800424c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00

0800475c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004764:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_InitTick+0x54>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_InitTick+0x58>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004772:	fbb3 f3f1 	udiv	r3, r3, r1
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f93b 	bl	80049f6 <HAL_SYSTICK_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e00e      	b.n	80047a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d80a      	bhi.n	80047a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004790:	2200      	movs	r2, #0
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	f000 f911 	bl	80049be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800479c:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <HAL_InitTick+0x5c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000420 	.word	0x20000420
 80047b4:	20000428 	.word	0x20000428
 80047b8:	20000424 	.word	0x20000424

080047bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_IncTick+0x20>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_IncTick+0x24>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <HAL_IncTick+0x24>)
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000428 	.word	0x20000428
 80047e0:	20000af8 	.word	0x20000af8

080047e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return uwTick;
 80047e8:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <HAL_GetTick+0x14>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000af8 	.word	0x20000af8

080047fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004804:	f7ff ffee 	bl	80047e4 <HAL_GetTick>
 8004808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d005      	beq.n	8004822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <HAL_Delay+0x44>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004822:	bf00      	nop
 8004824:	f7ff ffde 	bl	80047e4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d8f7      	bhi.n	8004824 <HAL_Delay+0x28>
  {
  }
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000428 	.word	0x20000428

08004844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	db0a      	blt.n	80048d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	490c      	ldr	r1, [pc, #48]	@ (80048f4 <__NVIC_SetPriority+0x4c>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	440b      	add	r3, r1
 80048cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d0:	e00a      	b.n	80048e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4908      	ldr	r1, [pc, #32]	@ (80048f8 <__NVIC_SetPriority+0x50>)
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3b04      	subs	r3, #4
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	440b      	add	r3, r1
 80048e6:	761a      	strb	r2, [r3, #24]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000e100 	.word	0xe000e100
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	@ 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f1c3 0307 	rsb	r3, r3, #7
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf28      	it	cs
 800491a:	2304      	movcs	r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3304      	adds	r3, #4
 8004922:	2b06      	cmp	r3, #6
 8004924:	d902      	bls.n	800492c <NVIC_EncodePriority+0x30>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3b03      	subs	r3, #3
 800492a:	e000      	b.n	800492e <NVIC_EncodePriority+0x32>
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	401a      	ands	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004944:	f04f 31ff 	mov.w	r1, #4294967295
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	43d9      	mvns	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	4313      	orrs	r3, r2
         );
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	@ 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004974:	d301      	bcc.n	800497a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004976:	2301      	movs	r3, #1
 8004978:	e00f      	b.n	800499a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497a:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <SysTick_Config+0x40>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3b01      	subs	r3, #1
 8004980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004982:	210f      	movs	r1, #15
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	f7ff ff8e 	bl	80048a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <SysTick_Config+0x40>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004992:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <SysTick_Config+0x40>)
 8004994:	2207      	movs	r2, #7
 8004996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	e000e010 	.word	0xe000e010

080049a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff47 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d0:	f7ff ff5c 	bl	800488c <__NVIC_GetPriorityGrouping>
 80049d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	6978      	ldr	r0, [r7, #20]
 80049dc:	f7ff ff8e 	bl	80048fc <NVIC_EncodePriority>
 80049e0:	4602      	mov	r2, r0
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff5d 	bl	80048a8 <__NVIC_SetPriority>
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ffb0 	bl	8004964 <SysTick_Config>
 8004a04:	4603      	mov	r3, r0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b089      	sub	sp, #36	@ 0x24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e177      	b.n	8004d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	f040 8166 	bne.w	8004d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d005      	beq.n	8004a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d130      	bne.n	8004ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a98:	2201      	movs	r2, #1
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 0201 	and.w	r2, r3, #1
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d017      	beq.n	8004b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2203      	movs	r2, #3
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d123      	bne.n	8004b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	220f      	movs	r2, #15
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	08da      	lsrs	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3208      	adds	r2, #8
 8004b4e:	69b9      	ldr	r1, [r7, #24]
 8004b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	2203      	movs	r2, #3
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0203 	and.w	r2, r3, #3
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80c0 	beq.w	8004d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_GPIO_Init+0x324>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_GPIO_Init+0x324>)
 8004ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ba6:	4b63      	ldr	r3, [pc, #396]	@ (8004d34 <HAL_GPIO_Init+0x324>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb2:	4a61      	ldr	r2, [pc, #388]	@ (8004d38 <HAL_GPIO_Init+0x328>)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	@ (8004d3c <HAL_GPIO_Init+0x32c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d037      	beq.n	8004c4e <HAL_GPIO_Init+0x23e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a57      	ldr	r2, [pc, #348]	@ (8004d40 <HAL_GPIO_Init+0x330>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d031      	beq.n	8004c4a <HAL_GPIO_Init+0x23a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a56      	ldr	r2, [pc, #344]	@ (8004d44 <HAL_GPIO_Init+0x334>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d02b      	beq.n	8004c46 <HAL_GPIO_Init+0x236>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a55      	ldr	r2, [pc, #340]	@ (8004d48 <HAL_GPIO_Init+0x338>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d025      	beq.n	8004c42 <HAL_GPIO_Init+0x232>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a54      	ldr	r2, [pc, #336]	@ (8004d4c <HAL_GPIO_Init+0x33c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01f      	beq.n	8004c3e <HAL_GPIO_Init+0x22e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a53      	ldr	r2, [pc, #332]	@ (8004d50 <HAL_GPIO_Init+0x340>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d019      	beq.n	8004c3a <HAL_GPIO_Init+0x22a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a52      	ldr	r2, [pc, #328]	@ (8004d54 <HAL_GPIO_Init+0x344>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <HAL_GPIO_Init+0x226>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a51      	ldr	r2, [pc, #324]	@ (8004d58 <HAL_GPIO_Init+0x348>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00d      	beq.n	8004c32 <HAL_GPIO_Init+0x222>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a50      	ldr	r2, [pc, #320]	@ (8004d5c <HAL_GPIO_Init+0x34c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <HAL_GPIO_Init+0x21e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4f      	ldr	r2, [pc, #316]	@ (8004d60 <HAL_GPIO_Init+0x350>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <HAL_GPIO_Init+0x21a>
 8004c26:	2309      	movs	r3, #9
 8004c28:	e012      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	e010      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	e00e      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c32:	2307      	movs	r3, #7
 8004c34:	e00c      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c36:	2306      	movs	r3, #6
 8004c38:	e00a      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c3a:	2305      	movs	r3, #5
 8004c3c:	e008      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c3e:	2304      	movs	r3, #4
 8004c40:	e006      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c42:	2303      	movs	r3, #3
 8004c44:	e004      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e002      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_GPIO_Init+0x240>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	f002 0203 	and.w	r2, r2, #3
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	4093      	lsls	r3, r2
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c60:	4935      	ldr	r1, [pc, #212]	@ (8004d38 <HAL_GPIO_Init+0x328>)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c92:	4a34      	ldr	r2, [pc, #208]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c98:	4b32      	ldr	r3, [pc, #200]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cbc:	4a29      	ldr	r2, [pc, #164]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cc2:	4b28      	ldr	r3, [pc, #160]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d10:	4a14      	ldr	r2, [pc, #80]	@ (8004d64 <HAL_GPIO_Init+0x354>)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	f67f ae84 	bls.w	8004a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3724      	adds	r7, #36	@ 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40013800 	.word	0x40013800
 8004d3c:	40020000 	.word	0x40020000
 8004d40:	40020400 	.word	0x40020400
 8004d44:	40020800 	.word	0x40020800
 8004d48:	40020c00 	.word	0x40020c00
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40021400 	.word	0x40021400
 8004d54:	40021800 	.word	0x40021800
 8004d58:	40021c00 	.word	0x40021c00
 8004d5c:	40022000 	.word	0x40022000
 8004d60:	40022400 	.word	0x40022400
 8004d64:	40013c00 	.word	0x40013c00

08004d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
 8004d74:	4613      	mov	r3, r2
 8004d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	041a      	lsls	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e12b      	b.n	8005006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fa6a 	bl	800429c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	@ 0x24
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e00:	f001 fe1a 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4a81      	ldr	r2, [pc, #516]	@ (8005010 <HAL_I2C_Init+0x274>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d807      	bhi.n	8004e20 <HAL_I2C_Init+0x84>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a80      	ldr	r2, [pc, #512]	@ (8005014 <HAL_I2C_Init+0x278>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e006      	b.n	8004e2e <HAL_I2C_Init+0x92>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a7d      	ldr	r2, [pc, #500]	@ (8005018 <HAL_I2C_Init+0x27c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	bf94      	ite	ls
 8004e28:	2301      	movls	r3, #1
 8004e2a:	2300      	movhi	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0e7      	b.n	8005006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a78      	ldr	r2, [pc, #480]	@ (800501c <HAL_I2C_Init+0x280>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0c9b      	lsrs	r3, r3, #18
 8004e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a6a      	ldr	r2, [pc, #424]	@ (8005010 <HAL_I2C_Init+0x274>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <HAL_I2C_Init+0xd4>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	e009      	b.n	8004e84 <HAL_I2C_Init+0xe8>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	4a69      	ldr	r2, [pc, #420]	@ (8005020 <HAL_I2C_Init+0x284>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	3301      	adds	r3, #1
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	495c      	ldr	r1, [pc, #368]	@ (8005010 <HAL_I2C_Init+0x274>)
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d819      	bhi.n	8004ed8 <HAL_I2C_Init+0x13c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e59      	subs	r1, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb2:	1c59      	adds	r1, r3, #1
 8004eb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004eb8:	400b      	ands	r3, r1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_I2C_Init+0x138>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1e59      	subs	r1, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed2:	e051      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	e04f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d111      	bne.n	8004f04 <HAL_I2C_Init+0x168>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1e58      	subs	r0, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e012      	b.n	8004f2a <HAL_I2C_Init+0x18e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1e58      	subs	r0, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	0099      	lsls	r1, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Init+0x196>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e022      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <HAL_I2C_Init+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1e58      	subs	r0, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	440b      	add	r3, r1
 8004f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f56:	e00f      	b.n	8004f78 <HAL_I2C_Init+0x1dc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1e58      	subs	r0, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	0099      	lsls	r1, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	6809      	ldr	r1, [r1, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004fa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6911      	ldr	r1, [r2, #16]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68d2      	ldr	r2, [r2, #12]
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	000186a0 	.word	0x000186a0
 8005014:	001e847f 	.word	0x001e847f
 8005018:	003d08ff 	.word	0x003d08ff
 800501c:	431bde83 	.word	0x431bde83
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	460b      	mov	r3, r1
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800503e:	f7ff fbd1 	bl	80047e4 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	f040 80d9 	bne.w	8005204 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2319      	movs	r3, #25
 8005058:	2201      	movs	r2, #1
 800505a:	496d      	ldr	r1, [pc, #436]	@ (8005210 <HAL_I2C_Mem_Write+0x1ec>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fdb9 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	e0cc      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2C_Mem_Write+0x56>
 8005076:	2302      	movs	r3, #2
 8005078:	e0c5      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d007      	beq.n	80050a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	@ 0x21
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2240      	movs	r2, #64	@ 0x40
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a4d      	ldr	r2, [pc, #308]	@ (8005214 <HAL_I2C_Mem_Write+0x1f0>)
 80050e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050e2:	88f8      	ldrh	r0, [r7, #6]
 80050e4:	893a      	ldrh	r2, [r7, #8]
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4603      	mov	r3, r0
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fbf0 	bl	80058d8 <I2C_RequestMemoryWrite>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d052      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e081      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fe7e 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2b04      	cmp	r3, #4
 8005118:	d107      	bne.n	800512a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06b      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11b      	bne.n	80051a4 <HAL_I2C_Mem_Write+0x180>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1aa      	bne.n	8005102 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fe71 	bl	8005e98 <I2C_WaitOnBTFFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d107      	bne.n	80051d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e016      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	00100002 	.word	0x00100002
 8005214:	ffff0000 	.word	0xffff0000

08005218 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005232:	f7ff fad7 	bl	80047e4 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b20      	cmp	r3, #32
 8005242:	f040 8214 	bne.w	800566e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2319      	movs	r3, #25
 800524c:	2201      	movs	r2, #1
 800524e:	497b      	ldr	r1, [pc, #492]	@ (800543c <HAL_I2C_Mem_Read+0x224>)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fcbf 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	e207      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2C_Mem_Read+0x56>
 800526a:	2302      	movs	r3, #2
 800526c:	e200      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d007      	beq.n	8005294 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2222      	movs	r2, #34	@ 0x22
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2240      	movs	r2, #64	@ 0x40
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005440 <HAL_I2C_Mem_Read+0x228>)
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052d6:	88f8      	ldrh	r0, [r7, #6]
 80052d8:	893a      	ldrh	r2, [r7, #8]
 80052da:	8979      	ldrh	r1, [r7, #10]
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4603      	mov	r3, r0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fb8c 	bl	8005a04 <I2C_RequestMemoryRead>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e1bc      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d113      	bne.n	8005326 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e190      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532a:	2b01      	cmp	r3, #1
 800532c:	d11b      	bne.n	8005366 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e170      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536a:	2b02      	cmp	r3, #2
 800536c:	d11b      	bne.n	80053a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800538c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	e150      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053bc:	e144      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	f200 80f1 	bhi.w	80055aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d123      	bne.n	8005418 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fda7 	bl	8005f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e145      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005416:	e117      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	2b02      	cmp	r3, #2
 800541e:	d14e      	bne.n	80054be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	2200      	movs	r2, #0
 8005428:	4906      	ldr	r1, [pc, #24]	@ (8005444 <HAL_I2C_Mem_Read+0x22c>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fbd2 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e11a      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
 800543a:	bf00      	nop
 800543c:	00100002 	.word	0x00100002
 8005440:	ffff0000 	.word	0xffff0000
 8005444:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054bc:	e0c4      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2200      	movs	r2, #0
 80054c6:	496c      	ldr	r1, [pc, #432]	@ (8005678 <HAL_I2C_Mem_Read+0x460>)
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fb83 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0cb      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005520:	2200      	movs	r2, #0
 8005522:	4955      	ldr	r1, [pc, #340]	@ (8005678 <HAL_I2C_Mem_Read+0x460>)
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fb55 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e09d      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055a8:	e04e      	b.n	8005648 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fcba 	bl	8005f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e058      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d124      	bne.n	8005648 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005614:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f aeb6 	bne.w	80053be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e000      	b.n	8005670 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800566e:	2302      	movs	r3, #2
  }
}
 8005670:	4618      	mov	r0, r3
 8005672:	3728      	adds	r7, #40	@ 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	00010004 	.word	0x00010004

0800567c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	460b      	mov	r3, r1
 800568a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800568c:	f7ff f8aa 	bl	80047e4 <HAL_GetTick>
 8005690:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b20      	cmp	r3, #32
 80056a0:	f040 8111 	bne.w	80058c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2319      	movs	r3, #25
 80056aa:	2201      	movs	r2, #1
 80056ac:	4988      	ldr	r1, [pc, #544]	@ (80058d0 <HAL_I2C_IsDeviceReady+0x254>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fa90 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e104      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_I2C_IsDeviceReady+0x50>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0fd      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d007      	beq.n	80056f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005700:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2224      	movs	r2, #36	@ 0x24
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a70      	ldr	r2, [pc, #448]	@ (80058d4 <HAL_I2C_IsDeviceReady+0x258>)
 8005714:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005724:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2200      	movs	r2, #0
 800572e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fa4e 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574c:	d103      	bne.n	8005756 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005754:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0b6      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800575a:	897b      	ldrh	r3, [r7, #10]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005768:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800576a:	f7ff f83b 	bl	80047e4 <HAL_GetTick>
 800576e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800579e:	e025      	b.n	80057ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057a0:	f7ff f820 	bl	80047e4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <HAL_I2C_IsDeviceReady+0x13a>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22a0      	movs	r2, #160	@ 0xa0
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80057f6:	d005      	beq.n	8005804 <HAL_I2C_IsDeviceReady+0x188>
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_I2C_IsDeviceReady+0x188>
 80057fe:	7dbb      	ldrb	r3, [r7, #22]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0cd      	beq.n	80057a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d129      	bne.n	800586e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005828:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	2319      	movs	r3, #25
 8005846:	2201      	movs	r2, #1
 8005848:	4921      	ldr	r1, [pc, #132]	@ (80058d0 <HAL_I2C_IsDeviceReady+0x254>)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f9c2 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e036      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e02c      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005886:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2319      	movs	r3, #25
 800588e:	2201      	movs	r2, #1
 8005890:	490f      	ldr	r1, [pc, #60]	@ (80058d0 <HAL_I2C_IsDeviceReady+0x254>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f99e 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e012      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	3301      	adds	r3, #1
 80058a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	f4ff af32 	bcc.w	8005716 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	00100002 	.word	0x00100002
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2200      	movs	r2, #0
 800590a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f960 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005928:	d103      	bne.n	8005932 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005930:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e05f      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	492d      	ldr	r1, [pc, #180]	@ (8005a00 <I2C_RequestMemoryWrite+0x128>)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f9bb 	bl	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e04c      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005974:	6a39      	ldr	r1, [r7, #32]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa46 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005986:	2b04      	cmp	r3, #4
 8005988:	d107      	bne.n	800599a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e02b      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d105      	bne.n	80059b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a4:	893b      	ldrh	r3, [r7, #8]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	e021      	b.n	80059f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059b0:	893b      	ldrh	r3, [r7, #8]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c0:	6a39      	ldr	r1, [r7, #32]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fa20 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d107      	bne.n	80059e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e005      	b.n	80059f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	00010002 	.word	0x00010002

08005a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f8c2 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a64:	d103      	bne.n	8005a6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0aa      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	4952      	ldr	r1, [pc, #328]	@ (8005bd0 <I2C_RequestMemoryRead+0x1cc>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f91d 	bl	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e097      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab0:	6a39      	ldr	r1, [r7, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f9a8 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d107      	bne.n	8005ad6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e076      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	e021      	b.n	8005b30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afc:	6a39      	ldr	r1, [r7, #32]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f982 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d107      	bne.n	8005b22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e050      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b26:	893b      	ldrh	r3, [r7, #8]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b32:	6a39      	ldr	r1, [r7, #32]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f967 	bl	8005e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d107      	bne.n	8005b58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e035      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f82b 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b92:	d103      	bne.n	8005b9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e013      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ba0:	897b      	ldrh	r3, [r7, #10]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	6a3a      	ldr	r2, [r7, #32]
 8005bb4:	4906      	ldr	r1, [pc, #24]	@ (8005bd0 <I2C_RequestMemoryRead+0x1cc>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f886 	bl	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	00010002 	.word	0x00010002

08005bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be4:	e048      	b.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d044      	beq.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fe fdf9 	bl	80047e4 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d139      	bne.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10d      	bne.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	e00c      	b.n	8005c44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d116      	bne.n	8005c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e023      	b.n	8005cc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10d      	bne.n	8005c9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	43da      	mvns	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	e00c      	b.n	8005cb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	43da      	mvns	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d093      	beq.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cd6:	e071      	b.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce6:	d123      	bne.n	8005d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	f043 0204 	orr.w	r2, r3, #4
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e067      	b.n	8005e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d041      	beq.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d38:	f7fe fd54 	bl	80047e4 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d302      	bcc.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d136      	bne.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10c      	bne.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	43da      	mvns	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4013      	ands	r3, r2
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bf14      	ite	ne
 8005d6a:	2301      	movne	r3, #1
 8005d6c:	2300      	moveq	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	e00b      	b.n	8005d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	43da      	mvns	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e021      	b.n	8005e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10c      	bne.n	8005de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	43da      	mvns	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e00b      	b.n	8005df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	43da      	mvns	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bf14      	ite	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	2300      	moveq	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f af6d 	bne.w	8005cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e14:	e034      	b.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f8e3 	bl	8005fe2 <I2C_IsAcknowledgeFailed>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e034      	b.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d028      	beq.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fe fcd9 	bl	80047e4 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11d      	bne.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b80      	cmp	r3, #128	@ 0x80
 8005e50:	d016      	beq.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e007      	b.n	8005e90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	d1c3      	bne.n	8005e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ea4:	e034      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f89b 	bl	8005fe2 <I2C_IsAcknowledgeFailed>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e034      	b.n	8005f20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d028      	beq.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fe fc91 	bl	80047e4 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11d      	bne.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d016      	beq.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e007      	b.n	8005f20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d1c3      	bne.n	8005ea6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f34:	e049      	b.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d119      	bne.n	8005f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0210 	mvn.w	r2, #16
 8005f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e030      	b.n	8005fda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f78:	f7fe fc34 	bl	80047e4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d302      	bcc.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d11d      	bne.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d016      	beq.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e007      	b.n	8005fda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d1ae      	bne.n	8005f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff8:	d11b      	bne.n	8006032 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006002:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f043 0204 	orr.w	r2, r3, #4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d129      	bne.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2224      	movs	r2, #36	@ 0x24
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0210 	bic.w	r2, r2, #16
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e000      	b.n	80060ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
  }
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d12a      	bne.n	8006128 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2224      	movs	r2, #36	@ 0x24
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80060f2:	89fb      	ldrh	r3, [r7, #14]
 80060f4:	f023 030f 	bic.w	r3, r3, #15
 80060f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	89fb      	ldrh	r3, [r7, #14]
 8006100:	4313      	orrs	r3, r2
 8006102:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	89fa      	ldrh	r2, [r7, #14]
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	e000      	b.n	800612a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
  }
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	4a1f      	ldr	r2, [pc, #124]	@ (80061c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006150:	6413      	str	r3, [r2, #64]	@ 0x40
 8006152:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800615e:	4b1b      	ldr	r3, [pc, #108]	@ (80061cc <HAL_PWREx_EnableOverDrive+0x94>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006164:	f7fe fb3e 	bl	80047e4 <HAL_GetTick>
 8006168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800616a:	e009      	b.n	8006180 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800616c:	f7fe fb3a 	bl	80047e4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800617a:	d901      	bls.n	8006180 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e01f      	b.n	80061c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006180:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800618c:	d1ee      	bne.n	800616c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006194:	f7fe fb26 	bl	80047e4 <HAL_GetTick>
 8006198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800619a:	e009      	b.n	80061b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800619c:	f7fe fb22 	bl	80047e4 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061aa:	d901      	bls.n	80061b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e007      	b.n	80061c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061bc:	d1ee      	bne.n	800619c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	420e0040 	.word	0x420e0040
 80061d0:	40007000 	.word	0x40007000
 80061d4:	420e0044 	.word	0x420e0044

080061d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e267      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d075      	beq.n	80062e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061f6:	4b88      	ldr	r3, [pc, #544]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00c      	beq.n	800621c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006202:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800620a:	2b08      	cmp	r3, #8
 800620c:	d112      	bne.n	8006234 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800620e:	4b82      	ldr	r3, [pc, #520]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800621a:	d10b      	bne.n	8006234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	4b7e      	ldr	r3, [pc, #504]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05b      	beq.n	80062e0 <HAL_RCC_OscConfig+0x108>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d157      	bne.n	80062e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e242      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x74>
 800623e:	4b76      	ldr	r3, [pc, #472]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a75      	ldr	r2, [pc, #468]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e01d      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006254:	d10c      	bne.n	8006270 <HAL_RCC_OscConfig+0x98>
 8006256:	4b70      	ldr	r3, [pc, #448]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6f      	ldr	r2, [pc, #444]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b6d      	ldr	r3, [pc, #436]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a6c      	ldr	r2, [pc, #432]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00b      	b.n	8006288 <HAL_RCC_OscConfig+0xb0>
 8006270:	4b69      	ldr	r3, [pc, #420]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a68      	ldr	r2, [pc, #416]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b66      	ldr	r3, [pc, #408]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a65      	ldr	r2, [pc, #404]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fe faa8 	bl	80047e4 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fe faa4 	bl	80047e4 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	@ 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e207      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0xc0>
 80062b6:	e014      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fe fa94 	bl	80047e4 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fe fa90 	bl	80047e4 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	@ 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e1f3      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d2:	4b51      	ldr	r3, [pc, #324]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0xe8>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d063      	beq.n	80063b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fa:	4b47      	ldr	r3, [pc, #284]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006302:	2b08      	cmp	r3, #8
 8006304:	d11c      	bne.n	8006340 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006306:	4b44      	ldr	r3, [pc, #272]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d116      	bne.n	8006340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	4b41      	ldr	r3, [pc, #260]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_RCC_OscConfig+0x152>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d001      	beq.n	800632a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1c7      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632a:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4937      	ldr	r1, [pc, #220]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633e:	e03a      	b.n	80063b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d020      	beq.n	800638a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006348:	4b34      	ldr	r3, [pc, #208]	@ (800641c <HAL_RCC_OscConfig+0x244>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634e:	f7fe fa49 	bl	80047e4 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006356:	f7fe fa45 	bl	80047e4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e1a8      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006374:	4b28      	ldr	r3, [pc, #160]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4925      	ldr	r1, [pc, #148]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]
 8006388:	e015      	b.n	80063b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638a:	4b24      	ldr	r3, [pc, #144]	@ (800641c <HAL_RCC_OscConfig+0x244>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fe fa28 	bl	80047e4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006398:	f7fe fa24 	bl	80047e4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e187      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d036      	beq.n	8006430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ca:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <HAL_RCC_OscConfig+0x248>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fe fa08 	bl	80047e4 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d8:	f7fe fa04 	bl	80047e4 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e167      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_RCC_OscConfig+0x240>)
 80063ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0x200>
 80063f6:	e01b      	b.n	8006430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f8:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <HAL_RCC_OscConfig+0x248>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fe:	f7fe f9f1 	bl	80047e4 <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	e00e      	b.n	8006424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006406:	f7fe f9ed 	bl	80047e4 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d907      	bls.n	8006424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e150      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
 8006418:	40023800 	.word	0x40023800
 800641c:	42470000 	.word	0x42470000
 8006420:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006424:	4b88      	ldr	r3, [pc, #544]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1ea      	bne.n	8006406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8097 	beq.w	800656c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006442:	4b81      	ldr	r3, [pc, #516]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	4b7d      	ldr	r3, [pc, #500]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	4a7c      	ldr	r2, [pc, #496]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645c:	6413      	str	r3, [r2, #64]	@ 0x40
 800645e:	4b7a      	ldr	r3, [pc, #488]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646e:	4b77      	ldr	r3, [pc, #476]	@ (800664c <HAL_RCC_OscConfig+0x474>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d118      	bne.n	80064ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647a:	4b74      	ldr	r3, [pc, #464]	@ (800664c <HAL_RCC_OscConfig+0x474>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a73      	ldr	r2, [pc, #460]	@ (800664c <HAL_RCC_OscConfig+0x474>)
 8006480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006486:	f7fe f9ad 	bl	80047e4 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648e:	f7fe f9a9 	bl	80047e4 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e10c      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a0:	4b6a      	ldr	r3, [pc, #424]	@ (800664c <HAL_RCC_OscConfig+0x474>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <HAL_RCC_OscConfig+0x2ea>
 80064b4:	4b64      	ldr	r3, [pc, #400]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b8:	4a63      	ldr	r2, [pc, #396]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c0:	e01c      	b.n	80064fc <HAL_RCC_OscConfig+0x324>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCC_OscConfig+0x30c>
 80064ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064da:	4a5b      	ldr	r2, [pc, #364]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e2:	e00b      	b.n	80064fc <HAL_RCC_OscConfig+0x324>
 80064e4:	4b58      	ldr	r3, [pc, #352]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e8:	4a57      	ldr	r2, [pc, #348]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f0:	4b55      	ldr	r3, [pc, #340]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f4:	4a54      	ldr	r2, [pc, #336]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80064f6:	f023 0304 	bic.w	r3, r3, #4
 80064fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fe f96e 	bl	80047e4 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fe f96a 	bl	80047e4 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e0cb      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	4b49      	ldr	r3, [pc, #292]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ee      	beq.n	800650c <HAL_RCC_OscConfig+0x334>
 800652e:	e014      	b.n	800655a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006530:	f7fe f958 	bl	80047e4 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006536:	e00a      	b.n	800654e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fe f954 	bl	80047e4 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e0b5      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654e:	4b3e      	ldr	r3, [pc, #248]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ee      	bne.n	8006538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d105      	bne.n	800656c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006560:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	4a38      	ldr	r2, [pc, #224]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800656a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a1 	beq.w	80066b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006576:	4b34      	ldr	r3, [pc, #208]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b08      	cmp	r3, #8
 8006580:	d05c      	beq.n	800663c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d141      	bne.n	800660e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658a:	4b31      	ldr	r3, [pc, #196]	@ (8006650 <HAL_RCC_OscConfig+0x478>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006590:	f7fe f928 	bl	80047e4 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006598:	f7fe f924 	bl	80047e4 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e087      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065aa:	4b27      	ldr	r3, [pc, #156]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	3b01      	subs	r3, #1
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	061b      	lsls	r3, r3, #24
 80065da:	491b      	ldr	r1, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_RCC_OscConfig+0x478>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e6:	f7fe f8fd 	bl	80047e4 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ee:	f7fe f8f9 	bl	80047e4 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e05c      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006600:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCC_OscConfig+0x416>
 800660c:	e054      	b.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660e:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <HAL_RCC_OscConfig+0x478>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006614:	f7fe f8e6 	bl	80047e4 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fe f8e2 	bl	80047e4 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e045      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662e:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <HAL_RCC_OscConfig+0x470>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x444>
 800663a:	e03d      	b.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e038      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
 8006648:	40023800 	.word	0x40023800
 800664c:	40007000 	.word	0x40007000
 8006650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006654:	4b1b      	ldr	r3, [pc, #108]	@ (80066c4 <HAL_RCC_OscConfig+0x4ec>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d028      	beq.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d121      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d11a      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800668a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023800 	.word	0x40023800

080066c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0cc      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066dc:	4b68      	ldr	r3, [pc, #416]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90c      	bls.n	8006704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b65      	ldr	r3, [pc, #404]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b63      	ldr	r3, [pc, #396]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0b8      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800671c:	4b59      	ldr	r3, [pc, #356]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a58      	ldr	r2, [pc, #352]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006734:	4b53      	ldr	r3, [pc, #332]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a52      	ldr	r2, [pc, #328]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800673e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006740:	4b50      	ldr	r3, [pc, #320]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	494d      	ldr	r1, [pc, #308]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	4313      	orrs	r3, r2
 8006750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d044      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b47      	ldr	r3, [pc, #284]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e07f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d003      	beq.n	8006786 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006782:	2b03      	cmp	r3, #3
 8006784:	d107      	bne.n	8006796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006786:	4b3f      	ldr	r3, [pc, #252]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e06f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006796:	4b3b      	ldr	r3, [pc, #236]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e067      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a6:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f023 0203 	bic.w	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4934      	ldr	r1, [pc, #208]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b8:	f7fe f814 	bl	80047e4 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	e00a      	b.n	80067d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c0:	f7fe f810 	bl	80047e4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e04f      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 020c 	and.w	r2, r3, #12
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1eb      	bne.n	80067c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e8:	4b25      	ldr	r3, [pc, #148]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d20c      	bcs.n	8006810 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f6:	4b22      	ldr	r3, [pc, #136]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b20      	ldr	r3, [pc, #128]	@ (8006880 <HAL_RCC_ClockConfig+0x1b8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d001      	beq.n	8006810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e032      	b.n	8006876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800681c:	4b19      	ldr	r3, [pc, #100]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4916      	ldr	r1, [pc, #88]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800682a:	4313      	orrs	r3, r2
 800682c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	490e      	ldr	r1, [pc, #56]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800684e:	f000 f821 	bl	8006894 <HAL_RCC_GetSysClockFreq>
 8006852:	4602      	mov	r2, r0
 8006854:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	490a      	ldr	r1, [pc, #40]	@ (8006888 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	5ccb      	ldrb	r3, [r1, r3]
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	4a09      	ldr	r2, [pc, #36]	@ (800688c <HAL_RCC_ClockConfig+0x1c4>)
 8006868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800686a:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7fd ff74 	bl	800475c <HAL_InitTick>

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023c00 	.word	0x40023c00
 8006884:	40023800 	.word	0x40023800
 8006888:	0800938c 	.word	0x0800938c
 800688c:	20000420 	.word	0x20000420
 8006890:	20000424 	.word	0x20000424

08006894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b090      	sub	sp, #64	@ 0x40
 800689a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ac:	4b59      	ldr	r3, [pc, #356]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 030c 	and.w	r3, r3, #12
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d00d      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0x40>
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	f200 80a1 	bhi.w	8006a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x34>
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d003      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0x3a>
 80068c6:	e09b      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c8:	4b53      	ldr	r3, [pc, #332]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80068ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068cc:	e09b      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ce:	4b53      	ldr	r3, [pc, #332]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80068d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068d2:	e098      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068de:	4b4d      	ldr	r3, [pc, #308]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d028      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	099b      	lsrs	r3, r3, #6
 80068f0:	2200      	movs	r2, #0
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068fc:	2100      	movs	r1, #0
 80068fe:	4b47      	ldr	r3, [pc, #284]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006900:	fb03 f201 	mul.w	r2, r3, r1
 8006904:	2300      	movs	r3, #0
 8006906:	fb00 f303 	mul.w	r3, r0, r3
 800690a:	4413      	add	r3, r2
 800690c:	4a43      	ldr	r2, [pc, #268]	@ (8006a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800690e:	fba0 1202 	umull	r1, r2, r0, r2
 8006912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006914:	460a      	mov	r2, r1
 8006916:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691a:	4413      	add	r3, r2
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800691e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006920:	2200      	movs	r2, #0
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	61fa      	str	r2, [r7, #28]
 8006926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800692e:	f7fa f8a5 	bl	8000a7c <__aeabi_uldivmod>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4613      	mov	r3, r2
 8006938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800693a:	e053      	b.n	80069e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693c:	4b35      	ldr	r3, [pc, #212]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	2200      	movs	r2, #0
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	617a      	str	r2, [r7, #20]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800694e:	f04f 0b00 	mov.w	fp, #0
 8006952:	4652      	mov	r2, sl
 8006954:	465b      	mov	r3, fp
 8006956:	f04f 0000 	mov.w	r0, #0
 800695a:	f04f 0100 	mov.w	r1, #0
 800695e:	0159      	lsls	r1, r3, #5
 8006960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006964:	0150      	lsls	r0, r2, #5
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	ebb2 080a 	subs.w	r8, r2, sl
 800696e:	eb63 090b 	sbc.w	r9, r3, fp
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800697e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006986:	ebb2 0408 	subs.w	r4, r2, r8
 800698a:	eb63 0509 	sbc.w	r5, r3, r9
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	00eb      	lsls	r3, r5, #3
 8006998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800699c:	00e2      	lsls	r2, r4, #3
 800699e:	4614      	mov	r4, r2
 80069a0:	461d      	mov	r5, r3
 80069a2:	eb14 030a 	adds.w	r3, r4, sl
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	eb45 030b 	adc.w	r3, r5, fp
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ba:	4629      	mov	r1, r5
 80069bc:	028b      	lsls	r3, r1, #10
 80069be:	4621      	mov	r1, r4
 80069c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c4:	4621      	mov	r1, r4
 80069c6:	028a      	lsls	r2, r1, #10
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	2200      	movs	r2, #0
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	60fa      	str	r2, [r7, #12]
 80069d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d8:	f7fa f850 	bl	8000a7c <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4613      	mov	r3, r2
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80069e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	3301      	adds	r3, #1
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80069f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069fe:	e002      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3740      	adds	r7, #64	@ 0x40
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800
 8006a18:	00f42400 	.word	0x00f42400
 8006a1c:	017d7840 	.word	0x017d7840

08006a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b03      	ldr	r3, [pc, #12]	@ (8006a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000420 	.word	0x20000420

08006a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a3c:	f7ff fff0 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	0a9b      	lsrs	r3, r3, #10
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4903      	ldr	r1, [pc, #12]	@ (8006a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	0800939c 	.word	0x0800939c

08006a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e07b      	b.n	8006b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a82:	d009      	beq.n	8006a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
 8006a8a:	e005      	b.n	8006a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fd fc6e 	bl	8004394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	ea42 0103 	orr.w	r1, r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	f003 0104 	and.w	r1, r3, #4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	f003 0210 	and.w	r2, r3, #16
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b82:	f7fd fe2f 	bl	80047e4 <HAL_GetTick>
 8006b86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d001      	beq.n	8006b9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e12a      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0x36>
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e122      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_SPI_Transmit+0x48>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e11b      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c08:	d10f      	bne.n	8006c2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c34:	2b40      	cmp	r3, #64	@ 0x40
 8006c36:	d007      	beq.n	8006c48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c50:	d152      	bne.n	8006cf8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_SPI_Transmit+0xee>
 8006c5a:	8b7b      	ldrh	r3, [r7, #26]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d145      	bne.n	8006cec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	1c9a      	adds	r2, r3, #2
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c84:	e032      	b.n	8006cec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d112      	bne.n	8006cba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c98:	881a      	ldrh	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006cb8:	e018      	b.n	8006cec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cba:	f7fd fd93 	bl	80047e4 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d803      	bhi.n	8006cd2 <HAL_SPI_Transmit+0x160>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d102      	bne.n	8006cd8 <HAL_SPI_Transmit+0x166>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e082      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1c7      	bne.n	8006c86 <HAL_SPI_Transmit+0x114>
 8006cf6:	e053      	b.n	8006da0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_Transmit+0x194>
 8006d00:	8b7b      	ldrh	r3, [r7, #26]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d147      	bne.n	8006d96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d2c:	e033      	b.n	8006d96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d113      	bne.n	8006d64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d62:	e018      	b.n	8006d96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d64:	f7fd fd3e 	bl	80047e4 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_Transmit+0x20a>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Transmit+0x210>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e02d      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1c6      	bne.n	8006d2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa59 	bl	800725c <SPI_EndRxTxTransaction>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b08a      	sub	sp, #40	@ 0x28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e0c:	f7fd fcea 	bl	80047e4 <HAL_GetTick>
 8006e10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00c      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x4a>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e30:	d106      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x46>
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d001      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
 8006e42:	e17f      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x5c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x5c>
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e174      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x6e>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e16d      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d003      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2205      	movs	r2, #5
 8006e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	887a      	ldrh	r2, [r7, #2]
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	887a      	ldrh	r2, [r7, #2]
 8006e9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	887a      	ldrh	r2, [r7, #2]
 8006ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b40      	cmp	r3, #64	@ 0x40
 8006ec6:	d007      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ee0:	d17e      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_TransmitReceive+0xf6>
 8006eea:	8afb      	ldrh	r3, [r7, #22]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d16c      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f00:	1c9a      	adds	r2, r3, #2
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f14:	e059      	b.n	8006fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d11b      	bne.n	8006f5c <HAL_SPI_TransmitReceive+0x162>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d016      	beq.n	8006f5c <HAL_SPI_TransmitReceive+0x162>
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d113      	bne.n	8006f5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	881a      	ldrh	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	1c9a      	adds	r2, r3, #2
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d119      	bne.n	8006f9e <HAL_SPI_TransmitReceive+0x1a4>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d014      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f9e:	f7fd fc21 	bl	80047e4 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d80d      	bhi.n	8006fca <HAL_SPI_TransmitReceive+0x1d0>
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d009      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e0bc      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1a0      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x11c>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d19b      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x11c>
 8006fde:	e082      	b.n	80070e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x1f4>
 8006fe8:	8afb      	ldrh	r3, [r7, #22]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d171      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007014:	e05d      	b.n	80070d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d11c      	bne.n	800705e <HAL_SPI_TransmitReceive+0x264>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <HAL_SPI_TransmitReceive+0x264>
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	2b01      	cmp	r3, #1
 8007032:	d114      	bne.n	800705e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d119      	bne.n	80070a0 <HAL_SPI_TransmitReceive+0x2a6>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d014      	beq.n	80070a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800709c:	2301      	movs	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070a0:	f7fd fba0 	bl	80047e4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d803      	bhi.n	80070b8 <HAL_SPI_TransmitReceive+0x2be>
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d102      	bne.n	80070be <HAL_SPI_TransmitReceive+0x2c4>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e038      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d19c      	bne.n	8007016 <HAL_SPI_TransmitReceive+0x21c>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d197      	bne.n	8007016 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f8b6 	bl	800725c <SPI_EndRxTxTransaction>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e01d      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007110:	2300      	movs	r3, #0
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007142:	2300      	movs	r3, #0
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	3728      	adds	r7, #40	@ 0x28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800715c:	f7fd fb42 	bl	80047e4 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4413      	add	r3, r2
 800716a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800716c:	f7fd fb3a 	bl	80047e4 <HAL_GetTick>
 8007170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007172:	4b39      	ldr	r3, [pc, #228]	@ (8007258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	015b      	lsls	r3, r3, #5
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007182:	e054      	b.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d050      	beq.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800718c:	f7fd fb2a 	bl	80047e4 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d902      	bls.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d13d      	bne.n	800721e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ba:	d111      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	d004      	beq.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ce:	d107      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e8:	d10f      	bne.n	800720a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e017      	b.n	800724e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3b01      	subs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	429a      	cmp	r2, r3
 800724a:	d19b      	bne.n	8007184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000420 	.word	0x20000420

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2201      	movs	r2, #1
 8007270:	2102      	movs	r1, #2
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ff6a 	bl	800714c <SPI_WaitFlagStateUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e032      	b.n	80072f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800728e:	4b1b      	ldr	r3, [pc, #108]	@ (80072fc <SPI_EndRxTxTransaction+0xa0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1b      	ldr	r2, [pc, #108]	@ (8007300 <SPI_EndRxTxTransaction+0xa4>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	0d5b      	lsrs	r3, r3, #21
 800729a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ac:	d112      	bne.n	80072d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2180      	movs	r1, #128	@ 0x80
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff ff47 	bl	800714c <SPI_WaitFlagStateUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c8:	f043 0220 	orr.w	r2, r3, #32
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e00f      	b.n	80072f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3b01      	subs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ea:	2b80      	cmp	r3, #128	@ 0x80
 80072ec:	d0f2      	beq.n	80072d4 <SPI_EndRxTxTransaction+0x78>
 80072ee:	e000      	b.n	80072f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80072f0:	bf00      	nop
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000420 	.word	0x20000420
 8007300:	165e9f81 	.word	0x165e9f81

08007304 <std>:
 8007304:	2300      	movs	r3, #0
 8007306:	b510      	push	{r4, lr}
 8007308:	4604      	mov	r4, r0
 800730a:	e9c0 3300 	strd	r3, r3, [r0]
 800730e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007312:	6083      	str	r3, [r0, #8]
 8007314:	8181      	strh	r1, [r0, #12]
 8007316:	6643      	str	r3, [r0, #100]	@ 0x64
 8007318:	81c2      	strh	r2, [r0, #14]
 800731a:	6183      	str	r3, [r0, #24]
 800731c:	4619      	mov	r1, r3
 800731e:	2208      	movs	r2, #8
 8007320:	305c      	adds	r0, #92	@ 0x5c
 8007322:	f000 f926 	bl	8007572 <memset>
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <std+0x58>)
 8007328:	6263      	str	r3, [r4, #36]	@ 0x24
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <std+0x5c>)
 800732c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <std+0x60>)
 8007330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <std+0x64>)
 8007334:	6323      	str	r3, [r4, #48]	@ 0x30
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <std+0x68>)
 8007338:	6224      	str	r4, [r4, #32]
 800733a:	429c      	cmp	r4, r3
 800733c:	d006      	beq.n	800734c <std+0x48>
 800733e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007342:	4294      	cmp	r4, r2
 8007344:	d002      	beq.n	800734c <std+0x48>
 8007346:	33d0      	adds	r3, #208	@ 0xd0
 8007348:	429c      	cmp	r4, r3
 800734a:	d105      	bne.n	8007358 <std+0x54>
 800734c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007354:	f000 b986 	b.w	8007664 <__retarget_lock_init_recursive>
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	080074ed 	.word	0x080074ed
 8007360:	0800750f 	.word	0x0800750f
 8007364:	08007547 	.word	0x08007547
 8007368:	0800756b 	.word	0x0800756b
 800736c:	20000afc 	.word	0x20000afc

08007370 <stdio_exit_handler>:
 8007370:	4a02      	ldr	r2, [pc, #8]	@ (800737c <stdio_exit_handler+0xc>)
 8007372:	4903      	ldr	r1, [pc, #12]	@ (8007380 <stdio_exit_handler+0x10>)
 8007374:	4803      	ldr	r0, [pc, #12]	@ (8007384 <stdio_exit_handler+0x14>)
 8007376:	f000 b869 	b.w	800744c <_fwalk_sglue>
 800737a:	bf00      	nop
 800737c:	2000042c 	.word	0x2000042c
 8007380:	080081b5 	.word	0x080081b5
 8007384:	2000043c 	.word	0x2000043c

08007388 <cleanup_stdio>:
 8007388:	6841      	ldr	r1, [r0, #4]
 800738a:	4b0c      	ldr	r3, [pc, #48]	@ (80073bc <cleanup_stdio+0x34>)
 800738c:	4299      	cmp	r1, r3
 800738e:	b510      	push	{r4, lr}
 8007390:	4604      	mov	r4, r0
 8007392:	d001      	beq.n	8007398 <cleanup_stdio+0x10>
 8007394:	f000 ff0e 	bl	80081b4 <_fflush_r>
 8007398:	68a1      	ldr	r1, [r4, #8]
 800739a:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <cleanup_stdio+0x38>)
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <cleanup_stdio+0x1e>
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 ff07 	bl	80081b4 <_fflush_r>
 80073a6:	68e1      	ldr	r1, [r4, #12]
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <cleanup_stdio+0x3c>)
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d004      	beq.n	80073b8 <cleanup_stdio+0x30>
 80073ae:	4620      	mov	r0, r4
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f000 befe 	b.w	80081b4 <_fflush_r>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	20000afc 	.word	0x20000afc
 80073c0:	20000b64 	.word	0x20000b64
 80073c4:	20000bcc 	.word	0x20000bcc

080073c8 <global_stdio_init.part.0>:
 80073c8:	b510      	push	{r4, lr}
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <global_stdio_init.part.0+0x30>)
 80073cc:	4c0b      	ldr	r4, [pc, #44]	@ (80073fc <global_stdio_init.part.0+0x34>)
 80073ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007400 <global_stdio_init.part.0+0x38>)
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	4620      	mov	r0, r4
 80073d4:	2200      	movs	r2, #0
 80073d6:	2104      	movs	r1, #4
 80073d8:	f7ff ff94 	bl	8007304 <std>
 80073dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073e0:	2201      	movs	r2, #1
 80073e2:	2109      	movs	r1, #9
 80073e4:	f7ff ff8e 	bl	8007304 <std>
 80073e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073ec:	2202      	movs	r2, #2
 80073ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f2:	2112      	movs	r1, #18
 80073f4:	f7ff bf86 	b.w	8007304 <std>
 80073f8:	20000c34 	.word	0x20000c34
 80073fc:	20000afc 	.word	0x20000afc
 8007400:	08007371 	.word	0x08007371

08007404 <__sfp_lock_acquire>:
 8007404:	4801      	ldr	r0, [pc, #4]	@ (800740c <__sfp_lock_acquire+0x8>)
 8007406:	f000 b92e 	b.w	8007666 <__retarget_lock_acquire_recursive>
 800740a:	bf00      	nop
 800740c:	20000c3d 	.word	0x20000c3d

08007410 <__sfp_lock_release>:
 8007410:	4801      	ldr	r0, [pc, #4]	@ (8007418 <__sfp_lock_release+0x8>)
 8007412:	f000 b929 	b.w	8007668 <__retarget_lock_release_recursive>
 8007416:	bf00      	nop
 8007418:	20000c3d 	.word	0x20000c3d

0800741c <__sinit>:
 800741c:	b510      	push	{r4, lr}
 800741e:	4604      	mov	r4, r0
 8007420:	f7ff fff0 	bl	8007404 <__sfp_lock_acquire>
 8007424:	6a23      	ldr	r3, [r4, #32]
 8007426:	b11b      	cbz	r3, 8007430 <__sinit+0x14>
 8007428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800742c:	f7ff bff0 	b.w	8007410 <__sfp_lock_release>
 8007430:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <__sinit+0x28>)
 8007432:	6223      	str	r3, [r4, #32]
 8007434:	4b04      	ldr	r3, [pc, #16]	@ (8007448 <__sinit+0x2c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f5      	bne.n	8007428 <__sinit+0xc>
 800743c:	f7ff ffc4 	bl	80073c8 <global_stdio_init.part.0>
 8007440:	e7f2      	b.n	8007428 <__sinit+0xc>
 8007442:	bf00      	nop
 8007444:	08007389 	.word	0x08007389
 8007448:	20000c34 	.word	0x20000c34

0800744c <_fwalk_sglue>:
 800744c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007450:	4607      	mov	r7, r0
 8007452:	4688      	mov	r8, r1
 8007454:	4614      	mov	r4, r2
 8007456:	2600      	movs	r6, #0
 8007458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800745c:	f1b9 0901 	subs.w	r9, r9, #1
 8007460:	d505      	bpl.n	800746e <_fwalk_sglue+0x22>
 8007462:	6824      	ldr	r4, [r4, #0]
 8007464:	2c00      	cmp	r4, #0
 8007466:	d1f7      	bne.n	8007458 <_fwalk_sglue+0xc>
 8007468:	4630      	mov	r0, r6
 800746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d907      	bls.n	8007484 <_fwalk_sglue+0x38>
 8007474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007478:	3301      	adds	r3, #1
 800747a:	d003      	beq.n	8007484 <_fwalk_sglue+0x38>
 800747c:	4629      	mov	r1, r5
 800747e:	4638      	mov	r0, r7
 8007480:	47c0      	blx	r8
 8007482:	4306      	orrs	r6, r0
 8007484:	3568      	adds	r5, #104	@ 0x68
 8007486:	e7e9      	b.n	800745c <_fwalk_sglue+0x10>

08007488 <iprintf>:
 8007488:	b40f      	push	{r0, r1, r2, r3}
 800748a:	b507      	push	{r0, r1, r2, lr}
 800748c:	4906      	ldr	r1, [pc, #24]	@ (80074a8 <iprintf+0x20>)
 800748e:	ab04      	add	r3, sp, #16
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	f853 2b04 	ldr.w	r2, [r3], #4
 8007496:	6881      	ldr	r1, [r0, #8]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	f000 fb61 	bl	8007b60 <_vfiprintf_r>
 800749e:	b003      	add	sp, #12
 80074a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a4:	b004      	add	sp, #16
 80074a6:	4770      	bx	lr
 80074a8:	20000438 	.word	0x20000438

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b500      	push	{lr}
 80074b0:	b09c      	sub	sp, #112	@ 0x70
 80074b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074bc:	4809      	ldr	r0, [pc, #36]	@ (80074e4 <siprintf+0x38>)
 80074be:	9107      	str	r1, [sp, #28]
 80074c0:	9104      	str	r1, [sp, #16]
 80074c2:	4909      	ldr	r1, [pc, #36]	@ (80074e8 <siprintf+0x3c>)
 80074c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	a902      	add	r1, sp, #8
 80074d0:	f000 fa20 	bl	8007914 <_svfiprintf_r>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	b01c      	add	sp, #112	@ 0x70
 80074dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e0:	b003      	add	sp, #12
 80074e2:	4770      	bx	lr
 80074e4:	20000438 	.word	0x20000438
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <__sread>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	460c      	mov	r4, r1
 80074f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f4:	f000 f868 	bl	80075c8 <_read_r>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	bfab      	itete	ge
 80074fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007500:	181b      	addge	r3, r3, r0
 8007502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007506:	bfac      	ite	ge
 8007508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800750a:	81a3      	strhlt	r3, [r4, #12]
 800750c:	bd10      	pop	{r4, pc}

0800750e <__swrite>:
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	461f      	mov	r7, r3
 8007514:	898b      	ldrh	r3, [r1, #12]
 8007516:	05db      	lsls	r3, r3, #23
 8007518:	4605      	mov	r5, r0
 800751a:	460c      	mov	r4, r1
 800751c:	4616      	mov	r6, r2
 800751e:	d505      	bpl.n	800752c <__swrite+0x1e>
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	2302      	movs	r3, #2
 8007526:	2200      	movs	r2, #0
 8007528:	f000 f83c 	bl	80075a4 <_lseek_r>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	4632      	mov	r2, r6
 800753a:	463b      	mov	r3, r7
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	f000 b853 	b.w	80075ec <_write_r>

08007546 <__sseek>:
 8007546:	b510      	push	{r4, lr}
 8007548:	460c      	mov	r4, r1
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 f829 	bl	80075a4 <_lseek_r>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	bf15      	itete	ne
 8007558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800755a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800755e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007562:	81a3      	strheq	r3, [r4, #12]
 8007564:	bf18      	it	ne
 8007566:	81a3      	strhne	r3, [r4, #12]
 8007568:	bd10      	pop	{r4, pc}

0800756a <__sclose>:
 800756a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756e:	f000 b809 	b.w	8007584 <_close_r>

08007572 <memset>:
 8007572:	4402      	add	r2, r0
 8007574:	4603      	mov	r3, r0
 8007576:	4293      	cmp	r3, r2
 8007578:	d100      	bne.n	800757c <memset+0xa>
 800757a:	4770      	bx	lr
 800757c:	f803 1b01 	strb.w	r1, [r3], #1
 8007580:	e7f9      	b.n	8007576 <memset+0x4>
	...

08007584 <_close_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d06      	ldr	r5, [pc, #24]	@ (80075a0 <_close_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f7fd f81c 	bl	80045cc <_close>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_close_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_close_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20000c38 	.word	0x20000c38

080075a4 <_lseek_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	@ (80075c4 <_lseek_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fd f831 	bl	800461a <_lseek>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_lseek_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_lseek_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000c38 	.word	0x20000c38

080075c8 <_read_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d07      	ldr	r5, [pc, #28]	@ (80075e8 <_read_r+0x20>)
 80075cc:	4604      	mov	r4, r0
 80075ce:	4608      	mov	r0, r1
 80075d0:	4611      	mov	r1, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7fc ffbf 	bl	800455a <_read>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_read_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_read_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000c38 	.word	0x20000c38

080075ec <_write_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	@ (800760c <_write_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fc ffca 	bl	8004594 <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_write_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_write_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000c38 	.word	0x20000c38

08007610 <__errno>:
 8007610:	4b01      	ldr	r3, [pc, #4]	@ (8007618 <__errno+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000438 	.word	0x20000438

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	@ (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	@ (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	@ (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	@ (8007660 <__libc_init_array+0x44>)
 8007630:	f000 ff6e 	bl	8008510 <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	080093e0 	.word	0x080093e0
 8007658:	080093e0 	.word	0x080093e0
 800765c:	080093e0 	.word	0x080093e0
 8007660:	080093e4 	.word	0x080093e4

08007664 <__retarget_lock_init_recursive>:
 8007664:	4770      	bx	lr

08007666 <__retarget_lock_acquire_recursive>:
 8007666:	4770      	bx	lr

08007668 <__retarget_lock_release_recursive>:
 8007668:	4770      	bx	lr
	...

0800766c <_free_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4605      	mov	r5, r0
 8007670:	2900      	cmp	r1, #0
 8007672:	d041      	beq.n	80076f8 <_free_r+0x8c>
 8007674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007678:	1f0c      	subs	r4, r1, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfb8      	it	lt
 800767e:	18e4      	addlt	r4, r4, r3
 8007680:	f000 f8e0 	bl	8007844 <__malloc_lock>
 8007684:	4a1d      	ldr	r2, [pc, #116]	@ (80076fc <_free_r+0x90>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	b933      	cbnz	r3, 8007698 <_free_r+0x2c>
 800768a:	6063      	str	r3, [r4, #4]
 800768c:	6014      	str	r4, [r2, #0]
 800768e:	4628      	mov	r0, r5
 8007690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007694:	f000 b8dc 	b.w	8007850 <__malloc_unlock>
 8007698:	42a3      	cmp	r3, r4
 800769a:	d908      	bls.n	80076ae <_free_r+0x42>
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	1821      	adds	r1, r4, r0
 80076a0:	428b      	cmp	r3, r1
 80076a2:	bf01      	itttt	eq
 80076a4:	6819      	ldreq	r1, [r3, #0]
 80076a6:	685b      	ldreq	r3, [r3, #4]
 80076a8:	1809      	addeq	r1, r1, r0
 80076aa:	6021      	streq	r1, [r4, #0]
 80076ac:	e7ed      	b.n	800768a <_free_r+0x1e>
 80076ae:	461a      	mov	r2, r3
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	b10b      	cbz	r3, 80076b8 <_free_r+0x4c>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d9fa      	bls.n	80076ae <_free_r+0x42>
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	1850      	adds	r0, r2, r1
 80076bc:	42a0      	cmp	r0, r4
 80076be:	d10b      	bne.n	80076d8 <_free_r+0x6c>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	4401      	add	r1, r0
 80076c4:	1850      	adds	r0, r2, r1
 80076c6:	4283      	cmp	r3, r0
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	d1e0      	bne.n	800768e <_free_r+0x22>
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	6053      	str	r3, [r2, #4]
 80076d2:	4408      	add	r0, r1
 80076d4:	6010      	str	r0, [r2, #0]
 80076d6:	e7da      	b.n	800768e <_free_r+0x22>
 80076d8:	d902      	bls.n	80076e0 <_free_r+0x74>
 80076da:	230c      	movs	r3, #12
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	e7d6      	b.n	800768e <_free_r+0x22>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	1821      	adds	r1, r4, r0
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf04      	itt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	1809      	addeq	r1, r1, r0
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	6054      	str	r4, [r2, #4]
 80076f6:	e7ca      	b.n	800768e <_free_r+0x22>
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	20000c44 	.word	0x20000c44

08007700 <sbrk_aligned>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4e0f      	ldr	r6, [pc, #60]	@ (8007740 <sbrk_aligned+0x40>)
 8007704:	460c      	mov	r4, r1
 8007706:	6831      	ldr	r1, [r6, #0]
 8007708:	4605      	mov	r5, r0
 800770a:	b911      	cbnz	r1, 8007712 <sbrk_aligned+0x12>
 800770c:	f000 fe28 	bl	8008360 <_sbrk_r>
 8007710:	6030      	str	r0, [r6, #0]
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f000 fe23 	bl	8008360 <_sbrk_r>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d103      	bne.n	8007726 <sbrk_aligned+0x26>
 800771e:	f04f 34ff 	mov.w	r4, #4294967295
 8007722:	4620      	mov	r0, r4
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	1cc4      	adds	r4, r0, #3
 8007728:	f024 0403 	bic.w	r4, r4, #3
 800772c:	42a0      	cmp	r0, r4
 800772e:	d0f8      	beq.n	8007722 <sbrk_aligned+0x22>
 8007730:	1a21      	subs	r1, r4, r0
 8007732:	4628      	mov	r0, r5
 8007734:	f000 fe14 	bl	8008360 <_sbrk_r>
 8007738:	3001      	adds	r0, #1
 800773a:	d1f2      	bne.n	8007722 <sbrk_aligned+0x22>
 800773c:	e7ef      	b.n	800771e <sbrk_aligned+0x1e>
 800773e:	bf00      	nop
 8007740:	20000c40 	.word	0x20000c40

08007744 <_malloc_r>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	1ccd      	adds	r5, r1, #3
 800774a:	f025 0503 	bic.w	r5, r5, #3
 800774e:	3508      	adds	r5, #8
 8007750:	2d0c      	cmp	r5, #12
 8007752:	bf38      	it	cc
 8007754:	250c      	movcc	r5, #12
 8007756:	2d00      	cmp	r5, #0
 8007758:	4606      	mov	r6, r0
 800775a:	db01      	blt.n	8007760 <_malloc_r+0x1c>
 800775c:	42a9      	cmp	r1, r5
 800775e:	d904      	bls.n	800776a <_malloc_r+0x26>
 8007760:	230c      	movs	r3, #12
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	2000      	movs	r0, #0
 8007766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800776a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007840 <_malloc_r+0xfc>
 800776e:	f000 f869 	bl	8007844 <__malloc_lock>
 8007772:	f8d8 3000 	ldr.w	r3, [r8]
 8007776:	461c      	mov	r4, r3
 8007778:	bb44      	cbnz	r4, 80077cc <_malloc_r+0x88>
 800777a:	4629      	mov	r1, r5
 800777c:	4630      	mov	r0, r6
 800777e:	f7ff ffbf 	bl	8007700 <sbrk_aligned>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	4604      	mov	r4, r0
 8007786:	d158      	bne.n	800783a <_malloc_r+0xf6>
 8007788:	f8d8 4000 	ldr.w	r4, [r8]
 800778c:	4627      	mov	r7, r4
 800778e:	2f00      	cmp	r7, #0
 8007790:	d143      	bne.n	800781a <_malloc_r+0xd6>
 8007792:	2c00      	cmp	r4, #0
 8007794:	d04b      	beq.n	800782e <_malloc_r+0xea>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	4639      	mov	r1, r7
 800779a:	4630      	mov	r0, r6
 800779c:	eb04 0903 	add.w	r9, r4, r3
 80077a0:	f000 fdde 	bl	8008360 <_sbrk_r>
 80077a4:	4581      	cmp	r9, r0
 80077a6:	d142      	bne.n	800782e <_malloc_r+0xea>
 80077a8:	6821      	ldr	r1, [r4, #0]
 80077aa:	1a6d      	subs	r5, r5, r1
 80077ac:	4629      	mov	r1, r5
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ffa6 	bl	8007700 <sbrk_aligned>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d03a      	beq.n	800782e <_malloc_r+0xea>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	442b      	add	r3, r5
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	f8d8 3000 	ldr.w	r3, [r8]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	bb62      	cbnz	r2, 8007820 <_malloc_r+0xdc>
 80077c6:	f8c8 7000 	str.w	r7, [r8]
 80077ca:	e00f      	b.n	80077ec <_malloc_r+0xa8>
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	1b52      	subs	r2, r2, r5
 80077d0:	d420      	bmi.n	8007814 <_malloc_r+0xd0>
 80077d2:	2a0b      	cmp	r2, #11
 80077d4:	d917      	bls.n	8007806 <_malloc_r+0xc2>
 80077d6:	1961      	adds	r1, r4, r5
 80077d8:	42a3      	cmp	r3, r4
 80077da:	6025      	str	r5, [r4, #0]
 80077dc:	bf18      	it	ne
 80077de:	6059      	strne	r1, [r3, #4]
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	bf08      	it	eq
 80077e4:	f8c8 1000 	streq.w	r1, [r8]
 80077e8:	5162      	str	r2, [r4, r5]
 80077ea:	604b      	str	r3, [r1, #4]
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 f82f 	bl	8007850 <__malloc_unlock>
 80077f2:	f104 000b 	add.w	r0, r4, #11
 80077f6:	1d23      	adds	r3, r4, #4
 80077f8:	f020 0007 	bic.w	r0, r0, #7
 80077fc:	1ac2      	subs	r2, r0, r3
 80077fe:	bf1c      	itt	ne
 8007800:	1a1b      	subne	r3, r3, r0
 8007802:	50a3      	strne	r3, [r4, r2]
 8007804:	e7af      	b.n	8007766 <_malloc_r+0x22>
 8007806:	6862      	ldr	r2, [r4, #4]
 8007808:	42a3      	cmp	r3, r4
 800780a:	bf0c      	ite	eq
 800780c:	f8c8 2000 	streq.w	r2, [r8]
 8007810:	605a      	strne	r2, [r3, #4]
 8007812:	e7eb      	b.n	80077ec <_malloc_r+0xa8>
 8007814:	4623      	mov	r3, r4
 8007816:	6864      	ldr	r4, [r4, #4]
 8007818:	e7ae      	b.n	8007778 <_malloc_r+0x34>
 800781a:	463c      	mov	r4, r7
 800781c:	687f      	ldr	r7, [r7, #4]
 800781e:	e7b6      	b.n	800778e <_malloc_r+0x4a>
 8007820:	461a      	mov	r2, r3
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	42a3      	cmp	r3, r4
 8007826:	d1fb      	bne.n	8007820 <_malloc_r+0xdc>
 8007828:	2300      	movs	r3, #0
 800782a:	6053      	str	r3, [r2, #4]
 800782c:	e7de      	b.n	80077ec <_malloc_r+0xa8>
 800782e:	230c      	movs	r3, #12
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f80c 	bl	8007850 <__malloc_unlock>
 8007838:	e794      	b.n	8007764 <_malloc_r+0x20>
 800783a:	6005      	str	r5, [r0, #0]
 800783c:	e7d6      	b.n	80077ec <_malloc_r+0xa8>
 800783e:	bf00      	nop
 8007840:	20000c44 	.word	0x20000c44

08007844 <__malloc_lock>:
 8007844:	4801      	ldr	r0, [pc, #4]	@ (800784c <__malloc_lock+0x8>)
 8007846:	f7ff bf0e 	b.w	8007666 <__retarget_lock_acquire_recursive>
 800784a:	bf00      	nop
 800784c:	20000c3c 	.word	0x20000c3c

08007850 <__malloc_unlock>:
 8007850:	4801      	ldr	r0, [pc, #4]	@ (8007858 <__malloc_unlock+0x8>)
 8007852:	f7ff bf09 	b.w	8007668 <__retarget_lock_release_recursive>
 8007856:	bf00      	nop
 8007858:	20000c3c 	.word	0x20000c3c

0800785c <__ssputs_r>:
 800785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007860:	688e      	ldr	r6, [r1, #8]
 8007862:	461f      	mov	r7, r3
 8007864:	42be      	cmp	r6, r7
 8007866:	680b      	ldr	r3, [r1, #0]
 8007868:	4682      	mov	sl, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4690      	mov	r8, r2
 800786e:	d82d      	bhi.n	80078cc <__ssputs_r+0x70>
 8007870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007878:	d026      	beq.n	80078c8 <__ssputs_r+0x6c>
 800787a:	6965      	ldr	r5, [r4, #20]
 800787c:	6909      	ldr	r1, [r1, #16]
 800787e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007882:	eba3 0901 	sub.w	r9, r3, r1
 8007886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800788a:	1c7b      	adds	r3, r7, #1
 800788c:	444b      	add	r3, r9
 800788e:	106d      	asrs	r5, r5, #1
 8007890:	429d      	cmp	r5, r3
 8007892:	bf38      	it	cc
 8007894:	461d      	movcc	r5, r3
 8007896:	0553      	lsls	r3, r2, #21
 8007898:	d527      	bpl.n	80078ea <__ssputs_r+0x8e>
 800789a:	4629      	mov	r1, r5
 800789c:	f7ff ff52 	bl	8007744 <_malloc_r>
 80078a0:	4606      	mov	r6, r0
 80078a2:	b360      	cbz	r0, 80078fe <__ssputs_r+0xa2>
 80078a4:	6921      	ldr	r1, [r4, #16]
 80078a6:	464a      	mov	r2, r9
 80078a8:	f000 fd6a 	bl	8008380 <memcpy>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	6126      	str	r6, [r4, #16]
 80078ba:	6165      	str	r5, [r4, #20]
 80078bc:	444e      	add	r6, r9
 80078be:	eba5 0509 	sub.w	r5, r5, r9
 80078c2:	6026      	str	r6, [r4, #0]
 80078c4:	60a5      	str	r5, [r4, #8]
 80078c6:	463e      	mov	r6, r7
 80078c8:	42be      	cmp	r6, r7
 80078ca:	d900      	bls.n	80078ce <__ssputs_r+0x72>
 80078cc:	463e      	mov	r6, r7
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	4632      	mov	r2, r6
 80078d2:	4641      	mov	r1, r8
 80078d4:	f000 fd2a 	bl	800832c <memmove>
 80078d8:	68a3      	ldr	r3, [r4, #8]
 80078da:	1b9b      	subs	r3, r3, r6
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	4433      	add	r3, r6
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	2000      	movs	r0, #0
 80078e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ea:	462a      	mov	r2, r5
 80078ec:	f000 fd56 	bl	800839c <_realloc_r>
 80078f0:	4606      	mov	r6, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d1e0      	bne.n	80078b8 <__ssputs_r+0x5c>
 80078f6:	6921      	ldr	r1, [r4, #16]
 80078f8:	4650      	mov	r0, sl
 80078fa:	f7ff feb7 	bl	800766c <_free_r>
 80078fe:	230c      	movs	r3, #12
 8007900:	f8ca 3000 	str.w	r3, [sl]
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e7e9      	b.n	80078e6 <__ssputs_r+0x8a>
	...

08007914 <_svfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	4698      	mov	r8, r3
 800791a:	898b      	ldrh	r3, [r1, #12]
 800791c:	061b      	lsls	r3, r3, #24
 800791e:	b09d      	sub	sp, #116	@ 0x74
 8007920:	4607      	mov	r7, r0
 8007922:	460d      	mov	r5, r1
 8007924:	4614      	mov	r4, r2
 8007926:	d510      	bpl.n	800794a <_svfiprintf_r+0x36>
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	b973      	cbnz	r3, 800794a <_svfiprintf_r+0x36>
 800792c:	2140      	movs	r1, #64	@ 0x40
 800792e:	f7ff ff09 	bl	8007744 <_malloc_r>
 8007932:	6028      	str	r0, [r5, #0]
 8007934:	6128      	str	r0, [r5, #16]
 8007936:	b930      	cbnz	r0, 8007946 <_svfiprintf_r+0x32>
 8007938:	230c      	movs	r3, #12
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	b01d      	add	sp, #116	@ 0x74
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	2340      	movs	r3, #64	@ 0x40
 8007948:	616b      	str	r3, [r5, #20]
 800794a:	2300      	movs	r3, #0
 800794c:	9309      	str	r3, [sp, #36]	@ 0x24
 800794e:	2320      	movs	r3, #32
 8007950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007954:	f8cd 800c 	str.w	r8, [sp, #12]
 8007958:	2330      	movs	r3, #48	@ 0x30
 800795a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007af8 <_svfiprintf_r+0x1e4>
 800795e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007962:	f04f 0901 	mov.w	r9, #1
 8007966:	4623      	mov	r3, r4
 8007968:	469a      	mov	sl, r3
 800796a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796e:	b10a      	cbz	r2, 8007974 <_svfiprintf_r+0x60>
 8007970:	2a25      	cmp	r2, #37	@ 0x25
 8007972:	d1f9      	bne.n	8007968 <_svfiprintf_r+0x54>
 8007974:	ebba 0b04 	subs.w	fp, sl, r4
 8007978:	d00b      	beq.n	8007992 <_svfiprintf_r+0x7e>
 800797a:	465b      	mov	r3, fp
 800797c:	4622      	mov	r2, r4
 800797e:	4629      	mov	r1, r5
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff6b 	bl	800785c <__ssputs_r>
 8007986:	3001      	adds	r0, #1
 8007988:	f000 80a7 	beq.w	8007ada <_svfiprintf_r+0x1c6>
 800798c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800798e:	445a      	add	r2, fp
 8007990:	9209      	str	r2, [sp, #36]	@ 0x24
 8007992:	f89a 3000 	ldrb.w	r3, [sl]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 809f 	beq.w	8007ada <_svfiprintf_r+0x1c6>
 800799c:	2300      	movs	r3, #0
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a6:	f10a 0a01 	add.w	sl, sl, #1
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079b4:	4654      	mov	r4, sl
 80079b6:	2205      	movs	r2, #5
 80079b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079bc:	484e      	ldr	r0, [pc, #312]	@ (8007af8 <_svfiprintf_r+0x1e4>)
 80079be:	f7f8 fc17 	bl	80001f0 <memchr>
 80079c2:	9a04      	ldr	r2, [sp, #16]
 80079c4:	b9d8      	cbnz	r0, 80079fe <_svfiprintf_r+0xea>
 80079c6:	06d0      	lsls	r0, r2, #27
 80079c8:	bf44      	itt	mi
 80079ca:	2320      	movmi	r3, #32
 80079cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079d0:	0711      	lsls	r1, r2, #28
 80079d2:	bf44      	itt	mi
 80079d4:	232b      	movmi	r3, #43	@ 0x2b
 80079d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e0:	d015      	beq.n	8007a0e <_svfiprintf_r+0xfa>
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	4654      	mov	r4, sl
 80079e6:	2000      	movs	r0, #0
 80079e8:	f04f 0c0a 	mov.w	ip, #10
 80079ec:	4621      	mov	r1, r4
 80079ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f2:	3b30      	subs	r3, #48	@ 0x30
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d94b      	bls.n	8007a90 <_svfiprintf_r+0x17c>
 80079f8:	b1b0      	cbz	r0, 8007a28 <_svfiprintf_r+0x114>
 80079fa:	9207      	str	r2, [sp, #28]
 80079fc:	e014      	b.n	8007a28 <_svfiprintf_r+0x114>
 80079fe:	eba0 0308 	sub.w	r3, r0, r8
 8007a02:	fa09 f303 	lsl.w	r3, r9, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	46a2      	mov	sl, r4
 8007a0c:	e7d2      	b.n	80079b4 <_svfiprintf_r+0xa0>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9103      	str	r1, [sp, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bfbb      	ittet	lt
 8007a1a:	425b      	neglt	r3, r3
 8007a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a20:	9307      	strge	r3, [sp, #28]
 8007a22:	9307      	strlt	r3, [sp, #28]
 8007a24:	bfb8      	it	lt
 8007a26:	9204      	strlt	r2, [sp, #16]
 8007a28:	7823      	ldrb	r3, [r4, #0]
 8007a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a2c:	d10a      	bne.n	8007a44 <_svfiprintf_r+0x130>
 8007a2e:	7863      	ldrb	r3, [r4, #1]
 8007a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a32:	d132      	bne.n	8007a9a <_svfiprintf_r+0x186>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9203      	str	r2, [sp, #12]
 8007a3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a40:	3402      	adds	r4, #2
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b08 <_svfiprintf_r+0x1f4>
 8007a48:	7821      	ldrb	r1, [r4, #0]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f7f8 fbcf 	bl	80001f0 <memchr>
 8007a52:	b138      	cbz	r0, 8007a64 <_svfiprintf_r+0x150>
 8007a54:	9b04      	ldr	r3, [sp, #16]
 8007a56:	eba0 000a 	sub.w	r0, r0, sl
 8007a5a:	2240      	movs	r2, #64	@ 0x40
 8007a5c:	4082      	lsls	r2, r0
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	3401      	adds	r4, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	4824      	ldr	r0, [pc, #144]	@ (8007afc <_svfiprintf_r+0x1e8>)
 8007a6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a6e:	2206      	movs	r2, #6
 8007a70:	f7f8 fbbe 	bl	80001f0 <memchr>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d036      	beq.n	8007ae6 <_svfiprintf_r+0x1d2>
 8007a78:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <_svfiprintf_r+0x1ec>)
 8007a7a:	bb1b      	cbnz	r3, 8007ac4 <_svfiprintf_r+0x1b0>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	3307      	adds	r3, #7
 8007a80:	f023 0307 	bic.w	r3, r3, #7
 8007a84:	3308      	adds	r3, #8
 8007a86:	9303      	str	r3, [sp, #12]
 8007a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8a:	4433      	add	r3, r6
 8007a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a8e:	e76a      	b.n	8007966 <_svfiprintf_r+0x52>
 8007a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a94:	460c      	mov	r4, r1
 8007a96:	2001      	movs	r0, #1
 8007a98:	e7a8      	b.n	80079ec <_svfiprintf_r+0xd8>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	3401      	adds	r4, #1
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f04f 0c0a 	mov.w	ip, #10
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aac:	3a30      	subs	r2, #48	@ 0x30
 8007aae:	2a09      	cmp	r2, #9
 8007ab0:	d903      	bls.n	8007aba <_svfiprintf_r+0x1a6>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0c6      	beq.n	8007a44 <_svfiprintf_r+0x130>
 8007ab6:	9105      	str	r1, [sp, #20]
 8007ab8:	e7c4      	b.n	8007a44 <_svfiprintf_r+0x130>
 8007aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007abe:	4604      	mov	r4, r0
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7f0      	b.n	8007aa6 <_svfiprintf_r+0x192>
 8007ac4:	ab03      	add	r3, sp, #12
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	462a      	mov	r2, r5
 8007aca:	4b0e      	ldr	r3, [pc, #56]	@ (8007b04 <_svfiprintf_r+0x1f0>)
 8007acc:	a904      	add	r1, sp, #16
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f3af 8000 	nop.w
 8007ad4:	1c42      	adds	r2, r0, #1
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	d1d6      	bne.n	8007a88 <_svfiprintf_r+0x174>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	065b      	lsls	r3, r3, #25
 8007ade:	f53f af2d 	bmi.w	800793c <_svfiprintf_r+0x28>
 8007ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae4:	e72c      	b.n	8007940 <_svfiprintf_r+0x2c>
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	462a      	mov	r2, r5
 8007aec:	4b05      	ldr	r3, [pc, #20]	@ (8007b04 <_svfiprintf_r+0x1f0>)
 8007aee:	a904      	add	r1, sp, #16
 8007af0:	4638      	mov	r0, r7
 8007af2:	f000 f9bb 	bl	8007e6c <_printf_i>
 8007af6:	e7ed      	b.n	8007ad4 <_svfiprintf_r+0x1c0>
 8007af8:	080093a4 	.word	0x080093a4
 8007afc:	080093ae 	.word	0x080093ae
 8007b00:	00000000 	.word	0x00000000
 8007b04:	0800785d 	.word	0x0800785d
 8007b08:	080093aa 	.word	0x080093aa

08007b0c <__sfputc_r>:
 8007b0c:	6893      	ldr	r3, [r2, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	b410      	push	{r4}
 8007b14:	6093      	str	r3, [r2, #8]
 8007b16:	da08      	bge.n	8007b2a <__sfputc_r+0x1e>
 8007b18:	6994      	ldr	r4, [r2, #24]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	db01      	blt.n	8007b22 <__sfputc_r+0x16>
 8007b1e:	290a      	cmp	r1, #10
 8007b20:	d103      	bne.n	8007b2a <__sfputc_r+0x1e>
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	f000 bb6d 	b.w	8008204 <__swbuf_r>
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	1c58      	adds	r0, r3, #1
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	7019      	strb	r1, [r3, #0]
 8007b32:	4608      	mov	r0, r1
 8007b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <__sfputs_r>:
 8007b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	18d5      	adds	r5, r2, r3
 8007b44:	42ac      	cmp	r4, r5
 8007b46:	d101      	bne.n	8007b4c <__sfputs_r+0x12>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e007      	b.n	8007b5c <__sfputs_r+0x22>
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	463a      	mov	r2, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ffda 	bl	8007b0c <__sfputc_r>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d1f3      	bne.n	8007b44 <__sfputs_r+0xa>
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b60 <_vfiprintf_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	460d      	mov	r5, r1
 8007b66:	b09d      	sub	sp, #116	@ 0x74
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4698      	mov	r8, r3
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	b118      	cbz	r0, 8007b78 <_vfiprintf_r+0x18>
 8007b70:	6a03      	ldr	r3, [r0, #32]
 8007b72:	b90b      	cbnz	r3, 8007b78 <_vfiprintf_r+0x18>
 8007b74:	f7ff fc52 	bl	800741c <__sinit>
 8007b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b7a:	07d9      	lsls	r1, r3, #31
 8007b7c:	d405      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b7e:	89ab      	ldrh	r3, [r5, #12]
 8007b80:	059a      	lsls	r2, r3, #22
 8007b82:	d402      	bmi.n	8007b8a <_vfiprintf_r+0x2a>
 8007b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b86:	f7ff fd6e 	bl	8007666 <__retarget_lock_acquire_recursive>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	071b      	lsls	r3, r3, #28
 8007b8e:	d501      	bpl.n	8007b94 <_vfiprintf_r+0x34>
 8007b90:	692b      	ldr	r3, [r5, #16]
 8007b92:	b99b      	cbnz	r3, 8007bbc <_vfiprintf_r+0x5c>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 fb72 	bl	8008280 <__swsetup_r>
 8007b9c:	b170      	cbz	r0, 8007bbc <_vfiprintf_r+0x5c>
 8007b9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ba0:	07dc      	lsls	r4, r3, #31
 8007ba2:	d504      	bpl.n	8007bae <_vfiprintf_r+0x4e>
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	b01d      	add	sp, #116	@ 0x74
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	0598      	lsls	r0, r3, #22
 8007bb2:	d4f7      	bmi.n	8007ba4 <_vfiprintf_r+0x44>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bb6:	f7ff fd57 	bl	8007668 <__retarget_lock_release_recursive>
 8007bba:	e7f3      	b.n	8007ba4 <_vfiprintf_r+0x44>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bca:	2330      	movs	r3, #48	@ 0x30
 8007bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d7c <_vfiprintf_r+0x21c>
 8007bd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd4:	f04f 0901 	mov.w	r9, #1
 8007bd8:	4623      	mov	r3, r4
 8007bda:	469a      	mov	sl, r3
 8007bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be0:	b10a      	cbz	r2, 8007be6 <_vfiprintf_r+0x86>
 8007be2:	2a25      	cmp	r2, #37	@ 0x25
 8007be4:	d1f9      	bne.n	8007bda <_vfiprintf_r+0x7a>
 8007be6:	ebba 0b04 	subs.w	fp, sl, r4
 8007bea:	d00b      	beq.n	8007c04 <_vfiprintf_r+0xa4>
 8007bec:	465b      	mov	r3, fp
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffa1 	bl	8007b3a <__sfputs_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f000 80a7 	beq.w	8007d4c <_vfiprintf_r+0x1ec>
 8007bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c00:	445a      	add	r2, fp
 8007c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c04:	f89a 3000 	ldrb.w	r3, [sl]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 809f 	beq.w	8007d4c <_vfiprintf_r+0x1ec>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295
 8007c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c18:	f10a 0a01 	add.w	sl, sl, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c26:	4654      	mov	r4, sl
 8007c28:	2205      	movs	r2, #5
 8007c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2e:	4853      	ldr	r0, [pc, #332]	@ (8007d7c <_vfiprintf_r+0x21c>)
 8007c30:	f7f8 fade 	bl	80001f0 <memchr>
 8007c34:	9a04      	ldr	r2, [sp, #16]
 8007c36:	b9d8      	cbnz	r0, 8007c70 <_vfiprintf_r+0x110>
 8007c38:	06d1      	lsls	r1, r2, #27
 8007c3a:	bf44      	itt	mi
 8007c3c:	2320      	movmi	r3, #32
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c42:	0713      	lsls	r3, r2, #28
 8007c44:	bf44      	itt	mi
 8007c46:	232b      	movmi	r3, #43	@ 0x2b
 8007c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c52:	d015      	beq.n	8007c80 <_vfiprintf_r+0x120>
 8007c54:	9a07      	ldr	r2, [sp, #28]
 8007c56:	4654      	mov	r4, sl
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f04f 0c0a 	mov.w	ip, #10
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c64:	3b30      	subs	r3, #48	@ 0x30
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d94b      	bls.n	8007d02 <_vfiprintf_r+0x1a2>
 8007c6a:	b1b0      	cbz	r0, 8007c9a <_vfiprintf_r+0x13a>
 8007c6c:	9207      	str	r2, [sp, #28]
 8007c6e:	e014      	b.n	8007c9a <_vfiprintf_r+0x13a>
 8007c70:	eba0 0308 	sub.w	r3, r0, r8
 8007c74:	fa09 f303 	lsl.w	r3, r9, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	46a2      	mov	sl, r4
 8007c7e:	e7d2      	b.n	8007c26 <_vfiprintf_r+0xc6>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	1d19      	adds	r1, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9103      	str	r1, [sp, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfbb      	ittet	lt
 8007c8c:	425b      	neglt	r3, r3
 8007c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c92:	9307      	strge	r3, [sp, #28]
 8007c94:	9307      	strlt	r3, [sp, #28]
 8007c96:	bfb8      	it	lt
 8007c98:	9204      	strlt	r2, [sp, #16]
 8007c9a:	7823      	ldrb	r3, [r4, #0]
 8007c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c9e:	d10a      	bne.n	8007cb6 <_vfiprintf_r+0x156>
 8007ca0:	7863      	ldrb	r3, [r4, #1]
 8007ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca4:	d132      	bne.n	8007d0c <_vfiprintf_r+0x1ac>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9203      	str	r2, [sp, #12]
 8007cae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb2:	3402      	adds	r4, #2
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d8c <_vfiprintf_r+0x22c>
 8007cba:	7821      	ldrb	r1, [r4, #0]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	4650      	mov	r0, sl
 8007cc0:	f7f8 fa96 	bl	80001f0 <memchr>
 8007cc4:	b138      	cbz	r0, 8007cd6 <_vfiprintf_r+0x176>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	eba0 000a 	sub.w	r0, r0, sl
 8007ccc:	2240      	movs	r2, #64	@ 0x40
 8007cce:	4082      	lsls	r2, r0
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	3401      	adds	r4, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4829      	ldr	r0, [pc, #164]	@ (8007d80 <_vfiprintf_r+0x220>)
 8007cdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	f7f8 fa85 	bl	80001f0 <memchr>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d03f      	beq.n	8007d6a <_vfiprintf_r+0x20a>
 8007cea:	4b26      	ldr	r3, [pc, #152]	@ (8007d84 <_vfiprintf_r+0x224>)
 8007cec:	bb1b      	cbnz	r3, 8007d36 <_vfiprintf_r+0x1d6>
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	f023 0307 	bic.w	r3, r3, #7
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	9303      	str	r3, [sp, #12]
 8007cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfc:	443b      	add	r3, r7
 8007cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d00:	e76a      	b.n	8007bd8 <_vfiprintf_r+0x78>
 8007d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d06:	460c      	mov	r4, r1
 8007d08:	2001      	movs	r0, #1
 8007d0a:	e7a8      	b.n	8007c5e <_vfiprintf_r+0xfe>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	3401      	adds	r4, #1
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	4619      	mov	r1, r3
 8007d14:	f04f 0c0a 	mov.w	ip, #10
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1e:	3a30      	subs	r2, #48	@ 0x30
 8007d20:	2a09      	cmp	r2, #9
 8007d22:	d903      	bls.n	8007d2c <_vfiprintf_r+0x1cc>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0c6      	beq.n	8007cb6 <_vfiprintf_r+0x156>
 8007d28:	9105      	str	r1, [sp, #20]
 8007d2a:	e7c4      	b.n	8007cb6 <_vfiprintf_r+0x156>
 8007d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d30:	4604      	mov	r4, r0
 8007d32:	2301      	movs	r3, #1
 8007d34:	e7f0      	b.n	8007d18 <_vfiprintf_r+0x1b8>
 8007d36:	ab03      	add	r3, sp, #12
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <_vfiprintf_r+0x228>)
 8007d3e:	a904      	add	r1, sp, #16
 8007d40:	4630      	mov	r0, r6
 8007d42:	f3af 8000 	nop.w
 8007d46:	4607      	mov	r7, r0
 8007d48:	1c78      	adds	r0, r7, #1
 8007d4a:	d1d6      	bne.n	8007cfa <_vfiprintf_r+0x19a>
 8007d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d4e:	07d9      	lsls	r1, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_vfiprintf_r+0x1fe>
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	059a      	lsls	r2, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_vfiprintf_r+0x1fe>
 8007d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d5a:	f7ff fc85 	bl	8007668 <__retarget_lock_release_recursive>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	065b      	lsls	r3, r3, #25
 8007d62:	f53f af1f 	bmi.w	8007ba4 <_vfiprintf_r+0x44>
 8007d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d68:	e71e      	b.n	8007ba8 <_vfiprintf_r+0x48>
 8007d6a:	ab03      	add	r3, sp, #12
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	462a      	mov	r2, r5
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <_vfiprintf_r+0x228>)
 8007d72:	a904      	add	r1, sp, #16
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f879 	bl	8007e6c <_printf_i>
 8007d7a:	e7e4      	b.n	8007d46 <_vfiprintf_r+0x1e6>
 8007d7c:	080093a4 	.word	0x080093a4
 8007d80:	080093ae 	.word	0x080093ae
 8007d84:	00000000 	.word	0x00000000
 8007d88:	08007b3b 	.word	0x08007b3b
 8007d8c:	080093aa 	.word	0x080093aa

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4616      	mov	r6, r2
 8007d96:	4698      	mov	r8, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dac:	4607      	mov	r7, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b10a      	cbz	r2, 8007db6 <_printf_common+0x26>
 8007db2:	3301      	adds	r3, #1
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	0699      	lsls	r1, r3, #26
 8007dba:	bf42      	ittt	mi
 8007dbc:	6833      	ldrmi	r3, [r6, #0]
 8007dbe:	3302      	addmi	r3, #2
 8007dc0:	6033      	strmi	r3, [r6, #0]
 8007dc2:	6825      	ldr	r5, [r4, #0]
 8007dc4:	f015 0506 	ands.w	r5, r5, #6
 8007dc8:	d106      	bne.n	8007dd8 <_printf_common+0x48>
 8007dca:	f104 0a19 	add.w	sl, r4, #25
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	6832      	ldr	r2, [r6, #0]
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dc26      	bgt.n	8007e26 <_printf_common+0x96>
 8007dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	3b00      	subs	r3, #0
 8007de0:	bf18      	it	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	0692      	lsls	r2, r2, #26
 8007de6:	d42b      	bmi.n	8007e40 <_printf_common+0xb0>
 8007de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dec:	4641      	mov	r1, r8
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c8      	blx	r9
 8007df2:	3001      	adds	r0, #1
 8007df4:	d01e      	beq.n	8007e34 <_printf_common+0xa4>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	f003 0306 	and.w	r3, r3, #6
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	bf02      	ittt	eq
 8007e02:	68e5      	ldreq	r5, [r4, #12]
 8007e04:	6833      	ldreq	r3, [r6, #0]
 8007e06:	1aed      	subeq	r5, r5, r3
 8007e08:	68a3      	ldr	r3, [r4, #8]
 8007e0a:	bf0c      	ite	eq
 8007e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e10:	2500      	movne	r5, #0
 8007e12:	4293      	cmp	r3, r2
 8007e14:	bfc4      	itt	gt
 8007e16:	1a9b      	subgt	r3, r3, r2
 8007e18:	18ed      	addgt	r5, r5, r3
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	341a      	adds	r4, #26
 8007e1e:	42b5      	cmp	r5, r6
 8007e20:	d11a      	bne.n	8007e58 <_printf_common+0xc8>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e008      	b.n	8007e38 <_printf_common+0xa8>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4652      	mov	r2, sl
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	47c8      	blx	r9
 8007e30:	3001      	adds	r0, #1
 8007e32:	d103      	bne.n	8007e3c <_printf_common+0xac>
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	e7c6      	b.n	8007dce <_printf_common+0x3e>
 8007e40:	18e1      	adds	r1, r4, r3
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	2030      	movs	r0, #48	@ 0x30
 8007e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e4a:	4422      	add	r2, r4
 8007e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e54:	3302      	adds	r3, #2
 8007e56:	e7c7      	b.n	8007de8 <_printf_common+0x58>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c8      	blx	r9
 8007e62:	3001      	adds	r0, #1
 8007e64:	d0e6      	beq.n	8007e34 <_printf_common+0xa4>
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7d9      	b.n	8007e1e <_printf_common+0x8e>
	...

08007e6c <_printf_i>:
 8007e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	7e0f      	ldrb	r7, [r1, #24]
 8007e72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e74:	2f78      	cmp	r7, #120	@ 0x78
 8007e76:	4691      	mov	r9, r2
 8007e78:	4680      	mov	r8, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e82:	d807      	bhi.n	8007e94 <_printf_i+0x28>
 8007e84:	2f62      	cmp	r7, #98	@ 0x62
 8007e86:	d80a      	bhi.n	8007e9e <_printf_i+0x32>
 8007e88:	2f00      	cmp	r7, #0
 8007e8a:	f000 80d2 	beq.w	8008032 <_printf_i+0x1c6>
 8007e8e:	2f58      	cmp	r7, #88	@ 0x58
 8007e90:	f000 80b9 	beq.w	8008006 <_printf_i+0x19a>
 8007e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e9c:	e03a      	b.n	8007f14 <_printf_i+0xa8>
 8007e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ea2:	2b15      	cmp	r3, #21
 8007ea4:	d8f6      	bhi.n	8007e94 <_printf_i+0x28>
 8007ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8007eac <_printf_i+0x40>)
 8007ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007e95 	.word	0x08007e95
 8007eb8:	08007e95 	.word	0x08007e95
 8007ebc:	08007e95 	.word	0x08007e95
 8007ec0:	08007e95 	.word	0x08007e95
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007e95 	.word	0x08007e95
 8007ecc:	08007e95 	.word	0x08007e95
 8007ed0:	08007e95 	.word	0x08007e95
 8007ed4:	08007e95 	.word	0x08007e95
 8007ed8:	08008019 	.word	0x08008019
 8007edc:	08007f43 	.word	0x08007f43
 8007ee0:	08007fd3 	.word	0x08007fd3
 8007ee4:	08007e95 	.word	0x08007e95
 8007ee8:	08007e95 	.word	0x08007e95
 8007eec:	0800803b 	.word	0x0800803b
 8007ef0:	08007e95 	.word	0x08007e95
 8007ef4:	08007f43 	.word	0x08007f43
 8007ef8:	08007e95 	.word	0x08007e95
 8007efc:	08007e95 	.word	0x08007e95
 8007f00:	08007fdb 	.word	0x08007fdb
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6032      	str	r2, [r6, #0]
 8007f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f14:	2301      	movs	r3, #1
 8007f16:	e09d      	b.n	8008054 <_printf_i+0x1e8>
 8007f18:	6833      	ldr	r3, [r6, #0]
 8007f1a:	6820      	ldr	r0, [r4, #0]
 8007f1c:	1d19      	adds	r1, r3, #4
 8007f1e:	6031      	str	r1, [r6, #0]
 8007f20:	0606      	lsls	r6, r0, #24
 8007f22:	d501      	bpl.n	8007f28 <_printf_i+0xbc>
 8007f24:	681d      	ldr	r5, [r3, #0]
 8007f26:	e003      	b.n	8007f30 <_printf_i+0xc4>
 8007f28:	0645      	lsls	r5, r0, #25
 8007f2a:	d5fb      	bpl.n	8007f24 <_printf_i+0xb8>
 8007f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	da03      	bge.n	8007f3c <_printf_i+0xd0>
 8007f34:	232d      	movs	r3, #45	@ 0x2d
 8007f36:	426d      	negs	r5, r5
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f3c:	4859      	ldr	r0, [pc, #356]	@ (80080a4 <_printf_i+0x238>)
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e011      	b.n	8007f66 <_printf_i+0xfa>
 8007f42:	6821      	ldr	r1, [r4, #0]
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	0608      	lsls	r0, r1, #24
 8007f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f4c:	d402      	bmi.n	8007f54 <_printf_i+0xe8>
 8007f4e:	0649      	lsls	r1, r1, #25
 8007f50:	bf48      	it	mi
 8007f52:	b2ad      	uxthmi	r5, r5
 8007f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f56:	4853      	ldr	r0, [pc, #332]	@ (80080a4 <_printf_i+0x238>)
 8007f58:	6033      	str	r3, [r6, #0]
 8007f5a:	bf14      	ite	ne
 8007f5c:	230a      	movne	r3, #10
 8007f5e:	2308      	moveq	r3, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f66:	6866      	ldr	r6, [r4, #4]
 8007f68:	60a6      	str	r6, [r4, #8]
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	bfa2      	ittt	ge
 8007f6e:	6821      	ldrge	r1, [r4, #0]
 8007f70:	f021 0104 	bicge.w	r1, r1, #4
 8007f74:	6021      	strge	r1, [r4, #0]
 8007f76:	b90d      	cbnz	r5, 8007f7c <_printf_i+0x110>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	d04b      	beq.n	8008014 <_printf_i+0x1a8>
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f82:	fb03 5711 	mls	r7, r3, r1, r5
 8007f86:	5dc7      	ldrb	r7, [r0, r7]
 8007f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f8c:	462f      	mov	r7, r5
 8007f8e:	42bb      	cmp	r3, r7
 8007f90:	460d      	mov	r5, r1
 8007f92:	d9f4      	bls.n	8007f7e <_printf_i+0x112>
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d10b      	bne.n	8007fb0 <_printf_i+0x144>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07df      	lsls	r7, r3, #31
 8007f9c:	d508      	bpl.n	8007fb0 <_printf_i+0x144>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	6861      	ldr	r1, [r4, #4]
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	bfde      	ittt	le
 8007fa6:	2330      	movle	r3, #48	@ 0x30
 8007fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb0:	1b92      	subs	r2, r2, r6
 8007fb2:	6122      	str	r2, [r4, #16]
 8007fb4:	f8cd a000 	str.w	sl, [sp]
 8007fb8:	464b      	mov	r3, r9
 8007fba:	aa03      	add	r2, sp, #12
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	f7ff fee6 	bl	8007d90 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d14a      	bne.n	800805e <_printf_i+0x1f2>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b004      	add	sp, #16
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f043 0320 	orr.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	4833      	ldr	r0, [pc, #204]	@ (80080a8 <_printf_i+0x23c>)
 8007fdc:	2778      	movs	r7, #120	@ 0x78
 8007fde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6831      	ldr	r1, [r6, #0]
 8007fe6:	061f      	lsls	r7, r3, #24
 8007fe8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fec:	d402      	bmi.n	8007ff4 <_printf_i+0x188>
 8007fee:	065f      	lsls	r7, r3, #25
 8007ff0:	bf48      	it	mi
 8007ff2:	b2ad      	uxthmi	r5, r5
 8007ff4:	6031      	str	r1, [r6, #0]
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	bf44      	itt	mi
 8007ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8007ffe:	6023      	strmi	r3, [r4, #0]
 8008000:	b11d      	cbz	r5, 800800a <_printf_i+0x19e>
 8008002:	2310      	movs	r3, #16
 8008004:	e7ac      	b.n	8007f60 <_printf_i+0xf4>
 8008006:	4827      	ldr	r0, [pc, #156]	@ (80080a4 <_printf_i+0x238>)
 8008008:	e7e9      	b.n	8007fde <_printf_i+0x172>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	f023 0320 	bic.w	r3, r3, #32
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	e7f6      	b.n	8008002 <_printf_i+0x196>
 8008014:	4616      	mov	r6, r2
 8008016:	e7bd      	b.n	8007f94 <_printf_i+0x128>
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	6961      	ldr	r1, [r4, #20]
 800801e:	1d18      	adds	r0, r3, #4
 8008020:	6030      	str	r0, [r6, #0]
 8008022:	062e      	lsls	r6, r5, #24
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	d501      	bpl.n	800802c <_printf_i+0x1c0>
 8008028:	6019      	str	r1, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0x1c6>
 800802c:	0668      	lsls	r0, r5, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0x1bc>
 8008030:	8019      	strh	r1, [r3, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	4616      	mov	r6, r2
 8008038:	e7bc      	b.n	8007fb4 <_printf_i+0x148>
 800803a:	6833      	ldr	r3, [r6, #0]
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	6032      	str	r2, [r6, #0]
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	2100      	movs	r1, #0
 8008046:	4630      	mov	r0, r6
 8008048:	f7f8 f8d2 	bl	80001f0 <memchr>
 800804c:	b108      	cbz	r0, 8008052 <_printf_i+0x1e6>
 800804e:	1b80      	subs	r0, r0, r6
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	2300      	movs	r3, #0
 8008058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805c:	e7aa      	b.n	8007fb4 <_printf_i+0x148>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	4632      	mov	r2, r6
 8008062:	4649      	mov	r1, r9
 8008064:	4640      	mov	r0, r8
 8008066:	47d0      	blx	sl
 8008068:	3001      	adds	r0, #1
 800806a:	d0ad      	beq.n	8007fc8 <_printf_i+0x15c>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	d413      	bmi.n	800809a <_printf_i+0x22e>
 8008072:	68e0      	ldr	r0, [r4, #12]
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	4298      	cmp	r0, r3
 8008078:	bfb8      	it	lt
 800807a:	4618      	movlt	r0, r3
 800807c:	e7a6      	b.n	8007fcc <_printf_i+0x160>
 800807e:	2301      	movs	r3, #1
 8008080:	4632      	mov	r2, r6
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	47d0      	blx	sl
 8008088:	3001      	adds	r0, #1
 800808a:	d09d      	beq.n	8007fc8 <_printf_i+0x15c>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9903      	ldr	r1, [sp, #12]
 8008092:	1a5b      	subs	r3, r3, r1
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf2      	bgt.n	800807e <_printf_i+0x212>
 8008098:	e7eb      	b.n	8008072 <_printf_i+0x206>
 800809a:	2500      	movs	r5, #0
 800809c:	f104 0619 	add.w	r6, r4, #25
 80080a0:	e7f5      	b.n	800808e <_printf_i+0x222>
 80080a2:	bf00      	nop
 80080a4:	080093b5 	.word	0x080093b5
 80080a8:	080093c6 	.word	0x080093c6

080080ac <__sflush_r>:
 80080ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	0716      	lsls	r6, r2, #28
 80080b6:	4605      	mov	r5, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	d454      	bmi.n	8008166 <__sflush_r+0xba>
 80080bc:	684b      	ldr	r3, [r1, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dc02      	bgt.n	80080c8 <__sflush_r+0x1c>
 80080c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd48      	ble.n	800815a <__sflush_r+0xae>
 80080c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080ca:	2e00      	cmp	r6, #0
 80080cc:	d045      	beq.n	800815a <__sflush_r+0xae>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080d4:	682f      	ldr	r7, [r5, #0]
 80080d6:	6a21      	ldr	r1, [r4, #32]
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	d030      	beq.n	800813e <__sflush_r+0x92>
 80080dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	0759      	lsls	r1, r3, #29
 80080e2:	d505      	bpl.n	80080f0 <__sflush_r+0x44>
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080ea:	b10b      	cbz	r3, 80080f0 <__sflush_r+0x44>
 80080ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b0      	blx	r6
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	d106      	bne.n	800810e <__sflush_r+0x62>
 8008100:	6829      	ldr	r1, [r5, #0]
 8008102:	291d      	cmp	r1, #29
 8008104:	d82b      	bhi.n	800815e <__sflush_r+0xb2>
 8008106:	4a2a      	ldr	r2, [pc, #168]	@ (80081b0 <__sflush_r+0x104>)
 8008108:	410a      	asrs	r2, r1
 800810a:	07d6      	lsls	r6, r2, #31
 800810c:	d427      	bmi.n	800815e <__sflush_r+0xb2>
 800810e:	2200      	movs	r2, #0
 8008110:	6062      	str	r2, [r4, #4]
 8008112:	04d9      	lsls	r1, r3, #19
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	6022      	str	r2, [r4, #0]
 8008118:	d504      	bpl.n	8008124 <__sflush_r+0x78>
 800811a:	1c42      	adds	r2, r0, #1
 800811c:	d101      	bne.n	8008122 <__sflush_r+0x76>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b903      	cbnz	r3, 8008124 <__sflush_r+0x78>
 8008122:	6560      	str	r0, [r4, #84]	@ 0x54
 8008124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008126:	602f      	str	r7, [r5, #0]
 8008128:	b1b9      	cbz	r1, 800815a <__sflush_r+0xae>
 800812a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800812e:	4299      	cmp	r1, r3
 8008130:	d002      	beq.n	8008138 <__sflush_r+0x8c>
 8008132:	4628      	mov	r0, r5
 8008134:	f7ff fa9a 	bl	800766c <_free_r>
 8008138:	2300      	movs	r3, #0
 800813a:	6363      	str	r3, [r4, #52]	@ 0x34
 800813c:	e00d      	b.n	800815a <__sflush_r+0xae>
 800813e:	2301      	movs	r3, #1
 8008140:	4628      	mov	r0, r5
 8008142:	47b0      	blx	r6
 8008144:	4602      	mov	r2, r0
 8008146:	1c50      	adds	r0, r2, #1
 8008148:	d1c9      	bne.n	80080de <__sflush_r+0x32>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c6      	beq.n	80080de <__sflush_r+0x32>
 8008150:	2b1d      	cmp	r3, #29
 8008152:	d001      	beq.n	8008158 <__sflush_r+0xac>
 8008154:	2b16      	cmp	r3, #22
 8008156:	d11e      	bne.n	8008196 <__sflush_r+0xea>
 8008158:	602f      	str	r7, [r5, #0]
 800815a:	2000      	movs	r0, #0
 800815c:	e022      	b.n	80081a4 <__sflush_r+0xf8>
 800815e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008162:	b21b      	sxth	r3, r3
 8008164:	e01b      	b.n	800819e <__sflush_r+0xf2>
 8008166:	690f      	ldr	r7, [r1, #16]
 8008168:	2f00      	cmp	r7, #0
 800816a:	d0f6      	beq.n	800815a <__sflush_r+0xae>
 800816c:	0793      	lsls	r3, r2, #30
 800816e:	680e      	ldr	r6, [r1, #0]
 8008170:	bf08      	it	eq
 8008172:	694b      	ldreq	r3, [r1, #20]
 8008174:	600f      	str	r7, [r1, #0]
 8008176:	bf18      	it	ne
 8008178:	2300      	movne	r3, #0
 800817a:	eba6 0807 	sub.w	r8, r6, r7
 800817e:	608b      	str	r3, [r1, #8]
 8008180:	f1b8 0f00 	cmp.w	r8, #0
 8008184:	dde9      	ble.n	800815a <__sflush_r+0xae>
 8008186:	6a21      	ldr	r1, [r4, #32]
 8008188:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800818a:	4643      	mov	r3, r8
 800818c:	463a      	mov	r2, r7
 800818e:	4628      	mov	r0, r5
 8008190:	47b0      	blx	r6
 8008192:	2800      	cmp	r0, #0
 8008194:	dc08      	bgt.n	80081a8 <__sflush_r+0xfc>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	4407      	add	r7, r0
 80081aa:	eba8 0800 	sub.w	r8, r8, r0
 80081ae:	e7e7      	b.n	8008180 <__sflush_r+0xd4>
 80081b0:	dfbffffe 	.word	0xdfbffffe

080081b4 <_fflush_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	690b      	ldr	r3, [r1, #16]
 80081b8:	4605      	mov	r5, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b913      	cbnz	r3, 80081c4 <_fflush_r+0x10>
 80081be:	2500      	movs	r5, #0
 80081c0:	4628      	mov	r0, r5
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	b118      	cbz	r0, 80081ce <_fflush_r+0x1a>
 80081c6:	6a03      	ldr	r3, [r0, #32]
 80081c8:	b90b      	cbnz	r3, 80081ce <_fflush_r+0x1a>
 80081ca:	f7ff f927 	bl	800741c <__sinit>
 80081ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f3      	beq.n	80081be <_fflush_r+0xa>
 80081d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081d8:	07d0      	lsls	r0, r2, #31
 80081da:	d404      	bmi.n	80081e6 <_fflush_r+0x32>
 80081dc:	0599      	lsls	r1, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_fflush_r+0x32>
 80081e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081e2:	f7ff fa40 	bl	8007666 <__retarget_lock_acquire_recursive>
 80081e6:	4628      	mov	r0, r5
 80081e8:	4621      	mov	r1, r4
 80081ea:	f7ff ff5f 	bl	80080ac <__sflush_r>
 80081ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081f0:	07da      	lsls	r2, r3, #31
 80081f2:	4605      	mov	r5, r0
 80081f4:	d4e4      	bmi.n	80081c0 <_fflush_r+0xc>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	059b      	lsls	r3, r3, #22
 80081fa:	d4e1      	bmi.n	80081c0 <_fflush_r+0xc>
 80081fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081fe:	f7ff fa33 	bl	8007668 <__retarget_lock_release_recursive>
 8008202:	e7dd      	b.n	80081c0 <_fflush_r+0xc>

08008204 <__swbuf_r>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	4614      	mov	r4, r2
 800820a:	4605      	mov	r5, r0
 800820c:	b118      	cbz	r0, 8008216 <__swbuf_r+0x12>
 800820e:	6a03      	ldr	r3, [r0, #32]
 8008210:	b90b      	cbnz	r3, 8008216 <__swbuf_r+0x12>
 8008212:	f7ff f903 	bl	800741c <__sinit>
 8008216:	69a3      	ldr	r3, [r4, #24]
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	071a      	lsls	r2, r3, #28
 800821e:	d501      	bpl.n	8008224 <__swbuf_r+0x20>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	b943      	cbnz	r3, 8008236 <__swbuf_r+0x32>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f82a 	bl	8008280 <__swsetup_r>
 800822c:	b118      	cbz	r0, 8008236 <__swbuf_r+0x32>
 800822e:	f04f 37ff 	mov.w	r7, #4294967295
 8008232:	4638      	mov	r0, r7
 8008234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	1a98      	subs	r0, r3, r2
 800823c:	6963      	ldr	r3, [r4, #20]
 800823e:	b2f6      	uxtb	r6, r6
 8008240:	4283      	cmp	r3, r0
 8008242:	4637      	mov	r7, r6
 8008244:	dc05      	bgt.n	8008252 <__swbuf_r+0x4e>
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff ffb3 	bl	80081b4 <_fflush_r>
 800824e:	2800      	cmp	r0, #0
 8008250:	d1ed      	bne.n	800822e <__swbuf_r+0x2a>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	3b01      	subs	r3, #1
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	701e      	strb	r6, [r3, #0]
 8008260:	6962      	ldr	r2, [r4, #20]
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	429a      	cmp	r2, r3
 8008266:	d004      	beq.n	8008272 <__swbuf_r+0x6e>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d5e1      	bpl.n	8008232 <__swbuf_r+0x2e>
 800826e:	2e0a      	cmp	r6, #10
 8008270:	d1df      	bne.n	8008232 <__swbuf_r+0x2e>
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f7ff ff9d 	bl	80081b4 <_fflush_r>
 800827a:	2800      	cmp	r0, #0
 800827c:	d0d9      	beq.n	8008232 <__swbuf_r+0x2e>
 800827e:	e7d6      	b.n	800822e <__swbuf_r+0x2a>

08008280 <__swsetup_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4b29      	ldr	r3, [pc, #164]	@ (8008328 <__swsetup_r+0xa8>)
 8008284:	4605      	mov	r5, r0
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	460c      	mov	r4, r1
 800828a:	b118      	cbz	r0, 8008294 <__swsetup_r+0x14>
 800828c:	6a03      	ldr	r3, [r0, #32]
 800828e:	b90b      	cbnz	r3, 8008294 <__swsetup_r+0x14>
 8008290:	f7ff f8c4 	bl	800741c <__sinit>
 8008294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008298:	0719      	lsls	r1, r3, #28
 800829a:	d422      	bmi.n	80082e2 <__swsetup_r+0x62>
 800829c:	06da      	lsls	r2, r3, #27
 800829e:	d407      	bmi.n	80082b0 <__swsetup_r+0x30>
 80082a0:	2209      	movs	r2, #9
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	e033      	b.n	8008318 <__swsetup_r+0x98>
 80082b0:	0758      	lsls	r0, r3, #29
 80082b2:	d512      	bpl.n	80082da <__swsetup_r+0x5a>
 80082b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082b6:	b141      	cbz	r1, 80082ca <__swsetup_r+0x4a>
 80082b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082bc:	4299      	cmp	r1, r3
 80082be:	d002      	beq.n	80082c6 <__swsetup_r+0x46>
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff f9d3 	bl	800766c <_free_r>
 80082c6:	2300      	movs	r3, #0
 80082c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	2300      	movs	r3, #0
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	b94b      	cbnz	r3, 80082fa <__swsetup_r+0x7a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f0:	d003      	beq.n	80082fa <__swsetup_r+0x7a>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 f8a5 	bl	8008444 <__smakebuf_r>
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	f013 0201 	ands.w	r2, r3, #1
 8008302:	d00a      	beq.n	800831a <__swsetup_r+0x9a>
 8008304:	2200      	movs	r2, #0
 8008306:	60a2      	str	r2, [r4, #8]
 8008308:	6962      	ldr	r2, [r4, #20]
 800830a:	4252      	negs	r2, r2
 800830c:	61a2      	str	r2, [r4, #24]
 800830e:	6922      	ldr	r2, [r4, #16]
 8008310:	b942      	cbnz	r2, 8008324 <__swsetup_r+0xa4>
 8008312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008316:	d1c5      	bne.n	80082a4 <__swsetup_r+0x24>
 8008318:	bd38      	pop	{r3, r4, r5, pc}
 800831a:	0799      	lsls	r1, r3, #30
 800831c:	bf58      	it	pl
 800831e:	6962      	ldrpl	r2, [r4, #20]
 8008320:	60a2      	str	r2, [r4, #8]
 8008322:	e7f4      	b.n	800830e <__swsetup_r+0x8e>
 8008324:	2000      	movs	r0, #0
 8008326:	e7f7      	b.n	8008318 <__swsetup_r+0x98>
 8008328:	20000438 	.word	0x20000438

0800832c <memmove>:
 800832c:	4288      	cmp	r0, r1
 800832e:	b510      	push	{r4, lr}
 8008330:	eb01 0402 	add.w	r4, r1, r2
 8008334:	d902      	bls.n	800833c <memmove+0x10>
 8008336:	4284      	cmp	r4, r0
 8008338:	4623      	mov	r3, r4
 800833a:	d807      	bhi.n	800834c <memmove+0x20>
 800833c:	1e43      	subs	r3, r0, #1
 800833e:	42a1      	cmp	r1, r4
 8008340:	d008      	beq.n	8008354 <memmove+0x28>
 8008342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800834a:	e7f8      	b.n	800833e <memmove+0x12>
 800834c:	4402      	add	r2, r0
 800834e:	4601      	mov	r1, r0
 8008350:	428a      	cmp	r2, r1
 8008352:	d100      	bne.n	8008356 <memmove+0x2a>
 8008354:	bd10      	pop	{r4, pc}
 8008356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800835a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800835e:	e7f7      	b.n	8008350 <memmove+0x24>

08008360 <_sbrk_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	@ (800837c <_sbrk_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fc f962 	bl	8004634 <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_sbrk_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_sbrk_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000c38 	.word	0x20000c38

08008380 <memcpy>:
 8008380:	440a      	add	r2, r1
 8008382:	4291      	cmp	r1, r2
 8008384:	f100 33ff 	add.w	r3, r0, #4294967295
 8008388:	d100      	bne.n	800838c <memcpy+0xc>
 800838a:	4770      	bx	lr
 800838c:	b510      	push	{r4, lr}
 800838e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008396:	4291      	cmp	r1, r2
 8008398:	d1f9      	bne.n	800838e <memcpy+0xe>
 800839a:	bd10      	pop	{r4, pc}

0800839c <_realloc_r>:
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	4680      	mov	r8, r0
 80083a2:	4615      	mov	r5, r2
 80083a4:	460c      	mov	r4, r1
 80083a6:	b921      	cbnz	r1, 80083b2 <_realloc_r+0x16>
 80083a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4611      	mov	r1, r2
 80083ae:	f7ff b9c9 	b.w	8007744 <_malloc_r>
 80083b2:	b92a      	cbnz	r2, 80083c0 <_realloc_r+0x24>
 80083b4:	f7ff f95a 	bl	800766c <_free_r>
 80083b8:	2400      	movs	r4, #0
 80083ba:	4620      	mov	r0, r4
 80083bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c0:	f000 f89e 	bl	8008500 <_malloc_usable_size_r>
 80083c4:	4285      	cmp	r5, r0
 80083c6:	4606      	mov	r6, r0
 80083c8:	d802      	bhi.n	80083d0 <_realloc_r+0x34>
 80083ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083ce:	d8f4      	bhi.n	80083ba <_realloc_r+0x1e>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff f9b6 	bl	8007744 <_malloc_r>
 80083d8:	4607      	mov	r7, r0
 80083da:	2800      	cmp	r0, #0
 80083dc:	d0ec      	beq.n	80083b8 <_realloc_r+0x1c>
 80083de:	42b5      	cmp	r5, r6
 80083e0:	462a      	mov	r2, r5
 80083e2:	4621      	mov	r1, r4
 80083e4:	bf28      	it	cs
 80083e6:	4632      	movcs	r2, r6
 80083e8:	f7ff ffca 	bl	8008380 <memcpy>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4640      	mov	r0, r8
 80083f0:	f7ff f93c 	bl	800766c <_free_r>
 80083f4:	463c      	mov	r4, r7
 80083f6:	e7e0      	b.n	80083ba <_realloc_r+0x1e>

080083f8 <__swhatbuf_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	2900      	cmp	r1, #0
 8008402:	b096      	sub	sp, #88	@ 0x58
 8008404:	4615      	mov	r5, r2
 8008406:	461e      	mov	r6, r3
 8008408:	da0d      	bge.n	8008426 <__swhatbuf_r+0x2e>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	bf14      	ite	ne
 8008416:	2340      	movne	r3, #64	@ 0x40
 8008418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800841c:	2000      	movs	r0, #0
 800841e:	6031      	str	r1, [r6, #0]
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	b016      	add	sp, #88	@ 0x58
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	466a      	mov	r2, sp
 8008428:	f000 f848 	bl	80084bc <_fstat_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	dbec      	blt.n	800840a <__swhatbuf_r+0x12>
 8008430:	9901      	ldr	r1, [sp, #4]
 8008432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800843a:	4259      	negs	r1, r3
 800843c:	4159      	adcs	r1, r3
 800843e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008442:	e7eb      	b.n	800841c <__swhatbuf_r+0x24>

08008444 <__smakebuf_r>:
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008448:	079d      	lsls	r5, r3, #30
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
 800844e:	d507      	bpl.n	8008460 <__smakebuf_r+0x1c>
 8008450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	2301      	movs	r3, #1
 800845a:	6163      	str	r3, [r4, #20]
 800845c:	b003      	add	sp, #12
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008460:	ab01      	add	r3, sp, #4
 8008462:	466a      	mov	r2, sp
 8008464:	f7ff ffc8 	bl	80083f8 <__swhatbuf_r>
 8008468:	9f00      	ldr	r7, [sp, #0]
 800846a:	4605      	mov	r5, r0
 800846c:	4639      	mov	r1, r7
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff f968 	bl	8007744 <_malloc_r>
 8008474:	b948      	cbnz	r0, 800848a <__smakebuf_r+0x46>
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	059a      	lsls	r2, r3, #22
 800847c:	d4ee      	bmi.n	800845c <__smakebuf_r+0x18>
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	f043 0302 	orr.w	r3, r3, #2
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	e7e2      	b.n	8008450 <__smakebuf_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	6020      	str	r0, [r4, #0]
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800849a:	b15b      	cbz	r3, 80084b4 <__smakebuf_r+0x70>
 800849c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f81d 	bl	80084e0 <_isatty_r>
 80084a6:	b128      	cbz	r0, 80084b4 <__smakebuf_r+0x70>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	431d      	orrs	r5, r3
 80084b8:	81a5      	strh	r5, [r4, #12]
 80084ba:	e7cf      	b.n	800845c <__smakebuf_r+0x18>

080084bc <_fstat_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_fstat_r+0x20>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f7fc f88b 	bl	80045e4 <_fstat>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d102      	bne.n	80084d8 <_fstat_r+0x1c>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b103      	cbz	r3, 80084d8 <_fstat_r+0x1c>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	bf00      	nop
 80084dc:	20000c38 	.word	0x20000c38

080084e0 <_isatty_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d06      	ldr	r5, [pc, #24]	@ (80084fc <_isatty_r+0x1c>)
 80084e4:	2300      	movs	r3, #0
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	f7fc f88a 	bl	8004604 <_isatty>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_isatty_r+0x1a>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_isatty_r+0x1a>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	20000c38 	.word	0x20000c38

08008500 <_malloc_usable_size_r>:
 8008500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008504:	1f18      	subs	r0, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfbc      	itt	lt
 800850a:	580b      	ldrlt	r3, [r1, r0]
 800850c:	18c0      	addlt	r0, r0, r3
 800850e:	4770      	bx	lr

08008510 <_init>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr

0800851c <_fini>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr
