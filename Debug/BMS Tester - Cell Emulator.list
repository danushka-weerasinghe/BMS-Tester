
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c20  08003c20  0000502c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c20  08003c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c28  08003c28  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08003c30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000502c  2**0
                  CONTENTS
 10 .bss          00000180  2000002c  2000002c  0000502c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  0000502c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009705  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e3  00000000  00000000  0000e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00010048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075d  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002151e  00000000  00000000  0001112d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c126  00000000  00000000  0003264b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51a7  00000000  00000000  0003e771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113918  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002848  00000000  00000000  0011395c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  001161a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003bf0 	.word	0x08003bf0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08003bf0 	.word	0x08003bf0

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2iz>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000990:	d215      	bcs.n	80009be <__aeabi_d2iz+0x36>
 8000992:	d511      	bpl.n	80009b8 <__aeabi_d2iz+0x30>
 8000994:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d912      	bls.n	80009c4 <__aeabi_d2iz+0x3c>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	bf18      	it	ne
 80009b4:	4240      	negne	r0, r0
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d105      	bne.n	80009d0 <__aeabi_d2iz+0x48>
 80009c4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	bf08      	it	eq
 80009ca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_uldivmod>:
 80009d8:	b953      	cbnz	r3, 80009f0 <__aeabi_uldivmod+0x18>
 80009da:	b94a      	cbnz	r2, 80009f0 <__aeabi_uldivmod+0x18>
 80009dc:	2900      	cmp	r1, #0
 80009de:	bf08      	it	eq
 80009e0:	2800      	cmpeq	r0, #0
 80009e2:	bf1c      	itt	ne
 80009e4:	f04f 31ff 	movne.w	r1, #4294967295
 80009e8:	f04f 30ff 	movne.w	r0, #4294967295
 80009ec:	f000 b96a 	b.w	8000cc4 <__aeabi_idiv0>
 80009f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f8:	f000 f806 	bl	8000a08 <__udivmoddi4>
 80009fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr

08000a08 <__udivmoddi4>:
 8000a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a0c:	9d08      	ldr	r5, [sp, #32]
 8000a0e:	460c      	mov	r4, r1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d14e      	bne.n	8000ab2 <__udivmoddi4+0xaa>
 8000a14:	4694      	mov	ip, r2
 8000a16:	458c      	cmp	ip, r1
 8000a18:	4686      	mov	lr, r0
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	d962      	bls.n	8000ae6 <__udivmoddi4+0xde>
 8000a20:	b14a      	cbz	r2, 8000a36 <__udivmoddi4+0x2e>
 8000a22:	f1c2 0320 	rsb	r3, r2, #32
 8000a26:	4091      	lsls	r1, r2
 8000a28:	fa20 f303 	lsr.w	r3, r0, r3
 8000a2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a30:	4319      	orrs	r1, r3
 8000a32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f f68c 	uxth.w	r6, ip
 8000a3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4e:	fb04 f106 	mul.w	r1, r4, r6
 8000a52:	4299      	cmp	r1, r3
 8000a54:	d90a      	bls.n	8000a6c <__udivmoddi4+0x64>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a5e:	f080 8112 	bcs.w	8000c86 <__udivmoddi4+0x27e>
 8000a62:	4299      	cmp	r1, r3
 8000a64:	f240 810f 	bls.w	8000c86 <__udivmoddi4+0x27e>
 8000a68:	3c02      	subs	r4, #2
 8000a6a:	4463      	add	r3, ip
 8000a6c:	1a59      	subs	r1, r3, r1
 8000a6e:	fa1f f38e 	uxth.w	r3, lr
 8000a72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a76:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7e:	fb00 f606 	mul.w	r6, r0, r6
 8000a82:	429e      	cmp	r6, r3
 8000a84:	d90a      	bls.n	8000a9c <__udivmoddi4+0x94>
 8000a86:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a8e:	f080 80fc 	bcs.w	8000c8a <__udivmoddi4+0x282>
 8000a92:	429e      	cmp	r6, r3
 8000a94:	f240 80f9 	bls.w	8000c8a <__udivmoddi4+0x282>
 8000a98:	4463      	add	r3, ip
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	1b9b      	subs	r3, r3, r6
 8000a9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	b11d      	cbz	r5, 8000aae <__udivmoddi4+0xa6>
 8000aa6:	40d3      	lsrs	r3, r2
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e9c5 3200 	strd	r3, r2, [r5]
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d905      	bls.n	8000ac2 <__udivmoddi4+0xba>
 8000ab6:	b10d      	cbz	r5, 8000abc <__udivmoddi4+0xb4>
 8000ab8:	e9c5 0100 	strd	r0, r1, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	4608      	mov	r0, r1
 8000ac0:	e7f5      	b.n	8000aae <__udivmoddi4+0xa6>
 8000ac2:	fab3 f183 	clz	r1, r3
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d146      	bne.n	8000b58 <__udivmoddi4+0x150>
 8000aca:	42a3      	cmp	r3, r4
 8000acc:	d302      	bcc.n	8000ad4 <__udivmoddi4+0xcc>
 8000ace:	4290      	cmp	r0, r2
 8000ad0:	f0c0 80f0 	bcc.w	8000cb4 <__udivmoddi4+0x2ac>
 8000ad4:	1a86      	subs	r6, r0, r2
 8000ad6:	eb64 0303 	sbc.w	r3, r4, r3
 8000ada:	2001      	movs	r0, #1
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d0e6      	beq.n	8000aae <__udivmoddi4+0xa6>
 8000ae0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae4:	e7e3      	b.n	8000aae <__udivmoddi4+0xa6>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	f040 8090 	bne.w	8000c0c <__udivmoddi4+0x204>
 8000aec:	eba1 040c 	sub.w	r4, r1, ip
 8000af0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af4:	fa1f f78c 	uxth.w	r7, ip
 8000af8:	2101      	movs	r1, #1
 8000afa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb08 4416 	mls	r4, r8, r6, r4
 8000b06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0a:	fb07 f006 	mul.w	r0, r7, r6
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x11c>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x11a>
 8000b1c:	4298      	cmp	r0, r3
 8000b1e:	f200 80cd 	bhi.w	8000cbc <__udivmoddi4+0x2b4>
 8000b22:	4626      	mov	r6, r4
 8000b24:	1a1c      	subs	r4, r3, r0
 8000b26:	fa1f f38e 	uxth.w	r3, lr
 8000b2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb00 f707 	mul.w	r7, r0, r7
 8000b3a:	429f      	cmp	r7, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x148>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x146>
 8000b48:	429f      	cmp	r7, r3
 8000b4a:	f200 80b0 	bhi.w	8000cae <__udivmoddi4+0x2a6>
 8000b4e:	4620      	mov	r0, r4
 8000b50:	1bdb      	subs	r3, r3, r7
 8000b52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b56:	e7a5      	b.n	8000aa4 <__udivmoddi4+0x9c>
 8000b58:	f1c1 0620 	rsb	r6, r1, #32
 8000b5c:	408b      	lsls	r3, r1
 8000b5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b62:	431f      	orrs	r7, r3
 8000b64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b68:	fa04 f301 	lsl.w	r3, r4, r1
 8000b6c:	ea43 030c 	orr.w	r3, r3, ip
 8000b70:	40f4      	lsrs	r4, r6
 8000b72:	fa00 f801 	lsl.w	r8, r0, r1
 8000b76:	0c38      	lsrs	r0, r7, #16
 8000b78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b80:	fa1f fc87 	uxth.w	ip, r7
 8000b84:	fb00 441e 	mls	r4, r0, lr, r4
 8000b88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b90:	45a1      	cmp	r9, r4
 8000b92:	fa02 f201 	lsl.w	r2, r2, r1
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x1a6>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b9e:	f080 8084 	bcs.w	8000caa <__udivmoddi4+0x2a2>
 8000ba2:	45a1      	cmp	r9, r4
 8000ba4:	f240 8081 	bls.w	8000caa <__udivmoddi4+0x2a2>
 8000ba8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bac:	443c      	add	r4, r7
 8000bae:	eba4 0409 	sub.w	r4, r4, r9
 8000bb2:	fa1f f983 	uxth.w	r9, r3
 8000bb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bba:	fb00 4413 	mls	r4, r0, r3, r4
 8000bbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	d907      	bls.n	8000bda <__udivmoddi4+0x1d2>
 8000bca:	193c      	adds	r4, r7, r4
 8000bcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd0:	d267      	bcs.n	8000ca2 <__udivmoddi4+0x29a>
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0x29a>
 8000bd6:	3b02      	subs	r3, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bde:	fba0 9302 	umull	r9, r3, r0, r2
 8000be2:	eba4 040c 	sub.w	r4, r4, ip
 8000be6:	429c      	cmp	r4, r3
 8000be8:	46ce      	mov	lr, r9
 8000bea:	469c      	mov	ip, r3
 8000bec:	d351      	bcc.n	8000c92 <__udivmoddi4+0x28a>
 8000bee:	d04e      	beq.n	8000c8e <__udivmoddi4+0x286>
 8000bf0:	b155      	cbz	r5, 8000c08 <__udivmoddi4+0x200>
 8000bf2:	ebb8 030e 	subs.w	r3, r8, lr
 8000bf6:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000bfe:	40cb      	lsrs	r3, r1
 8000c00:	431e      	orrs	r6, r3
 8000c02:	40cc      	lsrs	r4, r1
 8000c04:	e9c5 6400 	strd	r6, r4, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	e750      	b.n	8000aae <__udivmoddi4+0xa6>
 8000c0c:	f1c2 0320 	rsb	r3, r2, #32
 8000c10:	fa20 f103 	lsr.w	r1, r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa24 f303 	lsr.w	r3, r4, r3
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	430c      	orrs	r4, r1
 8000c20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3110 	mls	r1, r8, r0, r3
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb00 f107 	mul.w	r1, r0, r7
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x24c>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c4a:	d22c      	bcs.n	8000ca6 <__udivmoddi4+0x29e>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d92a      	bls.n	8000ca6 <__udivmoddi4+0x29e>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1a5b      	subs	r3, r3, r1
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c64:	fb01 f307 	mul.w	r3, r1, r7
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x276>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c74:	d213      	bcs.n	8000c9e <__udivmoddi4+0x296>
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	d911      	bls.n	8000c9e <__udivmoddi4+0x296>
 8000c7a:	3902      	subs	r1, #2
 8000c7c:	4464      	add	r4, ip
 8000c7e:	1ae4      	subs	r4, r4, r3
 8000c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c84:	e739      	b.n	8000afa <__udivmoddi4+0xf2>
 8000c86:	4604      	mov	r4, r0
 8000c88:	e6f0      	b.n	8000a6c <__udivmoddi4+0x64>
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e706      	b.n	8000a9c <__udivmoddi4+0x94>
 8000c8e:	45c8      	cmp	r8, r9
 8000c90:	d2ae      	bcs.n	8000bf0 <__udivmoddi4+0x1e8>
 8000c92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	e7a8      	b.n	8000bf0 <__udivmoddi4+0x1e8>
 8000c9e:	4631      	mov	r1, r6
 8000ca0:	e7ed      	b.n	8000c7e <__udivmoddi4+0x276>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	e799      	b.n	8000bda <__udivmoddi4+0x1d2>
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	e7d4      	b.n	8000c54 <__udivmoddi4+0x24c>
 8000caa:	46d6      	mov	lr, sl
 8000cac:	e77f      	b.n	8000bae <__udivmoddi4+0x1a6>
 8000cae:	4463      	add	r3, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e74d      	b.n	8000b50 <__udivmoddi4+0x148>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	4608      	mov	r0, r1
 8000cba:	e70f      	b.n	8000adc <__udivmoddi4+0xd4>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	e730      	b.n	8000b24 <__udivmoddi4+0x11c>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e00e      	b.n	8000cf6 <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	411a      	asrs	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1c3 030f 	rsb	r3, r3, #15
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	6839      	ldr	r1, [r7, #0]
 8000ce8:	440b      	add	r3, r1
 8000cea:	f002 0201 	and.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b09      	cmp	r3, #9
 8000cfa:	dded      	ble.n	8000cd8 <intToBinary+0x10>
		    }
		}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e02b      	b.n	8000d80 <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b25a      	sxtb	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	440b      	add	r3, r1
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3308      	adds	r3, #8
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	440b      	add	r3, r1
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1c3 0307 	rsb	r3, r3, #7
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	ddd0      	ble.n	8000d28 <assignBytes+0x1e>
		    }
		}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	@ 0x58
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fb88 	bl	80004b4 <__aeabi_f2d>
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b4c      	ldr	r3, [pc, #304]	@ (8000edc <cell12_Temp_01_Set+0x148>)
 8000daa:	f7ff fd05 	bl	80007b8 <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b49      	ldr	r3, [pc, #292]	@ (8000ee0 <cell12_Temp_01_Set+0x14c>)
 8000dbc:	f7ff fbd2 	bl	8000564 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f7ff fdde 	bl	8000988 <__aeabi_d2iz>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2240      	movs	r2, #64	@ 0x40
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fedd 	bl	8003b98 <memset>
 8000dde:	2301      	movs	r3, #1
 8000de0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000dea:	f7ff ff6d 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 8000dee:	f107 0208 	add.w	r2, r7, #8
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff86 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2101      	movs	r1, #1
 8000e02:	4838      	ldr	r0, [pc, #224]	@ (8000ee4 <cell12_Temp_01_Set+0x150>)
 8000e04:	f001 fc58 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e08:	2064      	movs	r0, #100	@ 0x64
 8000e0a:	f001 f99f 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2102      	movs	r1, #2
 8000e12:	4835      	ldr	r0, [pc, #212]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e14:	f001 fc50 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	@ 0x64
 8000e1a:	f001 f997 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2102      	movs	r1, #2
 8000e22:	4831      	ldr	r0, [pc, #196]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e24:	f001 fc48 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	492f      	ldr	r1, [pc, #188]	@ (8000eec <cell12_Temp_01_Set+0x158>)
 8000e30:	482f      	ldr	r0, [pc, #188]	@ (8000ef0 <cell12_Temp_01_Set+0x15c>)
 8000e32:	f002 fae8 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2102      	movs	r1, #2
 8000e3a:	482b      	ldr	r0, [pc, #172]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e3c:	f001 fc3c 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e40:	2064      	movs	r0, #100	@ 0x64
 8000e42:	f001 f983 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4827      	ldr	r0, [pc, #156]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e4c:	f001 fc34 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	2202      	movs	r2, #2
 8000e56:	4927      	ldr	r1, [pc, #156]	@ (8000ef4 <cell12_Temp_01_Set+0x160>)
 8000e58:	4825      	ldr	r0, [pc, #148]	@ (8000ef0 <cell12_Temp_01_Set+0x15c>)
 8000e5a:	f002 fad4 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	4821      	ldr	r0, [pc, #132]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e64:	f001 fc28 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f001 f96f 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	481d      	ldr	r0, [pc, #116]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e74:	f001 fc20 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8000e78:	f107 0108 	add.w	r1, r7, #8
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	2202      	movs	r2, #2
 8000e82:	481b      	ldr	r0, [pc, #108]	@ (8000ef0 <cell12_Temp_01_Set+0x15c>)
 8000e84:	f002 fabf 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e8e:	f001 fc13 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e92:	2064      	movs	r0, #100	@ 0x64
 8000e94:	f001 f95a 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000e9e:	f001 fc0b 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <cell12_Temp_01_Set+0x164>)
 8000eac:	4913      	ldr	r1, [pc, #76]	@ (8000efc <cell12_Temp_01_Set+0x168>)
 8000eae:	4810      	ldr	r0, [pc, #64]	@ (8000ef0 <cell12_Temp_01_Set+0x15c>)
 8000eb0:	f002 fbed 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <cell12_Temp_01_Set+0x154>)
 8000eba:	f001 fbfd 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ebe:	2064      	movs	r0, #100	@ 0x64
 8000ec0:	f001 f944 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <cell12_Temp_01_Set+0x150>)
 8000eca:	f001 fbf5 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	@ 0x64
 8000ed0:	f001 f93c 	bl	800214c <HAL_Delay>

}
 8000ed4:	bf00      	nop
 8000ed6:	3750      	adds	r7, #80	@ 0x50
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40490000 	.word	0x40490000
 8000ee0:	40900000 	.word	0x40900000
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	200000f8 	.word	0x200000f8
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	2000004c 	.word	0x2000004c
 8000efc:	20000004 	.word	0x20000004

08000f00 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b096      	sub	sp, #88	@ 0x58
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fad2 	bl	80004b4 <__aeabi_f2d>
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	4b51      	ldr	r3, [pc, #324]	@ (800105c <cell12_Temp_02_Set+0x15c>)
 8000f16:	f7ff fc4f 	bl	80007b8 <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b4e      	ldr	r3, [pc, #312]	@ (8001060 <cell12_Temp_02_Set+0x160>)
 8000f28:	f7ff fb1c 	bl	8000564 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fd28 	bl	8000988 <__aeabi_d2iz>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2240      	movs	r2, #64	@ 0x40
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fe27 	bl	8003b98 <memset>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000f56:	f7ff feb7 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fed0 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	483d      	ldr	r0, [pc, #244]	@ (8001064 <cell12_Temp_02_Set+0x164>)
 8000f70:	f001 fba2 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f74:	2064      	movs	r0, #100	@ 0x64
 8000f76:	f001 f8e9 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f80:	4839      	ldr	r0, [pc, #228]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000f82:	f001 fb99 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f001 f8e0 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f92:	4835      	ldr	r0, [pc, #212]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000f94:	f001 fb90 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4933      	ldr	r1, [pc, #204]	@ (800106c <cell12_Temp_02_Set+0x16c>)
 8000fa0:	4833      	ldr	r0, [pc, #204]	@ (8001070 <cell12_Temp_02_Set+0x170>)
 8000fa2:	f002 fa30 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fac:	482e      	ldr	r0, [pc, #184]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000fae:	f001 fb83 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	@ 0x64
 8000fb4:	f001 f8ca 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fbe:	482a      	ldr	r0, [pc, #168]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000fc0:	f001 fb7a 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2202      	movs	r2, #2
 8000fca:	492a      	ldr	r1, [pc, #168]	@ (8001074 <cell12_Temp_02_Set+0x174>)
 8000fcc:	4828      	ldr	r0, [pc, #160]	@ (8001070 <cell12_Temp_02_Set+0x170>)
 8000fce:	f002 fa1a 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd8:	4823      	ldr	r0, [pc, #140]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000fda:	f001 fb6d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	@ 0x64
 8000fe0:	f001 f8b4 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fea:	481f      	ldr	r0, [pc, #124]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8000fec:	f001 fb64 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8000ff0:	f107 0108 	add.w	r1, r7, #8
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	481d      	ldr	r0, [pc, #116]	@ (8001070 <cell12_Temp_02_Set+0x170>)
 8000ffc:	f002 fa03 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001006:	4818      	ldr	r0, [pc, #96]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8001008:	f001 fb56 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f001 f89d 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 800101a:	f001 fb4d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <cell12_Temp_02_Set+0x178>)
 8001028:	4914      	ldr	r1, [pc, #80]	@ (800107c <cell12_Temp_02_Set+0x17c>)
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <cell12_Temp_02_Set+0x170>)
 800102c:	f002 fb2f 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001036:	480c      	ldr	r0, [pc, #48]	@ (8001068 <cell12_Temp_02_Set+0x168>)
 8001038:	f001 fb3e 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 f885 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <cell12_Temp_02_Set+0x164>)
 8001048:	f001 fb36 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f001 f87d 	bl	800214c <HAL_Delay>

}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	@ 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40490000 	.word	0x40490000
 8001060:	40900000 	.word	0x40900000
 8001064:	40020800 	.word	0x40020800
 8001068:	40021400 	.word	0x40021400
 800106c:	20000048 	.word	0x20000048
 8001070:	200000f8 	.word	0x200000f8
 8001074:	20000000 	.word	0x20000000
 8001078:	2000004c 	.word	0x2000004c
 800107c:	20000004 	.word	0x20000004

08001080 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	@ 0x58
 8001084:	af02      	add	r7, sp, #8
 8001086:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fa12 	bl	80004b4 <__aeabi_f2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b4d      	ldr	r3, [pc, #308]	@ (80011cc <cell12_Temp_03_Set+0x14c>)
 8001096:	f7ff fb8f 	bl	80007b8 <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <cell12_Temp_03_Set+0x150>)
 80010a8:	f7ff fa5c 	bl	8000564 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fc68 	bl	8000988 <__aeabi_d2iz>
 80010b8:	4603      	mov	r3, r0
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2240      	movs	r2, #64	@ 0x40
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fd67 	bl	8003b98 <memset>
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80010d6:	f7ff fdf7 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 80010da:	f107 0208 	add.w	r2, r7, #8
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe10 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	4838      	ldr	r0, [pc, #224]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 80010f2:	f001 fae1 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	@ 0x64
 80010f8:	f001 f828 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2140      	movs	r1, #64	@ 0x40
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 8001102:	f001 fad9 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	@ 0x64
 8001108:	f001 f820 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2140      	movs	r1, #64	@ 0x40
 8001110:	4830      	ldr	r0, [pc, #192]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 8001112:	f001 fad1 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	2202      	movs	r2, #2
 800111c:	492e      	ldr	r1, [pc, #184]	@ (80011d8 <cell12_Temp_03_Set+0x158>)
 800111e:	482f      	ldr	r0, [pc, #188]	@ (80011dc <cell12_Temp_03_Set+0x15c>)
 8001120:	f002 f971 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	482a      	ldr	r0, [pc, #168]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 800112a:	f001 fac5 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	@ 0x64
 8001130:	f001 f80c 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	@ 0x40
 8001138:	4826      	ldr	r0, [pc, #152]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 800113a:	f001 fabd 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	2202      	movs	r2, #2
 8001144:	4926      	ldr	r1, [pc, #152]	@ (80011e0 <cell12_Temp_03_Set+0x160>)
 8001146:	4825      	ldr	r0, [pc, #148]	@ (80011dc <cell12_Temp_03_Set+0x15c>)
 8001148:	f002 f95d 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 8001152:	f001 fab1 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001156:	2064      	movs	r0, #100	@ 0x64
 8001158:	f000 fff8 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	@ 0x40
 8001160:	481c      	ldr	r0, [pc, #112]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 8001162:	f001 faa9 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2202      	movs	r2, #2
 8001170:	481a      	ldr	r0, [pc, #104]	@ (80011dc <cell12_Temp_03_Set+0x15c>)
 8001172:	f002 f948 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2140      	movs	r1, #64	@ 0x40
 800117a:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 800117c:	f001 fa9c 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001180:	2064      	movs	r0, #100	@ 0x64
 8001182:	f000 ffe3 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 800118c:	f001 fa94 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <cell12_Temp_03_Set+0x164>)
 800119a:	4913      	ldr	r1, [pc, #76]	@ (80011e8 <cell12_Temp_03_Set+0x168>)
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <cell12_Temp_03_Set+0x15c>)
 800119e:	f002 fa76 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2140      	movs	r1, #64	@ 0x40
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 80011a8:	f001 fa86 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f000 ffcd 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <cell12_Temp_03_Set+0x154>)
 80011ba:	f001 fa7d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011be:	2064      	movs	r0, #100	@ 0x64
 80011c0:	f000 ffc4 	bl	800214c <HAL_Delay>

}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40490000 	.word	0x40490000
 80011d0:	40900000 	.word	0x40900000
 80011d4:	40021400 	.word	0x40021400
 80011d8:	20000048 	.word	0x20000048
 80011dc:	200000f8 	.word	0x200000f8
 80011e0:	20000000 	.word	0x20000000
 80011e4:	2000004c 	.word	0x2000004c
 80011e8:	20000004 	.word	0x20000004

080011ec <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	@ 0x58
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff f95c 	bl	80004b4 <__aeabi_f2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b52      	ldr	r3, [pc, #328]	@ (800134c <cell11_Temp_01_Set+0x160>)
 8001202:	f7ff fad9 	bl	80007b8 <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b4f      	ldr	r3, [pc, #316]	@ (8001350 <cell11_Temp_01_Set+0x164>)
 8001214:	f7ff f9a6 	bl	8000564 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fbb2 	bl	8000988 <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2240      	movs	r2, #64	@ 0x40
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fcb1 	bl	8003b98 <memset>
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001242:	f7ff fd41 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd5a 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800125c:	483d      	ldr	r0, [pc, #244]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 800125e:	f001 fa2b 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001262:	2064      	movs	r0, #100	@ 0x64
 8001264:	f000 ff72 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800126e:	4839      	ldr	r0, [pc, #228]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 8001270:	f001 fa22 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001274:	2064      	movs	r0, #100	@ 0x64
 8001276:	f000 ff69 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001280:	4834      	ldr	r0, [pc, #208]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 8001282:	f001 fa19 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	2202      	movs	r2, #2
 800128c:	4932      	ldr	r1, [pc, #200]	@ (8001358 <cell11_Temp_01_Set+0x16c>)
 800128e:	4833      	ldr	r0, [pc, #204]	@ (800135c <cell11_Temp_01_Set+0x170>)
 8001290:	f002 f8b9 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129a:	482e      	ldr	r0, [pc, #184]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 800129c:	f001 fa0c 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	@ 0x64
 80012a2:	f000 ff53 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ac:	4829      	ldr	r0, [pc, #164]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 80012ae:	f001 fa03 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2202      	movs	r2, #2
 80012b8:	4929      	ldr	r1, [pc, #164]	@ (8001360 <cell11_Temp_01_Set+0x174>)
 80012ba:	4828      	ldr	r0, [pc, #160]	@ (800135c <cell11_Temp_01_Set+0x170>)
 80012bc:	f002 f8a3 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c6:	4823      	ldr	r0, [pc, #140]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 80012c8:	f001 f9f6 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f000 ff3d 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d8:	481e      	ldr	r0, [pc, #120]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 80012da:	f001 f9ed 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80012de:	f107 0108 	add.w	r1, r7, #8
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2202      	movs	r2, #2
 80012e8:	481c      	ldr	r0, [pc, #112]	@ (800135c <cell11_Temp_01_Set+0x170>)
 80012ea:	f002 f88c 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f4:	4817      	ldr	r0, [pc, #92]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 80012f6:	f001 f9df 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012fa:	2064      	movs	r0, #100	@ 0x64
 80012fc:	f000 ff26 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001306:	4813      	ldr	r0, [pc, #76]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 8001308:	f001 f9d6 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <cell11_Temp_01_Set+0x178>)
 8001316:	4914      	ldr	r1, [pc, #80]	@ (8001368 <cell11_Temp_01_Set+0x17c>)
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <cell11_Temp_01_Set+0x170>)
 800131a:	f002 f9b8 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001324:	480b      	ldr	r0, [pc, #44]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 8001326:	f001 f9c7 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800132a:	2064      	movs	r0, #100	@ 0x64
 800132c:	f000 ff0e 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <cell11_Temp_01_Set+0x168>)
 8001338:	f001 f9be 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	@ 0x64
 800133e:	f000 ff05 	bl	800214c <HAL_Delay>

}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	@ 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40490000 	.word	0x40490000
 8001350:	40900000 	.word	0x40900000
 8001354:	40021c00 	.word	0x40021c00
 8001358:	20000048 	.word	0x20000048
 800135c:	20000150 	.word	0x20000150
 8001360:	20000000 	.word	0x20000000
 8001364:	2000004c 	.word	0x2000004c
 8001368:	20000004 	.word	0x20000004

0800136c <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 800136c:	b580      	push	{r7, lr}
 800136e:	b096      	sub	sp, #88	@ 0x58
 8001370:	af02      	add	r7, sp, #8
 8001372:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f89c 	bl	80004b4 <__aeabi_f2d>
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b52      	ldr	r3, [pc, #328]	@ (80014cc <cell11_Temp_02_Set+0x160>)
 8001382:	f7ff fa19 	bl	80007b8 <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b4f      	ldr	r3, [pc, #316]	@ (80014d0 <cell11_Temp_02_Set+0x164>)
 8001394:	f7ff f8e6 	bl	8000564 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff faf2 	bl	8000988 <__aeabi_d2iz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2240      	movs	r2, #64	@ 0x40
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fbf1 	bl	8003b98 <memset>
 80013b6:	2301      	movs	r3, #1
 80013b8:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013c2:	f7ff fc81 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc9a 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013dc:	483d      	ldr	r0, [pc, #244]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 80013de:	f001 f96b 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	@ 0x64
 80013e4:	f000 feb2 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ee:	4839      	ldr	r0, [pc, #228]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 80013f0:	f001 f962 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013f4:	2064      	movs	r0, #100	@ 0x64
 80013f6:	f000 fea9 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001400:	4834      	ldr	r0, [pc, #208]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 8001402:	f001 f959 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2202      	movs	r2, #2
 800140c:	4932      	ldr	r1, [pc, #200]	@ (80014d8 <cell11_Temp_02_Set+0x16c>)
 800140e:	4833      	ldr	r0, [pc, #204]	@ (80014dc <cell11_Temp_02_Set+0x170>)
 8001410:	f001 fff9 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800141a:	482e      	ldr	r0, [pc, #184]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 800141c:	f001 f94c 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	@ 0x64
 8001422:	f000 fe93 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142c:	4829      	ldr	r0, [pc, #164]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 800142e:	f001 f943 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2202      	movs	r2, #2
 8001438:	4929      	ldr	r1, [pc, #164]	@ (80014e0 <cell11_Temp_02_Set+0x174>)
 800143a:	4828      	ldr	r0, [pc, #160]	@ (80014dc <cell11_Temp_02_Set+0x170>)
 800143c:	f001 ffe3 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001446:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 8001448:	f001 f936 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	@ 0x64
 800144e:	f000 fe7d 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001458:	481e      	ldr	r0, [pc, #120]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 800145a:	f001 f92d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2202      	movs	r2, #2
 8001468:	481c      	ldr	r0, [pc, #112]	@ (80014dc <cell11_Temp_02_Set+0x170>)
 800146a:	f001 ffcc 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 8001476:	f001 f91f 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800147a:	2064      	movs	r0, #100	@ 0x64
 800147c:	f000 fe66 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001486:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 8001488:	f001 f916 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2302      	movs	r3, #2
 8001494:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <cell11_Temp_02_Set+0x178>)
 8001496:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <cell11_Temp_02_Set+0x17c>)
 8001498:	4810      	ldr	r0, [pc, #64]	@ (80014dc <cell11_Temp_02_Set+0x170>)
 800149a:	f002 f8f8 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 80014a6:	f001 f907 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f000 fe4e 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b6:	4807      	ldr	r0, [pc, #28]	@ (80014d4 <cell11_Temp_02_Set+0x168>)
 80014b8:	f001 f8fe 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014bc:	2064      	movs	r0, #100	@ 0x64
 80014be:	f000 fe45 	bl	800214c <HAL_Delay>

}
 80014c2:	bf00      	nop
 80014c4:	3750      	adds	r7, #80	@ 0x50
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40490000 	.word	0x40490000
 80014d0:	40900000 	.word	0x40900000
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	20000048 	.word	0x20000048
 80014dc:	20000150 	.word	0x20000150
 80014e0:	20000000 	.word	0x20000000
 80014e4:	2000004c 	.word	0x2000004c
 80014e8:	20000004 	.word	0x20000004

080014ec <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	@ 0x58
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7fe ffdc 	bl	80004b4 <__aeabi_f2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b51      	ldr	r3, [pc, #324]	@ (8001648 <cell11_Temp_03_Set+0x15c>)
 8001502:	f7ff f959 	bl	80007b8 <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b4e      	ldr	r3, [pc, #312]	@ (800164c <cell11_Temp_03_Set+0x160>)
 8001514:	f7ff f826 	bl	8000564 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fa32 	bl	8000988 <__aeabi_d2iz>
 8001524:	4603      	mov	r3, r0
 8001526:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2240      	movs	r2, #64	@ 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fb31 	bl	8003b98 <memset>
 8001536:	2301      	movs	r3, #1
 8001538:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001542:	f7ff fbc1 	bl	8000cc8 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fbda 	bl	8000d0a <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2140      	movs	r1, #64	@ 0x40
 800155a:	483d      	ldr	r0, [pc, #244]	@ (8001650 <cell11_Temp_03_Set+0x164>)
 800155c:	f001 f8ac 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	@ 0x64
 8001562:	f000 fdf3 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156c:	4839      	ldr	r0, [pc, #228]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 800156e:	f001 f8a3 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	@ 0x64
 8001574:	f000 fdea 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800157e:	4835      	ldr	r0, [pc, #212]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 8001580:	f001 f89a 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	2202      	movs	r2, #2
 800158a:	4933      	ldr	r1, [pc, #204]	@ (8001658 <cell11_Temp_03_Set+0x16c>)
 800158c:	4833      	ldr	r0, [pc, #204]	@ (800165c <cell11_Temp_03_Set+0x170>)
 800158e:	f001 ff3a 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001598:	482e      	ldr	r0, [pc, #184]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 800159a:	f001 f88d 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f000 fdd4 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015aa:	482a      	ldr	r0, [pc, #168]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 80015ac:	f001 f884 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	2202      	movs	r2, #2
 80015b6:	492a      	ldr	r1, [pc, #168]	@ (8001660 <cell11_Temp_03_Set+0x174>)
 80015b8:	4828      	ldr	r0, [pc, #160]	@ (800165c <cell11_Temp_03_Set+0x170>)
 80015ba:	f001 ff24 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015c4:	4823      	ldr	r0, [pc, #140]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 80015c6:	f001 f877 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80015ca:	2064      	movs	r0, #100	@ 0x64
 80015cc:	f000 fdbe 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015d6:	481f      	ldr	r0, [pc, #124]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 80015d8:	f001 f86e 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80015dc:	f107 0108 	add.w	r1, r7, #8
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	2202      	movs	r2, #2
 80015e6:	481d      	ldr	r0, [pc, #116]	@ (800165c <cell11_Temp_03_Set+0x170>)
 80015e8:	f001 ff0d 	bl	8003406 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015f2:	4818      	ldr	r0, [pc, #96]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 80015f4:	f001 f860 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	@ 0x64
 80015fa:	f000 fda7 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001604:	4813      	ldr	r0, [pc, #76]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 8001606:	f001 f857 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <cell11_Temp_03_Set+0x178>)
 8001614:	4914      	ldr	r1, [pc, #80]	@ (8001668 <cell11_Temp_03_Set+0x17c>)
 8001616:	4811      	ldr	r0, [pc, #68]	@ (800165c <cell11_Temp_03_Set+0x170>)
 8001618:	f002 f839 	bl	800368e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <cell11_Temp_03_Set+0x168>)
 8001624:	f001 f848 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	f000 fd8f 	bl	800214c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2140      	movs	r1, #64	@ 0x40
 8001632:	4807      	ldr	r0, [pc, #28]	@ (8001650 <cell11_Temp_03_Set+0x164>)
 8001634:	f001 f840 	bl	80026b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001638:	2064      	movs	r0, #100	@ 0x64
 800163a:	f000 fd87 	bl	800214c <HAL_Delay>

}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	@ 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40490000 	.word	0x40490000
 800164c:	40900000 	.word	0x40900000
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40020400 	.word	0x40020400
 8001658:	20000048 	.word	0x20000048
 800165c:	20000150 	.word	0x20000150
 8001660:	20000000 	.word	0x20000000
 8001664:	2000004c 	.word	0x2000004c
 8001668:	20000004 	.word	0x20000004

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001670:	f000 fcfa 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001674:	f000 f892 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001678:	f000 f9dc 	bl	8001a34 <MX_GPIO_Init>
  MX_SPI1_Init();
 800167c:	f000 f96e 	bl	800195c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001680:	f000 f9a2 	bl	80019c8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001684:	f000 f8ea 	bl	800185c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001688:	f000 f928 	bl	80018dc <MX_I2C3_Init>

    /* USER CODE BEGIN 3 */

		////////////////////////////////////////////////

		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001692:	483c      	ldr	r0, [pc, #240]	@ (8001784 <main+0x118>)
 8001694:	f001 f810 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800169e:	483a      	ldr	r0, [pc, #232]	@ (8001788 <main+0x11c>)
 80016a0:	f001 f80a 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2118      	movs	r1, #24
 80016a8:	4838      	ldr	r0, [pc, #224]	@ (800178c <main+0x120>)
 80016aa:	f001 f805 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2103      	movs	r1, #3
 80016b2:	4837      	ldr	r0, [pc, #220]	@ (8001790 <main+0x124>)
 80016b4:	f001 f800 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	21f0      	movs	r1, #240	@ 0xf0
 80016bc:	4835      	ldr	r0, [pc, #212]	@ (8001794 <main+0x128>)
 80016be:	f000 fffb 	bl	80026b8 <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 80016c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016c6:	f000 fd41 	bl	800214c <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80016d0:	482c      	ldr	r0, [pc, #176]	@ (8001784 <main+0x118>)
 80016d2:	f000 fff1 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80016dc:	482a      	ldr	r0, [pc, #168]	@ (8001788 <main+0x11c>)
 80016de:	f000 ffeb 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2118      	movs	r1, #24
 80016e6:	4829      	ldr	r0, [pc, #164]	@ (800178c <main+0x120>)
 80016e8:	f000 ffe6 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2103      	movs	r1, #3
 80016f0:	4827      	ldr	r0, [pc, #156]	@ (8001790 <main+0x124>)
 80016f2:	f000 ffe1 	bl	80026b8 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	21f0      	movs	r1, #240	@ 0xf0
 80016fa:	4826      	ldr	r0, [pc, #152]	@ (8001794 <main+0x128>)
 80016fc:	f000 ffdc 	bl	80026b8 <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 8001700:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001704:	f000 fd22 	bl	800214c <HAL_Delay>

		  ////////////////////////////////////////////////////

		  cell12_Temp_01_Set(resistance[0]);
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <main+0x12c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f7ff fb3c 	bl	8000d94 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <main+0x12c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	f7ff fbe8 	bl	8000f00 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <main+0x12c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f7ff fc9e 	bl	8001080 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <main+0x12c>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f7ff fd4a 	bl	80011ec <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <main+0x12c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f7ff fe00 	bl	800136c <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[5]);
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <main+0x12c>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	f7ff feb6 	bl	80014ec <cell11_Temp_03_Set>
		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8001780:	bf00      	nop
 8001782:	e783      	b.n	800168c <main+0x20>
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40021800 	.word	0x40021800
 800178c:	40020400 	.word	0x40020400
 8001790:	40021000 	.word	0x40021000
 8001794:	40022000 	.word	0x40022000
 8001798:	20000008 	.word	0x20000008

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	@ 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2230      	movs	r2, #48	@ 0x30
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 f9f4 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <SystemClock_Config+0xb8>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <SystemClock_Config+0xb8>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <SystemClock_Config+0xb8>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <SystemClock_Config+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <SystemClock_Config+0xbc>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <SystemClock_Config+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2310      	movs	r3, #16
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f92b 	bl	8002a6c <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800181c:	f000 fa90 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fb8e 	bl	8002f5c <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001846:	f000 fa7b 	bl	8001d40 <Error_Handler>
  }
}
 800184a:	bf00      	nop
 800184c:	3750      	adds	r7, #80	@ 0x50
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <MX_I2C2_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001868:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <MX_I2C2_Init+0x7c>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_I2C2_Init+0x74>)
 800187a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <MX_I2C2_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_I2C2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <MX_I2C2_Init+0x74>)
 800189a:	f000 ff27 	bl	80026ec <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 fa4c 	bl	8001d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	4809      	ldr	r0, [pc, #36]	@ (80018d0 <MX_I2C2_Init+0x74>)
 80018ac:	f001 f862 	bl	8002974 <HAL_I2CEx_ConfigAnalogFilter>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80018b6:	f000 fa43 	bl	8001d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4804      	ldr	r0, [pc, #16]	@ (80018d0 <MX_I2C2_Init+0x74>)
 80018be:	f001 f895 	bl	80029ec <HAL_I2CEx_ConfigDigitalFilter>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 fa3a 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000050 	.word	0x20000050
 80018d4:	40005800 	.word	0x40005800
 80018d8:	000186a0 	.word	0x000186a0

080018dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_I2C3_Init+0x74>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <MX_I2C3_Init+0x78>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_I2C3_Init+0x74>)
 80018e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <MX_I2C3_Init+0x7c>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_I2C3_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_I2C3_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_I2C3_Init+0x74>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_I2C3_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <MX_I2C3_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <MX_I2C3_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <MX_I2C3_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_I2C3_Init+0x74>)
 800191a:	f000 fee7 	bl	80026ec <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 fa0c 	bl	8001d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001928:	2100      	movs	r1, #0
 800192a:	4809      	ldr	r0, [pc, #36]	@ (8001950 <MX_I2C3_Init+0x74>)
 800192c:	f001 f822 	bl	8002974 <HAL_I2CEx_ConfigAnalogFilter>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001936:	f000 fa03 	bl	8001d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800193a:	2100      	movs	r1, #0
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <MX_I2C3_Init+0x74>)
 800193e:	f001 f855 	bl	80029ec <HAL_I2CEx_ConfigDigitalFilter>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001948:	f000 f9fa 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000a4 	.word	0x200000a4
 8001954:	40005c00 	.word	0x40005c00
 8001958:	000186a0 	.word	0x000186a0

0800195c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <MX_SPI1_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001982:	2201      	movs	r2, #1
 8001984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001990:	2218      	movs	r2, #24
 8001992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019ae:	f001 fca1 	bl	80032f4 <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b8:	f000 f9c2 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200000f8 	.word	0x200000f8
 80019c4:	40013000 	.word	0x40013000

080019c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019ce:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <MX_SPI2_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_SPI2_Init+0x64>)
 80019fc:	2218      	movs	r2, #24
 80019fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <MX_SPI2_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_SPI2_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <MX_SPI2_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_SPI2_Init+0x64>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_SPI2_Init+0x64>)
 8001a1a:	f001 fc6b 	bl	80032f4 <HAL_SPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a24:	f000 f98c 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000150 	.word	0x20000150
 8001a30:	40003800 	.word	0x40003800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	@ 0x38
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	4bb3      	ldr	r3, [pc, #716]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4ab2      	ldr	r2, [pc, #712]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4bb0      	ldr	r3, [pc, #704]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	4bac      	ldr	r3, [pc, #688]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4aab      	ldr	r2, [pc, #684]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4ba9      	ldr	r3, [pc, #676]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4ba5      	ldr	r3, [pc, #660]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4aa4      	ldr	r2, [pc, #656]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4ba2      	ldr	r3, [pc, #648]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b9e      	ldr	r3, [pc, #632]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a9d      	ldr	r2, [pc, #628]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b9b      	ldr	r3, [pc, #620]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b97      	ldr	r3, [pc, #604]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a96      	ldr	r2, [pc, #600]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b94      	ldr	r3, [pc, #592]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b90      	ldr	r3, [pc, #576]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a8f      	ldr	r2, [pc, #572]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b89      	ldr	r3, [pc, #548]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a88      	ldr	r2, [pc, #544]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b86      	ldr	r3, [pc, #536]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b82      	ldr	r3, [pc, #520]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a81      	ldr	r2, [pc, #516]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d1c <MX_GPIO_Init+0x2e8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin|CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8001b30:	487b      	ldr	r0, [pc, #492]	@ (8001d20 <MX_GPIO_Init+0x2ec>)
 8001b32:	f000 fdc1 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2103      	movs	r1, #3
 8001b3a:	487a      	ldr	r0, [pc, #488]	@ (8001d24 <MX_GPIO_Init+0x2f0>)
 8001b3c:	f000 fdbc 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2101      	movs	r1, #1
 8001b44:	4878      	ldr	r0, [pc, #480]	@ (8001d28 <MX_GPIO_Init+0x2f4>)
 8001b46:	f000 fdb7 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b50:	4876      	ldr	r0, [pc, #472]	@ (8001d2c <MX_GPIO_Init+0x2f8>)
 8001b52:	f000 fdb1 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8001b5c:	4874      	ldr	r0, [pc, #464]	@ (8001d30 <MX_GPIO_Init+0x2fc>)
 8001b5e:	f000 fdab 	bl	80026b8 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001b68:	4871      	ldr	r0, [pc, #452]	@ (8001d30 <MX_GPIO_Init+0x2fc>)
 8001b6a:	f000 fda5 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b74:	486f      	ldr	r0, [pc, #444]	@ (8001d34 <MX_GPIO_Init+0x300>)
 8001b76:	f000 fd9f 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2118      	movs	r1, #24
 8001b7e:	486b      	ldr	r0, [pc, #428]	@ (8001d2c <MX_GPIO_Init+0x2f8>)
 8001b80:	f000 fd9a 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2103      	movs	r1, #3
 8001b88:	486b      	ldr	r0, [pc, #428]	@ (8001d38 <MX_GPIO_Init+0x304>)
 8001b8a:	f000 fd95 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	21f0      	movs	r1, #240	@ 0xf0
 8001b92:	486a      	ldr	r0, [pc, #424]	@ (8001d3c <MX_GPIO_Init+0x308>)
 8001b94:	f000 fd90 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8001b98:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	485b      	ldr	r0, [pc, #364]	@ (8001d20 <MX_GPIO_Init+0x2ec>)
 8001bb2:	f000 fbd5 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8001bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4854      	ldr	r0, [pc, #336]	@ (8001d20 <MX_GPIO_Init+0x2ec>)
 8001bd0:	f000 fbc6 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	484e      	ldr	r0, [pc, #312]	@ (8001d24 <MX_GPIO_Init+0x2f0>)
 8001bec:	f000 fbb8 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4847      	ldr	r0, [pc, #284]	@ (8001d24 <MX_GPIO_Init+0x2f0>)
 8001c08:	f000 fbaa 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c14:	2302      	movs	r3, #2
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4841      	ldr	r0, [pc, #260]	@ (8001d28 <MX_GPIO_Init+0x2f4>)
 8001c24:	f000 fb9c 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8001c28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	483a      	ldr	r0, [pc, #232]	@ (8001d2c <MX_GPIO_Init+0x2f8>)
 8001c42:	f000 fb8d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8001c46:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4834      	ldr	r0, [pc, #208]	@ (8001d30 <MX_GPIO_Init+0x2fc>)
 8001c60:	f000 fb7e 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8001c64:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	482c      	ldr	r0, [pc, #176]	@ (8001d30 <MX_GPIO_Init+0x2fc>)
 8001c7e:	f000 fb6f 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8001c82:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4825      	ldr	r0, [pc, #148]	@ (8001d30 <MX_GPIO_Init+0x2fc>)
 8001c9c:	f000 fb60 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = LED_09_Pin|LED_04_Pin|LED_08_Pin;
 8001ca0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	481e      	ldr	r0, [pc, #120]	@ (8001d34 <MX_GPIO_Init+0x300>)
 8001cba:	f000 fb51 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 8001cbe:	2318      	movs	r3, #24
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4815      	ldr	r0, [pc, #84]	@ (8001d2c <MX_GPIO_Init+0x2f8>)
 8001cd6:	f000 fb43 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	@ (8001d38 <MX_GPIO_Init+0x304>)
 8001cf2:	f000 fb35 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
 8001cf6:	23f0      	movs	r3, #240	@ 0xf0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480b      	ldr	r0, [pc, #44]	@ (8001d3c <MX_GPIO_Init+0x308>)
 8001d0e:	f000 fb27 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d12:	bf00      	nop
 8001d14:	3738      	adds	r7, #56	@ 0x38
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40021800 	.word	0x40021800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40022000 	.word	0x40022000

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <Error_Handler+0x8>

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a32      	ldr	r2, [pc, #200]	@ (8001e84 <HAL_I2C_MspInit+0xe8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dda:	2330      	movs	r3, #48	@ 0x30
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dea:	2304      	movs	r3, #4
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4825      	ldr	r0, [pc, #148]	@ (8001e8c <HAL_I2C_MspInit+0xf0>)
 8001df6:	f000 fab3 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e16:	e031      	b.n	8001e7c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e90 <HAL_I2C_MspInit+0xf4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e50:	2304      	movs	r3, #4
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <HAL_I2C_MspInit+0xf0>)
 8001e5c:	f000 fa80 	bl	8002360 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_I2C_MspInit+0xec>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3730      	adds	r7, #48	@ 0x30
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005800 	.word	0x40005800
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40021c00 	.word	0x40021c00
 8001e90:	40005c00 	.word	0x40005c00

08001e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	@ 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a32      	ldr	r2, [pc, #200]	@ (8001f7c <HAL_SPI_MspInit+0xe8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d12c      	bne.n	8001f10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001ec0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23e0      	movs	r3, #224	@ 0xe0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	481e      	ldr	r0, [pc, #120]	@ (8001f84 <HAL_SPI_MspInit+0xf0>)
 8001f0a:	f000 fa29 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f0e:	e030      	b.n	8001f72 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_SPI_MspInit+0xf4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12b      	bne.n	8001f72 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_SPI_MspInit+0xec>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f52:	230e      	movs	r3, #14
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f62:	2305      	movs	r3, #5
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <HAL_SPI_MspInit+0xf8>)
 8001f6e:	f000 f9f7 	bl	8002360 <HAL_GPIO_Init>
}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	@ 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013000 	.word	0x40013000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40003800 	.word	0x40003800
 8001f8c:	40022000 	.word	0x40022000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <NMI_Handler+0x4>

08001f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 f891 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002018:	f7ff ffea 	bl	8001ff0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	@ (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	@ (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002042:	f001 fdb1 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fb11 	bl	800166c <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800204c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002058:	08003c30 	.word	0x08003c30
  ldr r2, =_sbss
 800205c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002060:	200001ac 	.word	0x200001ac

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f931 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fe56 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f93b 	bl	8002346 <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f911 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000020 	.word	0x20000020
 8002104:	20000028 	.word	0x20000028
 8002108:	20000024 	.word	0x20000024

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000028 	.word	0x20000028
 8002130:	200001a8 	.word	0x200001a8

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	@ (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200001a8 	.word	0x200001a8

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000028 	.word	0x20000028

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	@ (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	@ (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	@ 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff5c 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffb0 	bl	80022b4 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e177      	b.n	800266c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8166 	bne.w	8002666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d005      	beq.n	80023b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b03      	cmp	r3, #3
 800241e:	d017      	beq.n	8002450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80c0 	beq.w	8002666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	4a65      	ldr	r2, [pc, #404]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f6:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002502:	4a61      	ldr	r2, [pc, #388]	@ (8002688 <HAL_GPIO_Init+0x328>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a58      	ldr	r2, [pc, #352]	@ (800268c <HAL_GPIO_Init+0x32c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d037      	beq.n	800259e <HAL_GPIO_Init+0x23e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a57      	ldr	r2, [pc, #348]	@ (8002690 <HAL_GPIO_Init+0x330>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_GPIO_Init+0x23a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a56      	ldr	r2, [pc, #344]	@ (8002694 <HAL_GPIO_Init+0x334>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02b      	beq.n	8002596 <HAL_GPIO_Init+0x236>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a55      	ldr	r2, [pc, #340]	@ (8002698 <HAL_GPIO_Init+0x338>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d025      	beq.n	8002592 <HAL_GPIO_Init+0x232>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a54      	ldr	r2, [pc, #336]	@ (800269c <HAL_GPIO_Init+0x33c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <HAL_GPIO_Init+0x22e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a53      	ldr	r2, [pc, #332]	@ (80026a0 <HAL_GPIO_Init+0x340>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x22a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_GPIO_Init+0x344>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x226>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a51      	ldr	r2, [pc, #324]	@ (80026a8 <HAL_GPIO_Init+0x348>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x222>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <HAL_GPIO_Init+0x34c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x21e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4f      	ldr	r2, [pc, #316]	@ (80026b0 <HAL_GPIO_Init+0x350>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x21a>
 8002576:	2309      	movs	r3, #9
 8002578:	e012      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800257a:	230a      	movs	r3, #10
 800257c:	e010      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800257e:	2308      	movs	r3, #8
 8002580:	e00e      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002582:	2307      	movs	r3, #7
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002586:	2306      	movs	r3, #6
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	@ (8002688 <HAL_GPIO_Init+0x328>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a34      	ldr	r2, [pc, #208]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a29      	ldr	r2, [pc, #164]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002612:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002636:	4a1f      	ldr	r2, [pc, #124]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f ae84 	bls.w	800237c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40022400 	.word	0x40022400
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fb42 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f000 fdbc 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	@ (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	@ (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	@ (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	@ (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	d129      	bne.n	80029de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2224      	movs	r2, #36	@ 0x24
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0210 	bic.w	r2, r2, #16
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
  }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d12a      	bne.n	8002a5c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2224      	movs	r2, #36	@ 0x24
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	89fa      	ldrh	r2, [r7, #14]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e267      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d075      	beq.n	8002b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b85      	ldr	r3, [pc, #532]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b82      	ldr	r3, [pc, #520]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05b      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e242      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x74>
 8002ad2:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b70      	ldr	r3, [pc, #448]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6f      	ldr	r2, [pc, #444]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b6d      	ldr	r3, [pc, #436]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6c      	ldr	r2, [pc, #432]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002b04:	4b69      	ldr	r3, [pc, #420]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fb06 	bl	8002134 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fb02 	bl	8002134 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e207      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xc0>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff faf2 	bl	8002134 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff faee 	bl	8002134 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1f3      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b51      	ldr	r3, [pc, #324]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0xe8>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1c7      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4937      	ldr	r1, [pc, #220]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7ff faa7 	bl	8002134 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7ff faa3 	bl	8002134 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1a8      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4925      	ldr	r1, [pc, #148]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7ff fa86 	bl	8002134 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fa82 	bl	8002134 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e187      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d036      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7ff fa66 	bl	8002134 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff fa62 	bl	8002134 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e167      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x200>
 8002c8a:	e01b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7ff fa4f 	bl	8002134 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	e00e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7ff fa4b 	bl	8002134 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d907      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e150      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ea      	bne.n	8002c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8097 	beq.w	8002e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b81      	ldr	r3, [pc, #516]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b77      	ldr	r3, [pc, #476]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b74      	ldr	r3, [pc, #464]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff fa0b 	bl	8002134 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7ff fa07 	bl	8002134 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e10c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2ea>
 8002d48:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a63      	ldr	r2, [pc, #396]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d54:	e01c      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x30c>
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	4a5e      	ldr	r2, [pc, #376]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d78:	4b58      	ldr	r3, [pc, #352]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a57      	ldr	r2, [pc, #348]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d84:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a54      	ldr	r2, [pc, #336]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d015      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7ff f9cc 	bl	8002134 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7ff f9c8 	bl	8002134 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0cb      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ee      	beq.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7ff f9b6 	bl	8002134 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7ff f9b2 	bl	8002134 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b5      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ee      	bne.n	8002dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	4a38      	ldr	r2, [pc, #224]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a1 	beq.w	8002f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d05c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d141      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f986 	bl	8002134 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7ff f982 	bl	8002134 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e087      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	491b      	ldr	r1, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff f95b 	bl	8002134 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7ff f957 	bl	8002134 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e05c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x416>
 8002ea0:	e054      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f944 	bl	8002134 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7ff f940 	bl	8002134 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e045      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
 8002ece:	e03d      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e038      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4ec>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cc      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d90c      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b65      	ldr	r3, [pc, #404]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d044      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e067      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4934      	ldr	r1, [pc, #208]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7ff f872 	bl	8002134 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7ff f86e 	bl	8002134 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e04f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20c      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe ffd2 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	08003c08 	.word	0x08003c08
 8003120:	20000020 	.word	0x20000020
 8003124:	20000024 	.word	0x20000024

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b090      	sub	sp, #64	@ 0x40
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003140:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d00d      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x40>
 800314c:	2b08      	cmp	r3, #8
 800314e:	f200 80a1 	bhi.w	8003294 <HAL_RCC_GetSysClockFreq+0x16c>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x34>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x3a>
 800315a:	e09b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003160:	e09b      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003164:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003166:	e098      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003172:	4b4d      	ldr	r3, [pc, #308]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	627a      	str	r2, [r7, #36]	@ 0x24
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003190:	2100      	movs	r1, #0
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003194:	fb03 f201 	mul.w	r2, r3, r1
 8003198:	2300      	movs	r3, #0
 800319a:	fb00 f303 	mul.w	r3, r0, r3
 800319e:	4413      	add	r3, r2
 80031a0:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a2:	fba0 1202 	umull	r1, r2, r0, r2
 80031a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a8:	460a      	mov	r2, r1
 80031aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ae:	4413      	add	r3, r2
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b4:	2200      	movs	r2, #0
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	61fa      	str	r2, [r7, #28]
 80031ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031c2:	f7fd fc09 	bl	80009d8 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4613      	mov	r3, r2
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ce:	e053      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d0:	4b35      	ldr	r3, [pc, #212]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	2200      	movs	r2, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	617a      	str	r2, [r7, #20]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031e2:	f04f 0b00 	mov.w	fp, #0
 80031e6:	4652      	mov	r2, sl
 80031e8:	465b      	mov	r3, fp
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	0159      	lsls	r1, r3, #5
 80031f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f8:	0150      	lsls	r0, r2, #5
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003202:	eb63 090b 	sbc.w	r9, r3, fp
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003212:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003216:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800321a:	ebb2 0408 	subs.w	r4, r2, r8
 800321e:	eb63 0509 	sbc.w	r5, r3, r9
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	00eb      	lsls	r3, r5, #3
 800322c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003230:	00e2      	lsls	r2, r4, #3
 8003232:	4614      	mov	r4, r2
 8003234:	461d      	mov	r5, r3
 8003236:	eb14 030a 	adds.w	r3, r4, sl
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	eb45 030b 	adc.w	r3, r5, fp
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324e:	4629      	mov	r1, r5
 8003250:	028b      	lsls	r3, r1, #10
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003258:	4621      	mov	r1, r4
 800325a:	028a      	lsls	r2, r1, #10
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	2200      	movs	r2, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	60fa      	str	r2, [r7, #12]
 8003268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800326c:	f7fd fbb4 	bl	80009d8 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	3301      	adds	r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800329c:	4618      	mov	r0, r3
 800329e:	3740      	adds	r7, #64	@ 0x40
 80032a0:	46bd      	mov	sp, r7
 80032a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	00f42400 	.word	0x00f42400
 80032b0:	017d7840 	.word	0x017d7840

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000020 	.word	0x20000020

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	@ (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08003c18 	.word	0x08003c18

080032f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07b      	b.n	80033fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003316:	d009      	beq.n	800332c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
 800331e:	e005      	b.n	800332c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fda4 	bl	8001e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	ea42 0103 	orr.w	r1, r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0104 	and.w	r1, r3, #4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0210 	and.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b088      	sub	sp, #32
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003416:	f7fe fe8d 	bl	8002134 <HAL_GetTick>
 800341a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	e12a      	b.n	8003686 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0x36>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e122      	b.n	8003686 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_SPI_Transmit+0x48>
 800344a:	2302      	movs	r3, #2
 800344c:	e11b      	b.n	8003686 <HAL_SPI_Transmit+0x280>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349c:	d10f      	bne.n	80034be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e4:	d152      	bne.n	800358c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0xee>
 80034ee:	8b7b      	ldrh	r3, [r7, #26]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d145      	bne.n	8003580 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003518:	e032      	b.n	8003580 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d112      	bne.n	800354e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	1c9a      	adds	r2, r3, #2
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800354c:	e018      	b.n	8003580 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354e:	f7fe fdf1 	bl	8002134 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d803      	bhi.n	8003566 <HAL_SPI_Transmit+0x160>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d102      	bne.n	800356c <HAL_SPI_Transmit+0x166>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e082      	b.n	8003686 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1c7      	bne.n	800351a <HAL_SPI_Transmit+0x114>
 800358a:	e053      	b.n	8003634 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_SPI_Transmit+0x194>
 8003594:	8b7b      	ldrh	r3, [r7, #26]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d147      	bne.n	800362a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035c0:	e033      	b.n	800362a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d113      	bne.n	80035f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035f6:	e018      	b.n	800362a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f8:	f7fe fd9c 	bl	8002134 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d803      	bhi.n	8003610 <HAL_SPI_Transmit+0x20a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Transmit+0x210>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e02d      	b.n	8003686 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1c6      	bne.n	80035c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	6839      	ldr	r1, [r7, #0]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa59 	bl	8003af0 <SPI_EndRxTxTransaction>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003684:	2300      	movs	r3, #0
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b08a      	sub	sp, #40	@ 0x28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800369c:	2301      	movs	r3, #1
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a0:	f7fe fd48 	bl	8002134 <HAL_GetTick>
 80036a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b8:	7ffb      	ldrb	r3, [r7, #31]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d00c      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x4a>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x46>
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d001      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	e17f      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x5c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x5c>
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e174      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x6e>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e16d      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b04      	cmp	r3, #4
 800370e:	d003      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2205      	movs	r2, #5
 8003714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d007      	beq.n	800376c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003774:	d17e      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_TransmitReceive+0xf6>
 800377e:	8afb      	ldrh	r3, [r7, #22]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d16c      	bne.n	800385e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a8:	e059      	b.n	800385e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11b      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x162>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x162>
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d113      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x1a4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d014      	beq.n	8003832 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	b292      	uxth	r2, r2
 8003814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800382e:	2301      	movs	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003832:	f7fe fc7f 	bl	8002134 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383e:	429a      	cmp	r2, r3
 8003840:	d80d      	bhi.n	800385e <HAL_SPI_TransmitReceive+0x1d0>
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d009      	beq.n	800385e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0bc      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1a0      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x11c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19b      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x11c>
 8003872:	e082      	b.n	800397a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_SPI_TransmitReceive+0x1f4>
 800387c:	8afb      	ldrh	r3, [r7, #22]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d171      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a8:	e05d      	b.n	8003966 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d11c      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x264>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x264>
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d114      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d119      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x2a6>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d014      	beq.n	8003934 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003934:	f7fe fbfe 	bl	8002134 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003940:	429a      	cmp	r2, r3
 8003942:	d803      	bhi.n	800394c <HAL_SPI_TransmitReceive+0x2be>
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d102      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x2c4>
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e038      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d19c      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x21c>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d197      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f8b6 	bl	8003af0 <SPI_EndRxTxTransaction>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01d      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	@ 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f0:	f7fe fba0 	bl	8002134 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a00:	f7fe fb98 	bl	8002134 <HAL_GetTick>
 8003a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a06:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a16:	e054      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d050      	beq.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a20:	f7fe fb88 	bl	8002134 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d902      	bls.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13d      	bne.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4e:	d111      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a58:	d004      	beq.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d107      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d10f      	bne.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e017      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d19b      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000020 	.word	0x20000020

08003af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2201      	movs	r2, #1
 8003b04:	2102      	movs	r1, #2
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff ff6a 	bl	80039e0 <SPI_WaitFlagStateUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e032      	b.n	8003b88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <SPI_EndRxTxTransaction+0xa0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <SPI_EndRxTxTransaction+0xa4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0d5b      	lsrs	r3, r3, #21
 8003b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b40:	d112      	bne.n	8003b68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ff47 	bl	80039e0 <SPI_WaitFlagStateUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d016      	beq.n	8003b86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e00f      	b.n	8003b88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d0f2      	beq.n	8003b68 <SPI_EndRxTxTransaction+0x78>
 8003b82:	e000      	b.n	8003b86 <SPI_EndRxTxTransaction+0x96>
        break;
 8003b84:	bf00      	nop
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000020 	.word	0x20000020
 8003b94:	165e9f81 	.word	0x165e9f81

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4d0d      	ldr	r5, [pc, #52]	@ (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	@ (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	@ (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 f818 	bl	8003bf0 <_init>
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c28 	.word	0x08003c28
 8003be4:	08003c28 	.word	0x08003c28
 8003be8:	08003c28 	.word	0x08003c28
 8003bec:	08003c2c 	.word	0x08003c2c

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
