
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009288  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046c4  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dafc  0800dafc  0000f82c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dafc  0800dafc  0000eafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db04  0800db04  0000f82c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db04  0800db04  0000eb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db08  0800db08  0000eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000082c  20000000  0800db0c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f82c  2**0
                  CONTENTS
 10 .bss          00000c04  2000082c  2000082c  0000f82c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001430  20001430  0000f82c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f82c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056068  00000000  00000000  0000f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005502  00000000  00000000  000658c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003d70  00000000  00000000  0006adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002e6b  00000000  00000000  0006eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027955  00000000  00000000  000719a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b53b  00000000  00000000  000992f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b2d  00000000  00000000  000c4833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bc360  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011004  00000000  00000000  001bc3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001cd3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000082c 	.word	0x2000082c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009420 	.word	0x08009420

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000830 	.word	0x20000830
 80001ec:	08009420 	.word	0x08009420

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af04      	add	r7, sp, #16
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR == PIN_INPUT) ? ALERT_PIN_CELL_01 : 0;
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR       == PIN_INPUT) ? CELL_01_LED_01       : 0;
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? (1U << 0) : 0;
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? (1U << 1) : 0;
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? (1U << 2) : 0;
 80005c8:	7b7b      	ldrb	r3, [r7, #13]
 80005ca:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? (1U << 3) : 0;
 80005cc:	7b7b      	ldrb	r3, [r7, #13]
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? (1U << 4) : 0;
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
 80005d8:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? (1U << 5) : 0;
 80005da:	7b7b      	ldrb	r3, [r7, #13]
 80005dc:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? (1U << 6) : 0;
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? (1U << 7) : 0;
 80005e2:	7b7b      	ldrb	r3, [r7, #13]
 80005e4:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	b299      	uxth	r1, r3
 80005ee:	2364      	movs	r3, #100	@ 0x64
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	f107 030e 	add.w	r3, r7, #14
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	2206      	movs	r2, #6
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f005 fa73 	bl	8005aec <HAL_I2C_Mem_Write>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <Expander_InitPinDirections+0x94>
    {
        return status;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	e012      	b.n	800063a <Expander_InitPinDirections+0xba>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	b29b      	uxth	r3, r3
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b299      	uxth	r1, r3
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	9302      	str	r3, [sp, #8]
 8000620:	2301      	movs	r3, #1
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	f107 030d 	add.w	r3, r7, #13
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	2207      	movs	r2, #7
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f005 fa5c 	bl	8005aec <HAL_I2C_Mem_Write>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <Expander_InitAllDevices+0x50>)
 800064e:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8000650:	2304      	movs	r3, #4
 8000652:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e012      	b.n	8000680 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 800065a:	f107 0208 	add.w	r2, r7, #8
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff8a 	bl	8000580 <Expander_InitPinDirections>
 800066c:	4603      	mov	r3, r0
 800066e:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <Expander_InitAllDevices+0x36>
        {
            return status;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	e007      	b.n	800068a <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3e8      	bcc.n	800065a <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	24232221 	.word	0x24232221

08000698 <BCD2DEC>:
static uint8_t DEC2BCD(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

// Convert BCD to decimal
static int BCD2DEC(uint8_t val) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	091b      	lsrs	r3, r3, #4
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	461a      	mov	r2, r3
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	4413      	add	r3, r2
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <RTC_Init>:

void RTC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	2200      	movs	r2, #0
 80006e0:	21df      	movs	r1, #223	@ 0xdf
 80006e2:	4848      	ldr	r0, [pc, #288]	@ (8000804 <RTC_Init+0x13c>)
 80006e4:	f005 fafc 	bl	8005ce0 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	2200      	movs	r2, #0
 8000704:	21df      	movs	r1, #223	@ 0xdf
 8000706:	483f      	ldr	r0, [pc, #252]	@ (8000804 <RTC_Init+0x13c>)
 8000708:	f005 f9f0 	bl	8005aec <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 800070c:	200a      	movs	r0, #10
 800070e:	f004 f9e7 	bl	8004ae0 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	2301      	movs	r3, #1
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	2203      	movs	r2, #3
 8000724:	21df      	movs	r1, #223	@ 0xdf
 8000726:	4837      	ldr	r0, [pc, #220]	@ (8000804 <RTC_Init+0x13c>)
 8000728:	f005 fada 	bl	8005ce0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	b2db      	uxtb	r3, r3
 8000734:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	2203      	movs	r2, #3
 8000748:	21df      	movs	r1, #223	@ 0xdf
 800074a:	482e      	ldr	r0, [pc, #184]	@ (8000804 <RTC_Init+0x13c>)
 800074c:	f005 f9ce 	bl	8005aec <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	2200      	movs	r2, #0
 8000762:	21df      	movs	r1, #223	@ 0xdf
 8000764:	4827      	ldr	r0, [pc, #156]	@ (8000804 <RTC_Init+0x13c>)
 8000766:	f005 fabb 	bl	8005ce0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	2301      	movs	r3, #1
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	2200      	movs	r2, #0
 8000786:	21df      	movs	r1, #223	@ 0xdf
 8000788:	481e      	ldr	r0, [pc, #120]	@ (8000804 <RTC_Init+0x13c>)
 800078a:	f005 f9af 	bl	8005aec <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	2301      	movs	r3, #1
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	2203      	movs	r2, #3
 80007a0:	21df      	movs	r1, #223	@ 0xdf
 80007a2:	4818      	ldr	r0, [pc, #96]	@ (8000804 <RTC_Init+0x13c>)
 80007a4:	f005 fa9c 	bl	8005ce0 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 0320 	and.w	r3, r3, #32
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0ed      	beq.n	800078e <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	2203      	movs	r2, #3
 80007c4:	21df      	movs	r1, #223	@ 0xdf
 80007c6:	480f      	ldr	r0, [pc, #60]	@ (8000804 <RTC_Init+0x13c>)
 80007c8:	f005 fa8a 	bl	8005ce0 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d011      	beq.n	80007fa <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f023 0310 	bic.w	r3, r3, #16
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	2203      	movs	r2, #3
 80007f2:	21df      	movs	r1, #223	@ 0xdf
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <RTC_Init+0x13c>)
 80007f6:	f005 f979 	bl	8005aec <HAL_I2C_Mem_Write>
    }
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000d34 	.word	0x20000d34

08000808 <RTC_ReadTime>:

void RTC_ReadTime(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af04      	add	r7, sp, #16
    uint8_t data[7];

    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, data, 7, HAL_MAX_DELAY);
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	2307      	movs	r3, #7
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	463b      	mov	r3, r7
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	2200      	movs	r2, #0
 8000820:	21df      	movs	r1, #223	@ 0xdf
 8000822:	4828      	ldr	r0, [pc, #160]	@ (80008c4 <RTC_ReadTime+0xbc>)
 8000824:	f005 fa5c 	bl	8005ce0 <HAL_I2C_Mem_Read>

    time.second = BCD2DEC(data[0] & 0x7F);
 8000828:	783b      	ldrb	r3, [r7, #0]
 800082a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff31 	bl	8000698 <BCD2DEC>
 8000836:	4603      	mov	r3, r0
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <RTC_ReadTime+0xc0>)
 800083c:	701a      	strb	r2, [r3, #0]
    time.minute = BCD2DEC(data[1] & 0x7F);
 800083e:	787b      	ldrb	r3, [r7, #1]
 8000840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff26 	bl	8000698 <BCD2DEC>
 800084c:	4603      	mov	r3, r0
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <RTC_ReadTime+0xc0>)
 8000852:	705a      	strb	r2, [r3, #1]
    time.hour = BCD2DEC(data[2] & 0x3F);
 8000854:	78bb      	ldrb	r3, [r7, #2]
 8000856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff1b 	bl	8000698 <BCD2DEC>
 8000862:	4603      	mov	r3, r0
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <RTC_ReadTime+0xc0>)
 8000868:	709a      	strb	r2, [r3, #2]
    time.dayofweek = BCD2DEC(data[3] & 0x07);
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff10 	bl	8000698 <BCD2DEC>
 8000878:	4603      	mov	r3, r0
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <RTC_ReadTime+0xc0>)
 800087e:	70da      	strb	r2, [r3, #3]
    time.day = BCD2DEC(data[4] & 0x3F);
 8000880:	793b      	ldrb	r3, [r7, #4]
 8000882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff05 	bl	8000698 <BCD2DEC>
 800088e:	4603      	mov	r3, r0
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <RTC_ReadTime+0xc0>)
 8000894:	711a      	strb	r2, [r3, #4]
    time.month = BCD2DEC(data[5] & 0x1F);
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	f003 031f 	and.w	r3, r3, #31
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fefa 	bl	8000698 <BCD2DEC>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <RTC_ReadTime+0xc0>)
 80008aa:	715a      	strb	r2, [r3, #5]
    time.year = BCD2DEC(data[6]);
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fef2 	bl	8000698 <BCD2DEC>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <RTC_ReadTime+0xc0>)
 80008ba:	719a      	strb	r2, [r3, #6]
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000d34 	.word	0x20000d34
 80008c8:	20000848 	.word	0x20000848

080008cc <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	817b      	strh	r3, [r7, #10]
 80008de:	460b      	mov	r3, r1
 80008e0:	813b      	strh	r3, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80008ec:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80008fc:	897a      	ldrh	r2, [r7, #10]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4413      	add	r3, r2
 8000902:	b298      	uxth	r0, r3
 8000904:	893b      	ldrh	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	b29b      	uxth	r3, r3
 800090a:	893a      	ldrh	r2, [r7, #8]
 800090c:	8979      	ldrh	r1, [r7, #10]
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	4603      	mov	r3, r0
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f001 f883 	bl	8001a1e <u8g2_IsIntersection>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d040      	beq.n	80009a0 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000922:	e035      	b.n	8000990 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4013      	ands	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00c      	beq.n	800094c <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	7dba      	ldrb	r2, [r7, #22]
 8000936:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800093a:	893a      	ldrh	r2, [r7, #8]
 800093c:	8979      	ldrh	r1, [r7, #10]
 800093e:	2300      	movs	r3, #0
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 ffac 	bl	80018a2 <u8g2_DrawHVLine>
 800094a:	e010      	b.n	800096e <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10b      	bne.n	800096e <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	7d7a      	ldrb	r2, [r7, #21]
 800095a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800095e:	893a      	ldrh	r2, [r7, #8]
 8000960:	8979      	ldrh	r1, [r7, #10]
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2301      	movs	r3, #1
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 ff9a 	bl	80018a2 <u8g2_DrawHVLine>
    }
    x++;
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	3301      	adds	r3, #1
 8000972:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800097a:	7dfb      	ldrb	r3, [r7, #23]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	75fb      	strb	r3, [r7, #23]
      b++;
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	3301      	adds	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
    }
    len--;
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	3b01      	subs	r3, #1
 800098e:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1c6      	bne.n	8000924 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	7dba      	ldrb	r2, [r7, #22]
 800099a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 800099e:	e000      	b.n	80009a2 <u8g2_DrawHXBM+0xd6>
    return;
 80009a0:	bf00      	nop
}
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4603      	mov	r3, r0
 80009b8:	817b      	strh	r3, [r7, #10]
 80009ba:	460b      	mov	r3, r1
 80009bc:	813b      	strh	r3, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80009c6:	8afb      	ldrh	r3, [r7, #22]
 80009c8:	3307      	adds	r3, #7
 80009ca:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80009cc:	8afb      	ldrh	r3, [r7, #22]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80009d2:	897a      	ldrh	r2, [r7, #10]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	4413      	add	r3, r2
 80009d8:	b298      	uxth	r0, r3
 80009da:	893a      	ldrh	r2, [r7, #8]
 80009dc:	8c3b      	ldrh	r3, [r7, #32]
 80009de:	4413      	add	r3, r2
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	893a      	ldrh	r2, [r7, #8]
 80009e4:	8979      	ldrh	r1, [r7, #10]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4603      	mov	r3, r0
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f001 f817 	bl	8001a1e <u8g2_IsIntersection>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d017      	beq.n	8000a26 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80009f6:	e012      	b.n	8000a1e <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80009f8:	88f8      	ldrh	r0, [r7, #6]
 80009fa:	893a      	ldrh	r2, [r7, #8]
 80009fc:	8979      	ldrh	r1, [r7, #10]
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4603      	mov	r3, r0
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff ff61 	bl	80008cc <u8g2_DrawHXBM>
    bitmap += blen;
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0e:	4413      	add	r3, r2
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8000a12:	893b      	ldrh	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	813b      	strh	r3, [r7, #8]
    h--;
 8000a18:	8c3b      	ldrh	r3, [r7, #32]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000a1e:	8c3b      	ldrh	r3, [r7, #32]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1e9      	bne.n	80009f8 <u8g2_DrawXBM+0x50>
 8000a24:	e000      	b.n	8000a28 <u8g2_DrawXBM+0x80>
    return;
 8000a26:	bf00      	nop
  }
}
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7c1b      	ldrb	r3, [r3, #16]
 8000a3c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f008 f90d 	bl	8008c7c <memset>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af02      	add	r7, sp, #8
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	70fb      	strb	r3, [r7, #3]
 8000a76:	4613      	mov	r3, r2
 8000a78:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7c1b      	ldrb	r3, [r3, #16]
 8000a80:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a8a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	89ba      	ldrh	r2, [r7, #12]
 8000a92:	fb12 f303 	smulbb	r3, r2, r3
 8000a96:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000a98:	89bb      	ldrh	r3, [r7, #12]
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000a9e:	89bb      	ldrh	r3, [r7, #12]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000aa6:	7bf9      	ldrb	r1, [r7, #15]
 8000aa8:	78ba      	ldrb	r2, [r7, #2]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f001 fc99 	bl	80023ea <u8x8_DrawTile>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000ad2:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000ada:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	7c5b      	ldrb	r3, [r3, #17]
 8000ae2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffbd 	bl	8000a6a <u8g2_send_tile_row>
    src_row++;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	3301      	adds	r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	3301      	adds	r3, #1
 8000afa:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	7b7b      	ldrb	r3, [r7, #13]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d203      	bcs.n	8000b0c <u8g2_send_buffer+0x4c>
 8000b04:	7bba      	ldrb	r2, [r7, #14]
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3eb      	bcc.n	8000ae4 <u8g2_send_buffer+0x24>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffcf 	bl	8000ac0 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f001 fcc3 	bl	80024ae <u8x8_RefreshDisplay>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	78fa      	ldrb	r2, [r7, #3]
 8000b40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff5b 	bl	8000a2e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffd8 	bl	8000b30 <u8g2_SetBufferCurrTileRow>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff95 	bl	8000ac0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000b9c:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7c5b      	ldrb	r3, [r3, #17]
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d304      	bcc.n	8000bc0 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f001 fc79 	bl	80024ae <u8x8_RefreshDisplay>
    return 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e00d      	b.n	8000bdc <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff2f 	bl	8000a2e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ffab 	bl	8000b30 <u8g2_SetBufferCurrTileRow>
  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffb7 	bl	8000b60 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffc8 	bl	8000b88 <u8g2_NextPage>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8000bfe:	2100      	movs	r1, #0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff95 	bl	8000b30 <u8g2_SetBufferCurrTileRow>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	701a      	strb	r2, [r3, #0]
  return buf;
 8000c1e:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000850 	.word	0x20000850

08000c30 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <u8g2_Setup_st7565_64128n_f+0x44>)
 8000c46:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <u8g2_Setup_st7565_64128n_f+0x48>)
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f001 fc91 	bl	8002570 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000c4e:	f107 0313 	add.w	r3, r7, #19
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffdc 	bl	8000c10 <u8g2_m_16_8_f>
 8000c58:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000c5a:	7cfa      	ldrb	r2, [r7, #19]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <u8g2_Setup_st7565_64128n_f+0x4c>)
 8000c62:	6979      	ldr	r1, [r7, #20]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 ffc4 	bl	8001bf2 <u8g2_SetupBuffer>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08002105 	.word	0x08002105
 8000c78:	080022a5 	.word	0x080022a5
 8000c7c:	08001a75 	.word	0x08001a75

08000c80 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	81fb      	strh	r3, [r7, #14]
    font++;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	89fb      	ldrh	r3, [r7, #14]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6838      	ldr	r0, [r7, #0]
 8000cf2:	f7ff ffc5 	bl	8000c80 <u8g2_font_get_byte>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f7ff ffbd 	bl	8000c80 <u8g2_font_get_byte>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000d0e:	2102      	movs	r1, #2
 8000d10:	6838      	ldr	r0, [r7, #0]
 8000d12:	f7ff ffb5 	bl	8000c80 <u8g2_font_get_byte>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000d1e:	2103      	movs	r1, #3
 8000d20:	6838      	ldr	r0, [r7, #0]
 8000d22:	f7ff ffad 	bl	8000c80 <u8g2_font_get_byte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000d2e:	2104      	movs	r1, #4
 8000d30:	6838      	ldr	r0, [r7, #0]
 8000d32:	f7ff ffa5 	bl	8000c80 <u8g2_font_get_byte>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000d3e:	2105      	movs	r1, #5
 8000d40:	6838      	ldr	r0, [r7, #0]
 8000d42:	f7ff ff9d 	bl	8000c80 <u8g2_font_get_byte>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000d4e:	2106      	movs	r1, #6
 8000d50:	6838      	ldr	r0, [r7, #0]
 8000d52:	f7ff ff95 	bl	8000c80 <u8g2_font_get_byte>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000d5e:	2107      	movs	r1, #7
 8000d60:	6838      	ldr	r0, [r7, #0]
 8000d62:	f7ff ff8d 	bl	8000c80 <u8g2_font_get_byte>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000d6e:	2108      	movs	r1, #8
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f7ff ff85 	bl	8000c80 <u8g2_font_get_byte>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000d7e:	2109      	movs	r1, #9
 8000d80:	6838      	ldr	r0, [r7, #0]
 8000d82:	f7ff ff7d 	bl	8000c80 <u8g2_font_get_byte>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000d8e:	210a      	movs	r1, #10
 8000d90:	6838      	ldr	r0, [r7, #0]
 8000d92:	f7ff ff75 	bl	8000c80 <u8g2_font_get_byte>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000d9e:	210b      	movs	r1, #11
 8000da0:	6838      	ldr	r0, [r7, #0]
 8000da2:	f7ff ff6d 	bl	8000c80 <u8g2_font_get_byte>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000dae:	210c      	movs	r1, #12
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f7ff ff65 	bl	8000c80 <u8g2_font_get_byte>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b25a      	sxtb	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000dbe:	210d      	movs	r1, #13
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff ff5d 	bl	8000c80 <u8g2_font_get_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000dce:	210e      	movs	r1, #14
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f7ff ff55 	bl	8000c80 <u8g2_font_get_byte>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000dde:	210f      	movs	r1, #15
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f7ff ff4d 	bl	8000c80 <u8g2_font_get_byte>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b25a      	sxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000dee:	2110      	movs	r1, #16
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	f7ff ff45 	bl	8000c80 <u8g2_font_get_byte>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b25a      	sxtb	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000dfe:	2111      	movs	r1, #17
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f7ff ff4f 	bl	8000ca4 <u8g2_font_get_word>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000e0e:	2113      	movs	r1, #19
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f7ff ff47 	bl	8000ca4 <u8g2_font_get_word>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000e1e:	2115      	movs	r1, #21
 8000e20:	6838      	ldr	r0, [r7, #0]
 8000e22:	f7ff ff3f 	bl	8000ca4 <u8g2_font_get_word>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	82da      	strh	r2, [r3, #22]
#endif
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
 8000e46:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	fa42 f303 	asr.w	r3, r2, r3
 8000e58:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000e5a:	7b7b      	ldrb	r3, [r7, #13]
 8000e5c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000e5e:	7bba      	ldrb	r2, [r7, #14]
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	4413      	add	r3, r2
 8000e64:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	d91a      	bls.n	8000ea2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000e70:	7b3a      	ldrb	r2, [r7, #12]
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	7b3b      	ldrb	r3, [r7, #12]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7bba      	ldrb	r2, [r7, #14]
 8000ebc:	731a      	strb	r2, [r3, #12]
  return val;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ffaa 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000ef0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
  return v;
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000f12:	b490      	push	{r4, r7}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4604      	mov	r4, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4623      	mov	r3, r4
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4603      	mov	r3, r0
 8000f26:	717b      	strb	r3, [r7, #5]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	713b      	strb	r3, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d014      	beq.n	8000f60 <u8g2_add_vector_y+0x4e>
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	dc19      	bgt.n	8000f6e <u8g2_add_vector_y+0x5c>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <u8g2_add_vector_y+0x32>
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d007      	beq.n	8000f52 <u8g2_add_vector_y+0x40>
 8000f42:	e014      	b.n	8000f6e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000f44:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	80fb      	strh	r3, [r7, #6]
      break;
 8000f50:	e014      	b.n	8000f7c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000f52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
      break;
 8000f5e:	e00d      	b.n	8000f7c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000f60:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	80fb      	strh	r3, [r7, #6]
      break;
 8000f6c:	e006      	b.n	8000f7c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000f6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	80fb      	strh	r3, [r7, #6]
      break;      
 8000f7a:	bf00      	nop
  }
  return dy;
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc90      	pop	{r4, r7}
 8000f86:	4770      	bx	lr

08000f88 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	717b      	strb	r3, [r7, #5]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	713b      	strb	r3, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d014      	beq.n	8000fd6 <u8g2_add_vector_x+0x4e>
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	dc19      	bgt.n	8000fe4 <u8g2_add_vector_x+0x5c>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <u8g2_add_vector_x+0x32>
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d007      	beq.n	8000fc8 <u8g2_add_vector_x+0x40>
 8000fb8:	e014      	b.n	8000fe4 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000fba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
      break;
 8000fc6:	e014      	b.n	8000ff2 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000fc8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	80fb      	strh	r3, [r7, #6]
      break;
 8000fd4:	e00d      	b.n	8000ff2 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000fd6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	88fa      	ldrh	r2, [r7, #6]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	80fb      	strh	r3, [r7, #6]
      break;
 8000fe2:	e006      	b.n	8000ff2 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000fe4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4413      	add	r3, r2
 8000fee:	80fb      	strh	r3, [r7, #6]
      break;      
 8000ff0:	bf00      	nop
  }
  return dx;
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc90      	pop	{r4, r7}
 8000ffc:	4770      	bx	lr

08000ffe <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b088      	sub	sp, #32
 8001002:	af02      	add	r7, sp, #8
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
 800100a:	4613      	mov	r3, r2
 800100c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3360      	adds	r3, #96	@ 0x60
 8001012:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800101e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001026:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800102e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	7d7b      	ldrb	r3, [r7, #21]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800103c:	7dfa      	ldrb	r2, [r7, #23]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	429a      	cmp	r2, r3
 8001042:	d201      	bcs.n	8001048 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	889b      	ldrh	r3, [r3, #4]
 800104c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	88db      	ldrh	r3, [r3, #6]
 8001052:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001054:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001058:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	7c1b      	ldrb	r3, [r3, #16]
 8001060:	89b8      	ldrh	r0, [r7, #12]
 8001062:	f7ff ff91 	bl	8000f88 <u8g2_add_vector_x>
 8001066:	4603      	mov	r3, r0
 8001068:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800106a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800106e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	7c1b      	ldrb	r3, [r3, #16]
 8001076:	8978      	ldrh	r0, [r7, #10]
 8001078:	f7ff ff4b 	bl	8000f12 <u8g2_add_vector_y>
 800107c:	4603      	mov	r3, r0
 800107e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d010      	beq.n	80010a8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	7b9a      	ldrb	r2, [r3, #14]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001090:	7dbb      	ldrb	r3, [r7, #22]
 8001092:	b298      	uxth	r0, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	7c1b      	ldrb	r3, [r3, #16]
 8001098:	897a      	ldrh	r2, [r7, #10]
 800109a:	89b9      	ldrh	r1, [r7, #12]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4603      	mov	r3, r0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbfe 	bl	80018a2 <u8g2_DrawHVLine>
 80010a6:	e013      	b.n	80010d0 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	7b5b      	ldrb	r3, [r3, #13]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10f      	bne.n	80010d0 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	7bda      	ldrb	r2, [r3, #15]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
 80010bc:	b298      	uxth	r0, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	7c1b      	ldrb	r3, [r3, #16]
 80010c2:	897a      	ldrh	r2, [r7, #10]
 80010c4:	89b9      	ldrh	r1, [r7, #12]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4603      	mov	r3, r0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 fbe9 	bl	80018a2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80010d0:	7dfa      	ldrb	r2, [r7, #23]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d309      	bcc.n	80010ec <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80010d8:	7dfa      	ldrb	r2, [r7, #23]
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	757b      	strb	r3, [r7, #21]
    ly++;
 80010e4:	7d3b      	ldrb	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80010ea:	e79d      	b.n	8001028 <u8g2_font_decode_len+0x2a>
      break;
 80010ec:	bf00      	nop
  }
  lx += cnt;
 80010ee:	7d7a      	ldrb	r2, [r7, #21]
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4413      	add	r3, r2
 80010f4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80010f6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80010fe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	725a      	strb	r2, [r3, #9]
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3360      	adds	r3, #96	@ 0x60
 800111c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001130:	4619      	mov	r1, r3
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fe7f 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 8001138:	4603      	mov	r3, r0
 800113a:	b25a      	sxtb	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001146:	4619      	mov	r1, r3
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fe74 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 800114e:	4603      	mov	r3, r0
 8001150:	b25a      	sxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	7b9b      	ldrb	r3, [r3, #14]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	73da      	strb	r2, [r3, #15]
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3360      	adds	r3, #96	@ 0x60
 800118a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800118c:	6839      	ldr	r1, [r7, #0]
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffbd 	bl	800110e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800119a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80011a2:	4619      	mov	r1, r3
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff fe91 	bl	8000ecc <u8g2_font_decode_get_signed_bits>
 80011aa:	4603      	mov	r3, r0
 80011ac:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80011b4:	4619      	mov	r1, r3
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff fe88 	bl	8000ecc <u8g2_font_decode_get_signed_bits>
 80011bc:	4603      	mov	r3, r0
 80011be:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80011c6:	4619      	mov	r1, r3
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f7ff fe7f 	bl	8000ecc <u8g2_font_decode_get_signed_bits>
 80011ce:	4603      	mov	r3, r0
 80011d0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f340 80d7 	ble.w	800138c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	8898      	ldrh	r0, [r3, #4]
 80011e2:	7cfa      	ldrb	r2, [r7, #19]
 80011e4:	7c7b      	ldrb	r3, [r7, #17]
 80011e6:	4413      	add	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	425b      	negs	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	7c1b      	ldrb	r3, [r3, #16]
 80011f4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80011f8:	f7ff fec6 	bl	8000f88 <u8g2_add_vector_x>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	88d8      	ldrh	r0, [r3, #6]
 8001208:	7cfa      	ldrb	r2, [r7, #19]
 800120a:	7c7b      	ldrb	r3, [r7, #17]
 800120c:	4413      	add	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	425b      	negs	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	b25a      	sxtb	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	7c1b      	ldrb	r3, [r3, #16]
 800121a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800121e:	f7ff fe78 	bl	8000f12 <u8g2_add_vector_y>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	88db      	ldrh	r3, [r3, #6]
 8001234:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001236:	8bfb      	ldrh	r3, [r7, #30]
 8001238:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800123a:	8b7b      	ldrh	r3, [r7, #26]
 800123c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	7c1b      	ldrb	r3, [r3, #16]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d85a      	bhi.n	80012fc <u8g2_font_decode_glyph+0x180>
 8001246:	a201      	add	r2, pc, #4	@ (adr r2, 800124c <u8g2_font_decode_glyph+0xd0>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	0800125d 	.word	0x0800125d
 8001250:	08001279 	.word	0x08001279
 8001254:	080012a1 	.word	0x080012a1
 8001258:	080012d5 	.word	0x080012d5
      {
	case 0:
	    x1 += decode->glyph_width;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001262:	b29a      	uxth	r2, r3
 8001264:	8bbb      	ldrh	r3, [r7, #28]
 8001266:	4413      	add	r3, r2
 8001268:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800126a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800126e:	b29a      	uxth	r2, r3
 8001270:	8b3b      	ldrh	r3, [r7, #24]
 8001272:	4413      	add	r3, r2
 8001274:	833b      	strh	r3, [r7, #24]
	    break;
 8001276:	e041      	b.n	80012fc <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800127c:	b29b      	uxth	r3, r3
 800127e:	8bfa      	ldrh	r2, [r7, #30]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001284:	8bfb      	ldrh	r3, [r7, #30]
 8001286:	3301      	adds	r3, #1
 8001288:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800128a:	8bbb      	ldrh	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001296:	b29a      	uxth	r2, r3
 8001298:	8b3b      	ldrh	r3, [r7, #24]
 800129a:	4413      	add	r3, r2
 800129c:	833b      	strh	r3, [r7, #24]
	    break;
 800129e:	e02d      	b.n	80012fc <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	8bfa      	ldrh	r2, [r7, #30]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80012ae:	8bfb      	ldrh	r3, [r7, #30]
 80012b0:	3301      	adds	r3, #1
 80012b2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80012b4:	8bbb      	ldrh	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80012ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	8b7a      	ldrh	r2, [r7, #26]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80012c6:	8b7b      	ldrh	r3, [r7, #26]
 80012c8:	3301      	adds	r3, #1
 80012ca:	837b      	strh	r3, [r7, #26]
	    y1++;
 80012cc:	8b3b      	ldrh	r3, [r7, #24]
 80012ce:	3301      	adds	r3, #1
 80012d0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80012d2:	e013      	b.n	80012fc <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80012d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	8bbb      	ldrh	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	8b7a      	ldrh	r2, [r7, #26]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80012ee:	8b7b      	ldrh	r3, [r7, #26]
 80012f0:	3301      	adds	r3, #1
 80012f2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80012f4:	8b3b      	ldrh	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80012fa:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80012fc:	8bb8      	ldrh	r0, [r7, #28]
 80012fe:	8b7a      	ldrh	r2, [r7, #26]
 8001300:	8bf9      	ldrh	r1, [r7, #30]
 8001302:	8b3b      	ldrh	r3, [r7, #24]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	4603      	mov	r3, r0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fb88 	bl	8001a1e <u8g2_IsIntersection>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001314:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001318:	e03a      	b.n	8001390 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2200      	movs	r2, #0
 800131e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2200      	movs	r2, #0
 8001324:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800132c:	4619      	mov	r1, r3
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff fd81 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 8001334:	4603      	mov	r3, r0
 8001336:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800133e:	4619      	mov	r1, r3
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f7ff fd78 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 8001346:	4603      	mov	r3, r0
 8001348:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fe54 	bl	8000ffe <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fe4e 	bl	8000ffe <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001362:	2101      	movs	r1, #1
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff fd66 	bl	8000e36 <u8g2_font_decode_get_unsigned_bits>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ec      	bne.n	800134a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001376:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800137a:	429a      	cmp	r2, r3
 800137c:	dd00      	ble.n	8001380 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800137e:	e7d2      	b.n	8001326 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001380:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	7b9a      	ldrb	r2, [r3, #14]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 800138c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3317      	adds	r3, #23
 80013ae:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	2bff      	cmp	r3, #255	@ 0xff
 80013b4:	d82a      	bhi.n	800140c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	2b60      	cmp	r3, #96	@ 0x60
 80013ba:	d907      	bls.n	80013cc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80013c2:	461a      	mov	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	4413      	add	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	2b40      	cmp	r3, #64	@ 0x40
 80013d0:	d906      	bls.n	80013e0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80013d8:	461a      	mov	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d04e      	beq.n	8001488 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d102      	bne.n	80013fc <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3302      	adds	r3, #2
 80013fa:	e049      	b.n	8001490 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800140a:	e7e9      	b.n	80013e0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001412:	461a      	mov	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800141e:	2100      	movs	r1, #0
 8001420:	6938      	ldr	r0, [r7, #16]
 8001422:	f7ff fc3f 	bl	8000ca4 <u8g2_font_get_word>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001430:	2102      	movs	r1, #2
 8001432:	6938      	ldr	r0, [r7, #16]
 8001434:	f7ff fc36 	bl	8000ca4 <u8g2_font_get_word>
 8001438:	4603      	mov	r3, r0
 800143a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	3304      	adds	r3, #4
 8001440:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3e9      	bcc.n	800141e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	4313      	orrs	r3, r2
 8001462:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800146a:	89fa      	ldrh	r2, [r7, #14]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	429a      	cmp	r2, r3
 8001470:	d102      	bne.n	8001478 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3303      	adds	r3, #3
 8001476:	e00b      	b.n	8001490 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3302      	adds	r3, #2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001486:	e7e0      	b.n	800144a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <u8g2_font_get_glyph_data+0xf6>
	break;
 800148c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	817b      	strh	r3, [r7, #10]
 80014aa:	460b      	mov	r3, r1
 80014ac:	813b      	strh	r3, [r7, #8]
 80014ae:	4613      	mov	r3, r2
 80014b0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	897a      	ldrh	r2, [r7, #10]
 80014ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	893a      	ldrh	r2, [r7, #8]
 80014c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4619      	mov	r1, r3
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff ff64 	bl	8001398 <u8g2_font_get_glyph_data>
 80014d0:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fe4e 	bl	800117c <u8g2_font_decode_glyph>
 80014e0:	4603      	mov	r3, r0
 80014e2:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80014e4:	8afb      	ldrh	r3, [r7, #22]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001510:	2b03      	cmp	r3, #3
 8001512:	d833      	bhi.n	800157c <u8g2_DrawGlyph+0x8c>
 8001514:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <u8g2_DrawGlyph+0x2c>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001541 	.word	0x08001541
 8001524:	08001555 	.word	0x08001555
 8001528:	08001569 	.word	0x08001569
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	4798      	blx	r3
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	4413      	add	r3, r2
 800153c:	813b      	strh	r3, [r7, #8]
      break;
 800153e:	e01d      	b.n	800157c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	4798      	blx	r3
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	817b      	strh	r3, [r7, #10]
      break;
 8001552:	e013      	b.n	800157c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	4798      	blx	r3
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	813b      	strh	r3, [r7, #8]
      break;
 8001566:	e009      	b.n	800157c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	4798      	blx	r3
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	4413      	add	r3, r2
 8001578:	817b      	strh	r3, [r7, #10]
      break;
 800157a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	893a      	ldrh	r2, [r7, #8]
 8001580:	8979      	ldrh	r1, [r7, #10]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff ff88 	bl	8001498 <u8g2_font_draw_glyph>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	817b      	strh	r3, [r7, #10]
 80015a2:	4613      	mov	r3, r2
 80015a4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fca7 	bl	8001efa <u8x8_utf8_init>
  sum = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	4611      	mov	r1, r2
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	4798      	blx	r3
 80015be:	4603      	mov	r3, r0
 80015c0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80015c2:	8abb      	ldrh	r3, [r7, #20]
 80015c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d038      	beq.n	800163e <u8g2_draw_string+0xaa>
      break;
    str++;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80015d2:	8abb      	ldrh	r3, [r7, #20]
 80015d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80015d8:	4293      	cmp	r3, r2
 80015da:	d0e9      	beq.n	80015b0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80015dc:	8abb      	ldrh	r3, [r7, #20]
 80015de:	893a      	ldrh	r2, [r7, #8]
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff ff84 	bl	80014f0 <u8g2_DrawGlyph>
 80015e8:	4603      	mov	r3, r0
 80015ea:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d81e      	bhi.n	8001634 <u8g2_draw_string+0xa0>
 80015f6:	a201      	add	r2, pc, #4	@ (adr r2, 80015fc <u8g2_draw_string+0x68>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	0800160d 	.word	0x0800160d
 8001600:	08001617 	.word	0x08001617
 8001604:	08001621 	.word	0x08001621
 8001608:	0800162b 	.word	0x0800162b
      {
	case 0:
	  x += delta;
 800160c:	897a      	ldrh	r2, [r7, #10]
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	4413      	add	r3, r2
 8001612:	817b      	strh	r3, [r7, #10]
	  break;
 8001614:	e00e      	b.n	8001634 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001616:	893a      	ldrh	r2, [r7, #8]
 8001618:	8a7b      	ldrh	r3, [r7, #18]
 800161a:	4413      	add	r3, r2
 800161c:	813b      	strh	r3, [r7, #8]
	  break;
 800161e:	e009      	b.n	8001634 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001620:	897a      	ldrh	r2, [r7, #10]
 8001622:	8a7b      	ldrh	r3, [r7, #18]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	817b      	strh	r3, [r7, #10]
	  break;
 8001628:	e004      	b.n	8001634 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800162a:	893a      	ldrh	r2, [r7, #8]
 800162c:	8a7b      	ldrh	r3, [r7, #18]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	813b      	strh	r3, [r7, #8]
	  break;
 8001632:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001634:	8afa      	ldrh	r2, [r7, #22]
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	4413      	add	r3, r2
 800163a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800163c:	e7b8      	b.n	80015b0 <u8g2_draw_string+0x1c>
      break;
 800163e:	bf00      	nop
    }
  }
  return sum;
 8001640:	8afb      	ldrh	r3, [r7, #22]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop

0800164c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	817b      	strh	r3, [r7, #10]
 800165a:	4613      	mov	r3, r2
 800165c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4a06      	ldr	r2, [pc, #24]	@ (800167c <u8g2_DrawStr+0x30>)
 8001662:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001664:	893a      	ldrh	r2, [r7, #8]
 8001666:	8979      	ldrh	r1, [r7, #10]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff ff92 	bl	8001594 <u8g2_draw_string>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	08001f17 	.word	0x08001f17

08001680 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	2b00      	cmp	r3, #0
 800168e:	d05d      	beq.n	800174c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d04d      	beq.n	800174e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d11c      	bne.n	80016f6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da05      	bge.n	80016d8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dd32      	ble.n	800174e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80016f4:	e02b      	b.n	800174e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001704:	4619      	mov	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800170c:	440b      	add	r3, r1
 800170e:	429a      	cmp	r2, r3
 8001710:	da0d      	bge.n	800172e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25a      	sxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800173a:	429a      	cmp	r2, r3
 800173c:	dd07      	ble.n	800174e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800174a:	e000      	b.n	800174e <u8g2_UpdateRefHeight+0xce>
    return;
 800174c:	bf00      	nop
  }  
}
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a04      	ldr	r2, [pc, #16]	@ (800178c <u8g2_SetFontPosBaseline+0x1c>)
 800177c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	08001759 	.word	0x08001759

08001790 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d00b      	beq.n	80017bc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3374      	adds	r3, #116	@ 0x74
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa97 	bl	8000ce4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff62 	bl	8001680 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	4613      	mov	r3, r2
 80017d8:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 80017e0:	8afb      	ldrh	r3, [r7, #22]
 80017e2:	82bb      	strh	r3, [r7, #20]
	b += *len;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	8abb      	ldrh	r3, [r7, #20]
 80017ea:	4413      	add	r3, r2
 80017ec:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 80017ee:	8afa      	ldrh	r2, [r7, #22]
 80017f0:	8abb      	ldrh	r3, [r7, #20]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90b      	bls.n	800180e <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 80017f6:	8afa      	ldrh	r2, [r7, #22]
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d205      	bcs.n	800180a <u8g2_clip_intersection2+0x46>
			b = d;
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	82bb      	strh	r3, [r7, #20]
			b--;
 8001802:	8abb      	ldrh	r3, [r7, #20]
 8001804:	3b01      	subs	r3, #1
 8001806:	82bb      	strh	r3, [r7, #20]
 8001808:	e001      	b.n	800180e <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 800180e:	8afa      	ldrh	r2, [r7, #22]
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	d301      	bcc.n	800181a <u8g2_clip_intersection2+0x56>
		return 0;
 8001816:	2300      	movs	r3, #0
 8001818:	e01c      	b.n	8001854 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 800181a:	8aba      	ldrh	r2, [r7, #20]
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	429a      	cmp	r2, r3
 8001820:	d801      	bhi.n	8001826 <u8g2_clip_intersection2+0x62>
		return 0;
 8001822:	2300      	movs	r3, #0
 8001824:	e016      	b.n	8001854 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8001826:	8afa      	ldrh	r2, [r7, #22]
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	429a      	cmp	r2, r3
 800182c:	d201      	bcs.n	8001832 <u8g2_clip_intersection2+0x6e>
		a = c;
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001832:	8aba      	ldrh	r2, [r7, #20]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d901      	bls.n	800183e <u8g2_clip_intersection2+0x7a>
		b = d;
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8afa      	ldrh	r2, [r7, #22]
 8001842:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001844:	8aba      	ldrh	r2, [r7, #20]
 8001846:	8afb      	ldrh	r3, [r7, #22]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	82bb      	strh	r3, [r7, #20]
	*len = b;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	8aba      	ldrh	r2, [r7, #20]
 8001850:	801a      	strh	r2, [r3, #0]
	return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b087      	sub	sp, #28
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	460b      	mov	r3, r1
 8001874:	813b      	strh	r3, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800187e:	893a      	ldrh	r2, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001888:	88f8      	ldrh	r0, [r7, #6]
 800188a:	893a      	ldrh	r2, [r7, #8]
 800188c:	8979      	ldrh	r1, [r7, #10]
 800188e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4603      	mov	r3, r0
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	47a0      	blx	r4
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}

080018a2 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80018a2:	b590      	push	{r4, r7, lr}
 80018a4:	b087      	sub	sp, #28
 80018a6:	af02      	add	r7, sp, #8
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	4608      	mov	r0, r1
 80018ac:	4611      	mov	r1, r2
 80018ae:	461a      	mov	r2, r3
 80018b0:	4603      	mov	r3, r0
 80018b2:	817b      	strh	r3, [r7, #10]
 80018b4:	460b      	mov	r3, r1
 80018b6:	813b      	strh	r3, [r7, #8]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d075      	beq.n	80019b2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d072      	beq.n	80019b2 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d91a      	bls.n	8001908 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 80018d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d109      	bne.n	80018ee <u8g2_DrawHVLine+0x4c>
					x -= len;
 80018da:	897a      	ldrh	r2, [r7, #10]
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	817b      	strh	r3, [r7, #10]
					x++;
 80018e4:	897b      	ldrh	r3, [r7, #10]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	817b      	strh	r3, [r7, #10]
 80018ec:	e00c      	b.n	8001908 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 80018ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d108      	bne.n	8001908 <u8g2_DrawHVLine+0x66>
					y -= len;
 80018f6:	893a      	ldrh	r2, [r7, #8]
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	813b      	strh	r3, [r7, #8]
					y++;
 8001900:	893b      	ldrh	r3, [r7, #8]
 8001902:	3301      	adds	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8001908:	f897 3020 	ldrb.w	r3, [r7, #32]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8001914:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11a      	bne.n	8001952 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001922:	893b      	ldrh	r3, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	d83b      	bhi.n	80019a0 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800192e:	893b      	ldrh	r3, [r7, #8]
 8001930:	429a      	cmp	r2, r3
 8001932:	d937      	bls.n	80019a4 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001940:	1db9      	adds	r1, r7, #6
 8001942:	f107 000a 	add.w	r0, r7, #10
 8001946:	f7ff ff3d 	bl	80017c4 <u8g2_clip_intersection2>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11a      	bne.n	8001986 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001950:	e02f      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	429a      	cmp	r2, r3
 800195c:	d824      	bhi.n	80019a8 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	429a      	cmp	r2, r3
 8001968:	d920      	bls.n	80019ac <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001976:	1db9      	adds	r1, r7, #6
 8001978:	f107 0008 	add.w	r0, r7, #8
 800197c:	f7ff ff22 	bl	80017c4 <u8g2_clip_intersection2>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d014      	beq.n	80019b0 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	689c      	ldr	r4, [r3, #8]
 800198c:	8979      	ldrh	r1, [r7, #10]
 800198e:	893a      	ldrh	r2, [r7, #8]
 8001990:	88f8      	ldrh	r0, [r7, #6]
 8001992:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4603      	mov	r3, r0
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	47a0      	blx	r4
 800199e:	e008      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
					return;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
					return;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
					return;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
					return;
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <u8g2_DrawHVLine+0x110>
					return;
 80019b0:	bf00      	nop
		}
}
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80019b8:	b490      	push	{r4, r7}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	80fb      	strh	r3, [r7, #6]
 80019ca:	4603      	mov	r3, r0
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20d      	bcs.n	80019fa <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80019de:	883a      	ldrh	r2, [r7, #0]
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d901      	bls.n	80019ea <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e014      	b.n	8001a14 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d901      	bls.n	80019f6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e00c      	b.n	8001a14 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80019fa:	883a      	ldrh	r2, [r7, #0]
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d907      	bls.n	8001a12 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	883b      	ldrh	r3, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d901      	bls.n	8001a0e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e002      	b.n	8001a14 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001a12:	2300      	movs	r3, #0
    }
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc90      	pop	{r4, r7}
 8001a1c:	4770      	bx	lr

08001a1e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	817b      	strh	r3, [r7, #10]
 8001a30:	460b      	mov	r3, r1
 8001a32:	813b      	strh	r3, [r7, #8]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001a44:	8b3b      	ldrh	r3, [r7, #24]
 8001a46:	893a      	ldrh	r2, [r7, #8]
 8001a48:	f7ff ffb6 	bl	80019b8 <u8g2_is_intersection_decision_tree>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <u8g2_IsIntersection+0x38>
    return 0; 
 8001a52:	2300      	movs	r3, #0
 8001a54:	e00a      	b.n	8001a6c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	897a      	ldrh	r2, [r7, #10]
 8001a66:	f7ff ffa7 	bl	80019b8 <u8g2_is_intersection_decision_tree>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	817b      	strh	r3, [r7, #10]
 8001a86:	460b      	mov	r3, r1
 8001a88:	813b      	strh	r3, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001a8e:	893b      	ldrh	r3, [r7, #8]
 8001a90:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001a92:	7efb      	ldrb	r3, [r7, #27]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001a9e:	7e3a      	ldrb	r2, [r7, #24]
 8001aa0:	7efb      	ldrb	r3, [r7, #27]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d801      	bhi.n	8001abe <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001aba:	7e3b      	ldrb	r3, [r7, #24]
 8001abc:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001ac8:	7e3b      	ldrb	r3, [r7, #24]
 8001aca:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001acc:	893b      	ldrh	r3, [r7, #8]
 8001ace:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001ad0:	8afb      	ldrh	r3, [r7, #22]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	7c1b      	ldrb	r3, [r3, #16]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	fb13 f302 	smulbb	r3, r3, r2
 8001ae6:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001aee:	8afb      	ldrh	r3, [r7, #22]
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	4413      	add	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001afe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d117      	bne.n	8001b36 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	7ebb      	ldrb	r3, [r7, #26]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	7e7b      	ldrb	r3, [r7, #25]
 8001b1a:	4053      	eors	r3, r2
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
	len--;
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e8      	bne.n	8001b06 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001b34:	e038      	b.n	8001ba8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	7ebb      	ldrb	r3, [r7, #26]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	7e7b      	ldrb	r3, [r7, #25]
 8001b4a:	4053      	eors	r3, r2
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001b52:	7efb      	ldrb	r3, [r7, #27]
 8001b54:	3301      	adds	r3, #1
 8001b56:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001b58:	7efb      	ldrb	r3, [r7, #27]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	76fb      	strb	r3, [r7, #27]
      len--;
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001b66:	7efb      	ldrb	r3, [r7, #27]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d114      	bne.n	8001b96 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001b70:	461a      	mov	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d801      	bhi.n	8001b86 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d008      	beq.n	8001ba2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	767b      	strb	r3, [r7, #25]
 8001b94:	e005      	b.n	8001ba2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001b96:	7ebb      	ldrb	r3, [r7, #26]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001b9c:	7e7b      	ldrb	r3, [r7, #25]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1c6      	bne.n	8001b36 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001ba8:	bf00      	nop
 8001baa:	3724      	adds	r7, #36	@ 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ffa9 	bl	8001bb4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fd84 	bl	8001770 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c8c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	89fa      	ldrh	r2, [r7, #14]
 8001c98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	7c1b      	ldrb	r3, [r3, #16]
 8001c9e:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	89fa      	ldrh	r2, [r7, #14]
 8001caa:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001cb2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001cb4:	89fb      	ldrh	r3, [r7, #14]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	89fa      	ldrh	r2, [r7, #14]
 8001cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cc6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001cd0:	4413      	add	r3, r2
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	7c52      	ldrb	r2, [r2, #17]
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	dd07      	ble.n	8001cea <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	7c5b      	ldrb	r3, [r3, #17]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	8a9a      	ldrh	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	8ada      	ldrh	r2, [r3, #22]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe5e 	bl	8001a1e <u8g2_IsIntersection>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001d70:	e03b      	b.n	8001dea <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d205      	bcs.n	8001d96 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d905      	bls.n	8001db2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d205      	bcs.n	8001dce <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d905      	bls.n	8001dea <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff3c 	bl	8001c78 <u8g2_update_dimension_common>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d30a      	bcc.n	8001e52 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff65 	bl	8001d38 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b088      	sub	sp, #32
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	813b      	strh	r3, [r7, #8]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001e96:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001e98:	8aba      	ldrh	r2, [r7, #20]
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ea6:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001ea8:	8afa      	ldrh	r2, [r7, #22]
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001eb8:	8abb      	ldrh	r3, [r7, #20]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001ebe:	8afa      	ldrh	r2, [r7, #22]
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	82fb      	strh	r3, [r7, #22]
 8001ec6:	e00a      	b.n	8001ede <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001ec8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001ed6:	8aba      	ldrh	r2, [r7, #20]
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001ede:	88f8      	ldrh	r0, [r7, #6]
 8001ee0:	8aba      	ldrh	r2, [r7, #20]
 8001ee2:	8af9      	ldrh	r1, [r7, #22]
 8001ee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4603      	mov	r3, r0
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fcb7 	bl	8001860 <u8g2_draw_hv_line_2dir>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <u8x8_ascii_next+0x18>
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d102      	bne.n	8001f34 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f32:	e001      	b.n	8001f38 <u8x8_ascii_next+0x22>
  return b;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	b29b      	uxth	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691c      	ldr	r4, [r3, #16]
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2120      	movs	r1, #32
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	47a0      	blx	r4
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	460b      	mov	r3, r1
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691c      	ldr	r4, [r3, #16]
 8001f7a:	7afa      	ldrb	r2, [r7, #11]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2117      	movs	r1, #23
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	47a0      	blx	r4
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}

08001f8e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001f9a:	1cfb      	adds	r3, r7, #3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe1 	bl	8001f68 <u8x8_byte_SendBytes>
 8001fa6:	4603      	mov	r3, r0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68dc      	ldr	r4, [r3, #12]
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2115      	movs	r1, #21
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	47a0      	blx	r4
 8001fca:	4603      	mov	r3, r0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68dc      	ldr	r4, [r3, #12]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2116      	movs	r1, #22
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	47a0      	blx	r4
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68dc      	ldr	r4, [r3, #12]
 800200a:	7afa      	ldrb	r2, [r7, #11]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2117      	movs	r1, #23
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	47a0      	blx	r4
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800201e:	b590      	push	{r4, r7, lr}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68dc      	ldr	r4, [r3, #12]
 800202a:	2300      	movs	r3, #0
 800202c:	2200      	movs	r2, #0
 800202e:	2118      	movs	r1, #24
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	47a0      	blx	r4
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}

0800203e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68dc      	ldr	r4, [r3, #12]
 800204a:	2300      	movs	r3, #0
 800204c:	2200      	movs	r2, #0
 800204e:	2119      	movs	r1, #25
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	47a0      	blx	r4
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800205e:	b590      	push	{r4, r7, lr}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	73fb      	strb	r3, [r7, #15]
    data++;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2bfe      	cmp	r3, #254	@ 0xfe
 8002078:	d031      	beq.n	80020de <u8x8_cad_SendSequence+0x80>
 800207a:	2bfe      	cmp	r3, #254	@ 0xfe
 800207c:	dc3d      	bgt.n	80020fa <u8x8_cad_SendSequence+0x9c>
 800207e:	2b19      	cmp	r3, #25
 8002080:	dc3b      	bgt.n	80020fa <u8x8_cad_SendSequence+0x9c>
 8002082:	2b18      	cmp	r3, #24
 8002084:	da23      	bge.n	80020ce <u8x8_cad_SendSequence+0x70>
 8002086:	2b16      	cmp	r3, #22
 8002088:	dc02      	bgt.n	8002090 <u8x8_cad_SendSequence+0x32>
 800208a:	2b15      	cmp	r3, #21
 800208c:	da03      	bge.n	8002096 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800208e:	e034      	b.n	80020fa <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002090:	2b17      	cmp	r3, #23
 8002092:	d00e      	beq.n	80020b2 <u8x8_cad_SendSequence+0x54>
	return;
 8002094:	e031      	b.n	80020fa <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68dc      	ldr	r4, [r3, #12]
 80020a0:	7bba      	ldrb	r2, [r7, #14]
 80020a2:	7bf9      	ldrb	r1, [r7, #15]
 80020a4:	2300      	movs	r3, #0
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	47a0      	blx	r4
	  data++;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	603b      	str	r3, [r7, #0]
	  break;
 80020b0:	e022      	b.n	80020f8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80020b8:	f107 030e 	add.w	r3, r7, #14
 80020bc:	461a      	mov	r2, r3
 80020be:	2101      	movs	r1, #1
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff99 	bl	8001ff8 <u8x8_cad_SendData>
	  data++;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	603b      	str	r3, [r7, #0]
	  break;
 80020cc:	e014      	b.n	80020f8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68dc      	ldr	r4, [r3, #12]
 80020d2:	7bf9      	ldrb	r1, [r7, #15]
 80020d4:	2300      	movs	r3, #0
 80020d6:	2200      	movs	r2, #0
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	47a0      	blx	r4
	  break;
 80020dc:	e00c      	b.n	80020f8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	461a      	mov	r2, r3
 80020e8:	2129      	movs	r1, #41	@ 0x29
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f9ee 	bl	80024cc <u8x8_gpio_call>
	  data++;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	603b      	str	r3, [r7, #0]
	  break;
 80020f6:	bf00      	nop
    cmd = *data;
 80020f8:	e7b6      	b.n	8002068 <u8x8_cad_SendSequence+0xa>
	return;
 80020fa:	bf00      	nop
    }
  }
}
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
	...

08002104 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	72fb      	strb	r3, [r7, #11]
 8002112:	4613      	mov	r3, r2
 8002114:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	3b14      	subs	r3, #20
 800211a:	2b05      	cmp	r3, #5
 800211c:	d82f      	bhi.n	800217e <u8x8_cad_001+0x7a>
 800211e:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <u8x8_cad_001+0x20>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	0800216d 	.word	0x0800216d
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002151 	.word	0x08002151
 8002130:	08002165 	.word	0x08002165
 8002134:	0800216d 	.word	0x0800216d
 8002138:	0800216d 	.word	0x0800216d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800213c:	2100      	movs	r1, #0
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff00 	bl	8001f44 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002144:	7abb      	ldrb	r3, [r7, #10]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ff20 	bl	8001f8e <u8x8_byte_SendByte>
      break;
 800214e:	e018      	b.n	8002182 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002150:	2100      	movs	r1, #0
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fef6 	bl	8001f44 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002158:	7abb      	ldrb	r3, [r7, #10]
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff ff16 	bl	8001f8e <u8x8_byte_SendByte>
      break;
 8002162:	e00e      	b.n	8002182 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002164:	2101      	movs	r1, #1
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff feec 	bl	8001f44 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	691c      	ldr	r4, [r3, #16]
 8002170:	7aba      	ldrb	r2, [r7, #10]
 8002172:	7af9      	ldrb	r1, [r7, #11]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	47a0      	blx	r4
 800217a:	4603      	mov	r3, r0
 800217c:	e002      	b.n	8002184 <u8x8_cad_001+0x80>
    default:
      return 0;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <u8x8_cad_001+0x80>
  }
  return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	72fb      	strb	r3, [r7, #11]
 800219a:	4613      	mov	r3, r2
 800219c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d006      	beq.n	80021b2 <u8x8_d_st7565_common+0x26>
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	dc71      	bgt.n	800228c <u8x8_d_st7565_common+0x100>
 80021a8:	2b0b      	cmp	r3, #11
 80021aa:	d050      	beq.n	800224e <u8x8_d_st7565_common+0xc2>
 80021ac:	2b0e      	cmp	r3, #14
 80021ae:	d05b      	beq.n	8002268 <u8x8_d_st7565_common+0xdc>
 80021b0:	e06c      	b.n	800228c <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff ff33 	bl	800201e <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	795b      	ldrb	r3, [r3, #5]
 80021bc:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80021ca:	7dbb      	ldrb	r3, [r7, #22]
 80021cc:	4413      	add	r3, r2
 80021ce:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80021d0:	7dbb      	ldrb	r3, [r7, #22]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff fee6 	bl	8001fb0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80021e4:	7dbb      	ldrb	r3, [r7, #22]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff fede 	bl	8001fb0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	799b      	ldrb	r3, [r3, #6]
 80021f8:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fed5 	bl	8001fb0 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	791b      	ldrb	r3, [r3, #4]
 800220a:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002218:	7dfa      	ldrb	r2, [r7, #23]
 800221a:	7dbb      	ldrb	r3, [r7, #22]
 800221c:	4413      	add	r3, r2
 800221e:	2b84      	cmp	r3, #132	@ 0x84
 8002220:	d905      	bls.n	800222e <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8002222:	2384      	movs	r3, #132	@ 0x84
 8002224:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002226:	7dfa      	ldrb	r2, [r7, #23]
 8002228:	7dbb      	ldrb	r3, [r7, #22]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4619      	mov	r1, r3
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff fedf 	bl	8001ff8 <u8x8_cad_SendData>
	arg_int--;
 800223a:	7abb      	ldrb	r3, [r7, #10]
 800223c:	3b01      	subs	r3, #1
 800223e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002240:	7abb      	ldrb	r3, [r7, #10]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f3      	bne.n	800222e <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fef9 	bl	800203e <u8x8_cad_EndTransfer>
      break;
 800224c:	e020      	b.n	8002290 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800224e:	7abb      	ldrb	r3, [r7, #10]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002254:	4911      	ldr	r1, [pc, #68]	@ (800229c <u8x8_d_st7565_common+0x110>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff ff01 	bl	800205e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800225c:	e018      	b.n	8002290 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800225e:	4910      	ldr	r1, [pc, #64]	@ (80022a0 <u8x8_d_st7565_common+0x114>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fefc 	bl	800205e <u8x8_cad_SendSequence>
      break;
 8002266:	e013      	b.n	8002290 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fed8 	bl	800201e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800226e:	2181      	movs	r1, #129	@ 0x81
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fe9d 	bl	8001fb0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002276:	7abb      	ldrb	r3, [r7, #10]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fea8 	bl	8001fd4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff feda 	bl	800203e <u8x8_cad_EndTransfer>
      break;
 800228a:	e001      	b.n	8002290 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	0800d5f0 	.word	0x0800d5f0
 80022a0:	0800d5f8 	.word	0x0800d5f8

080022a4 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	72fb      	strb	r3, [r7, #11]
 80022b2:	4613      	mov	r3, r2
 80022b4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80022b6:	7aba      	ldrb	r2, [r7, #10]
 80022b8:	7af9      	ldrb	r1, [r7, #11]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ff65 	bl	800218c <u8x8_d_st7565_common>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d131      	bne.n	800232c <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	2b0d      	cmp	r3, #13
 80022cc:	d013      	beq.n	80022f6 <u8x8_d_st7565_64128n+0x52>
 80022ce:	2b0d      	cmp	r3, #13
 80022d0:	dc2a      	bgt.n	8002328 <u8x8_d_st7565_64128n+0x84>
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	d002      	beq.n	80022dc <u8x8_d_st7565_64128n+0x38>
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d005      	beq.n	80022e6 <u8x8_d_st7565_64128n+0x42>
 80022da:	e025      	b.n	8002328 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80022dc:	4916      	ldr	r1, [pc, #88]	@ (8002338 <u8x8_d_st7565_64128n+0x94>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f832 	bl	8002348 <u8x8_d_helper_display_setup_memory>
	break;
 80022e4:	e022      	b.n	800232c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f842 	bl	8002370 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80022ec:	4913      	ldr	r1, [pc, #76]	@ (800233c <u8x8_d_st7565_64128n+0x98>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff feb5 	bl	800205e <u8x8_cad_SendSequence>
	break;
 80022f4:	e01a      	b.n	800232c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80022f6:	7abb      	ldrb	r3, [r7, #10]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80022fc:	4910      	ldr	r1, [pc, #64]	@ (8002340 <u8x8_d_st7565_64128n+0x9c>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fead 	bl	800205e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	7c9a      	ldrb	r2, [r3, #18]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002310:	e00c      	b.n	800232c <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002312:	490c      	ldr	r1, [pc, #48]	@ (8002344 <u8x8_d_st7565_64128n+0xa0>)
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff fea2 	bl	800205e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	7cda      	ldrb	r2, [r3, #19]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8002326:	e001      	b.n	800232c <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 800232c:	2301      	movs	r3, #1
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	0800d630 	.word	0x0800d630
 800233c:	0800d610 	.word	0x0800d610
 8002340:	0800d600 	.word	0x0800d600
 8002344:	0800d608 	.word	0x0800d608

08002348 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	7c9a      	ldrb	r2, [r3, #18]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695c      	ldr	r4, [r3, #20]
 800237c:	2300      	movs	r3, #0
 800237e:	2200      	movs	r2, #0
 8002380:	2128      	movs	r1, #40	@ 0x28
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68dc      	ldr	r4, [r3, #12]
 800238a:	2300      	movs	r3, #0
 800238c:	2200      	movs	r2, #0
 800238e:	2114      	movs	r1, #20
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002394:	2201      	movs	r2, #1
 8002396:	214b      	movs	r1, #75	@ 0x4b
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f897 	bl	80024cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2129      	movs	r1, #41	@ 0x29
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f88f 	bl	80024cc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	214b      	movs	r1, #75	@ 0x4b
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f88a 	bl	80024cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	2129      	movs	r1, #41	@ 0x29
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f882 	bl	80024cc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	214b      	movs	r1, #75	@ 0x4b
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f87d 	bl	80024cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	795b      	ldrb	r3, [r3, #5]
 80023d8:	461a      	mov	r2, r3
 80023da:	2129      	movs	r1, #41	@ 0x29
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f875 	bl	80024cc <u8x8_gpio_call>
}    
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	4608      	mov	r0, r1
 80023f4:	4611      	mov	r1, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	70fb      	strb	r3, [r7, #3]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70bb      	strb	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002408:	78bb      	ldrb	r3, [r7, #2]
 800240a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689c      	ldr	r4, [r3, #8]
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	2201      	movs	r2, #1
 800241e:	210f      	movs	r1, #15
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	47a0      	blx	r4
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}

0800242e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689c      	ldr	r4, [r3, #8]
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2109      	movs	r1, #9
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}

0800244c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689c      	ldr	r4, [r3, #8]
 8002458:	2300      	movs	r3, #0
 800245a:	2200      	movs	r2, #0
 800245c:	210a      	movs	r1, #10
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bd90      	pop	{r4, r7, pc}

0800246a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800246a:	b590      	push	{r4, r7, lr}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689c      	ldr	r4, [r3, #8]
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	2300      	movs	r3, #0
 800247e:	210b      	movs	r1, #11
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	47a0      	blx	r4
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689c      	ldr	r4, [r3, #8]
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	2300      	movs	r3, #0
 80024a0:	210e      	movs	r1, #14
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	47a0      	blx	r4
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689c      	ldr	r4, [r3, #8]
 80024ba:	2300      	movs	r3, #0
 80024bc:	2200      	movs	r2, #0
 80024be:	2110      	movs	r1, #16
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	47a0      	blx	r4
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695c      	ldr	r4, [r3, #20]
 80024e0:	78ba      	ldrb	r2, [r7, #2]
 80024e2:	78f9      	ldrb	r1, [r7, #3]
 80024e4:	2300      	movs	r3, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	47a0      	blx	r4
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}

080024f2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	72fb      	strb	r3, [r7, #11]
 8002500:	4613      	mov	r3, r2
 8002502:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a11      	ldr	r2, [pc, #68]	@ (800256c <u8x8_SetupDefaults+0x58>)
 8002526:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a10      	ldr	r2, [pc, #64]	@ (800256c <u8x8_SetupDefaults+0x58>)
 800252c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0e      	ldr	r2, [pc, #56]	@ (800256c <u8x8_SetupDefaults+0x58>)
 8002532:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0d      	ldr	r2, [pc, #52]	@ (800256c <u8x8_SetupDefaults+0x58>)
 8002538:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	22ff      	movs	r2, #255	@ 0xff
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	22ff      	movs	r2, #255	@ 0xff
 800255c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	080024f3 	.word	0x080024f3

08002570 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ffc8 	bl	8002514 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff ff46 	bl	800242e <u8x8_SetupMemory>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
 80025b8:	4613      	mov	r3, r2
 80025ba:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <INA229_writeReg+0x70>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	81bb      	strh	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	73bb      	strb	r3, [r7, #14]
    uint8_t rxBuf[3] = {0};
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <INA229_writeReg+0x70>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	813b      	strh	r3, [r7, #8]
 80025cc:	2300      	movs	r3, #0
 80025ce:	72bb      	strb	r3, [r7, #10]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 80025d8:	883b      	ldrh	r3, [r7, #0]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 80025e2:	883b      	ldrh	r3, [r7, #0]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7f18      	ldrb	r0, [r3, #28]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7f59      	ldrb	r1, [r3, #29]
 80025f0:	f107 020c 	add.w	r2, r7, #12
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	2203      	movs	r2, #3
 80025fe:	f001 fd5b 	bl	80040b8 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <INA229_writeReg+0x68>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002608:	883b      	ldrh	r3, [r7, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	82da      	strh	r2, [r3, #22]
    }
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08009438 	.word	0x08009438

08002620 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7f1b      	ldrb	r3, [r3, #28]
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fd37 	bl	80040a0 <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffb6 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	885b      	ldrh	r3, [r3, #2]
 8002644:	461a      	mov	r2, r3
 8002646:	2101      	movs	r1, #1
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffaf 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	2102      	movs	r1, #2
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffa8 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	88db      	ldrh	r3, [r3, #6]
 8002660:	461a      	mov	r2, r3
 8002662:	2103      	movs	r1, #3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffa1 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	891b      	ldrh	r3, [r3, #8]
 800266e:	461a      	mov	r2, r3
 8002670:	210b      	movs	r1, #11
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ff9a 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	895b      	ldrh	r3, [r3, #10]
 800267c:	461a      	mov	r2, r3
 800267e:	210c      	movs	r1, #12
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff93 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	899b      	ldrh	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	210d      	movs	r1, #13
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff8c 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	89db      	ldrh	r3, [r3, #14]
 8002698:	461a      	mov	r2, r3
 800269a:	210e      	movs	r1, #14
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff85 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8a1b      	ldrh	r3, [r3, #16]
 80026a6:	461a      	mov	r2, r3
 80026a8:	210f      	movs	r1, #15
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff7e 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8a5b      	ldrh	r3, [r3, #18]
 80026b4:	461a      	mov	r2, r3
 80026b6:	2110      	movs	r1, #16
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff77 	bl	80025ac <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8a9b      	ldrh	r3, [r3, #20]
 80026c2:	461a      	mov	r2, r3
 80026c4:	2111      	movs	r1, #17
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff70 	bl	80025ac <INA229_writeReg>

}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e044      	b.n	8002770 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	4613      	mov	r3, r2
 80026ea:	019b      	lsls	r3, r3, #6
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	461a      	mov	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	220c      	movs	r2, #12
 80026f8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	4613      	mov	r3, r2
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	2204      	movs	r2, #4
 800270e:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	4613      	mov	r3, r2
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	461a      	mov	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	2206      	movs	r2, #6
 8002724:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	4613      	mov	r3, r2
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	2204      	movs	r2, #4
 800273a:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	4613      	mov	r3, r2
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	461a      	mov	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	2202      	movs	r2, #2
 8002750:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	4613      	mov	r3, r2
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	2203      	movs	r2, #3
 8002766:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3b6      	bcc.n	80026e6 <LTC6811_init_reg_limits+0x12>
    }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	6039      	str	r1, [r7, #0]
 8002790:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f900 	bl	800299c <LTC681x_wrcfg>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f96f 	bl	8002a98 <LTC681x_reset_crc_count>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	6039      	str	r1, [r7, #0]
 80027cc:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f9d2 	bl	8002b7c <LTC681x_init_cfg>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af06      	add	r7, sp, #24
 80027e6:	6039      	str	r1, [r7, #0]
 80027e8:	4611      	mov	r1, r2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	460b      	mov	r3, r1
 80027f2:	71bb      	strb	r3, [r7, #6]
 80027f4:	4613      	mov	r3, r2
 80027f6:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 80027f8:	7979      	ldrb	r1, [r7, #5]
 80027fa:	79ba      	ldrb	r2, [r7, #6]
 80027fc:	79f8      	ldrb	r0, [r7, #7]
 80027fe:	8c3b      	ldrh	r3, [r7, #32]
 8002800:	9304      	str	r3, [sp, #16]
 8002802:	8bbb      	ldrh	r3, [r7, #28]
 8002804:	9303      	str	r3, [sp, #12]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	460b      	mov	r3, r1
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	f000 f9e7 	bl	8002be8 <LTC681x_set_cfgr>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b088      	sub	sp, #32
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8002830:	2306      	movs	r3, #6
 8002832:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3304      	adds	r3, #4
 800283c:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 800283e:	7efb      	ldrb	r3, [r7, #27]
 8002840:	4618      	mov	r0, r3
 8002842:	f006 f93d 	bl	8008ac0 <malloc>
 8002846:	4603      	mov	r3, r0
 8002848:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	7852      	ldrb	r2, [r2, #1]
 800285a:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	2002      	movs	r0, #2
 8002860:	f000 f86a 	bl	8002938 <pec15_calc>
 8002864:	4603      	mov	r3, r0
 8002866:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3302      	adds	r3, #2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3303      	adds	r3, #3
 800287a:	8a7a      	ldrh	r2, [r7, #18]
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	77bb      	strb	r3, [r7, #30]
 8002888:	e042      	b.n	8002910 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800288a:	2300      	movs	r3, #0
 800288c:	777b      	strb	r3, [r7, #29]
 800288e:	e016      	b.n	80028be <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8002890:	7fbb      	ldrb	r3, [r7, #30]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	461a      	mov	r2, r3
 800289e:	7f7b      	ldrb	r3, [r7, #29]
 80028a0:	4413      	add	r3, r2
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	441a      	add	r2, r3
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	440b      	add	r3, r1
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	3301      	adds	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80028b8:	7f7b      	ldrb	r3, [r7, #29]
 80028ba:	3301      	adds	r3, #1
 80028bc:	777b      	strb	r3, [r7, #29]
 80028be:	7f7a      	ldrb	r2, [r7, #29]
 80028c0:	7f3b      	ldrb	r3, [r7, #28]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3e4      	bcc.n	8002890 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 80028c6:	7fbb      	ldrb	r3, [r7, #30]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	441a      	add	r2, r3
 80028d8:	7f3b      	ldrb	r3, [r7, #28]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f82b 	bl	8002938 <pec15_calc>
 80028e2:	4603      	mov	r3, r0
 80028e4:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80028e6:	8a3b      	ldrh	r3, [r7, #16]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b299      	uxth	r1, r3
 80028ec:	7ffb      	ldrb	r3, [r7, #31]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4413      	add	r3, r2
 80028f2:	b2ca      	uxtb	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	3301      	adds	r3, #1
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4413      	add	r3, r2
 80028fe:	8a3a      	ldrh	r2, [r7, #16]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8002904:	7ffb      	ldrb	r3, [r7, #31]
 8002906:	3302      	adds	r3, #2
 8002908:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800290a:	7fbb      	ldrb	r3, [r7, #30]
 800290c:	3b01      	subs	r3, #1
 800290e:	77bb      	strb	r3, [r7, #30]
 8002910:	7fbb      	ldrb	r3, [r7, #30]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1b9      	bne.n	800288a <write_68+0x68>
    }

    cs_low();
 8002916:	f000 fd3f 	bl	8003398 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800291a:	7efb      	ldrb	r3, [r7, #27]
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd62 	bl	80033e8 <spi_write_array>
    cs_high();
 8002924:	f000 fd4c 	bl	80033c0 <cs_high>

    free(cmd);
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f006 f8d1 	bl	8008ad0 <free>
}
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8002944:	2310      	movs	r3, #16
 8002946:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8002948:	2300      	movs	r3, #0
 800294a:	737b      	strb	r3, [r7, #13]
 800294c:	e017      	b.n	800297e <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	09db      	lsrs	r3, r3, #7
 8002952:	b29b      	uxth	r3, r3
 8002954:	7b7a      	ldrb	r2, [r7, #13]
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	440a      	add	r2, r1
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	4053      	eors	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	b29a      	uxth	r2, r3
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	490a      	ldr	r1, [pc, #40]	@ (8002998 <pec15_calc+0x60>)
 800296e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4053      	eors	r3, r2
 8002976:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8002978:	7b7b      	ldrb	r3, [r7, #13]
 800297a:	3301      	adds	r3, #1
 800297c:	737b      	strb	r3, [r7, #13]
 800297e:	7b7a      	ldrb	r2, [r7, #13]
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d3e3      	bcc.n	800294e <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002986:	89fb      	ldrh	r3, [r7, #14]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	b29b      	uxth	r3, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	0800d648 	.word	0x0800d648

0800299c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0c4      	sub	sp, #272	@ 0x110
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4602      	mov	r2, r0
 80029a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029ac:	6019      	str	r1, [r3, #0]
 80029ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029b6:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 80029b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029bc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80029d2:	e047      	b.n	8002a64 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 80029d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d104      	bne.n	80029f0 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 80029e6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80029ea:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80029ee:	e00b      	b.n	8002a08 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 80029f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029f4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002a0e:	e020      	b.n	8002a52 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002a10:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8002a14:	4613      	mov	r3, r2
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1899      	adds	r1, r3, r2
 8002a2a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002a2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a32:	5c89      	ldrb	r1, [r1, r2]
 8002a34:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a38:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002a3c:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8002a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002a42:	3301      	adds	r3, #1
 8002a44:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8002a48:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002a52:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d9da      	bls.n	8002a10 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002a5a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a68:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002a6c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3ae      	bcc.n	80029d4 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8002a76:	f107 0208 	add.w	r2, r7, #8
 8002a7a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff feca 	bl	8002822 <write_68>
}
 8002a8e:	bf00      	nop
 8002a90:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	e05d      	b.n	8002b66 <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	461a      	mov	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e010      	b.n	8002afe <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	441a      	add	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3360      	adds	r3, #96	@ 0x60
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	2200      	movs	r2, #0
 8002af6:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	ddeb      	ble.n	8002adc <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e010      	b.n	8002b2c <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3368      	adds	r3, #104	@ 0x68
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	ddeb      	ble.n	8002b0a <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e010      	b.n	8002b5a <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	336c      	adds	r3, #108	@ 0x6c
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	2200      	movs	r2, #0
 8002b52:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	ddeb      	ble.n	8002b38 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	db9d      	blt.n	8002aaa <LTC681x_reset_crc_count+0x12>
        }
    }
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e021      	b.n	8002bd2 <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73bb      	strb	r3, [r7, #14]
 8002b92:	e00d      	b.n	8002bb0 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	4613      	mov	r3, r2
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	441a      	add	r2, r3
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73bb      	strb	r3, [r7, #14]
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d9ee      	bls.n	8002b94 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	019b      	lsls	r3, r3, #6
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3d9      	bcc.n	8002b8e <LTC681x_init_cfg+0x12>
    }
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6039      	str	r1, [r7, #0]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	71bb      	strb	r3, [r7, #6]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 8002c00:	79ba      	ldrb	r2, [r7, #6]
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	6839      	ldr	r1, [r7, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f828 	bl	8002c5c <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 8002c0c:	797a      	ldrb	r2, [r7, #5]
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f85e 	bl	8002cd4 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f894 	bl	8002d4c <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f8e6 	bl	8002dfc <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f97f 	bl	8002f3a <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002c3c:	8bba      	ldrh	r2, [r7, #28]
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f9d1 	bl	8002fea <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002c48:	8c3a      	ldrh	r2, [r7, #32]
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fa1b 	bl	800308a <LTC681x_set_cfgr_ov>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8002c6c:	79bb      	ldrb	r3, [r7, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	4613      	mov	r3, r2
 8002c76:	019b      	lsls	r3, r3, #6
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	7819      	ldrb	r1, [r3, #0]
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	4613      	mov	r3, r2
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	f041 0204 	orr.w	r2, r1, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8002c9c:	e014      	b.n	8002cc8 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8002c9e:	79fa      	ldrb	r2, [r7, #7]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	7819      	ldrb	r1, [r3, #0]
 8002cb0:	79fa      	ldrb	r2, [r7, #7]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f021 0204 	bic.w	r2, r1, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8002cea:	79fa      	ldrb	r2, [r7, #7]
 8002cec:	4613      	mov	r3, r2
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	7819      	ldrb	r1, [r3, #0]
 8002cfc:	79fa      	ldrb	r2, [r7, #7]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f041 0201 	orr.w	r2, r1, #1
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 8002d14:	e014      	b.n	8002d40 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	019b      	lsls	r3, r3, #6
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	7819      	ldrb	r1, [r3, #0]
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	f021 0201 	bic.w	r2, r1, #1
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e043      	b.n	8002de8 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01c      	beq.n	8002da6 <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3303      	adds	r3, #3
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	4613      	mov	r3, r2
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 8002da0:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e01d      	b.n	8002de2 <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	4613      	mov	r3, r2
 8002daa:	019b      	lsls	r3, r3, #6
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	019b      	lsls	r3, r3, #6
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8002dde:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8002de0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	ddb8      	ble.n	8002d60 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e041      	b.n	8002e94 <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	791b      	ldrb	r3, [r3, #4]
 8002e2e:	b25a      	sxtb	r2, r3
 8002e30:	2101      	movs	r1, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	b259      	sxtb	r1, r3
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	4613      	mov	r3, r2
 8002e42:	019b      	lsls	r3, r3, #6
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	711a      	strb	r2, [r3, #4]
 8002e52:	e01c      	b.n	8002e8e <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	4613      	mov	r3, r2
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4413      	add	r3, r2
 8002e64:	791b      	ldrb	r3, [r3, #4]
 8002e66:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8002e68:	2101      	movs	r1, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	4013      	ands	r3, r2
 8002e78:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	019b      	lsls	r3, r3, #6
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8002e8a:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8002e8c:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b07      	cmp	r3, #7
 8002e98:	ddba      	ble.n	8002e10 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e042      	b.n	8002f26 <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01b      	beq.n	8002ee6 <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	019b      	lsls	r3, r3, #6
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	795b      	ldrb	r3, [r3, #5]
 8002ec0:	b25a      	sxtb	r2, r3
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b259      	sxtb	r1, r3
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4413      	add	r3, r2
 8002ee0:	b2ca      	uxtb	r2, r1
 8002ee2:	715a      	strb	r2, [r3, #5]
 8002ee4:	e01c      	b.n	8002f20 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	795b      	ldrb	r3, [r3, #5]
 8002ef8:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8002efa:	2101      	movs	r1, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8002f1c:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f1e:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	ddb9      	ble.n	8002ea0 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b087      	sub	sp, #28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e043      	b.n	8002fd6 <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01c      	beq.n	8002f94 <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4413      	add	r3, r2
 8002f6a:	795b      	ldrb	r3, [r3, #5]
 8002f6c:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	4613      	mov	r3, r2
 8002f82:	019b      	lsls	r3, r3, #6
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 8002f8e:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f90:	715a      	strb	r2, [r3, #5]
 8002f92:	e01d      	b.n	8002fd0 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	4613      	mov	r3, r2
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	795b      	ldrb	r3, [r3, #5]
 8002fa6:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8002fcc:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8002fce:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	ddb8      	ble.n	8002f4e <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	6039      	str	r1, [r7, #0]
 8002ff4:	71fb      	strb	r3, [r7, #7]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 8002ffa:	88bb      	ldrh	r3, [r7, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003004:	79fa      	ldrb	r2, [r7, #7]
 8003006:	4613      	mov	r3, r2
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4413      	add	r3, r2
 8003014:	89fa      	ldrh	r2, [r7, #14]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 800301a:	79fa      	ldrb	r2, [r7, #7]
 800301c:	4613      	mov	r3, r2
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	461a      	mov	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4413      	add	r3, r2
 800302a:	7899      	ldrb	r1, [r3, #2]
 800302c:	79fa      	ldrb	r2, [r7, #7]
 800302e:	4613      	mov	r3, r2
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	461a      	mov	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	f021 020f 	bic.w	r2, r1, #15
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8003044:	79fa      	ldrb	r2, [r7, #7]
 8003046:	4613      	mov	r3, r2
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 8003058:	89fb      	ldrh	r3, [r7, #14]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	b25b      	sxtb	r3, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	4613      	mov	r3, r2
 800306e:	019b      	lsls	r3, r3, #6
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 800307a:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800307c:	709a      	strb	r2, [r3, #2]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	6039      	str	r1, [r7, #0]
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	4613      	mov	r3, r2
 8003098:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 800309a:	88bb      	ldrh	r3, [r7, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	b299      	uxth	r1, r3
 80030a6:	79fa      	ldrb	r2, [r7, #7]
 80030a8:	4613      	mov	r3, r2
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	461a      	mov	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	b2ca      	uxtb	r2, r1
 80030b8:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 80030ba:	79fa      	ldrb	r2, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	019b      	lsls	r3, r3, #6
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	461a      	mov	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	7899      	ldrb	r1, [r3, #2]
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	4613      	mov	r3, r2
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	f001 020f 	and.w	r2, r1, #15
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	4613      	mov	r3, r2
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	789b      	ldrb	r3, [r3, #2]
 80030f6:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	4313      	orrs	r3, r2
 8003100:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	4613      	mov	r3, r2
 8003106:	019b      	lsls	r3, r3, #6
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	461a      	mov	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 8003112:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8003114:	709a      	strb	r2, [r3, #2]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	72fb      	strb	r3, [r7, #11]
 8003132:	4613      	mov	r3, r2
 8003134:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	2b4b      	cmp	r3, #75	@ 0x4b
 800313a:	d01a      	beq.n	8003172 <u8x8_stm32_gpio_and_delay+0x4e>
 800313c:	2b4b      	cmp	r3, #75	@ 0x4b
 800313e:	dc1f      	bgt.n	8003180 <u8x8_stm32_gpio_and_delay+0x5c>
 8003140:	2b4a      	cmp	r3, #74	@ 0x4a
 8003142:	d00f      	beq.n	8003164 <u8x8_stm32_gpio_and_delay+0x40>
 8003144:	2b4a      	cmp	r3, #74	@ 0x4a
 8003146:	dc1b      	bgt.n	8003180 <u8x8_stm32_gpio_and_delay+0x5c>
 8003148:	2b28      	cmp	r3, #40	@ 0x28
 800314a:	d002      	beq.n	8003152 <u8x8_stm32_gpio_and_delay+0x2e>
 800314c:	2b29      	cmp	r3, #41	@ 0x29
 800314e:	d004      	beq.n	800315a <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8003150:	e016      	b.n	8003180 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8003152:	2002      	movs	r0, #2
 8003154:	f001 fcc4 	bl	8004ae0 <HAL_Delay>
            break;
 8003158:	e013      	b.n	8003182 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 800315a:	7abb      	ldrb	r3, [r7, #10]
 800315c:	4618      	mov	r0, r3
 800315e:	f001 fcbf 	bl	8004ae0 <HAL_Delay>
            break;
 8003162:	e00e      	b.n	8003182 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8003164:	7abb      	ldrb	r3, [r7, #10]
 8003166:	461a      	mov	r2, r3
 8003168:	2108      	movs	r1, #8
 800316a:	4808      	ldr	r0, [pc, #32]	@ (800318c <u8x8_stm32_gpio_and_delay+0x68>)
 800316c:	f002 fb60 	bl	8005830 <HAL_GPIO_WritePin>
            break;
 8003170:	e007      	b.n	8003182 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8003172:	7abb      	ldrb	r3, [r7, #10]
 8003174:	461a      	mov	r2, r3
 8003176:	2104      	movs	r1, #4
 8003178:	4804      	ldr	r0, [pc, #16]	@ (800318c <u8x8_stm32_gpio_and_delay+0x68>)
 800317a:	f002 fb59 	bl	8005830 <HAL_GPIO_WritePin>
            break;
 800317e:	e000      	b.n	8003182 <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8003180:	bf00      	nop
    }
    return 1U;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021800 	.word	0x40021800

08003190 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	72fb      	strb	r3, [r7, #11]
 800319e:	4613      	mov	r3, r2
 80031a0:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	3b14      	subs	r3, #20
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d83e      	bhi.n	800322c <u8x8_byte_4wire_hw_spi+0x9c>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <u8x8_byte_4wire_hw_spi+0x24>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	08003233 	.word	0x08003233
 80031b8:	0800322d 	.word	0x0800322d
 80031bc:	0800322d 	.word	0x0800322d
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	08003209 	.word	0x08003209
 80031c8:	0800321b 	.word	0x0800321b
 80031cc:	0800322d 	.word	0x0800322d
 80031d0:	0800322d 	.word	0x0800322d
 80031d4:	0800322d 	.word	0x0800322d
 80031d8:	0800322d 	.word	0x0800322d
 80031dc:	0800322d 	.word	0x0800322d
 80031e0:	0800322d 	.word	0x0800322d
 80031e4:	080031fb 	.word	0x080031fb
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 80031e8:	7abb      	ldrb	r3, [r7, #10]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	f242 7310 	movw	r3, #10000	@ 0x2710
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4813      	ldr	r0, [pc, #76]	@ (8003240 <u8x8_byte_4wire_hw_spi+0xb0>)
 80031f4:	f004 f8b7 	bl	8007366 <HAL_SPI_Transmit>
            break;
 80031f8:	e01c      	b.n	8003234 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80031fa:	7abb      	ldrb	r3, [r7, #10]
 80031fc:	461a      	mov	r2, r3
 80031fe:	2108      	movs	r1, #8
 8003200:	4810      	ldr	r0, [pc, #64]	@ (8003244 <u8x8_byte_4wire_hw_spi+0xb4>)
 8003202:	f002 fb15 	bl	8005830 <HAL_GPIO_WritePin>
            break;
 8003206:	e015      	b.n	8003234 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	2104      	movs	r1, #4
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <u8x8_byte_4wire_hw_spi+0xb8>)
 8003214:	f002 fb0c 	bl	8005830 <HAL_GPIO_WritePin>
            break;
 8003218:	e00c      	b.n	8003234 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	461a      	mov	r2, r3
 8003222:	2104      	movs	r1, #4
 8003224:	4808      	ldr	r0, [pc, #32]	@ (8003248 <u8x8_byte_4wire_hw_spi+0xb8>)
 8003226:	f002 fb03 	bl	8005830 <HAL_GPIO_WritePin>
            break;
 800322a:	e003      	b.n	8003234 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]
            break;
 8003230:	e000      	b.n	8003234 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8003232:	bf00      	nop
    }
    return retVal;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000ee0 	.word	0x20000ee0
 8003244:	40021800 	.word	0x40021800
 8003248:	40020c00 	.word	0x40020c00

0800324c <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8003250:	2201      	movs	r2, #1
 8003252:	2110      	movs	r1, #16
 8003254:	480c      	ldr	r0, [pc, #48]	@ (8003288 <Display_Init+0x3c>)
 8003256:	f002 faeb 	bl	8005830 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 800325a:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <Display_Init+0x40>)
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <Display_Init+0x44>)
 800325e:	490d      	ldr	r1, [pc, #52]	@ (8003294 <Display_Init+0x48>)
 8003260:	480d      	ldr	r0, [pc, #52]	@ (8003298 <Display_Init+0x4c>)
 8003262:	f7fd fce5 	bl	8000c30 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8003266:	480c      	ldr	r0, [pc, #48]	@ (8003298 <Display_Init+0x4c>)
 8003268:	f7ff f8f0 	bl	800244c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 800326c:	2100      	movs	r1, #0
 800326e:	480a      	ldr	r0, [pc, #40]	@ (8003298 <Display_Init+0x4c>)
 8003270:	f7ff f8fb 	bl	800246a <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8003274:	4808      	ldr	r0, [pc, #32]	@ (8003298 <Display_Init+0x4c>)
 8003276:	f7fd fcb5 	bl	8000be4 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 800327a:	2178      	movs	r1, #120	@ 0x78
 800327c:	4806      	ldr	r0, [pc, #24]	@ (8003298 <Display_Init+0x4c>)
 800327e:	f7ff f905 	bl	800248c <u8x8_SetContrast>
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40021800 	.word	0x40021800
 800328c:	08003125 	.word	0x08003125
 8003290:	08003191 	.word	0x08003191
 8003294:	0800d5e4 	.word	0x0800d5e4
 8003298:	20000c50 	.word	0x20000c50

0800329c <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 80032a2:	4824      	ldr	r0, [pc, #144]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032a4:	f7fd fc5c 	bl	8000b60 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 80032a8:	4b23      	ldr	r3, [pc, #140]	@ (8003338 <Display_MainTitlePage+0x9c>)
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2340      	movs	r3, #64	@ 0x40
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	481f      	ldr	r0, [pc, #124]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032b8:	f7fd fb76 	bl	80009a8 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 80032bc:	481d      	ldr	r0, [pc, #116]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032be:	f7fd fc63 	bl	8000b88 <u8g2_NextPage>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ef      	bne.n	80032a8 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 80032c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032cc:	f001 fc08 	bl	8004ae0 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 80032d0:	4818      	ldr	r0, [pc, #96]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032d2:	f7fd fbac 	bl	8000a2e <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80032d6:	4919      	ldr	r1, [pc, #100]	@ (800333c <Display_MainTitlePage+0xa0>)
 80032d8:	4816      	ldr	r0, [pc, #88]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032da:	f7fe fa59 	bl	8001790 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <Display_MainTitlePage+0xa4>)
 80032e0:	2210      	movs	r2, #16
 80032e2:	212a      	movs	r1, #42	@ 0x2a
 80032e4:	4813      	ldr	r0, [pc, #76]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032e6:	f7fe f9b1 	bl	800164c <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80032ea:	4914      	ldr	r1, [pc, #80]	@ (800333c <Display_MainTitlePage+0xa0>)
 80032ec:	4811      	ldr	r0, [pc, #68]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032ee:	f7fe fa4f 	bl	8001790 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80032f2:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <Display_MainTitlePage+0xa8>)
 80032f4:	2221      	movs	r2, #33	@ 0x21
 80032f6:	2106      	movs	r1, #6
 80032f8:	480e      	ldr	r0, [pc, #56]	@ (8003334 <Display_MainTitlePage+0x98>)
 80032fa:	f7fe f9a7 	bl	800164c <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 80032fe:	200a      	movs	r0, #10
 8003300:	f001 fbee 	bl	8004ae0 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8003304:	480b      	ldr	r0, [pc, #44]	@ (8003334 <Display_MainTitlePage+0x98>)
 8003306:	f7fd fb92 	bl	8000a2e <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 800330a:	480a      	ldr	r0, [pc, #40]	@ (8003334 <Display_MainTitlePage+0x98>)
 800330c:	f7fd fc3c 	bl	8000b88 <u8g2_NextPage>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1c5      	bne.n	80032a2 <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8003316:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800331a:	f001 fbe1 	bl	8004ae0 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <Display_MainTitlePage+0x98>)
 8003320:	f7fd fb85 	bl	8000a2e <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8003324:	2200      	movs	r2, #0
 8003326:	2110      	movs	r1, #16
 8003328:	4807      	ldr	r0, [pc, #28]	@ (8003348 <Display_MainTitlePage+0xac>)
 800332a:	f002 fa81 	bl	8005830 <HAL_GPIO_WritePin>
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000c50 	.word	0x20000c50
 8003338:	20000340 	.word	0x20000340
 800333c:	0800c98c 	.word	0x0800c98c
 8003340:	0800943c 	.word	0x0800943c
 8003344:	08009444 	.word	0x08009444
 8003348:	40021800 	.word	0x40021800

0800334c <display_lcd>:

    // Send the buffer to the display
    u8g2_SendBuffer(&u8g2);
}
void display_lcd(const char *message)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 8003354:	480e      	ldr	r0, [pc, #56]	@ (8003390 <display_lcd+0x44>)
 8003356:	f7fd fc03 	bl	8000b60 <u8g2_FirstPage>
	    do {
	    	u8g2_ClearBuffer(&u8g2);
 800335a:	480d      	ldr	r0, [pc, #52]	@ (8003390 <display_lcd+0x44>)
 800335c:	f7fd fb67 	bl	8000a2e <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 8003360:	490c      	ldr	r1, [pc, #48]	@ (8003394 <display_lcd+0x48>)
 8003362:	480b      	ldr	r0, [pc, #44]	@ (8003390 <display_lcd+0x44>)
 8003364:	f7fe fa14 	bl	8001790 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 00, 30, message);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	221e      	movs	r2, #30
 800336c:	2100      	movs	r1, #0
 800336e:	4808      	ldr	r0, [pc, #32]	@ (8003390 <display_lcd+0x44>)
 8003370:	f7fe f96c 	bl	800164c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003374:	4806      	ldr	r0, [pc, #24]	@ (8003390 <display_lcd+0x44>)
 8003376:	f7fd fbcd 	bl	8000b14 <u8g2_SendBuffer>
	    } while (u8g2_NextPage(&u8g2));
 800337a:	4805      	ldr	r0, [pc, #20]	@ (8003390 <display_lcd+0x44>)
 800337c:	f7fd fc04 	bl	8000b88 <u8g2_NextPage>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e9      	bne.n	800335a <display_lcd+0xe>
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000c50 	.word	0x20000c50
 8003394:	080094b4 	.word	0x080094b4

08003398 <cs_low>:
/* USER CODE BEGIN 0 */

//--------------------------------------------------------------//


void cs_low() {
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033a2:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <cs_low+0x20>)
 80033a4:	f002 fa44 	bl	8005830 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 80033a8:	2201      	movs	r2, #1
 80033aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033ae:	4803      	ldr	r0, [pc, #12]	@ (80033bc <cs_low+0x24>)
 80033b0:	f002 fa3e 	bl	8005830 <HAL_GPIO_WritePin>


}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020c00 	.word	0x40020c00

080033c0 <cs_high>:

void cs_high() {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80033c4:	2201      	movs	r2, #1
 80033c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ca:	4805      	ldr	r0, [pc, #20]	@ (80033e0 <cs_high+0x20>)
 80033cc:	f002 fa30 	bl	8005830 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 80033d0:	2201      	movs	r2, #1
 80033d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033d6:	4803      	ldr	r0, [pc, #12]	@ (80033e4 <cs_high+0x24>)
 80033d8:	f002 fa2a 	bl	8005830 <HAL_GPIO_WritePin>


}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020c00 	.word	0x40020c00

080033e8 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e00f      	b.n	800341a <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	18d1      	adds	r1, r2, r3
 8003400:	2314      	movs	r3, #20
 8003402:	2201      	movs	r2, #1
 8003404:	4809      	ldr	r0, [pc, #36]	@ (800342c <spi_write_array+0x44>)
 8003406:	f003 ffae 	bl	8007366 <HAL_SPI_Transmit>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8003410:	f000 fe40 	bl	8004094 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	3301      	adds	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3eb      	bcc.n	80033fa <spi_write_array+0x12>
		}
	}

}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000f38 	.word	0x20000f38

08003430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b091      	sub	sp, #68	@ 0x44
 8003434:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003436:	f001 fae1 	bl	80049fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800343a:	f000 f8c3 	bl	80035c4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800343e:	f000 fbd7 	bl	8003bf0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003442:	f000 fa55 	bl	80038f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003446:	f000 fa89 	bl	800395c <MX_SPI2_Init>
  MX_I2C2_Init();
 800344a:	f000 f9d1 	bl	80037f0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800344e:	f000 fa0f 	bl	8003870 <MX_I2C3_Init>
  MX_SPI3_Init();
 8003452:	f000 fab9 	bl	80039c8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8003456:	f000 faed 	bl	8003a34 <MX_SPI4_Init>
  MX_CAN1_Init();
 800345a:	f000 f91f 	bl	800369c <MX_CAN1_Init>
  MX_CAN2_Init();
 800345e:	f000 f953 	bl	8003708 <MX_CAN2_Init>
  MX_I2C1_Init();
 8003462:	f000 f985 	bl	8003770 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003466:	f000 fb1b 	bl	8003aa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800346a:	f000 fb43 	bl	8003af4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800346e:	f000 fb6b 	bl	8003b48 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003472:	f000 fb93 	bl	8003b9c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8003476:	f005 fa5d 	bl	8008934 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  RTC_Init();
 800347a:	f7fd f925 	bl	80006c8 <RTC_Init>
//  RTC_SetTime(00,10,18,5,25,4,25);

// int INA229
  for (int i = 0; i < NUM_INA229; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	e00c      	b.n	800349e <main+0x6e>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8003484:	4a41      	ldr	r2, [pc, #260]	@ (800358c <main+0x15c>)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f8c7 	bl	8002620 <INA229_config>
 8003492:	200a      	movs	r0, #10
 8003494:	f001 fb24 	bl	8004ae0 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	3301      	adds	r3, #1
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	2b19      	cmp	r3, #25
 80034a2:	ddef      	ble.n	8003484 <main+0x54>



  mcu_spiInit(0);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f000 fdfb 	bl	80040a0 <mcu_spiInit>
  HAL_Delay(10);
 80034aa:	200a      	movs	r0, #10
 80034ac:	f001 fb18 	bl	8004ae0 <HAL_Delay>
  HAL_Delay(10);
 80034b0:	200a      	movs	r0, #10
 80034b2:	f001 fb15 	bl	8004ae0 <HAL_Delay>


  HAL_Delay(10);
 80034b6:	200a      	movs	r0, #10
 80034b8:	f001 fb12 	bl	8004ae0 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80034bc:	4934      	ldr	r1, [pc, #208]	@ (8003590 <main+0x160>)
 80034be:	2002      	movs	r0, #2
 80034c0:	f7ff f97f 	bl	80027c2 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ca:	e01b      	b.n	8003504 <main+0xd4>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <main+0x164>)
 80034ce:	7819      	ldrb	r1, [r3, #0]
 80034d0:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <main+0x168>)
 80034d2:	781c      	ldrb	r4, [r3, #0]
 80034d4:	4b31      	ldr	r3, [pc, #196]	@ (800359c <main+0x16c>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	4a31      	ldr	r2, [pc, #196]	@ (80035a0 <main+0x170>)
 80034da:	8812      	ldrh	r2, [r2, #0]
 80034dc:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 80034e0:	9204      	str	r2, [sp, #16]
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	4b2f      	ldr	r3, [pc, #188]	@ (80035a4 <main+0x174>)
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	4b2f      	ldr	r3, [pc, #188]	@ (80035a8 <main+0x178>)
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <main+0x17c>)
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4623      	mov	r3, r4
 80034f2:	460a      	mov	r2, r1
 80034f4:	4926      	ldr	r1, [pc, #152]	@ (8003590 <main+0x160>)
 80034f6:	f7ff f973 	bl	80027e0 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034fe:	3301      	adds	r3, #1
 8003500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003508:	2b01      	cmp	r3, #1
 800350a:	d9df      	bls.n	80034cc <main+0x9c>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 800350c:	4920      	ldr	r1, [pc, #128]	@ (8003590 <main+0x160>)
 800350e:	2002      	movs	r0, #2
 8003510:	f7ff f939 	bl	8002786 <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8003514:	491e      	ldr	r1, [pc, #120]	@ (8003590 <main+0x160>)
 8003516:	2002      	movs	r0, #2
 8003518:	f7ff f944 	bl	80027a4 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 800351c:	491c      	ldr	r1, [pc, #112]	@ (8003590 <main+0x160>)
 800351e:	2002      	movs	r0, #2
 8003520:	f7ff f8d8 	bl	80026d4 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8003524:	f7ff fe92 	bl	800324c <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8003528:	f7ff feb8 	bl	800329c <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 800352c:	4820      	ldr	r0, [pc, #128]	@ (80035b0 <main+0x180>)
 800352e:	f7fd f889 	bl	8000644 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8003532:	4820      	ldr	r0, [pc, #128]	@ (80035b4 <main+0x184>)
 8003534:	f7fd f886 	bl	8000644 <Expander_InitAllDevices>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RTC_ReadTime();
 8003538:	f7fd f966 	bl	8000808 <RTC_ReadTime>
	  char timeStr[16];
	  char dateStr[16];
	  sprintf(timeStr, "%02d:%02d:%02d", time.hour, time.minute, time.second);
 800353c:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <main+0x188>)
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	461a      	mov	r2, r3
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <main+0x188>)
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	4619      	mov	r1, r3
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <main+0x188>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	f107 0010 	add.w	r0, r7, #16
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	460b      	mov	r3, r1
 8003554:	4919      	ldr	r1, [pc, #100]	@ (80035bc <main+0x18c>)
 8003556:	f005 fb71 	bl	8008c3c <siprintf>
	  sprintf(dateStr, "%02d/%02d/%02d", time.day, time.month, time.year);
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <main+0x188>)
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <main+0x188>)
 8003562:	795b      	ldrb	r3, [r3, #5]
 8003564:	4619      	mov	r1, r3
 8003566:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <main+0x188>)
 8003568:	799b      	ldrb	r3, [r3, #6]
 800356a:	4638      	mov	r0, r7
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	460b      	mov	r3, r1
 8003570:	4913      	ldr	r1, [pc, #76]	@ (80035c0 <main+0x190>)
 8003572:	f005 fb63 	bl	8008c3c <siprintf>
	  display_lcd(timeStr);
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fee6 	bl	800334c <display_lcd>
	  HAL_Delay(100);
 8003580:	2064      	movs	r0, #100	@ 0x64
 8003582:	f001 faad 	bl	8004ae0 <HAL_Delay>
  {
 8003586:	bf00      	nop
 8003588:	e7d6      	b.n	8003538 <main+0x108>
 800358a:	bf00      	nop
 800358c:	20000740 	.word	0x20000740
 8003590:	200010b0 	.word	0x200010b0
 8003594:	200007a8 	.word	0x200007a8
 8003598:	200012b8 	.word	0x200012b8
 800359c:	200007b2 	.word	0x200007b2
 80035a0:	200007b4 	.word	0x200007b4
 80035a4:	200007b8 	.word	0x200007b8
 80035a8:	200012bc 	.word	0x200012bc
 80035ac:	200007ac 	.word	0x200007ac
 80035b0:	20000d88 	.word	0x20000d88
 80035b4:	20000ddc 	.word	0x20000ddc
 80035b8:	20000848 	.word	0x20000848
 80035bc:	08009494 	.word	0x08009494
 80035c0:	080094a4 	.word	0x080094a4

080035c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b094      	sub	sp, #80	@ 0x50
 80035c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ca:	f107 0320 	add.w	r3, r7, #32
 80035ce:	2230      	movs	r2, #48	@ 0x30
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f005 fb52 	bl	8008c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <SystemClock_Config+0xd0>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	4a28      	ldr	r2, [pc, #160]	@ (8003694 <SystemClock_Config+0xd0>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f8:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <SystemClock_Config+0xd0>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003604:	2300      	movs	r3, #0
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	4b23      	ldr	r3, [pc, #140]	@ (8003698 <SystemClock_Config+0xd4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <SystemClock_Config+0xd4>)
 8003612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <SystemClock_Config+0xd4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003624:	2302      	movs	r3, #2
 8003626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003628:	2301      	movs	r3, #1
 800362a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800362c:	2310      	movs	r3, #16
 800362e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003630:	2302      	movs	r3, #2
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003638:	230f      	movs	r3, #15
 800363a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800363c:	2390      	movs	r3, #144	@ 0x90
 800363e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003640:	2302      	movs	r3, #2
 8003642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003644:	2305      	movs	r3, #5
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	4618      	mov	r0, r3
 800364e:	f003 f9a9 	bl	80069a4 <HAL_RCC_OscConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003658:	f000 fd1c 	bl	8004094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800365c:	230f      	movs	r3, #15
 800365e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003660:	2302      	movs	r3, #2
 8003662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003668:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800366c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800366e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f003 fc0a 	bl	8006e94 <HAL_RCC_ClockConfig>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003686:	f000 fd05 	bl	8004094 <Error_Handler>
  }
}
 800368a:	bf00      	nop
 800368c:	3750      	adds	r7, #80	@ 0x50
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40007000 	.word	0x40007000

0800369c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036a2:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <MX_CAN1_Init+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036a8:	220a      	movs	r2, #10
 80036aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80036ac:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80036b2:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036ba:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80036be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80036c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036c2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80036c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80036c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80036d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036dc:	2200      	movs	r2, #0
 80036de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80036e0:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80036ec:	4804      	ldr	r0, [pc, #16]	@ (8003700 <MX_CAN1_Init+0x64>)
 80036ee:	f001 fa1b 	bl	8004b28 <HAL_CAN_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80036f8:	f000 fccc 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000ce4 	.word	0x20000ce4
 8003704:	40006400 	.word	0x40006400

08003708 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800370c:	4b16      	ldr	r3, [pc, #88]	@ (8003768 <MX_CAN2_Init+0x60>)
 800370e:	4a17      	ldr	r2, [pc, #92]	@ (800376c <MX_CAN2_Init+0x64>)
 8003710:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003714:	2210      	movs	r2, #16
 8003716:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <MX_CAN2_Init+0x60>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003724:	4b10      	ldr	r3, [pc, #64]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800372a:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <MX_CAN2_Init+0x60>)
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003730:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003732:	2200      	movs	r2, #0
 8003734:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003738:	2200      	movs	r2, #0
 800373a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800373c:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <MX_CAN2_Init+0x60>)
 800373e:	2200      	movs	r2, #0
 8003740:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003744:	2200      	movs	r2, #0
 8003746:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <MX_CAN2_Init+0x60>)
 800374a:	2200      	movs	r2, #0
 800374c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003750:	2200      	movs	r2, #0
 8003752:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003754:	4804      	ldr	r0, [pc, #16]	@ (8003768 <MX_CAN2_Init+0x60>)
 8003756:	f001 f9e7 	bl	8004b28 <HAL_CAN_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8003760:	f000 fc98 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000d0c 	.word	0x20000d0c
 800376c:	40006800 	.word	0x40006800

08003770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <MX_I2C1_Init+0x74>)
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <MX_I2C1_Init+0x78>)
 8003778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800377a:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <MX_I2C1_Init+0x74>)
 800377c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ec <MX_I2C1_Init+0x7c>)
 800377e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <MX_I2C1_Init+0x74>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003786:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <MX_I2C1_Init+0x74>)
 8003788:	2200      	movs	r2, #0
 800378a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800378c:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <MX_I2C1_Init+0x74>)
 800378e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003794:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <MX_I2C1_Init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800379a:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <MX_I2C1_Init+0x74>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <MX_I2C1_Init+0x74>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a6:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <MX_I2C1_Init+0x74>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ac:	480d      	ldr	r0, [pc, #52]	@ (80037e4 <MX_I2C1_Init+0x74>)
 80037ae:	f002 f859 	bl	8005864 <HAL_I2C_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037b8:	f000 fc6c 	bl	8004094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037bc:	2100      	movs	r1, #0
 80037be:	4809      	ldr	r0, [pc, #36]	@ (80037e4 <MX_I2C1_Init+0x74>)
 80037c0:	f003 f874 	bl	80068ac <HAL_I2CEx_ConfigAnalogFilter>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80037ca:	f000 fc63 	bl	8004094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037ce:	2100      	movs	r1, #0
 80037d0:	4804      	ldr	r0, [pc, #16]	@ (80037e4 <MX_I2C1_Init+0x74>)
 80037d2:	f003 f8a7 	bl	8006924 <HAL_I2CEx_ConfigDigitalFilter>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80037dc:	f000 fc5a 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000d34 	.word	0x20000d34
 80037e8:	40005400 	.word	0x40005400
 80037ec:	000186a0 	.word	0x000186a0

080037f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <MX_I2C2_Init+0x74>)
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <MX_I2C2_Init+0x78>)
 80037f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003864 <MX_I2C2_Init+0x74>)
 80037fc:	4a1b      	ldr	r2, [pc, #108]	@ (800386c <MX_I2C2_Init+0x7c>)
 80037fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003800:	4b18      	ldr	r3, [pc, #96]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003806:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800380c:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <MX_I2C2_Init+0x74>)
 800380e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003812:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003814:	4b13      	ldr	r3, [pc, #76]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <MX_I2C2_Init+0x74>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003820:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003826:	4b0f      	ldr	r3, [pc, #60]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800382c:	480d      	ldr	r0, [pc, #52]	@ (8003864 <MX_I2C2_Init+0x74>)
 800382e:	f002 f819 	bl	8005864 <HAL_I2C_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003838:	f000 fc2c 	bl	8004094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800383c:	2100      	movs	r1, #0
 800383e:	4809      	ldr	r0, [pc, #36]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003840:	f003 f834 	bl	80068ac <HAL_I2CEx_ConfigAnalogFilter>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800384a:	f000 fc23 	bl	8004094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800384e:	2100      	movs	r1, #0
 8003850:	4804      	ldr	r0, [pc, #16]	@ (8003864 <MX_I2C2_Init+0x74>)
 8003852:	f003 f867 	bl	8006924 <HAL_I2CEx_ConfigDigitalFilter>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800385c:	f000 fc1a 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000d88 	.word	0x20000d88
 8003868:	40005800 	.word	0x40005800
 800386c:	00061a80 	.word	0x00061a80

08003870 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <MX_I2C3_Init+0x74>)
 8003876:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <MX_I2C3_Init+0x78>)
 8003878:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <MX_I2C3_Init+0x74>)
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <MX_I2C3_Init+0x7c>)
 800387e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003880:	4b18      	ldr	r3, [pc, #96]	@ (80038e4 <MX_I2C3_Init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <MX_I2C3_Init+0x74>)
 8003888:	2200      	movs	r2, #0
 800388a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800388c:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <MX_I2C3_Init+0x74>)
 800388e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003892:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <MX_I2C3_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800389a:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <MX_I2C3_Init+0x74>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <MX_I2C3_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038a6:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <MX_I2C3_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80038ac:	480d      	ldr	r0, [pc, #52]	@ (80038e4 <MX_I2C3_Init+0x74>)
 80038ae:	f001 ffd9 	bl	8005864 <HAL_I2C_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80038b8:	f000 fbec 	bl	8004094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038bc:	2100      	movs	r1, #0
 80038be:	4809      	ldr	r0, [pc, #36]	@ (80038e4 <MX_I2C3_Init+0x74>)
 80038c0:	f002 fff4 	bl	80068ac <HAL_I2CEx_ConfigAnalogFilter>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80038ca:	f000 fbe3 	bl	8004094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80038ce:	2100      	movs	r1, #0
 80038d0:	4804      	ldr	r0, [pc, #16]	@ (80038e4 <MX_I2C3_Init+0x74>)
 80038d2:	f003 f827 	bl	8006924 <HAL_I2CEx_ConfigDigitalFilter>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80038dc:	f000 fbda 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000ddc 	.word	0x20000ddc
 80038e8:	40005c00 	.word	0x40005c00
 80038ec:	00061a80 	.word	0x00061a80

080038f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038f4:	4b17      	ldr	r3, [pc, #92]	@ (8003954 <MX_SPI1_Init+0x64>)
 80038f6:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <MX_SPI1_Init+0x68>)
 80038f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <MX_SPI1_Init+0x64>)
 80038fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003902:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <MX_SPI1_Init+0x64>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003914:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003916:	2201      	movs	r2, #1
 8003918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800391a:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <MX_SPI1_Init+0x64>)
 800391c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003924:	2228      	movs	r2, #40	@ 0x28
 8003926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <MX_SPI1_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003930:	2200      	movs	r2, #0
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <MX_SPI1_Init+0x64>)
 800393c:	220a      	movs	r2, #10
 800393e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003940:	4804      	ldr	r0, [pc, #16]	@ (8003954 <MX_SPI1_Init+0x64>)
 8003942:	f003 fc87 	bl	8007254 <HAL_SPI_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800394c:	f000 fba2 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000e30 	.word	0x20000e30
 8003958:	40013000 	.word	0x40013000

0800395c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003960:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003962:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <MX_SPI2_Init+0x68>)
 8003964:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003966:	4b16      	ldr	r3, [pc, #88]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800396c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800396e:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800397a:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <MX_SPI2_Init+0x64>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003982:	2201      	movs	r2, #1
 8003984:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003990:	2218      	movs	r2, #24
 8003992:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003994:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <MX_SPI2_Init+0x64>)
 8003996:	2200      	movs	r2, #0
 8003998:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <MX_SPI2_Init+0x64>)
 800399c:	2200      	movs	r2, #0
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <MX_SPI2_Init+0x64>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039a6:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <MX_SPI2_Init+0x64>)
 80039a8:	220a      	movs	r2, #10
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039ac:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <MX_SPI2_Init+0x64>)
 80039ae:	f003 fc51 	bl	8007254 <HAL_SPI_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039b8:	f000 fb6c 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000e88 	.word	0x20000e88
 80039c4:	40003800 	.word	0x40003800

080039c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80039cc:	4b17      	ldr	r3, [pc, #92]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039ce:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <MX_SPI3_Init+0x68>)
 80039d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e6:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <MX_SPI3_Init+0x64>)
 80039fc:	2220      	movs	r2, #32
 80039fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <MX_SPI3_Init+0x64>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <MX_SPI3_Init+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <MX_SPI3_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <MX_SPI3_Init+0x64>)
 8003a14:	220a      	movs	r2, #10
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a18:	4804      	ldr	r0, [pc, #16]	@ (8003a2c <MX_SPI3_Init+0x64>)
 8003a1a:	f003 fc1b 	bl	8007254 <HAL_SPI_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a24:	f000 fb36 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000ee0 	.word	0x20000ee0
 8003a30:	40003c00 	.word	0x40003c00

08003a34 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003a38:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <MX_SPI4_Init+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a44:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003a46:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a52:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a64:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003a66:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a68:	2230      	movs	r2, #48	@ 0x30
 8003a6a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a80:	220a      	movs	r2, #10
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003a84:	4804      	ldr	r0, [pc, #16]	@ (8003a98 <MX_SPI4_Init+0x64>)
 8003a86:	f003 fbe5 	bl	8007254 <HAL_SPI_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003a90:	f000 fb00 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000f38 	.word	0x20000f38
 8003a9c:	40013400 	.word	0x40013400

08003aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003aa6:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <MX_USART1_UART_Init+0x50>)
 8003aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003ac6:	220c      	movs	r2, #12
 8003ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ad6:	4805      	ldr	r0, [pc, #20]	@ (8003aec <MX_USART1_UART_Init+0x4c>)
 8003ad8:	f004 f80e 	bl	8007af8 <HAL_UART_Init>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ae2:	f000 fad7 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000f90 	.word	0x20000f90
 8003af0:	40011000 	.word	0x40011000

08003af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <MX_USART2_UART_Init+0x50>)
 8003afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b1a:	220c      	movs	r2, #12
 8003b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <MX_USART2_UART_Init+0x4c>)
 8003b2c:	f003 ffe4 	bl	8007af8 <HAL_UART_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b36:	f000 faad 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000fd8 	.word	0x20000fd8
 8003b44:	40004400 	.word	0x40004400

08003b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b4c:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b4e:	4a12      	ldr	r2, [pc, #72]	@ (8003b98 <MX_USART3_UART_Init+0x50>)
 8003b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b52:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b6e:	220c      	movs	r2, #12
 8003b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b7e:	4805      	ldr	r0, [pc, #20]	@ (8003b94 <MX_USART3_UART_Init+0x4c>)
 8003b80:	f003 ffba 	bl	8007af8 <HAL_UART_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b8a:	f000 fa83 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20001020 	.word	0x20001020
 8003b98:	40004800 	.word	0x40004800

08003b9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <MX_USART6_UART_Init+0x50>)
 8003ba4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003bac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003bd2:	4805      	ldr	r0, [pc, #20]	@ (8003be8 <MX_USART6_UART_Init+0x4c>)
 8003bd4:	f003 ff90 	bl	8007af8 <HAL_UART_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003bde:	f000 fa59 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20001068 	.word	0x20001068
 8003bec:	40011400 	.word	0x40011400

08003bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	@ 0x38
 8003bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	4bb6      	ldr	r3, [pc, #728]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4ab5      	ldr	r2, [pc, #724]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c10:	f043 0310 	orr.w	r3, r3, #16
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4bb3      	ldr	r3, [pc, #716]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	4baf      	ldr	r3, [pc, #700]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4aae      	ldr	r2, [pc, #696]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4bac      	ldr	r3, [pc, #688]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	4ba8      	ldr	r3, [pc, #672]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4ba5      	ldr	r3, [pc, #660]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4aa0      	ldr	r2, [pc, #640]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c64:	f043 0320 	orr.w	r3, r3, #32
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	4b9a      	ldr	r3, [pc, #616]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	4a99      	ldr	r2, [pc, #612]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c86:	4b97      	ldr	r3, [pc, #604]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b93      	ldr	r3, [pc, #588]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	4a92      	ldr	r2, [pc, #584]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca2:	4b90      	ldr	r3, [pc, #576]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	4a8b      	ldr	r2, [pc, #556]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbe:	4b89      	ldr	r3, [pc, #548]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	4b85      	ldr	r3, [pc, #532]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	4a84      	ldr	r2, [pc, #528]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cda:	4b82      	ldr	r3, [pc, #520]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee4 <MX_GPIO_Init+0x2f4>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003d02:	2201      	movs	r2, #1
 8003d04:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8003d08:	4877      	ldr	r0, [pc, #476]	@ (8003ee8 <MX_GPIO_Init+0x2f8>)
 8003d0a:	f001 fd91 	bl	8005830 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003d14:	4875      	ldr	r0, [pc, #468]	@ (8003eec <MX_GPIO_Init+0x2fc>)
 8003d16:	f001 fd8b 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f242 0133 	movw	r1, #8243	@ 0x2033
 8003d20:	4873      	ldr	r0, [pc, #460]	@ (8003ef0 <MX_GPIO_Init+0x300>)
 8003d22:	f001 fd85 	bl	8005830 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 8003d26:	2200      	movs	r2, #0
 8003d28:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8003d2c:	486f      	ldr	r0, [pc, #444]	@ (8003eec <MX_GPIO_Init+0x2fc>)
 8003d2e:	f001 fd7f 	bl	8005830 <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 8003d32:	2201      	movs	r2, #1
 8003d34:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8003d38:	486e      	ldr	r0, [pc, #440]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003d3a:	f001 fd79 	bl	8005830 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8003d44:	486b      	ldr	r0, [pc, #428]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003d46:	f001 fd73 	bl	8005830 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	486a      	ldr	r0, [pc, #424]	@ (8003ef8 <MX_GPIO_Init+0x308>)
 8003d50:	f001 fd6e 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2102      	movs	r1, #2
 8003d58:	4867      	ldr	r0, [pc, #412]	@ (8003ef8 <MX_GPIO_Init+0x308>)
 8003d5a:	f001 fd69 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 8003d64:	4865      	ldr	r0, [pc, #404]	@ (8003efc <MX_GPIO_Init+0x30c>)
 8003d66:	f001 fd63 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f648 0103 	movw	r1, #34819	@ 0x8803
 8003d70:	4863      	ldr	r0, [pc, #396]	@ (8003f00 <MX_GPIO_Init+0x310>)
 8003d72:	f001 fd5d 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 8003d76:	2201      	movs	r2, #1
 8003d78:	2103      	movs	r1, #3
 8003d7a:	4862      	ldr	r0, [pc, #392]	@ (8003f04 <MX_GPIO_Init+0x314>)
 8003d7c:	f001 fd58 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8003d80:	2200      	movs	r2, #0
 8003d82:	f648 0103 	movw	r1, #34819	@ 0x8803
 8003d86:	4858      	ldr	r0, [pc, #352]	@ (8003ee8 <MX_GPIO_Init+0x2f8>)
 8003d88:	f001 fd52 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f244 4138 	movw	r1, #17464	@ 0x4438
 8003d92:	485b      	ldr	r0, [pc, #364]	@ (8003f00 <MX_GPIO_Init+0x310>)
 8003d94:	f001 fd4c 	bl	8005830 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003d9e:	4857      	ldr	r0, [pc, #348]	@ (8003efc <MX_GPIO_Init+0x30c>)
 8003da0:	f001 fd46 	bl	8005830 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003da4:	2201      	movs	r2, #1
 8003da6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003daa:	4857      	ldr	r0, [pc, #348]	@ (8003f08 <MX_GPIO_Init+0x318>)
 8003dac:	f001 fd40 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin|DIP_SWITCH_01_Pin, GPIO_PIN_RESET);
 8003db0:	2200      	movs	r2, #0
 8003db2:	f640 011c 	movw	r1, #2076	@ 0x81c
 8003db6:	4854      	ldr	r0, [pc, #336]	@ (8003f08 <MX_GPIO_Init+0x318>)
 8003db8:	f001 fd3a 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8003dc2:	4850      	ldr	r0, [pc, #320]	@ (8003f04 <MX_GPIO_Init+0x314>)
 8003dc4:	f001 fd34 	bl	8005830 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dce:	4848      	ldr	r0, [pc, #288]	@ (8003ef0 <MX_GPIO_Init+0x300>)
 8003dd0:	f001 fd2e 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003dd4:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dea:	4619      	mov	r1, r3
 8003dec:	483e      	ldr	r0, [pc, #248]	@ (8003ee8 <MX_GPIO_Init+0x2f8>)
 8003dee:	f001 fb73 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8003df2:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4838      	ldr	r0, [pc, #224]	@ (8003eec <MX_GPIO_Init+0x2fc>)
 8003e0c:	f001 fb64 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8003e10:	f242 1330 	movw	r3, #8496	@ 0x2130
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e16:	2301      	movs	r3, #1
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e26:	4619      	mov	r1, r3
 8003e28:	4831      	ldr	r0, [pc, #196]	@ (8003ef0 <MX_GPIO_Init+0x300>)
 8003e2a:	f001 fb55 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8003e2e:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e44:	4619      	mov	r1, r3
 8003e46:	482b      	ldr	r0, [pc, #172]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003e48:	f001 fb46 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8003e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e60:	4619      	mov	r1, r3
 8003e62:	4824      	ldr	r0, [pc, #144]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003e64:	f001 fb38 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8003e68:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e72:	2301      	movs	r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e76:	2303      	movs	r3, #3
 8003e78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481c      	ldr	r0, [pc, #112]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003e82:	f001 fb29 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8003e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e90:	2302      	movs	r3, #2
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8003e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4815      	ldr	r0, [pc, #84]	@ (8003ef4 <MX_GPIO_Init+0x304>)
 8003ea0:	f001 fb1a 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003eac:	2302      	movs	r3, #2
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8003eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb8:	4619      	mov	r1, r3
 8003eba:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <MX_GPIO_Init+0x300>)
 8003ebc:	f001 fb0c 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8003ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <MX_GPIO_Init+0x300>)
 8003ed8:	f001 fafe 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e013      	b.n	8003f0c <MX_GPIO_Init+0x31c>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	40021400 	.word	0x40021400
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40021c00 	.word	0x40021c00
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40021800 	.word	0x40021800
 8003f08:	40020c00 	.word	0x40020c00
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f12:	2303      	movs	r3, #3
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4858      	ldr	r0, [pc, #352]	@ (8004080 <MX_GPIO_Init+0x490>)
 8003f1e:	f001 fadb 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8003f22:	2302      	movs	r3, #2
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f26:	2301      	movs	r3, #1
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f36:	4619      	mov	r1, r3
 8003f38:	4851      	ldr	r0, [pc, #324]	@ (8004080 <MX_GPIO_Init+0x490>)
 8003f3a:	f001 facd 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8003f3e:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f44:	2301      	movs	r3, #1
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f54:	4619      	mov	r1, r3
 8003f56:	484b      	ldr	r0, [pc, #300]	@ (8004084 <MX_GPIO_Init+0x494>)
 8003f58:	f001 fabe 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8003f5c:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f62:	2301      	movs	r3, #1
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f72:	4619      	mov	r1, r3
 8003f74:	4844      	ldr	r0, [pc, #272]	@ (8004088 <MX_GPIO_Init+0x498>)
 8003f76:	f001 faaf 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8003f7a:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f80:	2301      	movs	r3, #1
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f90:	4619      	mov	r1, r3
 8003f92:	483e      	ldr	r0, [pc, #248]	@ (800408c <MX_GPIO_Init+0x49c>)
 8003f94:	f001 faa0 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8003f98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8003faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4835      	ldr	r0, [pc, #212]	@ (8004088 <MX_GPIO_Init+0x498>)
 8003fb2:	f001 fa91 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8003fb6:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fcc:	4619      	mov	r1, r3
 8003fce:	482d      	ldr	r0, [pc, #180]	@ (8004084 <MX_GPIO_Init+0x494>)
 8003fd0:	f001 fa82 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8003fd4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fea:	4619      	mov	r1, r3
 8003fec:	4825      	ldr	r0, [pc, #148]	@ (8004084 <MX_GPIO_Init+0x494>)
 8003fee:	f001 fa73 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin
                           DIP_SWITCH_01_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin
 8003ff2:	f640 431c 	movw	r3, #3100	@ 0xc1c
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIP_SWITCH_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004008:	4619      	mov	r1, r3
 800400a:	4821      	ldr	r0, [pc, #132]	@ (8004090 <MX_GPIO_Init+0x4a0>)
 800400c:	f001 fa64 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8004010:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004016:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004024:	4619      	mov	r1, r3
 8004026:	481a      	ldr	r0, [pc, #104]	@ (8004090 <MX_GPIO_Init+0x4a0>)
 8004028:	f001 fa56 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 800402c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004032:	2300      	movs	r3, #0
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004036:	2301      	movs	r3, #1
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800403a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800403e:	4619      	mov	r1, r3
 8004040:	4810      	ldr	r0, [pc, #64]	@ (8004084 <MX_GPIO_Init+0x494>)
 8004042:	f001 fa49 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8004046:	23e0      	movs	r3, #224	@ 0xe0
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800404a:	2300      	movs	r3, #0
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004056:	4619      	mov	r1, r3
 8004058:	480d      	ldr	r0, [pc, #52]	@ (8004090 <MX_GPIO_Init+0x4a0>)
 800405a:	f001 fa3d 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 800405e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004064:	2300      	movs	r3, #0
 8004066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800406c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004070:	4619      	mov	r1, r3
 8004072:	4806      	ldr	r0, [pc, #24]	@ (800408c <MX_GPIO_Init+0x49c>)
 8004074:	f001 fa30 	bl	80054d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004078:	bf00      	nop
 800407a:	3738      	adds	r7, #56	@ 0x38
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40020000 	.word	0x40020000
 8004084:	40021c00 	.word	0x40021c00
 8004088:	40020400 	.word	0x40020400
 800408c:	40021800 	.word	0x40021800
 8004090:	40020c00 	.word	0x40020c00

08004094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004098:	b672      	cpsid	i
}
 800409a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <Error_Handler+0x8>

080040a0 <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
 80040c4:	460b      	mov	r3, r1
 80040c6:	71bb      	strb	r3, [r7, #6]
 80040c8:	4613      	mov	r3, r2
 80040ca:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <mcu_spiTransfer+0x5c>)
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e007      	b.n	80040ec <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <mcu_spiTransfer+0x60>)
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e00f      	b.n	800410c <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80040ec:	797b      	ldrb	r3, [r7, #5]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	9200      	str	r2, [sp, #0]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f003 fa77 	bl	80075ee <HAL_SPI_TransmitReceive>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000e30 	.word	0x20000e30
 8004118:	20000e88 	.word	0x20000e88

0800411c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_MspInit+0x4c>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	4a0f      	ldr	r2, [pc, #60]	@ (8004168 <HAL_MspInit+0x4c>)
 800412c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004130:	6453      	str	r3, [r2, #68]	@ 0x44
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <HAL_MspInit+0x4c>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <HAL_MspInit+0x4c>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <HAL_MspInit+0x4c>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	@ 0x40
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_MspInit+0x4c>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800

0800416c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	@ 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004174:	f107 031c 	add.w	r3, r7, #28
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a4a      	ldr	r2, [pc, #296]	@ (80042b4 <HAL_CAN_MspInit+0x148>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d145      	bne.n	800421a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a48      	ldr	r2, [pc, #288]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 8004196:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004198:	4b47      	ldr	r3, [pc, #284]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10d      	bne.n	80041bc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	4a44      	ldr	r2, [pc, #272]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b0:	4b42      	ldr	r3, [pc, #264]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	4b3e      	ldr	r3, [pc, #248]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	4a3d      	ldr	r2, [pc, #244]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041c6:	f043 0308 	orr.w	r3, r3, #8
 80041ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80041cc:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041d8:	2303      	movs	r3, #3
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80041e8:	2309      	movs	r3, #9
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	4619      	mov	r1, r3
 80041f2:	4833      	ldr	r0, [pc, #204]	@ (80042c0 <HAL_CAN_MspInit+0x154>)
 80041f4:	f001 f970 	bl	80054d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	2014      	movs	r0, #20
 80041fe:	f001 f8a2 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004202:	2014      	movs	r0, #20
 8004204:	f001 f8bb 	bl	800537e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	2015      	movs	r0, #21
 800420e:	f001 f89a 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004212:	2015      	movs	r0, #21
 8004214:	f001 f8b3 	bl	800537e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004218:	e048      	b.n	80042ac <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a29      	ldr	r2, [pc, #164]	@ (80042c4 <HAL_CAN_MspInit+0x158>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d143      	bne.n	80042ac <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	4b24      	ldr	r3, [pc, #144]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	4a23      	ldr	r2, [pc, #140]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 800422e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004232:	6413      	str	r3, [r2, #64]	@ 0x40
 8004234:	4b21      	ldr	r3, [pc, #132]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004240:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 8004248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800424a:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_CAN_MspInit+0x14c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d10d      	bne.n	800426e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	4a18      	ldr	r2, [pc, #96]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 800425c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004260:	6413      	str	r3, [r2, #64]	@ 0x40
 8004262:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	4a11      	ldr	r2, [pc, #68]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6313      	str	r3, [r2, #48]	@ 0x30
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <HAL_CAN_MspInit+0x150>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800428a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800428e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004298:	2303      	movs	r3, #3
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800429c:	2309      	movs	r3, #9
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a0:	f107 031c 	add.w	r3, r7, #28
 80042a4:	4619      	mov	r1, r3
 80042a6:	4808      	ldr	r0, [pc, #32]	@ (80042c8 <HAL_CAN_MspInit+0x15c>)
 80042a8:	f001 f916 	bl	80054d8 <HAL_GPIO_Init>
}
 80042ac:	bf00      	nop
 80042ae:	3730      	adds	r7, #48	@ 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40006400 	.word	0x40006400
 80042b8:	200012c8 	.word	0x200012c8
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40006800 	.word	0x40006800
 80042c8:	40020400 	.word	0x40020400

080042cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	@ 0x38
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a4c      	ldr	r2, [pc, #304]	@ (800441c <HAL_I2C_MspInit+0x150>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d12d      	bne.n	800434a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fe:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800430a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004310:	2312      	movs	r3, #18
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004318:	2303      	movs	r3, #3
 800431a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800431c:	2304      	movs	r3, #4
 800431e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004324:	4619      	mov	r1, r3
 8004326:	483f      	ldr	r0, [pc, #252]	@ (8004424 <HAL_I2C_MspInit+0x158>)
 8004328:	f001 f8d6 	bl	80054d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	4a3a      	ldr	r2, [pc, #232]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004336:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800433a:	6413      	str	r3, [r2, #64]	@ 0x40
 800433c:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004348:	e063      	b.n	8004412 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a36      	ldr	r2, [pc, #216]	@ (8004428 <HAL_I2C_MspInit+0x15c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d12c      	bne.n	80043ae <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	4a30      	ldr	r2, [pc, #192]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 800435e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004362:	6313      	str	r3, [r2, #48]	@ 0x30
 8004364:	4b2e      	ldr	r3, [pc, #184]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004370:	2330      	movs	r3, #48	@ 0x30
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004374:	2312      	movs	r3, #18
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004380:	2304      	movs	r3, #4
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004388:	4619      	mov	r1, r3
 800438a:	4828      	ldr	r0, [pc, #160]	@ (800442c <HAL_I2C_MspInit+0x160>)
 800438c:	f001 f8a4 	bl	80054d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 800439a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800439e:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]
}
 80043ac:	e031      	b.n	8004412 <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_I2C_MspInit+0x164>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12c      	bne.n	8004412 <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	4b18      	ldr	r3, [pc, #96]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	4a17      	ldr	r2, [pc, #92]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80043c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c8:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80043d4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043da:	2312      	movs	r3, #18
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e2:	2303      	movs	r3, #3
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043e6:	2304      	movs	r3, #4
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80043ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	480e      	ldr	r0, [pc, #56]	@ (800442c <HAL_I2C_MspInit+0x160>)
 80043f2:	f001 f871 	bl	80054d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004400:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004404:	6413      	str	r3, [r2, #64]	@ 0x40
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_I2C_MspInit+0x154>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	3738      	adds	r7, #56	@ 0x38
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40005400 	.word	0x40005400
 8004420:	40023800 	.word	0x40023800
 8004424:	40020400 	.word	0x40020400
 8004428:	40005800 	.word	0x40005800
 800442c:	40021c00 	.word	0x40021c00
 8004430:	40005c00 	.word	0x40005c00

08004434 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b090      	sub	sp, #64	@ 0x40
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6d      	ldr	r2, [pc, #436]	@ (8004608 <HAL_SPI_MspInit+0x1d4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d12c      	bne.n	80044b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800445a:	4b6c      	ldr	r3, [pc, #432]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	4a6b      	ldr	r2, [pc, #428]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004460:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004464:	6453      	str	r3, [r2, #68]	@ 0x44
 8004466:	4b69      	ldr	r3, [pc, #420]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
 8004476:	4b65      	ldr	r3, [pc, #404]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	4a64      	ldr	r2, [pc, #400]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6313      	str	r3, [r2, #48]	@ 0x30
 8004482:	4b62      	ldr	r3, [pc, #392]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800448e:	23e0      	movs	r3, #224	@ 0xe0
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004492:	2302      	movs	r3, #2
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449a:	2303      	movs	r3, #3
 800449c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800449e:	2305      	movs	r3, #5
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044a6:	4619      	mov	r1, r3
 80044a8:	4859      	ldr	r0, [pc, #356]	@ (8004610 <HAL_SPI_MspInit+0x1dc>)
 80044aa:	f001 f815 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80044ae:	e0a7      	b.n	8004600 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a57      	ldr	r2, [pc, #348]	@ (8004614 <HAL_SPI_MspInit+0x1e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d12c      	bne.n	8004514 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	4b53      	ldr	r3, [pc, #332]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a52      	ldr	r2, [pc, #328]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b50      	ldr	r3, [pc, #320]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	4b4c      	ldr	r3, [pc, #304]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	4a4b      	ldr	r2, [pc, #300]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e6:	4b49      	ldr	r3, [pc, #292]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80044f2:	230e      	movs	r3, #14
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fe:	2303      	movs	r3, #3
 8004500:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004502:	2305      	movs	r3, #5
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800450a:	4619      	mov	r1, r3
 800450c:	4842      	ldr	r0, [pc, #264]	@ (8004618 <HAL_SPI_MspInit+0x1e4>)
 800450e:	f000 ffe3 	bl	80054d8 <HAL_GPIO_Init>
}
 8004512:	e075      	b.n	8004600 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a40      	ldr	r2, [pc, #256]	@ (800461c <HAL_SPI_MspInit+0x1e8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d12d      	bne.n	800457a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	4b3a      	ldr	r3, [pc, #232]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	4a39      	ldr	r2, [pc, #228]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452c:	6413      	str	r3, [r2, #64]	@ 0x40
 800452e:	4b37      	ldr	r3, [pc, #220]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	4b33      	ldr	r3, [pc, #204]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a32      	ldr	r2, [pc, #200]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b30      	ldr	r3, [pc, #192]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004556:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455c:	2302      	movs	r3, #2
 800455e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004568:	2306      	movs	r3, #6
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004570:	4619      	mov	r1, r3
 8004572:	482b      	ldr	r0, [pc, #172]	@ (8004620 <HAL_SPI_MspInit+0x1ec>)
 8004574:	f000 ffb0 	bl	80054d8 <HAL_GPIO_Init>
}
 8004578:	e042      	b.n	8004600 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <HAL_SPI_MspInit+0x1f0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d13d      	bne.n	8004600 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	4b20      	ldr	r3, [pc, #128]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 800458a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 800458e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004592:	6453      	str	r3, [r2, #68]	@ 0x44
 8004594:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 8004596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80045aa:	f043 0310 	orr.w	r3, r3, #16
 80045ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b0:	4b16      	ldr	r3, [pc, #88]	@ (800460c <HAL_SPI_MspInit+0x1d8>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80045bc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80045c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ca:	2303      	movs	r3, #3
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80045ce:	2305      	movs	r3, #5
 80045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045d6:	4619      	mov	r1, r3
 80045d8:	4813      	ldr	r0, [pc, #76]	@ (8004628 <HAL_SPI_MspInit+0x1f4>)
 80045da:	f000 ff7d 	bl	80054d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80045de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80045f0:	2305      	movs	r3, #5
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045f8:	4619      	mov	r1, r3
 80045fa:	480b      	ldr	r0, [pc, #44]	@ (8004628 <HAL_SPI_MspInit+0x1f4>)
 80045fc:	f000 ff6c 	bl	80054d8 <HAL_GPIO_Init>
}
 8004600:	bf00      	nop
 8004602:	3740      	adds	r7, #64	@ 0x40
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40013000 	.word	0x40013000
 800460c:	40023800 	.word	0x40023800
 8004610:	40020000 	.word	0x40020000
 8004614:	40003800 	.word	0x40003800
 8004618:	40022000 	.word	0x40022000
 800461c:	40003c00 	.word	0x40003c00
 8004620:	40020800 	.word	0x40020800
 8004624:	40013400 	.word	0x40013400
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b090      	sub	sp, #64	@ 0x40
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a74      	ldr	r2, [pc, #464]	@ (800481c <HAL_UART_MspInit+0x1f0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d134      	bne.n	80046b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004652:	4b73      	ldr	r3, [pc, #460]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	4a72      	ldr	r2, [pc, #456]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004658:	f043 0310 	orr.w	r3, r3, #16
 800465c:	6453      	str	r3, [r2, #68]	@ 0x44
 800465e:	4b70      	ldr	r3, [pc, #448]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
 800466e:	4b6c      	ldr	r3, [pc, #432]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	4a6b      	ldr	r2, [pc, #428]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6313      	str	r3, [r2, #48]	@ 0x30
 800467a:	4b69      	ldr	r3, [pc, #420]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004686:	23c0      	movs	r3, #192	@ 0xc0
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2303      	movs	r3, #3
 8004694:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004696:	2307      	movs	r3, #7
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800469e:	4619      	mov	r1, r3
 80046a0:	4860      	ldr	r0, [pc, #384]	@ (8004824 <HAL_UART_MspInit+0x1f8>)
 80046a2:	f000 ff19 	bl	80054d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2025      	movs	r0, #37	@ 0x25
 80046ac:	f000 fe4b 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046b0:	2025      	movs	r0, #37	@ 0x25
 80046b2:	f000 fe64 	bl	800537e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80046b6:	e0ad      	b.n	8004814 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004828 <HAL_UART_MspInit+0x1fc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d134      	bne.n	800472c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	4b56      	ldr	r3, [pc, #344]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a55      	ldr	r2, [pc, #340]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d2:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046fa:	230c      	movs	r3, #12
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004706:	2303      	movs	r3, #3
 8004708:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800470a:	2307      	movs	r3, #7
 800470c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004712:	4619      	mov	r1, r3
 8004714:	4845      	ldr	r0, [pc, #276]	@ (800482c <HAL_UART_MspInit+0x200>)
 8004716:	f000 fedf 	bl	80054d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	2100      	movs	r1, #0
 800471e:	2026      	movs	r0, #38	@ 0x26
 8004720:	f000 fe11 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004724:	2026      	movs	r0, #38	@ 0x26
 8004726:	f000 fe2a 	bl	800537e <HAL_NVIC_EnableIRQ>
}
 800472a:	e073      	b.n	8004814 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3f      	ldr	r2, [pc, #252]	@ (8004830 <HAL_UART_MspInit+0x204>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d135      	bne.n	80047a2 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	4a38      	ldr	r2, [pc, #224]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004744:	6413      	str	r3, [r2, #64]	@ 0x40
 8004746:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	4b32      	ldr	r3, [pc, #200]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	4a31      	ldr	r2, [pc, #196]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	6313      	str	r3, [r2, #48]	@ 0x30
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800476e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004780:	2307      	movs	r3, #7
 8004782:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004788:	4619      	mov	r1, r3
 800478a:	482a      	ldr	r0, [pc, #168]	@ (8004834 <HAL_UART_MspInit+0x208>)
 800478c:	f000 fea4 	bl	80054d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	2027      	movs	r0, #39	@ 0x27
 8004796:	f000 fdd6 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800479a:	2027      	movs	r0, #39	@ 0x27
 800479c:	f000 fdef 	bl	800537e <HAL_NVIC_EnableIRQ>
}
 80047a0:	e038      	b.n	8004814 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a24      	ldr	r2, [pc, #144]	@ (8004838 <HAL_UART_MspInit+0x20c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d133      	bne.n	8004814 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80047bc:	4b18      	ldr	r3, [pc, #96]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <HAL_UART_MspInit+0x1f4>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047e4:	23c0      	movs	r3, #192	@ 0xc0
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e8:	2302      	movs	r3, #2
 80047ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f0:	2303      	movs	r3, #3
 80047f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047f4:	2308      	movs	r3, #8
 80047f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047fc:	4619      	mov	r1, r3
 80047fe:	480f      	ldr	r0, [pc, #60]	@ (800483c <HAL_UART_MspInit+0x210>)
 8004800:	f000 fe6a 	bl	80054d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004804:	2200      	movs	r2, #0
 8004806:	2100      	movs	r1, #0
 8004808:	2047      	movs	r0, #71	@ 0x47
 800480a:	f000 fd9c 	bl	8005346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800480e:	2047      	movs	r0, #71	@ 0x47
 8004810:	f000 fdb5 	bl	800537e <HAL_NVIC_EnableIRQ>
}
 8004814:	bf00      	nop
 8004816:	3740      	adds	r7, #64	@ 0x40
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40011000 	.word	0x40011000
 8004820:	40023800 	.word	0x40023800
 8004824:	40020400 	.word	0x40020400
 8004828:	40004400 	.word	0x40004400
 800482c:	40020000 	.word	0x40020000
 8004830:	40004800 	.word	0x40004800
 8004834:	40020c00 	.word	0x40020c00
 8004838:	40011400 	.word	0x40011400
 800483c:	40020800 	.word	0x40020800

08004840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <NMI_Handler+0x4>

08004848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <HardFault_Handler+0x4>

08004850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <MemManage_Handler+0x4>

08004858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <BusFault_Handler+0x4>

08004860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <UsageFault_Handler+0x4>

08004868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004896:	f000 f903 	bl	8004aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048a4:	4802      	ldr	r0, [pc, #8]	@ (80048b0 <CAN1_RX0_IRQHandler+0x10>)
 80048a6:	f000 fa3a 	bl	8004d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000ce4 	.word	0x20000ce4

080048b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048b8:	4802      	ldr	r0, [pc, #8]	@ (80048c4 <CAN1_RX1_IRQHandler+0x10>)
 80048ba:	f000 fa30 	bl	8004d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000ce4 	.word	0x20000ce4

080048c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048cc:	4802      	ldr	r0, [pc, #8]	@ (80048d8 <USART1_IRQHandler+0x10>)
 80048ce:	f003 f963 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000f90 	.word	0x20000f90

080048dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048e0:	4802      	ldr	r0, [pc, #8]	@ (80048ec <USART2_IRQHandler+0x10>)
 80048e2:	f003 f959 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000fd8 	.word	0x20000fd8

080048f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80048f4:	4802      	ldr	r0, [pc, #8]	@ (8004900 <USART3_IRQHandler+0x10>)
 80048f6:	f003 f94f 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20001020 	.word	0x20001020

08004904 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004908:	4802      	ldr	r0, [pc, #8]	@ (8004914 <USART6_IRQHandler+0x10>)
 800490a:	f003 f945 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20001068 	.word	0x20001068

08004918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004920:	4a14      	ldr	r2, [pc, #80]	@ (8004974 <_sbrk+0x5c>)
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <_sbrk+0x60>)
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800492c:	4b13      	ldr	r3, [pc, #76]	@ (800497c <_sbrk+0x64>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <_sbrk+0x64>)
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <_sbrk+0x68>)
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	d207      	bcs.n	8004958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004948:	f004 f9b0 	bl	8008cac <__errno>
 800494c:	4603      	mov	r3, r0
 800494e:	220c      	movs	r2, #12
 8004950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e009      	b.n	800496c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <_sbrk+0x64>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <_sbrk+0x64>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	4a05      	ldr	r2, [pc, #20]	@ (800497c <_sbrk+0x64>)
 8004968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20030000 	.word	0x20030000
 8004978:	00000400 	.word	0x00000400
 800497c:	200012cc 	.word	0x200012cc
 8004980:	20001430 	.word	0x20001430

08004984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <SystemInit+0x20>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	4a05      	ldr	r2, [pc, #20]	@ (80049a4 <SystemInit+0x20>)
 8004990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ac:	f7ff ffea 	bl	8004984 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049b0:	480c      	ldr	r0, [pc, #48]	@ (80049e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049b2:	490d      	ldr	r1, [pc, #52]	@ (80049e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049b4:	4a0d      	ldr	r2, [pc, #52]	@ (80049ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b8:	e002      	b.n	80049c0 <LoopCopyDataInit>

080049ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049be:	3304      	adds	r3, #4

080049c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c4:	d3f9      	bcc.n	80049ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049c8:	4c0a      	ldr	r4, [pc, #40]	@ (80049f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049cc:	e001      	b.n	80049d2 <LoopFillZerobss>

080049ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d0:	3204      	adds	r2, #4

080049d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d4:	d3fb      	bcc.n	80049ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80049d6:	f004 f96f 	bl	8008cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049da:	f7fe fd29 	bl	8003430 <main>
  bx  lr    
 80049de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80049e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80049e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e8:	2000082c 	.word	0x2000082c
  ldr r2, =_sidata
 80049ec:	0800db0c 	.word	0x0800db0c
  ldr r2, =_sbss
 80049f0:	2000082c 	.word	0x2000082c
  ldr r4, =_ebss
 80049f4:	20001430 	.word	0x20001430

080049f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f8:	e7fe      	b.n	80049f8 <ADC_IRQHandler>
	...

080049fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a00:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <HAL_Init+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	@ (8004a3c <HAL_Init+0x40>)
 8004a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_Init+0x40>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_Init+0x40>)
 8004a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a18:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a07      	ldr	r2, [pc, #28]	@ (8004a3c <HAL_Init+0x40>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f000 fc83 	bl	8005330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2a:	200f      	movs	r0, #15
 8004a2c:	f000 f808 	bl	8004a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a30:	f7ff fb74 	bl	800411c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a48:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_InitTick+0x54>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_InitTick+0x58>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fc9b 	bl	800539a <HAL_SYSTICK_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d80a      	bhi.n	8004a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f000 fc63 	bl	8005346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a80:	4a06      	ldr	r2, [pc, #24]	@ (8004a9c <HAL_InitTick+0x5c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200007bc 	.word	0x200007bc
 8004a98:	200007c4 	.word	0x200007c4
 8004a9c:	200007c0 	.word	0x200007c0

08004aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_IncTick+0x20>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	200007c4 	.word	0x200007c4
 8004ac4:	200012d0 	.word	0x200012d0

08004ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b03      	ldr	r3, [pc, #12]	@ (8004adc <HAL_GetTick+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200012d0 	.word	0x200012d0

08004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff ffee 	bl	8004ac8 <HAL_GetTick>
 8004aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d005      	beq.n	8004b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_Delay+0x44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b06:	bf00      	nop
 8004b08:	f7ff ffde 	bl	8004ac8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8f7      	bhi.n	8004b08 <HAL_Delay+0x28>
  {
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200007c4 	.word	0x200007c4

08004b28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0ed      	b.n	8004d16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fb10 	bl	800416c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b5c:	f7ff ffb4 	bl	8004ac8 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b62:	e012      	b.n	8004b8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b64:	f7ff ffb0 	bl	8004ac8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b0a      	cmp	r3, #10
 8004b70:	d90b      	bls.n	8004b8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2205      	movs	r2, #5
 8004b82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0c5      	b.n	8004d16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0e5      	beq.n	8004b64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0202 	bic.w	r2, r2, #2
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba8:	f7ff ff8e 	bl	8004ac8 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bae:	e012      	b.n	8004bd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bb0:	f7ff ff8a 	bl	8004ac8 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b0a      	cmp	r3, #10
 8004bbc:	d90b      	bls.n	8004bd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2205      	movs	r2, #5
 8004bce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e09f      	b.n	8004d16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7e1b      	ldrb	r3, [r3, #24]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d108      	bne.n	8004bfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e007      	b.n	8004c0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7e5b      	ldrb	r3, [r3, #25]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e007      	b.n	8004c38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	7e9b      	ldrb	r3, [r3, #26]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d108      	bne.n	8004c52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0220 	orr.w	r2, r2, #32
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e007      	b.n	8004c62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0220 	bic.w	r2, r2, #32
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7edb      	ldrb	r3, [r3, #27]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0210 	bic.w	r2, r2, #16
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e007      	b.n	8004c8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0210 	orr.w	r2, r2, #16
 8004c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7f1b      	ldrb	r3, [r3, #28]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d108      	bne.n	8004ca6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e007      	b.n	8004cb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0208 	bic.w	r2, r2, #8
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7f5b      	ldrb	r3, [r3, #29]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d108      	bne.n	8004cd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0204 	orr.w	r2, r2, #4
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e007      	b.n	8004ce0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0204 	bic.w	r2, r2, #4
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b08a      	sub	sp, #40	@ 0x28
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d07c      	beq.n	8004e5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d023      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f983 	bl	800508c <HAL_CAN_TxMailbox0CompleteCallback>
 8004d86:	e016      	b.n	8004db6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9a:	e00c      	b.n	8004db6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dae:	e002      	b.n	8004db6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f989 	bl	80050c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d024      	beq.n	8004e0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f963 	bl	80050a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8004dda:	e016      	b.n	8004e0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dee:	e00c      	b.n	8004e0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e002      	b.n	8004e0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f969 	bl	80050dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d024      	beq.n	8004e5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004e1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f943 	bl	80050b4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004e2e:	e016      	b.n	8004e5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	e00c      	b.n	8004e5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e56:	e002      	b.n	8004e5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f949 	bl	80050f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f93a 	bl	8005118 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f921 	bl	8005104 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00c      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2210      	movs	r2, #16
 8004ee4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2208      	movs	r2, #8
 8004f00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f91c 	bl	8005140 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f903 	bl	800512c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d006      	beq.n	8004f48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2210      	movs	r2, #16
 8004f40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f906 	bl	8005154 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2208      	movs	r2, #8
 8004f62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f8ff 	bl	8005168 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d07b      	beq.n	800506c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d072      	beq.n	8005064 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	f043 0304 	orr.w	r3, r3, #4
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d043      	beq.n	8005064 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d03e      	beq.n	8005064 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fec:	2b60      	cmp	r3, #96	@ 0x60
 8004fee:	d02b      	beq.n	8005048 <HAL_CAN_IRQHandler+0x32a>
 8004ff0:	2b60      	cmp	r3, #96	@ 0x60
 8004ff2:	d82e      	bhi.n	8005052 <HAL_CAN_IRQHandler+0x334>
 8004ff4:	2b50      	cmp	r3, #80	@ 0x50
 8004ff6:	d022      	beq.n	800503e <HAL_CAN_IRQHandler+0x320>
 8004ff8:	2b50      	cmp	r3, #80	@ 0x50
 8004ffa:	d82a      	bhi.n	8005052 <HAL_CAN_IRQHandler+0x334>
 8004ffc:	2b40      	cmp	r3, #64	@ 0x40
 8004ffe:	d019      	beq.n	8005034 <HAL_CAN_IRQHandler+0x316>
 8005000:	2b40      	cmp	r3, #64	@ 0x40
 8005002:	d826      	bhi.n	8005052 <HAL_CAN_IRQHandler+0x334>
 8005004:	2b30      	cmp	r3, #48	@ 0x30
 8005006:	d010      	beq.n	800502a <HAL_CAN_IRQHandler+0x30c>
 8005008:	2b30      	cmp	r3, #48	@ 0x30
 800500a:	d822      	bhi.n	8005052 <HAL_CAN_IRQHandler+0x334>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d002      	beq.n	8005016 <HAL_CAN_IRQHandler+0x2f8>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d005      	beq.n	8005020 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005014:	e01d      	b.n	8005052 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	f043 0308 	orr.w	r3, r3, #8
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800501e:	e019      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	f043 0310 	orr.w	r3, r3, #16
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005028:	e014      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005032:	e00f      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800503c:	e00a      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005046:	e005      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005050:	e000      	b.n	8005054 <HAL_CAN_IRQHandler+0x336>
            break;
 8005052:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005062:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2204      	movs	r2, #4
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f87c 	bl	800517c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005084:	bf00      	nop
 8005086:	3728      	adds	r7, #40	@ 0x28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <__NVIC_SetPriorityGrouping+0x44>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051ac:	4013      	ands	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051c2:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <__NVIC_SetPriorityGrouping+0x44>)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	60d3      	str	r3, [r2, #12]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051dc:	4b04      	ldr	r3, [pc, #16]	@ (80051f0 <__NVIC_GetPriorityGrouping+0x18>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	f003 0307 	and.w	r3, r3, #7
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	db0b      	blt.n	800521e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	f003 021f 	and.w	r2, r3, #31
 800520c:	4907      	ldr	r1, [pc, #28]	@ (800522c <__NVIC_EnableIRQ+0x38>)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2001      	movs	r0, #1
 8005216:	fa00 f202 	lsl.w	r2, r0, r2
 800521a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000e100 	.word	0xe000e100

08005230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	2b00      	cmp	r3, #0
 8005242:	db0a      	blt.n	800525a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	490c      	ldr	r1, [pc, #48]	@ (800527c <__NVIC_SetPriority+0x4c>)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	0112      	lsls	r2, r2, #4
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	440b      	add	r3, r1
 8005254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005258:	e00a      	b.n	8005270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4908      	ldr	r1, [pc, #32]	@ (8005280 <__NVIC_SetPriority+0x50>)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	3b04      	subs	r3, #4
 8005268:	0112      	lsls	r2, r2, #4
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	440b      	add	r3, r1
 800526e:	761a      	strb	r2, [r3, #24]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000e100 	.word	0xe000e100
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	@ 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f1c3 0307 	rsb	r3, r3, #7
 800529e:	2b04      	cmp	r3, #4
 80052a0:	bf28      	it	cs
 80052a2:	2304      	movcs	r3, #4
 80052a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d902      	bls.n	80052b4 <NVIC_EncodePriority+0x30>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3b03      	subs	r3, #3
 80052b2:	e000      	b.n	80052b6 <NVIC_EncodePriority+0x32>
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b8:	f04f 32ff 	mov.w	r2, #4294967295
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43da      	mvns	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	401a      	ands	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052cc:	f04f 31ff 	mov.w	r1, #4294967295
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	43d9      	mvns	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052dc:	4313      	orrs	r3, r2
         );
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3724      	adds	r7, #36	@ 0x24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052fc:	d301      	bcc.n	8005302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052fe:	2301      	movs	r3, #1
 8005300:	e00f      	b.n	8005322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005302:	4a0a      	ldr	r2, [pc, #40]	@ (800532c <SysTick_Config+0x40>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800530a:	210f      	movs	r1, #15
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	f7ff ff8e 	bl	8005230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <SysTick_Config+0x40>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800531a:	4b04      	ldr	r3, [pc, #16]	@ (800532c <SysTick_Config+0x40>)
 800531c:	2207      	movs	r2, #7
 800531e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	e000e010 	.word	0xe000e010

08005330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff29 	bl	8005190 <__NVIC_SetPriorityGrouping>
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	4603      	mov	r3, r0
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005358:	f7ff ff3e 	bl	80051d8 <__NVIC_GetPriorityGrouping>
 800535c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f7ff ff8e 	bl	8005284 <NVIC_EncodePriority>
 8005368:	4602      	mov	r2, r0
 800536a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff ff5d 	bl	8005230 <__NVIC_SetPriority>
}
 8005376:	bf00      	nop
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff31 	bl	80051f4 <__NVIC_EnableIRQ>
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff ffa2 	bl	80052ec <SysTick_Config>
 80053a8:	4603      	mov	r3, r0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053c0:	f7ff fb82 	bl	8004ac8 <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d008      	beq.n	80053e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2280      	movs	r2, #128	@ 0x80
 80053d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e052      	b.n	800548a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0216 	bic.w	r2, r2, #22
 80053f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <HAL_DMA_Abort+0x62>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0208 	bic.w	r2, r2, #8
 8005422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005434:	e013      	b.n	800545e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005436:	f7ff fb47 	bl	8004ac8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b05      	cmp	r3, #5
 8005442:	d90c      	bls.n	800545e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2203      	movs	r2, #3
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e015      	b.n	800548a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e4      	bne.n	8005436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005470:	223f      	movs	r2, #63	@ 0x3f
 8005472:	409a      	lsls	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d004      	beq.n	80054b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2280      	movs	r2, #128	@ 0x80
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e00c      	b.n	80054ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2205      	movs	r2, #5
 80054b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	@ 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e177      	b.n	80057e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054f4:	2201      	movs	r2, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	f040 8166 	bne.w	80057de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d005      	beq.n	800552a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005526:	2b02      	cmp	r3, #2
 8005528:	d130      	bne.n	800558c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2203      	movs	r2, #3
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4013      	ands	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005560:	2201      	movs	r2, #1
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 0201 	and.w	r2, r3, #1
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d017      	beq.n	80055c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d123      	bne.n	800561c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	220f      	movs	r2, #15
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	08da      	lsrs	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3208      	adds	r2, #8
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	2203      	movs	r2, #3
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80c0 	beq.w	80057de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	4b66      	ldr	r3, [pc, #408]	@ (80057fc <HAL_GPIO_Init+0x324>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	4a65      	ldr	r2, [pc, #404]	@ (80057fc <HAL_GPIO_Init+0x324>)
 8005668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800566c:	6453      	str	r3, [r2, #68]	@ 0x44
 800566e:	4b63      	ldr	r3, [pc, #396]	@ (80057fc <HAL_GPIO_Init+0x324>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800567a:	4a61      	ldr	r2, [pc, #388]	@ (8005800 <HAL_GPIO_Init+0x328>)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	089b      	lsrs	r3, r3, #2
 8005680:	3302      	adds	r3, #2
 8005682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	220f      	movs	r2, #15
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a58      	ldr	r2, [pc, #352]	@ (8005804 <HAL_GPIO_Init+0x32c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d037      	beq.n	8005716 <HAL_GPIO_Init+0x23e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a57      	ldr	r2, [pc, #348]	@ (8005808 <HAL_GPIO_Init+0x330>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_GPIO_Init+0x23a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a56      	ldr	r2, [pc, #344]	@ (800580c <HAL_GPIO_Init+0x334>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02b      	beq.n	800570e <HAL_GPIO_Init+0x236>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a55      	ldr	r2, [pc, #340]	@ (8005810 <HAL_GPIO_Init+0x338>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d025      	beq.n	800570a <HAL_GPIO_Init+0x232>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a54      	ldr	r2, [pc, #336]	@ (8005814 <HAL_GPIO_Init+0x33c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <HAL_GPIO_Init+0x22e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a53      	ldr	r2, [pc, #332]	@ (8005818 <HAL_GPIO_Init+0x340>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d019      	beq.n	8005702 <HAL_GPIO_Init+0x22a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a52      	ldr	r2, [pc, #328]	@ (800581c <HAL_GPIO_Init+0x344>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_GPIO_Init+0x226>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a51      	ldr	r2, [pc, #324]	@ (8005820 <HAL_GPIO_Init+0x348>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00d      	beq.n	80056fa <HAL_GPIO_Init+0x222>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a50      	ldr	r2, [pc, #320]	@ (8005824 <HAL_GPIO_Init+0x34c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x21e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005828 <HAL_GPIO_Init+0x350>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_GPIO_Init+0x21a>
 80056ee:	2309      	movs	r3, #9
 80056f0:	e012      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056f2:	230a      	movs	r3, #10
 80056f4:	e010      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056f6:	2308      	movs	r3, #8
 80056f8:	e00e      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056fa:	2307      	movs	r3, #7
 80056fc:	e00c      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056fe:	2306      	movs	r3, #6
 8005700:	e00a      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005702:	2305      	movs	r3, #5
 8005704:	e008      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005706:	2304      	movs	r3, #4
 8005708:	e006      	b.n	8005718 <HAL_GPIO_Init+0x240>
 800570a:	2303      	movs	r3, #3
 800570c:	e004      	b.n	8005718 <HAL_GPIO_Init+0x240>
 800570e:	2302      	movs	r3, #2
 8005710:	e002      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005716:	2300      	movs	r3, #0
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	f002 0203 	and.w	r2, r2, #3
 800571e:	0092      	lsls	r2, r2, #2
 8005720:	4093      	lsls	r3, r2
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005728:	4935      	ldr	r1, [pc, #212]	@ (8005800 <HAL_GPIO_Init+0x328>)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	3302      	adds	r3, #2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005736:	4b3d      	ldr	r3, [pc, #244]	@ (800582c <HAL_GPIO_Init+0x354>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800575a:	4a34      	ldr	r2, [pc, #208]	@ (800582c <HAL_GPIO_Init+0x354>)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005760:	4b32      	ldr	r3, [pc, #200]	@ (800582c <HAL_GPIO_Init+0x354>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005784:	4a29      	ldr	r2, [pc, #164]	@ (800582c <HAL_GPIO_Init+0x354>)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <HAL_GPIO_Init+0x354>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ae:	4a1f      	ldr	r2, [pc, #124]	@ (800582c <HAL_GPIO_Init+0x354>)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b4:	4b1d      	ldr	r3, [pc, #116]	@ (800582c <HAL_GPIO_Init+0x354>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057d8:	4a14      	ldr	r2, [pc, #80]	@ (800582c <HAL_GPIO_Init+0x354>)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	f67f ae84 	bls.w	80054f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	40013800 	.word	0x40013800
 8005804:	40020000 	.word	0x40020000
 8005808:	40020400 	.word	0x40020400
 800580c:	40020800 	.word	0x40020800
 8005810:	40020c00 	.word	0x40020c00
 8005814:	40021000 	.word	0x40021000
 8005818:	40021400 	.word	0x40021400
 800581c:	40021800 	.word	0x40021800
 8005820:	40021c00 	.word	0x40021c00
 8005824:	40022000 	.word	0x40022000
 8005828:	40022400 	.word	0x40022400
 800582c:	40013c00 	.word	0x40013c00

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800584c:	e003      	b.n	8005856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	041a      	lsls	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e12b      	b.n	8005ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fe fd1e 	bl	80042cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	@ 0x24
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058c8:	f001 fc9c 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 80058cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4a81      	ldr	r2, [pc, #516]	@ (8005ad8 <HAL_I2C_Init+0x274>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d807      	bhi.n	80058e8 <HAL_I2C_Init+0x84>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4a80      	ldr	r2, [pc, #512]	@ (8005adc <HAL_I2C_Init+0x278>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	bf94      	ite	ls
 80058e0:	2301      	movls	r3, #1
 80058e2:	2300      	movhi	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e006      	b.n	80058f6 <HAL_I2C_Init+0x92>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a7d      	ldr	r2, [pc, #500]	@ (8005ae0 <HAL_I2C_Init+0x27c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bf94      	ite	ls
 80058f0:	2301      	movls	r3, #1
 80058f2:	2300      	movhi	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0e7      	b.n	8005ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a78      	ldr	r2, [pc, #480]	@ (8005ae4 <HAL_I2C_Init+0x280>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	0c9b      	lsrs	r3, r3, #18
 8005908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad8 <HAL_I2C_Init+0x274>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d802      	bhi.n	8005938 <HAL_I2C_Init+0xd4>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3301      	adds	r3, #1
 8005936:	e009      	b.n	800594c <HAL_I2C_Init+0xe8>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	4a69      	ldr	r2, [pc, #420]	@ (8005ae8 <HAL_I2C_Init+0x284>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	3301      	adds	r3, #1
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	430b      	orrs	r3, r1
 8005952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800595e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	495c      	ldr	r1, [pc, #368]	@ (8005ad8 <HAL_I2C_Init+0x274>)
 8005968:	428b      	cmp	r3, r1
 800596a:	d819      	bhi.n	80059a0 <HAL_I2C_Init+0x13c>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1e59      	subs	r1, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	fbb1 f3f3 	udiv	r3, r1, r3
 800597a:	1c59      	adds	r1, r3, #1
 800597c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005980:	400b      	ands	r3, r1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_I2C_Init+0x138>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1e59      	subs	r1, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fbb1 f3f3 	udiv	r3, r1, r3
 8005994:	3301      	adds	r3, #1
 8005996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599a:	e051      	b.n	8005a40 <HAL_I2C_Init+0x1dc>
 800599c:	2304      	movs	r3, #4
 800599e:	e04f      	b.n	8005a40 <HAL_I2C_Init+0x1dc>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d111      	bne.n	80059cc <HAL_I2C_Init+0x168>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e58      	subs	r0, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	440b      	add	r3, r1
 80059b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ba:	3301      	adds	r3, #1
 80059bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e012      	b.n	80059f2 <HAL_I2C_Init+0x18e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1e58      	subs	r0, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6859      	ldr	r1, [r3, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	0099      	lsls	r1, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	fbb0 f3f3 	udiv	r3, r0, r3
 80059e2:	3301      	adds	r3, #1
 80059e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_I2C_Init+0x196>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e022      	b.n	8005a40 <HAL_I2C_Init+0x1dc>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10e      	bne.n	8005a20 <HAL_I2C_Init+0x1bc>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1e58      	subs	r0, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	440b      	add	r3, r1
 8005a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a14:	3301      	adds	r3, #1
 8005a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1e:	e00f      	b.n	8005a40 <HAL_I2C_Init+0x1dc>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1e58      	subs	r0, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6859      	ldr	r1, [r3, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	0099      	lsls	r1, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	6809      	ldr	r1, [r1, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6911      	ldr	r1, [r2, #16]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68d2      	ldr	r2, [r2, #12]
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	000186a0 	.word	0x000186a0
 8005adc:	001e847f 	.word	0x001e847f
 8005ae0:	003d08ff 	.word	0x003d08ff
 8005ae4:	431bde83 	.word	0x431bde83
 8005ae8:	10624dd3 	.word	0x10624dd3

08005aec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	461a      	mov	r2, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	817b      	strh	r3, [r7, #10]
 8005afe:	460b      	mov	r3, r1
 8005b00:	813b      	strh	r3, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b06:	f7fe ffdf 	bl	8004ac8 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	f040 80d9 	bne.w	8005ccc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	2319      	movs	r3, #25
 8005b20:	2201      	movs	r2, #1
 8005b22:	496d      	ldr	r1, [pc, #436]	@ (8005cd8 <HAL_I2C_Mem_Write+0x1ec>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fc8b 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
 8005b32:	e0cc      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2C_Mem_Write+0x56>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0c5      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d007      	beq.n	8005b68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2221      	movs	r2, #33	@ 0x21
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2240      	movs	r2, #64	@ 0x40
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8005cdc <HAL_I2C_Mem_Write+0x1f0>)
 8005ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005baa:	88f8      	ldrh	r0, [r7, #6]
 8005bac:	893a      	ldrh	r2, [r7, #8]
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4603      	mov	r3, r0
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fac2 	bl	8006144 <I2C_RequestMemoryWrite>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d052      	beq.n	8005c6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e081      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fd50 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d107      	bne.n	8005bf2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e06b      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d11b      	bne.n	8005c6c <HAL_I2C_Mem_Write+0x180>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1aa      	bne.n	8005bca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fd43 	bl	8006704 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d107      	bne.n	8005c9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e016      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	00100002 	.word	0x00100002
 8005cdc:	ffff0000 	.word	0xffff0000

08005ce0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	@ 0x30
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	817b      	strh	r3, [r7, #10]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	813b      	strh	r3, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cfa:	f7fe fee5 	bl	8004ac8 <HAL_GetTick>
 8005cfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	f040 8214 	bne.w	8006136 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	2319      	movs	r3, #25
 8005d14:	2201      	movs	r2, #1
 8005d16:	497b      	ldr	r1, [pc, #492]	@ (8005f04 <HAL_I2C_Mem_Read+0x224>)
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fb91 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
 8005d26:	e207      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_I2C_Mem_Read+0x56>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e200      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d007      	beq.n	8005d5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2222      	movs	r2, #34	@ 0x22
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2240      	movs	r2, #64	@ 0x40
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005f08 <HAL_I2C_Mem_Read+0x228>)
 8005d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d9e:	88f8      	ldrh	r0, [r7, #6]
 8005da0:	893a      	ldrh	r2, [r7, #8]
 8005da2:	8979      	ldrh	r1, [r7, #10]
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	4603      	mov	r3, r0
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa5e 	bl	8006270 <I2C_RequestMemoryRead>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1bc      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d113      	bne.n	8005dee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e190      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11b      	bne.n	8005e2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e170      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d11b      	bne.n	8005e6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	e150      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e84:	e144      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	f200 80f1 	bhi.w	8006072 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d123      	bne.n	8005ee0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fc79 	bl	8006794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e145      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ede:	e117      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d14e      	bne.n	8005f86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4906      	ldr	r1, [pc, #24]	@ (8005f0c <HAL_I2C_Mem_Read+0x22c>)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 faa4 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e11a      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
 8005f02:	bf00      	nop
 8005f04:	00100002 	.word	0x00100002
 8005f08:	ffff0000 	.word	0xffff0000
 8005f0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f84:	e0c4      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	496c      	ldr	r1, [pc, #432]	@ (8006140 <HAL_I2C_Mem_Read+0x460>)
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa55 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0cb      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4955      	ldr	r1, [pc, #340]	@ (8006140 <HAL_I2C_Mem_Read+0x460>)
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fa27 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e09d      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006070:	e04e      	b.n	8006110 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006074:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fb8c 	bl	8006794 <I2C_WaitOnRXNEFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e058      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d124      	bne.n	8006110 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d107      	bne.n	80060de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	f47f aeb6 	bne.w	8005e86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	@ 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	00010004 	.word	0x00010004

08006144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800616c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f960 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006194:	d103      	bne.n	800619e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800619c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e05f      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a2:	897b      	ldrh	r3, [r7, #10]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	492d      	ldr	r1, [pc, #180]	@ (800626c <I2C_RequestMemoryWrite+0x128>)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f9bb 	bl	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04c      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa46 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e02b      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	e021      	b.n	8006260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa20 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e005      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8c2 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d0:	d103      	bne.n	80062da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0aa      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	4952      	ldr	r1, [pc, #328]	@ (800643c <I2C_RequestMemoryRead+0x1cc>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f91d 	bl	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e097      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f9a8 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	2b04      	cmp	r3, #4
 8006330:	d107      	bne.n	8006342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e076      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	e021      	b.n	800639c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f982 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800638c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e050      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f967 	bl	8006674 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d107      	bne.n	80063c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e035      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f82b 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fe:	d103      	bne.n	8006408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e013      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	4906      	ldr	r1, [pc, #24]	@ (800643c <I2C_RequestMemoryRead+0x1cc>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f886 	bl	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010002 	.word	0x00010002

08006440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006450:	e048      	b.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d044      	beq.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fe fb35 	bl	8004ac8 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d139      	bne.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10d      	bne.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	43da      	mvns	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	e00c      	b.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	43da      	mvns	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d116      	bne.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e023      	b.n	800652c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10d      	bne.n	800650a <I2C_WaitOnFlagUntilTimeout+0xca>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	43da      	mvns	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	e00c      	b.n	8006524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	43da      	mvns	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	429a      	cmp	r2, r3
 8006528:	d093      	beq.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006542:	e071      	b.n	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006552:	d123      	bne.n	800659c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800656c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e067      	b.n	800666c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d041      	beq.n	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7fe fa90 	bl	8004ac8 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d136      	bne.n	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10c      	bne.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	43da      	mvns	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4013      	ands	r3, r2
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf14      	ite	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	2300      	moveq	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	e00b      	b.n	80065f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	43da      	mvns	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e021      	b.n	800666c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10c      	bne.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	43da      	mvns	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e00b      	b.n	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	43da      	mvns	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4013      	ands	r3, r2
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f af6d 	bne.w	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006680:	e034      	b.n	80066ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f8e3 	bl	800684e <I2C_IsAcknowledgeFailed>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e034      	b.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d028      	beq.n	80066ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669a:	f7fe fa15 	bl	8004ac8 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11d      	bne.n	80066ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d016      	beq.n	80066ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e007      	b.n	80066fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f6:	2b80      	cmp	r3, #128	@ 0x80
 80066f8:	d1c3      	bne.n	8006682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006710:	e034      	b.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f89b 	bl	800684e <I2C_IsAcknowledgeFailed>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e034      	b.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d028      	beq.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fe f9cd 	bl	8004ac8 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d11d      	bne.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b04      	cmp	r3, #4
 800674c:	d016      	beq.n	800677c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e007      	b.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b04      	cmp	r3, #4
 8006788:	d1c3      	bne.n	8006712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067a0:	e049      	b.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d119      	bne.n	80067e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0210 	mvn.w	r2, #16
 80067b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e030      	b.n	8006846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e4:	f7fe f970 	bl	8004ac8 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d11d      	bne.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006804:	2b40      	cmp	r3, #64	@ 0x40
 8006806:	d016      	beq.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e007      	b.n	8006846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006840:	2b40      	cmp	r3, #64	@ 0x40
 8006842:	d1ae      	bne.n	80067a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006864:	d11b      	bne.n	800689e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800686e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	f043 0204 	orr.w	r2, r3, #4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d129      	bne.n	8006916 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2224      	movs	r2, #36	@ 0x24
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0210 	bic.w	r2, r2, #16
 80068e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006916:	2302      	movs	r3, #2
  }
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b20      	cmp	r3, #32
 800693c:	d12a      	bne.n	8006994 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2224      	movs	r2, #36	@ 0x24
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	f023 030f 	bic.w	r3, r3, #15
 8006964:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	b29a      	uxth	r2, r3
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	4313      	orrs	r3, r2
 800696e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	89fa      	ldrh	r2, [r7, #14]
 8006976:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e267      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d075      	beq.n	8006aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80069c2:	4b88      	ldr	r3, [pc, #544]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d00c      	beq.n	80069e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ce:	4b85      	ldr	r3, [pc, #532]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d112      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069da:	4b82      	ldr	r3, [pc, #520]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	4b7e      	ldr	r3, [pc, #504]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d05b      	beq.n	8006aac <HAL_RCC_OscConfig+0x108>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d157      	bne.n	8006aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e242      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a08:	d106      	bne.n	8006a18 <HAL_RCC_OscConfig+0x74>
 8006a0a:	4b76      	ldr	r3, [pc, #472]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a75      	ldr	r2, [pc, #468]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e01d      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x98>
 8006a22:	4b70      	ldr	r3, [pc, #448]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6f      	ldr	r2, [pc, #444]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6c      	ldr	r2, [pc, #432]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e00b      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a3c:	4b69      	ldr	r3, [pc, #420]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a68      	ldr	r2, [pc, #416]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	4b66      	ldr	r3, [pc, #408]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a65      	ldr	r2, [pc, #404]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fe f834 	bl	8004ac8 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fe f830 	bl	8004ac8 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	@ 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e207      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a76:	4b5b      	ldr	r3, [pc, #364]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0xc0>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fe f820 	bl	8004ac8 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fe f81c 	bl	8004ac8 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	@ 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1f3      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a9e:	4b51      	ldr	r3, [pc, #324]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0xe8>
 8006aaa:	e000      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d063      	beq.n	8006b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006aba:	4b4a      	ldr	r3, [pc, #296]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac6:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d11c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b44      	ldr	r3, [pc, #272]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d116      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ade:	4b41      	ldr	r3, [pc, #260]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d001      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e1c7      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af6:	4b3b      	ldr	r3, [pc, #236]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4937      	ldr	r1, [pc, #220]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0a:	e03a      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d020      	beq.n	8006b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b14:	4b34      	ldr	r3, [pc, #208]	@ (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1a:	f7fd ffd5 	bl	8004ac8 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b22:	f7fd ffd1 	bl	8004ac8 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e1a8      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b34:	4b2b      	ldr	r3, [pc, #172]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	4b28      	ldr	r3, [pc, #160]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4925      	ldr	r1, [pc, #148]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
 8006b54:	e015      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b56:	4b24      	ldr	r3, [pc, #144]	@ (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fd ffb4 	bl	8004ac8 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b64:	f7fd ffb0 	bl	8004ac8 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e187      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b76:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d036      	beq.n	8006bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b96:	4b15      	ldr	r3, [pc, #84]	@ (8006bec <HAL_RCC_OscConfig+0x248>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fd ff94 	bl	8004ac8 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba4:	f7fd ff90 	bl	8004ac8 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e167      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x200>
 8006bc2:	e01b      	b.n	8006bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc4:	4b09      	ldr	r3, [pc, #36]	@ (8006bec <HAL_RCC_OscConfig+0x248>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bca:	f7fd ff7d 	bl	8004ac8 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	e00e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd2:	f7fd ff79 	bl	8004ac8 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d907      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e150      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470000 	.word	0x42470000
 8006bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf0:	4b88      	ldr	r3, [pc, #544]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ea      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8097 	beq.w	8006d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0e:	4b81      	ldr	r3, [pc, #516]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	4a7c      	ldr	r2, [pc, #496]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b77      	ldr	r3, [pc, #476]	@ (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d118      	bne.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c46:	4b74      	ldr	r3, [pc, #464]	@ (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	@ (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c52:	f7fd ff39 	bl	8004ac8 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5a:	f7fd ff35 	bl	8004ac8 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e10c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x2ea>
 8006c80:	4b64      	ldr	r3, [pc, #400]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c84:	4a63      	ldr	r2, [pc, #396]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c8c:	e01c      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d10c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x30c>
 8006c96:	4b5f      	ldr	r3, [pc, #380]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c9c:	f043 0304 	orr.w	r3, r3, #4
 8006ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006cb0:	4b58      	ldr	r3, [pc, #352]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb4:	4a57      	ldr	r2, [pc, #348]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cbc:	4b55      	ldr	r3, [pc, #340]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc0:	4a54      	ldr	r2, [pc, #336]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	f023 0304 	bic.w	r3, r3, #4
 8006cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fd fefa 	bl	8004ac8 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd8:	f7fd fef6 	bl	8004ac8 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e0cb      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cee:	4b49      	ldr	r3, [pc, #292]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ee      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x334>
 8006cfa:	e014      	b.n	8006d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfc:	f7fd fee4 	bl	8004ac8 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f7fd fee0 	bl	8004ac8 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0b5      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1ee      	bne.n	8006d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d30:	4a38      	ldr	r2, [pc, #224]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80a1 	beq.w	8006e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d42:	4b34      	ldr	r3, [pc, #208]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d05c      	beq.n	8006e08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d141      	bne.n	8006dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b31      	ldr	r3, [pc, #196]	@ (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fd feb4 	bl	8004ac8 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d64:	f7fd feb0 	bl	8004ac8 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e087      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d76:	4b27      	ldr	r3, [pc, #156]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	491b      	ldr	r1, [pc, #108]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dac:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fd fe89 	bl	8004ac8 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dba:	f7fd fe85 	bl	8004ac8 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e05c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dcc:	4b11      	ldr	r3, [pc, #68]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x416>
 8006dd8:	e054      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	4b10      	ldr	r3, [pc, #64]	@ (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fd fe72 	bl	8004ac8 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fd fe6e 	bl	8004ac8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e045      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	4b06      	ldr	r3, [pc, #24]	@ (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x444>
 8006e06:	e03d      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e038      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006e14:	40023800 	.word	0x40023800
 8006e18:	40007000 	.word	0x40007000
 8006e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <HAL_RCC_OscConfig+0x4ec>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d028      	beq.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d121      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d11a      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e50:	4013      	ands	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d111      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40023800 	.word	0x40023800

08006e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0cc      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea8:	4b68      	ldr	r3, [pc, #416]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90c      	bls.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	4b65      	ldr	r3, [pc, #404]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebe:	4b63      	ldr	r3, [pc, #396]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0b8      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d020      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee8:	4b59      	ldr	r3, [pc, #356]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a58      	ldr	r2, [pc, #352]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f00:	4b53      	ldr	r3, [pc, #332]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4a52      	ldr	r2, [pc, #328]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f0c:	4b50      	ldr	r3, [pc, #320]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	494d      	ldr	r1, [pc, #308]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d044      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	4b47      	ldr	r3, [pc, #284]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d119      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e07f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d003      	beq.n	8006f52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f52:	4b3f      	ldr	r3, [pc, #252]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e06f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f62:	4b3b      	ldr	r3, [pc, #236]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e067      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f72:	4b37      	ldr	r3, [pc, #220]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 0203 	bic.w	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4934      	ldr	r1, [pc, #208]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f84:	f7fd fda0 	bl	8004ac8 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8c:	f7fd fd9c 	bl	8004ac8 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e04f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 020c 	and.w	r2, r3, #12
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d1eb      	bne.n	8006f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b25      	ldr	r3, [pc, #148]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d20c      	bcs.n	8006fdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b22      	ldr	r3, [pc, #136]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b20      	ldr	r3, [pc, #128]	@ (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e032      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe8:	4b19      	ldr	r3, [pc, #100]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4916      	ldr	r1, [pc, #88]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007006:	4b12      	ldr	r3, [pc, #72]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	490e      	ldr	r1, [pc, #56]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800701a:	f000 f821 	bl	8007060 <HAL_RCC_GetSysClockFreq>
 800701e:	4602      	mov	r2, r0
 8007020:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	490a      	ldr	r1, [pc, #40]	@ (8007054 <HAL_RCC_ClockConfig+0x1c0>)
 800702c:	5ccb      	ldrb	r3, [r1, r3]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	4a09      	ldr	r2, [pc, #36]	@ (8007058 <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <HAL_RCC_ClockConfig+0x1c8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fd00 	bl	8004a40 <HAL_InitTick>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40023c00 	.word	0x40023c00
 8007050:	40023800 	.word	0x40023800
 8007054:	0800dab0 	.word	0x0800dab0
 8007058:	200007bc 	.word	0x200007bc
 800705c:	200007c0 	.word	0x200007c0

08007060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b090      	sub	sp, #64	@ 0x40
 8007066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007078:	4b59      	ldr	r3, [pc, #356]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b08      	cmp	r3, #8
 8007082:	d00d      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007084:	2b08      	cmp	r3, #8
 8007086:	f200 80a1 	bhi.w	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x34>
 800708e:	2b04      	cmp	r3, #4
 8007090:	d003      	beq.n	800709a <HAL_RCC_GetSysClockFreq+0x3a>
 8007092:	e09b      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b53      	ldr	r3, [pc, #332]	@ (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007096:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007098:	e09b      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800709a:	4b53      	ldr	r3, [pc, #332]	@ (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800709e:	e098      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a0:	4b4f      	ldr	r3, [pc, #316]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070aa:	4b4d      	ldr	r3, [pc, #308]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d028      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b4a      	ldr	r3, [pc, #296]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070c8:	2100      	movs	r1, #0
 80070ca:	4b47      	ldr	r3, [pc, #284]	@ (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070cc:	fb03 f201 	mul.w	r2, r3, r1
 80070d0:	2300      	movs	r3, #0
 80070d2:	fb00 f303 	mul.w	r3, r0, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	4a43      	ldr	r2, [pc, #268]	@ (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070da:	fba0 1202 	umull	r1, r2, r0, r2
 80070de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070e0:	460a      	mov	r2, r1
 80070e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e6:	4413      	add	r3, r2
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ec:	2200      	movs	r2, #0
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	61fa      	str	r2, [r7, #28]
 80070f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80070fa:	f7f9 f8c9 	bl	8000290 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007106:	e053      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007108:	4b35      	ldr	r3, [pc, #212]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	099b      	lsrs	r3, r3, #6
 800710e:	2200      	movs	r2, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	617a      	str	r2, [r7, #20]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800711a:	f04f 0b00 	mov.w	fp, #0
 800711e:	4652      	mov	r2, sl
 8007120:	465b      	mov	r3, fp
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	0159      	lsls	r1, r3, #5
 800712c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007130:	0150      	lsls	r0, r2, #5
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	ebb2 080a 	subs.w	r8, r2, sl
 800713a:	eb63 090b 	sbc.w	r9, r3, fp
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800714a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800714e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007152:	ebb2 0408 	subs.w	r4, r2, r8
 8007156:	eb63 0509 	sbc.w	r5, r3, r9
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	00eb      	lsls	r3, r5, #3
 8007164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007168:	00e2      	lsls	r2, r4, #3
 800716a:	4614      	mov	r4, r2
 800716c:	461d      	mov	r5, r3
 800716e:	eb14 030a 	adds.w	r3, r4, sl
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	eb45 030b 	adc.w	r3, r5, fp
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007186:	4629      	mov	r1, r5
 8007188:	028b      	lsls	r3, r1, #10
 800718a:	4621      	mov	r1, r4
 800718c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007190:	4621      	mov	r1, r4
 8007192:	028a      	lsls	r2, r1, #10
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	2200      	movs	r2, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	60fa      	str	r2, [r7, #12]
 80071a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a4:	f7f9 f874 	bl	8000290 <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071b0:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	3301      	adds	r3, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80071c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3740      	adds	r7, #64	@ 0x40
 80071d8:	46bd      	mov	sp, r7
 80071da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071de:	bf00      	nop
 80071e0:	40023800 	.word	0x40023800
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	017d7840 	.word	0x017d7840

080071ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f0:	4b03      	ldr	r3, [pc, #12]	@ (8007200 <HAL_RCC_GetHCLKFreq+0x14>)
 80071f2:	681b      	ldr	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	200007bc 	.word	0x200007bc

08007204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007208:	f7ff fff0 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	4903      	ldr	r1, [pc, #12]	@ (8007228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40023800 	.word	0x40023800
 8007228:	0800dac0 	.word	0x0800dac0

0800722c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007230:	f7ff ffdc 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	@ (800724c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0b5b      	lsrs	r3, r3, #13
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	@ (8007250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	0800dac0 	.word	0x0800dac0

08007254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e07b      	b.n	800735e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007276:	d009      	beq.n	800728c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
 800727e:	e005      	b.n	800728c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fd f8c4 	bl	8004434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007310:	ea42 0103 	orr.w	r1, r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 0104 	and.w	r1, r3, #4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	f003 0210 	and.w	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800734c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007376:	f7fd fba7 	bl	8004ac8 <HAL_GetTick>
 800737a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d001      	beq.n	8007390 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
 800738e:	e12a      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_SPI_Transmit+0x36>
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e122      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_SPI_Transmit+0x48>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e11b      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2203      	movs	r2, #3
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073fc:	d10f      	bne.n	800741e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800741c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007428:	2b40      	cmp	r3, #64	@ 0x40
 800742a:	d007      	beq.n	800743c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800743a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007444:	d152      	bne.n	80074ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <HAL_SPI_Transmit+0xee>
 800744e:	8b7b      	ldrh	r3, [r7, #26]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d145      	bne.n	80074e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007458:	881a      	ldrh	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	1c9a      	adds	r2, r3, #2
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007478:	e032      	b.n	80074e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b02      	cmp	r3, #2
 8007486:	d112      	bne.n	80074ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748c:	881a      	ldrh	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007498:	1c9a      	adds	r2, r3, #2
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074ac:	e018      	b.n	80074e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ae:	f7fd fb0b 	bl	8004ac8 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d803      	bhi.n	80074c6 <HAL_SPI_Transmit+0x160>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d102      	bne.n	80074cc <HAL_SPI_Transmit+0x166>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d109      	bne.n	80074e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e082      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1c7      	bne.n	800747a <HAL_SPI_Transmit+0x114>
 80074ea:	e053      	b.n	8007594 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_Transmit+0x194>
 80074f4:	8b7b      	ldrh	r3, [r7, #26]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d147      	bne.n	800758a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	7812      	ldrb	r2, [r2, #0]
 8007506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007520:	e033      	b.n	800758a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b02      	cmp	r3, #2
 800752e:	d113      	bne.n	8007558 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007556:	e018      	b.n	800758a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007558:	f7fd fab6 	bl	8004ac8 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d803      	bhi.n	8007570 <HAL_SPI_Transmit+0x20a>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d102      	bne.n	8007576 <HAL_SPI_Transmit+0x210>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e02d      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1c6      	bne.n	8007522 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa59 	bl	8007a50 <SPI_EndRxTxTransaction>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80075e4:	2300      	movs	r3, #0
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08a      	sub	sp, #40	@ 0x28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075fc:	2301      	movs	r3, #1
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007600:	f7fd fa62 	bl	8004ac8 <HAL_GetTick>
 8007604:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800760c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007614:	887b      	ldrh	r3, [r7, #2]
 8007616:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d00c      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x4a>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007624:	d106      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x46>
 800762e:	7ffb      	ldrb	r3, [r7, #31]
 8007630:	2b04      	cmp	r3, #4
 8007632:	d001      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
 8007636:	e17f      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_SPI_TransmitReceive+0x5c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_TransmitReceive+0x5c>
 8007644:	887b      	ldrh	r3, [r7, #2]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e174      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_SPI_TransmitReceive+0x6e>
 8007658:	2302      	movs	r3, #2
 800765a:	e16d      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b04      	cmp	r3, #4
 800766e:	d003      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2205      	movs	r2, #5
 8007674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	887a      	ldrh	r2, [r7, #2]
 8007688:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	887a      	ldrh	r2, [r7, #2]
 800768e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	887a      	ldrh	r2, [r7, #2]
 800769a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	887a      	ldrh	r2, [r7, #2]
 80076a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b40      	cmp	r3, #64	@ 0x40
 80076ba:	d007      	beq.n	80076cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d4:	d17e      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_TransmitReceive+0xf6>
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d16c      	bne.n	80077be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	881a      	ldrh	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007708:	e059      	b.n	80077be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b02      	cmp	r3, #2
 8007716:	d11b      	bne.n	8007750 <HAL_SPI_TransmitReceive+0x162>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <HAL_SPI_TransmitReceive+0x162>
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	2b01      	cmp	r3, #1
 8007726:	d113      	bne.n	8007750 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	1c9a      	adds	r2, r3, #2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	d119      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x1a4>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d014      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	b292      	uxth	r2, r2
 8007774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800778e:	2301      	movs	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007792:	f7fd f999 	bl	8004ac8 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779e:	429a      	cmp	r2, r3
 80077a0:	d80d      	bhi.n	80077be <HAL_SPI_TransmitReceive+0x1d0>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d009      	beq.n	80077be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e0bc      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1a0      	bne.n	800770a <HAL_SPI_TransmitReceive+0x11c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d19b      	bne.n	800770a <HAL_SPI_TransmitReceive+0x11c>
 80077d2:	e082      	b.n	80078da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x1f4>
 80077dc:	8afb      	ldrh	r3, [r7, #22]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d171      	bne.n	80078c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007808:	e05d      	b.n	80078c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d11c      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x264>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d017      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x264>
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	2b01      	cmp	r3, #1
 8007826:	d114      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b01      	cmp	r3, #1
 800785e:	d119      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x2a6>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d014      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	b2d2      	uxtb	r2, r2
 8007876:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007890:	2301      	movs	r3, #1
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007894:	f7fd f918 	bl	8004ac8 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d803      	bhi.n	80078ac <HAL_SPI_TransmitReceive+0x2be>
 80078a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	d102      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x2c4>
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e038      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d19c      	bne.n	800780a <HAL_SPI_TransmitReceive+0x21c>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d197      	bne.n	800780a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f8b6 	bl	8007a50 <SPI_EndRxTxTransaction>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d008      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e01d      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007936:	2300      	movs	r3, #0
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3728      	adds	r7, #40	@ 0x28
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007950:	f7fd f8ba 	bl	8004ac8 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4413      	add	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007960:	f7fd f8b2 	bl	8004ac8 <HAL_GetTick>
 8007964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007966:	4b39      	ldr	r3, [pc, #228]	@ (8007a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	015b      	lsls	r3, r3, #5
 800796c:	0d1b      	lsrs	r3, r3, #20
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007976:	e054      	b.n	8007a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d050      	beq.n	8007a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007980:	f7fd f8a2 	bl	8004ac8 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	429a      	cmp	r2, r3
 800798e:	d902      	bls.n	8007996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d13d      	bne.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ae:	d111      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b8:	d004      	beq.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c2:	d107      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079dc:	d10f      	bne.n	80079fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e017      	b.n	8007a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d19b      	bne.n	8007978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3720      	adds	r7, #32
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200007bc 	.word	0x200007bc

08007a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2201      	movs	r2, #1
 8007a64:	2102      	movs	r1, #2
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff ff6a 	bl	8007940 <SPI_WaitFlagStateUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e032      	b.n	8007ae8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a82:	4b1b      	ldr	r3, [pc, #108]	@ (8007af0 <SPI_EndRxTxTransaction+0xa0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1b      	ldr	r2, [pc, #108]	@ (8007af4 <SPI_EndRxTxTransaction+0xa4>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	0d5b      	lsrs	r3, r3, #21
 8007a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aa0:	d112      	bne.n	8007ac8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2180      	movs	r1, #128	@ 0x80
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ff47 	bl	8007940 <SPI_WaitFlagStateUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d016      	beq.n	8007ae6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e00f      	b.n	8007ae8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ade:	2b80      	cmp	r3, #128	@ 0x80
 8007ae0:	d0f2      	beq.n	8007ac8 <SPI_EndRxTxTransaction+0x78>
 8007ae2:	e000      	b.n	8007ae6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007ae4:	bf00      	nop
  }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200007bc 	.word	0x200007bc
 8007af4:	165e9f81 	.word	0x165e9f81

08007af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e042      	b.n	8007b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fc fd84 	bl	800462c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	@ 0x24
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc85 	bl	800844c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b0ba      	sub	sp, #232	@ 0xe8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10f      	bne.n	8007bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_UART_IRQHandler+0x66>
 8007bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fb69 	bl	80082ce <UART_Receive_IT>
      return;
 8007bfc:	e25b      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80de 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x22c>
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80d1 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <HAL_UART_IRQHandler+0xae>
 8007c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c3e:	f043 0201 	orr.w	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <HAL_UART_IRQHandler+0xd2>
 8007c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c62:	f043 0202 	orr.w	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_UART_IRQHandler+0xf6>
 8007c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f043 0204 	orr.w	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <HAL_UART_IRQHandler+0x126>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	f043 0208 	orr.w	r2, r3, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 81f2 	beq.w	80080ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x14e>
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 faf4 	bl	80082ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf0:	2b40      	cmp	r3, #64	@ 0x40
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2301      	moveq	r3, #1
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <HAL_UART_IRQHandler+0x17a>
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d04f      	beq.n	8007db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9fc 	bl	8008110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d141      	bne.n	8007daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1d9      	bne.n	8007d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f78 <HAL_UART_IRQHandler+0x3e0>)
 8007d80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fb83 	bl	8005492 <HAL_DMA_Abort_IT>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da0:	e00e      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f99e 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	e00a      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f99a 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db0:	e006      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f996 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007dbe:	e175      	b.n	80080ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	bf00      	nop
    return;
 8007dc2:	e173      	b.n	80080ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	f040 814f 	bne.w	800806c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8148 	beq.w	800806c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8141 	beq.w	800806c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0a:	2b40      	cmp	r3, #64	@ 0x40
 8007e0c:	f040 80b6 	bne.w	8007f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8145 	beq.w	80080b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	f080 813e 	bcs.w	80080b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e46:	f000 8088 	beq.w	8007f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d9      	bne.n	8007e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007eba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e1      	bne.n	8007e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ef6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007efc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e3      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fd fa2c 	bl	80053b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f8c1 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f76:	e09b      	b.n	80080b0 <HAL_UART_IRQHandler+0x518>
 8007f78:	080081d7 	.word	0x080081d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 808e 	beq.w	80080b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8089 	beq.w	80080b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e3      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ffe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e3      	bne.n	8007fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008044:	61fa      	str	r2, [r7, #28]
 8008046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	69b9      	ldr	r1, [r7, #24]
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	617b      	str	r3, [r7, #20]
   return(result);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e3      	bne.n	8008020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800805e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f847 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800806a:	e023      	b.n	80080b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <HAL_UART_IRQHandler+0x4f4>
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8ba 	bl	80081fe <UART_Transmit_IT>
    return;
 800808a:	e014      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00e      	beq.n	80080b6 <HAL_UART_IRQHandler+0x51e>
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800809c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8fa 	bl	800829e <UART_EndTransmit_IT>
    return;
 80080aa:	e004      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80080ac:	bf00      	nop
 80080ae:	e002      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080b4:	bf00      	nop
  }
}
 80080b6:	37e8      	adds	r7, #232	@ 0xe8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b095      	sub	sp, #84	@ 0x54
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800812e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008138:	643a      	str	r2, [r7, #64]	@ 0x40
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800813e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	61fb      	str	r3, [r7, #28]
   return(result);
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3314      	adds	r3, #20
 800816a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800816c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800816e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008184:	2b01      	cmp	r3, #1
 8008186:	d119      	bne.n	80081bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60bb      	str	r3, [r7, #8]
   return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f023 0310 	bic.w	r3, r3, #16
 800819e:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081a8:	61ba      	str	r2, [r7, #24]
 80081aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081ca:	bf00      	nop
 80081cc:	3754      	adds	r7, #84	@ 0x54
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff ff77 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b21      	cmp	r3, #33	@ 0x21
 8008210:	d13e      	bne.n	8008290 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821a:	d114      	bne.n	8008246 <UART_Transmit_IT+0x48>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008238:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]
 8008244:	e008      	b.n	8008258 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6211      	str	r1, [r2, #32]
 8008250:	781a      	ldrb	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4619      	mov	r1, r3
 8008266:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10f      	bne.n	800828c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800827a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800828a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	e000      	b.n	8008292 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008290:	2302      	movs	r3, #2
  }
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fefc 	bl	80080bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08c      	sub	sp, #48	@ 0x30
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b22      	cmp	r3, #34	@ 0x22
 80082e0:	f040 80ae 	bne.w	8008440 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ec:	d117      	bne.n	800831e <UART_Receive_IT+0x50>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d113      	bne.n	800831e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830c:	b29a      	uxth	r2, r3
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	1c9a      	adds	r2, r3, #2
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	629a      	str	r2, [r3, #40]	@ 0x28
 800831c:	e026      	b.n	800836c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008330:	d007      	beq.n	8008342 <UART_Receive_IT+0x74>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <UART_Receive_IT+0x82>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	b2da      	uxtb	r2, r3
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	e008      	b.n	8008362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800835c:	b2da      	uxtb	r2, r3
 800835e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	b29b      	uxth	r3, r3
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4619      	mov	r1, r3
 800837a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800837c:	2b00      	cmp	r3, #0
 800837e:	d15d      	bne.n	800843c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0220 	bic.w	r2, r2, #32
 800838e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800839e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0201 	bic.w	r2, r2, #1
 80083ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d135      	bne.n	8008432 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	613b      	str	r3, [r7, #16]
   return(result);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 0310 	bic.w	r3, r3, #16
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	330c      	adds	r3, #12
 80083ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ec:	623a      	str	r2, [r7, #32]
 80083ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69f9      	ldr	r1, [r7, #28]
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e5      	bne.n	80083cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b10      	cmp	r3, #16
 800840c:	d10a      	bne.n	8008424 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fe64 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
 8008430:	e002      	b.n	8008438 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fe4c 	bl	80080d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e002      	b.n	8008442 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3730      	adds	r7, #48	@ 0x30
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008450:	b0c0      	sub	sp, #256	@ 0x100
 8008452:	af00      	add	r7, sp, #0
 8008454:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008468:	68d9      	ldr	r1, [r3, #12]
 800846a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	ea40 0301 	orr.w	r3, r0, r1
 8008474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	431a      	orrs	r2, r3
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	431a      	orrs	r2, r3
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084a4:	f021 010c 	bic.w	r1, r1, #12
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084b2:	430b      	orrs	r3, r1
 80084b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c6:	6999      	ldr	r1, [r3, #24]
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	ea40 0301 	orr.w	r3, r0, r1
 80084d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b8f      	ldr	r3, [pc, #572]	@ (8008718 <UART_SetConfig+0x2cc>)
 80084dc:	429a      	cmp	r2, r3
 80084de:	d005      	beq.n	80084ec <UART_SetConfig+0xa0>
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	4b8d      	ldr	r3, [pc, #564]	@ (800871c <UART_SetConfig+0x2d0>)
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d104      	bne.n	80084f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084ec:	f7fe fe9e 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 80084f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084f4:	e003      	b.n	80084fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084f6:	f7fe fe85 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 80084fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008508:	f040 810c 	bne.w	8008724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800850c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008510:	2200      	movs	r2, #0
 8008512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008516:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800851a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800851e:	4622      	mov	r2, r4
 8008520:	462b      	mov	r3, r5
 8008522:	1891      	adds	r1, r2, r2
 8008524:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008526:	415b      	adcs	r3, r3
 8008528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800852a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800852e:	4621      	mov	r1, r4
 8008530:	eb12 0801 	adds.w	r8, r2, r1
 8008534:	4629      	mov	r1, r5
 8008536:	eb43 0901 	adc.w	r9, r3, r1
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800854a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800854e:	4690      	mov	r8, r2
 8008550:	4699      	mov	r9, r3
 8008552:	4623      	mov	r3, r4
 8008554:	eb18 0303 	adds.w	r3, r8, r3
 8008558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800855c:	462b      	mov	r3, r5
 800855e:	eb49 0303 	adc.w	r3, r9, r3
 8008562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008572:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800857a:	460b      	mov	r3, r1
 800857c:	18db      	adds	r3, r3, r3
 800857e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008580:	4613      	mov	r3, r2
 8008582:	eb42 0303 	adc.w	r3, r2, r3
 8008586:	657b      	str	r3, [r7, #84]	@ 0x54
 8008588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800858c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008590:	f7f7 fe7e 	bl	8000290 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4b61      	ldr	r3, [pc, #388]	@ (8008720 <UART_SetConfig+0x2d4>)
 800859a:	fba3 2302 	umull	r2, r3, r3, r2
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	011c      	lsls	r4, r3, #4
 80085a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	1891      	adds	r1, r2, r2
 80085ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085bc:	415b      	adcs	r3, r3
 80085be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085c4:	4641      	mov	r1, r8
 80085c6:	eb12 0a01 	adds.w	sl, r2, r1
 80085ca:	4649      	mov	r1, r9
 80085cc:	eb43 0b01 	adc.w	fp, r3, r1
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085e4:	4692      	mov	sl, r2
 80085e6:	469b      	mov	fp, r3
 80085e8:	4643      	mov	r3, r8
 80085ea:	eb1a 0303 	adds.w	r3, sl, r3
 80085ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085f2:	464b      	mov	r3, r9
 80085f4:	eb4b 0303 	adc.w	r3, fp, r3
 80085f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008608:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800860c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008610:	460b      	mov	r3, r1
 8008612:	18db      	adds	r3, r3, r3
 8008614:	643b      	str	r3, [r7, #64]	@ 0x40
 8008616:	4613      	mov	r3, r2
 8008618:	eb42 0303 	adc.w	r3, r2, r3
 800861c:	647b      	str	r3, [r7, #68]	@ 0x44
 800861e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008626:	f7f7 fe33 	bl	8000290 <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4611      	mov	r1, r2
 8008630:	4b3b      	ldr	r3, [pc, #236]	@ (8008720 <UART_SetConfig+0x2d4>)
 8008632:	fba3 2301 	umull	r2, r3, r3, r1
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2264      	movs	r2, #100	@ 0x64
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	1acb      	subs	r3, r1, r3
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008646:	4b36      	ldr	r3, [pc, #216]	@ (8008720 <UART_SetConfig+0x2d4>)
 8008648:	fba3 2302 	umull	r2, r3, r3, r2
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008654:	441c      	add	r4, r3
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008660:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008670:	415b      	adcs	r3, r3
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008678:	4641      	mov	r1, r8
 800867a:	1851      	adds	r1, r2, r1
 800867c:	6339      	str	r1, [r7, #48]	@ 0x30
 800867e:	4649      	mov	r1, r9
 8008680:	414b      	adcs	r3, r1
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008690:	4659      	mov	r1, fp
 8008692:	00cb      	lsls	r3, r1, #3
 8008694:	4651      	mov	r1, sl
 8008696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800869a:	4651      	mov	r1, sl
 800869c:	00ca      	lsls	r2, r1, #3
 800869e:	4610      	mov	r0, r2
 80086a0:	4619      	mov	r1, r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	4642      	mov	r2, r8
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086ac:	464b      	mov	r3, r9
 80086ae:	460a      	mov	r2, r1
 80086b0:	eb42 0303 	adc.w	r3, r2, r3
 80086b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086cc:	460b      	mov	r3, r1
 80086ce:	18db      	adds	r3, r3, r3
 80086d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086d2:	4613      	mov	r3, r2
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086e2:	f7f7 fdd5 	bl	8000290 <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008720 <UART_SetConfig+0x2d4>)
 80086ec:	fba3 1302 	umull	r1, r3, r3, r2
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	2164      	movs	r1, #100	@ 0x64
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	3332      	adds	r3, #50	@ 0x32
 80086fe:	4a08      	ldr	r2, [pc, #32]	@ (8008720 <UART_SetConfig+0x2d4>)
 8008700:	fba2 2303 	umull	r2, r3, r2, r3
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	f003 0207 	and.w	r2, r3, #7
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4422      	add	r2, r4
 8008712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008714:	e106      	b.n	8008924 <UART_SetConfig+0x4d8>
 8008716:	bf00      	nop
 8008718:	40011000 	.word	0x40011000
 800871c:	40011400 	.word	0x40011400
 8008720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800872e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	1891      	adds	r1, r2, r2
 800873c:	6239      	str	r1, [r7, #32]
 800873e:	415b      	adcs	r3, r3
 8008740:	627b      	str	r3, [r7, #36]	@ 0x24
 8008742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008746:	4641      	mov	r1, r8
 8008748:	1854      	adds	r4, r2, r1
 800874a:	4649      	mov	r1, r9
 800874c:	eb43 0501 	adc.w	r5, r3, r1
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	00eb      	lsls	r3, r5, #3
 800875a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800875e:	00e2      	lsls	r2, r4, #3
 8008760:	4614      	mov	r4, r2
 8008762:	461d      	mov	r5, r3
 8008764:	4643      	mov	r3, r8
 8008766:	18e3      	adds	r3, r4, r3
 8008768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800876c:	464b      	mov	r3, r9
 800876e:	eb45 0303 	adc.w	r3, r5, r3
 8008772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008782:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008792:	4629      	mov	r1, r5
 8008794:	008b      	lsls	r3, r1, #2
 8008796:	4621      	mov	r1, r4
 8008798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800879c:	4621      	mov	r1, r4
 800879e:	008a      	lsls	r2, r1, #2
 80087a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087a4:	f7f7 fd74 	bl	8000290 <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4b60      	ldr	r3, [pc, #384]	@ (8008930 <UART_SetConfig+0x4e4>)
 80087ae:	fba3 2302 	umull	r2, r3, r3, r2
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	011c      	lsls	r4, r3, #4
 80087b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	1891      	adds	r1, r2, r2
 80087ce:	61b9      	str	r1, [r7, #24]
 80087d0:	415b      	adcs	r3, r3
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d8:	4641      	mov	r1, r8
 80087da:	1851      	adds	r1, r2, r1
 80087dc:	6139      	str	r1, [r7, #16]
 80087de:	4649      	mov	r1, r9
 80087e0:	414b      	adcs	r3, r1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087f0:	4659      	mov	r1, fp
 80087f2:	00cb      	lsls	r3, r1, #3
 80087f4:	4651      	mov	r1, sl
 80087f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087fa:	4651      	mov	r1, sl
 80087fc:	00ca      	lsls	r2, r1, #3
 80087fe:	4610      	mov	r0, r2
 8008800:	4619      	mov	r1, r3
 8008802:	4603      	mov	r3, r0
 8008804:	4642      	mov	r2, r8
 8008806:	189b      	adds	r3, r3, r2
 8008808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800880c:	464b      	mov	r3, r9
 800880e:	460a      	mov	r2, r1
 8008810:	eb42 0303 	adc.w	r3, r2, r3
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008822:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008830:	4649      	mov	r1, r9
 8008832:	008b      	lsls	r3, r1, #2
 8008834:	4641      	mov	r1, r8
 8008836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800883a:	4641      	mov	r1, r8
 800883c:	008a      	lsls	r2, r1, #2
 800883e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008842:	f7f7 fd25 	bl	8000290 <__aeabi_uldivmod>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4611      	mov	r1, r2
 800884c:	4b38      	ldr	r3, [pc, #224]	@ (8008930 <UART_SetConfig+0x4e4>)
 800884e:	fba3 2301 	umull	r2, r3, r3, r1
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	2264      	movs	r2, #100	@ 0x64
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	1acb      	subs	r3, r1, r3
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	3332      	adds	r3, #50	@ 0x32
 8008860:	4a33      	ldr	r2, [pc, #204]	@ (8008930 <UART_SetConfig+0x4e4>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800886c:	441c      	add	r4, r3
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	673b      	str	r3, [r7, #112]	@ 0x70
 8008876:	677a      	str	r2, [r7, #116]	@ 0x74
 8008878:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	1891      	adds	r1, r2, r2
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	415b      	adcs	r3, r3
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800888c:	4641      	mov	r1, r8
 800888e:	1851      	adds	r1, r2, r1
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	4649      	mov	r1, r9
 8008894:	414b      	adcs	r3, r1
 8008896:	607b      	str	r3, [r7, #4]
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088a4:	4659      	mov	r1, fp
 80088a6:	00cb      	lsls	r3, r1, #3
 80088a8:	4651      	mov	r1, sl
 80088aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ae:	4651      	mov	r1, sl
 80088b0:	00ca      	lsls	r2, r1, #3
 80088b2:	4610      	mov	r0, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	4642      	mov	r2, r8
 80088ba:	189b      	adds	r3, r3, r2
 80088bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088be:	464b      	mov	r3, r9
 80088c0:	460a      	mov	r2, r1
 80088c2:	eb42 0303 	adc.w	r3, r2, r3
 80088c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80088d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088e0:	4649      	mov	r1, r9
 80088e2:	008b      	lsls	r3, r1, #2
 80088e4:	4641      	mov	r1, r8
 80088e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ea:	4641      	mov	r1, r8
 80088ec:	008a      	lsls	r2, r1, #2
 80088ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088f2:	f7f7 fccd 	bl	8000290 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008930 <UART_SetConfig+0x4e4>)
 80088fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	2164      	movs	r1, #100	@ 0x64
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	3332      	adds	r3, #50	@ 0x32
 800890e:	4a08      	ldr	r2, [pc, #32]	@ (8008930 <UART_SetConfig+0x4e4>)
 8008910:	fba2 2303 	umull	r2, r3, r2, r3
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4422      	add	r2, r4
 8008922:	609a      	str	r2, [r3, #8]
}
 8008924:	bf00      	nop
 8008926:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800892a:	46bd      	mov	sp, r7
 800892c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008930:	51eb851f 	.word	0x51eb851f

08008934 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008938:	4904      	ldr	r1, [pc, #16]	@ (800894c <MX_FATFS_Init+0x18>)
 800893a:	4805      	ldr	r0, [pc, #20]	@ (8008950 <MX_FATFS_Init+0x1c>)
 800893c:	f000 f8b0 	bl	8008aa0 <FATFS_LinkDriver>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	4b03      	ldr	r3, [pc, #12]	@ (8008954 <MX_FATFS_Init+0x20>)
 8008946:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200012d8 	.word	0x200012d8
 8008950:	200007c8 	.word	0x200007c8
 8008954:	200012d4 	.word	0x200012d4

08008958 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008962:	4b06      	ldr	r3, [pc, #24]	@ (800897c <USER_initialize+0x24>)
 8008964:	2201      	movs	r2, #1
 8008966:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008968:	4b04      	ldr	r3, [pc, #16]	@ (800897c <USER_initialize+0x24>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	200007c5 	.word	0x200007c5

08008980 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800898a:	4b06      	ldr	r3, [pc, #24]	@ (80089a4 <USER_status+0x24>)
 800898c:	2201      	movs	r2, #1
 800898e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008990:	4b04      	ldr	r3, [pc, #16]	@ (80089a4 <USER_status+0x24>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	200007c5 	.word	0x200007c5

080089a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80089b8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80089d6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	603a      	str	r2, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
 80089f0:	460b      	mov	r3, r1
 80089f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
    return res;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a16:	2301      	movs	r3, #1
 8008a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a20:	7a5b      	ldrb	r3, [r3, #9]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d131      	bne.n	8008a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a28:	4b1c      	ldr	r3, [pc, #112]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a2a:	7a5b      	ldrb	r3, [r3, #9]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a32:	2100      	movs	r1, #0
 8008a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a36:	4b19      	ldr	r3, [pc, #100]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a38:	7a5b      	ldrb	r3, [r3, #9]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	4a17      	ldr	r2, [pc, #92]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a46:	4b15      	ldr	r3, [pc, #84]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a48:	7a5b      	ldrb	r3, [r3, #9]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b13      	ldr	r3, [pc, #76]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a50:	4413      	add	r3, r2
 8008a52:	79fa      	ldrb	r2, [r7, #7]
 8008a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a56:	4b11      	ldr	r3, [pc, #68]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a58:	7a5b      	ldrb	r3, [r3, #9]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	b2d1      	uxtb	r1, r2
 8008a60:	4a0e      	ldr	r2, [pc, #56]	@ (8008a9c <FATFS_LinkDriverEx+0x94>)
 8008a62:	7251      	strb	r1, [r2, #9]
 8008a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a66:	7dbb      	ldrb	r3, [r7, #22]
 8008a68:	3330      	adds	r3, #48	@ 0x30
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	3301      	adds	r3, #1
 8008a74:	223a      	movs	r2, #58	@ 0x3a
 8008a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	222f      	movs	r2, #47	@ 0x2f
 8008a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3303      	adds	r3, #3
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	200012dc 	.word	0x200012dc

08008aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008aaa:	2200      	movs	r2, #0
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff ffaa 	bl	8008a08 <FATFS_LinkDriverEx>
 8008ab4:	4603      	mov	r3, r0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <malloc>:
 8008ac0:	4b02      	ldr	r3, [pc, #8]	@ (8008acc <malloc+0xc>)
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	f000 b82d 	b.w	8008b24 <_malloc_r>
 8008aca:	bf00      	nop
 8008acc:	200007dc 	.word	0x200007dc

08008ad0 <free>:
 8008ad0:	4b02      	ldr	r3, [pc, #8]	@ (8008adc <free+0xc>)
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	f000 b915 	b.w	8008d04 <_free_r>
 8008ada:	bf00      	nop
 8008adc:	200007dc 	.word	0x200007dc

08008ae0 <sbrk_aligned>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8008b20 <sbrk_aligned+0x40>)
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	6831      	ldr	r1, [r6, #0]
 8008ae8:	4605      	mov	r5, r0
 8008aea:	b911      	cbnz	r1, 8008af2 <sbrk_aligned+0x12>
 8008aec:	f000 f8ce 	bl	8008c8c <_sbrk_r>
 8008af0:	6030      	str	r0, [r6, #0]
 8008af2:	4621      	mov	r1, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 f8c9 	bl	8008c8c <_sbrk_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d103      	bne.n	8008b06 <sbrk_aligned+0x26>
 8008afe:	f04f 34ff 	mov.w	r4, #4294967295
 8008b02:	4620      	mov	r0, r4
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	1cc4      	adds	r4, r0, #3
 8008b08:	f024 0403 	bic.w	r4, r4, #3
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d0f8      	beq.n	8008b02 <sbrk_aligned+0x22>
 8008b10:	1a21      	subs	r1, r4, r0
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f8ba 	bl	8008c8c <_sbrk_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d1f2      	bne.n	8008b02 <sbrk_aligned+0x22>
 8008b1c:	e7ef      	b.n	8008afe <sbrk_aligned+0x1e>
 8008b1e:	bf00      	nop
 8008b20:	200012e8 	.word	0x200012e8

08008b24 <_malloc_r>:
 8008b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b28:	1ccd      	adds	r5, r1, #3
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	4606      	mov	r6, r0
 8008b3a:	db01      	blt.n	8008b40 <_malloc_r+0x1c>
 8008b3c:	42a9      	cmp	r1, r5
 8008b3e:	d904      	bls.n	8008b4a <_malloc_r+0x26>
 8008b40:	230c      	movs	r3, #12
 8008b42:	6033      	str	r3, [r6, #0]
 8008b44:	2000      	movs	r0, #0
 8008b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c20 <_malloc_r+0xfc>
 8008b4e:	f000 f869 	bl	8008c24 <__malloc_lock>
 8008b52:	f8d8 3000 	ldr.w	r3, [r8]
 8008b56:	461c      	mov	r4, r3
 8008b58:	bb44      	cbnz	r4, 8008bac <_malloc_r+0x88>
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ffbf 	bl	8008ae0 <sbrk_aligned>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	4604      	mov	r4, r0
 8008b66:	d158      	bne.n	8008c1a <_malloc_r+0xf6>
 8008b68:	f8d8 4000 	ldr.w	r4, [r8]
 8008b6c:	4627      	mov	r7, r4
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	d143      	bne.n	8008bfa <_malloc_r+0xd6>
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	d04b      	beq.n	8008c0e <_malloc_r+0xea>
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	4639      	mov	r1, r7
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	eb04 0903 	add.w	r9, r4, r3
 8008b80:	f000 f884 	bl	8008c8c <_sbrk_r>
 8008b84:	4581      	cmp	r9, r0
 8008b86:	d142      	bne.n	8008c0e <_malloc_r+0xea>
 8008b88:	6821      	ldr	r1, [r4, #0]
 8008b8a:	1a6d      	subs	r5, r5, r1
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ffa6 	bl	8008ae0 <sbrk_aligned>
 8008b94:	3001      	adds	r0, #1
 8008b96:	d03a      	beq.n	8008c0e <_malloc_r+0xea>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	442b      	add	r3, r5
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	bb62      	cbnz	r2, 8008c00 <_malloc_r+0xdc>
 8008ba6:	f8c8 7000 	str.w	r7, [r8]
 8008baa:	e00f      	b.n	8008bcc <_malloc_r+0xa8>
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	1b52      	subs	r2, r2, r5
 8008bb0:	d420      	bmi.n	8008bf4 <_malloc_r+0xd0>
 8008bb2:	2a0b      	cmp	r2, #11
 8008bb4:	d917      	bls.n	8008be6 <_malloc_r+0xc2>
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	6025      	str	r5, [r4, #0]
 8008bbc:	bf18      	it	ne
 8008bbe:	6059      	strne	r1, [r3, #4]
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	bf08      	it	eq
 8008bc4:	f8c8 1000 	streq.w	r1, [r8]
 8008bc8:	5162      	str	r2, [r4, r5]
 8008bca:	604b      	str	r3, [r1, #4]
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f000 f82f 	bl	8008c30 <__malloc_unlock>
 8008bd2:	f104 000b 	add.w	r0, r4, #11
 8008bd6:	1d23      	adds	r3, r4, #4
 8008bd8:	f020 0007 	bic.w	r0, r0, #7
 8008bdc:	1ac2      	subs	r2, r0, r3
 8008bde:	bf1c      	itt	ne
 8008be0:	1a1b      	subne	r3, r3, r0
 8008be2:	50a3      	strne	r3, [r4, r2]
 8008be4:	e7af      	b.n	8008b46 <_malloc_r+0x22>
 8008be6:	6862      	ldr	r2, [r4, #4]
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	bf0c      	ite	eq
 8008bec:	f8c8 2000 	streq.w	r2, [r8]
 8008bf0:	605a      	strne	r2, [r3, #4]
 8008bf2:	e7eb      	b.n	8008bcc <_malloc_r+0xa8>
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	6864      	ldr	r4, [r4, #4]
 8008bf8:	e7ae      	b.n	8008b58 <_malloc_r+0x34>
 8008bfa:	463c      	mov	r4, r7
 8008bfc:	687f      	ldr	r7, [r7, #4]
 8008bfe:	e7b6      	b.n	8008b6e <_malloc_r+0x4a>
 8008c00:	461a      	mov	r2, r3
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d1fb      	bne.n	8008c00 <_malloc_r+0xdc>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6053      	str	r3, [r2, #4]
 8008c0c:	e7de      	b.n	8008bcc <_malloc_r+0xa8>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	6033      	str	r3, [r6, #0]
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 f80c 	bl	8008c30 <__malloc_unlock>
 8008c18:	e794      	b.n	8008b44 <_malloc_r+0x20>
 8008c1a:	6005      	str	r5, [r0, #0]
 8008c1c:	e7d6      	b.n	8008bcc <_malloc_r+0xa8>
 8008c1e:	bf00      	nop
 8008c20:	200012ec 	.word	0x200012ec

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	@ (8008c2c <__malloc_lock+0x8>)
 8008c26:	f000 b86b 	b.w	8008d00 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	2000142c 	.word	0x2000142c

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	@ (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f000 b866 	b.w	8008d02 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	2000142c 	.word	0x2000142c

08008c3c <siprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	b500      	push	{lr}
 8008c40:	b09c      	sub	sp, #112	@ 0x70
 8008c42:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c44:	9002      	str	r0, [sp, #8]
 8008c46:	9006      	str	r0, [sp, #24]
 8008c48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c4c:	4809      	ldr	r0, [pc, #36]	@ (8008c74 <siprintf+0x38>)
 8008c4e:	9107      	str	r1, [sp, #28]
 8008c50:	9104      	str	r1, [sp, #16]
 8008c52:	4909      	ldr	r1, [pc, #36]	@ (8008c78 <siprintf+0x3c>)
 8008c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c58:	9105      	str	r1, [sp, #20]
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	a902      	add	r1, sp, #8
 8008c60:	f000 f8f6 	bl	8008e50 <_svfiprintf_r>
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	b01c      	add	sp, #112	@ 0x70
 8008c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c70:	b003      	add	sp, #12
 8008c72:	4770      	bx	lr
 8008c74:	200007dc 	.word	0x200007dc
 8008c78:	ffff0208 	.word	0xffff0208

08008c7c <memset>:
 8008c7c:	4402      	add	r2, r0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d100      	bne.n	8008c86 <memset+0xa>
 8008c84:	4770      	bx	lr
 8008c86:	f803 1b01 	strb.w	r1, [r3], #1
 8008c8a:	e7f9      	b.n	8008c80 <memset+0x4>

08008c8c <_sbrk_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d06      	ldr	r5, [pc, #24]	@ (8008ca8 <_sbrk_r+0x1c>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7fb fe3e 	bl	8004918 <_sbrk>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_sbrk_r+0x1a>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_sbrk_r+0x1a>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20001428 	.word	0x20001428

08008cac <__errno>:
 8008cac:	4b01      	ldr	r3, [pc, #4]	@ (8008cb4 <__errno+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	200007dc 	.word	0x200007dc

08008cb8 <__libc_init_array>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4d0d      	ldr	r5, [pc, #52]	@ (8008cf0 <__libc_init_array+0x38>)
 8008cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008cf4 <__libc_init_array+0x3c>)
 8008cbe:	1b64      	subs	r4, r4, r5
 8008cc0:	10a4      	asrs	r4, r4, #2
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	42a6      	cmp	r6, r4
 8008cc6:	d109      	bne.n	8008cdc <__libc_init_array+0x24>
 8008cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf8 <__libc_init_array+0x40>)
 8008cca:	4c0c      	ldr	r4, [pc, #48]	@ (8008cfc <__libc_init_array+0x44>)
 8008ccc:	f000 fba8 	bl	8009420 <_init>
 8008cd0:	1b64      	subs	r4, r4, r5
 8008cd2:	10a4      	asrs	r4, r4, #2
 8008cd4:	2600      	movs	r6, #0
 8008cd6:	42a6      	cmp	r6, r4
 8008cd8:	d105      	bne.n	8008ce6 <__libc_init_array+0x2e>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce0:	4798      	blx	r3
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7ee      	b.n	8008cc4 <__libc_init_array+0xc>
 8008ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cea:	4798      	blx	r3
 8008cec:	3601      	adds	r6, #1
 8008cee:	e7f2      	b.n	8008cd6 <__libc_init_array+0x1e>
 8008cf0:	0800db04 	.word	0x0800db04
 8008cf4:	0800db04 	.word	0x0800db04
 8008cf8:	0800db04 	.word	0x0800db04
 8008cfc:	0800db08 	.word	0x0800db08

08008d00 <__retarget_lock_acquire_recursive>:
 8008d00:	4770      	bx	lr

08008d02 <__retarget_lock_release_recursive>:
 8008d02:	4770      	bx	lr

08008d04 <_free_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4605      	mov	r5, r0
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d041      	beq.n	8008d90 <_free_r+0x8c>
 8008d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d10:	1f0c      	subs	r4, r1, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfb8      	it	lt
 8008d16:	18e4      	addlt	r4, r4, r3
 8008d18:	f7ff ff84 	bl	8008c24 <__malloc_lock>
 8008d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d94 <_free_r+0x90>)
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	b933      	cbnz	r3, 8008d30 <_free_r+0x2c>
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	6014      	str	r4, [r2, #0]
 8008d26:	4628      	mov	r0, r5
 8008d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2c:	f7ff bf80 	b.w	8008c30 <__malloc_unlock>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d908      	bls.n	8008d46 <_free_r+0x42>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	1821      	adds	r1, r4, r0
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf01      	itttt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	1809      	addeq	r1, r1, r0
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	e7ed      	b.n	8008d22 <_free_r+0x1e>
 8008d46:	461a      	mov	r2, r3
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	b10b      	cbz	r3, 8008d50 <_free_r+0x4c>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d9fa      	bls.n	8008d46 <_free_r+0x42>
 8008d50:	6811      	ldr	r1, [r2, #0]
 8008d52:	1850      	adds	r0, r2, r1
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d10b      	bne.n	8008d70 <_free_r+0x6c>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	1850      	adds	r0, r2, r1
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	d1e0      	bne.n	8008d26 <_free_r+0x22>
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	6053      	str	r3, [r2, #4]
 8008d6a:	4408      	add	r0, r1
 8008d6c:	6010      	str	r0, [r2, #0]
 8008d6e:	e7da      	b.n	8008d26 <_free_r+0x22>
 8008d70:	d902      	bls.n	8008d78 <_free_r+0x74>
 8008d72:	230c      	movs	r3, #12
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	e7d6      	b.n	8008d26 <_free_r+0x22>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf04      	itt	eq
 8008d80:	6819      	ldreq	r1, [r3, #0]
 8008d82:	685b      	ldreq	r3, [r3, #4]
 8008d84:	6063      	str	r3, [r4, #4]
 8008d86:	bf04      	itt	eq
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	6054      	str	r4, [r2, #4]
 8008d8e:	e7ca      	b.n	8008d26 <_free_r+0x22>
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	200012ec 	.word	0x200012ec

08008d98 <__ssputs_r>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	688e      	ldr	r6, [r1, #8]
 8008d9e:	461f      	mov	r7, r3
 8008da0:	42be      	cmp	r6, r7
 8008da2:	680b      	ldr	r3, [r1, #0]
 8008da4:	4682      	mov	sl, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4690      	mov	r8, r2
 8008daa:	d82d      	bhi.n	8008e08 <__ssputs_r+0x70>
 8008dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008db4:	d026      	beq.n	8008e04 <__ssputs_r+0x6c>
 8008db6:	6965      	ldr	r5, [r4, #20]
 8008db8:	6909      	ldr	r1, [r1, #16]
 8008dba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dbe:	eba3 0901 	sub.w	r9, r3, r1
 8008dc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dc6:	1c7b      	adds	r3, r7, #1
 8008dc8:	444b      	add	r3, r9
 8008dca:	106d      	asrs	r5, r5, #1
 8008dcc:	429d      	cmp	r5, r3
 8008dce:	bf38      	it	cc
 8008dd0:	461d      	movcc	r5, r3
 8008dd2:	0553      	lsls	r3, r2, #21
 8008dd4:	d527      	bpl.n	8008e26 <__ssputs_r+0x8e>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7ff fea4 	bl	8008b24 <_malloc_r>
 8008ddc:	4606      	mov	r6, r0
 8008dde:	b360      	cbz	r0, 8008e3a <__ssputs_r+0xa2>
 8008de0:	6921      	ldr	r1, [r4, #16]
 8008de2:	464a      	mov	r2, r9
 8008de4:	f000 fad8 	bl	8009398 <memcpy>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	6126      	str	r6, [r4, #16]
 8008df6:	6165      	str	r5, [r4, #20]
 8008df8:	444e      	add	r6, r9
 8008dfa:	eba5 0509 	sub.w	r5, r5, r9
 8008dfe:	6026      	str	r6, [r4, #0]
 8008e00:	60a5      	str	r5, [r4, #8]
 8008e02:	463e      	mov	r6, r7
 8008e04:	42be      	cmp	r6, r7
 8008e06:	d900      	bls.n	8008e0a <__ssputs_r+0x72>
 8008e08:	463e      	mov	r6, r7
 8008e0a:	6820      	ldr	r0, [r4, #0]
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4641      	mov	r1, r8
 8008e10:	f000 faa8 	bl	8009364 <memmove>
 8008e14:	68a3      	ldr	r3, [r4, #8]
 8008e16:	1b9b      	subs	r3, r3, r6
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	4433      	add	r3, r6
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	2000      	movs	r0, #0
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	462a      	mov	r2, r5
 8008e28:	f000 fac4 	bl	80093b4 <_realloc_r>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d1e0      	bne.n	8008df4 <__ssputs_r+0x5c>
 8008e32:	6921      	ldr	r1, [r4, #16]
 8008e34:	4650      	mov	r0, sl
 8008e36:	f7ff ff65 	bl	8008d04 <_free_r>
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	f8ca 3000 	str.w	r3, [sl]
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	e7e9      	b.n	8008e22 <__ssputs_r+0x8a>
	...

08008e50 <_svfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	4698      	mov	r8, r3
 8008e56:	898b      	ldrh	r3, [r1, #12]
 8008e58:	061b      	lsls	r3, r3, #24
 8008e5a:	b09d      	sub	sp, #116	@ 0x74
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	d510      	bpl.n	8008e86 <_svfiprintf_r+0x36>
 8008e64:	690b      	ldr	r3, [r1, #16]
 8008e66:	b973      	cbnz	r3, 8008e86 <_svfiprintf_r+0x36>
 8008e68:	2140      	movs	r1, #64	@ 0x40
 8008e6a:	f7ff fe5b 	bl	8008b24 <_malloc_r>
 8008e6e:	6028      	str	r0, [r5, #0]
 8008e70:	6128      	str	r0, [r5, #16]
 8008e72:	b930      	cbnz	r0, 8008e82 <_svfiprintf_r+0x32>
 8008e74:	230c      	movs	r3, #12
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	b01d      	add	sp, #116	@ 0x74
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	2340      	movs	r3, #64	@ 0x40
 8008e84:	616b      	str	r3, [r5, #20]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8a:	2320      	movs	r3, #32
 8008e8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e94:	2330      	movs	r3, #48	@ 0x30
 8008e96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009034 <_svfiprintf_r+0x1e4>
 8008e9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e9e:	f04f 0901 	mov.w	r9, #1
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	b10a      	cbz	r2, 8008eb0 <_svfiprintf_r+0x60>
 8008eac:	2a25      	cmp	r2, #37	@ 0x25
 8008eae:	d1f9      	bne.n	8008ea4 <_svfiprintf_r+0x54>
 8008eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb4:	d00b      	beq.n	8008ece <_svfiprintf_r+0x7e>
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff ff6b 	bl	8008d98 <__ssputs_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f000 80a7 	beq.w	8009016 <_svfiprintf_r+0x1c6>
 8008ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eca:	445a      	add	r2, fp
 8008ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 809f 	beq.w	8009016 <_svfiprintf_r+0x1c6>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	9304      	str	r3, [sp, #16]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008eee:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef0:	4654      	mov	r4, sl
 8008ef2:	2205      	movs	r2, #5
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	484e      	ldr	r0, [pc, #312]	@ (8009034 <_svfiprintf_r+0x1e4>)
 8008efa:	f7f7 f979 	bl	80001f0 <memchr>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	b9d8      	cbnz	r0, 8008f3a <_svfiprintf_r+0xea>
 8008f02:	06d0      	lsls	r0, r2, #27
 8008f04:	bf44      	itt	mi
 8008f06:	2320      	movmi	r3, #32
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f0c:	0711      	lsls	r1, r2, #28
 8008f0e:	bf44      	itt	mi
 8008f10:	232b      	movmi	r3, #43	@ 0x2b
 8008f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f16:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f1c:	d015      	beq.n	8008f4a <_svfiprintf_r+0xfa>
 8008f1e:	9a07      	ldr	r2, [sp, #28]
 8008f20:	4654      	mov	r4, sl
 8008f22:	2000      	movs	r0, #0
 8008f24:	f04f 0c0a 	mov.w	ip, #10
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2e:	3b30      	subs	r3, #48	@ 0x30
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d94b      	bls.n	8008fcc <_svfiprintf_r+0x17c>
 8008f34:	b1b0      	cbz	r0, 8008f64 <_svfiprintf_r+0x114>
 8008f36:	9207      	str	r2, [sp, #28]
 8008f38:	e014      	b.n	8008f64 <_svfiprintf_r+0x114>
 8008f3a:	eba0 0308 	sub.w	r3, r0, r8
 8008f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	46a2      	mov	sl, r4
 8008f48:	e7d2      	b.n	8008ef0 <_svfiprintf_r+0xa0>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9103      	str	r1, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfbb      	ittet	lt
 8008f56:	425b      	neglt	r3, r3
 8008f58:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5c:	9307      	strge	r3, [sp, #28]
 8008f5e:	9307      	strlt	r3, [sp, #28]
 8008f60:	bfb8      	it	lt
 8008f62:	9204      	strlt	r2, [sp, #16]
 8008f64:	7823      	ldrb	r3, [r4, #0]
 8008f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f68:	d10a      	bne.n	8008f80 <_svfiprintf_r+0x130>
 8008f6a:	7863      	ldrb	r3, [r4, #1]
 8008f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f6e:	d132      	bne.n	8008fd6 <_svfiprintf_r+0x186>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	9203      	str	r2, [sp, #12]
 8008f78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f7c:	3402      	adds	r4, #2
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009044 <_svfiprintf_r+0x1f4>
 8008f84:	7821      	ldrb	r1, [r4, #0]
 8008f86:	2203      	movs	r2, #3
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f7f7 f931 	bl	80001f0 <memchr>
 8008f8e:	b138      	cbz	r0, 8008fa0 <_svfiprintf_r+0x150>
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	eba0 000a 	sub.w	r0, r0, sl
 8008f96:	2240      	movs	r2, #64	@ 0x40
 8008f98:	4082      	lsls	r2, r0
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	3401      	adds	r4, #1
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	4824      	ldr	r0, [pc, #144]	@ (8009038 <_svfiprintf_r+0x1e8>)
 8008fa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008faa:	2206      	movs	r2, #6
 8008fac:	f7f7 f920 	bl	80001f0 <memchr>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d036      	beq.n	8009022 <_svfiprintf_r+0x1d2>
 8008fb4:	4b21      	ldr	r3, [pc, #132]	@ (800903c <_svfiprintf_r+0x1ec>)
 8008fb6:	bb1b      	cbnz	r3, 8009000 <_svfiprintf_r+0x1b0>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	3307      	adds	r3, #7
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	9303      	str	r3, [sp, #12]
 8008fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc6:	4433      	add	r3, r6
 8008fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fca:	e76a      	b.n	8008ea2 <_svfiprintf_r+0x52>
 8008fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	e7a8      	b.n	8008f28 <_svfiprintf_r+0xd8>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	3401      	adds	r4, #1
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f04f 0c0a 	mov.w	ip, #10
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe8:	3a30      	subs	r2, #48	@ 0x30
 8008fea:	2a09      	cmp	r2, #9
 8008fec:	d903      	bls.n	8008ff6 <_svfiprintf_r+0x1a6>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0c6      	beq.n	8008f80 <_svfiprintf_r+0x130>
 8008ff2:	9105      	str	r1, [sp, #20]
 8008ff4:	e7c4      	b.n	8008f80 <_svfiprintf_r+0x130>
 8008ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e7f0      	b.n	8008fe2 <_svfiprintf_r+0x192>
 8009000:	ab03      	add	r3, sp, #12
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	462a      	mov	r2, r5
 8009006:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <_svfiprintf_r+0x1f0>)
 8009008:	a904      	add	r1, sp, #16
 800900a:	4638      	mov	r0, r7
 800900c:	f3af 8000 	nop.w
 8009010:	1c42      	adds	r2, r0, #1
 8009012:	4606      	mov	r6, r0
 8009014:	d1d6      	bne.n	8008fc4 <_svfiprintf_r+0x174>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	065b      	lsls	r3, r3, #25
 800901a:	f53f af2d 	bmi.w	8008e78 <_svfiprintf_r+0x28>
 800901e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009020:	e72c      	b.n	8008e7c <_svfiprintf_r+0x2c>
 8009022:	ab03      	add	r3, sp, #12
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	462a      	mov	r2, r5
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <_svfiprintf_r+0x1f0>)
 800902a:	a904      	add	r1, sp, #16
 800902c:	4638      	mov	r0, r7
 800902e:	f000 f879 	bl	8009124 <_printf_i>
 8009032:	e7ed      	b.n	8009010 <_svfiprintf_r+0x1c0>
 8009034:	0800dac8 	.word	0x0800dac8
 8009038:	0800dad2 	.word	0x0800dad2
 800903c:	00000000 	.word	0x00000000
 8009040:	08008d99 	.word	0x08008d99
 8009044:	0800dace 	.word	0x0800dace

08009048 <_printf_common>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4616      	mov	r6, r2
 800904e:	4698      	mov	r8, r3
 8009050:	688a      	ldr	r2, [r1, #8]
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009058:	4293      	cmp	r3, r2
 800905a:	bfb8      	it	lt
 800905c:	4613      	movlt	r3, r2
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009064:	4607      	mov	r7, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b10a      	cbz	r2, 800906e <_printf_common+0x26>
 800906a:	3301      	adds	r3, #1
 800906c:	6033      	str	r3, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	0699      	lsls	r1, r3, #26
 8009072:	bf42      	ittt	mi
 8009074:	6833      	ldrmi	r3, [r6, #0]
 8009076:	3302      	addmi	r3, #2
 8009078:	6033      	strmi	r3, [r6, #0]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d106      	bne.n	8009090 <_printf_common+0x48>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	6832      	ldr	r2, [r6, #0]
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc26      	bgt.n	80090de <_printf_common+0x96>
 8009090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	3b00      	subs	r3, #0
 8009098:	bf18      	it	ne
 800909a:	2301      	movne	r3, #1
 800909c:	0692      	lsls	r2, r2, #26
 800909e:	d42b      	bmi.n	80090f8 <_printf_common+0xb0>
 80090a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090a4:	4641      	mov	r1, r8
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c8      	blx	r9
 80090aa:	3001      	adds	r0, #1
 80090ac:	d01e      	beq.n	80090ec <_printf_common+0xa4>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	f003 0306 	and.w	r3, r3, #6
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	bf02      	ittt	eq
 80090ba:	68e5      	ldreq	r5, [r4, #12]
 80090bc:	6833      	ldreq	r3, [r6, #0]
 80090be:	1aed      	subeq	r5, r5, r3
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	bf0c      	ite	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	2500      	movne	r5, #0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bfc4      	itt	gt
 80090ce:	1a9b      	subgt	r3, r3, r2
 80090d0:	18ed      	addgt	r5, r5, r3
 80090d2:	2600      	movs	r6, #0
 80090d4:	341a      	adds	r4, #26
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	d11a      	bne.n	8009110 <_printf_common+0xc8>
 80090da:	2000      	movs	r0, #0
 80090dc:	e008      	b.n	80090f0 <_printf_common+0xa8>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4641      	mov	r1, r8
 80090e4:	4638      	mov	r0, r7
 80090e6:	47c8      	blx	r9
 80090e8:	3001      	adds	r0, #1
 80090ea:	d103      	bne.n	80090f4 <_printf_common+0xac>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7c6      	b.n	8009086 <_printf_common+0x3e>
 80090f8:	18e1      	adds	r1, r4, r3
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	2030      	movs	r0, #48	@ 0x30
 80090fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009102:	4422      	add	r2, r4
 8009104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800910c:	3302      	adds	r3, #2
 800910e:	e7c7      	b.n	80090a0 <_printf_common+0x58>
 8009110:	2301      	movs	r3, #1
 8009112:	4622      	mov	r2, r4
 8009114:	4641      	mov	r1, r8
 8009116:	4638      	mov	r0, r7
 8009118:	47c8      	blx	r9
 800911a:	3001      	adds	r0, #1
 800911c:	d0e6      	beq.n	80090ec <_printf_common+0xa4>
 800911e:	3601      	adds	r6, #1
 8009120:	e7d9      	b.n	80090d6 <_printf_common+0x8e>
	...

08009124 <_printf_i>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	7e0f      	ldrb	r7, [r1, #24]
 800912a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800912c:	2f78      	cmp	r7, #120	@ 0x78
 800912e:	4691      	mov	r9, r2
 8009130:	4680      	mov	r8, r0
 8009132:	460c      	mov	r4, r1
 8009134:	469a      	mov	sl, r3
 8009136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800913a:	d807      	bhi.n	800914c <_printf_i+0x28>
 800913c:	2f62      	cmp	r7, #98	@ 0x62
 800913e:	d80a      	bhi.n	8009156 <_printf_i+0x32>
 8009140:	2f00      	cmp	r7, #0
 8009142:	f000 80d2 	beq.w	80092ea <_printf_i+0x1c6>
 8009146:	2f58      	cmp	r7, #88	@ 0x58
 8009148:	f000 80b9 	beq.w	80092be <_printf_i+0x19a>
 800914c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009154:	e03a      	b.n	80091cc <_printf_i+0xa8>
 8009156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800915a:	2b15      	cmp	r3, #21
 800915c:	d8f6      	bhi.n	800914c <_printf_i+0x28>
 800915e:	a101      	add	r1, pc, #4	@ (adr r1, 8009164 <_printf_i+0x40>)
 8009160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091d1 	.word	0x080091d1
 800916c:	0800914d 	.word	0x0800914d
 8009170:	0800914d 	.word	0x0800914d
 8009174:	0800914d 	.word	0x0800914d
 8009178:	0800914d 	.word	0x0800914d
 800917c:	080091d1 	.word	0x080091d1
 8009180:	0800914d 	.word	0x0800914d
 8009184:	0800914d 	.word	0x0800914d
 8009188:	0800914d 	.word	0x0800914d
 800918c:	0800914d 	.word	0x0800914d
 8009190:	080092d1 	.word	0x080092d1
 8009194:	080091fb 	.word	0x080091fb
 8009198:	0800928b 	.word	0x0800928b
 800919c:	0800914d 	.word	0x0800914d
 80091a0:	0800914d 	.word	0x0800914d
 80091a4:	080092f3 	.word	0x080092f3
 80091a8:	0800914d 	.word	0x0800914d
 80091ac:	080091fb 	.word	0x080091fb
 80091b0:	0800914d 	.word	0x0800914d
 80091b4:	0800914d 	.word	0x0800914d
 80091b8:	08009293 	.word	0x08009293
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6032      	str	r2, [r6, #0]
 80091c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e09d      	b.n	800930c <_printf_i+0x1e8>
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	6820      	ldr	r0, [r4, #0]
 80091d4:	1d19      	adds	r1, r3, #4
 80091d6:	6031      	str	r1, [r6, #0]
 80091d8:	0606      	lsls	r6, r0, #24
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0xbc>
 80091dc:	681d      	ldr	r5, [r3, #0]
 80091de:	e003      	b.n	80091e8 <_printf_i+0xc4>
 80091e0:	0645      	lsls	r5, r0, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0xb8>
 80091e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	da03      	bge.n	80091f4 <_printf_i+0xd0>
 80091ec:	232d      	movs	r3, #45	@ 0x2d
 80091ee:	426d      	negs	r5, r5
 80091f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091f4:	4859      	ldr	r0, [pc, #356]	@ (800935c <_printf_i+0x238>)
 80091f6:	230a      	movs	r3, #10
 80091f8:	e011      	b.n	800921e <_printf_i+0xfa>
 80091fa:	6821      	ldr	r1, [r4, #0]
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	0608      	lsls	r0, r1, #24
 8009200:	f853 5b04 	ldr.w	r5, [r3], #4
 8009204:	d402      	bmi.n	800920c <_printf_i+0xe8>
 8009206:	0649      	lsls	r1, r1, #25
 8009208:	bf48      	it	mi
 800920a:	b2ad      	uxthmi	r5, r5
 800920c:	2f6f      	cmp	r7, #111	@ 0x6f
 800920e:	4853      	ldr	r0, [pc, #332]	@ (800935c <_printf_i+0x238>)
 8009210:	6033      	str	r3, [r6, #0]
 8009212:	bf14      	ite	ne
 8009214:	230a      	movne	r3, #10
 8009216:	2308      	moveq	r3, #8
 8009218:	2100      	movs	r1, #0
 800921a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800921e:	6866      	ldr	r6, [r4, #4]
 8009220:	60a6      	str	r6, [r4, #8]
 8009222:	2e00      	cmp	r6, #0
 8009224:	bfa2      	ittt	ge
 8009226:	6821      	ldrge	r1, [r4, #0]
 8009228:	f021 0104 	bicge.w	r1, r1, #4
 800922c:	6021      	strge	r1, [r4, #0]
 800922e:	b90d      	cbnz	r5, 8009234 <_printf_i+0x110>
 8009230:	2e00      	cmp	r6, #0
 8009232:	d04b      	beq.n	80092cc <_printf_i+0x1a8>
 8009234:	4616      	mov	r6, r2
 8009236:	fbb5 f1f3 	udiv	r1, r5, r3
 800923a:	fb03 5711 	mls	r7, r3, r1, r5
 800923e:	5dc7      	ldrb	r7, [r0, r7]
 8009240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009244:	462f      	mov	r7, r5
 8009246:	42bb      	cmp	r3, r7
 8009248:	460d      	mov	r5, r1
 800924a:	d9f4      	bls.n	8009236 <_printf_i+0x112>
 800924c:	2b08      	cmp	r3, #8
 800924e:	d10b      	bne.n	8009268 <_printf_i+0x144>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	07df      	lsls	r7, r3, #31
 8009254:	d508      	bpl.n	8009268 <_printf_i+0x144>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	6861      	ldr	r1, [r4, #4]
 800925a:	4299      	cmp	r1, r3
 800925c:	bfde      	ittt	le
 800925e:	2330      	movle	r3, #48	@ 0x30
 8009260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009268:	1b92      	subs	r2, r2, r6
 800926a:	6122      	str	r2, [r4, #16]
 800926c:	f8cd a000 	str.w	sl, [sp]
 8009270:	464b      	mov	r3, r9
 8009272:	aa03      	add	r2, sp, #12
 8009274:	4621      	mov	r1, r4
 8009276:	4640      	mov	r0, r8
 8009278:	f7ff fee6 	bl	8009048 <_printf_common>
 800927c:	3001      	adds	r0, #1
 800927e:	d14a      	bne.n	8009316 <_printf_i+0x1f2>
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	b004      	add	sp, #16
 8009286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	f043 0320 	orr.w	r3, r3, #32
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	4833      	ldr	r0, [pc, #204]	@ (8009360 <_printf_i+0x23c>)
 8009294:	2778      	movs	r7, #120	@ 0x78
 8009296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	6831      	ldr	r1, [r6, #0]
 800929e:	061f      	lsls	r7, r3, #24
 80092a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80092a4:	d402      	bmi.n	80092ac <_printf_i+0x188>
 80092a6:	065f      	lsls	r7, r3, #25
 80092a8:	bf48      	it	mi
 80092aa:	b2ad      	uxthmi	r5, r5
 80092ac:	6031      	str	r1, [r6, #0]
 80092ae:	07d9      	lsls	r1, r3, #31
 80092b0:	bf44      	itt	mi
 80092b2:	f043 0320 	orrmi.w	r3, r3, #32
 80092b6:	6023      	strmi	r3, [r4, #0]
 80092b8:	b11d      	cbz	r5, 80092c2 <_printf_i+0x19e>
 80092ba:	2310      	movs	r3, #16
 80092bc:	e7ac      	b.n	8009218 <_printf_i+0xf4>
 80092be:	4827      	ldr	r0, [pc, #156]	@ (800935c <_printf_i+0x238>)
 80092c0:	e7e9      	b.n	8009296 <_printf_i+0x172>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	f023 0320 	bic.w	r3, r3, #32
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	e7f6      	b.n	80092ba <_printf_i+0x196>
 80092cc:	4616      	mov	r6, r2
 80092ce:	e7bd      	b.n	800924c <_printf_i+0x128>
 80092d0:	6833      	ldr	r3, [r6, #0]
 80092d2:	6825      	ldr	r5, [r4, #0]
 80092d4:	6961      	ldr	r1, [r4, #20]
 80092d6:	1d18      	adds	r0, r3, #4
 80092d8:	6030      	str	r0, [r6, #0]
 80092da:	062e      	lsls	r6, r5, #24
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	d501      	bpl.n	80092e4 <_printf_i+0x1c0>
 80092e0:	6019      	str	r1, [r3, #0]
 80092e2:	e002      	b.n	80092ea <_printf_i+0x1c6>
 80092e4:	0668      	lsls	r0, r5, #25
 80092e6:	d5fb      	bpl.n	80092e0 <_printf_i+0x1bc>
 80092e8:	8019      	strh	r1, [r3, #0]
 80092ea:	2300      	movs	r3, #0
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	4616      	mov	r6, r2
 80092f0:	e7bc      	b.n	800926c <_printf_i+0x148>
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	1d1a      	adds	r2, r3, #4
 80092f6:	6032      	str	r2, [r6, #0]
 80092f8:	681e      	ldr	r6, [r3, #0]
 80092fa:	6862      	ldr	r2, [r4, #4]
 80092fc:	2100      	movs	r1, #0
 80092fe:	4630      	mov	r0, r6
 8009300:	f7f6 ff76 	bl	80001f0 <memchr>
 8009304:	b108      	cbz	r0, 800930a <_printf_i+0x1e6>
 8009306:	1b80      	subs	r0, r0, r6
 8009308:	6060      	str	r0, [r4, #4]
 800930a:	6863      	ldr	r3, [r4, #4]
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	2300      	movs	r3, #0
 8009310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009314:	e7aa      	b.n	800926c <_printf_i+0x148>
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	4632      	mov	r2, r6
 800931a:	4649      	mov	r1, r9
 800931c:	4640      	mov	r0, r8
 800931e:	47d0      	blx	sl
 8009320:	3001      	adds	r0, #1
 8009322:	d0ad      	beq.n	8009280 <_printf_i+0x15c>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	079b      	lsls	r3, r3, #30
 8009328:	d413      	bmi.n	8009352 <_printf_i+0x22e>
 800932a:	68e0      	ldr	r0, [r4, #12]
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	4298      	cmp	r0, r3
 8009330:	bfb8      	it	lt
 8009332:	4618      	movlt	r0, r3
 8009334:	e7a6      	b.n	8009284 <_printf_i+0x160>
 8009336:	2301      	movs	r3, #1
 8009338:	4632      	mov	r2, r6
 800933a:	4649      	mov	r1, r9
 800933c:	4640      	mov	r0, r8
 800933e:	47d0      	blx	sl
 8009340:	3001      	adds	r0, #1
 8009342:	d09d      	beq.n	8009280 <_printf_i+0x15c>
 8009344:	3501      	adds	r5, #1
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	9903      	ldr	r1, [sp, #12]
 800934a:	1a5b      	subs	r3, r3, r1
 800934c:	42ab      	cmp	r3, r5
 800934e:	dcf2      	bgt.n	8009336 <_printf_i+0x212>
 8009350:	e7eb      	b.n	800932a <_printf_i+0x206>
 8009352:	2500      	movs	r5, #0
 8009354:	f104 0619 	add.w	r6, r4, #25
 8009358:	e7f5      	b.n	8009346 <_printf_i+0x222>
 800935a:	bf00      	nop
 800935c:	0800dad9 	.word	0x0800dad9
 8009360:	0800daea 	.word	0x0800daea

08009364 <memmove>:
 8009364:	4288      	cmp	r0, r1
 8009366:	b510      	push	{r4, lr}
 8009368:	eb01 0402 	add.w	r4, r1, r2
 800936c:	d902      	bls.n	8009374 <memmove+0x10>
 800936e:	4284      	cmp	r4, r0
 8009370:	4623      	mov	r3, r4
 8009372:	d807      	bhi.n	8009384 <memmove+0x20>
 8009374:	1e43      	subs	r3, r0, #1
 8009376:	42a1      	cmp	r1, r4
 8009378:	d008      	beq.n	800938c <memmove+0x28>
 800937a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800937e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009382:	e7f8      	b.n	8009376 <memmove+0x12>
 8009384:	4402      	add	r2, r0
 8009386:	4601      	mov	r1, r0
 8009388:	428a      	cmp	r2, r1
 800938a:	d100      	bne.n	800938e <memmove+0x2a>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009396:	e7f7      	b.n	8009388 <memmove+0x24>

08009398 <memcpy>:
 8009398:	440a      	add	r2, r1
 800939a:	4291      	cmp	r1, r2
 800939c:	f100 33ff 	add.w	r3, r0, #4294967295
 80093a0:	d100      	bne.n	80093a4 <memcpy+0xc>
 80093a2:	4770      	bx	lr
 80093a4:	b510      	push	{r4, lr}
 80093a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ae:	4291      	cmp	r1, r2
 80093b0:	d1f9      	bne.n	80093a6 <memcpy+0xe>
 80093b2:	bd10      	pop	{r4, pc}

080093b4 <_realloc_r>:
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	4680      	mov	r8, r0
 80093ba:	4615      	mov	r5, r2
 80093bc:	460c      	mov	r4, r1
 80093be:	b921      	cbnz	r1, 80093ca <_realloc_r+0x16>
 80093c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4611      	mov	r1, r2
 80093c6:	f7ff bbad 	b.w	8008b24 <_malloc_r>
 80093ca:	b92a      	cbnz	r2, 80093d8 <_realloc_r+0x24>
 80093cc:	f7ff fc9a 	bl	8008d04 <_free_r>
 80093d0:	2400      	movs	r4, #0
 80093d2:	4620      	mov	r0, r4
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	f000 f81a 	bl	8009410 <_malloc_usable_size_r>
 80093dc:	4285      	cmp	r5, r0
 80093de:	4606      	mov	r6, r0
 80093e0:	d802      	bhi.n	80093e8 <_realloc_r+0x34>
 80093e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093e6:	d8f4      	bhi.n	80093d2 <_realloc_r+0x1e>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff fb9a 	bl	8008b24 <_malloc_r>
 80093f0:	4607      	mov	r7, r0
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0ec      	beq.n	80093d0 <_realloc_r+0x1c>
 80093f6:	42b5      	cmp	r5, r6
 80093f8:	462a      	mov	r2, r5
 80093fa:	4621      	mov	r1, r4
 80093fc:	bf28      	it	cs
 80093fe:	4632      	movcs	r2, r6
 8009400:	f7ff ffca 	bl	8009398 <memcpy>
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff fc7c 	bl	8008d04 <_free_r>
 800940c:	463c      	mov	r4, r7
 800940e:	e7e0      	b.n	80093d2 <_realloc_r+0x1e>

08009410 <_malloc_usable_size_r>:
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f18      	subs	r0, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbc      	itt	lt
 800941a:	580b      	ldrlt	r3, [r1, r0]
 800941c:	18c0      	addlt	r0, r0, r3
 800941e:	4770      	bx	lr

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
