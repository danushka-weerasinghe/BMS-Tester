
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  08008f88  08008f88  00009f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df8  08009df8  0000b4a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009df8  08009df8  0000adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e00  08009e00  0000b4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e00  08009e00  0000ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  08009e08  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b4a8  2**0
                  CONTENTS
 10 .bss          000007c4  200004a8  200004a8  0000b4a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000c6c  20000c6c  0000b4a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b4a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049ff0  00000000  00000000  0000b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000413c  00000000  00000000  000554c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000034d8  00000000  00000000  00059608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002799  00000000  00000000  0005cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e57  00000000  00000000  0005f279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002135e  00000000  00000000  000640d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1589  00000000  00000000  0008542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001769b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f304  00000000  00000000  001769fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00185d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f6c 	.word	0x08008f6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004ac 	.word	0x200004ac
 80001ec:	08008f6c 	.word	0x08008f6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b96a 	b.w	8001160 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	460c      	mov	r4, r1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d14e      	bne.n	8000f4e <__udivmoddi4+0xaa>
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	458c      	cmp	ip, r1
 8000eb4:	4686      	mov	lr, r0
 8000eb6:	fab2 f282 	clz	r2, r2
 8000eba:	d962      	bls.n	8000f82 <__udivmoddi4+0xde>
 8000ebc:	b14a      	cbz	r2, 8000ed2 <__udivmoddi4+0x2e>
 8000ebe:	f1c2 0320 	rsb	r3, r2, #32
 8000ec2:	4091      	lsls	r1, r2
 8000ec4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	4319      	orrs	r1, r3
 8000ece:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f f68c 	uxth.w	r6, ip
 8000eda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ede:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ee2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb04 f106 	mul.w	r1, r4, r6
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x64>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000efa:	f080 8112 	bcs.w	8001122 <__udivmoddi4+0x27e>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 810f 	bls.w	8001122 <__udivmoddi4+0x27e>
 8000f04:	3c02      	subs	r4, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a59      	subs	r1, r3, r1
 8000f0a:	fa1f f38e 	uxth.w	r3, lr
 8000f0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f12:	fb07 1110 	mls	r1, r7, r0, r1
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f606 	mul.w	r6, r0, r6
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	d90a      	bls.n	8000f38 <__udivmoddi4+0x94>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f2a:	f080 80fc 	bcs.w	8001126 <__udivmoddi4+0x282>
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	f240 80f9 	bls.w	8001126 <__udivmoddi4+0x282>
 8000f34:	4463      	add	r3, ip
 8000f36:	3802      	subs	r0, #2
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f3e:	2100      	movs	r1, #0
 8000f40:	b11d      	cbz	r5, 8000f4a <__udivmoddi4+0xa6>
 8000f42:	40d3      	lsrs	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	e9c5 3200 	strd	r3, r2, [r5]
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d905      	bls.n	8000f5e <__udivmoddi4+0xba>
 8000f52:	b10d      	cbz	r5, 8000f58 <__udivmoddi4+0xb4>
 8000f54:	e9c5 0100 	strd	r0, r1, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e7f5      	b.n	8000f4a <__udivmoddi4+0xa6>
 8000f5e:	fab3 f183 	clz	r1, r3
 8000f62:	2900      	cmp	r1, #0
 8000f64:	d146      	bne.n	8000ff4 <__udivmoddi4+0x150>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d302      	bcc.n	8000f70 <__udivmoddi4+0xcc>
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	f0c0 80f0 	bcc.w	8001150 <__udivmoddi4+0x2ac>
 8000f70:	1a86      	subs	r6, r0, r2
 8000f72:	eb64 0303 	sbc.w	r3, r4, r3
 8000f76:	2001      	movs	r0, #1
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	d0e6      	beq.n	8000f4a <__udivmoddi4+0xa6>
 8000f7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f80:	e7e3      	b.n	8000f4a <__udivmoddi4+0xa6>
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	f040 8090 	bne.w	80010a8 <__udivmoddi4+0x204>
 8000f88:	eba1 040c 	sub.w	r4, r1, ip
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa1f f78c 	uxth.w	r7, ip
 8000f94:	2101      	movs	r1, #1
 8000f96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fa6:	fb07 f006 	mul.w	r0, r7, r6
 8000faa:	4298      	cmp	r0, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x11c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000fb6:	d202      	bcs.n	8000fbe <__udivmoddi4+0x11a>
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	f200 80cd 	bhi.w	8001158 <__udivmoddi4+0x2b4>
 8000fbe:	4626      	mov	r6, r4
 8000fc0:	1a1c      	subs	r4, r3, r0
 8000fc2:	fa1f f38e 	uxth.w	r3, lr
 8000fc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fca:	fb08 4410 	mls	r4, r8, r0, r4
 8000fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fd2:	fb00 f707 	mul.w	r7, r0, r7
 8000fd6:	429f      	cmp	r7, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x148>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fe2:	d202      	bcs.n	8000fea <__udivmoddi4+0x146>
 8000fe4:	429f      	cmp	r7, r3
 8000fe6:	f200 80b0 	bhi.w	800114a <__udivmoddi4+0x2a6>
 8000fea:	4620      	mov	r0, r4
 8000fec:	1bdb      	subs	r3, r3, r7
 8000fee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ff2:	e7a5      	b.n	8000f40 <__udivmoddi4+0x9c>
 8000ff4:	f1c1 0620 	rsb	r6, r1, #32
 8000ff8:	408b      	lsls	r3, r1
 8000ffa:	fa22 f706 	lsr.w	r7, r2, r6
 8000ffe:	431f      	orrs	r7, r3
 8001000:	fa20 fc06 	lsr.w	ip, r0, r6
 8001004:	fa04 f301 	lsl.w	r3, r4, r1
 8001008:	ea43 030c 	orr.w	r3, r3, ip
 800100c:	40f4      	lsrs	r4, r6
 800100e:	fa00 f801 	lsl.w	r8, r0, r1
 8001012:	0c38      	lsrs	r0, r7, #16
 8001014:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001018:	fbb4 fef0 	udiv	lr, r4, r0
 800101c:	fa1f fc87 	uxth.w	ip, r7
 8001020:	fb00 441e 	mls	r4, r0, lr, r4
 8001024:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001028:	fb0e f90c 	mul.w	r9, lr, ip
 800102c:	45a1      	cmp	r9, r4
 800102e:	fa02 f201 	lsl.w	r2, r2, r1
 8001032:	d90a      	bls.n	800104a <__udivmoddi4+0x1a6>
 8001034:	193c      	adds	r4, r7, r4
 8001036:	f10e 3aff 	add.w	sl, lr, #4294967295
 800103a:	f080 8084 	bcs.w	8001146 <__udivmoddi4+0x2a2>
 800103e:	45a1      	cmp	r9, r4
 8001040:	f240 8081 	bls.w	8001146 <__udivmoddi4+0x2a2>
 8001044:	f1ae 0e02 	sub.w	lr, lr, #2
 8001048:	443c      	add	r4, r7
 800104a:	eba4 0409 	sub.w	r4, r4, r9
 800104e:	fa1f f983 	uxth.w	r9, r3
 8001052:	fbb4 f3f0 	udiv	r3, r4, r0
 8001056:	fb00 4413 	mls	r4, r0, r3, r4
 800105a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800105e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001062:	45a4      	cmp	ip, r4
 8001064:	d907      	bls.n	8001076 <__udivmoddi4+0x1d2>
 8001066:	193c      	adds	r4, r7, r4
 8001068:	f103 30ff 	add.w	r0, r3, #4294967295
 800106c:	d267      	bcs.n	800113e <__udivmoddi4+0x29a>
 800106e:	45a4      	cmp	ip, r4
 8001070:	d965      	bls.n	800113e <__udivmoddi4+0x29a>
 8001072:	3b02      	subs	r3, #2
 8001074:	443c      	add	r4, r7
 8001076:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800107a:	fba0 9302 	umull	r9, r3, r0, r2
 800107e:	eba4 040c 	sub.w	r4, r4, ip
 8001082:	429c      	cmp	r4, r3
 8001084:	46ce      	mov	lr, r9
 8001086:	469c      	mov	ip, r3
 8001088:	d351      	bcc.n	800112e <__udivmoddi4+0x28a>
 800108a:	d04e      	beq.n	800112a <__udivmoddi4+0x286>
 800108c:	b155      	cbz	r5, 80010a4 <__udivmoddi4+0x200>
 800108e:	ebb8 030e 	subs.w	r3, r8, lr
 8001092:	eb64 040c 	sbc.w	r4, r4, ip
 8001096:	fa04 f606 	lsl.w	r6, r4, r6
 800109a:	40cb      	lsrs	r3, r1
 800109c:	431e      	orrs	r6, r3
 800109e:	40cc      	lsrs	r4, r1
 80010a0:	e9c5 6400 	strd	r6, r4, [r5]
 80010a4:	2100      	movs	r1, #0
 80010a6:	e750      	b.n	8000f4a <__udivmoddi4+0xa6>
 80010a8:	f1c2 0320 	rsb	r3, r2, #32
 80010ac:	fa20 f103 	lsr.w	r1, r0, r3
 80010b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010b4:	fa24 f303 	lsr.w	r3, r4, r3
 80010b8:	4094      	lsls	r4, r2
 80010ba:	430c      	orrs	r4, r1
 80010bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80010c4:	fa1f f78c 	uxth.w	r7, ip
 80010c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010cc:	fb08 3110 	mls	r1, r8, r0, r3
 80010d0:	0c23      	lsrs	r3, r4, #16
 80010d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010d6:	fb00 f107 	mul.w	r1, r0, r7
 80010da:	4299      	cmp	r1, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x24c>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80010e6:	d22c      	bcs.n	8001142 <__udivmoddi4+0x29e>
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d92a      	bls.n	8001142 <__udivmoddi4+0x29e>
 80010ec:	3802      	subs	r0, #2
 80010ee:	4463      	add	r3, ip
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	b2a4      	uxth	r4, r4
 80010f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010f8:	fb08 3311 	mls	r3, r8, r1, r3
 80010fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001100:	fb01 f307 	mul.w	r3, r1, r7
 8001104:	42a3      	cmp	r3, r4
 8001106:	d908      	bls.n	800111a <__udivmoddi4+0x276>
 8001108:	eb1c 0404 	adds.w	r4, ip, r4
 800110c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001110:	d213      	bcs.n	800113a <__udivmoddi4+0x296>
 8001112:	42a3      	cmp	r3, r4
 8001114:	d911      	bls.n	800113a <__udivmoddi4+0x296>
 8001116:	3902      	subs	r1, #2
 8001118:	4464      	add	r4, ip
 800111a:	1ae4      	subs	r4, r4, r3
 800111c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001120:	e739      	b.n	8000f96 <__udivmoddi4+0xf2>
 8001122:	4604      	mov	r4, r0
 8001124:	e6f0      	b.n	8000f08 <__udivmoddi4+0x64>
 8001126:	4608      	mov	r0, r1
 8001128:	e706      	b.n	8000f38 <__udivmoddi4+0x94>
 800112a:	45c8      	cmp	r8, r9
 800112c:	d2ae      	bcs.n	800108c <__udivmoddi4+0x1e8>
 800112e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001132:	eb63 0c07 	sbc.w	ip, r3, r7
 8001136:	3801      	subs	r0, #1
 8001138:	e7a8      	b.n	800108c <__udivmoddi4+0x1e8>
 800113a:	4631      	mov	r1, r6
 800113c:	e7ed      	b.n	800111a <__udivmoddi4+0x276>
 800113e:	4603      	mov	r3, r0
 8001140:	e799      	b.n	8001076 <__udivmoddi4+0x1d2>
 8001142:	4630      	mov	r0, r6
 8001144:	e7d4      	b.n	80010f0 <__udivmoddi4+0x24c>
 8001146:	46d6      	mov	lr, sl
 8001148:	e77f      	b.n	800104a <__udivmoddi4+0x1a6>
 800114a:	4463      	add	r3, ip
 800114c:	3802      	subs	r0, #2
 800114e:	e74d      	b.n	8000fec <__udivmoddi4+0x148>
 8001150:	4606      	mov	r6, r0
 8001152:	4623      	mov	r3, r4
 8001154:	4608      	mov	r0, r1
 8001156:	e70f      	b.n	8000f78 <__udivmoddi4+0xd4>
 8001158:	3e02      	subs	r6, #2
 800115a:	4463      	add	r3, ip
 800115c:	e730      	b.n	8000fc0 <__udivmoddi4+0x11c>
 800115e:	bf00      	nop

08001160 <__aeabi_idiv0>:
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	817b      	strh	r3, [r7, #10]
 8001176:	460b      	mov	r3, r1
 8001178:	813b      	strh	r3, [r7, #8]
 800117a:	4613      	mov	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001184:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001186:	7dbb      	ldrb	r3, [r7, #22]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf0c      	ite	eq
 800118c:	2301      	moveq	r3, #1
 800118e:	2300      	movne	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001194:	897a      	ldrh	r2, [r7, #10]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4413      	add	r3, r2
 800119a:	b298      	uxth	r0, r3
 800119c:	893b      	ldrh	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	893a      	ldrh	r2, [r7, #8]
 80011a4:	8979      	ldrh	r1, [r7, #10]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4603      	mov	r3, r0
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f001 f875 	bl	800229a <u8g2_IsIntersection>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d040      	beq.n	8001238 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80011ba:	e035      	b.n	8001228 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	4013      	ands	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	7dba      	ldrb	r2, [r7, #22]
 80011ce:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80011d2:	893a      	ldrh	r2, [r7, #8]
 80011d4:	8979      	ldrh	r1, [r7, #10]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 ff9e 	bl	800211e <u8g2_DrawHVLine>
 80011e2:	e010      	b.n	8001206 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	7d7a      	ldrb	r2, [r7, #21]
 80011f2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80011f6:	893a      	ldrh	r2, [r7, #8]
 80011f8:	8979      	ldrh	r1, [r7, #10]
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 ff8c 	bl	800211e <u8g2_DrawHVLine>
    }
    x++;
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	3301      	adds	r3, #1
 800120a:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	75fb      	strb	r3, [r7, #23]
      b++;
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	3301      	adds	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	3b01      	subs	r3, #1
 8001226:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1c6      	bne.n	80011bc <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	7dba      	ldrb	r2, [r7, #22]
 8001232:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001236:	e000      	b.n	800123a <u8g2_DrawHXBM+0xd6>
    return;
 8001238:	bf00      	nop
}
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af02      	add	r7, sp, #8
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	817b      	strh	r3, [r7, #10]
 8001252:	460b      	mov	r3, r1
 8001254:	813b      	strh	r3, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800125e:	8afb      	ldrh	r3, [r7, #22]
 8001260:	3307      	adds	r3, #7
 8001262:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800126a:	897a      	ldrh	r2, [r7, #10]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4413      	add	r3, r2
 8001270:	b298      	uxth	r0, r3
 8001272:	893a      	ldrh	r2, [r7, #8]
 8001274:	8c3b      	ldrh	r3, [r7, #32]
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	893a      	ldrh	r2, [r7, #8]
 800127c:	8979      	ldrh	r1, [r7, #10]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4603      	mov	r3, r0
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f001 f809 	bl	800229a <u8g2_IsIntersection>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d017      	beq.n	80012be <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800128e:	e012      	b.n	80012b6 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001290:	88f8      	ldrh	r0, [r7, #6]
 8001292:	893a      	ldrh	r2, [r7, #8]
 8001294:	8979      	ldrh	r1, [r7, #10]
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4603      	mov	r3, r0
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ff61 	bl	8001164 <u8g2_DrawHXBM>
    bitmap += blen;
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a6:	4413      	add	r3, r2
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 80012aa:	893b      	ldrh	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	813b      	strh	r3, [r7, #8]
    h--;
 80012b0:	8c3b      	ldrh	r3, [r7, #32]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80012b6:	8c3b      	ldrh	r3, [r7, #32]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e9      	bne.n	8001290 <u8g2_DrawXBM+0x50>
 80012bc:	e000      	b.n	80012c0 <u8g2_DrawXBM+0x80>
    return;
 80012be:	bf00      	nop
  }
}
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	7c1b      	ldrb	r3, [r3, #16]
 80012d4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f005 fd3c 	bl	8006d72 <memset>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af02      	add	r7, sp, #8
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	4613      	mov	r3, r2
 8001310:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7c1b      	ldrb	r3, [r3, #16]
 8001318:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001322:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	b29b      	uxth	r3, r3
 8001328:	89ba      	ldrh	r2, [r7, #12]
 800132a:	fb12 f303 	smulbb	r3, r2, r3
 800132e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800133e:	7bf9      	ldrb	r1, [r7, #15]
 8001340:	78ba      	ldrb	r2, [r7, #2]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	460b      	mov	r3, r1
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f001 fc8b 	bl	8002c66 <u8x8_DrawTile>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800136a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001372:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7c5b      	ldrb	r3, [r3, #17]
 800137a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800137c:	7bba      	ldrb	r2, [r7, #14]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffbd 	bl	8001302 <u8g2_send_tile_row>
    src_row++;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	3301      	adds	r3, #1
 8001392:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	7b7b      	ldrb	r3, [r7, #13]
 8001398:	429a      	cmp	r2, r3
 800139a:	d203      	bcs.n	80013a4 <u8g2_send_buffer+0x4c>
 800139c:	7bba      	ldrb	r2, [r7, #14]
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3eb      	bcc.n	800137c <u8g2_send_buffer+0x24>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff69 	bl	80012c6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffd8 	bl	80013ac <u8g2_SetBufferCurrTileRow>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffa3 	bl	8001358 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001418:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4413      	add	r3, r2
 8001424:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	7c5b      	ldrb	r3, [r3, #17]
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	429a      	cmp	r2, r3
 8001430:	d304      	bcc.n	800143c <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f001 fc79 	bl	8002d2a <u8x8_RefreshDisplay>
    return 0;
 8001438:	2300      	movs	r3, #0
 800143a:	e00d      	b.n	8001458 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff3d 	bl	80012c6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffab 	bl	80013ac <u8g2_SetBufferCurrTileRow>
  return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffb7 	bl	80013dc <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffc8 	bl	8001404 <u8g2_NextPage>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff95 	bl	80013ac <u8g2_SetBufferCurrTileRow>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2208      	movs	r2, #8
 8001498:	701a      	strb	r2, [r3, #0]
  return buf;
 800149a:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200004c4 	.word	0x200004c4

080014ac <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <u8g2_Setup_st7565_64128n_f+0x44>)
 80014c2:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <u8g2_Setup_st7565_64128n_f+0x48>)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f001 fc91 	bl	8002dec <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014ca:	f107 0313 	add.w	r3, r7, #19
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffdc 	bl	800148c <u8g2_m_16_8_f>
 80014d4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014d6:	7cfa      	ldrb	r2, [r7, #19]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <u8g2_Setup_st7565_64128n_f+0x4c>)
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 ffc4 	bl	800246e <u8g2_SetupBuffer>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08002981 	.word	0x08002981
 80014f4:	08002b21 	.word	0x08002b21
 80014f8:	080022f1 	.word	0x080022f1

080014fc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	81fb      	strh	r3, [r7, #14]
    font++;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	4413      	add	r3, r2
 8001550:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001552:	89fb      	ldrh	r3, [r7, #14]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800156a:	2100      	movs	r1, #0
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7ff ffc5 	bl	80014fc <u8g2_font_get_byte>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800157a:	2101      	movs	r1, #1
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f7ff ffbd 	bl	80014fc <u8g2_font_get_byte>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800158a:	2102      	movs	r1, #2
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f7ff ffb5 	bl	80014fc <u8g2_font_get_byte>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800159a:	2103      	movs	r1, #3
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f7ff ffad 	bl	80014fc <u8g2_font_get_byte>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80015aa:	2104      	movs	r1, #4
 80015ac:	6838      	ldr	r0, [r7, #0]
 80015ae:	f7ff ffa5 	bl	80014fc <u8g2_font_get_byte>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015ba:	2105      	movs	r1, #5
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff ff9d 	bl	80014fc <u8g2_font_get_byte>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015ca:	2106      	movs	r1, #6
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f7ff ff95 	bl	80014fc <u8g2_font_get_byte>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80015da:	2107      	movs	r1, #7
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7ff ff8d 	bl	80014fc <u8g2_font_get_byte>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80015ea:	2108      	movs	r1, #8
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f7ff ff85 	bl	80014fc <u8g2_font_get_byte>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80015fa:	2109      	movs	r1, #9
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f7ff ff7d 	bl	80014fc <u8g2_font_get_byte>
 8001602:	4603      	mov	r3, r0
 8001604:	b25a      	sxtb	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800160a:	210a      	movs	r1, #10
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f7ff ff75 	bl	80014fc <u8g2_font_get_byte>
 8001612:	4603      	mov	r3, r0
 8001614:	b25a      	sxtb	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800161a:	210b      	movs	r1, #11
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff ff6d 	bl	80014fc <u8g2_font_get_byte>
 8001622:	4603      	mov	r3, r0
 8001624:	b25a      	sxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800162a:	210c      	movs	r1, #12
 800162c:	6838      	ldr	r0, [r7, #0]
 800162e:	f7ff ff65 	bl	80014fc <u8g2_font_get_byte>
 8001632:	4603      	mov	r3, r0
 8001634:	b25a      	sxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800163a:	210d      	movs	r1, #13
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff ff5d 	bl	80014fc <u8g2_font_get_byte>
 8001642:	4603      	mov	r3, r0
 8001644:	b25a      	sxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800164a:	210e      	movs	r1, #14
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f7ff ff55 	bl	80014fc <u8g2_font_get_byte>
 8001652:	4603      	mov	r3, r0
 8001654:	b25a      	sxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800165a:	210f      	movs	r1, #15
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f7ff ff4d 	bl	80014fc <u8g2_font_get_byte>
 8001662:	4603      	mov	r3, r0
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800166a:	2110      	movs	r1, #16
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f7ff ff45 	bl	80014fc <u8g2_font_get_byte>
 8001672:	4603      	mov	r3, r0
 8001674:	b25a      	sxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800167a:	2111      	movs	r1, #17
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f7ff ff4f 	bl	8001520 <u8g2_font_get_word>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800168a:	2113      	movs	r1, #19
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f7ff ff47 	bl	8001520 <u8g2_font_get_word>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800169a:	2115      	movs	r1, #21
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f7ff ff3f 	bl	8001520 <u8g2_font_get_word>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	82da      	strh	r2, [r3, #22]
#endif
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7b1b      	ldrb	r3, [r3, #12]
 80016c2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	fa42 f303 	asr.w	r3, r2, r3
 80016d4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80016da:	7bba      	ldrb	r2, [r7, #14]
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	4413      	add	r3, r2
 80016e0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	d91a      	bls.n	800171e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80016ec:	7b3a      	ldrb	r2, [r7, #12]
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	b25a      	sxtb	r2, r3
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4313      	orrs	r3, r2
 8001714:	b25b      	sxtb	r3, r3
 8001716:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	3b08      	subs	r3, #8
 800171c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4013      	ands	r3, r2
 8001732:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7bba      	ldrb	r2, [r7, #14]
 8001738:	731a      	strb	r2, [r3, #12]
  return val;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffaa 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	3b01      	subs	r3, #1
 800176a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800176c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	73fb      	strb	r3, [r7, #15]
  return v;
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800178e:	b490      	push	{r4, r7}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4604      	mov	r4, r0
 8001796:	4608      	mov	r0, r1
 8001798:	4611      	mov	r1, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4623      	mov	r3, r4
 800179e:	80fb      	strh	r3, [r7, #6]
 80017a0:	4603      	mov	r3, r0
 80017a2:	717b      	strb	r3, [r7, #5]
 80017a4:	460b      	mov	r3, r1
 80017a6:	713b      	strb	r3, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d014      	beq.n	80017dc <u8g2_add_vector_y+0x4e>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	dc19      	bgt.n	80017ea <u8g2_add_vector_y+0x5c>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <u8g2_add_vector_y+0x32>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d007      	beq.n	80017ce <u8g2_add_vector_y+0x40>
 80017be:	e014      	b.n	80017ea <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80017c0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4413      	add	r3, r2
 80017ca:	80fb      	strh	r3, [r7, #6]
      break;
 80017cc:	e014      	b.n	80017f8 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80017ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4413      	add	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]
      break;
 80017da:	e00d      	b.n	80017f8 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80017dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	80fb      	strh	r3, [r7, #6]
      break;
 80017e8:	e006      	b.n	80017f8 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	80fb      	strh	r3, [r7, #6]
      break;      
 80017f6:	bf00      	nop
  }
  return dy;
 80017f8:	88fb      	ldrh	r3, [r7, #6]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc90      	pop	{r4, r7}
 8001802:	4770      	bx	lr

08001804 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	4603      	mov	r3, r0
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	460b      	mov	r3, r1
 800181c:	713b      	strb	r3, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d014      	beq.n	8001852 <u8g2_add_vector_x+0x4e>
 8001828:	2b02      	cmp	r3, #2
 800182a:	dc19      	bgt.n	8001860 <u8g2_add_vector_x+0x5c>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <u8g2_add_vector_x+0x32>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d007      	beq.n	8001844 <u8g2_add_vector_x+0x40>
 8001834:	e014      	b.n	8001860 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001836:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800183a:	b29a      	uxth	r2, r3
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4413      	add	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]
      break;
 8001842:	e014      	b.n	800186e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001844:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001848:	b29b      	uxth	r3, r3
 800184a:	88fa      	ldrh	r2, [r7, #6]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	80fb      	strh	r3, [r7, #6]
      break;
 8001850:	e00d      	b.n	800186e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001852:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001856:	b29b      	uxth	r3, r3
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	80fb      	strh	r3, [r7, #6]
      break;
 800185e:	e006      	b.n	800186e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001860:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001864:	b29a      	uxth	r2, r3
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4413      	add	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
      break;      
 800186c:	bf00      	nop
  }
  return dx;
 800186e:	88fb      	ldrh	r3, [r7, #6]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bc90      	pop	{r4, r7}
 8001878:	4770      	bx	lr

0800187a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b088      	sub	sp, #32
 800187e:	af02      	add	r7, sp, #8
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
 8001886:	4613      	mov	r3, r2
 8001888:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3360      	adds	r3, #96	@ 0x60
 800188e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800189a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80018a2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018aa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	7d7b      	ldrb	r3, [r7, #21]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80018b8:	7dfa      	ldrb	r2, [r7, #23]
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d201      	bcs.n	80018c4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	88db      	ldrh	r3, [r3, #6]
 80018ce:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80018d0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018d4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	7c1b      	ldrb	r3, [r3, #16]
 80018dc:	89b8      	ldrh	r0, [r7, #12]
 80018de:	f7ff ff91 	bl	8001804 <u8g2_add_vector_x>
 80018e2:	4603      	mov	r3, r0
 80018e4:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80018e6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	7c1b      	ldrb	r3, [r3, #16]
 80018f2:	8978      	ldrh	r0, [r7, #10]
 80018f4:	f7ff ff4b 	bl	800178e <u8g2_add_vector_y>
 80018f8:	4603      	mov	r3, r0
 80018fa:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	7b9a      	ldrb	r2, [r3, #14]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	b298      	uxth	r0, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	7c1b      	ldrb	r3, [r3, #16]
 8001914:	897a      	ldrh	r2, [r7, #10]
 8001916:	89b9      	ldrh	r1, [r7, #12]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4603      	mov	r3, r0
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fbfe 	bl	800211e <u8g2_DrawHVLine>
 8001922:	e013      	b.n	800194c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	7b5b      	ldrb	r3, [r3, #13]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10f      	bne.n	800194c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	7bda      	ldrb	r2, [r3, #15]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001936:	7dbb      	ldrb	r3, [r7, #22]
 8001938:	b298      	uxth	r0, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	7c1b      	ldrb	r3, [r3, #16]
 800193e:	897a      	ldrh	r2, [r7, #10]
 8001940:	89b9      	ldrh	r1, [r7, #12]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fbe9 	bl	800211e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800194c:	7dfa      	ldrb	r2, [r7, #23]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	429a      	cmp	r2, r3
 8001952:	d309      	bcc.n	8001968 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001954:	7dfa      	ldrb	r2, [r7, #23]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	757b      	strb	r3, [r7, #21]
    ly++;
 8001960:	7d3b      	ldrb	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001966:	e79d      	b.n	80018a4 <u8g2_font_decode_len+0x2a>
      break;
 8001968:	bf00      	nop
  }
  lx += cnt;
 800196a:	7d7a      	ldrb	r2, [r7, #21]
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	4413      	add	r3, r2
 8001970:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001972:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800197a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	725a      	strb	r2, [r3, #9]
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3360      	adds	r3, #96	@ 0x60
 8001998:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80019ac:	4619      	mov	r1, r3
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff fe7f 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80019c2:	4619      	mov	r1, r3
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fe74 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	7b9b      	ldrb	r3, [r3, #14]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	73da      	strb	r2, [r3, #15]
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3360      	adds	r3, #96	@ 0x60
 8001a06:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffbd 	bl	800198a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001a16:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6978      	ldr	r0, [r7, #20]
 8001a22:	f7ff fe91 	bl	8001748 <u8g2_font_decode_get_signed_bits>
 8001a26:	4603      	mov	r3, r0
 8001a28:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001a30:	4619      	mov	r1, r3
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff fe88 	bl	8001748 <u8g2_font_decode_get_signed_bits>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001a42:	4619      	mov	r1, r3
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff fe7f 	bl	8001748 <u8g2_font_decode_get_signed_bits>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f340 80d7 	ble.w	8001c08 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	8898      	ldrh	r0, [r3, #4]
 8001a5e:	7cfa      	ldrb	r2, [r7, #19]
 8001a60:	7c7b      	ldrb	r3, [r7, #17]
 8001a62:	4413      	add	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	425b      	negs	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	7c1b      	ldrb	r3, [r3, #16]
 8001a70:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001a74:	f7ff fec6 	bl	8001804 <u8g2_add_vector_x>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	88d8      	ldrh	r0, [r3, #6]
 8001a84:	7cfa      	ldrb	r2, [r7, #19]
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	4413      	add	r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	425b      	negs	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	b25a      	sxtb	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	7c1b      	ldrb	r3, [r3, #16]
 8001a96:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001a9a:	f7ff fe78 	bl	800178e <u8g2_add_vector_y>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	88db      	ldrh	r3, [r3, #6]
 8001ab0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001ab2:	8bfb      	ldrh	r3, [r7, #30]
 8001ab4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001ab6:	8b7b      	ldrh	r3, [r7, #26]
 8001ab8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d85a      	bhi.n	8001b78 <u8g2_font_decode_glyph+0x180>
 8001ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac8 <u8g2_font_decode_glyph+0xd0>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001af5 	.word	0x08001af5
 8001ad0:	08001b1d 	.word	0x08001b1d
 8001ad4:	08001b51 	.word	0x08001b51
      {
	case 0:
	    x1 += decode->glyph_width;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	8bbb      	ldrh	r3, [r7, #28]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001ae6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	8b3b      	ldrh	r3, [r7, #24]
 8001aee:	4413      	add	r3, r2
 8001af0:	833b      	strh	r3, [r7, #24]
	    break;
 8001af2:	e041      	b.n	8001b78 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001af4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	8bfa      	ldrh	r2, [r7, #30]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b00:	8bfb      	ldrh	r3, [r7, #30]
 8001b02:	3301      	adds	r3, #1
 8001b04:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b06:	8bbb      	ldrh	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	4413      	add	r3, r2
 8001b18:	833b      	strh	r3, [r7, #24]
	    break;
 8001b1a:	e02d      	b.n	8001b78 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	8bfa      	ldrh	r2, [r7, #30]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b2a:	8bfb      	ldrh	r3, [r7, #30]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b30:	8bbb      	ldrh	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001b36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	8b7a      	ldrh	r2, [r7, #26]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b42:	8b7b      	ldrh	r3, [r7, #26]
 8001b44:	3301      	adds	r3, #1
 8001b46:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b48:	8b3b      	ldrh	r3, [r7, #24]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b4e:	e013      	b.n	8001b78 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001b50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	8bbb      	ldrh	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8b7a      	ldrh	r2, [r7, #26]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b70:	8b3b      	ldrh	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b76:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001b78:	8bb8      	ldrh	r0, [r7, #28]
 8001b7a:	8b7a      	ldrh	r2, [r7, #26]
 8001b7c:	8bf9      	ldrh	r1, [r7, #30]
 8001b7e:	8b3b      	ldrh	r3, [r7, #24]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4603      	mov	r3, r0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fb88 	bl	800229a <u8g2_IsIntersection>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001b90:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001b94:	e03a      	b.n	8001c0c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff fd81 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff fd78 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fe54 	bl	800187a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fe4e 	bl	800187a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001bde:	2101      	movs	r1, #1
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7ff fd66 	bl	80016b2 <u8g2_font_decode_get_unsigned_bits>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ec      	bne.n	8001bc6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001bf2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dd00      	ble.n	8001bfc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001bfa:	e7d2      	b.n	8001ba2 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001bfc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	7b9a      	ldrb	r2, [r3, #14]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001c08:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3317      	adds	r3, #23
 8001c2a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	2bff      	cmp	r3, #255	@ 0xff
 8001c30:	d82a      	bhi.n	8001c88 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	2b60      	cmp	r3, #96	@ 0x60
 8001c36:	d907      	bls.n	8001c48 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001c3e:	461a      	mov	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	2b40      	cmp	r3, #64	@ 0x40
 8001c4c:	d906      	bls.n	8001c5c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001c54:	461a      	mov	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d04e      	beq.n	8001d04 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d102      	bne.n	8001c78 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3302      	adds	r3, #2
 8001c76:	e049      	b.n	8001d0c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c86:	e7e9      	b.n	8001c5c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001c8e:	461a      	mov	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6938      	ldr	r0, [r7, #16]
 8001c9e:	f7ff fc3f 	bl	8001520 <u8g2_font_get_word>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001cac:	2102      	movs	r1, #2
 8001cae:	6938      	ldr	r0, [r7, #16]
 8001cb0:	f7ff fc36 	bl	8001520 <u8g2_font_get_word>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001cbe:	89fa      	ldrh	r2, [r7, #14]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3e9      	bcc.n	8001c9a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001ce6:	89fa      	ldrh	r2, [r7, #14]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d102      	bne.n	8001cf4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	e00b      	b.n	8001d0c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001d02:	e7e0      	b.n	8001cc6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001d04:	bf00      	nop
 8001d06:	e000      	b.n	8001d0a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001d08:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	460b      	mov	r3, r1
 8001d28:	813b      	strh	r3, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	897a      	ldrh	r2, [r7, #10]
 8001d36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	893a      	ldrh	r2, [r7, #8]
 8001d3e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4619      	mov	r1, r3
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff ff64 	bl	8001c14 <u8g2_font_get_glyph_data>
 8001d4c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001d54:	6939      	ldr	r1, [r7, #16]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fe4e 	bl	80019f8 <u8g2_font_decode_glyph>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001d60:	8afb      	ldrh	r3, [r7, #22]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	813b      	strh	r3, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d833      	bhi.n	8001df8 <u8g2_DrawGlyph+0x8c>
 8001d90:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <u8g2_DrawGlyph+0x2c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001dbd 	.word	0x08001dbd
 8001da0:	08001dd1 	.word	0x08001dd1
 8001da4:	08001de5 	.word	0x08001de5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	813b      	strh	r3, [r7, #8]
      break;
 8001dba:	e01d      	b.n	8001df8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	817b      	strh	r3, [r7, #10]
      break;
 8001dce:	e013      	b.n	8001df8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	4798      	blx	r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	893b      	ldrh	r3, [r7, #8]
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	813b      	strh	r3, [r7, #8]
      break;
 8001de2:	e009      	b.n	8001df8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	4798      	blx	r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	897b      	ldrh	r3, [r7, #10]
 8001df2:	4413      	add	r3, r2
 8001df4:	817b      	strh	r3, [r7, #10]
      break;
 8001df6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	893a      	ldrh	r2, [r7, #8]
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff ff88 	bl	8001d14 <u8g2_font_draw_glyph>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fca7 	bl	8002776 <u8x8_utf8_init>
  sum = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	4611      	mov	r1, r2
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	4798      	blx	r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e3e:	8abb      	ldrh	r3, [r7, #20]
 8001e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d038      	beq.n	8001eba <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e4e:	8abb      	ldrh	r3, [r7, #20]
 8001e50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d0e9      	beq.n	8001e2c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e58:	8abb      	ldrh	r3, [r7, #20]
 8001e5a:	893a      	ldrh	r2, [r7, #8]
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff84 	bl	8001d6c <u8g2_DrawGlyph>
 8001e64:	4603      	mov	r3, r0
 8001e66:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d81e      	bhi.n	8001eb0 <u8g2_draw_string+0xa0>
 8001e72:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <u8g2_draw_string+0x68>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001e93 	.word	0x08001e93
 8001e80:	08001e9d 	.word	0x08001e9d
 8001e84:	08001ea7 	.word	0x08001ea7
      {
	case 0:
	  x += delta;
 8001e88:	897a      	ldrh	r2, [r7, #10]
 8001e8a:	8a7b      	ldrh	r3, [r7, #18]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	817b      	strh	r3, [r7, #10]
	  break;
 8001e90:	e00e      	b.n	8001eb0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001e92:	893a      	ldrh	r2, [r7, #8]
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	4413      	add	r3, r2
 8001e98:	813b      	strh	r3, [r7, #8]
	  break;
 8001e9a:	e009      	b.n	8001eb0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001e9c:	897a      	ldrh	r2, [r7, #10]
 8001e9e:	8a7b      	ldrh	r3, [r7, #18]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	817b      	strh	r3, [r7, #10]
	  break;
 8001ea4:	e004      	b.n	8001eb0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ea6:	893a      	ldrh	r2, [r7, #8]
 8001ea8:	8a7b      	ldrh	r3, [r7, #18]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	813b      	strh	r3, [r7, #8]
	  break;
 8001eae:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001eb0:	8afa      	ldrh	r2, [r7, #22]
 8001eb2:	8a7b      	ldrh	r3, [r7, #18]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001eb8:	e7b8      	b.n	8001e2c <u8g2_draw_string+0x1c>
      break;
 8001eba:	bf00      	nop
    }
  }
  return sum;
 8001ebc:	8afb      	ldrh	r3, [r7, #22]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop

08001ec8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a06      	ldr	r2, [pc, #24]	@ (8001ef8 <u8g2_DrawStr+0x30>)
 8001ede:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001ee0:	893a      	ldrh	r2, [r7, #8]
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff ff92 	bl	8001e10 <u8g2_draw_string>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	08002793 	.word	0x08002793

08001efc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05d      	beq.n	8001fc8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04d      	beq.n	8001fca <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11c      	bne.n	8001f72 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001f44:	429a      	cmp	r2, r3
 8001f46:	da05      	bge.n	8001f54 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd32      	ble.n	8001fca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001f70:	e02b      	b.n	8001fca <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001f80:	4619      	mov	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001f88:	440b      	add	r3, r1
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	da0d      	bge.n	8001faa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dd07      	ble.n	8001fca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001fc6:	e000      	b.n	8001fca <u8g2_UpdateRefHeight+0xce>
    return;
 8001fc8:	bf00      	nop
  }  
}
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <u8g2_SetFontPosBaseline+0x1c>)
 8001ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	08001fd5 	.word	0x08001fd5

0800200c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d00b      	beq.n	8002038 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3374      	adds	r3, #116	@ 0x74
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fa97 	bl	8001560 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff62 	bl	8001efc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	460b      	mov	r3, r1
 8002050:	80fb      	strh	r3, [r7, #6]
 8002052:	4613      	mov	r3, r2
 8002054:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 800205c:	8afb      	ldrh	r3, [r7, #22]
 800205e:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	8abb      	ldrh	r3, [r7, #20]
 8002066:	4413      	add	r3, r2
 8002068:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 800206a:	8afa      	ldrh	r2, [r7, #22]
 800206c:	8abb      	ldrh	r3, [r7, #20]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90b      	bls.n	800208a <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002072:	8afa      	ldrh	r2, [r7, #22]
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d205      	bcs.n	8002086 <u8g2_clip_intersection2+0x46>
			b = d;
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	82bb      	strh	r3, [r7, #20]
			b--;
 800207e:	8abb      	ldrh	r3, [r7, #20]
 8002080:	3b01      	subs	r3, #1
 8002082:	82bb      	strh	r3, [r7, #20]
 8002084:	e001      	b.n	800208a <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 800208a:	8afa      	ldrh	r2, [r7, #22]
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d301      	bcc.n	8002096 <u8g2_clip_intersection2+0x56>
		return 0;
 8002092:	2300      	movs	r3, #0
 8002094:	e01c      	b.n	80020d0 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002096:	8aba      	ldrh	r2, [r7, #20]
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	429a      	cmp	r2, r3
 800209c:	d801      	bhi.n	80020a2 <u8g2_clip_intersection2+0x62>
		return 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	e016      	b.n	80020d0 <u8g2_clip_intersection2+0x90>
	if (a < c)
 80020a2:	8afa      	ldrh	r2, [r7, #22]
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d201      	bcs.n	80020ae <u8g2_clip_intersection2+0x6e>
		a = c;
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 80020ae:	8aba      	ldrh	r2, [r7, #20]
 80020b0:	88bb      	ldrh	r3, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d901      	bls.n	80020ba <u8g2_clip_intersection2+0x7a>
		b = d;
 80020b6:	88bb      	ldrh	r3, [r7, #4]
 80020b8:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8afa      	ldrh	r2, [r7, #22]
 80020be:	801a      	strh	r2, [r3, #0]
	b -= a;
 80020c0:	8aba      	ldrh	r2, [r7, #20]
 80020c2:	8afb      	ldrh	r3, [r7, #22]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	82bb      	strh	r3, [r7, #20]
	*len = b;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	8aba      	ldrh	r2, [r7, #20]
 80020cc:	801a      	strh	r2, [r3, #0]
	return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fa:	893a      	ldrh	r2, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002104:	88f8      	ldrh	r0, [r7, #6]
 8002106:	893a      	ldrh	r2, [r7, #8]
 8002108:	8979      	ldrh	r1, [r7, #10]
 800210a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	47a0      	blx	r4
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}

0800211e <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b087      	sub	sp, #28
 8002122:	af02      	add	r7, sp, #8
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	4608      	mov	r0, r1
 8002128:	4611      	mov	r1, r2
 800212a:	461a      	mov	r2, r3
 800212c:	4603      	mov	r3, r0
 800212e:	817b      	strh	r3, [r7, #10]
 8002130:	460b      	mov	r3, r1
 8002132:	813b      	strh	r3, [r7, #8]
 8002134:	4613      	mov	r3, r2
 8002136:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d075      	beq.n	800222e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d072      	beq.n	800222e <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d91a      	bls.n	8002184 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 800214e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d109      	bne.n	800216a <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002156:	897a      	ldrh	r2, [r7, #10]
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b29b      	uxth	r3, r3
 800215e:	817b      	strh	r3, [r7, #10]
					x++;
 8002160:	897b      	ldrh	r3, [r7, #10]
 8002162:	3301      	adds	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	817b      	strh	r3, [r7, #10]
 8002168:	e00c      	b.n	8002184 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 800216a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d108      	bne.n	8002184 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002172:	893a      	ldrh	r2, [r7, #8]
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	813b      	strh	r3, [r7, #8]
					y++;
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	3301      	adds	r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002184:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d11a      	bne.n	80021ce <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800219e:	893b      	ldrh	r3, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d83b      	bhi.n	800221c <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80021aa:	893b      	ldrh	r3, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d937      	bls.n	8002220 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80021bc:	1db9      	adds	r1, r7, #6
 80021be:	f107 000a 	add.w	r0, r7, #10
 80021c2:	f7ff ff3d 	bl	8002040 <u8g2_clip_intersection2>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11a      	bne.n	8002202 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 80021cc:	e02f      	b.n	800222e <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80021d4:	897b      	ldrh	r3, [r7, #10]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d824      	bhi.n	8002224 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d920      	bls.n	8002228 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80021f2:	1db9      	adds	r1, r7, #6
 80021f4:	f107 0008 	add.w	r0, r7, #8
 80021f8:	f7ff ff22 	bl	8002040 <u8g2_clip_intersection2>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d014      	beq.n	800222c <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	689c      	ldr	r4, [r3, #8]
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	893a      	ldrh	r2, [r7, #8]
 800220c:	88f8      	ldrh	r0, [r7, #6]
 800220e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4603      	mov	r3, r0
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	47a0      	blx	r4
 800221a:	e008      	b.n	800222e <u8g2_DrawHVLine+0x110>
					return;
 800221c:	bf00      	nop
 800221e:	e006      	b.n	800222e <u8g2_DrawHVLine+0x110>
					return;
 8002220:	bf00      	nop
 8002222:	e004      	b.n	800222e <u8g2_DrawHVLine+0x110>
					return;
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <u8g2_DrawHVLine+0x110>
					return;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <u8g2_DrawHVLine+0x110>
					return;
 800222c:	bf00      	nop
		}
}
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}

08002234 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002234:	b490      	push	{r4, r7}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4604      	mov	r4, r0
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4623      	mov	r3, r4
 8002244:	80fb      	strh	r3, [r7, #6]
 8002246:	4603      	mov	r3, r0
 8002248:	80bb      	strh	r3, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	807b      	strh	r3, [r7, #2]
 800224e:	4613      	mov	r3, r2
 8002250:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d20d      	bcs.n	8002276 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800225a:	883a      	ldrh	r2, [r7, #0]
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	429a      	cmp	r2, r3
 8002260:	d901      	bls.n	8002266 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002262:	2301      	movs	r3, #1
 8002264:	e014      	b.n	8002290 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	883b      	ldrh	r3, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d901      	bls.n	8002272 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002272:	2300      	movs	r3, #0
 8002274:	e00c      	b.n	8002290 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002276:	883a      	ldrh	r2, [r7, #0]
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	429a      	cmp	r2, r3
 800227c:	d907      	bls.n	800228e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	883b      	ldrh	r3, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d901      	bls.n	800228a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002286:	2301      	movs	r3, #1
 8002288:	e002      	b.n	8002290 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800228e:	2300      	movs	r3, #0
    }
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bc90      	pop	{r4, r7}
 8002298:	4770      	bx	lr

0800229a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	4608      	mov	r0, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	817b      	strh	r3, [r7, #10]
 80022ac:	460b      	mov	r3, r1
 80022ae:	813b      	strh	r3, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80022c0:	8b3b      	ldrh	r3, [r7, #24]
 80022c2:	893a      	ldrh	r2, [r7, #8]
 80022c4:	f7ff ffb6 	bl	8002234 <u8g2_is_intersection_decision_tree>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <u8g2_IsIntersection+0x38>
    return 0; 
 80022ce:	2300      	movs	r3, #0
 80022d0:	e00a      	b.n	80022e8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	897a      	ldrh	r2, [r7, #10]
 80022e2:	f7ff ffa7 	bl	8002234 <u8g2_is_intersection_decision_tree>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800230e:	7efb      	ldrb	r3, [r7, #27]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800231a:	7e3a      	ldrb	r2, [r7, #24]
 800231c:	7efb      	ldrb	r3, [r7, #27]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002332:	2b01      	cmp	r3, #1
 8002334:	d801      	bhi.n	800233a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002336:	7e3b      	ldrb	r3, [r7, #24]
 8002338:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002344:	7e3b      	ldrb	r3, [r7, #24]
 8002346:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002348:	893b      	ldrh	r3, [r7, #8]
 800234a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800234c:	8afb      	ldrh	r3, [r7, #22]
 800234e:	f023 0307 	bic.w	r3, r3, #7
 8002352:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	7c1b      	ldrb	r3, [r3, #16]
 800235a:	461a      	mov	r2, r3
 800235c:	8afb      	ldrh	r3, [r7, #22]
 800235e:	fb13 f302 	smulbb	r3, r3, r2
 8002362:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002368:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800236a:	8afb      	ldrh	r3, [r7, #22]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800237a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d117      	bne.n	80023b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	7ebb      	ldrb	r3, [r7, #26]
 8002388:	4313      	orrs	r3, r2
 800238a:	b2da      	uxtb	r2, r3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	7e7b      	ldrb	r3, [r7, #25]
 8002396:	4053      	eors	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
	len--;
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e8      	bne.n	8002382 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80023b0:	e038      	b.n	8002424 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	7ebb      	ldrb	r3, [r7, #26]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	7e7b      	ldrb	r3, [r7, #25]
 80023c6:	4053      	eors	r3, r2
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80023ce:	7efb      	ldrb	r3, [r7, #27]
 80023d0:	3301      	adds	r3, #1
 80023d2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80023d4:	7efb      	ldrb	r3, [r7, #27]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	76fb      	strb	r3, [r7, #27]
      len--;
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	3b01      	subs	r3, #1
 80023e0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80023e2:	7efb      	ldrb	r3, [r7, #27]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d114      	bne.n	8002412 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80023ec:	461a      	mov	r2, r3
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d801      	bhi.n	8002402 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002408:	2b01      	cmp	r3, #1
 800240a:	d008      	beq.n	800241e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800240c:	2301      	movs	r3, #1
 800240e:	767b      	strb	r3, [r7, #25]
 8002410:	e005      	b.n	800241e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002412:	7ebb      	ldrb	r3, [r7, #26]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002418:	7e7b      	ldrb	r3, [r7, #25]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1c6      	bne.n	80023b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002424:	bf00      	nop
 8002426:	3724      	adds	r7, #36	@ 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800244e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002458:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	79fa      	ldrb	r2, [r7, #7]
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff ffa9 	bl	8002430 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff fd84 	bl	8001fec <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002508:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	89fa      	ldrh	r2, [r7, #14]
 8002514:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	7c1b      	ldrb	r3, [r3, #16]
 800251a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800252e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	89fa      	ldrh	r2, [r7, #14]
 800253a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002542:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800254c:	4413      	add	r3, r2
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	7c52      	ldrb	r2, [r2, #17]
 8002552:	4293      	cmp	r3, r2
 8002554:	dd07      	ble.n	8002566 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	7c5b      	ldrb	r3, [r3, #17]
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002588:	89fb      	ldrh	r3, [r7, #14]
 800258a:	4413      	add	r3, r2
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	8a9a      	ldrh	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	8ada      	ldrh	r2, [r3, #22]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4603      	mov	r3, r0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fe5e 	bl	800229a <u8g2_IsIntersection>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80025ec:	e03b      	b.n	8002666 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002602:	429a      	cmp	r2, r3
 8002604:	d205      	bcs.n	8002612 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800261e:	429a      	cmp	r2, r3
 8002620:	d905      	bls.n	800262e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800263a:	429a      	cmp	r2, r3
 800263c:	d205      	bcs.n	800264a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002656:	429a      	cmp	r2, r3
 8002658:	d905      	bls.n	8002666 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff3c 	bl	80024f4 <u8g2_update_dimension_common>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d30a      	bcc.n	80026ce <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff65 	bl	80025b4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b088      	sub	sp, #32
 80026f6:	af02      	add	r7, sp, #8
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	4603      	mov	r3, r0
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	460b      	mov	r3, r1
 8002706:	813b      	strh	r3, [r7, #8]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002712:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002714:	8aba      	ldrh	r2, [r7, #20]
 8002716:	893b      	ldrh	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002722:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002724:	8afa      	ldrh	r2, [r7, #22]
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 800272c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002734:	8abb      	ldrh	r3, [r7, #20]
 8002736:	3b01      	subs	r3, #1
 8002738:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800273a:	8afa      	ldrh	r2, [r7, #22]
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	82fb      	strh	r3, [r7, #22]
 8002742:	e00a      	b.n	800275a <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002744:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 800274c:	8afb      	ldrh	r3, [r7, #22]
 800274e:	3b01      	subs	r3, #1
 8002750:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002752:	8aba      	ldrh	r2, [r7, #20]
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800275a:	88f8      	ldrh	r0, [r7, #6]
 800275c:	8aba      	ldrh	r2, [r7, #20]
 800275e:	8af9      	ldrh	r1, [r7, #22]
 8002760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4603      	mov	r3, r0
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff fcb7 	bl	80020dc <u8g2_draw_hv_line_2dir>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <u8x8_ascii_next+0x18>
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b0a      	cmp	r3, #10
 80027a8:	d102      	bne.n	80027b0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80027aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ae:	e001      	b.n	80027b4 <u8x8_ascii_next+0x22>
  return b;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	b29b      	uxth	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691c      	ldr	r4, [r3, #16]
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2120      	movs	r1, #32
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	47a0      	blx	r4
 80027da:	4603      	mov	r3, r0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd90      	pop	{r4, r7, pc}

080027e4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	460b      	mov	r3, r1
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691c      	ldr	r4, [r3, #16]
 80027f6:	7afa      	ldrb	r2, [r7, #11]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2117      	movs	r1, #23
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	47a0      	blx	r4
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}

0800280a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002816:	1cfb      	adds	r3, r7, #3
 8002818:	461a      	mov	r2, r3
 800281a:	2101      	movs	r1, #1
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe1 	bl	80027e4 <u8x8_byte_SendBytes>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68dc      	ldr	r4, [r3, #12]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	2300      	movs	r3, #0
 8002840:	2115      	movs	r1, #21
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	47a0      	blx	r4
 8002846:	4603      	mov	r3, r0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68dc      	ldr	r4, [r3, #12]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	2300      	movs	r3, #0
 8002864:	2116      	movs	r1, #22
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	47a0      	blx	r4
 800286a:	4603      	mov	r3, r0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	460b      	mov	r3, r1
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68dc      	ldr	r4, [r3, #12]
 8002886:	7afa      	ldrb	r2, [r7, #11]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2117      	movs	r1, #23
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	47a0      	blx	r4
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}

0800289a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68dc      	ldr	r4, [r3, #12]
 80028a6:	2300      	movs	r3, #0
 80028a8:	2200      	movs	r2, #0
 80028aa:	2118      	movs	r1, #24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	47a0      	blx	r4
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}

080028ba <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80028ba:	b590      	push	{r4, r7, lr}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68dc      	ldr	r4, [r3, #12]
 80028c6:	2300      	movs	r3, #0
 80028c8:	2200      	movs	r2, #0
 80028ca:	2119      	movs	r1, #25
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	47a0      	blx	r4
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80028da:	b590      	push	{r4, r7, lr}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	73fb      	strb	r3, [r7, #15]
    data++;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80028f4:	d031      	beq.n	800295a <u8x8_cad_SendSequence+0x80>
 80028f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80028f8:	dc3d      	bgt.n	8002976 <u8x8_cad_SendSequence+0x9c>
 80028fa:	2b19      	cmp	r3, #25
 80028fc:	dc3b      	bgt.n	8002976 <u8x8_cad_SendSequence+0x9c>
 80028fe:	2b18      	cmp	r3, #24
 8002900:	da23      	bge.n	800294a <u8x8_cad_SendSequence+0x70>
 8002902:	2b16      	cmp	r3, #22
 8002904:	dc02      	bgt.n	800290c <u8x8_cad_SendSequence+0x32>
 8002906:	2b15      	cmp	r3, #21
 8002908:	da03      	bge.n	8002912 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800290a:	e034      	b.n	8002976 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800290c:	2b17      	cmp	r3, #23
 800290e:	d00e      	beq.n	800292e <u8x8_cad_SendSequence+0x54>
	return;
 8002910:	e031      	b.n	8002976 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68dc      	ldr	r4, [r3, #12]
 800291c:	7bba      	ldrb	r2, [r7, #14]
 800291e:	7bf9      	ldrb	r1, [r7, #15]
 8002920:	2300      	movs	r3, #0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	47a0      	blx	r4
	  data++;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	603b      	str	r3, [r7, #0]
	  break;
 800292c:	e022      	b.n	8002974 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002934:	f107 030e 	add.w	r3, r7, #14
 8002938:	461a      	mov	r2, r3
 800293a:	2101      	movs	r1, #1
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff99 	bl	8002874 <u8x8_cad_SendData>
	  data++;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	603b      	str	r3, [r7, #0]
	  break;
 8002948:	e014      	b.n	8002974 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68dc      	ldr	r4, [r3, #12]
 800294e:	7bf9      	ldrb	r1, [r7, #15]
 8002950:	2300      	movs	r3, #0
 8002952:	2200      	movs	r2, #0
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	47a0      	blx	r4
	  break;
 8002958:	e00c      	b.n	8002974 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	461a      	mov	r2, r3
 8002964:	2129      	movs	r1, #41	@ 0x29
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9ee 	bl	8002d48 <u8x8_gpio_call>
	  data++;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	603b      	str	r3, [r7, #0]
	  break;
 8002972:	bf00      	nop
    cmd = *data;
 8002974:	e7b6      	b.n	80028e4 <u8x8_cad_SendSequence+0xa>
	return;
 8002976:	bf00      	nop
    }
  }
}
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
	...

08002980 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	72fb      	strb	r3, [r7, #11]
 800298e:	4613      	mov	r3, r2
 8002990:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	3b14      	subs	r3, #20
 8002996:	2b05      	cmp	r3, #5
 8002998:	d82f      	bhi.n	80029fa <u8x8_cad_001+0x7a>
 800299a:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <u8x8_cad_001+0x20>)
 800299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a0:	080029e9 	.word	0x080029e9
 80029a4:	080029b9 	.word	0x080029b9
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	080029e9 	.word	0x080029e9
 80029b4:	080029e9 	.word	0x080029e9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80029b8:	2100      	movs	r1, #0
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff ff00 	bl	80027c0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80029c0:	7abb      	ldrb	r3, [r7, #10]
 80029c2:	4619      	mov	r1, r3
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff20 	bl	800280a <u8x8_byte_SendByte>
      break;
 80029ca:	e018      	b.n	80029fe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80029cc:	2100      	movs	r1, #0
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff fef6 	bl	80027c0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80029d4:	7abb      	ldrb	r3, [r7, #10]
 80029d6:	4619      	mov	r1, r3
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff ff16 	bl	800280a <u8x8_byte_SendByte>
      break;
 80029de:	e00e      	b.n	80029fe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80029e0:	2101      	movs	r1, #1
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff feec 	bl	80027c0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691c      	ldr	r4, [r3, #16]
 80029ec:	7aba      	ldrb	r2, [r7, #10]
 80029ee:	7af9      	ldrb	r1, [r7, #11]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	47a0      	blx	r4
 80029f6:	4603      	mov	r3, r0
 80029f8:	e002      	b.n	8002a00 <u8x8_cad_001+0x80>
    default:
      return 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <u8x8_cad_001+0x80>
  }
  return 1;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}

08002a08 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	72fb      	strb	r3, [r7, #11]
 8002a16:	4613      	mov	r3, r2
 8002a18:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d006      	beq.n	8002a2e <u8x8_d_st7565_common+0x26>
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	dc71      	bgt.n	8002b08 <u8x8_d_st7565_common+0x100>
 8002a24:	2b0b      	cmp	r3, #11
 8002a26:	d050      	beq.n	8002aca <u8x8_d_st7565_common+0xc2>
 8002a28:	2b0e      	cmp	r3, #14
 8002a2a:	d05b      	beq.n	8002ae4 <u8x8_d_st7565_common+0xdc>
 8002a2c:	e06c      	b.n	8002b08 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff ff33 	bl	800289a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	795b      	ldrb	r3, [r3, #5]
 8002a38:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002a3a:	7dbb      	ldrb	r3, [r7, #22]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002a46:	7dbb      	ldrb	r3, [r7, #22]
 8002a48:	4413      	add	r3, r2
 8002a4a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002a4c:	7dbb      	ldrb	r3, [r7, #22]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff fee6 	bl	800282c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002a60:	7dbb      	ldrb	r3, [r7, #22]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fede 	bl	800282c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	799b      	ldrb	r3, [r3, #6]
 8002a74:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fed5 	bl	800282c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002a94:	7dfa      	ldrb	r2, [r7, #23]
 8002a96:	7dbb      	ldrb	r3, [r7, #22]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2b84      	cmp	r3, #132	@ 0x84
 8002a9c:	d905      	bls.n	8002aaa <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8002a9e:	2384      	movs	r3, #132	@ 0x84
 8002aa0:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002aa2:	7dfa      	ldrb	r2, [r7, #23]
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fedf 	bl	8002874 <u8x8_cad_SendData>
	arg_int--;
 8002ab6:	7abb      	ldrb	r3, [r7, #10]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002abc:	7abb      	ldrb	r3, [r7, #10]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f3      	bne.n	8002aaa <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fef9 	bl	80028ba <u8x8_cad_EndTransfer>
      break;
 8002ac8:	e020      	b.n	8002b0c <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002aca:	7abb      	ldrb	r3, [r7, #10]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002ad0:	4911      	ldr	r1, [pc, #68]	@ (8002b18 <u8x8_d_st7565_common+0x110>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff01 	bl	80028da <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002ad8:	e018      	b.n	8002b0c <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002ada:	4910      	ldr	r1, [pc, #64]	@ (8002b1c <u8x8_d_st7565_common+0x114>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff fefc 	bl	80028da <u8x8_cad_SendSequence>
      break;
 8002ae2:	e013      	b.n	8002b0c <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff fed8 	bl	800289a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002aea:	2181      	movs	r1, #129	@ 0x81
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fe9d 	bl	800282c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002af2:	7abb      	ldrb	r3, [r7, #10]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff fea8 	bl	8002850 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff feda 	bl	80028ba <u8x8_cad_EndTransfer>
      break;
 8002b06:	e001      	b.n	8002b0c <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002b0c:	2301      	movs	r3, #1
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08009cd8 	.word	0x08009cd8
 8002b1c:	08009ce0 	.word	0x08009ce0

08002b20 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	72fb      	strb	r3, [r7, #11]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002b32:	7aba      	ldrb	r2, [r7, #10]
 8002b34:	7af9      	ldrb	r1, [r7, #11]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff65 	bl	8002a08 <u8x8_d_st7565_common>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d131      	bne.n	8002ba8 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	2b0d      	cmp	r3, #13
 8002b48:	d013      	beq.n	8002b72 <u8x8_d_st7565_64128n+0x52>
 8002b4a:	2b0d      	cmp	r3, #13
 8002b4c:	dc2a      	bgt.n	8002ba4 <u8x8_d_st7565_64128n+0x84>
 8002b4e:	2b09      	cmp	r3, #9
 8002b50:	d002      	beq.n	8002b58 <u8x8_d_st7565_64128n+0x38>
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	d005      	beq.n	8002b62 <u8x8_d_st7565_64128n+0x42>
 8002b56:	e025      	b.n	8002ba4 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8002b58:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <u8x8_d_st7565_64128n+0x94>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f832 	bl	8002bc4 <u8x8_d_helper_display_setup_memory>
	break;
 8002b60:	e022      	b.n	8002ba8 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f842 	bl	8002bec <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8002b68:	4913      	ldr	r1, [pc, #76]	@ (8002bb8 <u8x8_d_st7565_64128n+0x98>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff feb5 	bl	80028da <u8x8_cad_SendSequence>
	break;
 8002b70:	e01a      	b.n	8002ba8 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002b72:	7abb      	ldrb	r3, [r7, #10]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002b78:	4910      	ldr	r1, [pc, #64]	@ (8002bbc <u8x8_d_st7565_64128n+0x9c>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fead 	bl	80028da <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	7c9a      	ldrb	r2, [r3, #18]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002b8c:	e00c      	b.n	8002ba8 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002b8e:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <u8x8_d_st7565_64128n+0xa0>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff fea2 	bl	80028da <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	7cda      	ldrb	r2, [r3, #19]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8002ba2:	e001      	b.n	8002ba8 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8002ba8:	2301      	movs	r3, #1
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08009d18 	.word	0x08009d18
 8002bb8:	08009cf8 	.word	0x08009cf8
 8002bbc:	08009ce8 	.word	0x08009ce8
 8002bc0:	08009cf0 	.word	0x08009cf0

08002bc4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	7c9a      	ldrb	r2, [r3, #18]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695c      	ldr	r4, [r3, #20]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2128      	movs	r1, #40	@ 0x28
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68dc      	ldr	r4, [r3, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2114      	movs	r1, #20
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002c10:	2201      	movs	r2, #1
 8002c12:	214b      	movs	r1, #75	@ 0x4b
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f897 	bl	8002d48 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	461a      	mov	r2, r3
 8002c22:	2129      	movs	r1, #41	@ 0x29
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f88f 	bl	8002d48 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	214b      	movs	r1, #75	@ 0x4b
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f88a 	bl	8002d48 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2129      	movs	r1, #41	@ 0x29
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f882 	bl	8002d48 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002c44:	2201      	movs	r2, #1
 8002c46:	214b      	movs	r1, #75	@ 0x4b
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f87d 	bl	8002d48 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	795b      	ldrb	r3, [r3, #5]
 8002c54:	461a      	mov	r2, r3
 8002c56:	2129      	movs	r1, #41	@ 0x29
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f875 	bl	8002d48 <u8x8_gpio_call>
}    
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}

08002c66 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002c66:	b590      	push	{r4, r7, lr}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	461a      	mov	r2, r3
 8002c74:	4603      	mov	r3, r0
 8002c76:	70fb      	strb	r3, [r7, #3]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70bb      	strb	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689c      	ldr	r4, [r3, #8]
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	2201      	movs	r2, #1
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	47a0      	blx	r4
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}

08002caa <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002caa:	b590      	push	{r4, r7, lr}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689c      	ldr	r4, [r3, #8]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2109      	movs	r1, #9
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	47a0      	blx	r4
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}

08002cc8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689c      	ldr	r4, [r3, #8]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	210a      	movs	r1, #10
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689c      	ldr	r4, [r3, #8]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	210b      	movs	r1, #11
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	47a0      	blx	r4
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd90      	pop	{r4, r7, pc}

08002d08 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689c      	ldr	r4, [r3, #8]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	210e      	movs	r1, #14
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}

08002d2a <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002d2a:	b590      	push	{r4, r7, lr}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689c      	ldr	r4, [r3, #8]
 8002d36:	2300      	movs	r3, #0
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	47a0      	blx	r4
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}

08002d48 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
 8002d54:	4613      	mov	r3, r2
 8002d56:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695c      	ldr	r4, [r3, #20]
 8002d5c:	78ba      	ldrb	r2, [r7, #2]
 8002d5e:	78f9      	ldrb	r1, [r7, #3]
 8002d60:	2300      	movs	r3, #0
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	47a0      	blx	r4
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}

08002d6e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	72fb      	strb	r3, [r7, #11]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <u8x8_SetupDefaults+0x58>)
 8002da2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a10      	ldr	r2, [pc, #64]	@ (8002de8 <u8x8_SetupDefaults+0x58>)
 8002da8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a0e      	ldr	r2, [pc, #56]	@ (8002de8 <u8x8_SetupDefaults+0x58>)
 8002dae:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <u8x8_SetupDefaults+0x58>)
 8002db4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	22ff      	movs	r2, #255	@ 0xff
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	22ff      	movs	r2, #255	@ 0xff
 8002dd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	08002d6f 	.word	0x08002d6f

08002dec <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff ffc8 	bl	8002d90 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff ff46 	bl	8002caa <u8x8_SetupMemory>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	4613      	mov	r3, r2
 8002e36:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 8002e38:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <INA229_writeReg+0x70>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	81bb      	strh	r3, [r7, #12]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73bb      	strb	r3, [r7, #14]
    uint8_t rxBuf[3] = {0};
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <INA229_writeReg+0x70>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	813b      	strh	r3, [r7, #8]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	72bb      	strb	r3, [r7, #10]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8002e54:	883b      	ldrh	r3, [r7, #0]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 8002e5e:	883b      	ldrh	r3, [r7, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7f18      	ldrb	r0, [r3, #28]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7f59      	ldrb	r1, [r3, #29]
 8002e6c:	f107 020c 	add.w	r2, r7, #12
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f001 f8b3 	bl	8003fe4 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <INA229_writeReg+0x68>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002e84:	883b      	ldrh	r3, [r7, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	82da      	strh	r2, [r3, #22]
    }
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	08008f88 	.word	0x08008f88

08002e9c <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7f1b      	ldrb	r3, [r3, #28]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f88f 	bl	8003fcc <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffb6 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	885b      	ldrh	r3, [r3, #2]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffaf 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	889b      	ldrh	r3, [r3, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa8 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	88db      	ldrh	r3, [r3, #6]
 8002edc:	461a      	mov	r2, r3
 8002ede:	2103      	movs	r1, #3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffa1 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	891b      	ldrh	r3, [r3, #8]
 8002eea:	461a      	mov	r2, r3
 8002eec:	210b      	movs	r1, #11
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff9a 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	895b      	ldrh	r3, [r3, #10]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	210c      	movs	r1, #12
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff93 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	899b      	ldrh	r3, [r3, #12]
 8002f06:	461a      	mov	r2, r3
 8002f08:	210d      	movs	r1, #13
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff8c 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	89db      	ldrh	r3, [r3, #14]
 8002f14:	461a      	mov	r2, r3
 8002f16:	210e      	movs	r1, #14
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff85 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8a1b      	ldrh	r3, [r3, #16]
 8002f22:	461a      	mov	r2, r3
 8002f24:	210f      	movs	r1, #15
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ff7e 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8a5b      	ldrh	r3, [r3, #18]
 8002f30:	461a      	mov	r2, r3
 8002f32:	2110      	movs	r1, #16
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff77 	bl	8002e28 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8a9b      	ldrh	r3, [r3, #20]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2111      	movs	r1, #17
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff70 	bl	8002e28 <INA229_writeReg>



}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8002f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f54:	b08b      	sub	sp, #44	@ 0x2c
 8002f56:	af02      	add	r7, sp, #8
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 8002f5e:	2300      	movs	r3, #0
 8002f60:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	2300      	movs	r3, #0
 8002f68:	81bb      	strh	r3, [r7, #12]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7f18      	ldrb	r0, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7f59      	ldrb	r1, [r3, #29]
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	4a1f      	ldr	r2, [pc, #124]	@ (8003004 <INA229_readReg+0xb4>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	f107 0610 	add.w	r6, r7, #16
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4633      	mov	r3, r6
 8002f98:	f001 f824 	bl	8003fe4 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e01b      	b.n	8002fe6 <INA229_readReg+0x96>
    {
        value = (value << 8) | rxBuf[i];
 8002fae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	020b      	lsls	r3, r1, #8
 8002fbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fc0:	0202      	lsls	r2, r0, #8
 8002fc2:	f107 0008 	add.w	r0, r7, #8
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	4401      	add	r1, r0
 8002fca:	7809      	ldrb	r1, [r1, #0]
 8002fcc:	b2c9      	uxtb	r1, r1
 8002fce:	2000      	movs	r0, #0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	ea42 0804 	orr.w	r8, r2, r4
 8002fd8:	ea43 0905 	orr.w	r9, r3, r5
 8002fdc:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	4a06      	ldr	r2, [pc, #24]	@ (8003004 <INA229_readReg+0xb4>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	461a      	mov	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	dddc      	ble.n	8002fae <INA229_readReg+0x5e>
    }

    return value;
 8002ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003004:	08009d30 	.word	0x08009d30

08003008 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8003010:	2105      	movs	r1, #5
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff9c 	bl	8002f50 <INA229_readReg>
 8003018:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800301c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	0902      	lsrs	r2, r0, #4
 800302a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800302e:	090b      	lsrs	r3, r1, #4
 8003030:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8003034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003038:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800303c:	f173 0300 	sbcs.w	r3, r3, #0
 8003040:	d30c      	bcc.n	800305c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8003042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003046:	f7fd fecf 	bl	8000de8 <__aeabi_ul2f>
 800304a:	ee07 0a10 	vmov	s14, r0
 800304e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80030c0 <INA229_getVBUS_V+0xb8>
 8003052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003056:	edc7 7a05 	vstr	s15, [r7, #20]
 800305a:	e005      	b.n	8003068 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 800305c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003060:	f7fd fec2 	bl	8000de8 <__aeabi_ul2f>
 8003064:	4603      	mov	r3, r0
 8003066:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7fd fa75 	bl	8000558 <__aeabi_f2d>
 800306e:	a310      	add	r3, pc, #64	@ (adr r3, 80030b0 <INA229_getVBUS_V+0xa8>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fac8 	bl	8000608 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	a30d      	add	r3, pc, #52	@ (adr r3, 80030b8 <INA229_getVBUS_V+0xb0>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fbe9 	bl	800085c <__aeabi_ddiv>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fd91 	bl	8000bb8 <__aeabi_d2f>
 8003096:	4603      	mov	r3, r0
 8003098:	617b      	str	r3, [r7, #20]

    return data;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	ee07 3a90 	vmov	s15, r3
}
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	f3af 8000 	nop.w
 80030b0:	00000000 	.word	0x00000000
 80030b4:	40686a00 	.word	0x40686a00
 80030b8:	00000000 	.word	0x00000000
 80030bc:	412e8480 	.word	0x412e8480
 80030c0:	49800000 	.word	0x49800000

080030c4 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 80030cc:	2106      	movs	r1, #6
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff3e 	bl	8002f50 <INA229_readReg>
 80030d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 80030d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030dc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80030e0:	f173 0300 	sbcs.w	r3, r3, #0
 80030e4:	d30c      	bcc.n	8003100 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 80030e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ea:	f7fd fe7d 	bl	8000de8 <__aeabi_ul2f>
 80030ee:	ee07 0a10 	vmov	s14, r0
 80030f2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003150 <INA229_getDIETEMP_C+0x8c>
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fa:	edc7 7a05 	vstr	s15, [r7, #20]
 80030fe:	e005      	b.n	800310c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8003100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003104:	f7fd fe70 	bl	8000de8 <__aeabi_ul2f>
 8003108:	4603      	mov	r3, r0
 800310a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7fd fa23 	bl	8000558 <__aeabi_f2d>
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <INA229_getDIETEMP_C+0x90>)
 8003118:	f7fd fa76 	bl	8000608 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <INA229_getDIETEMP_C+0x94>)
 800312a:	f7fd fb97 	bl	800085c <__aeabi_ddiv>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fd3f 	bl	8000bb8 <__aeabi_d2f>
 800313a:	4603      	mov	r3, r0
 800313c:	617b      	str	r3, [r7, #20]

    return data;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	47800000 	.word	0x47800000
 8003154:	401f4000 	.word	0x401f4000
 8003158:	408f4000 	.word	0x408f4000
 800315c:	00000000 	.word	0x00000000

08003160 <correct_Current_LSB>:

double shuntResistor = 1;
double maxCurrent = 0.1;


double correct_Current_LSB(double maxCurrent){
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	ed87 0b00 	vstr	d0, [r7]

	double currentLSB = (maxCurrent)/(pow(2,19));
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <correct_Current_LSB+0xd8>)
 8003170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003174:	f7fd fb72 	bl	800085c <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int exponent = (int) floor(log10(fabs(currentLSB)));
 8003180:	6a3c      	ldr	r4, [r7, #32]
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003188:	ec45 4b10 	vmov	d0, r4, r5
 800318c:	f004 fc0c 	bl	80079a8 <log10>
 8003190:	eeb0 7a40 	vmov.f32	s14, s0
 8003194:	eef0 7a60 	vmov.f32	s15, s1
 8003198:	eeb0 0a47 	vmov.f32	s0, s14
 800319c:	eef0 0a67 	vmov.f32	s1, s15
 80031a0:	f004 fd42 	bl	8007c28 <floor>
 80031a4:	ec53 2b10 	vmov	r2, r3, d0
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7fd fcdc 	bl	8000b68 <__aeabi_d2iz>
 80031b0:	4603      	mov	r3, r0
 80031b2:	61fb      	str	r3, [r7, #28]
	double mantissa = currentLSB / pow(10, exponent);
 80031b4:	69f8      	ldr	r0, [r7, #28]
 80031b6:	f7fd f9bd 	bl	8000534 <__aeabi_i2d>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	ec43 2b11 	vmov	d1, r2, r3
 80031c2:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8003230 <correct_Current_LSB+0xd0>
 80031c6:	f004 fc2d 	bl	8007a24 <pow>
 80031ca:	ec53 2b10 	vmov	r2, r3, d0
 80031ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031d2:	f7fd fb43 	bl	800085c <__aeabi_ddiv>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	mantissa = ceil(mantissa);
 80031de:	ed97 0b04 	vldr	d0, [r7, #16]
 80031e2:	f004 fca5 	bl	8007b30 <ceil>
 80031e6:	ed87 0b04 	vstr	d0, [r7, #16]
	double correctLSB = mantissa*(pow(10,exponent));
 80031ea:	69f8      	ldr	r0, [r7, #28]
 80031ec:	f7fd f9a2 	bl	8000534 <__aeabi_i2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	ec43 2b11 	vmov	d1, r2, r3
 80031f8:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8003230 <correct_Current_LSB+0xd0>
 80031fc:	f004 fc12 	bl	8007a24 <pow>
 8003200:	ec53 2b10 	vmov	r2, r3, d0
 8003204:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003208:	f7fd f9fe 	bl	8000608 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return correctLSB;
 8003214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003218:	ec43 2b17 	vmov	d7, r2, r3

}
 800321c:	eeb0 0a47 	vmov.f32	s0, s14
 8003220:	eef0 0a67 	vmov.f32	s1, s15
 8003224:	3728      	adds	r7, #40	@ 0x28
 8003226:	46bd      	mov	sp, r7
 8003228:	bdb0      	pop	{r4, r5, r7, pc}
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w
 8003230:	00000000 	.word	0x00000000
 8003234:	40240000 	.word	0x40240000
 8003238:	41200000 	.word	0x41200000
 800323c:	00000000 	.word	0x00000000

08003240 <calibrationValue>:

uint16_t calibrationValue (double shuntResistor){
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	ed87 0b00 	vstr	d0, [r7]
	double currentLSB = correct_Current_LSB(maxCurrent);
 800324a:	4b17      	ldr	r3, [pc, #92]	@ (80032a8 <calibrationValue+0x68>)
 800324c:	ed93 7b00 	vldr	d7, [r3]
 8003250:	eeb0 0a47 	vmov.f32	s0, s14
 8003254:	eef0 0a67 	vmov.f32	s1, s15
 8003258:	f7ff ff82 	bl	8003160 <correct_Current_LSB>
 800325c:	ed87 0b04 	vstr	d0, [r7, #16]
	int calibrationConstant = 13107.2 * (pow(10,6))*shuntResistor*currentLSB;
 8003260:	a30f      	add	r3, pc, #60	@ (adr r3, 80032a0 <calibrationValue+0x60>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326a:	f7fd f9cd 	bl	8000608 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800327a:	f7fd f9c5 	bl	8000608 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fc6f 	bl	8000b68 <__aeabi_d2iz>
 800328a:	4603      	mov	r3, r0
 800328c:	60fb      	str	r3, [r7, #12]
	return((uint16_t)calibrationConstant);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	b29b      	uxth	r3, r3


}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w
 80032a0:	00000000 	.word	0x00000000
 80032a4:	42086a00 	.word	0x42086a00
 80032a8:	20000008 	.word	0x20000008

080032ac <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	72fb      	strb	r3, [r7, #11]
 80032ba:	4613      	mov	r3, r2
 80032bc:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	2b4b      	cmp	r3, #75	@ 0x4b
 80032c2:	d01a      	beq.n	80032fa <u8x8_stm32_gpio_and_delay+0x4e>
 80032c4:	2b4b      	cmp	r3, #75	@ 0x4b
 80032c6:	dc1f      	bgt.n	8003308 <u8x8_stm32_gpio_and_delay+0x5c>
 80032c8:	2b4a      	cmp	r3, #74	@ 0x4a
 80032ca:	d00f      	beq.n	80032ec <u8x8_stm32_gpio_and_delay+0x40>
 80032cc:	2b4a      	cmp	r3, #74	@ 0x4a
 80032ce:	dc1b      	bgt.n	8003308 <u8x8_stm32_gpio_and_delay+0x5c>
 80032d0:	2b28      	cmp	r3, #40	@ 0x28
 80032d2:	d002      	beq.n	80032da <u8x8_stm32_gpio_and_delay+0x2e>
 80032d4:	2b29      	cmp	r3, #41	@ 0x29
 80032d6:	d004      	beq.n	80032e2 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 80032d8:	e016      	b.n	8003308 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 80032da:	2002      	movs	r0, #2
 80032dc:	f001 f984 	bl	80045e8 <HAL_Delay>
            break;
 80032e0:	e013      	b.n	800330a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 80032e2:	7abb      	ldrb	r3, [r7, #10]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f97f 	bl	80045e8 <HAL_Delay>
            break;
 80032ea:	e00e      	b.n	800330a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80032ec:	7abb      	ldrb	r3, [r7, #10]
 80032ee:	461a      	mov	r2, r3
 80032f0:	2108      	movs	r1, #8
 80032f2:	4808      	ldr	r0, [pc, #32]	@ (8003314 <u8x8_stm32_gpio_and_delay+0x68>)
 80032f4:	f001 fc2e 	bl	8004b54 <HAL_GPIO_WritePin>
            break;
 80032f8:	e007      	b.n	800330a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 80032fa:	7abb      	ldrb	r3, [r7, #10]
 80032fc:	461a      	mov	r2, r3
 80032fe:	2104      	movs	r1, #4
 8003300:	4804      	ldr	r0, [pc, #16]	@ (8003314 <u8x8_stm32_gpio_and_delay+0x68>)
 8003302:	f001 fc27 	bl	8004b54 <HAL_GPIO_WritePin>
            break;
 8003306:	e000      	b.n	800330a <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8003308:	bf00      	nop
    }
    return 1U;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021800 	.word	0x40021800

08003318 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	72fb      	strb	r3, [r7, #11]
 8003326:	4613      	mov	r3, r2
 8003328:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 800332e:	7afb      	ldrb	r3, [r7, #11]
 8003330:	3b14      	subs	r3, #20
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d83e      	bhi.n	80033b4 <u8x8_byte_4wire_hw_spi+0x9c>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <u8x8_byte_4wire_hw_spi+0x24>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	080033bb 	.word	0x080033bb
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	08003371 	.word	0x08003371
 800334c:	08003391 	.word	0x08003391
 8003350:	080033a3 	.word	0x080033a3
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033b5 	.word	0x080033b5
 800336c:	08003383 	.word	0x08003383
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8003370:	7abb      	ldrb	r3, [r7, #10]
 8003372:	b29a      	uxth	r2, r3
 8003374:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4813      	ldr	r0, [pc, #76]	@ (80033c8 <u8x8_byte_4wire_hw_spi+0xb0>)
 800337c:	f003 f9c1 	bl	8006702 <HAL_SPI_Transmit>
            break;
 8003380:	e01c      	b.n	80033bc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8003382:	7abb      	ldrb	r3, [r7, #10]
 8003384:	461a      	mov	r2, r3
 8003386:	2108      	movs	r1, #8
 8003388:	4810      	ldr	r0, [pc, #64]	@ (80033cc <u8x8_byte_4wire_hw_spi+0xb4>)
 800338a:	f001 fbe3 	bl	8004b54 <HAL_GPIO_WritePin>
            break;
 800338e:	e015      	b.n	80033bc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	2104      	movs	r1, #4
 800339a:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <u8x8_byte_4wire_hw_spi+0xb8>)
 800339c:	f001 fbda 	bl	8004b54 <HAL_GPIO_WritePin>
            break;
 80033a0:	e00c      	b.n	80033bc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	461a      	mov	r2, r3
 80033aa:	2104      	movs	r1, #4
 80033ac:	4808      	ldr	r0, [pc, #32]	@ (80033d0 <u8x8_byte_4wire_hw_spi+0xb8>)
 80033ae:	f001 fbd1 	bl	8004b54 <HAL_GPIO_WritePin>
            break;
 80033b2:	e003      	b.n	80033bc <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]
            break;
 80033b8:	e000      	b.n	80033bc <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 80033ba:	bf00      	nop
    }
    return retVal;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000ab0 	.word	0x20000ab0
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40020c00 	.word	0x40020c00

080033d4 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 80033d8:	2201      	movs	r2, #1
 80033da:	2110      	movs	r1, #16
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <Display_Init+0x3c>)
 80033de:	f001 fbb9 	bl	8004b54 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80033e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <Display_Init+0x40>)
 80033e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003418 <Display_Init+0x44>)
 80033e6:	490d      	ldr	r1, [pc, #52]	@ (800341c <Display_Init+0x48>)
 80033e8:	480d      	ldr	r0, [pc, #52]	@ (8003420 <Display_Init+0x4c>)
 80033ea:	f7fe f85f 	bl	80014ac <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 80033ee:	480c      	ldr	r0, [pc, #48]	@ (8003420 <Display_Init+0x4c>)
 80033f0:	f7ff fc6a 	bl	8002cc8 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80033f4:	2100      	movs	r1, #0
 80033f6:	480a      	ldr	r0, [pc, #40]	@ (8003420 <Display_Init+0x4c>)
 80033f8:	f7ff fc75 	bl	8002ce6 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 80033fc:	4808      	ldr	r0, [pc, #32]	@ (8003420 <Display_Init+0x4c>)
 80033fe:	f7fe f82f 	bl	8001460 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8003402:	2178      	movs	r1, #120	@ 0x78
 8003404:	4806      	ldr	r0, [pc, #24]	@ (8003420 <Display_Init+0x4c>)
 8003406:	f7ff fc7f 	bl	8002d08 <u8x8_SetContrast>
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021800 	.word	0x40021800
 8003414:	080032ad 	.word	0x080032ad
 8003418:	08003319 	.word	0x08003319
 800341c:	08009ccc 	.word	0x08009ccc
 8003420:	200008c4 	.word	0x200008c4

08003424 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 800342a:	481f      	ldr	r0, [pc, #124]	@ (80034a8 <Display_MainTitlePage+0x84>)
 800342c:	f7fd ffd6 	bl	80013dc <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <Display_MainTitlePage+0x88>)
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2340      	movs	r3, #64	@ 0x40
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	481a      	ldr	r0, [pc, #104]	@ (80034a8 <Display_MainTitlePage+0x84>)
 8003440:	f7fd fefe 	bl	8001240 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8003444:	4818      	ldr	r0, [pc, #96]	@ (80034a8 <Display_MainTitlePage+0x84>)
 8003446:	f7fd ffdd 	bl	8001404 <u8g2_NextPage>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ef      	bne.n	8003430 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8003450:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003454:	f001 f8c8 	bl	80045e8 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8003458:	4813      	ldr	r0, [pc, #76]	@ (80034a8 <Display_MainTitlePage+0x84>)
 800345a:	f7fd ff34 	bl	80012c6 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800345e:	4914      	ldr	r1, [pc, #80]	@ (80034b0 <Display_MainTitlePage+0x8c>)
 8003460:	4811      	ldr	r0, [pc, #68]	@ (80034a8 <Display_MainTitlePage+0x84>)
 8003462:	f7fe fdd3 	bl	800200c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8003466:	4b13      	ldr	r3, [pc, #76]	@ (80034b4 <Display_MainTitlePage+0x90>)
 8003468:	2210      	movs	r2, #16
 800346a:	212a      	movs	r1, #42	@ 0x2a
 800346c:	480e      	ldr	r0, [pc, #56]	@ (80034a8 <Display_MainTitlePage+0x84>)
 800346e:	f7fe fd2b 	bl	8001ec8 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8003472:	490f      	ldr	r1, [pc, #60]	@ (80034b0 <Display_MainTitlePage+0x8c>)
 8003474:	480c      	ldr	r0, [pc, #48]	@ (80034a8 <Display_MainTitlePage+0x84>)
 8003476:	f7fe fdc9 	bl	800200c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <Display_MainTitlePage+0x94>)
 800347c:	2221      	movs	r2, #33	@ 0x21
 800347e:	2106      	movs	r1, #6
 8003480:	4809      	ldr	r0, [pc, #36]	@ (80034a8 <Display_MainTitlePage+0x84>)
 8003482:	f7fe fd21 	bl	8001ec8 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8003486:	200a      	movs	r0, #10
 8003488:	f001 f8ae 	bl	80045e8 <HAL_Delay>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 800348c:	4806      	ldr	r0, [pc, #24]	@ (80034a8 <Display_MainTitlePage+0x84>)
 800348e:	f7fd ffb9 	bl	8001404 <u8g2_NextPage>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1c8      	bne.n	800342a <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8003498:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800349c:	f001 f8a4 	bl	80045e8 <HAL_Delay>
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200008c4 	.word	0x200008c4
 80034ac:	20000030 	.word	0x20000030
 80034b0:	08009074 	.word	0x08009074
 80034b4:	08008f8c 	.word	0x08008f8c
 80034b8:	08008f94 	.word	0x08008f94

080034bc <Expander_InitDevice>:
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress);
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1);

/* Initializes a single expander by configuring all its 16 I/Os as outputs */
static HAL_StatusTypeDef Expander_InitDevice(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    status = Expander_SetConfigOutputs(hi2c, deviceAddress);
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f843 	bl	8003558 <Expander_SetConfigOutputs>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <Expander_InitDevice+0x30>
    {
        printf("Expander 0x%02X: Config failed (status: %d)\n", deviceAddress, status);
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4807      	ldr	r0, [pc, #28]	@ (8003500 <Expander_InitDevice+0x44>)
 80034e4:	f003 fbf0 	bl	8006cc8 <iprintf>
        return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	e005      	b.n	80034f8 <Expander_InitDevice+0x3c>
    }
    else
    {
        printf("Expander 0x%02X: Configured as outputs\n", deviceAddress);
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	4619      	mov	r1, r3
 80034f0:	4804      	ldr	r0, [pc, #16]	@ (8003504 <Expander_InitDevice+0x48>)
 80034f2:	f003 fbe9 	bl	8006cc8 <iprintf>
    }
    return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08008fe4 	.word	0x08008fe4
 8003504:	08009014 	.word	0x08009014

08003508 <Expander_InitAllDevices>:

/* Initializes all known expanders on the given I2C bus */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	72fb      	strb	r3, [r7, #11]
    for (size_t i = 0; i < expanderCount; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e013      	b.n	8003542 <Expander_InitAllDevices+0x3a>
    {
        uint8_t addr = expanderAddresses[i];
 800351a:	4a0e      	ldr	r2, [pc, #56]	@ (8003554 <Expander_InitAllDevices+0x4c>)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	72bb      	strb	r3, [r7, #10]
        status = Expander_InitDevice(hi2c, addr);
 8003524:	7abb      	ldrb	r3, [r7, #10]
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ffc7 	bl	80034bc <Expander_InitDevice>
 800352e:	4603      	mov	r3, r0
 8003530:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK)
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <Expander_InitAllDevices+0x34>
        {
            return status;
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	e007      	b.n	800354c <Expander_InitAllDevices+0x44>
    for (size_t i = 0; i < expanderCount; i++)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2204      	movs	r2, #4
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4293      	cmp	r3, r2
 8003548:	d3e7      	bcc.n	800351a <Expander_InitAllDevices+0x12>
        }
    }
    return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	08009d74 	.word	0x08009d74

08003558 <Expander_SetConfigOutputs>:
    return Expander_SetOutputs(hi2c, deviceAddress, 0x00, 0x00);
}

/* Configures both configuration registers to set all 16 I/Os as outputs */
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af04      	add	r7, sp, #16
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
    uint8_t configValue = 0x00;  // 0 => output mode
 8003564:	2300      	movs	r3, #0
 8003566:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;

    /* Configure Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	b29b      	uxth	r3, r3
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	b299      	uxth	r1, r3
 8003570:	2364      	movs	r3, #100	@ 0x64
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	2301      	movs	r3, #1
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	f107 030e 	add.w	r3, r7, #14
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2301      	movs	r3, #1
 8003580:	2206      	movs	r2, #6
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fc44 	bl	8004e10 <HAL_I2C_Mem_Write>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <Expander_SetConfigOutputs+0x3e>
    {
        return status;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	e012      	b.n	80035bc <Expander_SetConfigOutputs+0x64>
    }

    /* Configure Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	b29b      	uxth	r3, r3
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	b299      	uxth	r1, r3
 800359e:	2364      	movs	r3, #100	@ 0x64
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	2301      	movs	r3, #1
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	f107 030e 	add.w	r3, r7, #14
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2301      	movs	r3, #1
 80035ae:	2207      	movs	r2, #7
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f001 fc2d 	bl	8004e10 <HAL_I2C_Mem_Write>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <Expander_SetOutputs>:

/* Writes the new output states to both output registers */
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af04      	add	r7, sp, #16
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	70fb      	strb	r3, [r7, #3]
 80035d6:	460b      	mov	r3, r1
 80035d8:	70bb      	strb	r3, [r7, #2]
 80035da:	4613      	mov	r3, r2
 80035dc:	707b      	strb	r3, [r7, #1]
    HAL_StatusTypeDef status;

    /* Write to Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	b299      	uxth	r1, r3
 80035e6:	2364      	movs	r3, #100	@ 0x64
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	2301      	movs	r3, #1
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	1cbb      	adds	r3, r7, #2
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2301      	movs	r3, #1
 80035f4:	2202      	movs	r2, #2
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f001 fc0a 	bl	8004e10 <HAL_I2C_Mem_Write>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &out0,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <Expander_SetOutputs+0x46>
    {
        return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	e011      	b.n	800362e <Expander_SetOutputs+0x6a>
    }

    /* Write to Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	b29b      	uxth	r3, r3
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	b299      	uxth	r1, r3
 8003612:	2364      	movs	r3, #100	@ 0x64
 8003614:	9302      	str	r3, [sp, #8]
 8003616:	2301      	movs	r3, #1
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	1c7b      	adds	r3, r7, #1
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2301      	movs	r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 fbf4 	bl	8004e10 <HAL_I2C_Mem_Write>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &out1,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <Expander_SetPinState>:

/* Sets a specific GPIO pin high or low on the specified expander.
   It is assumed that 'pin' has only one bit set, and that bit is either in the lower
   byte (Port 0) or the upper byte (Port 1). */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint16_t pin, uint8_t isHigh)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b088      	sub	sp, #32
 800363a:	af04      	add	r7, sp, #16
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	4608      	mov	r0, r1
 8003640:	4611      	mov	r1, r2
 8003642:	461a      	mov	r2, r3
 8003644:	4603      	mov	r3, r0
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	460b      	mov	r3, r1
 800364a:	803b      	strh	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t port0, port1;
    uint8_t currentPort0, currentPort1;

    /* Read current output states */
    status = HAL_I2C_Mem_Read(hi2c,
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	b29b      	uxth	r3, r3
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	b299      	uxth	r1, r3
 8003658:	2364      	movs	r3, #100	@ 0x64
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	2301      	movs	r3, #1
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2301      	movs	r3, #1
 8003668:	2202      	movs	r2, #2
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 fcca 	bl	8005004 <HAL_I2C_Mem_Read>
 8003670:	4603      	mov	r3, r0
 8003672:	737b      	strb	r3, [r7, #13]
                              PCA9535_REG_OUTPUT_PORT0,
                              I2C_MEMADD_SIZE_8BIT,
                              &currentPort0,
                              1,
                              EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003674:	7b7b      	ldrb	r3, [r7, #13]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <Expander_SetPinState+0x48>
    {
        return status;
 800367a:	7b7b      	ldrb	r3, [r7, #13]
 800367c:	e058      	b.n	8003730 <Expander_SetPinState+0xfa>
    }
    status = HAL_I2C_Mem_Read(hi2c,
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	b29b      	uxth	r3, r3
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	b299      	uxth	r1, r3
 8003686:	2364      	movs	r3, #100	@ 0x64
 8003688:	9302      	str	r3, [sp, #8]
 800368a:	2301      	movs	r3, #1
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	f107 030b 	add.w	r3, r7, #11
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2301      	movs	r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f001 fcb3 	bl	8005004 <HAL_I2C_Mem_Read>
 800369e:	4603      	mov	r3, r0
 80036a0:	737b      	strb	r3, [r7, #13]
                              PCA9535_REG_OUTPUT_PORT1,
                              I2C_MEMADD_SIZE_8BIT,
                              &currentPort1,
                              1,
                              EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 80036a2:	7b7b      	ldrb	r3, [r7, #13]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <Expander_SetPinState+0x76>
    {
        return status;
 80036a8:	7b7b      	ldrb	r3, [r7, #13]
 80036aa:	e041      	b.n	8003730 <Expander_SetPinState+0xfa>
    }

    /* Update the appropriate port based on the pin mask.
       It is assumed that only one port's bit is set in 'pin'. */
    if ((pin & 0xFF00) == 0) // Pin belongs to Port 0
 80036ac:	883b      	ldrh	r3, [r7, #0]
 80036ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d114      	bne.n	80036e0 <Expander_SetPinState+0xaa>
    {
        if (isHigh)
 80036b6:	78bb      	ldrb	r3, [r7, #2]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <Expander_SetPinState+0x92>
        {
            port0 = currentPort0 | (uint8_t)pin;
 80036bc:	883b      	ldrh	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	7b3b      	ldrb	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e008      	b.n	80036da <Expander_SetPinState+0xa4>
        }
        else
        {
            port0 = currentPort0 & ~(uint8_t)pin;
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	b25a      	sxtb	r2, r3
 80036d0:	7b3b      	ldrb	r3, [r7, #12]
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	73fb      	strb	r3, [r7, #15]
        }
        port1 = currentPort1; // unchanged
 80036da:	7afb      	ldrb	r3, [r7, #11]
 80036dc:	73bb      	strb	r3, [r7, #14]
 80036de:	e01e      	b.n	800371e <Expander_SetPinState+0xe8>
    }
    else if ((pin & 0x00FF) == 0) // Pin belongs to Port 1
 80036e0:	883b      	ldrh	r3, [r7, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d118      	bne.n	800371a <Expander_SetPinState+0xe4>
    {
        if (isHigh)
 80036e8:	78bb      	ldrb	r3, [r7, #2]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <Expander_SetPinState+0xc8>
        {
            port1 = currentPort1 | (uint8_t)(pin >> 8);
 80036ee:	883b      	ldrh	r3, [r7, #0]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	7afb      	ldrb	r3, [r7, #11]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	73bb      	strb	r3, [r7, #14]
 80036fc:	e00a      	b.n	8003714 <Expander_SetPinState+0xde>
        }
        else
        {
            port1 = currentPort1 & ~(uint8_t)(pin >> 8);
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b29b      	uxth	r3, r3
 8003704:	b25b      	sxtb	r3, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	b25a      	sxtb	r2, r3
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4013      	ands	r3, r2
 8003710:	b25b      	sxtb	r3, r3
 8003712:	73bb      	strb	r3, [r7, #14]
        }
        port0 = currentPort0; // unchanged
 8003714:	7b3b      	ldrb	r3, [r7, #12]
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e001      	b.n	800371e <Expander_SetPinState+0xe8>
    }
    else
    {
        /* Invalid pin mask: bits set for both ports */
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e008      	b.n	8003730 <Expander_SetPinState+0xfa>
    }

    /* Write updated outputs */
    status = Expander_SetOutputs(hi2c, deviceAddress, port0, port1);
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	78f9      	ldrb	r1, [r7, #3]
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff4d 	bl	80035c4 <Expander_SetOutputs>
 800372a:	4603      	mov	r3, r0
 800372c:	737b      	strb	r3, [r7, #13]
    return status;
 800372e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	//Getting required values for currentLSB and calibration register
	double current_LSB_Value = correct_Current_LSB(maxCurrent);
 800373e:	4b3f      	ldr	r3, [pc, #252]	@ (800383c <main+0x104>)
 8003740:	ed93 7b00 	vldr	d7, [r3]
 8003744:	eeb0 0a47 	vmov.f32	s0, s14
 8003748:	eef0 0a67 	vmov.f32	s1, s15
 800374c:	f7ff fd08 	bl	8003160 <correct_Current_LSB>
 8003750:	ed87 0b02 	vstr	d0, [r7, #8]
	uint16_t calibration_Reg_Value = calibrationValue(shuntResistor);
 8003754:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <main+0x108>)
 8003756:	ed93 7b00 	vldr	d7, [r3]
 800375a:	eeb0 0a47 	vmov.f32	s0, s14
 800375e:	eef0 0a67 	vmov.f32	s1, s15
 8003762:	f7ff fd6d 	bl	8003240 <calibrationValue>
 8003766:	4603      	mov	r3, r0
 8003768:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376a:	f000 fecb 	bl	8004504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800376e:	f000 f875 	bl	800385c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003772:	f000 fa05 	bl	8003b80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003776:	f000 f961 	bl	8003a3c <MX_SPI1_Init>
  MX_SPI2_Init();
 800377a:	f000 f995 	bl	8003aa8 <MX_SPI2_Init>
  MX_I2C2_Init();
 800377e:	f000 f8dd 	bl	800393c <MX_I2C2_Init>
  MX_I2C3_Init();
 8003782:	f000 f91b 	bl	80039bc <MX_I2C3_Init>
  MX_SPI3_Init();
 8003786:	f000 f9c5 	bl	8003b14 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  /*configure the ina229 sensor*/
  INA229_config(&INA229_0);
 800378a:	482e      	ldr	r0, [pc, #184]	@ (8003844 <main+0x10c>)
 800378c:	f7ff fb86 	bl	8002e9c <INA229_config>

  /* Initialize the display module */
  Display_Init();
 8003790:	f7ff fe20 	bl	80033d4 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8003794:	f7ff fe46 	bl	8003424 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8003798:	482b      	ldr	r0, [pc, #172]	@ (8003848 <main+0x110>)
 800379a:	f7ff feb5 	bl	8003508 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 800379e:	482b      	ldr	r0, [pc, #172]	@ (800384c <main+0x114>)
 80037a0:	f7ff feb2 	bl	8003508 <Expander_InitAllDevices>
//	  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_03_LED_01,0);
//	  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_01_LED_01,0);
//	  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_02_LED_01,0);
//	  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_03_LED_01,0);

	   Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01,1);
 80037a4:	2301      	movs	r3, #1
 80037a6:	2210      	movs	r2, #16
 80037a8:	2121      	movs	r1, #33	@ 0x21
 80037aa:	4827      	ldr	r0, [pc, #156]	@ (8003848 <main+0x110>)
 80037ac:	f7ff ff43 	bl	8003636 <Expander_SetPinState>
	   mcu_msWait(10000);
 80037b0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80037b4:	f000 fc32 	bl	800401c <mcu_msWait>
	   HAL_GPIO_WritePin(GPIOE, CELL12_CELL01_CS_Pin, GPIO_PIN_RESET);
 80037b8:	2200      	movs	r2, #0
 80037ba:	2104      	movs	r1, #4
 80037bc:	4824      	ldr	r0, [pc, #144]	@ (8003850 <main+0x118>)
 80037be:	f001 f9c9 	bl	8004b54 <HAL_GPIO_WritePin>
	   mcu_msWait(1000);
 80037c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037c6:	f000 fc29 	bl	800401c <mcu_msWait>
	   //INA229_writeReg(&INA229_0, 0x02, calibration_Reg_Value);

	   //mcu_msWait(100);
	   //INA229_setCURRENT_LSB(&INA229_0, curret_LSB_Value);
	   //mcu_msWait(100);
	   temperature = INA229_getDIETEMP_C(&INA229_0);
 80037ca:	481e      	ldr	r0, [pc, #120]	@ (8003844 <main+0x10c>)
 80037cc:	f7ff fc7a 	bl	80030c4 <INA229_getDIETEMP_C>
 80037d0:	ee10 3a10 	vmov	r3, s0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc febf 	bl	8000558 <__aeabi_f2d>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	491d      	ldr	r1, [pc, #116]	@ (8003854 <main+0x11c>)
 80037e0:	e9c1 2300 	strd	r2, r3, [r1]
	   HAL_Delay(1000);
 80037e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037e8:	f000 fefe 	bl	80045e8 <HAL_Delay>
	   busVoltage = INA229_getVBUS_V(&INA229_0);
 80037ec:	4815      	ldr	r0, [pc, #84]	@ (8003844 <main+0x10c>)
 80037ee:	f7ff fc0b 	bl	8003008 <INA229_getVBUS_V>
 80037f2:	ee10 3a10 	vmov	r3, s0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc feae 	bl	8000558 <__aeabi_f2d>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4915      	ldr	r1, [pc, #84]	@ (8003858 <main+0x120>)
 8003802:	e9c1 2300 	strd	r2, r3, [r1]
	   HAL_Delay(1000);
 8003806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800380a:	f000 feed 	bl	80045e8 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOE, CELL12_CELL01_CS_Pin, GPIO_PIN_SET);
 800380e:	2201      	movs	r2, #1
 8003810:	2104      	movs	r1, #4
 8003812:	480f      	ldr	r0, [pc, #60]	@ (8003850 <main+0x118>)
 8003814:	f001 f99e 	bl	8004b54 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 8003818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800381c:	f000 fee4 	bl	80045e8 <HAL_Delay>
	   Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01, 0);
 8003820:	2300      	movs	r3, #0
 8003822:	2210      	movs	r2, #16
 8003824:	2121      	movs	r1, #33	@ 0x21
 8003826:	4808      	ldr	r0, [pc, #32]	@ (8003848 <main+0x110>)
 8003828:	f7ff ff05 	bl	8003636 <Expander_SetPinState>
//
//	   Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_02_LED_01, 1);



	    HAL_Delay(100);
 800382c:	2064      	movs	r0, #100	@ 0x64
 800382e:	f000 fedb 	bl	80045e8 <HAL_Delay>

	    // Run the LED sequence
	     //RunLEDSequence();

	     HAL_Delay(100); // Delay between sequences
 8003832:	2064      	movs	r0, #100	@ 0x64
 8003834:	f000 fed8 	bl	80045e8 <HAL_Delay>
	   Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01,1);
 8003838:	bf00      	nop
 800383a:	e7b3      	b.n	80037a4 <main+0x6c>
 800383c:	20000008 	.word	0x20000008
 8003840:	20000000 	.word	0x20000000
 8003844:	08009d70 	.word	0x08009d70
 8003848:	20000958 	.word	0x20000958
 800384c:	200009ac 	.word	0x200009ac
 8003850:	40021000 	.word	0x40021000
 8003854:	20000b10 	.word	0x20000b10
 8003858:	20000b08 	.word	0x20000b08

0800385c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b094      	sub	sp, #80	@ 0x50
 8003860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003862:	f107 0320 	add.w	r3, r7, #32
 8003866:	2230      	movs	r2, #48	@ 0x30
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f003 fa81 	bl	8006d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <SystemClock_Config+0xd8>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	4a2a      	ldr	r2, [pc, #168]	@ (8003934 <SystemClock_Config+0xd8>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003890:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <SystemClock_Config+0xd8>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	2300      	movs	r3, #0
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <SystemClock_Config+0xdc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <SystemClock_Config+0xdc>)
 80038a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <SystemClock_Config+0xdc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c2:	2302      	movs	r3, #2
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80038cc:	230f      	movs	r3, #15
 80038ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80038d0:	23d8      	movs	r3, #216	@ 0xd8
 80038d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038d8:	2304      	movs	r3, #4
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038dc:	f107 0320 	add.w	r3, r7, #32
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fa41 	bl	8005d68 <HAL_RCC_OscConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038ec:	f000 fb68 	bl	8003fc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038f0:	f002 f9ea 	bl	8005cc8 <HAL_PWREx_EnableOverDrive>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80038fa:	f000 fb61 	bl	8003fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038fe:	230f      	movs	r3, #15
 8003900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003902:	2302      	movs	r3, #2
 8003904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800390a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800390e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003914:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	2105      	movs	r1, #5
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fc9b 	bl	8006258 <HAL_RCC_ClockConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003928:	f000 fb4a 	bl	8003fc0 <Error_Handler>
  }
}
 800392c:	bf00      	nop
 800392e:	3750      	adds	r7, #80	@ 0x50
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000

0800393c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <MX_I2C2_Init+0x78>)
 8003944:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <MX_I2C2_Init+0x7c>)
 800394a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800394c:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003958:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800395a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800395e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003960:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396c:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003972:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <MX_I2C2_Init+0x74>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003978:	480d      	ldr	r0, [pc, #52]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800397a:	f001 f905 	bl	8004b88 <HAL_I2C_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003984:	f000 fb1c 	bl	8003fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003988:	2100      	movs	r1, #0
 800398a:	4809      	ldr	r0, [pc, #36]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800398c:	f002 f920 	bl	8005bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003996:	f000 fb13 	bl	8003fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800399a:	2100      	movs	r1, #0
 800399c:	4804      	ldr	r0, [pc, #16]	@ (80039b0 <MX_I2C2_Init+0x74>)
 800399e:	f002 f953 	bl	8005c48 <HAL_I2CEx_ConfigDigitalFilter>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80039a8:	f000 fb0a 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000958 	.word	0x20000958
 80039b4:	40005800 	.word	0x40005800
 80039b8:	00061a80 	.word	0x00061a80

080039bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a34 <MX_I2C3_Init+0x78>)
 80039c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80039c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a38 <MX_I2C3_Init+0x7c>)
 80039ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039cc:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039d2:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039e0:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80039f8:	480d      	ldr	r0, [pc, #52]	@ (8003a30 <MX_I2C3_Init+0x74>)
 80039fa:	f001 f8c5 	bl	8004b88 <HAL_I2C_Init>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a04:	f000 fadc 	bl	8003fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4809      	ldr	r0, [pc, #36]	@ (8003a30 <MX_I2C3_Init+0x74>)
 8003a0c:	f002 f8e0 	bl	8005bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003a16:	f000 fad3 	bl	8003fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4804      	ldr	r0, [pc, #16]	@ (8003a30 <MX_I2C3_Init+0x74>)
 8003a1e:	f002 f913 	bl	8005c48 <HAL_I2CEx_ConfigDigitalFilter>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003a28:	f000 faca 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200009ac 	.word	0x200009ac
 8003a34:	40005c00 	.word	0x40005c00
 8003a38:	00061a80 	.word	0x00061a80

08003a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a40:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <MX_SPI1_Init+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a46:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a54:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a5a:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a66:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a70:	2218      	movs	r2, #24
 8003a72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a74:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a88:	220a      	movs	r2, #10
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a8c:	4804      	ldr	r0, [pc, #16]	@ (8003aa0 <MX_SPI1_Init+0x64>)
 8003a8e:	f002 fdaf 	bl	80065f0 <HAL_SPI_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a98:	f000 fa92 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000a00 	.word	0x20000a00
 8003aa4:	40013000 	.word	0x40013000

08003aa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003aac:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <MX_SPI2_Init+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ab2:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ab4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ab8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003aba:	4b14      	ldr	r3, [pc, #80]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003acc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ad8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003adc:	2218      	movs	r2, #24
 8003ade:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aec:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003af4:	220a      	movs	r2, #10
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003af8:	4804      	ldr	r0, [pc, #16]	@ (8003b0c <MX_SPI2_Init+0x64>)
 8003afa:	f002 fd79 	bl	80065f0 <HAL_SPI_Init>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b04:	f000 fa5c 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000a58 	.word	0x20000a58
 8003b10:	40003800 	.word	0x40003800

08003b14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003b18:	4b17      	ldr	r3, [pc, #92]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b1a:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <MX_SPI3_Init+0x68>)
 8003b1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b26:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b32:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b46:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b48:	2220      	movs	r2, #32
 8003b4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b58:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b60:	220a      	movs	r2, #10
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003b64:	4804      	ldr	r0, [pc, #16]	@ (8003b78 <MX_SPI3_Init+0x64>)
 8003b66:	f002 fd43 	bl	80065f0 <HAL_SPI_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003b70:	f000 fa26 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000ab0 	.word	0x20000ab0
 8003b7c:	40003c00 	.word	0x40003c00

08003b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08e      	sub	sp, #56	@ 0x38
 8003b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	4bb4      	ldr	r3, [pc, #720]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4ab3      	ldr	r2, [pc, #716]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003ba0:	f043 0310 	orr.w	r3, r3, #16
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4bb1      	ldr	r3, [pc, #708]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	4bad      	ldr	r3, [pc, #692]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	4aac      	ldr	r2, [pc, #688]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc2:	4baa      	ldr	r3, [pc, #680]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	4aa5      	ldr	r2, [pc, #660]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bde:	4ba3      	ldr	r3, [pc, #652]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4b9f      	ldr	r3, [pc, #636]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a9e      	ldr	r2, [pc, #632]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bf4:	f043 0320 	orr.w	r3, r3, #32
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	4b98      	ldr	r3, [pc, #608]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a97      	ldr	r2, [pc, #604]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b95      	ldr	r3, [pc, #596]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b91      	ldr	r3, [pc, #580]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a90      	ldr	r2, [pc, #576]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b8e      	ldr	r3, [pc, #568]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b8a      	ldr	r3, [pc, #552]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a89      	ldr	r2, [pc, #548]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	4b83      	ldr	r3, [pc, #524]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4a82      	ldr	r2, [pc, #520]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b80      	ldr	r3, [pc, #512]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c86:	4b79      	ldr	r3, [pc, #484]	@ (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CELL01_CS_Pin|CELL12_CELL02_CS_Pin|CELL12_CELL03_CS_Pin|CELL12_CELL04_CS_Pin
 8003c92:	2201      	movs	r2, #1
 8003c94:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 8003c98:	4875      	ldr	r0, [pc, #468]	@ (8003e70 <MX_GPIO_Init+0x2f0>)
 8003c9a:	f000 ff5b 	bl	8004b54 <HAL_GPIO_WritePin>
                          |CELL12_CELL05_CS_Pin|CELL11_CELL10_CS_Pin|CELL11_CELL11_CS_Pin|CELL11_CELL12_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CELL06_CS_Pin|CELL12_CELL08_CS_Pin|CELL12_CELL10_CS_Pin|CELL12_CELL09_CS_Pin, GPIO_PIN_SET);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8003ca4:	4873      	ldr	r0, [pc, #460]	@ (8003e74 <MX_GPIO_Init+0x2f4>)
 8003ca6:	f000 ff55 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CELL07_CS_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003caa:	2201      	movs	r2, #1
 8003cac:	f242 0103 	movw	r1, #8195	@ 0x2003
 8003cb0:	4871      	ldr	r0, [pc, #452]	@ (8003e78 <MX_GPIO_Init+0x2f8>)
 8003cb2:	f000 ff4f 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CELL11_CS_Pin|CELL12_CELL12_CS_Pin|CELL12_TEMP_03_CS_Pin|CELL12_TEMP_03_LED_Pin
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f64f 5143 	movw	r1, #64835	@ 0xfd43
 8003cbc:	486f      	ldr	r0, [pc, #444]	@ (8003e7c <MX_GPIO_Init+0x2fc>)
 8003cbe:	f000 ff49 	bl	8004b54 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_02_CS_Pin|CELL11_CELL03_CS_Pin|CELL11_CELL04_CS_Pin|CELL11_CELL05_CS_Pin
                          |CELL11_CELL06_CS_Pin|CELL11_CELL07_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	486e      	ldr	r0, [pc, #440]	@ (8003e80 <MX_GPIO_Init+0x300>)
 8003cc8:	f000 ff44 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CELL01_CS_Pin|CELL11_CELL02_CS_Pin|CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f640 0103 	movw	r1, #2051	@ 0x803
 8003cd2:	486c      	ldr	r0, [pc, #432]	@ (8003e84 <MX_GPIO_Init+0x304>)
 8003cd4:	f000 ff3e 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CELL08_CS_Pin|CELL11_CELL09_CS_Pin, GPIO_PIN_SET);
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2103      	movs	r1, #3
 8003cdc:	486a      	ldr	r0, [pc, #424]	@ (8003e88 <MX_GPIO_Init+0x308>)
 8003cde:	f000 ff39 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003ce8:	4868      	ldr	r0, [pc, #416]	@ (8003e8c <MX_GPIO_Init+0x30c>)
 8003cea:	f000 ff33 	bl	8004b54 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8003cf4:	4864      	ldr	r0, [pc, #400]	@ (8003e88 <MX_GPIO_Init+0x308>)
 8003cf6:	f000 ff2d 	bl	8004b54 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003d00:	4862      	ldr	r0, [pc, #392]	@ (8003e8c <MX_GPIO_Init+0x30c>)
 8003d02:	f000 ff27 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|DISPLAY_CSD3_Pin, GPIO_PIN_RESET);
 8003d06:	2200      	movs	r2, #0
 8003d08:	210c      	movs	r1, #12
 8003d0a:	4861      	ldr	r0, [pc, #388]	@ (8003e90 <MX_GPIO_Init+0x310>)
 8003d0c:	f000 ff22 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8003d10:	2200      	movs	r2, #0
 8003d12:	2118      	movs	r1, #24
 8003d14:	485b      	ldr	r0, [pc, #364]	@ (8003e84 <MX_GPIO_Init+0x304>)
 8003d16:	f000 ff1d 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	4854      	ldr	r0, [pc, #336]	@ (8003e70 <MX_GPIO_Init+0x2f0>)
 8003d20:	f000 ff18 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8003d24:	2200      	movs	r2, #0
 8003d26:	21f0      	movs	r1, #240	@ 0xf0
 8003d28:	4852      	ldr	r0, [pc, #328]	@ (8003e74 <MX_GPIO_Init+0x2f4>)
 8003d2a:	f000 ff13 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CELL01_CS_Pin CELL12_CELL02_CS_Pin CELL12_CELL04_CS_Pin CELL12_CELL05_CS_Pin
                           CELL11_CELL10_CS_Pin CELL11_CELL11_CS_Pin CELL11_CELL12_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL01_CS_Pin|CELL12_CELL02_CS_Pin|CELL12_CELL04_CS_Pin|CELL12_CELL05_CS_Pin
 8003d2e:	f44f 737b 	mov.w	r3, #1004	@ 0x3ec
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL11_CELL10_CS_Pin|CELL11_CELL11_CS_Pin|CELL11_CELL12_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d34:	2301      	movs	r3, #1
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	484a      	ldr	r0, [pc, #296]	@ (8003e70 <MX_GPIO_Init+0x2f0>)
 8003d48:	f000 fd58 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CELL03_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL03_CS_Pin;
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d50:	2301      	movs	r3, #1
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CELL03_CS_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d60:	4619      	mov	r1, r3
 8003d62:	4843      	ldr	r0, [pc, #268]	@ (8003e70 <MX_GPIO_Init+0x2f0>)
 8003d64:	f000 fd4a 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CELL06_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL06_CS_Pin;
 8003d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CELL06_CS_GPIO_Port, &GPIO_InitStruct);
 8003d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d7e:	4619      	mov	r1, r3
 8003d80:	483c      	ldr	r0, [pc, #240]	@ (8003e74 <MX_GPIO_Init+0x2f4>)
 8003d82:	f000 fd3b 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CELL07_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL07_CS_Pin;
 8003d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d90:	2301      	movs	r3, #1
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d94:	2300      	movs	r3, #0
 8003d96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CELL07_CS_GPIO_Port, &GPIO_InitStruct);
 8003d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4836      	ldr	r0, [pc, #216]	@ (8003e78 <MX_GPIO_Init+0x2f8>)
 8003da0:	f000 fd2c 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CELL08_CS_Pin CELL12_CELL10_CS_Pin CELL12_CELL09_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL08_CS_Pin|CELL12_CELL10_CS_Pin|CELL12_CELL09_CS_Pin;
 8003da4:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dae:	2301      	movs	r3, #1
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dba:	4619      	mov	r1, r3
 8003dbc:	482d      	ldr	r0, [pc, #180]	@ (8003e74 <MX_GPIO_Init+0x2f4>)
 8003dbe:	f000 fd1d 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CELL11_CS_Pin CELL12_CELL12_CS_Pin CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin
                           CELL11_CELL03_CS_Pin CELL11_CELL04_CS_Pin CELL11_CELL05_CS_Pin CELL11_CELL06_CS_Pin
                           CELL11_CELL07_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_CELL11_CS_Pin|CELL12_CELL12_CS_Pin|CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin
 8003dc2:	f64f 4343 	movw	r3, #64579	@ 0xfc43
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL11_CELL03_CS_Pin|CELL11_CELL04_CS_Pin|CELL11_CELL05_CS_Pin|CELL11_CELL06_CS_Pin
                          |CELL11_CELL07_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4828      	ldr	r0, [pc, #160]	@ (8003e7c <MX_GPIO_Init+0x2fc>)
 8003ddc:	f000 fd0e 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8003de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de6:	2301      	movs	r3, #1
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dea:	2302      	movs	r3, #2
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dee:	2303      	movs	r3, #3
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8003df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df6:	4619      	mov	r1, r3
 8003df8:	4820      	ldr	r0, [pc, #128]	@ (8003e7c <MX_GPIO_Init+0x2fc>)
 8003dfa:	f000 fcff 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e06:	2302      	movs	r3, #2
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8003e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e12:	4619      	mov	r1, r3
 8003e14:	4818      	ldr	r0, [pc, #96]	@ (8003e78 <MX_GPIO_Init+0x2f8>)
 8003e16:	f000 fcf1 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e22:	2301      	movs	r3, #1
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e26:	2303      	movs	r3, #3
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8003e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4811      	ldr	r0, [pc, #68]	@ (8003e78 <MX_GPIO_Init+0x2f8>)
 8003e32:	f000 fce3 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8003e36:	2301      	movs	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e42:	2303      	movs	r3, #3
 8003e44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8003e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	480c      	ldr	r0, [pc, #48]	@ (8003e80 <MX_GPIO_Init+0x300>)
 8003e4e:	f000 fcd5 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CELL01_CS_Pin CELL11_CELL02_CS_Pin CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_CELL01_CS_Pin|CELL11_CELL02_CS_Pin|CELL11_TEMP_03_CS_Pin;
 8003e52:	f640 0303 	movw	r3, #2051	@ 0x803
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	e013      	b.n	8003e94 <MX_GPIO_Init+0x314>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40022000 	.word	0x40022000
 8003e78:	40020800 	.word	0x40020800
 8003e7c:	40021400 	.word	0x40021400
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40021800 	.word	0x40021800
 8003e8c:	40021c00 	.word	0x40021c00
 8003e90:	40020c00 	.word	0x40020c00
 8003e94:	4844      	ldr	r0, [pc, #272]	@ (8003fa8 <MX_GPIO_Init+0x428>)
 8003e96:	f000 fcb1 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CELL08_CS_Pin CELL11_CELL09_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_CELL08_CS_Pin|CELL11_CELL09_CS_Pin;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eae:	4619      	mov	r1, r3
 8003eb0:	483e      	ldr	r0, [pc, #248]	@ (8003fac <MX_GPIO_Init+0x42c>)
 8003eb2:	f000 fca3 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8003eb6:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4838      	ldr	r0, [pc, #224]	@ (8003fb0 <MX_GPIO_Init+0x430>)
 8003ed0:	f000 fc94 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8003ed4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eea:	4619      	mov	r1, r3
 8003eec:	4830      	ldr	r0, [pc, #192]	@ (8003fb0 <MX_GPIO_Init+0x430>)
 8003eee:	f000 fc85 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin BACKLIGHT_1_Pin BACKLIGHT_2_Pin
                           LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003ef2:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f00:	2300      	movs	r3, #0
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4828      	ldr	r0, [pc, #160]	@ (8003fac <MX_GPIO_Init+0x42c>)
 8003f0c:	f000 fc76 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8003f10:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f26:	4619      	mov	r1, r3
 8003f28:	4821      	ldr	r0, [pc, #132]	@ (8003fb0 <MX_GPIO_Init+0x430>)
 8003f2a:	f000 fc67 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_CSD3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_CSD3_Pin;
 8003f2e:	230c      	movs	r3, #12
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f32:	2301      	movs	r3, #1
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f42:	4619      	mov	r1, r3
 8003f44:	481b      	ldr	r0, [pc, #108]	@ (8003fb4 <MX_GPIO_Init+0x434>)
 8003f46:	f000 fc59 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 8003f4a:	2318      	movs	r3, #24
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4811      	ldr	r0, [pc, #68]	@ (8003fa8 <MX_GPIO_Init+0x428>)
 8003f62:	f000 fc4b 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 8003f66:	2303      	movs	r3, #3
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480e      	ldr	r0, [pc, #56]	@ (8003fb8 <MX_GPIO_Init+0x438>)
 8003f7e:	f000 fc3d 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
 8003f82:	23f0      	movs	r3, #240	@ 0xf0
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f86:	2301      	movs	r3, #1
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f96:	4619      	mov	r1, r3
 8003f98:	4808      	ldr	r0, [pc, #32]	@ (8003fbc <MX_GPIO_Init+0x43c>)
 8003f9a:	f000 fc2f 	bl	80047fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f9e:	bf00      	nop
 8003fa0:	3738      	adds	r7, #56	@ 0x38
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40020400 	.word	0x40020400
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40021c00 	.word	0x40021c00
 8003fb4:	40020c00 	.word	0x40020c00
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40022000 	.word	0x40022000

08003fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc4:	b672      	cpsid	i
}
 8003fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <Error_Handler+0x8>

08003fcc <mcu_spiInit>:
extern SPI_HandleTypeDef hspi1;


/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4603      	mov	r3, r0
 8003fee:	71fb      	strb	r3, [r7, #7]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	71bb      	strb	r3, [r7, #6]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */
	  uint8_t tx_data[3] = {0xBE, 0x00, 0x00}; // Command to read register 0x3E
 8003ff8:	4a07      	ldr	r2, [pc, #28]	@ (8004018 <mcu_spiTransfer+0x34>)
 8003ffa:	f107 030c 	add.w	r3, r7, #12
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	4611      	mov	r1, r2
 8004002:	8019      	strh	r1, [r3, #0]
 8004004:	3302      	adds	r3, #2
 8004006:	0c12      	lsrs	r2, r2, #16
 8004008:	701a      	strb	r2, [r3, #0]

    /*
     *  Add MCU specific return code for error handling
     */

    return (0);
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	08009070 	.word	0x08009070

0800401c <mcu_msWait>:
/********* MCU SPECIFIC SPI CODE ENDS HERE **********/


/********* MCU SPECIFIC DELAY CODE STARTS HERE ************/
void mcu_msWait(uint16_t msWait)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(msWait); // Millisecond delay
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fadd 	bl	80045e8 <HAL_Delay>
    /*
     *  Add MCU specific wait loop for msWait. The unit is in milli-seconds
     */
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_MspInit+0x4c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <HAL_MspInit+0x4c>)
 8004048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800404c:	6453      	str	r3, [r2, #68]	@ 0x44
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_MspInit+0x4c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_MspInit+0x4c>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <HAL_MspInit+0x4c>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	@ 0x40
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_MspInit+0x4c>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	@ 0x30
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a32      	ldr	r2, [pc, #200]	@ (8004170 <HAL_I2C_MspInit+0xe8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12c      	bne.n	8004104 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	4a30      	ldr	r2, [pc, #192]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040c6:	2330      	movs	r3, #48	@ 0x30
 80040c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ca:	2312      	movs	r3, #18
 80040cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040d6:	2304      	movs	r3, #4
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040da:	f107 031c 	add.w	r3, r7, #28
 80040de:	4619      	mov	r1, r3
 80040e0:	4825      	ldr	r0, [pc, #148]	@ (8004178 <HAL_I2C_MspInit+0xf0>)
 80040e2:	f000 fb8b 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	4b22      	ldr	r3, [pc, #136]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004102:	e031      	b.n	8004168 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <HAL_I2C_MspInit+0xf4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12c      	bne.n	8004168 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 8004118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411c:	6313      	str	r3, [r2, #48]	@ 0x30
 800411e:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800412a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800412e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004130:	2312      	movs	r3, #18
 8004132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004138:	2303      	movs	r3, #3
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800413c:	2304      	movs	r3, #4
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004140:	f107 031c 	add.w	r3, r7, #28
 8004144:	4619      	mov	r1, r3
 8004146:	480c      	ldr	r0, [pc, #48]	@ (8004178 <HAL_I2C_MspInit+0xf0>)
 8004148:	f000 fb58 	bl	80047fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	4a07      	ldr	r2, [pc, #28]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 8004156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800415a:	6413      	str	r3, [r2, #64]	@ 0x40
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_I2C_MspInit+0xec>)
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	bf00      	nop
 800416a:	3730      	adds	r7, #48	@ 0x30
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40005800 	.word	0x40005800
 8004174:	40023800 	.word	0x40023800
 8004178:	40021c00 	.word	0x40021c00
 800417c:	40005c00 	.word	0x40005c00

08004180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	@ 0x38
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a4b      	ldr	r2, [pc, #300]	@ (80042cc <HAL_SPI_MspInit+0x14c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d12c      	bne.n	80041fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	4b4a      	ldr	r3, [pc, #296]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	4a49      	ldr	r2, [pc, #292]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80041b2:	4b47      	ldr	r3, [pc, #284]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a42      	ldr	r2, [pc, #264]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80041da:	23e0      	movs	r3, #224	@ 0xe0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	2303      	movs	r3, #3
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041ea:	2305      	movs	r3, #5
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041f2:	4619      	mov	r1, r3
 80041f4:	4837      	ldr	r0, [pc, #220]	@ (80042d4 <HAL_SPI_MspInit+0x154>)
 80041f6:	f000 fb01 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80041fa:	e063      	b.n	80042c4 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a35      	ldr	r2, [pc, #212]	@ (80042d8 <HAL_SPI_MspInit+0x158>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d12c      	bne.n	8004260 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a30      	ldr	r2, [pc, #192]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b2e      	ldr	r3, [pc, #184]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4a29      	ldr	r2, [pc, #164]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004230:	6313      	str	r3, [r2, #48]	@ 0x30
 8004232:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800423e:	230e      	movs	r3, #14
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424a:	2303      	movs	r3, #3
 800424c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800424e:	2305      	movs	r3, #5
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004256:	4619      	mov	r1, r3
 8004258:	4820      	ldr	r0, [pc, #128]	@ (80042dc <HAL_SPI_MspInit+0x15c>)
 800425a:	f000 facf 	bl	80047fc <HAL_GPIO_Init>
}
 800425e:	e031      	b.n	80042c4 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_SPI_MspInit+0x160>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12c      	bne.n	80042c4 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b18      	ldr	r3, [pc, #96]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004278:	6413      	str	r3, [r2, #64]	@ 0x40
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	4a10      	ldr	r2, [pc, #64]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004290:	f043 0304 	orr.w	r3, r3, #4
 8004294:	6313      	str	r3, [r2, #48]	@ 0x30
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <HAL_SPI_MspInit+0x150>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042b4:	2306      	movs	r3, #6
 80042b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042bc:	4619      	mov	r1, r3
 80042be:	4809      	ldr	r0, [pc, #36]	@ (80042e4 <HAL_SPI_MspInit+0x164>)
 80042c0:	f000 fa9c 	bl	80047fc <HAL_GPIO_Init>
}
 80042c4:	bf00      	nop
 80042c6:	3738      	adds	r7, #56	@ 0x38
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40013000 	.word	0x40013000
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40020000 	.word	0x40020000
 80042d8:	40003800 	.word	0x40003800
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40003c00 	.word	0x40003c00
 80042e4:	40020800 	.word	0x40020800

080042e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <NMI_Handler+0x4>

080042f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <HardFault_Handler+0x4>

080042f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <MemManage_Handler+0x4>

08004300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <UsageFault_Handler+0x4>

08004310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433e:	f000 f933 	bl	80045a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}

08004346 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e00a      	b.n	800436e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004358:	f3af 8000 	nop.w
 800435c:	4601      	mov	r1, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	60ba      	str	r2, [r7, #8]
 8004364:	b2ca      	uxtb	r2, r1
 8004366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3301      	adds	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	dbf0      	blt.n	8004358 <_read+0x12>
  }

  return len;
 8004376:	687b      	ldr	r3, [r7, #4]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e009      	b.n	80043a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	60ba      	str	r2, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	dbf1      	blt.n	8004392 <_write+0x12>
  }
  return len;
 80043ae:	687b      	ldr	r3, [r7, #4]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_close>:

int _close(int file)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043e0:	605a      	str	r2, [r3, #4]
  return 0;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_isatty>:

int _isatty(int file)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <_sbrk+0x5c>)
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <_sbrk+0x60>)
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <_sbrk+0x64>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <_sbrk+0x64>)
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <_sbrk+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <_sbrk+0x64>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	429a      	cmp	r2, r3
 800444e:	d207      	bcs.n	8004460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004450:	f002 fcde 	bl	8006e10 <__errno>
 8004454:	4603      	mov	r3, r0
 8004456:	220c      	movs	r2, #12
 8004458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	e009      	b.n	8004474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004460:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <_sbrk+0x64>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <_sbrk+0x64>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	4a05      	ldr	r2, [pc, #20]	@ (8004484 <_sbrk+0x64>)
 8004470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20030000 	.word	0x20030000
 8004480:	00000400 	.word	0x00000400
 8004484:	20000b18 	.word	0x20000b18
 8004488:	20000c70 	.word	0x20000c70

0800448c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004490:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <SystemInit+0x20>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <SystemInit+0x20>)
 8004498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800449c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80044b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044b4:	f7ff ffea 	bl	800448c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044b8:	480c      	ldr	r0, [pc, #48]	@ (80044ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044ba:	490d      	ldr	r1, [pc, #52]	@ (80044f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044bc:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044c0:	e002      	b.n	80044c8 <LoopCopyDataInit>

080044c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044c6:	3304      	adds	r3, #4

080044c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044cc:	d3f9      	bcc.n	80044c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ce:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044d0:	4c0a      	ldr	r4, [pc, #40]	@ (80044fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d4:	e001      	b.n	80044da <LoopFillZerobss>

080044d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d8:	3204      	adds	r2, #4

080044da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044dc:	d3fb      	bcc.n	80044d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80044de:	f002 fc9d 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044e2:	f7ff f929 	bl	8003738 <main>
  bx  lr    
 80044e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80044e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80044ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f0:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 80044f4:	08009e08 	.word	0x08009e08
  ldr r2, =_sbss
 80044f8:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 80044fc:	20000c6c 	.word	0x20000c6c

08004500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004500:	e7fe      	b.n	8004500 <ADC_IRQHandler>
	...

08004504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <HAL_Init+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <HAL_Init+0x40>)
 800450e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_Init+0x40>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <HAL_Init+0x40>)
 800451a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800451e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004520:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a07      	ldr	r2, [pc, #28]	@ (8004544 <HAL_Init+0x40>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800452c:	2003      	movs	r0, #3
 800452e:	f000 f931 	bl	8004794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004532:	200f      	movs	r0, #15
 8004534:	f000 f808 	bl	8004548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004538:	f7ff fd7e 	bl	8004038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00

08004548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004550:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_InitTick+0x54>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_InitTick+0x58>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800455e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f93b 	bl	80047e2 <HAL_SYSTICK_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e00e      	b.n	8004594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d80a      	bhi.n	8004592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800457c:	2200      	movs	r2, #0
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f000 f911 	bl	80047aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004588:	4a06      	ldr	r2, [pc, #24]	@ (80045a4 <HAL_InitTick+0x5c>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000430 	.word	0x20000430
 80045a0:	20000438 	.word	0x20000438
 80045a4:	20000434 	.word	0x20000434

080045a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_IncTick+0x20>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_IncTick+0x24>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	4a04      	ldr	r2, [pc, #16]	@ (80045cc <HAL_IncTick+0x24>)
 80045ba:	6013      	str	r3, [r2, #0]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000438 	.word	0x20000438
 80045cc:	20000b1c 	.word	0x20000b1c

080045d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return uwTick;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_GetTick+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000b1c 	.word	0x20000b1c

080045e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045f0:	f7ff ffee 	bl	80045d0 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d005      	beq.n	800460e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <HAL_Delay+0x44>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800460e:	bf00      	nop
 8004610:	f7ff ffde 	bl	80045d0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	429a      	cmp	r2, r3
 800461e:	d8f7      	bhi.n	8004610 <HAL_Delay+0x28>
  {
  }
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000438 	.word	0x20000438

08004630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800465c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004662:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <__NVIC_GetPriorityGrouping+0x18>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0307 	and.w	r3, r3, #7
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	@ (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	@ (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	@ 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
         );
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	@ 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004760:	d301      	bcc.n	8004766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004762:	2301      	movs	r3, #1
 8004764:	e00f      	b.n	8004786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004766:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <SysTick_Config+0x40>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476e:	210f      	movs	r1, #15
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	f7ff ff8e 	bl	8004694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <SysTick_Config+0x40>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <SysTick_Config+0x40>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010

08004794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ff47 	bl	8004630 <__NVIC_SetPriorityGrouping>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047bc:	f7ff ff5c 	bl	8004678 <__NVIC_GetPriorityGrouping>
 80047c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff8e 	bl	80046e8 <NVIC_EncodePriority>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff5d 	bl	8004694 <__NVIC_SetPriority>
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ffb0 	bl	8004750 <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	@ 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e177      	b.n	8004b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8166 	bne.w	8004b02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d130      	bne.n	80048b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	2201      	movs	r2, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0201 	and.w	r2, r3, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d017      	beq.n	80048ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d123      	bne.n	8004940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	220f      	movs	r2, #15
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80c0 	beq.w	8004b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	4a65      	ldr	r2, [pc, #404]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004990:	6453      	str	r3, [r2, #68]	@ 0x44
 8004992:	4b63      	ldr	r3, [pc, #396]	@ (8004b20 <HAL_GPIO_Init+0x324>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499e:	4a61      	ldr	r2, [pc, #388]	@ (8004b24 <HAL_GPIO_Init+0x328>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a58      	ldr	r2, [pc, #352]	@ (8004b28 <HAL_GPIO_Init+0x32c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d037      	beq.n	8004a3a <HAL_GPIO_Init+0x23e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a57      	ldr	r2, [pc, #348]	@ (8004b2c <HAL_GPIO_Init+0x330>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_GPIO_Init+0x23a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a56      	ldr	r2, [pc, #344]	@ (8004b30 <HAL_GPIO_Init+0x334>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02b      	beq.n	8004a32 <HAL_GPIO_Init+0x236>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a55      	ldr	r2, [pc, #340]	@ (8004b34 <HAL_GPIO_Init+0x338>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d025      	beq.n	8004a2e <HAL_GPIO_Init+0x232>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a54      	ldr	r2, [pc, #336]	@ (8004b38 <HAL_GPIO_Init+0x33c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <HAL_GPIO_Init+0x22e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a53      	ldr	r2, [pc, #332]	@ (8004b3c <HAL_GPIO_Init+0x340>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d019      	beq.n	8004a26 <HAL_GPIO_Init+0x22a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_GPIO_Init+0x344>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a51      	ldr	r2, [pc, #324]	@ (8004b44 <HAL_GPIO_Init+0x348>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00d      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a50      	ldr	r2, [pc, #320]	@ (8004b48 <HAL_GPIO_Init+0x34c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b4c <HAL_GPIO_Init+0x350>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_GPIO_Init+0x21a>
 8004a12:	2309      	movs	r3, #9
 8004a14:	e012      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a16:	230a      	movs	r3, #10
 8004a18:	e010      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	e00e      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a1e:	2307      	movs	r3, #7
 8004a20:	e00c      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e00a      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f002 0203 	and.w	r2, r2, #3
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4935      	ldr	r1, [pc, #212]	@ (8004b24 <HAL_GPIO_Init+0x328>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a7e:	4a34      	ldr	r2, [pc, #208]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a84:	4b32      	ldr	r3, [pc, #200]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa8:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aae:	4b28      	ldr	r3, [pc, #160]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004afc:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <HAL_GPIO_Init+0x354>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	f67f ae84 	bls.w	8004818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	@ 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020c00 	.word	0x40020c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40021400 	.word	0x40021400
 8004b40:	40021800 	.word	0x40021800
 8004b44:	40021c00 	.word	0x40021c00
 8004b48:	40022000 	.word	0x40022000
 8004b4c:	40022400 	.word	0x40022400
 8004b50:	40013c00 	.word	0x40013c00

08004b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
 8004b60:	4613      	mov	r3, r2
 8004b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b64:	787b      	ldrb	r3, [r7, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b70:	e003      	b.n	8004b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	041a      	lsls	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	619a      	str	r2, [r3, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e12b      	b.n	8004df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fa6a 	bl	8004088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2224      	movs	r2, #36	@ 0x24
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bec:	f001 fcec 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4a81      	ldr	r2, [pc, #516]	@ (8004dfc <HAL_I2C_Init+0x274>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d807      	bhi.n	8004c0c <HAL_I2C_Init+0x84>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a80      	ldr	r2, [pc, #512]	@ (8004e00 <HAL_I2C_Init+0x278>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	bf94      	ite	ls
 8004c04:	2301      	movls	r3, #1
 8004c06:	2300      	movhi	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e006      	b.n	8004c1a <HAL_I2C_Init+0x92>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e04 <HAL_I2C_Init+0x27c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	bf94      	ite	ls
 8004c14:	2301      	movls	r3, #1
 8004c16:	2300      	movhi	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0e7      	b.n	8004df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a78      	ldr	r2, [pc, #480]	@ (8004e08 <HAL_I2C_Init+0x280>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0c9b      	lsrs	r3, r3, #18
 8004c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a6a      	ldr	r2, [pc, #424]	@ (8004dfc <HAL_I2C_Init+0x274>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d802      	bhi.n	8004c5c <HAL_I2C_Init+0xd4>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	e009      	b.n	8004c70 <HAL_I2C_Init+0xe8>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	4a69      	ldr	r2, [pc, #420]	@ (8004e0c <HAL_I2C_Init+0x284>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	3301      	adds	r3, #1
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	495c      	ldr	r1, [pc, #368]	@ (8004dfc <HAL_I2C_Init+0x274>)
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d819      	bhi.n	8004cc4 <HAL_I2C_Init+0x13c>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e59      	subs	r1, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c9e:	1c59      	adds	r1, r3, #1
 8004ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_I2C_Init+0x138>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1e59      	subs	r1, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cbe:	e051      	b.n	8004d64 <HAL_I2C_Init+0x1dc>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	e04f      	b.n	8004d64 <HAL_I2C_Init+0x1dc>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <HAL_I2C_Init+0x168>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	440b      	add	r3, r1
 8004cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e012      	b.n	8004d16 <HAL_I2C_Init+0x18e>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e58      	subs	r0, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	0099      	lsls	r1, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d06:	3301      	adds	r3, #1
 8004d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Init+0x196>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e022      	b.n	8004d64 <HAL_I2C_Init+0x1dc>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10e      	bne.n	8004d44 <HAL_I2C_Init+0x1bc>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1e58      	subs	r0, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	440b      	add	r3, r1
 8004d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d42:	e00f      	b.n	8004d64 <HAL_I2C_Init+0x1dc>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1e58      	subs	r0, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	0099      	lsls	r1, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	6809      	ldr	r1, [r1, #0]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6911      	ldr	r1, [r2, #16]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	000186a0 	.word	0x000186a0
 8004e00:	001e847f 	.word	0x001e847f
 8004e04:	003d08ff 	.word	0x003d08ff
 8004e08:	431bde83 	.word	0x431bde83
 8004e0c:	10624dd3 	.word	0x10624dd3

08004e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4603      	mov	r3, r0
 8004e20:	817b      	strh	r3, [r7, #10]
 8004e22:	460b      	mov	r3, r1
 8004e24:	813b      	strh	r3, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e2a:	f7ff fbd1 	bl	80045d0 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	f040 80d9 	bne.w	8004ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2319      	movs	r3, #25
 8004e44:	2201      	movs	r2, #1
 8004e46:	496d      	ldr	r1, [pc, #436]	@ (8004ffc <HAL_I2C_Mem_Write+0x1ec>)
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fc8b 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0cc      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_I2C_Mem_Write+0x56>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0c5      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d007      	beq.n	8004e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2221      	movs	r2, #33	@ 0x21
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2240      	movs	r2, #64	@ 0x40
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a4d      	ldr	r2, [pc, #308]	@ (8005000 <HAL_I2C_Mem_Write+0x1f0>)
 8004ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ece:	88f8      	ldrh	r0, [r7, #6]
 8004ed0:	893a      	ldrh	r2, [r7, #8]
 8004ed2:	8979      	ldrh	r1, [r7, #10]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	4603      	mov	r3, r0
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fac2 	bl	8005468 <I2C_RequestMemoryWrite>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d052      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e081      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fd50 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d107      	bne.n	8004f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06b      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d11b      	bne.n	8004f90 <HAL_I2C_Mem_Write+0x180>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1aa      	bne.n	8004eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fd43 	bl	8005a28 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d107      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e016      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	00100002 	.word	0x00100002
 8005000:	ffff0000 	.word	0xffff0000

08005004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	@ 0x30
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4603      	mov	r3, r0
 8005014:	817b      	strh	r3, [r7, #10]
 8005016:	460b      	mov	r3, r1
 8005018:	813b      	strh	r3, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800501e:	f7ff fad7 	bl	80045d0 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b20      	cmp	r3, #32
 800502e:	f040 8214 	bne.w	800545a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2319      	movs	r3, #25
 8005038:	2201      	movs	r2, #1
 800503a:	497b      	ldr	r1, [pc, #492]	@ (8005228 <HAL_I2C_Mem_Read+0x224>)
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb91 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
 800504a:	e207      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_I2C_Mem_Read+0x56>
 8005056:	2302      	movs	r3, #2
 8005058:	e200      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d007      	beq.n	8005080 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2222      	movs	r2, #34	@ 0x22
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2240      	movs	r2, #64	@ 0x40
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80050b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a5b      	ldr	r2, [pc, #364]	@ (800522c <HAL_I2C_Mem_Read+0x228>)
 80050c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050c2:	88f8      	ldrh	r0, [r7, #6]
 80050c4:	893a      	ldrh	r2, [r7, #8]
 80050c6:	8979      	ldrh	r1, [r7, #10]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa5e 	bl	8005594 <I2C_RequestMemoryRead>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1bc      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d113      	bne.n	8005112 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e190      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005116:	2b01      	cmp	r3, #1
 8005118:	d11b      	bne.n	8005152 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e170      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11b      	bne.n	8005192 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	e150      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051a8:	e144      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	f200 80f1 	bhi.w	8005396 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d123      	bne.n	8005204 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fc79 	bl	8005ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e145      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005202:	e117      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005208:	2b02      	cmp	r3, #2
 800520a:	d14e      	bne.n	80052aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005212:	2200      	movs	r2, #0
 8005214:	4906      	ldr	r1, [pc, #24]	@ (8005230 <HAL_I2C_Mem_Read+0x22c>)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 faa4 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e11a      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
 8005226:	bf00      	nop
 8005228:	00100002 	.word	0x00100002
 800522c:	ffff0000 	.word	0xffff0000
 8005230:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052a8:	e0c4      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	2200      	movs	r2, #0
 80052b2:	496c      	ldr	r1, [pc, #432]	@ (8005464 <HAL_I2C_Mem_Read+0x460>)
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa55 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0cb      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	2200      	movs	r2, #0
 800530e:	4955      	ldr	r1, [pc, #340]	@ (8005464 <HAL_I2C_Mem_Read+0x460>)
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fa27 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e09d      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005394:	e04e      	b.n	8005434 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fb8c 	bl	8005ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e058      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d124      	bne.n	8005434 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d107      	bne.n	8005402 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005400:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f aeb6 	bne.w	80051aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	@ 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	00010004 	.word	0x00010004

08005468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4603      	mov	r3, r0
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	460b      	mov	r3, r1
 800547c:	813b      	strh	r3, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2200      	movs	r2, #0
 800549a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f960 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b8:	d103      	bne.n	80054c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e05f      	b.n	8005586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c6:	897b      	ldrh	r3, [r7, #10]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	492d      	ldr	r1, [pc, #180]	@ (8005590 <I2C_RequestMemoryWrite+0x128>)
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f9bb 	bl	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e04c      	b.n	8005586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fa46 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	2b04      	cmp	r3, #4
 8005518:	d107      	bne.n	800552a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02b      	b.n	8005586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	e021      	b.n	8005584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005540:	893b      	ldrh	r3, [r7, #8]
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	b29b      	uxth	r3, r3
 8005546:	b2da      	uxtb	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	6a39      	ldr	r1, [r7, #32]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa20 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	2b04      	cmp	r3, #4
 8005564:	d107      	bne.n	8005576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e005      	b.n	8005586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800557a:	893b      	ldrh	r3, [r7, #8]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	00010002 	.word	0x00010002

08005594 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	460b      	mov	r3, r1
 80055a8:	813b      	strh	r3, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f8c2 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f4:	d103      	bne.n	80055fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0aa      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005602:	897b      	ldrh	r3, [r7, #10]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	6a3a      	ldr	r2, [r7, #32]
 8005616:	4952      	ldr	r1, [pc, #328]	@ (8005760 <I2C_RequestMemoryRead+0x1cc>)
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f91d 	bl	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e097      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800563e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005640:	6a39      	ldr	r1, [r7, #32]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f9a8 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	2b04      	cmp	r3, #4
 8005654:	d107      	bne.n	8005666 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e076      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005670:	893b      	ldrh	r3, [r7, #8]
 8005672:	b2da      	uxtb	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	611a      	str	r2, [r3, #16]
 800567a:	e021      	b.n	80056c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	b29b      	uxth	r3, r3
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568c:	6a39      	ldr	r1, [r7, #32]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f982 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d107      	bne.n	80056b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e050      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b6:	893b      	ldrh	r3, [r7, #8]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c2:	6a39      	ldr	r1, [r7, #32]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f967 	bl	8005998 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d107      	bne.n	80056e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e035      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2200      	movs	r2, #0
 8005704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f82b 	bl	8005764 <I2C_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005722:	d103      	bne.n	800572c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e013      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005730:	897b      	ldrh	r3, [r7, #10]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	4906      	ldr	r1, [pc, #24]	@ (8005760 <I2C_RequestMemoryRead+0x1cc>)
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f886 	bl	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	00010002 	.word	0x00010002

08005764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005774:	e048      	b.n	8005808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d044      	beq.n	8005808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577e:	f7fe ff27 	bl	80045d0 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d139      	bne.n	8005808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10d      	bne.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	e00c      	b.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	43da      	mvns	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4013      	ands	r3, r2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e023      	b.n	8005850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10d      	bne.n	800582e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	43da      	mvns	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	e00c      	b.n	8005848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	43da      	mvns	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	d093      	beq.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005866:	e071      	b.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005876:	d123      	bne.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f043 0204 	orr.w	r2, r3, #4
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e067      	b.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d041      	beq.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c8:	f7fe fe82 	bl	80045d0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d136      	bne.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10c      	bne.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	43da      	mvns	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e00b      	b.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	43da      	mvns	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e021      	b.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d10c      	bne.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	43da      	mvns	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e00b      	b.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4013      	ands	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	f47f af6d 	bne.w	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a4:	e034      	b.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f8e3 	bl	8005b72 <I2C_IsAcknowledgeFailed>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e034      	b.n	8005a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d028      	beq.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fe fe07 	bl	80045d0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11d      	bne.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b80      	cmp	r3, #128	@ 0x80
 80059e0:	d016      	beq.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1a:	2b80      	cmp	r3, #128	@ 0x80
 8005a1c:	d1c3      	bne.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a34:	e034      	b.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f89b 	bl	8005b72 <I2C_IsAcknowledgeFailed>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e034      	b.n	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d028      	beq.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fe fdbf 	bl	80045d0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11d      	bne.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d016      	beq.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e007      	b.n	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d1c3      	bne.n	8005a36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ac4:	e049      	b.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d119      	bne.n	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0210 	mvn.w	r2, #16
 8005adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e030      	b.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b08:	f7fe fd62 	bl	80045d0 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11d      	bne.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d016      	beq.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e007      	b.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b64:	2b40      	cmp	r3, #64	@ 0x40
 8005b66:	d1ae      	bne.n	8005ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b88:	d11b      	bne.n	8005bc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	f043 0204 	orr.w	r2, r3, #4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d129      	bne.n	8005c3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2224      	movs	r2, #36	@ 0x24
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0210 	bic.w	r2, r2, #16
 8005c0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e000      	b.n	8005c3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d12a      	bne.n	8005cb8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	@ 0x24
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c82:	89fb      	ldrh	r3, [r7, #14]
 8005c84:	f023 030f 	bic.w	r3, r3, #15
 8005c88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	89fb      	ldrh	r3, [r7, #14]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	89fa      	ldrh	r2, [r7, #14]
 8005c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e000      	b.n	8005cba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005cb8:	2302      	movs	r3, #2
  }
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	4a1f      	ldr	r2, [pc, #124]	@ (8005d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cee:	4b1b      	ldr	r3, [pc, #108]	@ (8005d5c <HAL_PWREx_EnableOverDrive+0x94>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf4:	f7fe fc6c 	bl	80045d0 <HAL_GetTick>
 8005cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cfa:	e009      	b.n	8005d10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cfc:	f7fe fc68 	bl	80045d0 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d0a:	d901      	bls.n	8005d10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e01f      	b.n	8005d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d10:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d1ee      	bne.n	8005cfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d1e:	4b11      	ldr	r3, [pc, #68]	@ (8005d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d24:	f7fe fc54 	bl	80045d0 <HAL_GetTick>
 8005d28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d2a:	e009      	b.n	8005d40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d2c:	f7fe fc50 	bl	80045d0 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d3a:	d901      	bls.n	8005d40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e007      	b.n	8005d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d4c:	d1ee      	bne.n	8005d2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	420e0040 	.word	0x420e0040
 8005d60:	40007000 	.word	0x40007000
 8005d64:	420e0044 	.word	0x420e0044

08005d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e267      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d075      	beq.n	8005e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d86:	4b88      	ldr	r3, [pc, #544]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00c      	beq.n	8005dac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d92:	4b85      	ldr	r3, [pc, #532]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d112      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9e:	4b82      	ldr	r3, [pc, #520]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05b      	beq.n	8005e70 <HAL_RCC_OscConfig+0x108>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d157      	bne.n	8005e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e242      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCC_OscConfig+0x74>
 8005dce:	4b76      	ldr	r3, [pc, #472]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a75      	ldr	r2, [pc, #468]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e01d      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x98>
 8005de6:	4b70      	ldr	r3, [pc, #448]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6f      	ldr	r2, [pc, #444]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005e00:	4b69      	ldr	r3, [pc, #420]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a68      	ldr	r2, [pc, #416]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b66      	ldr	r3, [pc, #408]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a65      	ldr	r2, [pc, #404]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fe fbd6 	bl	80045d0 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fe fbd2 	bl	80045d0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	@ 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e207      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0xc0>
 8005e46:	e014      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fe fbc2 	bl	80045d0 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fe fbbe 	bl	80045d0 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	@ 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1f3      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e62:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0xe8>
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8a:	4b47      	ldr	r3, [pc, #284]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d11c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e96:	4b44      	ldr	r3, [pc, #272]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d116      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	4b41      	ldr	r3, [pc, #260]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e1c7      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4937      	ldr	r1, [pc, #220]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	e03a      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed8:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_RCC_OscConfig+0x244>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ede:	f7fe fb77 	bl	80045d0 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee6:	f7fe fb73 	bl	80045d0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e1a8      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f04:	4b28      	ldr	r3, [pc, #160]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4925      	ldr	r1, [pc, #148]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
 8005f18:	e015      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <HAL_RCC_OscConfig+0x244>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f20:	f7fe fb56 	bl	80045d0 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f28:	f7fe fb52 	bl	80045d0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e187      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d036      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5a:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fe fb36 	bl	80045d0 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f68:	f7fe fb32 	bl	80045d0 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e167      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x200>
 8005f86:	e01b      	b.n	8005fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8e:	f7fe fb1f 	bl	80045d0 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f94:	e00e      	b.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f96:	f7fe fb1b 	bl	80045d0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d907      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e150      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	42470000 	.word	0x42470000
 8005fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb4:	4b88      	ldr	r3, [pc, #544]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ea      	bne.n	8005f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8097 	beq.w	80060fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd2:	4b81      	ldr	r3, [pc, #516]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fee:	4b7a      	ldr	r3, [pc, #488]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffe:	4b77      	ldr	r3, [pc, #476]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d118      	bne.n	800603c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600a:	4b74      	ldr	r3, [pc, #464]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a73      	ldr	r2, [pc, #460]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006016:	f7fe fadb 	bl	80045d0 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fe fad7 	bl	80045d0 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e10c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006030:	4b6a      	ldr	r3, [pc, #424]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <HAL_RCC_OscConfig+0x2ea>
 8006044:	4b64      	ldr	r3, [pc, #400]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006048:	4a63      	ldr	r2, [pc, #396]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006050:	e01c      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b05      	cmp	r3, #5
 8006058:	d10c      	bne.n	8006074 <HAL_RCC_OscConfig+0x30c>
 800605a:	4b5f      	ldr	r3, [pc, #380]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605e:	4a5e      	ldr	r2, [pc, #376]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 0304 	orr.w	r3, r3, #4
 8006064:	6713      	str	r3, [r2, #112]	@ 0x70
 8006066:	4b5c      	ldr	r3, [pc, #368]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	4a5b      	ldr	r2, [pc, #364]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6713      	str	r3, [r2, #112]	@ 0x70
 8006072:	e00b      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006074:	4b58      	ldr	r3, [pc, #352]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006078:	4a57      	ldr	r2, [pc, #348]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006080:	4b55      	ldr	r3, [pc, #340]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006084:	4a54      	ldr	r2, [pc, #336]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fe fa9c 	bl	80045d0 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fe fa98 	bl	80045d0 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0cb      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	4b49      	ldr	r3, [pc, #292]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0ee      	beq.n	800609c <HAL_RCC_OscConfig+0x334>
 80060be:	e014      	b.n	80060ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fe fa86 	bl	80045d0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fe fa82 	bl	80045d0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e0b5      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060de:	4b3e      	ldr	r3, [pc, #248]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ee      	bne.n	80060c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f0:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	4a38      	ldr	r2, [pc, #224]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a1 	beq.w	8006248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b08      	cmp	r3, #8
 8006110:	d05c      	beq.n	80061cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d141      	bne.n	800619e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b31      	ldr	r3, [pc, #196]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fe fa56 	bl	80045d0 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fe fa52 	bl	80045d0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e087      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	3b01      	subs	r3, #1
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	491b      	ldr	r1, [pc, #108]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006170:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006176:	f7fe fa2b 	bl	80045d0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617e:	f7fe fa27 	bl	80045d0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e05c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006190:	4b11      	ldr	r3, [pc, #68]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x416>
 800619c:	e054      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b10      	ldr	r3, [pc, #64]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fe fa14 	bl	80045d0 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fe fa10 	bl	80045d0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e045      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x444>
 80061ca:	e03d      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e038      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40007000 	.word	0x40007000
 80061e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x4ec>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d028      	beq.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d121      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d11a      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800621a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800621c:	4293      	cmp	r3, r2
 800621e:	d111      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d107      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800

08006258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0cc      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b68      	ldr	r3, [pc, #416]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d90c      	bls.n	8006294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b65      	ldr	r3, [pc, #404]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b63      	ldr	r3, [pc, #396]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0b8      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d020      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062ac:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a58      	ldr	r2, [pc, #352]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c4:	4b53      	ldr	r3, [pc, #332]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a52      	ldr	r2, [pc, #328]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d0:	4b50      	ldr	r3, [pc, #320]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	494d      	ldr	r1, [pc, #308]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d044      	beq.n	8006378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d107      	bne.n	8006306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	4b47      	ldr	r3, [pc, #284]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e07f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d003      	beq.n	8006316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006312:	2b03      	cmp	r3, #3
 8006314:	d107      	bne.n	8006326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006316:	4b3f      	ldr	r3, [pc, #252]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e06f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006326:	4b3b      	ldr	r3, [pc, #236]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e067      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006336:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4934      	ldr	r1, [pc, #208]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006348:	f7fe f942 	bl	80045d0 <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006350:	f7fe f93e 	bl	80045d0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e04f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006378:	4b25      	ldr	r3, [pc, #148]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d20c      	bcs.n	80063a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e032      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ac:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4916      	ldr	r1, [pc, #88]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ca:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	490e      	ldr	r1, [pc, #56]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063de:	f000 f821 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	490a      	ldr	r1, [pc, #40]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	5ccb      	ldrb	r3, [r1, r3]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a09      	ldr	r2, [pc, #36]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <HAL_RCC_ClockConfig+0x1c8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe f8a2 	bl	8004548 <HAL_InitTick>

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40023c00 	.word	0x40023c00
 8006414:	40023800 	.word	0x40023800
 8006418:	08009d78 	.word	0x08009d78
 800641c:	20000430 	.word	0x20000430
 8006420:	20000434 	.word	0x20000434

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b090      	sub	sp, #64	@ 0x40
 800642a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800643c:	4b59      	ldr	r3, [pc, #356]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b08      	cmp	r3, #8
 8006446:	d00d      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x40>
 8006448:	2b08      	cmp	r3, #8
 800644a:	f200 80a1 	bhi.w	8006590 <HAL_RCC_GetSysClockFreq+0x16c>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
 8006452:	2b04      	cmp	r3, #4
 8006454:	d003      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x3a>
 8006456:	e09b      	b.n	8006590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006458:	4b53      	ldr	r3, [pc, #332]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800645a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800645c:	e09b      	b.n	8006596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645e:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006460:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006462:	e098      	b.n	8006596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006464:	4b4f      	ldr	r3, [pc, #316]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800646e:	4b4d      	ldr	r3, [pc, #308]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d028      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647a:	4b4a      	ldr	r3, [pc, #296]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	2200      	movs	r2, #0
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	627a      	str	r2, [r7, #36]	@ 0x24
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800648c:	2100      	movs	r1, #0
 800648e:	4b47      	ldr	r3, [pc, #284]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006490:	fb03 f201 	mul.w	r2, r3, r1
 8006494:	2300      	movs	r3, #0
 8006496:	fb00 f303 	mul.w	r3, r0, r3
 800649a:	4413      	add	r3, r2
 800649c:	4a43      	ldr	r2, [pc, #268]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x188>)
 800649e:	fba0 1202 	umull	r1, r2, r0, r2
 80064a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a4:	460a      	mov	r2, r1
 80064a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064aa:	4413      	add	r3, r2
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b0:	2200      	movs	r2, #0
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064be:	f7fa fcd9 	bl	8000e74 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4613      	mov	r3, r2
 80064c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ca:	e053      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064cc:	4b35      	ldr	r3, [pc, #212]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	099b      	lsrs	r3, r3, #6
 80064d2:	2200      	movs	r2, #0
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	617a      	str	r2, [r7, #20]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064de:	f04f 0b00 	mov.w	fp, #0
 80064e2:	4652      	mov	r2, sl
 80064e4:	465b      	mov	r3, fp
 80064e6:	f04f 0000 	mov.w	r0, #0
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	0159      	lsls	r1, r3, #5
 80064f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f4:	0150      	lsls	r0, r2, #5
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	ebb2 080a 	subs.w	r8, r2, sl
 80064fe:	eb63 090b 	sbc.w	r9, r3, fp
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800650e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006516:	ebb2 0408 	subs.w	r4, r2, r8
 800651a:	eb63 0509 	sbc.w	r5, r3, r9
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	00eb      	lsls	r3, r5, #3
 8006528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652c:	00e2      	lsls	r2, r4, #3
 800652e:	4614      	mov	r4, r2
 8006530:	461d      	mov	r5, r3
 8006532:	eb14 030a 	adds.w	r3, r4, sl
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	eb45 030b 	adc.w	r3, r5, fp
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800654a:	4629      	mov	r1, r5
 800654c:	028b      	lsls	r3, r1, #10
 800654e:	4621      	mov	r1, r4
 8006550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006554:	4621      	mov	r1, r4
 8006556:	028a      	lsls	r2, r1, #10
 8006558:	4610      	mov	r0, r2
 800655a:	4619      	mov	r1, r3
 800655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655e:	2200      	movs	r2, #0
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	60fa      	str	r2, [r7, #12]
 8006564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006568:	f7fa fc84 	bl	8000e74 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4613      	mov	r3, r2
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006574:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	3301      	adds	r3, #1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006584:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800658e:	e002      	b.n	8006596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006598:	4618      	mov	r0, r3
 800659a:	3740      	adds	r7, #64	@ 0x40
 800659c:	46bd      	mov	sp, r7
 800659e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a2:	bf00      	nop
 80065a4:	40023800 	.word	0x40023800
 80065a8:	00f42400 	.word	0x00f42400
 80065ac:	017d7840 	.word	0x017d7840

080065b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b4:	4b03      	ldr	r3, [pc, #12]	@ (80065c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b6:	681b      	ldr	r3, [r3, #0]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000430 	.word	0x20000430

080065c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065cc:	f7ff fff0 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	0a9b      	lsrs	r3, r3, #10
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4903      	ldr	r1, [pc, #12]	@ (80065ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40023800 	.word	0x40023800
 80065ec:	08009d88 	.word	0x08009d88

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e07b      	b.n	80066fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006612:	d009      	beq.n	8006628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
 800661a:	e005      	b.n	8006628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fd fd9c 	bl	8004180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800665e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	ea42 0103 	orr.w	r1, r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f003 0104 	and.w	r1, r3, #4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ce:	f003 0210 	and.w	r2, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b088      	sub	sp, #32
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006712:	f7fd ff5d 	bl	80045d0 <HAL_GetTick>
 8006716:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d001      	beq.n	800672c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
 800672a:	e12a      	b.n	8006982 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Transmit+0x36>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e122      	b.n	8006982 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_SPI_Transmit+0x48>
 8006746:	2302      	movs	r3, #2
 8006748:	e11b      	b.n	8006982 <HAL_SPI_Transmit+0x280>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2203      	movs	r2, #3
 8006756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006798:	d10f      	bne.n	80067ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	d007      	beq.n	80067d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067e0:	d152      	bne.n	8006888 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Transmit+0xee>
 80067ea:	8b7b      	ldrh	r3, [r7, #26]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d145      	bne.n	800687c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006814:	e032      	b.n	800687c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b02      	cmp	r3, #2
 8006822:	d112      	bne.n	800684a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006828:	881a      	ldrh	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006848:	e018      	b.n	800687c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800684a:	f7fd fec1 	bl	80045d0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d803      	bhi.n	8006862 <HAL_SPI_Transmit+0x160>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d102      	bne.n	8006868 <HAL_SPI_Transmit+0x166>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e082      	b.n	8006982 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1c7      	bne.n	8006816 <HAL_SPI_Transmit+0x114>
 8006886:	e053      	b.n	8006930 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_SPI_Transmit+0x194>
 8006890:	8b7b      	ldrh	r3, [r7, #26]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d147      	bne.n	8006926 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	7812      	ldrb	r2, [r2, #0]
 80068a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068bc:	e033      	b.n	8006926 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d113      	bne.n	80068f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068f2:	e018      	b.n	8006926 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068f4:	f7fd fe6c 	bl	80045d0 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d803      	bhi.n	800690c <HAL_SPI_Transmit+0x20a>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d102      	bne.n	8006912 <HAL_SPI_Transmit+0x210>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e02d      	b.n	8006982 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1c6      	bne.n	80068be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f8b1 	bl	8006a9c <SPI_EndRxTxTransaction>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006980:	2300      	movs	r3, #0
  }
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800699c:	f7fd fe18 	bl	80045d0 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	4413      	add	r3, r2
 80069aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ac:	f7fd fe10 	bl	80045d0 <HAL_GetTick>
 80069b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069b2:	4b39      	ldr	r3, [pc, #228]	@ (8006a98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	015b      	lsls	r3, r3, #5
 80069b8:	0d1b      	lsrs	r3, r3, #20
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	fb02 f303 	mul.w	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069c2:	e054      	b.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d050      	beq.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069cc:	f7fd fe00 	bl	80045d0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d902      	bls.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d13d      	bne.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069fa:	d111      	bne.n	8006a20 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a04:	d004      	beq.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0e:	d107      	bne.n	8006a20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a28:	d10f      	bne.n	8006a4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e017      	b.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4013      	ands	r3, r2
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d19b      	bne.n	80069c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000430 	.word	0x20000430

08006a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff ff6a 	bl	800698c <SPI_WaitFlagStateUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e032      	b.n	8006b34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ace:	4b1b      	ldr	r3, [pc, #108]	@ (8006b3c <SPI_EndRxTxTransaction+0xa0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b40 <SPI_EndRxTxTransaction+0xa4>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	0d5b      	lsrs	r3, r3, #21
 8006ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aec:	d112      	bne.n	8006b14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2180      	movs	r1, #128	@ 0x80
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff ff47 	bl	800698c <SPI_WaitFlagStateUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d016      	beq.n	8006b32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e00f      	b.n	8006b34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2a:	2b80      	cmp	r3, #128	@ 0x80
 8006b2c:	d0f2      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x78>
 8006b2e:	e000      	b.n	8006b32 <SPI_EndRxTxTransaction+0x96>
        break;
 8006b30:	bf00      	nop
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000430 	.word	0x20000430
 8006b40:	165e9f81 	.word	0x165e9f81

08006b44 <std>:
 8006b44:	2300      	movs	r3, #0
 8006b46:	b510      	push	{r4, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b52:	6083      	str	r3, [r0, #8]
 8006b54:	8181      	strh	r1, [r0, #12]
 8006b56:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b58:	81c2      	strh	r2, [r0, #14]
 8006b5a:	6183      	str	r3, [r0, #24]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	2208      	movs	r2, #8
 8006b60:	305c      	adds	r0, #92	@ 0x5c
 8006b62:	f000 f906 	bl	8006d72 <memset>
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <std+0x58>)
 8006b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <std+0x5c>)
 8006b6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <std+0x60>)
 8006b70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba8 <std+0x64>)
 8006b74:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b76:	4b0d      	ldr	r3, [pc, #52]	@ (8006bac <std+0x68>)
 8006b78:	6224      	str	r4, [r4, #32]
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d006      	beq.n	8006b8c <std+0x48>
 8006b7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b82:	4294      	cmp	r4, r2
 8006b84:	d002      	beq.n	8006b8c <std+0x48>
 8006b86:	33d0      	adds	r3, #208	@ 0xd0
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d105      	bne.n	8006b98 <std+0x54>
 8006b8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f000 b966 	b.w	8006e64 <__retarget_lock_init_recursive>
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08006ced 	.word	0x08006ced
 8006ba0:	08006d0f 	.word	0x08006d0f
 8006ba4:	08006d47 	.word	0x08006d47
 8006ba8:	08006d6b 	.word	0x08006d6b
 8006bac:	20000b20 	.word	0x20000b20

08006bb0 <stdio_exit_handler>:
 8006bb0:	4a02      	ldr	r2, [pc, #8]	@ (8006bbc <stdio_exit_handler+0xc>)
 8006bb2:	4903      	ldr	r1, [pc, #12]	@ (8006bc0 <stdio_exit_handler+0x10>)
 8006bb4:	4803      	ldr	r0, [pc, #12]	@ (8006bc4 <stdio_exit_handler+0x14>)
 8006bb6:	f000 b869 	b.w	8006c8c <_fwalk_sglue>
 8006bba:	bf00      	nop
 8006bbc:	2000043c 	.word	0x2000043c
 8006bc0:	08007705 	.word	0x08007705
 8006bc4:	2000044c 	.word	0x2000044c

08006bc8 <cleanup_stdio>:
 8006bc8:	6841      	ldr	r1, [r0, #4]
 8006bca:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <cleanup_stdio+0x34>)
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	d001      	beq.n	8006bd8 <cleanup_stdio+0x10>
 8006bd4:	f000 fd96 	bl	8007704 <_fflush_r>
 8006bd8:	68a1      	ldr	r1, [r4, #8]
 8006bda:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <cleanup_stdio+0x38>)
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d002      	beq.n	8006be6 <cleanup_stdio+0x1e>
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 fd8f 	bl	8007704 <_fflush_r>
 8006be6:	68e1      	ldr	r1, [r4, #12]
 8006be8:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <cleanup_stdio+0x3c>)
 8006bea:	4299      	cmp	r1, r3
 8006bec:	d004      	beq.n	8006bf8 <cleanup_stdio+0x30>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf4:	f000 bd86 	b.w	8007704 <_fflush_r>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000b20 	.word	0x20000b20
 8006c00:	20000b88 	.word	0x20000b88
 8006c04:	20000bf0 	.word	0x20000bf0

08006c08 <global_stdio_init.part.0>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <global_stdio_init.part.0+0x30>)
 8006c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8006c3c <global_stdio_init.part.0+0x34>)
 8006c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c40 <global_stdio_init.part.0+0x38>)
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	4620      	mov	r0, r4
 8006c14:	2200      	movs	r2, #0
 8006c16:	2104      	movs	r1, #4
 8006c18:	f7ff ff94 	bl	8006b44 <std>
 8006c1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c20:	2201      	movs	r2, #1
 8006c22:	2109      	movs	r1, #9
 8006c24:	f7ff ff8e 	bl	8006b44 <std>
 8006c28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c32:	2112      	movs	r1, #18
 8006c34:	f7ff bf86 	b.w	8006b44 <std>
 8006c38:	20000c58 	.word	0x20000c58
 8006c3c:	20000b20 	.word	0x20000b20
 8006c40:	08006bb1 	.word	0x08006bb1

08006c44 <__sfp_lock_acquire>:
 8006c44:	4801      	ldr	r0, [pc, #4]	@ (8006c4c <__sfp_lock_acquire+0x8>)
 8006c46:	f000 b90e 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	20000c61 	.word	0x20000c61

08006c50 <__sfp_lock_release>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__sfp_lock_release+0x8>)
 8006c52:	f000 b909 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006c56:	bf00      	nop
 8006c58:	20000c61 	.word	0x20000c61

08006c5c <__sinit>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	4604      	mov	r4, r0
 8006c60:	f7ff fff0 	bl	8006c44 <__sfp_lock_acquire>
 8006c64:	6a23      	ldr	r3, [r4, #32]
 8006c66:	b11b      	cbz	r3, 8006c70 <__sinit+0x14>
 8006c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6c:	f7ff bff0 	b.w	8006c50 <__sfp_lock_release>
 8006c70:	4b04      	ldr	r3, [pc, #16]	@ (8006c84 <__sinit+0x28>)
 8006c72:	6223      	str	r3, [r4, #32]
 8006c74:	4b04      	ldr	r3, [pc, #16]	@ (8006c88 <__sinit+0x2c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f5      	bne.n	8006c68 <__sinit+0xc>
 8006c7c:	f7ff ffc4 	bl	8006c08 <global_stdio_init.part.0>
 8006c80:	e7f2      	b.n	8006c68 <__sinit+0xc>
 8006c82:	bf00      	nop
 8006c84:	08006bc9 	.word	0x08006bc9
 8006c88:	20000c58 	.word	0x20000c58

08006c8c <_fwalk_sglue>:
 8006c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c90:	4607      	mov	r7, r0
 8006c92:	4688      	mov	r8, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	2600      	movs	r6, #0
 8006c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8006ca0:	d505      	bpl.n	8006cae <_fwalk_sglue+0x22>
 8006ca2:	6824      	ldr	r4, [r4, #0]
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d1f7      	bne.n	8006c98 <_fwalk_sglue+0xc>
 8006ca8:	4630      	mov	r0, r6
 8006caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d907      	bls.n	8006cc4 <_fwalk_sglue+0x38>
 8006cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	d003      	beq.n	8006cc4 <_fwalk_sglue+0x38>
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	47c0      	blx	r8
 8006cc2:	4306      	orrs	r6, r0
 8006cc4:	3568      	adds	r5, #104	@ 0x68
 8006cc6:	e7e9      	b.n	8006c9c <_fwalk_sglue+0x10>

08006cc8 <iprintf>:
 8006cc8:	b40f      	push	{r0, r1, r2, r3}
 8006cca:	b507      	push	{r0, r1, r2, lr}
 8006ccc:	4906      	ldr	r1, [pc, #24]	@ (8006ce8 <iprintf+0x20>)
 8006cce:	ab04      	add	r3, sp, #16
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd6:	6881      	ldr	r1, [r0, #8]
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	f000 f9e9 	bl	80070b0 <_vfiprintf_r>
 8006cde:	b003      	add	sp, #12
 8006ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce4:	b004      	add	sp, #16
 8006ce6:	4770      	bx	lr
 8006ce8:	20000448 	.word	0x20000448

08006cec <__sread>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	f000 f868 	bl	8006dc8 <_read_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	bfab      	itete	ge
 8006cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006d00:	181b      	addge	r3, r3, r0
 8006d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d06:	bfac      	ite	ge
 8006d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d0a:	81a3      	strhlt	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__swrite>:
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	461f      	mov	r7, r3
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	4605      	mov	r5, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	d505      	bpl.n	8006d2c <__swrite+0x1e>
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2302      	movs	r3, #2
 8006d26:	2200      	movs	r2, #0
 8006d28:	f000 f83c 	bl	8006da4 <_lseek_r>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	f000 b853 	b.w	8006dec <_write_r>

08006d46 <__sseek>:
 8006d46:	b510      	push	{r4, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 f829 	bl	8006da4 <_lseek_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	bf15      	itete	ne
 8006d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d62:	81a3      	strheq	r3, [r4, #12]
 8006d64:	bf18      	it	ne
 8006d66:	81a3      	strhne	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__sclose>:
 8006d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6e:	f000 b809 	b.w	8006d84 <_close_r>

08006d72 <memset>:
 8006d72:	4402      	add	r2, r0
 8006d74:	4603      	mov	r3, r0
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d100      	bne.n	8006d7c <memset+0xa>
 8006d7a:	4770      	bx	lr
 8006d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d80:	e7f9      	b.n	8006d76 <memset+0x4>
	...

08006d84 <_close_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	@ (8006da0 <_close_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fd fb12 	bl	80043b8 <_close>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_close_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_close_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20000c5c 	.word	0x20000c5c

08006da4 <_lseek_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	@ (8006dc4 <_lseek_r+0x20>)
 8006da8:	4604      	mov	r4, r0
 8006daa:	4608      	mov	r0, r1
 8006dac:	4611      	mov	r1, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f7fd fb27 	bl	8004406 <_lseek>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_lseek_r+0x1e>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_lseek_r+0x1e>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	20000c5c 	.word	0x20000c5c

08006dc8 <_read_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	@ (8006de8 <_read_r+0x20>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7fd fab5 	bl	8004346 <_read>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_read_r+0x1e>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_read_r+0x1e>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20000c5c 	.word	0x20000c5c

08006dec <_write_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	@ (8006e0c <_write_r+0x20>)
 8006df0:	4604      	mov	r4, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7fd fac0 	bl	8004380 <_write>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_write_r+0x1e>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_write_r+0x1e>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20000c5c 	.word	0x20000c5c

08006e10 <__errno>:
 8006e10:	4b01      	ldr	r3, [pc, #4]	@ (8006e18 <__errno+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000448 	.word	0x20000448

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e54 <__libc_init_array+0x38>)
 8006e20:	4c0d      	ldr	r4, [pc, #52]	@ (8006e58 <__libc_init_array+0x3c>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	2600      	movs	r6, #0
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e5c <__libc_init_array+0x40>)
 8006e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e60 <__libc_init_array+0x44>)
 8006e30:	f002 f89c 	bl	8008f6c <_init>
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	08009e00 	.word	0x08009e00
 8006e58:	08009e00 	.word	0x08009e00
 8006e5c:	08009e00 	.word	0x08009e00
 8006e60:	08009e04 	.word	0x08009e04

08006e64 <__retarget_lock_init_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_acquire_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_release_recursive>:
 8006e68:	4770      	bx	lr
	...

08006e6c <_free_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d041      	beq.n	8006ef8 <_free_r+0x8c>
 8006e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e78:	1f0c      	subs	r4, r1, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bfb8      	it	lt
 8006e7e:	18e4      	addlt	r4, r4, r3
 8006e80:	f000 f8e0 	bl	8007044 <__malloc_lock>
 8006e84:	4a1d      	ldr	r2, [pc, #116]	@ (8006efc <_free_r+0x90>)
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	b933      	cbnz	r3, 8006e98 <_free_r+0x2c>
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6014      	str	r4, [r2, #0]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e94:	f000 b8dc 	b.w	8007050 <__malloc_unlock>
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d908      	bls.n	8006eae <_free_r+0x42>
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	1821      	adds	r1, r4, r0
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf01      	itttt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	1809      	addeq	r1, r1, r0
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	e7ed      	b.n	8006e8a <_free_r+0x1e>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b10b      	cbz	r3, 8006eb8 <_free_r+0x4c>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d9fa      	bls.n	8006eae <_free_r+0x42>
 8006eb8:	6811      	ldr	r1, [r2, #0]
 8006eba:	1850      	adds	r0, r2, r1
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d10b      	bne.n	8006ed8 <_free_r+0x6c>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	1850      	adds	r0, r2, r1
 8006ec6:	4283      	cmp	r3, r0
 8006ec8:	6011      	str	r1, [r2, #0]
 8006eca:	d1e0      	bne.n	8006e8e <_free_r+0x22>
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	6053      	str	r3, [r2, #4]
 8006ed2:	4408      	add	r0, r1
 8006ed4:	6010      	str	r0, [r2, #0]
 8006ed6:	e7da      	b.n	8006e8e <_free_r+0x22>
 8006ed8:	d902      	bls.n	8006ee0 <_free_r+0x74>
 8006eda:	230c      	movs	r3, #12
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	e7d6      	b.n	8006e8e <_free_r+0x22>
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	1821      	adds	r1, r4, r0
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	bf04      	itt	eq
 8006ee8:	6819      	ldreq	r1, [r3, #0]
 8006eea:	685b      	ldreq	r3, [r3, #4]
 8006eec:	6063      	str	r3, [r4, #4]
 8006eee:	bf04      	itt	eq
 8006ef0:	1809      	addeq	r1, r1, r0
 8006ef2:	6021      	streq	r1, [r4, #0]
 8006ef4:	6054      	str	r4, [r2, #4]
 8006ef6:	e7ca      	b.n	8006e8e <_free_r+0x22>
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	bf00      	nop
 8006efc:	20000c68 	.word	0x20000c68

08006f00 <sbrk_aligned>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4e0f      	ldr	r6, [pc, #60]	@ (8006f40 <sbrk_aligned+0x40>)
 8006f04:	460c      	mov	r4, r1
 8006f06:	6831      	ldr	r1, [r6, #0]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	b911      	cbnz	r1, 8006f12 <sbrk_aligned+0x12>
 8006f0c:	f000 fcb6 	bl	800787c <_sbrk_r>
 8006f10:	6030      	str	r0, [r6, #0]
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 fcb1 	bl	800787c <_sbrk_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d103      	bne.n	8006f26 <sbrk_aligned+0x26>
 8006f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006f22:	4620      	mov	r0, r4
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	1cc4      	adds	r4, r0, #3
 8006f28:	f024 0403 	bic.w	r4, r4, #3
 8006f2c:	42a0      	cmp	r0, r4
 8006f2e:	d0f8      	beq.n	8006f22 <sbrk_aligned+0x22>
 8006f30:	1a21      	subs	r1, r4, r0
 8006f32:	4628      	mov	r0, r5
 8006f34:	f000 fca2 	bl	800787c <_sbrk_r>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d1f2      	bne.n	8006f22 <sbrk_aligned+0x22>
 8006f3c:	e7ef      	b.n	8006f1e <sbrk_aligned+0x1e>
 8006f3e:	bf00      	nop
 8006f40:	20000c64 	.word	0x20000c64

08006f44 <_malloc_r>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	1ccd      	adds	r5, r1, #3
 8006f4a:	f025 0503 	bic.w	r5, r5, #3
 8006f4e:	3508      	adds	r5, #8
 8006f50:	2d0c      	cmp	r5, #12
 8006f52:	bf38      	it	cc
 8006f54:	250c      	movcc	r5, #12
 8006f56:	2d00      	cmp	r5, #0
 8006f58:	4606      	mov	r6, r0
 8006f5a:	db01      	blt.n	8006f60 <_malloc_r+0x1c>
 8006f5c:	42a9      	cmp	r1, r5
 8006f5e:	d904      	bls.n	8006f6a <_malloc_r+0x26>
 8006f60:	230c      	movs	r3, #12
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	2000      	movs	r0, #0
 8006f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007040 <_malloc_r+0xfc>
 8006f6e:	f000 f869 	bl	8007044 <__malloc_lock>
 8006f72:	f8d8 3000 	ldr.w	r3, [r8]
 8006f76:	461c      	mov	r4, r3
 8006f78:	bb44      	cbnz	r4, 8006fcc <_malloc_r+0x88>
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f7ff ffbf 	bl	8006f00 <sbrk_aligned>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	4604      	mov	r4, r0
 8006f86:	d158      	bne.n	800703a <_malloc_r+0xf6>
 8006f88:	f8d8 4000 	ldr.w	r4, [r8]
 8006f8c:	4627      	mov	r7, r4
 8006f8e:	2f00      	cmp	r7, #0
 8006f90:	d143      	bne.n	800701a <_malloc_r+0xd6>
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d04b      	beq.n	800702e <_malloc_r+0xea>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	eb04 0903 	add.w	r9, r4, r3
 8006fa0:	f000 fc6c 	bl	800787c <_sbrk_r>
 8006fa4:	4581      	cmp	r9, r0
 8006fa6:	d142      	bne.n	800702e <_malloc_r+0xea>
 8006fa8:	6821      	ldr	r1, [r4, #0]
 8006faa:	1a6d      	subs	r5, r5, r1
 8006fac:	4629      	mov	r1, r5
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ffa6 	bl	8006f00 <sbrk_aligned>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d03a      	beq.n	800702e <_malloc_r+0xea>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	442b      	add	r3, r5
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	bb62      	cbnz	r2, 8007020 <_malloc_r+0xdc>
 8006fc6:	f8c8 7000 	str.w	r7, [r8]
 8006fca:	e00f      	b.n	8006fec <_malloc_r+0xa8>
 8006fcc:	6822      	ldr	r2, [r4, #0]
 8006fce:	1b52      	subs	r2, r2, r5
 8006fd0:	d420      	bmi.n	8007014 <_malloc_r+0xd0>
 8006fd2:	2a0b      	cmp	r2, #11
 8006fd4:	d917      	bls.n	8007006 <_malloc_r+0xc2>
 8006fd6:	1961      	adds	r1, r4, r5
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	6025      	str	r5, [r4, #0]
 8006fdc:	bf18      	it	ne
 8006fde:	6059      	strne	r1, [r3, #4]
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	bf08      	it	eq
 8006fe4:	f8c8 1000 	streq.w	r1, [r8]
 8006fe8:	5162      	str	r2, [r4, r5]
 8006fea:	604b      	str	r3, [r1, #4]
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 f82f 	bl	8007050 <__malloc_unlock>
 8006ff2:	f104 000b 	add.w	r0, r4, #11
 8006ff6:	1d23      	adds	r3, r4, #4
 8006ff8:	f020 0007 	bic.w	r0, r0, #7
 8006ffc:	1ac2      	subs	r2, r0, r3
 8006ffe:	bf1c      	itt	ne
 8007000:	1a1b      	subne	r3, r3, r0
 8007002:	50a3      	strne	r3, [r4, r2]
 8007004:	e7af      	b.n	8006f66 <_malloc_r+0x22>
 8007006:	6862      	ldr	r2, [r4, #4]
 8007008:	42a3      	cmp	r3, r4
 800700a:	bf0c      	ite	eq
 800700c:	f8c8 2000 	streq.w	r2, [r8]
 8007010:	605a      	strne	r2, [r3, #4]
 8007012:	e7eb      	b.n	8006fec <_malloc_r+0xa8>
 8007014:	4623      	mov	r3, r4
 8007016:	6864      	ldr	r4, [r4, #4]
 8007018:	e7ae      	b.n	8006f78 <_malloc_r+0x34>
 800701a:	463c      	mov	r4, r7
 800701c:	687f      	ldr	r7, [r7, #4]
 800701e:	e7b6      	b.n	8006f8e <_malloc_r+0x4a>
 8007020:	461a      	mov	r2, r3
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	42a3      	cmp	r3, r4
 8007026:	d1fb      	bne.n	8007020 <_malloc_r+0xdc>
 8007028:	2300      	movs	r3, #0
 800702a:	6053      	str	r3, [r2, #4]
 800702c:	e7de      	b.n	8006fec <_malloc_r+0xa8>
 800702e:	230c      	movs	r3, #12
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	4630      	mov	r0, r6
 8007034:	f000 f80c 	bl	8007050 <__malloc_unlock>
 8007038:	e794      	b.n	8006f64 <_malloc_r+0x20>
 800703a:	6005      	str	r5, [r0, #0]
 800703c:	e7d6      	b.n	8006fec <_malloc_r+0xa8>
 800703e:	bf00      	nop
 8007040:	20000c68 	.word	0x20000c68

08007044 <__malloc_lock>:
 8007044:	4801      	ldr	r0, [pc, #4]	@ (800704c <__malloc_lock+0x8>)
 8007046:	f7ff bf0e 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	20000c60 	.word	0x20000c60

08007050 <__malloc_unlock>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__malloc_unlock+0x8>)
 8007052:	f7ff bf09 	b.w	8006e68 <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	20000c60 	.word	0x20000c60

0800705c <__sfputc_r>:
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	3b01      	subs	r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	b410      	push	{r4}
 8007064:	6093      	str	r3, [r2, #8]
 8007066:	da08      	bge.n	800707a <__sfputc_r+0x1e>
 8007068:	6994      	ldr	r4, [r2, #24]
 800706a:	42a3      	cmp	r3, r4
 800706c:	db01      	blt.n	8007072 <__sfputc_r+0x16>
 800706e:	290a      	cmp	r1, #10
 8007070:	d103      	bne.n	800707a <__sfputc_r+0x1e>
 8007072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007076:	f000 bb6d 	b.w	8007754 <__swbuf_r>
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	1c58      	adds	r0, r3, #1
 800707e:	6010      	str	r0, [r2, #0]
 8007080:	7019      	strb	r1, [r3, #0]
 8007082:	4608      	mov	r0, r1
 8007084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007088:	4770      	bx	lr

0800708a <__sfputs_r>:
 800708a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708c:	4606      	mov	r6, r0
 800708e:	460f      	mov	r7, r1
 8007090:	4614      	mov	r4, r2
 8007092:	18d5      	adds	r5, r2, r3
 8007094:	42ac      	cmp	r4, r5
 8007096:	d101      	bne.n	800709c <__sfputs_r+0x12>
 8007098:	2000      	movs	r0, #0
 800709a:	e007      	b.n	80070ac <__sfputs_r+0x22>
 800709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a0:	463a      	mov	r2, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffda 	bl	800705c <__sfputc_r>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d1f3      	bne.n	8007094 <__sfputs_r+0xa>
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070b0 <_vfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	460d      	mov	r5, r1
 80070b6:	b09d      	sub	sp, #116	@ 0x74
 80070b8:	4614      	mov	r4, r2
 80070ba:	4698      	mov	r8, r3
 80070bc:	4606      	mov	r6, r0
 80070be:	b118      	cbz	r0, 80070c8 <_vfiprintf_r+0x18>
 80070c0:	6a03      	ldr	r3, [r0, #32]
 80070c2:	b90b      	cbnz	r3, 80070c8 <_vfiprintf_r+0x18>
 80070c4:	f7ff fdca 	bl	8006c5c <__sinit>
 80070c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	d405      	bmi.n	80070da <_vfiprintf_r+0x2a>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	059a      	lsls	r2, r3, #22
 80070d2:	d402      	bmi.n	80070da <_vfiprintf_r+0x2a>
 80070d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070d6:	f7ff fec6 	bl	8006e66 <__retarget_lock_acquire_recursive>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	071b      	lsls	r3, r3, #28
 80070de:	d501      	bpl.n	80070e4 <_vfiprintf_r+0x34>
 80070e0:	692b      	ldr	r3, [r5, #16]
 80070e2:	b99b      	cbnz	r3, 800710c <_vfiprintf_r+0x5c>
 80070e4:	4629      	mov	r1, r5
 80070e6:	4630      	mov	r0, r6
 80070e8:	f000 fb72 	bl	80077d0 <__swsetup_r>
 80070ec:	b170      	cbz	r0, 800710c <_vfiprintf_r+0x5c>
 80070ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070f0:	07dc      	lsls	r4, r3, #31
 80070f2:	d504      	bpl.n	80070fe <_vfiprintf_r+0x4e>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	b01d      	add	sp, #116	@ 0x74
 80070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	0598      	lsls	r0, r3, #22
 8007102:	d4f7      	bmi.n	80070f4 <_vfiprintf_r+0x44>
 8007104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007106:	f7ff feaf 	bl	8006e68 <__retarget_lock_release_recursive>
 800710a:	e7f3      	b.n	80070f4 <_vfiprintf_r+0x44>
 800710c:	2300      	movs	r3, #0
 800710e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007110:	2320      	movs	r3, #32
 8007112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007116:	f8cd 800c 	str.w	r8, [sp, #12]
 800711a:	2330      	movs	r3, #48	@ 0x30
 800711c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072cc <_vfiprintf_r+0x21c>
 8007120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007124:	f04f 0901 	mov.w	r9, #1
 8007128:	4623      	mov	r3, r4
 800712a:	469a      	mov	sl, r3
 800712c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007130:	b10a      	cbz	r2, 8007136 <_vfiprintf_r+0x86>
 8007132:	2a25      	cmp	r2, #37	@ 0x25
 8007134:	d1f9      	bne.n	800712a <_vfiprintf_r+0x7a>
 8007136:	ebba 0b04 	subs.w	fp, sl, r4
 800713a:	d00b      	beq.n	8007154 <_vfiprintf_r+0xa4>
 800713c:	465b      	mov	r3, fp
 800713e:	4622      	mov	r2, r4
 8007140:	4629      	mov	r1, r5
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ffa1 	bl	800708a <__sfputs_r>
 8007148:	3001      	adds	r0, #1
 800714a:	f000 80a7 	beq.w	800729c <_vfiprintf_r+0x1ec>
 800714e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007150:	445a      	add	r2, fp
 8007152:	9209      	str	r2, [sp, #36]	@ 0x24
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 809f 	beq.w	800729c <_vfiprintf_r+0x1ec>
 800715e:	2300      	movs	r3, #0
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007168:	f10a 0a01 	add.w	sl, sl, #1
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007174:	931a      	str	r3, [sp, #104]	@ 0x68
 8007176:	4654      	mov	r4, sl
 8007178:	2205      	movs	r2, #5
 800717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717e:	4853      	ldr	r0, [pc, #332]	@ (80072cc <_vfiprintf_r+0x21c>)
 8007180:	f7f9 f836 	bl	80001f0 <memchr>
 8007184:	9a04      	ldr	r2, [sp, #16]
 8007186:	b9d8      	cbnz	r0, 80071c0 <_vfiprintf_r+0x110>
 8007188:	06d1      	lsls	r1, r2, #27
 800718a:	bf44      	itt	mi
 800718c:	2320      	movmi	r3, #32
 800718e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007192:	0713      	lsls	r3, r2, #28
 8007194:	bf44      	itt	mi
 8007196:	232b      	movmi	r3, #43	@ 0x2b
 8007198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800719c:	f89a 3000 	ldrb.w	r3, [sl]
 80071a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071a2:	d015      	beq.n	80071d0 <_vfiprintf_r+0x120>
 80071a4:	9a07      	ldr	r2, [sp, #28]
 80071a6:	4654      	mov	r4, sl
 80071a8:	2000      	movs	r0, #0
 80071aa:	f04f 0c0a 	mov.w	ip, #10
 80071ae:	4621      	mov	r1, r4
 80071b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b4:	3b30      	subs	r3, #48	@ 0x30
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d94b      	bls.n	8007252 <_vfiprintf_r+0x1a2>
 80071ba:	b1b0      	cbz	r0, 80071ea <_vfiprintf_r+0x13a>
 80071bc:	9207      	str	r2, [sp, #28]
 80071be:	e014      	b.n	80071ea <_vfiprintf_r+0x13a>
 80071c0:	eba0 0308 	sub.w	r3, r0, r8
 80071c4:	fa09 f303 	lsl.w	r3, r9, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	46a2      	mov	sl, r4
 80071ce:	e7d2      	b.n	8007176 <_vfiprintf_r+0xc6>
 80071d0:	9b03      	ldr	r3, [sp, #12]
 80071d2:	1d19      	adds	r1, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9103      	str	r1, [sp, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfbb      	ittet	lt
 80071dc:	425b      	neglt	r3, r3
 80071de:	f042 0202 	orrlt.w	r2, r2, #2
 80071e2:	9307      	strge	r3, [sp, #28]
 80071e4:	9307      	strlt	r3, [sp, #28]
 80071e6:	bfb8      	it	lt
 80071e8:	9204      	strlt	r2, [sp, #16]
 80071ea:	7823      	ldrb	r3, [r4, #0]
 80071ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80071ee:	d10a      	bne.n	8007206 <_vfiprintf_r+0x156>
 80071f0:	7863      	ldrb	r3, [r4, #1]
 80071f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80071f4:	d132      	bne.n	800725c <_vfiprintf_r+0x1ac>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9203      	str	r2, [sp, #12]
 80071fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007202:	3402      	adds	r4, #2
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072dc <_vfiprintf_r+0x22c>
 800720a:	7821      	ldrb	r1, [r4, #0]
 800720c:	2203      	movs	r2, #3
 800720e:	4650      	mov	r0, sl
 8007210:	f7f8 ffee 	bl	80001f0 <memchr>
 8007214:	b138      	cbz	r0, 8007226 <_vfiprintf_r+0x176>
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	eba0 000a 	sub.w	r0, r0, sl
 800721c:	2240      	movs	r2, #64	@ 0x40
 800721e:	4082      	lsls	r2, r0
 8007220:	4313      	orrs	r3, r2
 8007222:	3401      	adds	r4, #1
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722a:	4829      	ldr	r0, [pc, #164]	@ (80072d0 <_vfiprintf_r+0x220>)
 800722c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007230:	2206      	movs	r2, #6
 8007232:	f7f8 ffdd 	bl	80001f0 <memchr>
 8007236:	2800      	cmp	r0, #0
 8007238:	d03f      	beq.n	80072ba <_vfiprintf_r+0x20a>
 800723a:	4b26      	ldr	r3, [pc, #152]	@ (80072d4 <_vfiprintf_r+0x224>)
 800723c:	bb1b      	cbnz	r3, 8007286 <_vfiprintf_r+0x1d6>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	3307      	adds	r3, #7
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	3308      	adds	r3, #8
 8007248:	9303      	str	r3, [sp, #12]
 800724a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724c:	443b      	add	r3, r7
 800724e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007250:	e76a      	b.n	8007128 <_vfiprintf_r+0x78>
 8007252:	fb0c 3202 	mla	r2, ip, r2, r3
 8007256:	460c      	mov	r4, r1
 8007258:	2001      	movs	r0, #1
 800725a:	e7a8      	b.n	80071ae <_vfiprintf_r+0xfe>
 800725c:	2300      	movs	r3, #0
 800725e:	3401      	adds	r4, #1
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	4619      	mov	r1, r3
 8007264:	f04f 0c0a 	mov.w	ip, #10
 8007268:	4620      	mov	r0, r4
 800726a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800726e:	3a30      	subs	r2, #48	@ 0x30
 8007270:	2a09      	cmp	r2, #9
 8007272:	d903      	bls.n	800727c <_vfiprintf_r+0x1cc>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0c6      	beq.n	8007206 <_vfiprintf_r+0x156>
 8007278:	9105      	str	r1, [sp, #20]
 800727a:	e7c4      	b.n	8007206 <_vfiprintf_r+0x156>
 800727c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007280:	4604      	mov	r4, r0
 8007282:	2301      	movs	r3, #1
 8007284:	e7f0      	b.n	8007268 <_vfiprintf_r+0x1b8>
 8007286:	ab03      	add	r3, sp, #12
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	462a      	mov	r2, r5
 800728c:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <_vfiprintf_r+0x228>)
 800728e:	a904      	add	r1, sp, #16
 8007290:	4630      	mov	r0, r6
 8007292:	f3af 8000 	nop.w
 8007296:	4607      	mov	r7, r0
 8007298:	1c78      	adds	r0, r7, #1
 800729a:	d1d6      	bne.n	800724a <_vfiprintf_r+0x19a>
 800729c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d405      	bmi.n	80072ae <_vfiprintf_r+0x1fe>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	059a      	lsls	r2, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_vfiprintf_r+0x1fe>
 80072a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072aa:	f7ff fddd 	bl	8006e68 <__retarget_lock_release_recursive>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	065b      	lsls	r3, r3, #25
 80072b2:	f53f af1f 	bmi.w	80070f4 <_vfiprintf_r+0x44>
 80072b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072b8:	e71e      	b.n	80070f8 <_vfiprintf_r+0x48>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4b05      	ldr	r3, [pc, #20]	@ (80072d8 <_vfiprintf_r+0x228>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 f879 	bl	80073bc <_printf_i>
 80072ca:	e7e4      	b.n	8007296 <_vfiprintf_r+0x1e6>
 80072cc:	08009d90 	.word	0x08009d90
 80072d0:	08009d9a 	.word	0x08009d9a
 80072d4:	00000000 	.word	0x00000000
 80072d8:	0800708b 	.word	0x0800708b
 80072dc:	08009d96 	.word	0x08009d96

080072e0 <_printf_common>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	4616      	mov	r6, r2
 80072e6:	4698      	mov	r8, r3
 80072e8:	688a      	ldr	r2, [r1, #8]
 80072ea:	690b      	ldr	r3, [r1, #16]
 80072ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	bfb8      	it	lt
 80072f4:	4613      	movlt	r3, r2
 80072f6:	6033      	str	r3, [r6, #0]
 80072f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072fc:	4607      	mov	r7, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b10a      	cbz	r2, 8007306 <_printf_common+0x26>
 8007302:	3301      	adds	r3, #1
 8007304:	6033      	str	r3, [r6, #0]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	0699      	lsls	r1, r3, #26
 800730a:	bf42      	ittt	mi
 800730c:	6833      	ldrmi	r3, [r6, #0]
 800730e:	3302      	addmi	r3, #2
 8007310:	6033      	strmi	r3, [r6, #0]
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	f015 0506 	ands.w	r5, r5, #6
 8007318:	d106      	bne.n	8007328 <_printf_common+0x48>
 800731a:	f104 0a19 	add.w	sl, r4, #25
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	6832      	ldr	r2, [r6, #0]
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	42ab      	cmp	r3, r5
 8007326:	dc26      	bgt.n	8007376 <_printf_common+0x96>
 8007328:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800732c:	6822      	ldr	r2, [r4, #0]
 800732e:	3b00      	subs	r3, #0
 8007330:	bf18      	it	ne
 8007332:	2301      	movne	r3, #1
 8007334:	0692      	lsls	r2, r2, #26
 8007336:	d42b      	bmi.n	8007390 <_printf_common+0xb0>
 8007338:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800733c:	4641      	mov	r1, r8
 800733e:	4638      	mov	r0, r7
 8007340:	47c8      	blx	r9
 8007342:	3001      	adds	r0, #1
 8007344:	d01e      	beq.n	8007384 <_printf_common+0xa4>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	f003 0306 	and.w	r3, r3, #6
 800734e:	2b04      	cmp	r3, #4
 8007350:	bf02      	ittt	eq
 8007352:	68e5      	ldreq	r5, [r4, #12]
 8007354:	6833      	ldreq	r3, [r6, #0]
 8007356:	1aed      	subeq	r5, r5, r3
 8007358:	68a3      	ldr	r3, [r4, #8]
 800735a:	bf0c      	ite	eq
 800735c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007360:	2500      	movne	r5, #0
 8007362:	4293      	cmp	r3, r2
 8007364:	bfc4      	itt	gt
 8007366:	1a9b      	subgt	r3, r3, r2
 8007368:	18ed      	addgt	r5, r5, r3
 800736a:	2600      	movs	r6, #0
 800736c:	341a      	adds	r4, #26
 800736e:	42b5      	cmp	r5, r6
 8007370:	d11a      	bne.n	80073a8 <_printf_common+0xc8>
 8007372:	2000      	movs	r0, #0
 8007374:	e008      	b.n	8007388 <_printf_common+0xa8>
 8007376:	2301      	movs	r3, #1
 8007378:	4652      	mov	r2, sl
 800737a:	4641      	mov	r1, r8
 800737c:	4638      	mov	r0, r7
 800737e:	47c8      	blx	r9
 8007380:	3001      	adds	r0, #1
 8007382:	d103      	bne.n	800738c <_printf_common+0xac>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738c:	3501      	adds	r5, #1
 800738e:	e7c6      	b.n	800731e <_printf_common+0x3e>
 8007390:	18e1      	adds	r1, r4, r3
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	2030      	movs	r0, #48	@ 0x30
 8007396:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800739a:	4422      	add	r2, r4
 800739c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073a4:	3302      	adds	r3, #2
 80073a6:	e7c7      	b.n	8007338 <_printf_common+0x58>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4622      	mov	r2, r4
 80073ac:	4641      	mov	r1, r8
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c8      	blx	r9
 80073b2:	3001      	adds	r0, #1
 80073b4:	d0e6      	beq.n	8007384 <_printf_common+0xa4>
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7d9      	b.n	800736e <_printf_common+0x8e>
	...

080073bc <_printf_i>:
 80073bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	7e0f      	ldrb	r7, [r1, #24]
 80073c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073c4:	2f78      	cmp	r7, #120	@ 0x78
 80073c6:	4691      	mov	r9, r2
 80073c8:	4680      	mov	r8, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	469a      	mov	sl, r3
 80073ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073d2:	d807      	bhi.n	80073e4 <_printf_i+0x28>
 80073d4:	2f62      	cmp	r7, #98	@ 0x62
 80073d6:	d80a      	bhi.n	80073ee <_printf_i+0x32>
 80073d8:	2f00      	cmp	r7, #0
 80073da:	f000 80d2 	beq.w	8007582 <_printf_i+0x1c6>
 80073de:	2f58      	cmp	r7, #88	@ 0x58
 80073e0:	f000 80b9 	beq.w	8007556 <_printf_i+0x19a>
 80073e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073ec:	e03a      	b.n	8007464 <_printf_i+0xa8>
 80073ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073f2:	2b15      	cmp	r3, #21
 80073f4:	d8f6      	bhi.n	80073e4 <_printf_i+0x28>
 80073f6:	a101      	add	r1, pc, #4	@ (adr r1, 80073fc <_printf_i+0x40>)
 80073f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007469 	.word	0x08007469
 8007404:	080073e5 	.word	0x080073e5
 8007408:	080073e5 	.word	0x080073e5
 800740c:	080073e5 	.word	0x080073e5
 8007410:	080073e5 	.word	0x080073e5
 8007414:	08007469 	.word	0x08007469
 8007418:	080073e5 	.word	0x080073e5
 800741c:	080073e5 	.word	0x080073e5
 8007420:	080073e5 	.word	0x080073e5
 8007424:	080073e5 	.word	0x080073e5
 8007428:	08007569 	.word	0x08007569
 800742c:	08007493 	.word	0x08007493
 8007430:	08007523 	.word	0x08007523
 8007434:	080073e5 	.word	0x080073e5
 8007438:	080073e5 	.word	0x080073e5
 800743c:	0800758b 	.word	0x0800758b
 8007440:	080073e5 	.word	0x080073e5
 8007444:	08007493 	.word	0x08007493
 8007448:	080073e5 	.word	0x080073e5
 800744c:	080073e5 	.word	0x080073e5
 8007450:	0800752b 	.word	0x0800752b
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6032      	str	r2, [r6, #0]
 800745c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007464:	2301      	movs	r3, #1
 8007466:	e09d      	b.n	80075a4 <_printf_i+0x1e8>
 8007468:	6833      	ldr	r3, [r6, #0]
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	6031      	str	r1, [r6, #0]
 8007470:	0606      	lsls	r6, r0, #24
 8007472:	d501      	bpl.n	8007478 <_printf_i+0xbc>
 8007474:	681d      	ldr	r5, [r3, #0]
 8007476:	e003      	b.n	8007480 <_printf_i+0xc4>
 8007478:	0645      	lsls	r5, r0, #25
 800747a:	d5fb      	bpl.n	8007474 <_printf_i+0xb8>
 800747c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007480:	2d00      	cmp	r5, #0
 8007482:	da03      	bge.n	800748c <_printf_i+0xd0>
 8007484:	232d      	movs	r3, #45	@ 0x2d
 8007486:	426d      	negs	r5, r5
 8007488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800748c:	4859      	ldr	r0, [pc, #356]	@ (80075f4 <_printf_i+0x238>)
 800748e:	230a      	movs	r3, #10
 8007490:	e011      	b.n	80074b6 <_printf_i+0xfa>
 8007492:	6821      	ldr	r1, [r4, #0]
 8007494:	6833      	ldr	r3, [r6, #0]
 8007496:	0608      	lsls	r0, r1, #24
 8007498:	f853 5b04 	ldr.w	r5, [r3], #4
 800749c:	d402      	bmi.n	80074a4 <_printf_i+0xe8>
 800749e:	0649      	lsls	r1, r1, #25
 80074a0:	bf48      	it	mi
 80074a2:	b2ad      	uxthmi	r5, r5
 80074a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80074a6:	4853      	ldr	r0, [pc, #332]	@ (80075f4 <_printf_i+0x238>)
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	bf14      	ite	ne
 80074ac:	230a      	movne	r3, #10
 80074ae:	2308      	moveq	r3, #8
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074b6:	6866      	ldr	r6, [r4, #4]
 80074b8:	60a6      	str	r6, [r4, #8]
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	bfa2      	ittt	ge
 80074be:	6821      	ldrge	r1, [r4, #0]
 80074c0:	f021 0104 	bicge.w	r1, r1, #4
 80074c4:	6021      	strge	r1, [r4, #0]
 80074c6:	b90d      	cbnz	r5, 80074cc <_printf_i+0x110>
 80074c8:	2e00      	cmp	r6, #0
 80074ca:	d04b      	beq.n	8007564 <_printf_i+0x1a8>
 80074cc:	4616      	mov	r6, r2
 80074ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80074d2:	fb03 5711 	mls	r7, r3, r1, r5
 80074d6:	5dc7      	ldrb	r7, [r0, r7]
 80074d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074dc:	462f      	mov	r7, r5
 80074de:	42bb      	cmp	r3, r7
 80074e0:	460d      	mov	r5, r1
 80074e2:	d9f4      	bls.n	80074ce <_printf_i+0x112>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <_printf_i+0x144>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07df      	lsls	r7, r3, #31
 80074ec:	d508      	bpl.n	8007500 <_printf_i+0x144>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	bfde      	ittt	le
 80074f6:	2330      	movle	r3, #48	@ 0x30
 80074f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007500:	1b92      	subs	r2, r2, r6
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	464b      	mov	r3, r9
 800750a:	aa03      	add	r2, sp, #12
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fee6 	bl	80072e0 <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	d14a      	bne.n	80075ae <_printf_i+0x1f2>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f043 0320 	orr.w	r3, r3, #32
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	4833      	ldr	r0, [pc, #204]	@ (80075f8 <_printf_i+0x23c>)
 800752c:	2778      	movs	r7, #120	@ 0x78
 800752e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	6831      	ldr	r1, [r6, #0]
 8007536:	061f      	lsls	r7, r3, #24
 8007538:	f851 5b04 	ldr.w	r5, [r1], #4
 800753c:	d402      	bmi.n	8007544 <_printf_i+0x188>
 800753e:	065f      	lsls	r7, r3, #25
 8007540:	bf48      	it	mi
 8007542:	b2ad      	uxthmi	r5, r5
 8007544:	6031      	str	r1, [r6, #0]
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	bf44      	itt	mi
 800754a:	f043 0320 	orrmi.w	r3, r3, #32
 800754e:	6023      	strmi	r3, [r4, #0]
 8007550:	b11d      	cbz	r5, 800755a <_printf_i+0x19e>
 8007552:	2310      	movs	r3, #16
 8007554:	e7ac      	b.n	80074b0 <_printf_i+0xf4>
 8007556:	4827      	ldr	r0, [pc, #156]	@ (80075f4 <_printf_i+0x238>)
 8007558:	e7e9      	b.n	800752e <_printf_i+0x172>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f023 0320 	bic.w	r3, r3, #32
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	e7f6      	b.n	8007552 <_printf_i+0x196>
 8007564:	4616      	mov	r6, r2
 8007566:	e7bd      	b.n	80074e4 <_printf_i+0x128>
 8007568:	6833      	ldr	r3, [r6, #0]
 800756a:	6825      	ldr	r5, [r4, #0]
 800756c:	6961      	ldr	r1, [r4, #20]
 800756e:	1d18      	adds	r0, r3, #4
 8007570:	6030      	str	r0, [r6, #0]
 8007572:	062e      	lsls	r6, r5, #24
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	d501      	bpl.n	800757c <_printf_i+0x1c0>
 8007578:	6019      	str	r1, [r3, #0]
 800757a:	e002      	b.n	8007582 <_printf_i+0x1c6>
 800757c:	0668      	lsls	r0, r5, #25
 800757e:	d5fb      	bpl.n	8007578 <_printf_i+0x1bc>
 8007580:	8019      	strh	r1, [r3, #0]
 8007582:	2300      	movs	r3, #0
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	4616      	mov	r6, r2
 8007588:	e7bc      	b.n	8007504 <_printf_i+0x148>
 800758a:	6833      	ldr	r3, [r6, #0]
 800758c:	1d1a      	adds	r2, r3, #4
 800758e:	6032      	str	r2, [r6, #0]
 8007590:	681e      	ldr	r6, [r3, #0]
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	2100      	movs	r1, #0
 8007596:	4630      	mov	r0, r6
 8007598:	f7f8 fe2a 	bl	80001f0 <memchr>
 800759c:	b108      	cbz	r0, 80075a2 <_printf_i+0x1e6>
 800759e:	1b80      	subs	r0, r0, r6
 80075a0:	6060      	str	r0, [r4, #4]
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	2300      	movs	r3, #0
 80075a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ac:	e7aa      	b.n	8007504 <_printf_i+0x148>
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	4632      	mov	r2, r6
 80075b2:	4649      	mov	r1, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	47d0      	blx	sl
 80075b8:	3001      	adds	r0, #1
 80075ba:	d0ad      	beq.n	8007518 <_printf_i+0x15c>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	079b      	lsls	r3, r3, #30
 80075c0:	d413      	bmi.n	80075ea <_printf_i+0x22e>
 80075c2:	68e0      	ldr	r0, [r4, #12]
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	4298      	cmp	r0, r3
 80075c8:	bfb8      	it	lt
 80075ca:	4618      	movlt	r0, r3
 80075cc:	e7a6      	b.n	800751c <_printf_i+0x160>
 80075ce:	2301      	movs	r3, #1
 80075d0:	4632      	mov	r2, r6
 80075d2:	4649      	mov	r1, r9
 80075d4:	4640      	mov	r0, r8
 80075d6:	47d0      	blx	sl
 80075d8:	3001      	adds	r0, #1
 80075da:	d09d      	beq.n	8007518 <_printf_i+0x15c>
 80075dc:	3501      	adds	r5, #1
 80075de:	68e3      	ldr	r3, [r4, #12]
 80075e0:	9903      	ldr	r1, [sp, #12]
 80075e2:	1a5b      	subs	r3, r3, r1
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	dcf2      	bgt.n	80075ce <_printf_i+0x212>
 80075e8:	e7eb      	b.n	80075c2 <_printf_i+0x206>
 80075ea:	2500      	movs	r5, #0
 80075ec:	f104 0619 	add.w	r6, r4, #25
 80075f0:	e7f5      	b.n	80075de <_printf_i+0x222>
 80075f2:	bf00      	nop
 80075f4:	08009da1 	.word	0x08009da1
 80075f8:	08009db2 	.word	0x08009db2

080075fc <__sflush_r>:
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	0716      	lsls	r6, r2, #28
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
 800760a:	d454      	bmi.n	80076b6 <__sflush_r+0xba>
 800760c:	684b      	ldr	r3, [r1, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc02      	bgt.n	8007618 <__sflush_r+0x1c>
 8007612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd48      	ble.n	80076aa <__sflush_r+0xae>
 8007618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800761a:	2e00      	cmp	r6, #0
 800761c:	d045      	beq.n	80076aa <__sflush_r+0xae>
 800761e:	2300      	movs	r3, #0
 8007620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007624:	682f      	ldr	r7, [r5, #0]
 8007626:	6a21      	ldr	r1, [r4, #32]
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	d030      	beq.n	800768e <__sflush_r+0x92>
 800762c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	0759      	lsls	r1, r3, #29
 8007632:	d505      	bpl.n	8007640 <__sflush_r+0x44>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800763a:	b10b      	cbz	r3, 8007640 <__sflush_r+0x44>
 800763c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	4628      	mov	r0, r5
 8007648:	47b0      	blx	r6
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	d106      	bne.n	800765e <__sflush_r+0x62>
 8007650:	6829      	ldr	r1, [r5, #0]
 8007652:	291d      	cmp	r1, #29
 8007654:	d82b      	bhi.n	80076ae <__sflush_r+0xb2>
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <__sflush_r+0x104>)
 8007658:	410a      	asrs	r2, r1
 800765a:	07d6      	lsls	r6, r2, #31
 800765c:	d427      	bmi.n	80076ae <__sflush_r+0xb2>
 800765e:	2200      	movs	r2, #0
 8007660:	6062      	str	r2, [r4, #4]
 8007662:	04d9      	lsls	r1, r3, #19
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	d504      	bpl.n	8007674 <__sflush_r+0x78>
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	d101      	bne.n	8007672 <__sflush_r+0x76>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b903      	cbnz	r3, 8007674 <__sflush_r+0x78>
 8007672:	6560      	str	r0, [r4, #84]	@ 0x54
 8007674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	b1b9      	cbz	r1, 80076aa <__sflush_r+0xae>
 800767a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800767e:	4299      	cmp	r1, r3
 8007680:	d002      	beq.n	8007688 <__sflush_r+0x8c>
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff fbf2 	bl	8006e6c <_free_r>
 8007688:	2300      	movs	r3, #0
 800768a:	6363      	str	r3, [r4, #52]	@ 0x34
 800768c:	e00d      	b.n	80076aa <__sflush_r+0xae>
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	4602      	mov	r2, r0
 8007696:	1c50      	adds	r0, r2, #1
 8007698:	d1c9      	bne.n	800762e <__sflush_r+0x32>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0c6      	beq.n	800762e <__sflush_r+0x32>
 80076a0:	2b1d      	cmp	r3, #29
 80076a2:	d001      	beq.n	80076a8 <__sflush_r+0xac>
 80076a4:	2b16      	cmp	r3, #22
 80076a6:	d11e      	bne.n	80076e6 <__sflush_r+0xea>
 80076a8:	602f      	str	r7, [r5, #0]
 80076aa:	2000      	movs	r0, #0
 80076ac:	e022      	b.n	80076f4 <__sflush_r+0xf8>
 80076ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	e01b      	b.n	80076ee <__sflush_r+0xf2>
 80076b6:	690f      	ldr	r7, [r1, #16]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	d0f6      	beq.n	80076aa <__sflush_r+0xae>
 80076bc:	0793      	lsls	r3, r2, #30
 80076be:	680e      	ldr	r6, [r1, #0]
 80076c0:	bf08      	it	eq
 80076c2:	694b      	ldreq	r3, [r1, #20]
 80076c4:	600f      	str	r7, [r1, #0]
 80076c6:	bf18      	it	ne
 80076c8:	2300      	movne	r3, #0
 80076ca:	eba6 0807 	sub.w	r8, r6, r7
 80076ce:	608b      	str	r3, [r1, #8]
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	dde9      	ble.n	80076aa <__sflush_r+0xae>
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076da:	4643      	mov	r3, r8
 80076dc:	463a      	mov	r2, r7
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dc08      	bgt.n	80076f8 <__sflush_r+0xfc>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f8:	4407      	add	r7, r0
 80076fa:	eba8 0800 	sub.w	r8, r8, r0
 80076fe:	e7e7      	b.n	80076d0 <__sflush_r+0xd4>
 8007700:	dfbffffe 	.word	0xdfbffffe

08007704 <_fflush_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b913      	cbnz	r3, 8007714 <_fflush_r+0x10>
 800770e:	2500      	movs	r5, #0
 8007710:	4628      	mov	r0, r5
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	b118      	cbz	r0, 800771e <_fflush_r+0x1a>
 8007716:	6a03      	ldr	r3, [r0, #32]
 8007718:	b90b      	cbnz	r3, 800771e <_fflush_r+0x1a>
 800771a:	f7ff fa9f 	bl	8006c5c <__sinit>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f3      	beq.n	800770e <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x32>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x32>
 8007730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007732:	f7ff fb98 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5f 	bl	80075fc <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e4      	bmi.n	8007710 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4e1      	bmi.n	8007710 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774e:	f7ff fb8b 	bl	8006e68 <__retarget_lock_release_recursive>
 8007752:	e7dd      	b.n	8007710 <_fflush_r+0xc>

08007754 <__swbuf_r>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	460e      	mov	r6, r1
 8007758:	4614      	mov	r4, r2
 800775a:	4605      	mov	r5, r0
 800775c:	b118      	cbz	r0, 8007766 <__swbuf_r+0x12>
 800775e:	6a03      	ldr	r3, [r0, #32]
 8007760:	b90b      	cbnz	r3, 8007766 <__swbuf_r+0x12>
 8007762:	f7ff fa7b 	bl	8006c5c <__sinit>
 8007766:	69a3      	ldr	r3, [r4, #24]
 8007768:	60a3      	str	r3, [r4, #8]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	071a      	lsls	r2, r3, #28
 800776e:	d501      	bpl.n	8007774 <__swbuf_r+0x20>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	b943      	cbnz	r3, 8007786 <__swbuf_r+0x32>
 8007774:	4621      	mov	r1, r4
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f82a 	bl	80077d0 <__swsetup_r>
 800777c:	b118      	cbz	r0, 8007786 <__swbuf_r+0x32>
 800777e:	f04f 37ff 	mov.w	r7, #4294967295
 8007782:	4638      	mov	r0, r7
 8007784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	1a98      	subs	r0, r3, r2
 800778c:	6963      	ldr	r3, [r4, #20]
 800778e:	b2f6      	uxtb	r6, r6
 8007790:	4283      	cmp	r3, r0
 8007792:	4637      	mov	r7, r6
 8007794:	dc05      	bgt.n	80077a2 <__swbuf_r+0x4e>
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f7ff ffb3 	bl	8007704 <_fflush_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d1ed      	bne.n	800777e <__swbuf_r+0x2a>
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	701e      	strb	r6, [r3, #0]
 80077b0:	6962      	ldr	r2, [r4, #20]
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d004      	beq.n	80077c2 <__swbuf_r+0x6e>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d5e1      	bpl.n	8007782 <__swbuf_r+0x2e>
 80077be:	2e0a      	cmp	r6, #10
 80077c0:	d1df      	bne.n	8007782 <__swbuf_r+0x2e>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7ff ff9d 	bl	8007704 <_fflush_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0d9      	beq.n	8007782 <__swbuf_r+0x2e>
 80077ce:	e7d6      	b.n	800777e <__swbuf_r+0x2a>

080077d0 <__swsetup_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4b29      	ldr	r3, [pc, #164]	@ (8007878 <__swsetup_r+0xa8>)
 80077d4:	4605      	mov	r5, r0
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	460c      	mov	r4, r1
 80077da:	b118      	cbz	r0, 80077e4 <__swsetup_r+0x14>
 80077dc:	6a03      	ldr	r3, [r0, #32]
 80077de:	b90b      	cbnz	r3, 80077e4 <__swsetup_r+0x14>
 80077e0:	f7ff fa3c 	bl	8006c5c <__sinit>
 80077e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e8:	0719      	lsls	r1, r3, #28
 80077ea:	d422      	bmi.n	8007832 <__swsetup_r+0x62>
 80077ec:	06da      	lsls	r2, r3, #27
 80077ee:	d407      	bmi.n	8007800 <__swsetup_r+0x30>
 80077f0:	2209      	movs	r2, #9
 80077f2:	602a      	str	r2, [r5, #0]
 80077f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	e033      	b.n	8007868 <__swsetup_r+0x98>
 8007800:	0758      	lsls	r0, r3, #29
 8007802:	d512      	bpl.n	800782a <__swsetup_r+0x5a>
 8007804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007806:	b141      	cbz	r1, 800781a <__swsetup_r+0x4a>
 8007808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800780c:	4299      	cmp	r1, r3
 800780e:	d002      	beq.n	8007816 <__swsetup_r+0x46>
 8007810:	4628      	mov	r0, r5
 8007812:	f7ff fb2b 	bl	8006e6c <_free_r>
 8007816:	2300      	movs	r3, #0
 8007818:	6363      	str	r3, [r4, #52]	@ 0x34
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	2300      	movs	r3, #0
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f043 0308 	orr.w	r3, r3, #8
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	b94b      	cbnz	r3, 800784a <__swsetup_r+0x7a>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800783c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007840:	d003      	beq.n	800784a <__swsetup_r+0x7a>
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f84f 	bl	80078e8 <__smakebuf_r>
 800784a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784e:	f013 0201 	ands.w	r2, r3, #1
 8007852:	d00a      	beq.n	800786a <__swsetup_r+0x9a>
 8007854:	2200      	movs	r2, #0
 8007856:	60a2      	str	r2, [r4, #8]
 8007858:	6962      	ldr	r2, [r4, #20]
 800785a:	4252      	negs	r2, r2
 800785c:	61a2      	str	r2, [r4, #24]
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	b942      	cbnz	r2, 8007874 <__swsetup_r+0xa4>
 8007862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007866:	d1c5      	bne.n	80077f4 <__swsetup_r+0x24>
 8007868:	bd38      	pop	{r3, r4, r5, pc}
 800786a:	0799      	lsls	r1, r3, #30
 800786c:	bf58      	it	pl
 800786e:	6962      	ldrpl	r2, [r4, #20]
 8007870:	60a2      	str	r2, [r4, #8]
 8007872:	e7f4      	b.n	800785e <__swsetup_r+0x8e>
 8007874:	2000      	movs	r0, #0
 8007876:	e7f7      	b.n	8007868 <__swsetup_r+0x98>
 8007878:	20000448 	.word	0x20000448

0800787c <_sbrk_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d06      	ldr	r5, [pc, #24]	@ (8007898 <_sbrk_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	f7fc fdca 	bl	8004420 <_sbrk>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_sbrk_r+0x1a>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_sbrk_r+0x1a>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000c5c 	.word	0x20000c5c

0800789c <__swhatbuf_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	460c      	mov	r4, r1
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	2900      	cmp	r1, #0
 80078a6:	b096      	sub	sp, #88	@ 0x58
 80078a8:	4615      	mov	r5, r2
 80078aa:	461e      	mov	r6, r3
 80078ac:	da0d      	bge.n	80078ca <__swhatbuf_r+0x2e>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078b4:	f04f 0100 	mov.w	r1, #0
 80078b8:	bf14      	ite	ne
 80078ba:	2340      	movne	r3, #64	@ 0x40
 80078bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078c0:	2000      	movs	r0, #0
 80078c2:	6031      	str	r1, [r6, #0]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	b016      	add	sp, #88	@ 0x58
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	466a      	mov	r2, sp
 80078cc:	f000 f848 	bl	8007960 <_fstat_r>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	dbec      	blt.n	80078ae <__swhatbuf_r+0x12>
 80078d4:	9901      	ldr	r1, [sp, #4]
 80078d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078de:	4259      	negs	r1, r3
 80078e0:	4159      	adcs	r1, r3
 80078e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078e6:	e7eb      	b.n	80078c0 <__swhatbuf_r+0x24>

080078e8 <__smakebuf_r>:
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ec:	079d      	lsls	r5, r3, #30
 80078ee:	4606      	mov	r6, r0
 80078f0:	460c      	mov	r4, r1
 80078f2:	d507      	bpl.n	8007904 <__smakebuf_r+0x1c>
 80078f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	6123      	str	r3, [r4, #16]
 80078fc:	2301      	movs	r3, #1
 80078fe:	6163      	str	r3, [r4, #20]
 8007900:	b003      	add	sp, #12
 8007902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007904:	ab01      	add	r3, sp, #4
 8007906:	466a      	mov	r2, sp
 8007908:	f7ff ffc8 	bl	800789c <__swhatbuf_r>
 800790c:	9f00      	ldr	r7, [sp, #0]
 800790e:	4605      	mov	r5, r0
 8007910:	4639      	mov	r1, r7
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff fb16 	bl	8006f44 <_malloc_r>
 8007918:	b948      	cbnz	r0, 800792e <__smakebuf_r+0x46>
 800791a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791e:	059a      	lsls	r2, r3, #22
 8007920:	d4ee      	bmi.n	8007900 <__smakebuf_r+0x18>
 8007922:	f023 0303 	bic.w	r3, r3, #3
 8007926:	f043 0302 	orr.w	r3, r3, #2
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	e7e2      	b.n	80078f4 <__smakebuf_r+0xc>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	6020      	str	r0, [r4, #0]
 8007932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	9b01      	ldr	r3, [sp, #4]
 800793a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800793e:	b15b      	cbz	r3, 8007958 <__smakebuf_r+0x70>
 8007940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007944:	4630      	mov	r0, r6
 8007946:	f000 f81d 	bl	8007984 <_isatty_r>
 800794a:	b128      	cbz	r0, 8007958 <__smakebuf_r+0x70>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	431d      	orrs	r5, r3
 800795c:	81a5      	strh	r5, [r4, #12]
 800795e:	e7cf      	b.n	8007900 <__smakebuf_r+0x18>

08007960 <_fstat_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	@ (8007980 <_fstat_r+0x20>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	f7fc fd2f 	bl	80043d0 <_fstat>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d102      	bne.n	800797c <_fstat_r+0x1c>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	b103      	cbz	r3, 800797c <_fstat_r+0x1c>
 800797a:	6023      	str	r3, [r4, #0]
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	20000c5c 	.word	0x20000c5c

08007984 <_isatty_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d06      	ldr	r5, [pc, #24]	@ (80079a0 <_isatty_r+0x1c>)
 8007988:	2300      	movs	r3, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fc fd2e 	bl	80043f0 <_isatty>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_isatty_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_isatty_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	20000c5c 	.word	0x20000c5c
 80079a4:	00000000 	.word	0x00000000

080079a8 <log10>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	ed2d 8b02 	vpush	{d8}
 80079ae:	ec55 4b10 	vmov	r4, r5, d0
 80079b2:	f000 f9b5 	bl	8007d20 <__ieee754_log10>
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	eeb0 8a40 	vmov.f32	s16, s0
 80079c2:	eef0 8a60 	vmov.f32	s17, s1
 80079c6:	f7f9 f8b9 	bl	8000b3c <__aeabi_dcmpun>
 80079ca:	b998      	cbnz	r0, 80079f4 <log10+0x4c>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f9 f894 	bl	8000b00 <__aeabi_dcmple>
 80079d8:	b160      	cbz	r0, 80079f4 <log10+0x4c>
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f9 f879 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e6:	b160      	cbz	r0, 8007a02 <log10+0x5a>
 80079e8:	f7ff fa12 	bl	8006e10 <__errno>
 80079ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8007a18 <log10+0x70>
 80079f0:	2322      	movs	r3, #34	@ 0x22
 80079f2:	6003      	str	r3, [r0, #0]
 80079f4:	eeb0 0a48 	vmov.f32	s0, s16
 80079f8:	eef0 0a68 	vmov.f32	s1, s17
 80079fc:	ecbd 8b02 	vpop	{d8}
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	f7ff fa05 	bl	8006e10 <__errno>
 8007a06:	ecbd 8b02 	vpop	{d8}
 8007a0a:	2321      	movs	r3, #33	@ 0x21
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a12:	4803      	ldr	r0, [pc, #12]	@ (8007a20 <log10+0x78>)
 8007a14:	f000 b884 	b.w	8007b20 <nan>
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	fff00000 	.word	0xfff00000
 8007a20:	08009d95 	.word	0x08009d95

08007a24 <pow>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	ed2d 8b02 	vpush	{d8}
 8007a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a2e:	eef0 8a60 	vmov.f32	s17, s1
 8007a32:	ec55 4b11 	vmov	r4, r5, d1
 8007a36:	f000 f9ff 	bl	8007e38 <__ieee754_pow>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	ec57 6b10 	vmov	r6, r7, d0
 8007a46:	f7f9 f879 	bl	8000b3c <__aeabi_dcmpun>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d13b      	bne.n	8007ac6 <pow+0xa2>
 8007a4e:	ec51 0b18 	vmov	r0, r1, d8
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	f7f9 f83f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a5a:	b1b8      	cbz	r0, 8007a8c <pow+0x68>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f9 f838 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d146      	bne.n	8007afa <pow+0xd6>
 8007a6c:	ec45 4b10 	vmov	d0, r4, r5
 8007a70:	f000 f848 	bl	8007b04 <finite>
 8007a74:	b338      	cbz	r0, 8007ac6 <pow+0xa2>
 8007a76:	2200      	movs	r2, #0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f9 f835 	bl	8000aec <__aeabi_dcmplt>
 8007a82:	b300      	cbz	r0, 8007ac6 <pow+0xa2>
 8007a84:	f7ff f9c4 	bl	8006e10 <__errno>
 8007a88:	2322      	movs	r3, #34	@ 0x22
 8007a8a:	e01b      	b.n	8007ac4 <pow+0xa0>
 8007a8c:	ec47 6b10 	vmov	d0, r6, r7
 8007a90:	f000 f838 	bl	8007b04 <finite>
 8007a94:	b9e0      	cbnz	r0, 8007ad0 <pow+0xac>
 8007a96:	eeb0 0a48 	vmov.f32	s0, s16
 8007a9a:	eef0 0a68 	vmov.f32	s1, s17
 8007a9e:	f000 f831 	bl	8007b04 <finite>
 8007aa2:	b1a8      	cbz	r0, 8007ad0 <pow+0xac>
 8007aa4:	ec45 4b10 	vmov	d0, r4, r5
 8007aa8:	f000 f82c 	bl	8007b04 <finite>
 8007aac:	b180      	cbz	r0, 8007ad0 <pow+0xac>
 8007aae:	4632      	mov	r2, r6
 8007ab0:	463b      	mov	r3, r7
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f9 f841 	bl	8000b3c <__aeabi_dcmpun>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0e2      	beq.n	8007a84 <pow+0x60>
 8007abe:	f7ff f9a7 	bl	8006e10 <__errno>
 8007ac2:	2321      	movs	r3, #33	@ 0x21
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	ecbd 8b02 	vpop	{d8}
 8007aca:	ec47 6b10 	vmov	d0, r6, r7
 8007ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	f7f8 fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d0f2      	beq.n	8007ac6 <pow+0xa2>
 8007ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ae4:	eef0 0a68 	vmov.f32	s1, s17
 8007ae8:	f000 f80c 	bl	8007b04 <finite>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d0ea      	beq.n	8007ac6 <pow+0xa2>
 8007af0:	ec45 4b10 	vmov	d0, r4, r5
 8007af4:	f000 f806 	bl	8007b04 <finite>
 8007af8:	e7c3      	b.n	8007a82 <pow+0x5e>
 8007afa:	4f01      	ldr	r7, [pc, #4]	@ (8007b00 <pow+0xdc>)
 8007afc:	2600      	movs	r6, #0
 8007afe:	e7e2      	b.n	8007ac6 <pow+0xa2>
 8007b00:	3ff00000 	.word	0x3ff00000

08007b04 <finite>:
 8007b04:	b082      	sub	sp, #8
 8007b06:	ed8d 0b00 	vstr	d0, [sp]
 8007b0a:	9801      	ldr	r0, [sp, #4]
 8007b0c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007b10:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007b14:	0fc0      	lsrs	r0, r0, #31
 8007b16:	b002      	add	sp, #8
 8007b18:	4770      	bx	lr
 8007b1a:	0000      	movs	r0, r0
 8007b1c:	0000      	movs	r0, r0
	...

08007b20 <nan>:
 8007b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b28 <nan+0x8>
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	7ff80000 	.word	0x7ff80000

08007b30 <ceil>:
 8007b30:	ec51 0b10 	vmov	r0, r1, d0
 8007b34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007b40:	2e13      	cmp	r6, #19
 8007b42:	460c      	mov	r4, r1
 8007b44:	4605      	mov	r5, r0
 8007b46:	4680      	mov	r8, r0
 8007b48:	dc2e      	bgt.n	8007ba8 <ceil+0x78>
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	da11      	bge.n	8007b72 <ceil+0x42>
 8007b4e:	a332      	add	r3, pc, #200	@ (adr r3, 8007c18 <ceil+0xe8>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fba2 	bl	800029c <__adddf3>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f7f8 ffe4 	bl	8000b28 <__aeabi_dcmpgt>
 8007b60:	b120      	cbz	r0, 8007b6c <ceil+0x3c>
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	db4f      	blt.n	8007c06 <ceil+0xd6>
 8007b66:	4325      	orrs	r5, r4
 8007b68:	d151      	bne.n	8007c0e <ceil+0xde>
 8007b6a:	462c      	mov	r4, r5
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4628      	mov	r0, r5
 8007b70:	e023      	b.n	8007bba <ceil+0x8a>
 8007b72:	4f2b      	ldr	r7, [pc, #172]	@ (8007c20 <ceil+0xf0>)
 8007b74:	4137      	asrs	r7, r6
 8007b76:	ea01 0307 	and.w	r3, r1, r7
 8007b7a:	4303      	orrs	r3, r0
 8007b7c:	d01d      	beq.n	8007bba <ceil+0x8a>
 8007b7e:	a326      	add	r3, pc, #152	@ (adr r3, 8007c18 <ceil+0xe8>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fb8a 	bl	800029c <__adddf3>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f7f8 ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d0eb      	beq.n	8007b6c <ceil+0x3c>
 8007b94:	2c00      	cmp	r4, #0
 8007b96:	bfc2      	ittt	gt
 8007b98:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8007b9c:	4133      	asrgt	r3, r6
 8007b9e:	18e4      	addgt	r4, r4, r3
 8007ba0:	ea24 0407 	bic.w	r4, r4, r7
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	e7e1      	b.n	8007b6c <ceil+0x3c>
 8007ba8:	2e33      	cmp	r6, #51	@ 0x33
 8007baa:	dd0a      	ble.n	8007bc2 <ceil+0x92>
 8007bac:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007bb0:	d103      	bne.n	8007bba <ceil+0x8a>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	f7f8 fb71 	bl	800029c <__adddf3>
 8007bba:	ec41 0b10 	vmov	d0, r0, r1
 8007bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8007bca:	40df      	lsrs	r7, r3
 8007bcc:	4238      	tst	r0, r7
 8007bce:	d0f4      	beq.n	8007bba <ceil+0x8a>
 8007bd0:	a311      	add	r3, pc, #68	@ (adr r3, 8007c18 <ceil+0xe8>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fb61 	bl	800029c <__adddf3>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f7f8 ffa3 	bl	8000b28 <__aeabi_dcmpgt>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d0c2      	beq.n	8007b6c <ceil+0x3c>
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	dd0a      	ble.n	8007c00 <ceil+0xd0>
 8007bea:	2e14      	cmp	r6, #20
 8007bec:	d101      	bne.n	8007bf2 <ceil+0xc2>
 8007bee:	3401      	adds	r4, #1
 8007bf0:	e006      	b.n	8007c00 <ceil+0xd0>
 8007bf2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	40b3      	lsls	r3, r6
 8007bfa:	441d      	add	r5, r3
 8007bfc:	45a8      	cmp	r8, r5
 8007bfe:	d8f6      	bhi.n	8007bee <ceil+0xbe>
 8007c00:	ea25 0507 	bic.w	r5, r5, r7
 8007c04:	e7b2      	b.n	8007b6c <ceil+0x3c>
 8007c06:	2500      	movs	r5, #0
 8007c08:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007c0c:	e7ae      	b.n	8007b6c <ceil+0x3c>
 8007c0e:	4c05      	ldr	r4, [pc, #20]	@ (8007c24 <ceil+0xf4>)
 8007c10:	2500      	movs	r5, #0
 8007c12:	e7ab      	b.n	8007b6c <ceil+0x3c>
 8007c14:	f3af 8000 	nop.w
 8007c18:	8800759c 	.word	0x8800759c
 8007c1c:	7e37e43c 	.word	0x7e37e43c
 8007c20:	000fffff 	.word	0x000fffff
 8007c24:	3ff00000 	.word	0x3ff00000

08007c28 <floor>:
 8007c28:	ec51 0b10 	vmov	r0, r1, d0
 8007c2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007c38:	2e13      	cmp	r6, #19
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	4680      	mov	r8, r0
 8007c40:	dc34      	bgt.n	8007cac <floor+0x84>
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	da17      	bge.n	8007c76 <floor+0x4e>
 8007c46:	a332      	add	r3, pc, #200	@ (adr r3, 8007d10 <floor+0xe8>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fb26 	bl	800029c <__adddf3>
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	f7f8 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8007c58:	b150      	cbz	r0, 8007c70 <floor+0x48>
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	da55      	bge.n	8007d0a <floor+0xe2>
 8007c5e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007c62:	432c      	orrs	r4, r5
 8007c64:	2500      	movs	r5, #0
 8007c66:	42ac      	cmp	r4, r5
 8007c68:	4c2b      	ldr	r4, [pc, #172]	@ (8007d18 <floor+0xf0>)
 8007c6a:	bf08      	it	eq
 8007c6c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007c70:	4621      	mov	r1, r4
 8007c72:	4628      	mov	r0, r5
 8007c74:	e023      	b.n	8007cbe <floor+0x96>
 8007c76:	4f29      	ldr	r7, [pc, #164]	@ (8007d1c <floor+0xf4>)
 8007c78:	4137      	asrs	r7, r6
 8007c7a:	ea01 0307 	and.w	r3, r1, r7
 8007c7e:	4303      	orrs	r3, r0
 8007c80:	d01d      	beq.n	8007cbe <floor+0x96>
 8007c82:	a323      	add	r3, pc, #140	@ (adr r3, 8007d10 <floor+0xe8>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fb08 	bl	800029c <__adddf3>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f7f8 ff4a 	bl	8000b28 <__aeabi_dcmpgt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d0eb      	beq.n	8007c70 <floor+0x48>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	bfbe      	ittt	lt
 8007c9c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007ca0:	4133      	asrlt	r3, r6
 8007ca2:	18e4      	addlt	r4, r4, r3
 8007ca4:	ea24 0407 	bic.w	r4, r4, r7
 8007ca8:	2500      	movs	r5, #0
 8007caa:	e7e1      	b.n	8007c70 <floor+0x48>
 8007cac:	2e33      	cmp	r6, #51	@ 0x33
 8007cae:	dd0a      	ble.n	8007cc6 <floor+0x9e>
 8007cb0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007cb4:	d103      	bne.n	8007cbe <floor+0x96>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	f7f8 faef 	bl	800029c <__adddf3>
 8007cbe:	ec41 0b10 	vmov	d0, r0, r1
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007cca:	f04f 37ff 	mov.w	r7, #4294967295
 8007cce:	40df      	lsrs	r7, r3
 8007cd0:	4207      	tst	r7, r0
 8007cd2:	d0f4      	beq.n	8007cbe <floor+0x96>
 8007cd4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d10 <floor+0xe8>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 fadf 	bl	800029c <__adddf3>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f7f8 ff21 	bl	8000b28 <__aeabi_dcmpgt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c2      	beq.n	8007c70 <floor+0x48>
 8007cea:	2c00      	cmp	r4, #0
 8007cec:	da0a      	bge.n	8007d04 <floor+0xdc>
 8007cee:	2e14      	cmp	r6, #20
 8007cf0:	d101      	bne.n	8007cf6 <floor+0xce>
 8007cf2:	3401      	adds	r4, #1
 8007cf4:	e006      	b.n	8007d04 <floor+0xdc>
 8007cf6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	40b3      	lsls	r3, r6
 8007cfe:	441d      	add	r5, r3
 8007d00:	4545      	cmp	r5, r8
 8007d02:	d3f6      	bcc.n	8007cf2 <floor+0xca>
 8007d04:	ea25 0507 	bic.w	r5, r5, r7
 8007d08:	e7b2      	b.n	8007c70 <floor+0x48>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	462c      	mov	r4, r5
 8007d0e:	e7af      	b.n	8007c70 <floor+0x48>
 8007d10:	8800759c 	.word	0x8800759c
 8007d14:	7e37e43c 	.word	0x7e37e43c
 8007d18:	bff00000 	.word	0xbff00000
 8007d1c:	000fffff 	.word	0x000fffff

08007d20 <__ieee754_log10>:
 8007d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d24:	ec55 4b10 	vmov	r4, r5, d0
 8007d28:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8007d2c:	ed2d 8b02 	vpush	{d8}
 8007d30:	462b      	mov	r3, r5
 8007d32:	da2e      	bge.n	8007d92 <__ieee754_log10+0x72>
 8007d34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007d38:	4322      	orrs	r2, r4
 8007d3a:	d10b      	bne.n	8007d54 <__ieee754_log10+0x34>
 8007d3c:	493a      	ldr	r1, [pc, #232]	@ (8007e28 <__ieee754_log10+0x108>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2300      	movs	r3, #0
 8007d42:	2000      	movs	r0, #0
 8007d44:	f7f8 fd8a 	bl	800085c <__aeabi_ddiv>
 8007d48:	ecbd 8b02 	vpop	{d8}
 8007d4c:	ec41 0b10 	vmov	d0, r0, r1
 8007d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	da07      	bge.n	8007d68 <__ieee754_log10+0x48>
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fa9b 	bl	8000298 <__aeabi_dsub>
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	e7ed      	b.n	8007d44 <__ieee754_log10+0x24>
 8007d68:	4b30      	ldr	r3, [pc, #192]	@ (8007e2c <__ieee754_log10+0x10c>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fc4a 	bl	8000608 <__aeabi_dmul>
 8007d74:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	492c      	ldr	r1, [pc, #176]	@ (8007e30 <__ieee754_log10+0x110>)
 8007d80:	428b      	cmp	r3, r1
 8007d82:	dd08      	ble.n	8007d96 <__ieee754_log10+0x76>
 8007d84:	4622      	mov	r2, r4
 8007d86:	462b      	mov	r3, r5
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fa86 	bl	800029c <__adddf3>
 8007d90:	e7da      	b.n	8007d48 <__ieee754_log10+0x28>
 8007d92:	2200      	movs	r2, #0
 8007d94:	e7f3      	b.n	8007d7e <__ieee754_log10+0x5e>
 8007d96:	1518      	asrs	r0, r3, #20
 8007d98:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8007d9c:	4410      	add	r0, r2
 8007d9e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8007da2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007da6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007daa:	f7f8 fbc3 	bl	8000534 <__aeabi_i2d>
 8007dae:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8007db2:	3303      	adds	r3, #3
 8007db4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8007db8:	a315      	add	r3, pc, #84	@ (adr r3, 8007e10 <__ieee754_log10+0xf0>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	ec45 4b18 	vmov	d8, r4, r5
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	f7f8 fc1f 	bl	8000608 <__aeabi_dmul>
 8007dca:	eeb0 0a48 	vmov.f32	s0, s16
 8007dce:	eef0 0a68 	vmov.f32	s1, s17
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	f000 ff13 	bl	8008c00 <__ieee754_log>
 8007dda:	a30f      	add	r3, pc, #60	@ (adr r3, 8007e18 <__ieee754_log10+0xf8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	ec51 0b10 	vmov	r0, r1, d0
 8007de4:	f7f8 fc10 	bl	8000608 <__aeabi_dmul>
 8007de8:	4622      	mov	r2, r4
 8007dea:	462b      	mov	r3, r5
 8007dec:	f7f8 fa56 	bl	800029c <__adddf3>
 8007df0:	a30b      	add	r3, pc, #44	@ (adr r3, 8007e20 <__ieee754_log10+0x100>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	f7f8 fc03 	bl	8000608 <__aeabi_dmul>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	e7bf      	b.n	8007d8c <__ieee754_log10+0x6c>
 8007e0c:	f3af 8000 	nop.w
 8007e10:	11f12b36 	.word	0x11f12b36
 8007e14:	3d59fef3 	.word	0x3d59fef3
 8007e18:	1526e50e 	.word	0x1526e50e
 8007e1c:	3fdbcb7b 	.word	0x3fdbcb7b
 8007e20:	509f6000 	.word	0x509f6000
 8007e24:	3fd34413 	.word	0x3fd34413
 8007e28:	c3500000 	.word	0xc3500000
 8007e2c:	43500000 	.word	0x43500000
 8007e30:	7fefffff 	.word	0x7fefffff
 8007e34:	00000000 	.word	0x00000000

08007e38 <__ieee754_pow>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	b091      	sub	sp, #68	@ 0x44
 8007e3e:	ed8d 1b00 	vstr	d1, [sp]
 8007e42:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007e46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007e4a:	ea5a 0001 	orrs.w	r0, sl, r1
 8007e4e:	ec57 6b10 	vmov	r6, r7, d0
 8007e52:	d113      	bne.n	8007e7c <__ieee754_pow+0x44>
 8007e54:	19b3      	adds	r3, r6, r6
 8007e56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007e5a:	4152      	adcs	r2, r2
 8007e5c:	4298      	cmp	r0, r3
 8007e5e:	4b98      	ldr	r3, [pc, #608]	@ (80080c0 <__ieee754_pow+0x288>)
 8007e60:	4193      	sbcs	r3, r2
 8007e62:	f080 84ea 	bcs.w	800883a <__ieee754_pow+0xa02>
 8007e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	f7f8 fa15 	bl	800029c <__adddf3>
 8007e72:	ec41 0b10 	vmov	d0, r0, r1
 8007e76:	b011      	add	sp, #68	@ 0x44
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	4a91      	ldr	r2, [pc, #580]	@ (80080c4 <__ieee754_pow+0x28c>)
 8007e7e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007e82:	4590      	cmp	r8, r2
 8007e84:	463d      	mov	r5, r7
 8007e86:	4633      	mov	r3, r6
 8007e88:	d806      	bhi.n	8007e98 <__ieee754_pow+0x60>
 8007e8a:	d101      	bne.n	8007e90 <__ieee754_pow+0x58>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d1ea      	bne.n	8007e66 <__ieee754_pow+0x2e>
 8007e90:	4592      	cmp	sl, r2
 8007e92:	d801      	bhi.n	8007e98 <__ieee754_pow+0x60>
 8007e94:	d10e      	bne.n	8007eb4 <__ieee754_pow+0x7c>
 8007e96:	b169      	cbz	r1, 8007eb4 <__ieee754_pow+0x7c>
 8007e98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007e9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007ea0:	431d      	orrs	r5, r3
 8007ea2:	d1e0      	bne.n	8007e66 <__ieee754_pow+0x2e>
 8007ea4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ea8:	18db      	adds	r3, r3, r3
 8007eaa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007eae:	4152      	adcs	r2, r2
 8007eb0:	429d      	cmp	r5, r3
 8007eb2:	e7d4      	b.n	8007e5e <__ieee754_pow+0x26>
 8007eb4:	2d00      	cmp	r5, #0
 8007eb6:	46c3      	mov	fp, r8
 8007eb8:	da3a      	bge.n	8007f30 <__ieee754_pow+0xf8>
 8007eba:	4a83      	ldr	r2, [pc, #524]	@ (80080c8 <__ieee754_pow+0x290>)
 8007ebc:	4592      	cmp	sl, r2
 8007ebe:	d84d      	bhi.n	8007f5c <__ieee754_pow+0x124>
 8007ec0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007ec4:	4592      	cmp	sl, r2
 8007ec6:	f240 84c7 	bls.w	8008858 <__ieee754_pow+0xa20>
 8007eca:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007ece:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007ed2:	2a14      	cmp	r2, #20
 8007ed4:	dd0f      	ble.n	8007ef6 <__ieee754_pow+0xbe>
 8007ed6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007eda:	fa21 f402 	lsr.w	r4, r1, r2
 8007ede:	fa04 f202 	lsl.w	r2, r4, r2
 8007ee2:	428a      	cmp	r2, r1
 8007ee4:	f040 84b8 	bne.w	8008858 <__ieee754_pow+0xa20>
 8007ee8:	f004 0401 	and.w	r4, r4, #1
 8007eec:	f1c4 0402 	rsb	r4, r4, #2
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d158      	bne.n	8007fa6 <__ieee754_pow+0x16e>
 8007ef4:	e00e      	b.n	8007f14 <__ieee754_pow+0xdc>
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	d154      	bne.n	8007fa4 <__ieee754_pow+0x16c>
 8007efa:	f1c2 0214 	rsb	r2, r2, #20
 8007efe:	fa4a f402 	asr.w	r4, sl, r2
 8007f02:	fa04 f202 	lsl.w	r2, r4, r2
 8007f06:	4552      	cmp	r2, sl
 8007f08:	f040 84a3 	bne.w	8008852 <__ieee754_pow+0xa1a>
 8007f0c:	f004 0401 	and.w	r4, r4, #1
 8007f10:	f1c4 0402 	rsb	r4, r4, #2
 8007f14:	4a6d      	ldr	r2, [pc, #436]	@ (80080cc <__ieee754_pow+0x294>)
 8007f16:	4592      	cmp	sl, r2
 8007f18:	d12e      	bne.n	8007f78 <__ieee754_pow+0x140>
 8007f1a:	f1b9 0f00 	cmp.w	r9, #0
 8007f1e:	f280 8494 	bge.w	800884a <__ieee754_pow+0xa12>
 8007f22:	496a      	ldr	r1, [pc, #424]	@ (80080cc <__ieee754_pow+0x294>)
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f7f8 fc97 	bl	800085c <__aeabi_ddiv>
 8007f2e:	e7a0      	b.n	8007e72 <__ieee754_pow+0x3a>
 8007f30:	2400      	movs	r4, #0
 8007f32:	bbc1      	cbnz	r1, 8007fa6 <__ieee754_pow+0x16e>
 8007f34:	4a63      	ldr	r2, [pc, #396]	@ (80080c4 <__ieee754_pow+0x28c>)
 8007f36:	4592      	cmp	sl, r2
 8007f38:	d1ec      	bne.n	8007f14 <__ieee754_pow+0xdc>
 8007f3a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007f3e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007f42:	431a      	orrs	r2, r3
 8007f44:	f000 8479 	beq.w	800883a <__ieee754_pow+0xa02>
 8007f48:	4b61      	ldr	r3, [pc, #388]	@ (80080d0 <__ieee754_pow+0x298>)
 8007f4a:	4598      	cmp	r8, r3
 8007f4c:	d908      	bls.n	8007f60 <__ieee754_pow+0x128>
 8007f4e:	f1b9 0f00 	cmp.w	r9, #0
 8007f52:	f2c0 8476 	blt.w	8008842 <__ieee754_pow+0xa0a>
 8007f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f5a:	e78a      	b.n	8007e72 <__ieee754_pow+0x3a>
 8007f5c:	2402      	movs	r4, #2
 8007f5e:	e7e8      	b.n	8007f32 <__ieee754_pow+0xfa>
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	f04f 0100 	mov.w	r1, #0
 8007f6c:	da81      	bge.n	8007e72 <__ieee754_pow+0x3a>
 8007f6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007f76:	e77c      	b.n	8007e72 <__ieee754_pow+0x3a>
 8007f78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007f7c:	d106      	bne.n	8007f8c <__ieee754_pow+0x154>
 8007f7e:	4632      	mov	r2, r6
 8007f80:	463b      	mov	r3, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fb3f 	bl	8000608 <__aeabi_dmul>
 8007f8a:	e772      	b.n	8007e72 <__ieee754_pow+0x3a>
 8007f8c:	4a51      	ldr	r2, [pc, #324]	@ (80080d4 <__ieee754_pow+0x29c>)
 8007f8e:	4591      	cmp	r9, r2
 8007f90:	d109      	bne.n	8007fa6 <__ieee754_pow+0x16e>
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	db07      	blt.n	8007fa6 <__ieee754_pow+0x16e>
 8007f96:	ec47 6b10 	vmov	d0, r6, r7
 8007f9a:	b011      	add	sp, #68	@ 0x44
 8007f9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	f000 bd52 	b.w	8008a48 <__ieee754_sqrt>
 8007fa4:	2400      	movs	r4, #0
 8007fa6:	ec47 6b10 	vmov	d0, r6, r7
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	f000 fc88 	bl	80088c0 <fabs>
 8007fb0:	9b02      	ldr	r3, [sp, #8]
 8007fb2:	ec51 0b10 	vmov	r0, r1, d0
 8007fb6:	bb53      	cbnz	r3, 800800e <__ieee754_pow+0x1d6>
 8007fb8:	4b44      	ldr	r3, [pc, #272]	@ (80080cc <__ieee754_pow+0x294>)
 8007fba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d002      	beq.n	8007fc8 <__ieee754_pow+0x190>
 8007fc2:	f1b8 0f00 	cmp.w	r8, #0
 8007fc6:	d122      	bne.n	800800e <__ieee754_pow+0x1d6>
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	da05      	bge.n	8007fda <__ieee754_pow+0x1a2>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	493d      	ldr	r1, [pc, #244]	@ (80080cc <__ieee754_pow+0x294>)
 8007fd6:	f7f8 fc41 	bl	800085c <__aeabi_ddiv>
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	f6bf af49 	bge.w	8007e72 <__ieee754_pow+0x3a>
 8007fe0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007fe4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007fe8:	ea58 0804 	orrs.w	r8, r8, r4
 8007fec:	d108      	bne.n	8008000 <__ieee754_pow+0x1c8>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f7f8 f94f 	bl	8000298 <__aeabi_dsub>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e794      	b.n	8007f2a <__ieee754_pow+0xf2>
 8008000:	2c01      	cmp	r4, #1
 8008002:	f47f af36 	bne.w	8007e72 <__ieee754_pow+0x3a>
 8008006:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800800a:	4619      	mov	r1, r3
 800800c:	e731      	b.n	8007e72 <__ieee754_pow+0x3a>
 800800e:	0feb      	lsrs	r3, r5, #31
 8008010:	3b01      	subs	r3, #1
 8008012:	ea53 0204 	orrs.w	r2, r3, r4
 8008016:	d102      	bne.n	800801e <__ieee754_pow+0x1e6>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	e7e9      	b.n	8007ff2 <__ieee754_pow+0x1ba>
 800801e:	3c01      	subs	r4, #1
 8008020:	431c      	orrs	r4, r3
 8008022:	d016      	beq.n	8008052 <__ieee754_pow+0x21a>
 8008024:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80080b0 <__ieee754_pow+0x278>
 8008028:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800802c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008030:	f240 8112 	bls.w	8008258 <__ieee754_pow+0x420>
 8008034:	4b28      	ldr	r3, [pc, #160]	@ (80080d8 <__ieee754_pow+0x2a0>)
 8008036:	459a      	cmp	sl, r3
 8008038:	4b25      	ldr	r3, [pc, #148]	@ (80080d0 <__ieee754_pow+0x298>)
 800803a:	d916      	bls.n	800806a <__ieee754_pow+0x232>
 800803c:	4598      	cmp	r8, r3
 800803e:	d80b      	bhi.n	8008058 <__ieee754_pow+0x220>
 8008040:	f1b9 0f00 	cmp.w	r9, #0
 8008044:	da0b      	bge.n	800805e <__ieee754_pow+0x226>
 8008046:	2000      	movs	r0, #0
 8008048:	b011      	add	sp, #68	@ 0x44
 800804a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804e:	f000 bcf3 	b.w	8008a38 <__math_oflow>
 8008052:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80080b8 <__ieee754_pow+0x280>
 8008056:	e7e7      	b.n	8008028 <__ieee754_pow+0x1f0>
 8008058:	f1b9 0f00 	cmp.w	r9, #0
 800805c:	dcf3      	bgt.n	8008046 <__ieee754_pow+0x20e>
 800805e:	2000      	movs	r0, #0
 8008060:	b011      	add	sp, #68	@ 0x44
 8008062:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008066:	f000 bcdf 	b.w	8008a28 <__math_uflow>
 800806a:	4598      	cmp	r8, r3
 800806c:	d20c      	bcs.n	8008088 <__ieee754_pow+0x250>
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	2300      	movs	r3, #0
 8008076:	f7f8 fd39 	bl	8000aec <__aeabi_dcmplt>
 800807a:	3800      	subs	r0, #0
 800807c:	bf18      	it	ne
 800807e:	2001      	movne	r0, #1
 8008080:	f1b9 0f00 	cmp.w	r9, #0
 8008084:	daec      	bge.n	8008060 <__ieee754_pow+0x228>
 8008086:	e7df      	b.n	8008048 <__ieee754_pow+0x210>
 8008088:	4b10      	ldr	r3, [pc, #64]	@ (80080cc <__ieee754_pow+0x294>)
 800808a:	4598      	cmp	r8, r3
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	d924      	bls.n	80080dc <__ieee754_pow+0x2a4>
 8008092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008096:	2300      	movs	r3, #0
 8008098:	f7f8 fd28 	bl	8000aec <__aeabi_dcmplt>
 800809c:	3800      	subs	r0, #0
 800809e:	bf18      	it	ne
 80080a0:	2001      	movne	r0, #1
 80080a2:	f1b9 0f00 	cmp.w	r9, #0
 80080a6:	dccf      	bgt.n	8008048 <__ieee754_pow+0x210>
 80080a8:	e7da      	b.n	8008060 <__ieee754_pow+0x228>
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	00000000 	.word	0x00000000
 80080b4:	3ff00000 	.word	0x3ff00000
 80080b8:	00000000 	.word	0x00000000
 80080bc:	bff00000 	.word	0xbff00000
 80080c0:	fff00000 	.word	0xfff00000
 80080c4:	7ff00000 	.word	0x7ff00000
 80080c8:	433fffff 	.word	0x433fffff
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	3fefffff 	.word	0x3fefffff
 80080d4:	3fe00000 	.word	0x3fe00000
 80080d8:	43f00000 	.word	0x43f00000
 80080dc:	4b5a      	ldr	r3, [pc, #360]	@ (8008248 <__ieee754_pow+0x410>)
 80080de:	f7f8 f8db 	bl	8000298 <__aeabi_dsub>
 80080e2:	a351      	add	r3, pc, #324	@ (adr r3, 8008228 <__ieee754_pow+0x3f0>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008230 <__ieee754_pow+0x3f8>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 fa83 	bl	8000608 <__aeabi_dmul>
 8008102:	4b52      	ldr	r3, [pc, #328]	@ (800824c <__ieee754_pow+0x414>)
 8008104:	4682      	mov	sl, r0
 8008106:	468b      	mov	fp, r1
 8008108:	2200      	movs	r2, #0
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	a148      	add	r1, pc, #288	@ (adr r1, 8008238 <__ieee754_pow+0x400>)
 8008118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811c:	f7f8 f8bc 	bl	8000298 <__aeabi_dsub>
 8008120:	4622      	mov	r2, r4
 8008122:	462b      	mov	r3, r5
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	2000      	movs	r0, #0
 800812e:	4948      	ldr	r1, [pc, #288]	@ (8008250 <__ieee754_pow+0x418>)
 8008130:	f7f8 f8b2 	bl	8000298 <__aeabi_dsub>
 8008134:	4622      	mov	r2, r4
 8008136:	4680      	mov	r8, r0
 8008138:	4689      	mov	r9, r1
 800813a:	462b      	mov	r3, r5
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 fa62 	bl	8000608 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fa5c 	bl	8000608 <__aeabi_dmul>
 8008150:	a33b      	add	r3, pc, #236	@ (adr r3, 8008240 <__ieee754_pow+0x408>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 fa57 	bl	8000608 <__aeabi_dmul>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4650      	mov	r0, sl
 8008160:	4659      	mov	r1, fp
 8008162:	f7f8 f899 	bl	8000298 <__aeabi_dsub>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4680      	mov	r8, r0
 800816c:	4689      	mov	r9, r1
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 f893 	bl	800029c <__adddf3>
 8008176:	2400      	movs	r4, #0
 8008178:	4632      	mov	r2, r6
 800817a:	463b      	mov	r3, r7
 800817c:	4620      	mov	r0, r4
 800817e:	460d      	mov	r5, r1
 8008180:	f7f8 f88a 	bl	8000298 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4640      	mov	r0, r8
 800818a:	4649      	mov	r1, r9
 800818c:	f7f8 f884 	bl	8000298 <__aeabi_dsub>
 8008190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008198:	2300      	movs	r3, #0
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081a0:	4606      	mov	r6, r0
 80081a2:	460f      	mov	r7, r1
 80081a4:	4652      	mov	r2, sl
 80081a6:	465b      	mov	r3, fp
 80081a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081ac:	f7f8 f874 	bl	8000298 <__aeabi_dsub>
 80081b0:	4622      	mov	r2, r4
 80081b2:	462b      	mov	r3, r5
 80081b4:	f7f8 fa28 	bl	8000608 <__aeabi_dmul>
 80081b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081bc:	4680      	mov	r8, r0
 80081be:	4689      	mov	r9, r1
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fa20 	bl	8000608 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4640      	mov	r0, r8
 80081ce:	4649      	mov	r1, r9
 80081d0:	f7f8 f864 	bl	800029c <__adddf3>
 80081d4:	4652      	mov	r2, sl
 80081d6:	465b      	mov	r3, fp
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 fa12 	bl	8000608 <__aeabi_dmul>
 80081e4:	460b      	mov	r3, r1
 80081e6:	4602      	mov	r2, r0
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 f854 	bl	800029c <__adddf3>
 80081f4:	4b17      	ldr	r3, [pc, #92]	@ (8008254 <__ieee754_pow+0x41c>)
 80081f6:	4299      	cmp	r1, r3
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	468a      	mov	sl, r1
 80081fe:	468b      	mov	fp, r1
 8008200:	f340 82ef 	ble.w	80087e2 <__ieee754_pow+0x9aa>
 8008204:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008208:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800820c:	4303      	orrs	r3, r0
 800820e:	f000 81e8 	beq.w	80085e2 <__ieee754_pow+0x7aa>
 8008212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	f7f8 fc67 	bl	8000aec <__aeabi_dcmplt>
 800821e:	3800      	subs	r0, #0
 8008220:	bf18      	it	ne
 8008222:	2001      	movne	r0, #1
 8008224:	e710      	b.n	8008048 <__ieee754_pow+0x210>
 8008226:	bf00      	nop
 8008228:	60000000 	.word	0x60000000
 800822c:	3ff71547 	.word	0x3ff71547
 8008230:	f85ddf44 	.word	0xf85ddf44
 8008234:	3e54ae0b 	.word	0x3e54ae0b
 8008238:	55555555 	.word	0x55555555
 800823c:	3fd55555 	.word	0x3fd55555
 8008240:	652b82fe 	.word	0x652b82fe
 8008244:	3ff71547 	.word	0x3ff71547
 8008248:	3ff00000 	.word	0x3ff00000
 800824c:	3fd00000 	.word	0x3fd00000
 8008250:	3fe00000 	.word	0x3fe00000
 8008254:	408fffff 	.word	0x408fffff
 8008258:	4bd5      	ldr	r3, [pc, #852]	@ (80085b0 <__ieee754_pow+0x778>)
 800825a:	402b      	ands	r3, r5
 800825c:	2200      	movs	r2, #0
 800825e:	b92b      	cbnz	r3, 800826c <__ieee754_pow+0x434>
 8008260:	4bd4      	ldr	r3, [pc, #848]	@ (80085b4 <__ieee754_pow+0x77c>)
 8008262:	f7f8 f9d1 	bl	8000608 <__aeabi_dmul>
 8008266:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800826a:	468b      	mov	fp, r1
 800826c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008270:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008274:	4413      	add	r3, r2
 8008276:	930a      	str	r3, [sp, #40]	@ 0x28
 8008278:	4bcf      	ldr	r3, [pc, #828]	@ (80085b8 <__ieee754_pow+0x780>)
 800827a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800827e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008282:	459b      	cmp	fp, r3
 8008284:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008288:	dd08      	ble.n	800829c <__ieee754_pow+0x464>
 800828a:	4bcc      	ldr	r3, [pc, #816]	@ (80085bc <__ieee754_pow+0x784>)
 800828c:	459b      	cmp	fp, r3
 800828e:	f340 81a5 	ble.w	80085dc <__ieee754_pow+0x7a4>
 8008292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008294:	3301      	adds	r3, #1
 8008296:	930a      	str	r3, [sp, #40]	@ 0x28
 8008298:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80082a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082a6:	4bc6      	ldr	r3, [pc, #792]	@ (80085c0 <__ieee754_pow+0x788>)
 80082a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082ac:	ed93 7b00 	vldr	d7, [r3]
 80082b0:	4629      	mov	r1, r5
 80082b2:	ec53 2b17 	vmov	r2, r3, d7
 80082b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082be:	f7f7 ffeb 	bl	8000298 <__aeabi_dsub>
 80082c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ce:	f7f7 ffe5 	bl	800029c <__adddf3>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	2000      	movs	r0, #0
 80082d8:	49ba      	ldr	r1, [pc, #744]	@ (80085c4 <__ieee754_pow+0x78c>)
 80082da:	f7f8 fabf 	bl	800085c <__aeabi_ddiv>
 80082de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 f98d 	bl	8000608 <__aeabi_dmul>
 80082ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80082f6:	106d      	asrs	r5, r5, #1
 80082f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80082fc:	f04f 0b00 	mov.w	fp, #0
 8008300:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008304:	4661      	mov	r1, ip
 8008306:	2200      	movs	r2, #0
 8008308:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800830c:	4658      	mov	r0, fp
 800830e:	46e1      	mov	r9, ip
 8008310:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008314:	4614      	mov	r4, r2
 8008316:	461d      	mov	r5, r3
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ffb8 	bl	8000298 <__aeabi_dsub>
 8008328:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f7 ffb0 	bl	8000298 <__aeabi_dsub>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008340:	f7f7 ffaa 	bl	8000298 <__aeabi_dsub>
 8008344:	465a      	mov	r2, fp
 8008346:	464b      	mov	r3, r9
 8008348:	f7f8 f95e 	bl	8000608 <__aeabi_dmul>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f7 ffa0 	bl	8000298 <__aeabi_dsub>
 8008358:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008364:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008368:	4610      	mov	r0, r2
 800836a:	4619      	mov	r1, r3
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	a37d      	add	r3, pc, #500	@ (adr r3, 8008568 <__ieee754_pow+0x730>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
 800837a:	f7f8 f945 	bl	8000608 <__aeabi_dmul>
 800837e:	a37c      	add	r3, pc, #496	@ (adr r3, 8008570 <__ieee754_pow+0x738>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f7 ff8a 	bl	800029c <__adddf3>
 8008388:	4622      	mov	r2, r4
 800838a:	462b      	mov	r3, r5
 800838c:	f7f8 f93c 	bl	8000608 <__aeabi_dmul>
 8008390:	a379      	add	r3, pc, #484	@ (adr r3, 8008578 <__ieee754_pow+0x740>)
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f7f7 ff81 	bl	800029c <__adddf3>
 800839a:	4622      	mov	r2, r4
 800839c:	462b      	mov	r3, r5
 800839e:	f7f8 f933 	bl	8000608 <__aeabi_dmul>
 80083a2:	a377      	add	r3, pc, #476	@ (adr r3, 8008580 <__ieee754_pow+0x748>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f7 ff78 	bl	800029c <__adddf3>
 80083ac:	4622      	mov	r2, r4
 80083ae:	462b      	mov	r3, r5
 80083b0:	f7f8 f92a 	bl	8000608 <__aeabi_dmul>
 80083b4:	a374      	add	r3, pc, #464	@ (adr r3, 8008588 <__ieee754_pow+0x750>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f7f7 ff6f 	bl	800029c <__adddf3>
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	f7f8 f921 	bl	8000608 <__aeabi_dmul>
 80083c6:	a372      	add	r3, pc, #456	@ (adr r3, 8008590 <__ieee754_pow+0x758>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 ff66 	bl	800029c <__adddf3>
 80083d0:	4622      	mov	r2, r4
 80083d2:	4606      	mov	r6, r0
 80083d4:	460f      	mov	r7, r1
 80083d6:	462b      	mov	r3, r5
 80083d8:	4620      	mov	r0, r4
 80083da:	4629      	mov	r1, r5
 80083dc:	f7f8 f914 	bl	8000608 <__aeabi_dmul>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f8 f90e 	bl	8000608 <__aeabi_dmul>
 80083ec:	465a      	mov	r2, fp
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	464b      	mov	r3, r9
 80083f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083f8:	f7f7 ff50 	bl	800029c <__adddf3>
 80083fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008400:	f7f8 f902 	bl	8000608 <__aeabi_dmul>
 8008404:	4622      	mov	r2, r4
 8008406:	462b      	mov	r3, r5
 8008408:	f7f7 ff48 	bl	800029c <__adddf3>
 800840c:	465a      	mov	r2, fp
 800840e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008412:	464b      	mov	r3, r9
 8008414:	4658      	mov	r0, fp
 8008416:	4649      	mov	r1, r9
 8008418:	f7f8 f8f6 	bl	8000608 <__aeabi_dmul>
 800841c:	4b6a      	ldr	r3, [pc, #424]	@ (80085c8 <__ieee754_pow+0x790>)
 800841e:	2200      	movs	r2, #0
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	f7f7 ff3a 	bl	800029c <__adddf3>
 8008428:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800842c:	f7f7 ff36 	bl	800029c <__adddf3>
 8008430:	46d8      	mov	r8, fp
 8008432:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008436:	460d      	mov	r5, r1
 8008438:	465a      	mov	r2, fp
 800843a:	460b      	mov	r3, r1
 800843c:	4640      	mov	r0, r8
 800843e:	4649      	mov	r1, r9
 8008440:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	465c      	mov	r4, fp
 800844a:	4680      	mov	r8, r0
 800844c:	4689      	mov	r9, r1
 800844e:	4b5e      	ldr	r3, [pc, #376]	@ (80085c8 <__ieee754_pow+0x790>)
 8008450:	2200      	movs	r2, #0
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	f7f7 ff1f 	bl	8000298 <__aeabi_dsub>
 800845a:	4632      	mov	r2, r6
 800845c:	463b      	mov	r3, r7
 800845e:	f7f7 ff1b 	bl	8000298 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800846a:	f7f7 ff15 	bl	8000298 <__aeabi_dsub>
 800846e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	4622      	mov	r2, r4
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	462b      	mov	r3, r5
 800847e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f7 ff05 	bl	800029c <__adddf3>
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f7 fefd 	bl	800029c <__adddf3>
 80084a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80084a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8008598 <__ieee754_pow+0x760>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4658      	mov	r0, fp
 80084ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80084b2:	460d      	mov	r5, r1
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	465c      	mov	r4, fp
 80084ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084be:	4642      	mov	r2, r8
 80084c0:	464b      	mov	r3, r9
 80084c2:	4620      	mov	r0, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	f7f7 fee7 	bl	8000298 <__aeabi_dsub>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fee1 	bl	8000298 <__aeabi_dsub>
 80084d6:	a332      	add	r3, pc, #200	@ (adr r3, 80085a0 <__ieee754_pow+0x768>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f8 f894 	bl	8000608 <__aeabi_dmul>
 80084e0:	a331      	add	r3, pc, #196	@ (adr r3, 80085a8 <__ieee754_pow+0x770>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	4606      	mov	r6, r0
 80084e8:	460f      	mov	r7, r1
 80084ea:	4620      	mov	r0, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7f8 f88b 	bl	8000608 <__aeabi_dmul>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4630      	mov	r0, r6
 80084f8:	4639      	mov	r1, r7
 80084fa:	f7f7 fecf 	bl	800029c <__adddf3>
 80084fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008500:	4b32      	ldr	r3, [pc, #200]	@ (80085cc <__ieee754_pow+0x794>)
 8008502:	4413      	add	r3, r2
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f7 fec8 	bl	800029c <__adddf3>
 800850c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008510:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008512:	f7f8 f80f 	bl	8000534 <__aeabi_i2d>
 8008516:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008518:	4b2d      	ldr	r3, [pc, #180]	@ (80085d0 <__ieee754_pow+0x798>)
 800851a:	4413      	add	r3, r2
 800851c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008520:	4606      	mov	r6, r0
 8008522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008526:	460f      	mov	r7, r1
 8008528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800852c:	f7f7 feb6 	bl	800029c <__adddf3>
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	f7f7 feb2 	bl	800029c <__adddf3>
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	f7f7 feae 	bl	800029c <__adddf3>
 8008540:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008544:	4632      	mov	r2, r6
 8008546:	463b      	mov	r3, r7
 8008548:	4658      	mov	r0, fp
 800854a:	460d      	mov	r5, r1
 800854c:	f7f7 fea4 	bl	8000298 <__aeabi_dsub>
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	f7f7 fea0 	bl	8000298 <__aeabi_dsub>
 8008558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800855c:	f7f7 fe9c 	bl	8000298 <__aeabi_dsub>
 8008560:	465c      	mov	r4, fp
 8008562:	4602      	mov	r2, r0
 8008564:	e036      	b.n	80085d4 <__ieee754_pow+0x79c>
 8008566:	bf00      	nop
 8008568:	4a454eef 	.word	0x4a454eef
 800856c:	3fca7e28 	.word	0x3fca7e28
 8008570:	93c9db65 	.word	0x93c9db65
 8008574:	3fcd864a 	.word	0x3fcd864a
 8008578:	a91d4101 	.word	0xa91d4101
 800857c:	3fd17460 	.word	0x3fd17460
 8008580:	518f264d 	.word	0x518f264d
 8008584:	3fd55555 	.word	0x3fd55555
 8008588:	db6fabff 	.word	0xdb6fabff
 800858c:	3fdb6db6 	.word	0x3fdb6db6
 8008590:	33333303 	.word	0x33333303
 8008594:	3fe33333 	.word	0x3fe33333
 8008598:	e0000000 	.word	0xe0000000
 800859c:	3feec709 	.word	0x3feec709
 80085a0:	dc3a03fd 	.word	0xdc3a03fd
 80085a4:	3feec709 	.word	0x3feec709
 80085a8:	145b01f5 	.word	0x145b01f5
 80085ac:	be3e2fe0 	.word	0xbe3e2fe0
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	43400000 	.word	0x43400000
 80085b8:	0003988e 	.word	0x0003988e
 80085bc:	000bb679 	.word	0x000bb679
 80085c0:	08009de8 	.word	0x08009de8
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	40080000 	.word	0x40080000
 80085cc:	08009dc8 	.word	0x08009dc8
 80085d0:	08009dd8 	.word	0x08009dd8
 80085d4:	460b      	mov	r3, r1
 80085d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085da:	e5d7      	b.n	800818c <__ieee754_pow+0x354>
 80085dc:	f04f 0a01 	mov.w	sl, #1
 80085e0:	e65e      	b.n	80082a0 <__ieee754_pow+0x468>
 80085e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80088b4 <__ieee754_pow+0xa7c>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f7 fe56 	bl	800029c <__adddf3>
 80085f0:	4642      	mov	r2, r8
 80085f2:	e9cd 0100 	strd	r0, r1, [sp]
 80085f6:	464b      	mov	r3, r9
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 fe4c 	bl	8000298 <__aeabi_dsub>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008608:	f7f8 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800860c:	2800      	cmp	r0, #0
 800860e:	f47f ae00 	bne.w	8008212 <__ieee754_pow+0x3da>
 8008612:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008616:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800861a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800861e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008622:	44da      	add	sl, fp
 8008624:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008628:	489d      	ldr	r0, [pc, #628]	@ (80088a0 <__ieee754_pow+0xa68>)
 800862a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800862e:	4108      	asrs	r0, r1
 8008630:	ea00 030a 	and.w	r3, r0, sl
 8008634:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008638:	f1c1 0114 	rsb	r1, r1, #20
 800863c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008640:	fa4a fa01 	asr.w	sl, sl, r1
 8008644:	f1bb 0f00 	cmp.w	fp, #0
 8008648:	4640      	mov	r0, r8
 800864a:	4649      	mov	r1, r9
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	bfb8      	it	lt
 8008652:	f1ca 0a00 	rsblt	sl, sl, #0
 8008656:	f7f7 fe1f 	bl	8000298 <__aeabi_dsub>
 800865a:	4680      	mov	r8, r0
 800865c:	4689      	mov	r9, r1
 800865e:	4632      	mov	r2, r6
 8008660:	463b      	mov	r3, r7
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f7 fe19 	bl	800029c <__adddf3>
 800866a:	2400      	movs	r4, #0
 800866c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008860 <__ieee754_pow+0xa28>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	4620      	mov	r0, r4
 8008674:	460d      	mov	r5, r1
 8008676:	f7f7 ffc7 	bl	8000608 <__aeabi_dmul>
 800867a:	4642      	mov	r2, r8
 800867c:	e9cd 0100 	strd	r0, r1, [sp]
 8008680:	464b      	mov	r3, r9
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 fe07 	bl	8000298 <__aeabi_dsub>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f7 fe01 	bl	8000298 <__aeabi_dsub>
 8008696:	a374      	add	r3, pc, #464	@ (adr r3, 8008868 <__ieee754_pow+0xa30>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	a373      	add	r3, pc, #460	@ (adr r3, 8008870 <__ieee754_pow+0xa38>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 fdef 	bl	800029c <__adddf3>
 80086be:	4604      	mov	r4, r0
 80086c0:	460d      	mov	r5, r1
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086ca:	f7f7 fde7 	bl	800029c <__adddf3>
 80086ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d2:	4680      	mov	r8, r0
 80086d4:	4689      	mov	r9, r1
 80086d6:	f7f7 fddf 	bl	8000298 <__aeabi_dsub>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f7 fdd9 	bl	8000298 <__aeabi_dsub>
 80086e6:	4642      	mov	r2, r8
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	464b      	mov	r3, r9
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	f7f7 ff89 	bl	8000608 <__aeabi_dmul>
 80086f6:	a360      	add	r3, pc, #384	@ (adr r3, 8008878 <__ieee754_pow+0xa40>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	f7f7 ff82 	bl	8000608 <__aeabi_dmul>
 8008704:	a35e      	add	r3, pc, #376	@ (adr r3, 8008880 <__ieee754_pow+0xa48>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fdc5 	bl	8000298 <__aeabi_dsub>
 800870e:	4622      	mov	r2, r4
 8008710:	462b      	mov	r3, r5
 8008712:	f7f7 ff79 	bl	8000608 <__aeabi_dmul>
 8008716:	a35c      	add	r3, pc, #368	@ (adr r3, 8008888 <__ieee754_pow+0xa50>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 fdbe 	bl	800029c <__adddf3>
 8008720:	4622      	mov	r2, r4
 8008722:	462b      	mov	r3, r5
 8008724:	f7f7 ff70 	bl	8000608 <__aeabi_dmul>
 8008728:	a359      	add	r3, pc, #356	@ (adr r3, 8008890 <__ieee754_pow+0xa58>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 fdb3 	bl	8000298 <__aeabi_dsub>
 8008732:	4622      	mov	r2, r4
 8008734:	462b      	mov	r3, r5
 8008736:	f7f7 ff67 	bl	8000608 <__aeabi_dmul>
 800873a:	a357      	add	r3, pc, #348	@ (adr r3, 8008898 <__ieee754_pow+0xa60>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fdac 	bl	800029c <__adddf3>
 8008744:	4622      	mov	r2, r4
 8008746:	462b      	mov	r3, r5
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4640      	mov	r0, r8
 8008752:	4649      	mov	r1, r9
 8008754:	f7f7 fda0 	bl	8000298 <__aeabi_dsub>
 8008758:	4604      	mov	r4, r0
 800875a:	460d      	mov	r5, r1
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 ff50 	bl	8000608 <__aeabi_dmul>
 8008768:	2200      	movs	r2, #0
 800876a:	e9cd 0100 	strd	r0, r1, [sp]
 800876e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008782:	f7f8 f86b 	bl	800085c <__aeabi_ddiv>
 8008786:	4632      	mov	r2, r6
 8008788:	4604      	mov	r4, r0
 800878a:	460d      	mov	r5, r1
 800878c:	463b      	mov	r3, r7
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f7 ff39 	bl	8000608 <__aeabi_dmul>
 8008796:	4632      	mov	r2, r6
 8008798:	463b      	mov	r3, r7
 800879a:	f7f7 fd7f 	bl	800029c <__adddf3>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7f7 fd77 	bl	8000298 <__aeabi_dsub>
 80087aa:	4642      	mov	r2, r8
 80087ac:	464b      	mov	r3, r9
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	460b      	mov	r3, r1
 80087b4:	4602      	mov	r2, r0
 80087b6:	493b      	ldr	r1, [pc, #236]	@ (80088a4 <__ieee754_pow+0xa6c>)
 80087b8:	2000      	movs	r0, #0
 80087ba:	f7f7 fd6d 	bl	8000298 <__aeabi_dsub>
 80087be:	ec41 0b10 	vmov	d0, r0, r1
 80087c2:	ee10 3a90 	vmov	r3, s1
 80087c6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80087ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087ce:	da30      	bge.n	8008832 <__ieee754_pow+0x9fa>
 80087d0:	4650      	mov	r0, sl
 80087d2:	f000 f87d 	bl	80088d0 <scalbn>
 80087d6:	ec51 0b10 	vmov	r0, r1, d0
 80087da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087de:	f7ff bbd2 	b.w	8007f86 <__ieee754_pow+0x14e>
 80087e2:	4c31      	ldr	r4, [pc, #196]	@ (80088a8 <__ieee754_pow+0xa70>)
 80087e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d91a      	bls.n	8008822 <__ieee754_pow+0x9ea>
 80087ec:	4b2f      	ldr	r3, [pc, #188]	@ (80088ac <__ieee754_pow+0xa74>)
 80087ee:	440b      	add	r3, r1
 80087f0:	4303      	orrs	r3, r0
 80087f2:	d009      	beq.n	8008808 <__ieee754_pow+0x9d0>
 80087f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	f7f8 f976 	bl	8000aec <__aeabi_dcmplt>
 8008800:	3800      	subs	r0, #0
 8008802:	bf18      	it	ne
 8008804:	2001      	movne	r0, #1
 8008806:	e42b      	b.n	8008060 <__ieee754_pow+0x228>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	f7f7 fd44 	bl	8000298 <__aeabi_dsub>
 8008810:	4632      	mov	r2, r6
 8008812:	463b      	mov	r3, r7
 8008814:	f7f8 f97e 	bl	8000b14 <__aeabi_dcmpge>
 8008818:	2800      	cmp	r0, #0
 800881a:	d1eb      	bne.n	80087f4 <__ieee754_pow+0x9bc>
 800881c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80088bc <__ieee754_pow+0xa84>
 8008820:	e6f7      	b.n	8008612 <__ieee754_pow+0x7da>
 8008822:	469a      	mov	sl, r3
 8008824:	4b22      	ldr	r3, [pc, #136]	@ (80088b0 <__ieee754_pow+0xa78>)
 8008826:	459a      	cmp	sl, r3
 8008828:	f63f aef3 	bhi.w	8008612 <__ieee754_pow+0x7da>
 800882c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008830:	e715      	b.n	800865e <__ieee754_pow+0x826>
 8008832:	ec51 0b10 	vmov	r0, r1, d0
 8008836:	4619      	mov	r1, r3
 8008838:	e7cf      	b.n	80087da <__ieee754_pow+0x9a2>
 800883a:	491a      	ldr	r1, [pc, #104]	@ (80088a4 <__ieee754_pow+0xa6c>)
 800883c:	2000      	movs	r0, #0
 800883e:	f7ff bb18 	b.w	8007e72 <__ieee754_pow+0x3a>
 8008842:	2000      	movs	r0, #0
 8008844:	2100      	movs	r1, #0
 8008846:	f7ff bb14 	b.w	8007e72 <__ieee754_pow+0x3a>
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7ff bb10 	b.w	8007e72 <__ieee754_pow+0x3a>
 8008852:	460c      	mov	r4, r1
 8008854:	f7ff bb5e 	b.w	8007f14 <__ieee754_pow+0xdc>
 8008858:	2400      	movs	r4, #0
 800885a:	f7ff bb49 	b.w	8007ef0 <__ieee754_pow+0xb8>
 800885e:	bf00      	nop
 8008860:	00000000 	.word	0x00000000
 8008864:	3fe62e43 	.word	0x3fe62e43
 8008868:	fefa39ef 	.word	0xfefa39ef
 800886c:	3fe62e42 	.word	0x3fe62e42
 8008870:	0ca86c39 	.word	0x0ca86c39
 8008874:	be205c61 	.word	0xbe205c61
 8008878:	72bea4d0 	.word	0x72bea4d0
 800887c:	3e663769 	.word	0x3e663769
 8008880:	c5d26bf1 	.word	0xc5d26bf1
 8008884:	3ebbbd41 	.word	0x3ebbbd41
 8008888:	af25de2c 	.word	0xaf25de2c
 800888c:	3f11566a 	.word	0x3f11566a
 8008890:	16bebd93 	.word	0x16bebd93
 8008894:	3f66c16c 	.word	0x3f66c16c
 8008898:	5555553e 	.word	0x5555553e
 800889c:	3fc55555 	.word	0x3fc55555
 80088a0:	fff00000 	.word	0xfff00000
 80088a4:	3ff00000 	.word	0x3ff00000
 80088a8:	4090cbff 	.word	0x4090cbff
 80088ac:	3f6f3400 	.word	0x3f6f3400
 80088b0:	3fe00000 	.word	0x3fe00000
 80088b4:	652b82fe 	.word	0x652b82fe
 80088b8:	3c971547 	.word	0x3c971547
 80088bc:	4090cc00 	.word	0x4090cc00

080088c0 <fabs>:
 80088c0:	ec51 0b10 	vmov	r0, r1, d0
 80088c4:	4602      	mov	r2, r0
 80088c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088ca:	ec43 2b10 	vmov	d0, r2, r3
 80088ce:	4770      	bx	lr

080088d0 <scalbn>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	ec55 4b10 	vmov	r4, r5, d0
 80088d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80088da:	4606      	mov	r6, r0
 80088dc:	462b      	mov	r3, r5
 80088de:	b991      	cbnz	r1, 8008906 <scalbn+0x36>
 80088e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80088e4:	4323      	orrs	r3, r4
 80088e6:	d03d      	beq.n	8008964 <scalbn+0x94>
 80088e8:	4b35      	ldr	r3, [pc, #212]	@ (80089c0 <scalbn+0xf0>)
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	2200      	movs	r2, #0
 80088f0:	f7f7 fe8a 	bl	8000608 <__aeabi_dmul>
 80088f4:	4b33      	ldr	r3, [pc, #204]	@ (80089c4 <scalbn+0xf4>)
 80088f6:	429e      	cmp	r6, r3
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	da0f      	bge.n	800891e <scalbn+0x4e>
 80088fe:	a328      	add	r3, pc, #160	@ (adr r3, 80089a0 <scalbn+0xd0>)
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	e01e      	b.n	8008944 <scalbn+0x74>
 8008906:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800890a:	4291      	cmp	r1, r2
 800890c:	d10b      	bne.n	8008926 <scalbn+0x56>
 800890e:	4622      	mov	r2, r4
 8008910:	4620      	mov	r0, r4
 8008912:	4629      	mov	r1, r5
 8008914:	f7f7 fcc2 	bl	800029c <__adddf3>
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	e022      	b.n	8008964 <scalbn+0x94>
 800891e:	460b      	mov	r3, r1
 8008920:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008924:	3936      	subs	r1, #54	@ 0x36
 8008926:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800892a:	4296      	cmp	r6, r2
 800892c:	dd0d      	ble.n	800894a <scalbn+0x7a>
 800892e:	2d00      	cmp	r5, #0
 8008930:	a11d      	add	r1, pc, #116	@ (adr r1, 80089a8 <scalbn+0xd8>)
 8008932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008936:	da02      	bge.n	800893e <scalbn+0x6e>
 8008938:	a11d      	add	r1, pc, #116	@ (adr r1, 80089b0 <scalbn+0xe0>)
 800893a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893e:	a31a      	add	r3, pc, #104	@ (adr r3, 80089a8 <scalbn+0xd8>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fe60 	bl	8000608 <__aeabi_dmul>
 8008948:	e7e6      	b.n	8008918 <scalbn+0x48>
 800894a:	1872      	adds	r2, r6, r1
 800894c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008950:	428a      	cmp	r2, r1
 8008952:	dcec      	bgt.n	800892e <scalbn+0x5e>
 8008954:	2a00      	cmp	r2, #0
 8008956:	dd08      	ble.n	800896a <scalbn+0x9a>
 8008958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800895c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008964:	ec45 4b10 	vmov	d0, r4, r5
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800896e:	da08      	bge.n	8008982 <scalbn+0xb2>
 8008970:	2d00      	cmp	r5, #0
 8008972:	a10b      	add	r1, pc, #44	@ (adr r1, 80089a0 <scalbn+0xd0>)
 8008974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008978:	dac1      	bge.n	80088fe <scalbn+0x2e>
 800897a:	a10f      	add	r1, pc, #60	@ (adr r1, 80089b8 <scalbn+0xe8>)
 800897c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008980:	e7bd      	b.n	80088fe <scalbn+0x2e>
 8008982:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008986:	3236      	adds	r2, #54	@ 0x36
 8008988:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800898c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008990:	4620      	mov	r0, r4
 8008992:	4b0d      	ldr	r3, [pc, #52]	@ (80089c8 <scalbn+0xf8>)
 8008994:	4629      	mov	r1, r5
 8008996:	2200      	movs	r2, #0
 8008998:	e7d4      	b.n	8008944 <scalbn+0x74>
 800899a:	bf00      	nop
 800899c:	f3af 8000 	nop.w
 80089a0:	c2f8f359 	.word	0xc2f8f359
 80089a4:	01a56e1f 	.word	0x01a56e1f
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	7e37e43c 	.word	0x7e37e43c
 80089b0:	8800759c 	.word	0x8800759c
 80089b4:	fe37e43c 	.word	0xfe37e43c
 80089b8:	c2f8f359 	.word	0xc2f8f359
 80089bc:	81a56e1f 	.word	0x81a56e1f
 80089c0:	43500000 	.word	0x43500000
 80089c4:	ffff3cb0 	.word	0xffff3cb0
 80089c8:	3c900000 	.word	0x3c900000

080089cc <with_errno>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	ed2d 8b02 	vpush	{d8}
 80089d2:	eeb0 8a40 	vmov.f32	s16, s0
 80089d6:	eef0 8a60 	vmov.f32	s17, s1
 80089da:	4604      	mov	r4, r0
 80089dc:	f7fe fa18 	bl	8006e10 <__errno>
 80089e0:	eeb0 0a48 	vmov.f32	s0, s16
 80089e4:	eef0 0a68 	vmov.f32	s1, s17
 80089e8:	ecbd 8b02 	vpop	{d8}
 80089ec:	6004      	str	r4, [r0, #0]
 80089ee:	bd10      	pop	{r4, pc}

080089f0 <xflow>:
 80089f0:	4603      	mov	r3, r0
 80089f2:	b507      	push	{r0, r1, r2, lr}
 80089f4:	ec51 0b10 	vmov	r0, r1, d0
 80089f8:	b183      	cbz	r3, 8008a1c <xflow+0x2c>
 80089fa:	4602      	mov	r2, r0
 80089fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a00:	e9cd 2300 	strd	r2, r3, [sp]
 8008a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	ec41 0b10 	vmov	d0, r0, r1
 8008a10:	2022      	movs	r0, #34	@ 0x22
 8008a12:	b003      	add	sp, #12
 8008a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a18:	f7ff bfd8 	b.w	80089cc <with_errno>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	e7ee      	b.n	8008a00 <xflow+0x10>
 8008a22:	0000      	movs	r0, r0
 8008a24:	0000      	movs	r0, r0
	...

08008a28 <__math_uflow>:
 8008a28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a30 <__math_uflow+0x8>
 8008a2c:	f7ff bfe0 	b.w	80089f0 <xflow>
 8008a30:	00000000 	.word	0x00000000
 8008a34:	10000000 	.word	0x10000000

08008a38 <__math_oflow>:
 8008a38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a40 <__math_oflow+0x8>
 8008a3c:	f7ff bfd8 	b.w	80089f0 <xflow>
 8008a40:	00000000 	.word	0x00000000
 8008a44:	70000000 	.word	0x70000000

08008a48 <__ieee754_sqrt>:
 8008a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	4a68      	ldr	r2, [pc, #416]	@ (8008bf0 <__ieee754_sqrt+0x1a8>)
 8008a4e:	ec55 4b10 	vmov	r4, r5, d0
 8008a52:	43aa      	bics	r2, r5
 8008a54:	462b      	mov	r3, r5
 8008a56:	4621      	mov	r1, r4
 8008a58:	d110      	bne.n	8008a7c <__ieee754_sqrt+0x34>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f7f7 fdd2 	bl	8000608 <__aeabi_dmul>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f7 fc16 	bl	800029c <__adddf3>
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	ec45 4b10 	vmov	d0, r4, r5
 8008a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7c:	2d00      	cmp	r5, #0
 8008a7e:	dc0e      	bgt.n	8008a9e <__ieee754_sqrt+0x56>
 8008a80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008a84:	4322      	orrs	r2, r4
 8008a86:	d0f5      	beq.n	8008a74 <__ieee754_sqrt+0x2c>
 8008a88:	b19d      	cbz	r5, 8008ab2 <__ieee754_sqrt+0x6a>
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fc02 	bl	8000298 <__aeabi_dsub>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	f7f7 fee0 	bl	800085c <__aeabi_ddiv>
 8008a9c:	e7e8      	b.n	8008a70 <__ieee754_sqrt+0x28>
 8008a9e:	152a      	asrs	r2, r5, #20
 8008aa0:	d115      	bne.n	8008ace <__ieee754_sqrt+0x86>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e009      	b.n	8008aba <__ieee754_sqrt+0x72>
 8008aa6:	0acb      	lsrs	r3, r1, #11
 8008aa8:	3a15      	subs	r2, #21
 8008aaa:	0549      	lsls	r1, r1, #21
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0fa      	beq.n	8008aa6 <__ieee754_sqrt+0x5e>
 8008ab0:	e7f7      	b.n	8008aa2 <__ieee754_sqrt+0x5a>
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	e7fa      	b.n	8008aac <__ieee754_sqrt+0x64>
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	3001      	adds	r0, #1
 8008aba:	02dc      	lsls	r4, r3, #11
 8008abc:	d5fb      	bpl.n	8008ab6 <__ieee754_sqrt+0x6e>
 8008abe:	1e44      	subs	r4, r0, #1
 8008ac0:	1b12      	subs	r2, r2, r4
 8008ac2:	f1c0 0420 	rsb	r4, r0, #32
 8008ac6:	fa21 f404 	lsr.w	r4, r1, r4
 8008aca:	4323      	orrs	r3, r4
 8008acc:	4081      	lsls	r1, r0
 8008ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ada:	07d2      	lsls	r2, r2, #31
 8008adc:	bf5c      	itt	pl
 8008ade:	005b      	lslpl	r3, r3, #1
 8008ae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ae8:	bf58      	it	pl
 8008aea:	0049      	lslpl	r1, r1, #1
 8008aec:	2600      	movs	r6, #0
 8008aee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008af2:	106d      	asrs	r5, r5, #1
 8008af4:	0049      	lsls	r1, r1, #1
 8008af6:	2016      	movs	r0, #22
 8008af8:	4632      	mov	r2, r6
 8008afa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008afe:	1917      	adds	r7, r2, r4
 8008b00:	429f      	cmp	r7, r3
 8008b02:	bfde      	ittt	le
 8008b04:	193a      	addle	r2, r7, r4
 8008b06:	1bdb      	suble	r3, r3, r7
 8008b08:	1936      	addle	r6, r6, r4
 8008b0a:	0fcf      	lsrs	r7, r1, #31
 8008b0c:	3801      	subs	r0, #1
 8008b0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008b12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008b1a:	d1f0      	bne.n	8008afe <__ieee754_sqrt+0xb6>
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	2720      	movs	r7, #32
 8008b20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008b24:	429a      	cmp	r2, r3
 8008b26:	eb00 0e0c 	add.w	lr, r0, ip
 8008b2a:	db02      	blt.n	8008b32 <__ieee754_sqrt+0xea>
 8008b2c:	d113      	bne.n	8008b56 <__ieee754_sqrt+0x10e>
 8008b2e:	458e      	cmp	lr, r1
 8008b30:	d811      	bhi.n	8008b56 <__ieee754_sqrt+0x10e>
 8008b32:	f1be 0f00 	cmp.w	lr, #0
 8008b36:	eb0e 000c 	add.w	r0, lr, ip
 8008b3a:	da42      	bge.n	8008bc2 <__ieee754_sqrt+0x17a>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	db40      	blt.n	8008bc2 <__ieee754_sqrt+0x17a>
 8008b40:	f102 0801 	add.w	r8, r2, #1
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	458e      	cmp	lr, r1
 8008b48:	bf88      	it	hi
 8008b4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008b4e:	eba1 010e 	sub.w	r1, r1, lr
 8008b52:	4464      	add	r4, ip
 8008b54:	4642      	mov	r2, r8
 8008b56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008b5a:	3f01      	subs	r7, #1
 8008b5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008b60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008b68:	d1dc      	bne.n	8008b24 <__ieee754_sqrt+0xdc>
 8008b6a:	4319      	orrs	r1, r3
 8008b6c:	d01b      	beq.n	8008ba6 <__ieee754_sqrt+0x15e>
 8008b6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008bf4 <__ieee754_sqrt+0x1ac>
 8008b72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008bf8 <__ieee754_sqrt+0x1b0>
 8008b76:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b7e:	f7f7 fb8b 	bl	8000298 <__aeabi_dsub>
 8008b82:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	f7f7 ffb7 	bl	8000b00 <__aeabi_dcmple>
 8008b92:	b140      	cbz	r0, 8008ba6 <__ieee754_sqrt+0x15e>
 8008b94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008b98:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ba0:	d111      	bne.n	8008bc6 <__ieee754_sqrt+0x17e>
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	463c      	mov	r4, r7
 8008ba6:	1072      	asrs	r2, r6, #1
 8008ba8:	0863      	lsrs	r3, r4, #1
 8008baa:	07f1      	lsls	r1, r6, #31
 8008bac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008bb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008bb4:	bf48      	it	mi
 8008bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008bba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	e756      	b.n	8008a70 <__ieee754_sqrt+0x28>
 8008bc2:	4690      	mov	r8, r2
 8008bc4:	e7be      	b.n	8008b44 <__ieee754_sqrt+0xfc>
 8008bc6:	f7f7 fb69 	bl	800029c <__adddf3>
 8008bca:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 ff89 	bl	8000aec <__aeabi_dcmplt>
 8008bda:	b120      	cbz	r0, 8008be6 <__ieee754_sqrt+0x19e>
 8008bdc:	1ca0      	adds	r0, r4, #2
 8008bde:	bf08      	it	eq
 8008be0:	3601      	addeq	r6, #1
 8008be2:	3402      	adds	r4, #2
 8008be4:	e7df      	b.n	8008ba6 <__ieee754_sqrt+0x15e>
 8008be6:	1c63      	adds	r3, r4, #1
 8008be8:	f023 0401 	bic.w	r4, r3, #1
 8008bec:	e7db      	b.n	8008ba6 <__ieee754_sqrt+0x15e>
 8008bee:	bf00      	nop
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	200004a0 	.word	0x200004a0
 8008bf8:	20000498 	.word	0x20000498
 8008bfc:	00000000 	.word	0x00000000

08008c00 <__ieee754_log>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ec51 0b10 	vmov	r0, r1, d0
 8008c08:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008c0c:	b087      	sub	sp, #28
 8008c0e:	460d      	mov	r5, r1
 8008c10:	da26      	bge.n	8008c60 <__ieee754_log+0x60>
 8008c12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c16:	4303      	orrs	r3, r0
 8008c18:	4602      	mov	r2, r0
 8008c1a:	d10a      	bne.n	8008c32 <__ieee754_log+0x32>
 8008c1c:	49ce      	ldr	r1, [pc, #824]	@ (8008f58 <__ieee754_log+0x358>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	2000      	movs	r0, #0
 8008c24:	f7f7 fe1a 	bl	800085c <__aeabi_ddiv>
 8008c28:	ec41 0b10 	vmov	d0, r0, r1
 8008c2c:	b007      	add	sp, #28
 8008c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c32:	2900      	cmp	r1, #0
 8008c34:	da05      	bge.n	8008c42 <__ieee754_log+0x42>
 8008c36:	460b      	mov	r3, r1
 8008c38:	f7f7 fb2e 	bl	8000298 <__aeabi_dsub>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e7f0      	b.n	8008c24 <__ieee754_log+0x24>
 8008c42:	4bc6      	ldr	r3, [pc, #792]	@ (8008f5c <__ieee754_log+0x35c>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	f7f7 fcdf 	bl	8000608 <__aeabi_dmul>
 8008c4a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8008c4e:	460d      	mov	r5, r1
 8008c50:	4ac3      	ldr	r2, [pc, #780]	@ (8008f60 <__ieee754_log+0x360>)
 8008c52:	4295      	cmp	r5, r2
 8008c54:	dd06      	ble.n	8008c64 <__ieee754_log+0x64>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	f7f7 fb1f 	bl	800029c <__adddf3>
 8008c5e:	e7e3      	b.n	8008c28 <__ieee754_log+0x28>
 8008c60:	2300      	movs	r3, #0
 8008c62:	e7f5      	b.n	8008c50 <__ieee754_log+0x50>
 8008c64:	152c      	asrs	r4, r5, #20
 8008c66:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8008c6a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008c6e:	441c      	add	r4, r3
 8008c70:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8008c74:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8008c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c7c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8008c80:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8008c84:	ea42 0105 	orr.w	r1, r2, r5
 8008c88:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4bb5      	ldr	r3, [pc, #724]	@ (8008f64 <__ieee754_log+0x364>)
 8008c90:	f7f7 fb02 	bl	8000298 <__aeabi_dsub>
 8008c94:	1cab      	adds	r3, r5, #2
 8008c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	468b      	mov	fp, r1
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	dc53      	bgt.n	8008d4e <__ieee754_log+0x14e>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f7f7 ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cac:	b1d0      	cbz	r0, 8008ce4 <__ieee754_log+0xe4>
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	f000 8120 	beq.w	8008ef4 <__ieee754_log+0x2f4>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7f7 fc3d 	bl	8000534 <__aeabi_i2d>
 8008cba:	a391      	add	r3, pc, #580	@ (adr r3, 8008f00 <__ieee754_log+0x300>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	460f      	mov	r7, r1
 8008cc4:	f7f7 fca0 	bl	8000608 <__aeabi_dmul>
 8008cc8:	a38f      	add	r3, pc, #572	@ (adr r3, 8008f08 <__ieee754_log+0x308>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fc97 	bl	8000608 <__aeabi_dmul>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	e7ba      	b.n	8008c5a <__ieee754_log+0x5a>
 8008ce4:	a38a      	add	r3, pc, #552	@ (adr r3, 8008f10 <__ieee754_log+0x310>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	4650      	mov	r0, sl
 8008cec:	4659      	mov	r1, fp
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	499b      	ldr	r1, [pc, #620]	@ (8008f68 <__ieee754_log+0x368>)
 8008cfa:	f7f7 facd 	bl	8000298 <__aeabi_dsub>
 8008cfe:	4652      	mov	r2, sl
 8008d00:	4606      	mov	r6, r0
 8008d02:	460f      	mov	r7, r1
 8008d04:	465b      	mov	r3, fp
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	f7f7 fc7d 	bl	8000608 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4630      	mov	r0, r6
 8008d14:	4639      	mov	r1, r7
 8008d16:	f7f7 fc77 	bl	8000608 <__aeabi_dmul>
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	b914      	cbnz	r4, 8008d26 <__ieee754_log+0x126>
 8008d20:	4632      	mov	r2, r6
 8008d22:	463b      	mov	r3, r7
 8008d24:	e0a0      	b.n	8008e68 <__ieee754_log+0x268>
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7f7 fc04 	bl	8000534 <__aeabi_i2d>
 8008d2c:	a374      	add	r3, pc, #464	@ (adr r3, 8008f00 <__ieee754_log+0x300>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	4680      	mov	r8, r0
 8008d34:	4689      	mov	r9, r1
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	a373      	add	r3, pc, #460	@ (adr r3, 8008f08 <__ieee754_log+0x308>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 fc5e 	bl	8000608 <__aeabi_dmul>
 8008d4c:	e0a5      	b.n	8008e9a <__ieee754_log+0x29a>
 8008d4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d52:	f7f7 faa3 	bl	800029c <__adddf3>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	f7f7 fd7d 	bl	800085c <__aeabi_ddiv>
 8008d62:	e9cd 0100 	strd	r0, r1, [sp]
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7f7 fbe4 	bl	8000534 <__aeabi_i2d>
 8008d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d74:	4610      	mov	r0, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	a363      	add	r3, pc, #396	@ (adr r3, 8008f18 <__ieee754_log+0x318>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	4680      	mov	r8, r0
 8008d90:	4689      	mov	r9, r1
 8008d92:	f7f7 fc39 	bl	8000608 <__aeabi_dmul>
 8008d96:	a362      	add	r3, pc, #392	@ (adr r3, 8008f20 <__ieee754_log+0x320>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fa7e 	bl	800029c <__adddf3>
 8008da0:	4642      	mov	r2, r8
 8008da2:	464b      	mov	r3, r9
 8008da4:	f7f7 fc30 	bl	8000608 <__aeabi_dmul>
 8008da8:	a35f      	add	r3, pc, #380	@ (adr r3, 8008f28 <__ieee754_log+0x328>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa75 	bl	800029c <__adddf3>
 8008db2:	4642      	mov	r2, r8
 8008db4:	464b      	mov	r3, r9
 8008db6:	f7f7 fc27 	bl	8000608 <__aeabi_dmul>
 8008dba:	a35d      	add	r3, pc, #372	@ (adr r3, 8008f30 <__ieee754_log+0x330>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fa6c 	bl	800029c <__adddf3>
 8008dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	a35a      	add	r3, pc, #360	@ (adr r3, 8008f38 <__ieee754_log+0x338>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fc15 	bl	8000608 <__aeabi_dmul>
 8008dde:	a358      	add	r3, pc, #352	@ (adr r3, 8008f40 <__ieee754_log+0x340>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f7f7 fa5a 	bl	800029c <__adddf3>
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	a355      	add	r3, pc, #340	@ (adr r3, 8008f48 <__ieee754_log+0x348>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fa51 	bl	800029c <__adddf3>
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	f7f7 fc03 	bl	8000608 <__aeabi_dmul>
 8008e02:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8008e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e12:	f7f7 fa43 	bl	800029c <__adddf3>
 8008e16:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8008e1a:	3551      	adds	r5, #81	@ 0x51
 8008e1c:	4335      	orrs	r5, r6
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	4680      	mov	r8, r0
 8008e22:	4689      	mov	r9, r1
 8008e24:	dd48      	ble.n	8008eb8 <__ieee754_log+0x2b8>
 8008e26:	4b50      	ldr	r3, [pc, #320]	@ (8008f68 <__ieee754_log+0x368>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	f7f7 fbeb 	bl	8000608 <__aeabi_dmul>
 8008e32:	4652      	mov	r2, sl
 8008e34:	465b      	mov	r3, fp
 8008e36:	f7f7 fbe7 	bl	8000608 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	4640      	mov	r0, r8
 8008e44:	4649      	mov	r1, r9
 8008e46:	f7f7 fa29 	bl	800029c <__adddf3>
 8008e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e4e:	f7f7 fbdb 	bl	8000608 <__aeabi_dmul>
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	b964      	cbnz	r4, 8008e72 <__ieee754_log+0x272>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fa1a 	bl	8000298 <__aeabi_dsub>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4650      	mov	r0, sl
 8008e6a:	4659      	mov	r1, fp
 8008e6c:	f7f7 fa14 	bl	8000298 <__aeabi_dsub>
 8008e70:	e6da      	b.n	8008c28 <__ieee754_log+0x28>
 8008e72:	a323      	add	r3, pc, #140	@ (adr r3, 8008f00 <__ieee754_log+0x300>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	a321      	add	r3, pc, #132	@ (adr r3, 8008f08 <__ieee754_log+0x308>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	4604      	mov	r4, r0
 8008e88:	460d      	mov	r5, r1
 8008e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e8e:	f7f7 fbbb 	bl	8000608 <__aeabi_dmul>
 8008e92:	4642      	mov	r2, r8
 8008e94:	464b      	mov	r3, r9
 8008e96:	f7f7 fa01 	bl	800029c <__adddf3>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	f7f7 f9f9 	bl	8000298 <__aeabi_dsub>
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	465b      	mov	r3, fp
 8008eaa:	f7f7 f9f5 	bl	8000298 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	e7d9      	b.n	8008e6c <__ieee754_log+0x26c>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	4659      	mov	r1, fp
 8008ec0:	f7f7 f9ea 	bl	8000298 <__aeabi_dsub>
 8008ec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ec8:	f7f7 fb9e 	bl	8000608 <__aeabi_dmul>
 8008ecc:	4606      	mov	r6, r0
 8008ece:	460f      	mov	r7, r1
 8008ed0:	2c00      	cmp	r4, #0
 8008ed2:	f43f af25 	beq.w	8008d20 <__ieee754_log+0x120>
 8008ed6:	a30a      	add	r3, pc, #40	@ (adr r3, 8008f00 <__ieee754_log+0x300>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee0:	f7f7 fb92 	bl	8000608 <__aeabi_dmul>
 8008ee4:	a308      	add	r3, pc, #32	@ (adr r3, 8008f08 <__ieee754_log+0x308>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef2:	e729      	b.n	8008d48 <__ieee754_log+0x148>
 8008ef4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8008f50 <__ieee754_log+0x350>
 8008ef8:	e698      	b.n	8008c2c <__ieee754_log+0x2c>
 8008efa:	bf00      	nop
 8008efc:	f3af 8000 	nop.w
 8008f00:	fee00000 	.word	0xfee00000
 8008f04:	3fe62e42 	.word	0x3fe62e42
 8008f08:	35793c76 	.word	0x35793c76
 8008f0c:	3dea39ef 	.word	0x3dea39ef
 8008f10:	55555555 	.word	0x55555555
 8008f14:	3fd55555 	.word	0x3fd55555
 8008f18:	df3e5244 	.word	0xdf3e5244
 8008f1c:	3fc2f112 	.word	0x3fc2f112
 8008f20:	96cb03de 	.word	0x96cb03de
 8008f24:	3fc74664 	.word	0x3fc74664
 8008f28:	94229359 	.word	0x94229359
 8008f2c:	3fd24924 	.word	0x3fd24924
 8008f30:	55555593 	.word	0x55555593
 8008f34:	3fe55555 	.word	0x3fe55555
 8008f38:	d078c69f 	.word	0xd078c69f
 8008f3c:	3fc39a09 	.word	0x3fc39a09
 8008f40:	1d8e78af 	.word	0x1d8e78af
 8008f44:	3fcc71c5 	.word	0x3fcc71c5
 8008f48:	9997fa04 	.word	0x9997fa04
 8008f4c:	3fd99999 	.word	0x3fd99999
	...
 8008f58:	c3500000 	.word	0xc3500000
 8008f5c:	43500000 	.word	0x43500000
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	3ff00000 	.word	0x3ff00000
 8008f68:	3fe00000 	.word	0x3fe00000

08008f6c <_init>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr

08008f78 <_fini>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr
